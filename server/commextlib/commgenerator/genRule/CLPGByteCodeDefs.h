// Copyright (C) 2012 PYR Software Ltd. All rights reserved.

#ifndef CLPGByteCodeDefs_h_included
#define CLPGByteCodeDefs_h_included

//******************************************************************************
// This is the byte code definitions
//******************************************************************************

union CLPGByteCodeDATATYPE    
{
	CLPGByteCodeDATATYPE(void){ui64 = 0;}
	INT8		i8;
	BYTE		ui8;
	INT16		i16;
	UINT16		ui16;
	INT32		i32;
	UINT32		ui32;
	INT64		i64;
	UINT64		ui64;
	bool		b;
	const char*	s;
	void*		p;
};          

// Version
#define CLPG_BC_GEN_VERSION				1

// Input parser types
#define CLPG_BC_GEN_OP_UNDEF			0
#define CLPG_BC_GEN_OP_VAR				1
#define CLPG_BC_GEN_OP_INT				2
#define CLPG_BC_GEN_OP_STR				3
#define CLPG_BC_GEN_OP_CHAR				4
#define CLPG_BC_GEN_OP_TRUE				5
#define CLPG_BC_GEN_OP_FALSE			6
#define CLPG_BC_GEN_OP_NULL				7
#define CLPG_BC_GEN_OP_STACK			8

// Init objects
#define CLPG_BC_GEN_INIT_NONE			0
#define CLPG_BC_GEN_INIT_CASE			1
#define CLPG_BC_GEN_INIT_MAIL			2
#define CLPG_BC_GEN_INIT_RULE			3

// Data bit values
#define CLPG_BC_GEN_UNDEF				(UINT64)0x0000000000000000

// Sort
#define CLPG_BC_GEN_SORTMASK			(UINT64)0xFF00000000000000
#define CLPG_BC_GEN_VAR					(UINT64)0x0100000000000000
#define CLPG_BC_GEN_COMMAND				(UINT64)0x0200000000000000
#define CLPG_BC_GEN_BLOCK				(UINT64)0x0300000000000000
#define CLPG_BC_GEN_REFERENCE			(UINT64)0x0500000000000000
#define CLPG_BC_GEN_CONST				(UINT64)0x0600000000000000

// Operand
#define CLPG_BC_VAR_TYPEMASK			(UINT64)0x00FF000000000000
#define CLPG_BC_VAR_SUBTYPEMASK			(UINT64)0x00000000FFFFFFFF
#define CLPG_BC_VAR_DATAAMOUNTMASK		(UINT64)0x000000FF00000000

#define CLPG_BC_SET_DATAAMOUNT(n)		((UINT64)n << 32)
#define CLPG_BC_GET_DATAAMOUNT(n)		(((UINT64)n & CLPG_BC_VAR_DATAAMOUNTMASK) >> 32)

// Type
#define CLPG_BC_VAR_INT					(UINT64)0x0001000000000000
#define CLPG_BC_VAR_BOOL				(UINT64)0x0002000000000000
#define CLPG_BC_VAR_CONTAINER			(UINT64)0x0003000000000000
#define CLPG_BC_VAR_OBJECT				(UINT64)0x0004000000000000
#define CLPG_BC_VAR_STRING				(UINT64)0x0005000000000000
#define CLPG_BC_VAR_TEMPLATE			(UINT64)0x0006000000000000
#define CLPG_BC_VAR_VOID				(UINT64)0x0007000000000000

// Modificators - bits
#define CLPG_BC_VAR_CONSTDATA			(UINT64)0x0000010000000000
#define CLPG_BC_VAR_EXTERNAL			(UINT64)0x0000020000000000

// Standard bool data
#define CLPG_BC_VAR_BOOL_TRUE			(UINT64)0x0000000000000001
#define CLPG_BC_VAR_BOOL_FALSE			(UINT64)0x0000000000000000

// Standard object data
#define CLPG_BC_VAR_OBJ_NULL			(UINT64)0x0000000000000000
#define CLPG_BC_VAR_OBJ_BASECLASS		(UINT64)0x0000000000000001
#define CLPG_BC_NAME_BASECLASS			"CommExtObject"

// Subtype
#define CLPG_BC_VAR_INT8				(UINT64)0x0000000000000001
#define CLPG_BC_VAR_BYTE				(UINT64)0x0000000000000002
#define CLPG_BC_VAR_INT16				(UINT64)0x0000000000000003
#define CLPG_BC_VAR_UINT16				(UINT64)0x0000000000000004
#define CLPG_BC_VAR_INT32				(UINT64)0x0000000000000005
#define CLPG_BC_VAR_UINT32				(UINT64)0x0000000000000006
#define CLPG_BC_VAR_INT64				(UINT64)0x0000000000000007
#define CLPG_BC_VAR_UINT64				(UINT64)0x0000000000000008

// Block
#define CLPG_BC_BLK_TYPEMASK			(UINT64)0x00FF000000000000
#define CLPG_BC_BLK_SIZEMASK			(UINT64)0x0000FFFF00000000
#define CLPG_BC_BLK_ADDRMASK			(UINT64)0x00000000FFFFFFFF

// Type
#define CLPG_BC_BLK_BLOCK_BEGIN			(UINT64)0x0001000000000000
#define CLPG_BC_BLK_BLOCK_END			(UINT64)0x0002000000000000

// Command
#define CLPG_BC_CMD_COMMANDMASK			(UINT64)0x00000000FFFFFFFF
#define CLPG_BC_CMD_COMMONLYMASK		(UINT64)0x00000000FFFFFF00
#define CLPG_BC_CMD_OPERAMOUNTMASK		(UINT64)0x00000000000000FF

// Commands (full code with sort)
#define CLPG_BC_CMD_STOP				(UINT64)0x0200000000000000		// stop execution

// Stack and memory
#define CLPG_BC_CMD_POP					(UINT64)0x0200000100000001		// delete one data from stack
#define CLPG_BC_CMD_CLEAR				(UINT64)0x0200000100000002		// erase stack data
#define CLPG_BC_CMD_COPY_DATA			(UINT64)0x0200000100000003		// copy data to stack
#define CLPG_BC_CMD_COPY_REF			(UINT64)0x0200000100000004		// copy data by reference to stack
#define CLPG_BC_CMD_DATA_ALLOC			(UINT64)0x0200000100000005		// allocate data

// Unary math
#define CLPG_BC_CMD_PLUSPLUS			(UINT64)0x0200000200000001		// ++
#define CLPG_BC_CMD_MINUSMINUS			(UINT64)0x0200000200000002		// --
#define CLPG_BC_CMD_SIGNMINUS			(UINT64)0x0200000200000003		// - for sign

// Binary math
#define CLPG_BC_CMD_ASSIGNMENT			(UINT64)0x0200000300000001		// assignment
#define CLPG_BC_CMD_PLUS				(UINT64)0x0200000300000002		// +
#define CLPG_BC_CMD_MINUS				(UINT64)0x0200000300000003		// -
#define CLPG_BC_CMD_MUL					(UINT64)0x0200000300000004		// *
#define CLPG_BC_CMD_DIV					(UINT64)0x0200000300000005		// /
#define CLPG_BC_CMD_BAND				(UINT64)0x0200000300000006		// &
#define CLPG_BC_CMD_BXOR				(UINT64)0x0200000300000007		// ^
#define CLPG_BC_CMD_BOR					(UINT64)0x0200000300000008		// |
#define CLPG_BC_CMD_EQ					(UINT64)0x0200000300000009		// ==
#define CLPG_BC_CMD_NOTEQ				(UINT64)0x020000030000000a		// !=
#define CLPG_BC_CMD_MORE				(UINT64)0x020000030000000b		// >
#define CLPG_BC_CMD_MOREEQ				(UINT64)0x020000030000000c		// >=
#define CLPG_BC_CMD_LESS				(UINT64)0x020000030000000d		// <
#define CLPG_BC_CMD_LESSEQ				(UINT64)0x020000030000000e		// <=
#define CLPG_BC_CMD_AND					(UINT64)0x020000030000000f		// &&
#define CLPG_BC_CMD_OR					(UINT64)0x0200000300000010		// ||
#define CLPG_BC_CMD_STRPLUS				(UINT64)0x0200000300000011		// + for strings
#define CLPG_BC_CMD_STREQ				(UINT64)0x0200000300000012		// == for strings
#define CLPG_BC_CMD_STRNOTEQ			(UINT64)0x0200000300000013		// != for strings
#define CLPG_BC_CMD_OBJEQ				(UINT64)0x0200000300000014		// == for objects
#define CLPG_BC_CMD_OBJNOTEQ			(UINT64)0x0200000300000015		// != for objects
#define CLPG_BC_CMD_MOD					(UINT64)0x0200000300000016		// %

// Triple math

// Access
#define CLPG_BC_CMD_OBJFIELD			(UINT64)0x0200000500000001		// class field
#define CLPG_BC_CMD_OBJFIELDIDX			(UINT64)0x0200000500000002		// class field vector index
#define CLPG_BC_CMD_OBJFIELDSIZE		(UINT64)0x0200000500000003		// class field vector size
#define CLPG_BC_CMD_OBJINIT				(UINT64)0x0200000500000004		// standard class object init

// Operators
#define CLPG_BC_CMD_GOTO				(UINT64)0x0200000600000001		// goto
#define CLPG_BC_CMD_GOTOFALSE			(UINT64)0x0200000600000002		// goto if false
#define CLPG_BC_CMD_GOTOTRUE			(UINT64)0x0200000600000003		// goto if true

//Functions
#define CLPG_BC_CMD_PRINT				(UINT64)0x0200000700000001		// print to log
#define CLPG_BC_CMD_CALL				(UINT64)0x0200000700000002		// call function

#endif	// CLPGByteCodeDefs_h_included
