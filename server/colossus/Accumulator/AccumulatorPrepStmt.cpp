////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2016 PYR Software Ltd. All rights reserved.
////////////////////////////////////////////////////////////////////////////////

#include "AccumulatorDbManager.h"

//////////////////////////////////////////////////////////////////////////////////////

static const char* ACCUMTOURNCOLUMNNAMES = 
/*   5 */  ",sum(CAST (TOTALINVESTED as BIGINT)) TOTALINVESTED,sum(TOTALTOURNS) TOTALTOURNS,sum(CAST (USERTOTALPROFIT as BIGINT)) USERTOTALPROFIT,sum(CAST (RAKEPAID as BIGINT)) RAKEPAID,sum(CASE WHEN TOTALTOURNSWONMONEY=-1 THEN 0 ELSE TOTALTOURNSWONMONEY END) TOTALTOURNSWONMONEY"
;

static const char* ZEROTOURNCOLUMNNAMES = 
/*   5 */  ",0 TOTALINVESTED,0 TOTALTOURNS,0 USERTOTALPROFIT,0 RAKEPAID,0 TOTALTOURNSWONMONEY"
;

static const char* ACCUMHANDCOLUMNNAMES = 
/*   5 */  ",sum(TOTALHANDS) TOTALHANDS,sum(CAST (TOTALWIN as BIGINT)) TOTALWIN,sum(CAST (TOTALBLINDSANTESPAID as BIGINT)) TOTALBLINDSANTESPAID,sum(CAST (TOTALRAKEPAID as BIGINT)) TOTALRAKEPAID,sum(NUMBIGBLINDS) NUMBIGBLINDS"
/*  10 */  ",sum(NUMSMALLBLINDS) NUMSMALLBLINDS,sum(NUMBLINDSPAIDOUTOFPOSITION) NUMBLINDSPAIDOUTOFPOSITION,sum(NUMVPIP) NUMVPIP,sum(NUMVPIPFROMSMALLBLIND) NUMVPIPFROMSMALLBLIND,sum(NUMVPIPFROMBIGBLIND) NUMVPIPFROMBIGBLIND"
/*  15 */  ",sum(NUMSAWSHOWDOWN) NUMSAWSHOWDOWN,sum(NUMWONSHOWDOWN) NUMWONSHOWDOWN,sum(NUMWONAFTERFLOP) NUMWONAFTERFLOP,sum(NUMLIMP) NUMLIMP,sum(NUMLIMPRAISE) NUMLIMPRAISE"
/*  20 */  ",sum(NUMLIMPCALL) NUMLIMPCALL,sum(NUMLIMPFOLD) NUMLIMPFOLD,sum(NUMALLINPREFLOP) NUMALLINPREFLOP,sum(NUMCOLDCALLOPPORTUNITIES) NUMCOLDCALLOPPORTUNITIES,sum(NUMCOLDCALLS) NUMCOLDCALLS"
/*  25 */  ",sum(NUM3BETOPPORTUNITIES) NUM3BETOPPORTUNITIES,sum(NUM3BETS) NUM3BETS,sum(NUMFACING3BET) NUMFACING3BET,sum(NUMFOLDTO3BET) NUMFOLDTO3BET,sum(NUM4PLUSBET) NUM4PLUSBET"
/*  30 */  ",sum(NUMSAWFLOP) NUMSAWFLOP,sum(NUMSAWTURN) NUMSAWTURN,sum(NUMSAWRIVER) NUMSAWRIVER,sum(NUMSAW7TH) NUMSAW7TH,sum(NUMFACING4PLUSBET) NUMFACING4PLUSBET"
/*  35 */  ",sum(NUMFOLDTO4PLUSBET) NUMFOLDTO4PLUSBET,sum(NUMTURNSPREFLOP) NUMTURNSPREFLOP,sum(NUMTURNSFACINGBETONFLOP) NUMTURNSFACINGBETONFLOP,sum(NUMTURNSFACINGNOBETONFLOP) NUMTURNSFACINGNOBETONFLOP,sum(NUMTURNSFACINGBETONTURN) NUMTURNSFACINGBETONTURN"
/*  40 */  ",sum(NUMTURNSFACINGNOBETONTURN) NUMTURNSFACINGNOBETONTURN,sum(NUMTURNSFACINGBETONRIVER) NUMTURNSFACINGBETONRIVER,sum(NUMTURNSFACINGNOBETONRIVER) NUMTURNSFACINGNOBETONRIVER,sum(NUMTURNSFACINGBETON7TH) NUMTURNSFACINGBETON7TH,sum(NUMTURNSFACINGNOBETON7TH) NUMTURNSFACINGNOBETON7TH"
/*  45 */  ",sum(NUMLASTAGRESSORPREFLOP) NUMLASTAGRESSORPREFLOP,sum(NUMLASTAGRESSORONFLOP) NUMLASTAGRESSORONFLOP,sum(NUMLASTAGRESSORONTURN) NUMLASTAGRESSORONTURN,sum(NUMLASTAGRESSORONRIVER) NUMLASTAGRESSORONRIVER,sum(NUMCONTBETONFLOP) NUMCONTBETONFLOP"
/*  50 */  ",sum(NUMCONTBETONTURN) NUMCONTBETONTURN,sum(NUMCONTBETONRIVER) NUMCONTBETONRIVER,sum(NUMCONTBETON7TH) NUMCONTBETON7TH,sum(NUMBETPREFLOP) NUMBETPREFLOP,sum(NUMBETONFLOP) NUMBETONFLOP"
/*  55 */  ",sum(NUMBETONTURN) NUMBETONTURN,sum(NUMBETONRIVER) NUMBETONRIVER,sum(NUMBETON7TH) NUMBETON7TH,sum(NUMCHECKONFLOP) NUMCHECKONFLOP,sum(NUMCHECKONTURN) NUMCHECKONTURN"
/*  60 */  ",sum(NUMCHECKONRIVER) NUMCHECKONRIVER,sum(NUMCHECKON7TH) NUMCHECKON7TH,sum(NUMFOLDPREFLOP) NUMFOLDPREFLOP,sum(NUMFOLDONFLOP) NUMFOLDONFLOP,sum(NUMFOLDONTURN) NUMFOLDONTURN"
/*  65 */  ",sum(NUMFOLDONRIVER) NUMFOLDONRIVER,sum(NUMFOLDON7TH) NUMFOLDON7TH,sum(NUMCALLSPREFLOP) NUMCALLSPREFLOP,sum(NUMCALLSONFLOP) NUMCALLSONFLOP,sum(NUMCALLSONTURN) NUMCALLSONTURN"
/*  70 */  ",sum(NUMCALLSONRIVER) NUMCALLSONRIVER,sum(NUMCALLSON7TH) NUMCALLSON7TH,sum(NUMRAISESPREFLOP) NUMRAISESPREFLOP,sum(NUMRAISESONFLOP) NUMRAISESONFLOP,sum(NUMRAISESONTURN) NUMRAISESONTURN"
/*  75 */  ",sum(NUMRAISESONRIVER) NUMRAISESONRIVER,sum(NUMRAISESON7TH) NUMRAISESON7TH,sum(NUMCHECKCALLONFLOP) NUMCHECKCALLONFLOP,sum(NUMCHECKCALLONTURN) NUMCHECKCALLONTURN,sum(NUMCHECKCALLONRIVER) NUMCHECKCALLONRIVER"
/*  80 */  ",sum(NUMCHECKCALLON7TH) NUMCHECKCALLON7TH,sum(NUMCHECKRAISEONFLOP) NUMCHECKRAISEONFLOP,sum(NUMCHECKRAISEONTURN) NUMCHECKRAISEONTURN,sum(NUMCHECKRAISEONRIVER) NUMCHECKRAISEONRIVER,sum(NUMCHECKRAISEON7TH) NUMCHECKRAISEON7TH"
/*  85 */  ",sum(NUMCHECKFOLDONFLOP) NUMCHECKFOLDONFLOP,sum(NUMCHECKFOLDONTURN) NUMCHECKFOLDONTURN,sum(NUMCHECKFOLDONRIVER) NUMCHECKFOLDONRIVER,sum(NUMCHECKFOLDON7TH) NUMCHECKFOLDON7TH,sum(NUMOPENFOLDPOWERFULHAND) NUMOPENFOLDPOWERFULHAND"
/*  90 */  ",sum(NUMFOLDTOEXTREMEODDS) NUMFOLDTOEXTREMEODDS,sum(NUMRERAISEWITHGARBAGE) NUMRERAISEWITHGARBAGE,sum(NUMCHECKBEHINDONRIVER) NUMCHECKBEHINDONRIVER,sum(NUMFOLDWHENCOULDCHECK) NUMFOLDWHENCOULDCHECK,sum(NUMATTEMPTSTEALBLINDS) NUMATTEMPTSTEALBLINDS"
/*  95 */  ",sum(NUMFOLDTOSTEALFROMSBOPPS) NUMFOLDTOSTEALFROMSBOPPS,sum(NUMFOLDTOSTEALFROMSB) NUMFOLDTOSTEALFROMSB,sum(NUMFOLDTOSTEALFROMBBOPPS) NUMFOLDTOSTEALFROMBBOPPS,sum(NUMFOLDTOSTEALFROMBB) NUMFOLDTOSTEALFROMBB,sum(NUMCHECKRAISEOPPSONFLOP) NUMCHECKRAISEOPPSONFLOP"
/* 100 */  ",sum(NUMCHECKRAISEOPPSONTURN) NUMCHECKRAISEOPPSONTURN,sum(NUMCHECKRAISEOPPSONRIVER) NUMCHECKRAISEOPPSONRIVER,sum(NUMCHECKRAISEOPPSON7TH) NUMCHECKRAISEOPPSON7TH,sum(NUMATTEMPTSTEALBLINDSOPPS) NUMATTEMPTSTEALBLINDSOPPS,sum(NUM4BETOPPORTUNITIES) NUM4BETOPPORTUNITIES"
/* 105 */  ",sum(NUMHANDSRAISEDPREFLOP) NUMHANDSRAISEDPREFLOP,sum(NUMCALLBETSONLYPREFLOP) NUMCALLBETSONLYPREFLOP,sum(NUMCALLBETSONLYONFLOP) NUMCALLBETSONLYONFLOP,sum(NUMCALLBETSONLYONTURN) NUMCALLBETSONLYONTURN,sum(NUMCALLBETSONLYONRIVER) NUMCALLBETSONLYONRIVER"
/* 110 */  ",sum(NUMCALLBETSONLYON7TH) NUMCALLBETSONLYON7TH,sum(NUMTURNSFACINGBETONLYONFLOP) NUMTURNSFACINGBETONLYONFLOP,sum(NUMTURNSFACINGBETONLYONTURN) NUMTURNSFACINGBETONLYONTURN,sum(NUMTURNSFACINGBETONLYONRIVER) NUMTURNSFACINGBETONLYONRIVER,sum(NUMTURNSFACINGBETONLYON7TH) NUMTURNSFACINGBETONLYON7TH"
/* 115 */  ",sum(NUMFOLDTOBETONLYPREFLOP) NUMFOLDTOBETONLYPREFLOP,sum(NUMFOLDTOBETONLYONFLOP) NUMFOLDTOBETONLYONFLOP,sum(NUMFOLDTOBETONLYONTURN) NUMFOLDTOBETONLYONTURN,sum(NUMFOLDTOBETONLYONRIVER) NUMFOLDTOBETONLYONRIVER,sum(NUMFOLDTOBETONLYON7TH) NUMFOLDTOBETONLYON7TH"
/* 120 */  ",sum(TOTALPLAYERSINHANDS) TOTALPLAYERSINHANDS,sum(CAST (TOTALBET as BIGINT)) TOTALBET,sum(NUMFACING3BET_HEM) NUMFACING3BET_HEM,sum(NUMFOLDTO3BET_HEM) NUMFOLDTO3BET_HEM,sum(NUMFACING4PLUSBET_HEM) NUMFACING4PLUSBET_HEM"
/* 125 */  ",sum(NUMFOLDTO4PLUSBET_HEM) NUMFOLDTO4PLUSBET_HEM,sum(NUMCONTBETOPPSVS2INPOSONFLOP) NUMCONTBETOPPSVS2INPOSONFLOP,sum(NUMCONTBETOPPSVS2INPOSONTURN) NUMCONTBETOPPSVS2INPOSONTURN,sum(NUMCONTBETOPPSVS2INPOSONRIVER) NUMCONTBETOPPSVS2INPOSONRIVER,sum(NUMCONTBETOPPSVS2INPOSON7TH) NUMCONTBETOPPSVS2INPOSON7TH"
/* 129 */  ",sum(NUMCONTBETVS2INPOSONFLOP) NUMCONTBETVS2INPOSONFLOP,sum(NUMCONTBETVS2INPOSONTURN) NUMCONTBETVS2INPOSONTURN,sum(NUMCONTBETVS2INPOSONRIVER) NUMCONTBETVS2INPOSONRIVER,sum(NUMCONTBETVS2INPOSON7TH) NUMCONTBETVS2INPOSON7TH";

static const char* ZEROHANDCOLUMNNAMES = 
/*   5 */  ",0 TOTALHANDS,0 TOTALWIN,0 TOTALBLINDSANTESPAID,0 TOTALRAKEPAID,0 NUMBIGBLINDS"
/*  10 */  ",0 NUMSMALLBLINDS,0 NUMBLINDSPAIDOUTOFPOSITION,0 NUMVPIP,0 NUMVPIPFROMSMALLBLIND,0 NUMVPIPFROMBIGBLIND"
/*  15 */  ",0 NUMSAWSHOWDOWN,0 NUMWONSHOWDOWN,0 NUMWONAFTERFLOP,0 NUMLIMP,0 NUMLIMPRAISE"
/*  20 */  ",0 NUMLIMPCALL,0 NUMLIMPFOLD,0 NUMALLINPREFLOP,0 NUMCOLDCALLOPPORTUNITIES,0 NUMCOLDCALLS"
/*  25 */  ",0 NUM3BETOPPORTUNITIES,0 NUM3BETS,0 NUMFACING3BET,0 NUMFOLDTO3BET,0 NUM4PLUSBET"
/*  30 */  ",0 NUMSAWFLOP,0 NUMSAWTURN,0 NUMSAWRIVER,0 NUMSAW7TH,0 NUMFACING4PLUSBET"
/*  35 */  ",0 NUMFOLDTO4PLUSBET,0 NUMTURNSPREFLOP,0 NUMTURNSFACINGBETONFLOP,0 NUMTURNSFACINGNOBETONFLOP,0 NUMTURNSFACINGBETONTURN"
/*  40 */  ",0 NUMTURNSFACINGNOBETONTURN,0 NUMTURNSFACINGBETONRIVER,0 NUMTURNSFACINGNOBETONRIVER,0 NUMTURNSFACINGBETON7TH,0 NUMTURNSFACINGNOBETON7TH"
/*  45 */  ",0 NUMLASTAGRESSORPREFLOP,0 NUMLASTAGRESSORONFLOP,0 NUMLASTAGRESSORONTURN,0 NUMLASTAGRESSORONRIVER,0 NUMCONTBETONFLOP"
/*  50 */  ",0 NUMCONTBETONTURN,0 NUMCONTBETONRIVER,0 NUMCONTBETON7TH,0 NUMBETPREFLOP,0 NUMBETONFLOP"
/*  55 */  ",0 NUMBETONTURN,0 NUMBETONRIVER,0 NUMBETON7TH,0 NUMCHECKONFLOP,0 NUMCHECKONTURN"
/*  60 */  ",0 NUMCHECKONRIVER,0 NUMCHECKON7TH,0 NUMFOLDPREFLOP,0 NUMFOLDONFLOP,0 NUMFOLDONTURN"
/*  65 */  ",0 NUMFOLDONRIVER,0 NUMFOLDON7TH,0 NUMCALLSPREFLOP,0 NUMCALLSONFLOP,0 NUMCALLSONTURN"
/*  70 */  ",0 NUMCALLSONRIVER,0 NUMCALLSON7TH,0 NUMRAISESPREFLOP,0 NUMRAISESONFLOP,0 NUMRAISESONTURN"
/*  75 */  ",0 NUMRAISESONRIVER,0 NUMRAISESON7TH,0 NUMCHECKCALLONFLOP,0 NUMCHECKCALLONTURN,0 NUMCHECKCALLONRIVER"
/*  80 */  ",0 NUMCHECKCALLON7TH,0 NUMCHECKRAISEONFLOP,0 NUMCHECKRAISEONTURN,0 NUMCHECKRAISEONRIVER,0 NUMCHECKRAISEON7TH"
/*  85 */  ",0 NUMCHECKFOLDONFLOP,0 NUMCHECKFOLDONTURN,0 NUMCHECKFOLDONRIVER,0 NUMCHECKFOLDON7TH,0 NUMOPENFOLDPOWERFULHAND"
/*  90 */  ",0 NUMFOLDTOEXTREMEODDS,0 NUMRERAISEWITHGARBAGE,0 NUMCHECKBEHINDONRIVER,0 NUMFOLDWHENCOULDCHECK,0 NUMATTEMPTSTEALBLINDS"
/*  95 */  ",0 NUMFOLDTOSTEALFROMSBOPPS,0 NUMFOLDTOSTEALFROMSB,0 NUMFOLDTOSTEALFROMBBOPPS,0 NUMFOLDTOSTEALFROMBB,0 NUMCHECKRAISEOPPSONFLOP"
/* 100 */  ",0 NUMCHECKRAISEOPPSONTURN,0 NUMCHECKRAISEOPPSONRIVER,0 NUMCHECKRAISEOPPSON7TH,0 NUMATTEMPTSTEALBLINDSOPPS,0 NUM4BETOPPORTUNITIES"
/* 105 */  ",0 NUMHANDSRAISEDPREFLOP,0 NUMCALLBETSONLYPREFLOP,0 NUMCALLBETSONLYONFLOP,0 NUMCALLBETSONLYONTURN,0 NUMCALLBETSONLYONRIVER"
/* 110 */  ",0 NUMCALLBETSONLYON7TH,0 NUMTURNSFACINGBETONLYONFLOP,0 NUMTURNSFACINGBETONLYONTURN,0 NUMTURNSFACINGBETONLYONRIVER,0 NUMTURNSFACINGBETONLYON7TH"
/* 115 */  ",0 NUMFOLDTOBETONLYPREFLOP,0 NUMFOLDTOBETONLYONFLOP,0 NUMFOLDTOBETONLYONTURN,0 NUMFOLDTOBETONLYONRIVER,0 NUMFOLDTOBETONLYON7TH"
/* 120 */  ",0 TOTALPLAYERSINHANDS,0 TOTALBET,0 NUMFACING3BET_HEM,0 NUMFOLDTO3BET_HEM,0 NUMFACING4PLUSBET_HEM"
/* 125 */  ",0 NUMFOLDTO4PLUSBET_HEM,0 NUMCONTBETOPPSVS2INPOSONFLOP,0 NUMCONTBETOPPSVS2INPOSONTURN,0 NUMCONTBETOPPSVS2INPOSONRIVER,0 NUMCONTBETOPPSVS2INPOSON7TH"
/* 129 */  ",0 NUMCONTBETVS2INPOSONFLOP,0 NUMCONTBETVS2INPOSONTURN,0 NUMCONTBETVS2INPOSONRIVER,0 NUMCONTBETVS2INPOSON7TH"
;

static const char* ACCUMWEEKLYSTATSDATACOLUMNS = 
",T2.TOTALINVESTED	+ VALUE(A.TOTALINVESTED,0)	TOTALINVESTED"
",T2.TOTALTOURNS	+	VALUE(A.TOTALTOURNS,0)	TOTALTOURNS"
",T2.USERTOTALPROFIT	+	VALUE(A.USERTOTALPROFIT,0)	USERTOTALPROFIT"
",T2.RAKEPAID	+	VALUE(A.RAKEPAID,0)	RAKEPAID"
",T2.TOTALTOURNSWONMONEY	+	VALUE(A.TOTALTOURNSWONMONEY,0)	TOTALTOURNSWONMONEY"
",T2.TOTALHANDS	+	VALUE(A.TOTALHANDS,0)	TOTALHANDS"
",T2.TOTALWIN	+	VALUE(A.TOTALWIN,0)		TOTALWIN"
",T2.TOTALBLINDSANTESPAID	+	VALUE(A.TOTALBLINDSANTESPAID,0)	TOTALBLINDSANTESPAID"
",T2.TOTALRAKEPAID	+	VALUE(A.TOTALRAKEPAID,0) TOTALRAKEPAID"
",T2.NUMBIGBLINDS	+	VALUE(A.NUMBIGBLINDS,0)	NUMBIGBLINDS"
",T2.NUMSMALLBLINDS	+	VALUE(A.NUMSMALLBLINDS,0)	NUMSMALLBLINDS"
",T2.NUMBLINDSPAIDOUTOFPOSITION	+	VALUE(A.NUMBLINDSPAIDOUTOFPOSITION,0)	NUMBLINDSPAIDOUTOFPOSITION"
",T2.NUMVPIP	+	VALUE(A.NUMVPIP,0)	NUMVPIP"
",T2.NUMVPIPFROMSMALLBLIND	+	VALUE(A.NUMVPIPFROMSMALLBLIND,0)	NUMVPIPFROMSMALLBLIND"
",T2.NUMVPIPFROMBIGBLIND	+	VALUE(A.NUMVPIPFROMBIGBLIND,0)	NUMVPIPFROMBIGBLIND"
",T2.NUMSAWSHOWDOWN	+	VALUE(A.NUMSAWSHOWDOWN,0)	NUMSAWSHOWDOWN"
",T2.NUMWONSHOWDOWN	+	VALUE(A.NUMWONSHOWDOWN,0)	NUMWONSHOWDOWN"
",T2.NUMWONAFTERFLOP	+	VALUE(A.NUMWONAFTERFLOP,0)	NUMWONAFTERFLOP"
",T2.NUMLIMP	+	VALUE(A.NUMLIMP,0)	NUMLIMP"
",T2.NUMLIMPRAISE	+	VALUE(A.NUMLIMPRAISE,0)	NUMLIMPRAISE"
",T2.NUMLIMPCALL	+	VALUE(A.NUMLIMPCALL,0)	NUMLIMPCALL"
",T2.NUMLIMPFOLD	+	VALUE(A.NUMLIMPFOLD,0)	NUMLIMPFOLD"
",T2.NUMALLINPREFLOP	+	VALUE(A.NUMALLINPREFLOP,0)	NUMALLINPREFLOP"
",T2.NUMCOLDCALLOPPORTUNITIES	+	VALUE(A.NUMCOLDCALLOPPORTUNITIES,0)	NUMCOLDCALLOPPORTUNITIES"
",T2.NUMCOLDCALLS	+	VALUE(A.NUMCOLDCALLS,0)	NUMCOLDCALLS"
",T2.NUM3BETOPPORTUNITIES	+	VALUE(A.NUM3BETOPPORTUNITIES,0)	NUM3BETOPPORTUNITIES"
",T2.NUM3BETS	+	VALUE(A.NUM3BETS,0)	NUM3BETS"
",T2.NUMFACING3BET	+	VALUE(A.NUMFACING3BET,0)	NUMFACING3BET"
",T2.NUMFOLDTO3BET	+	VALUE(A.NUMFOLDTO3BET,0)	NUMFOLDTO3BET"
",T2.NUM4PLUSBET	+	VALUE(A.NUM4PLUSBET,0)	NUM4PLUSBET"
",T2.NUMSAWFLOP	+	VALUE(A.NUMSAWFLOP,0)	NUMSAWFLOP"
",T2.NUMSAWTURN	+	VALUE(A.NUMSAWTURN,0)	NUMSAWTURN"
",T2.NUMSAWRIVER	+	VALUE(A.NUMSAWRIVER,0)	NUMSAWRIVER"
",T2.NUMSAW7TH	+	VALUE(A.NUMSAW7TH,0)	NUMSAW7TH"
",T2.NUMFACING4PLUSBET	+	VALUE(A.NUMFACING4PLUSBET,0)	NUMFACING4PLUSBET"
",T2.NUMFOLDTO4PLUSBET	+	VALUE(A.NUMFOLDTO4PLUSBET,0)	NUMFOLDTO4PLUSBET"
",T2.NUMTURNSPREFLOP	+	VALUE(A.NUMTURNSPREFLOP,0)	NUMTURNSPREFLOP"
",T2.NUMTURNSFACINGBETONFLOP	+	VALUE(A.NUMTURNSFACINGBETONFLOP,0)	NUMTURNSFACINGBETONFLOP"
",T2.NUMTURNSFACINGNOBETONFLOP	+	VALUE(A.NUMTURNSFACINGNOBETONFLOP,0)	NUMTURNSFACINGNOBETONFLOP"
",T2.NUMTURNSFACINGBETONTURN	+	VALUE(A.NUMTURNSFACINGBETONTURN,0)	NUMTURNSFACINGBETONTURN"
",T2.NUMTURNSFACINGNOBETONTURN	+	VALUE(A.NUMTURNSFACINGNOBETONTURN,0)	NUMTURNSFACINGNOBETONTURN"
",T2.NUMTURNSFACINGBETONRIVER	+	VALUE(A.NUMTURNSFACINGBETONRIVER,0)	NUMTURNSFACINGBETONRIVER"
",T2.NUMTURNSFACINGNOBETONRIVER	+	VALUE(A.NUMTURNSFACINGNOBETONRIVER,0)	NUMTURNSFACINGNOBETONRIVER"
",T2.NUMTURNSFACINGBETON7TH	+	VALUE(A.NUMTURNSFACINGBETON7TH,0)	NUMTURNSFACINGBETON7TH"
",T2.NUMTURNSFACINGNOBETON7TH	+	VALUE(A.NUMTURNSFACINGNOBETON7TH,0)	NUMTURNSFACINGNOBETON7TH"
",T2.NUMLASTAGRESSORPREFLOP	+	VALUE(A.NUMLASTAGRESSORPREFLOP,0)	NUMLASTAGRESSORPREFLOP"
",T2.NUMLASTAGRESSORONFLOP	+	VALUE(A.NUMLASTAGRESSORONFLOP,0)	NUMLASTAGRESSORONFLOP"
",T2.NUMLASTAGRESSORONTURN	+	VALUE(A.NUMLASTAGRESSORONTURN,0)	NUMLASTAGRESSORONTURN"
",T2.NUMLASTAGRESSORONRIVER	+	VALUE(A.NUMLASTAGRESSORONRIVER,0)	NUMLASTAGRESSORONRIVER"
",T2.NUMCONTBETONFLOP	+	VALUE(A.NUMCONTBETONFLOP,0)	NUMCONTBETONFLOP"
",T2.NUMCONTBETONTURN	+	VALUE(A.NUMCONTBETONTURN,0)	NUMCONTBETONTURN"
",T2.NUMCONTBETONRIVER	+	VALUE(A.NUMCONTBETONRIVER,0)	NUMCONTBETONRIVER"
",T2.NUMCONTBETON7TH	+	VALUE(A.NUMCONTBETON7TH,0)	NUMCONTBETON7TH"
",T2.NUMBETPREFLOP	+	VALUE(A.NUMBETPREFLOP,0)	NUMBETPREFLOP"
",T2.NUMBETONFLOP	+	VALUE(A.NUMBETONFLOP,0)	NUMBETONFLOP"
",T2.NUMBETONTURN	+	VALUE(A.NUMBETONTURN,0)	NUMBETONTURN"
",T2.NUMBETONRIVER	+	VALUE(A.NUMBETONRIVER,0)	NUMBETONRIVER"
",T2.NUMBETON7TH	+	VALUE(A.NUMBETON7TH,0)	NUMBETON7TH"
",T2.NUMCHECKONFLOP	+	VALUE(A.NUMCHECKONFLOP,0)	NUMCHECKONFLOP"
",T2.NUMCHECKONTURN	+	VALUE(A.NUMCHECKONTURN,0)	NUMCHECKONTURN"
",T2.NUMCHECKONRIVER	+	VALUE(A.NUMCHECKONRIVER,0)	NUMCHECKONRIVER"
",T2.NUMCHECKON7TH	+	VALUE(A.NUMCHECKON7TH,0)	NUMCHECKON7TH"
",T2.NUMFOLDPREFLOP	+	VALUE(A.NUMFOLDPREFLOP,0)	NUMFOLDPREFLOP"
",T2.NUMFOLDONFLOP	+	VALUE(A.NUMFOLDONFLOP,0)	NUMFOLDONFLOP"
",T2.NUMFOLDONTURN	+	VALUE(A.NUMFOLDONTURN,0)	NUMFOLDONTURN"
",T2.NUMFOLDONRIVER	+	VALUE(A.NUMFOLDONRIVER,0)	NUMFOLDONRIVER"
",T2.NUMFOLDON7TH	+	VALUE(A.NUMFOLDON7TH,0)	NUMFOLDON7TH"
",T2.NUMCALLSPREFLOP	+	VALUE(A.NUMCALLSPREFLOP,0)	NUMCALLSPREFLOP"
",T2.NUMCALLSONFLOP	+	VALUE(A.NUMCALLSONFLOP,0)	NUMCALLSONFLOP"
",T2.NUMCALLSONTURN	+	VALUE(A.NUMCALLSONTURN,0)	NUMCALLSONTURN"
",T2.NUMCALLSONRIVER	+	VALUE(A.NUMCALLSONRIVER,0)	NUMCALLSONRIVER"
",T2.NUMCALLSON7TH	+	VALUE(A.NUMCALLSON7TH,0)	NUMCALLSON7TH"
",T2.NUMRAISESPREFLOP	+	VALUE(A.NUMRAISESPREFLOP,0)	NUMRAISESPREFLOP"
",T2.NUMRAISESONFLOP	+	VALUE(A.NUMRAISESONFLOP,0)	NUMRAISESONFLOP"
",T2.NUMRAISESONTURN	+	VALUE(A.NUMRAISESONTURN,0)	NUMRAISESONTURN"
",T2.NUMRAISESONRIVER	+	VALUE(A.NUMRAISESONRIVER,0)	NUMRAISESONRIVER"
",T2.NUMRAISESON7TH	+	VALUE(A.NUMRAISESON7TH,0)	NUMRAISESON7TH"
",T2.NUMCHECKCALLONFLOP	+	VALUE(A.NUMCHECKCALLONFLOP,0)	NUMCHECKCALLONFLOP"
",T2.NUMCHECKCALLONTURN	+	VALUE(A.NUMCHECKCALLONTURN,0)	NUMCHECKCALLONTURN"
",T2.NUMCHECKCALLONRIVER	+	VALUE(A.NUMCHECKCALLONRIVER,0)	NUMCHECKCALLONRIVER"
",T2.NUMCHECKCALLON7TH	+	VALUE(A.NUMCHECKCALLON7TH,0)	NUMCHECKCALLON7TH"
",T2.NUMCHECKRAISEONFLOP	+	VALUE(A.NUMCHECKRAISEONFLOP,0)	NUMCHECKRAISEONFLOP"
",T2.NUMCHECKRAISEONTURN	+	VALUE(A.NUMCHECKRAISEONTURN,0)	NUMCHECKRAISEONTURN"
",T2.NUMCHECKRAISEONRIVER	+	VALUE(A.NUMCHECKRAISEONRIVER,0)	NUMCHECKRAISEONRIVER"
",T2.NUMCHECKRAISEON7TH	+	VALUE(A.NUMCHECKRAISEON7TH,0)	NUMCHECKRAISEON7TH"
",T2.NUMCHECKFOLDONFLOP	+	VALUE(A.NUMCHECKFOLDONFLOP,0)	NUMCHECKFOLDONFLOP"
",T2.NUMCHECKFOLDONTURN	+	VALUE(A.NUMCHECKFOLDONTURN,0)	NUMCHECKFOLDONTURN"
",T2.NUMCHECKFOLDONRIVER	+	VALUE(A.NUMCHECKFOLDONRIVER,0)	NUMCHECKFOLDONRIVER"
",T2.NUMCHECKFOLDON7TH	+	VALUE(A.NUMCHECKFOLDON7TH,0)	NUMCHECKFOLDON7TH"
",T2.NUMOPENFOLDPOWERFULHAND	+	VALUE(A.NUMOPENFOLDPOWERFULHAND,0)	NUMOPENFOLDPOWERFULHAND"
",T2.NUMFOLDTOEXTREMEODDS	+	VALUE(A.NUMFOLDTOEXTREMEODDS,0)	NUMFOLDTOEXTREMEODDS"
",T2.NUMRERAISEWITHGARBAGE	+	VALUE(A.NUMRERAISEWITHGARBAGE,0)	NUMRERAISEWITHGARBAGE"
",T2.NUMCHECKBEHINDONRIVER	+	VALUE(A.NUMCHECKBEHINDONRIVER,0)	NUMCHECKBEHINDONRIVER"
",T2.NUMFOLDWHENCOULDCHECK	+	VALUE(A.NUMFOLDWHENCOULDCHECK,0)	NUMFOLDWHENCOULDCHECK"
",T2.NUMATTEMPTSTEALBLINDS	+	VALUE(A.NUMATTEMPTSTEALBLINDS,0)	NUMATTEMPTSTEALBLINDS"
",T2.NUMFOLDTOSTEALFROMSBOPPS	+	VALUE(A.NUMFOLDTOSTEALFROMSBOPPS,0)	NUMFOLDTOSTEALFROMSBOPPS"
",T2.NUMFOLDTOSTEALFROMSB	+	VALUE(A.NUMFOLDTOSTEALFROMSB,0)	NUMFOLDTOSTEALFROMSB"
",T2.NUMFOLDTOSTEALFROMBBOPPS	+	VALUE(A.NUMFOLDTOSTEALFROMBBOPPS,0)	NUMFOLDTOSTEALFROMBBOPPS"
",T2.NUMFOLDTOSTEALFROMBB	+	VALUE(A.NUMFOLDTOSTEALFROMBB,0)	NUMFOLDTOSTEALFROMBB"
",T2.NUMCHECKRAISEOPPSONFLOP	+	VALUE(A.NUMCHECKRAISEOPPSONFLOP,0)	NUMCHECKRAISEOPPSONFLOP"
",T2.NUMCHECKRAISEOPPSONTURN	+	VALUE(A.NUMCHECKRAISEOPPSONTURN,0)	NUMCHECKRAISEOPPSONTURN"
",T2.NUMCHECKRAISEOPPSONRIVER	+	VALUE(A.NUMCHECKRAISEOPPSONRIVER,0)	NUMCHECKRAISEOPPSONRIVER"
",T2.NUMCHECKRAISEOPPSON7TH	+	VALUE(A.NUMCHECKRAISEOPPSON7TH,0)	NUMCHECKRAISEOPPSON7TH"
",T2.NUMATTEMPTSTEALBLINDSOPPS	+	VALUE(A.NUMATTEMPTSTEALBLINDSOPPS,0)	NUMATTEMPTSTEALBLINDSOPPS"
",T2.NUM4BETOPPORTUNITIES	+	VALUE(A.NUM4BETOPPORTUNITIES,0)	NUM4BETOPPORTUNITIES"
",T2.NUMHANDSRAISEDPREFLOP	+	VALUE(A.NUMHANDSRAISEDPREFLOP,0)	NUMHANDSRAISEDPREFLOP"
",T2.NUMCALLBETSONLYPREFLOP	+	VALUE(A.NUMCALLBETSONLYPREFLOP,0)	NUMCALLBETSONLYPREFLOP"
",T2.NUMCALLBETSONLYONFLOP	+	VALUE(A.NUMCALLBETSONLYONFLOP,0)	NUMCALLBETSONLYONFLOP"
",T2.NUMCALLBETSONLYONTURN	+	VALUE(A.NUMCALLBETSONLYONTURN,0)	NUMCALLBETSONLYONTURN"
",T2.NUMCALLBETSONLYONRIVER	+	VALUE(A.NUMCALLBETSONLYONRIVER,0)	NUMCALLBETSONLYONRIVER"
",T2.NUMCALLBETSONLYON7TH	+	VALUE(A.NUMCALLBETSONLYON7TH,0)	NUMCALLBETSONLYON7TH"
",T2.NUMTURNSFACINGBETONLYONFLOP	+	VALUE(A.NUMTURNSFACINGBETONLYONFLOP,0)	NUMTURNSFACINGBETONLYONFLOP"
",T2.NUMTURNSFACINGBETONLYONTURN	+	VALUE(A.NUMTURNSFACINGBETONLYONTURN,0)	NUMTURNSFACINGBETONLYONTURN"
",T2.NUMTURNSFACINGBETONLYONRIVER	+	VALUE(A.NUMTURNSFACINGBETONLYONRIVER,0)	NUMTURNSFACINGBETONLYONRIVER"
",T2.NUMTURNSFACINGBETONLYON7TH	+	VALUE(A.NUMTURNSFACINGBETONLYON7TH,0)	NUMTURNSFACINGBETONLYON7TH"
",T2.NUMFOLDTOBETONLYPREFLOP	+	VALUE(A.NUMFOLDTOBETONLYPREFLOP,0)	NUMFOLDTOBETONLYPREFLOP"
",T2.NUMFOLDTOBETONLYONFLOP	+	VALUE(A.NUMFOLDTOBETONLYONFLOP,0)	NUMFOLDTOBETONLYONFLOP"
",T2.NUMFOLDTOBETONLYONTURN	+	VALUE(A.NUMFOLDTOBETONLYONTURN,0)	NUMFOLDTOBETONLYONTURN"
",T2.NUMFOLDTOBETONLYONRIVER	+	VALUE(A.NUMFOLDTOBETONLYONRIVER,0)	NUMFOLDTOBETONLYONRIVER"
",T2.NUMFOLDTOBETONLYON7TH	+	VALUE(A.NUMFOLDTOBETONLYON7TH,0)	NUMFOLDTOBETONLYON7TH"
",T2.TOTALPLAYERSINHANDS	+	VALUE(A.TOTALPLAYERSINHANDS,0)	TOTALPLAYERSINHANDS"
",T2.TOTALBET +	VALUE(A.TOTALBET,0)	TOTALBET"
",T2.NUMFACING3BET_HEM	+	VALUE(A.NUMFACING3BET_HEM,0)	NUMFACING3BET_HEM"
",T2.NUMFOLDTO3BET_HEM	+	VALUE(A.NUMFOLDTO3BET_HEM,0)	NUMFOLDTO3BET_HEM"
",T2.NUMFACING4PLUSBET_HEM	+	VALUE(A.NUMFACING4PLUSBET_HEM,0)	NUMFACING4PLUSBET_HEM"
",T2.NUMFOLDTO4PLUSBET_HEM	+	VALUE(A.NUMFOLDTO4PLUSBET_HEM,0)	NUMFOLDTO4PLUSBET_HEM"
",T2.NUMCONTBETOPPSVS2INPOSONFLOP	+	VALUE(A.NUMCONTBETOPPSVS2INPOSONFLOP,0)	NUMCONTBETOPPSVS2INPOSONFLOP"
",T2.NUMCONTBETOPPSVS2INPOSONTURN	+	VALUE(A.NUMCONTBETOPPSVS2INPOSONTURN,0)	NUMCONTBETOPPSVS2INPOSONTURN"
",T2.NUMCONTBETOPPSVS2INPOSONRIVER	+	VALUE(A.NUMCONTBETOPPSVS2INPOSONRIVER,0)	NUMCONTBETOPPSVS2INPOSONRIVER"
",T2.NUMCONTBETOPPSVS2INPOSON7TH	+	VALUE(A.NUMCONTBETOPPSVS2INPOSON7TH,0)	NUMCONTBETOPPSVS2INPOSON7TH"
",T2.NUMCONTBETVS2INPOSONFLOP	+	VALUE(A.NUMCONTBETVS2INPOSONFLOP,0)	NUMCONTBETVS2INPOSONFLOP"
",T2.NUMCONTBETVS2INPOSONTURN	+	VALUE(A.NUMCONTBETVS2INPOSONTURN,0)	NUMCONTBETVS2INPOSONTURN"
",T2.NUMCONTBETVS2INPOSONRIVER	+	VALUE(A.NUMCONTBETVS2INPOSONRIVER,0)	NUMCONTBETVS2INPOSONRIVER"
",T2.NUMCONTBETVS2INPOSON7TH	+	VALUE(A.NUMCONTBETVS2INPOSON7TH,0)	NUMCONTBETVS2INPOSON7TH"
;

static const char* ACCUMDAILYSTATSDATACOLUMNS = 
",T2.TOTALINVESTED	+	VALUE(VALUE(D.TOTALINVESTED,W.TOTALINVESTED),0)	TOTALINVESTED"
",T2.TOTALTOURNS	+	VALUE(VALUE(D.TOTALTOURNS,W.TOTALTOURNS),0)	TOTALTOURNS"
",T2.USERTOTALPROFIT	+	VALUE(VALUE(D.USERTOTALPROFIT,W.USERTOTALPROFIT),0)	USERTOTALPROFIT"
",T2.RAKEPAID	+	VALUE(VALUE(D.RAKEPAID,W.RAKEPAID),0)	RAKEPAID"
",T2.TOTALTOURNSWONMONEY	+	VALUE(VALUE(D.TOTALTOURNSWONMONEY,W.TOTALTOURNSWONMONEY),0)	TOTALTOURNSWONMONEY"
",T2.TOTALHANDS	+	VALUE(VALUE(D.TOTALHANDS,W.TOTALHANDS),0)	TOTALHANDS"
",T2.TOTALWIN	+	VALUE(VALUE(D.TOTALWIN,W.TOTALWIN),0)	TOTALWIN"
",T2.TOTALBLINDSANTESPAID	+	VALUE(VALUE(D.TOTALBLINDSANTESPAID,W.TOTALBLINDSANTESPAID),0) TOTALBLINDSANTESPAID"
",T2.TOTALRAKEPAID	+	VALUE(VALUE(D.TOTALRAKEPAID,W.TOTALRAKEPAID),0)	TOTALRAKEPAID"
",T2.NUMBIGBLINDS	+	VALUE(VALUE(D.NUMBIGBLINDS,W.NUMBIGBLINDS),0)	NUMBIGBLINDS"
",T2.NUMSMALLBLINDS	+	VALUE(VALUE(D.NUMSMALLBLINDS,W.NUMSMALLBLINDS),0)	NUMSMALLBLINDS"
",T2.NUMBLINDSPAIDOUTOFPOSITION	+	VALUE(VALUE(D.NUMBLINDSPAIDOUTOFPOSITION,W.NUMBLINDSPAIDOUTOFPOSITION),0)	NUMBLINDSPAIDOUTOFPOSITION"
",T2.NUMVPIP	+	VALUE(VALUE(D.NUMVPIP,W.NUMVPIP),0)	NUMVPIP"
",T2.NUMVPIPFROMSMALLBLIND	+	VALUE(VALUE(D.NUMVPIPFROMSMALLBLIND,W.NUMVPIPFROMSMALLBLIND),0)	NUMVPIPFROMSMALLBLIND"
",T2.NUMVPIPFROMBIGBLIND	+	VALUE(VALUE(D.NUMVPIPFROMBIGBLIND,W.NUMVPIPFROMBIGBLIND),0)	NUMVPIPFROMBIGBLIND"
",T2.NUMSAWSHOWDOWN	+	VALUE(VALUE(D.NUMSAWSHOWDOWN,W.NUMSAWSHOWDOWN),0)	NUMSAWSHOWDOWN"
",T2.NUMWONSHOWDOWN	+	VALUE(VALUE(D.NUMWONSHOWDOWN,W.NUMWONSHOWDOWN),0)	NUMWONSHOWDOWN"
",T2.NUMWONAFTERFLOP	+	VALUE(VALUE(D.NUMWONAFTERFLOP,W.NUMWONAFTERFLOP),0)	NUMWONAFTERFLOP"
",T2.NUMLIMP	+	VALUE(VALUE(D.NUMLIMP,W.NUMLIMP),0)	NUMLIMP"
",T2.NUMLIMPRAISE	+	VALUE(VALUE(D.NUMLIMPRAISE,W.NUMLIMPRAISE),0)	NUMLIMPRAISE"
",T2.NUMLIMPCALL	+	VALUE(VALUE(D.NUMLIMPCALL,W.NUMLIMPCALL),0)	NUMLIMPCALL"
",T2.NUMLIMPFOLD	+	VALUE(VALUE(D.NUMLIMPFOLD,W.NUMLIMPFOLD),0)	NUMLIMPFOLD"
",T2.NUMALLINPREFLOP	+	VALUE(VALUE(D.NUMALLINPREFLOP,W.NUMALLINPREFLOP),0)	NUMALLINPREFLOP"
",T2.NUMCOLDCALLOPPORTUNITIES	+	VALUE(VALUE(D.NUMCOLDCALLOPPORTUNITIES,W.NUMCOLDCALLOPPORTUNITIES),0)	NUMCOLDCALLOPPORTUNITIES"
",T2.NUMCOLDCALLS	+	VALUE(VALUE(D.NUMCOLDCALLS,W.NUMCOLDCALLS),0)	NUMCOLDCALLS"
",T2.NUM3BETOPPORTUNITIES	+	VALUE(VALUE(D.NUM3BETOPPORTUNITIES,W.NUM3BETOPPORTUNITIES),0)	NUM3BETOPPORTUNITIES"
",T2.NUM3BETS	+	VALUE(VALUE(D.NUM3BETS,W.NUM3BETS),0)	NUM3BETS"
",T2.NUMFACING3BET	+	VALUE(VALUE(D.NUMFACING3BET,W.NUMFACING3BET),0)	NUMFACING3BET"
",T2.NUMFOLDTO3BET	+	VALUE(VALUE(D.NUMFOLDTO3BET,W.NUMFOLDTO3BET),0)	NUMFOLDTO3BET"
",T2.NUM4PLUSBET	+	VALUE(VALUE(D.NUM4PLUSBET,W.NUM4PLUSBET),0)	NUM4PLUSBET"
",T2.NUMSAWFLOP	+	VALUE(VALUE(D.NUMSAWFLOP,W.NUMSAWFLOP),0)	NUMSAWFLOP"
",T2.NUMSAWTURN	+	VALUE(VALUE(D.NUMSAWTURN,W.NUMSAWTURN),0)	NUMSAWTURN"
",T2.NUMSAWRIVER	+	VALUE(VALUE(D.NUMSAWRIVER,W.NUMSAWRIVER),0)	NUMSAWRIVER"
",T2.NUMSAW7TH	+	VALUE(VALUE(D.NUMSAW7TH,W.NUMSAW7TH),0)	NUMSAW7TH"
",T2.NUMFACING4PLUSBET	+	VALUE(VALUE(D.NUMFACING4PLUSBET,W.NUMFACING4PLUSBET),0)	NUMFACING4PLUSBET"
",T2.NUMFOLDTO4PLUSBET	+	VALUE(VALUE(D.NUMFOLDTO4PLUSBET,W.NUMFOLDTO4PLUSBET),0)	NUMFOLDTO4PLUSBET"
",T2.NUMTURNSPREFLOP	+	VALUE(VALUE(D.NUMTURNSPREFLOP,W.NUMTURNSPREFLOP),0)	NUMTURNSPREFLOP"
",T2.NUMTURNSFACINGBETONFLOP	+	VALUE(VALUE(D.NUMTURNSFACINGBETONFLOP,W.NUMTURNSFACINGBETONFLOP),0)	NUMTURNSFACINGBETONFLOP"
",T2.NUMTURNSFACINGNOBETONFLOP	+	VALUE(VALUE(D.NUMTURNSFACINGNOBETONFLOP,W.NUMTURNSFACINGNOBETONFLOP),0)	NUMTURNSFACINGNOBETONFLOP"
",T2.NUMTURNSFACINGBETONTURN	+	VALUE(VALUE(D.NUMTURNSFACINGBETONTURN,W.NUMTURNSFACINGBETONTURN),0)	NUMTURNSFACINGBETONTURN"
",T2.NUMTURNSFACINGNOBETONTURN	+	VALUE(VALUE(D.NUMTURNSFACINGNOBETONTURN,W.NUMTURNSFACINGNOBETONTURN),0)	NUMTURNSFACINGNOBETONTURN"
",T2.NUMTURNSFACINGBETONRIVER	+	VALUE(VALUE(D.NUMTURNSFACINGBETONRIVER,W.NUMTURNSFACINGBETONRIVER),0)	NUMTURNSFACINGBETONRIVER"
",T2.NUMTURNSFACINGNOBETONRIVER	+	VALUE(VALUE(D.NUMTURNSFACINGNOBETONRIVER,W.NUMTURNSFACINGNOBETONRIVER),0)	NUMTURNSFACINGNOBETONRIVER"
",T2.NUMTURNSFACINGBETON7TH	+	VALUE(VALUE(D.NUMTURNSFACINGBETON7TH,W.NUMTURNSFACINGBETON7TH),0)	NUMTURNSFACINGBETON7TH"
",T2.NUMTURNSFACINGNOBETON7TH	+	VALUE(VALUE(D.NUMTURNSFACINGNOBETON7TH,W.NUMTURNSFACINGNOBETON7TH),0)	NUMTURNSFACINGNOBETON7TH"
",T2.NUMLASTAGRESSORPREFLOP	+	VALUE(VALUE(D.NUMLASTAGRESSORPREFLOP,W.NUMLASTAGRESSORPREFLOP),0)	NUMLASTAGRESSORPREFLOP"
",T2.NUMLASTAGRESSORONFLOP	+	VALUE(VALUE(D.NUMLASTAGRESSORONFLOP,W.NUMLASTAGRESSORONFLOP),0)	NUMLASTAGRESSORONFLOP"
",T2.NUMLASTAGRESSORONTURN	+	VALUE(VALUE(D.NUMLASTAGRESSORONTURN,W.NUMLASTAGRESSORONTURN),0)	NUMLASTAGRESSORONTURN"
",T2.NUMLASTAGRESSORONRIVER	+	VALUE(VALUE(D.NUMLASTAGRESSORONRIVER,W.NUMLASTAGRESSORONRIVER),0)	NUMLASTAGRESSORONRIVER"
",T2.NUMCONTBETONFLOP	+	VALUE(VALUE(D.NUMCONTBETONFLOP,W.NUMCONTBETONFLOP),0)	NUMCONTBETONFLOP"
",T2.NUMCONTBETONTURN	+	VALUE(VALUE(D.NUMCONTBETONTURN,W.NUMCONTBETONTURN),0)	NUMCONTBETONTURN"
",T2.NUMCONTBETONRIVER	+	VALUE(VALUE(D.NUMCONTBETONRIVER,W.NUMCONTBETONRIVER),0)	NUMCONTBETONRIVER"
",T2.NUMCONTBETON7TH	+	VALUE(VALUE(D.NUMCONTBETON7TH,W.NUMCONTBETON7TH),0)	NUMCONTBETON7TH"
",T2.NUMBETPREFLOP	+	VALUE(VALUE(D.NUMBETPREFLOP,W.NUMBETPREFLOP),0)	NUMBETPREFLOP"
",T2.NUMBETONFLOP	+	VALUE(VALUE(D.NUMBETONFLOP,W.NUMBETONFLOP),0)	NUMBETONFLOP"
",T2.NUMBETONTURN	+	VALUE(VALUE(D.NUMBETONTURN,W.NUMBETONTURN),0)	NUMBETONTURN"
",T2.NUMBETONRIVER	+	VALUE(VALUE(D.NUMBETONRIVER,W.NUMBETONRIVER),0)	NUMBETONRIVER"
",T2.NUMBETON7TH	+	VALUE(VALUE(D.NUMBETON7TH,W.NUMBETON7TH),0)	NUMBETON7TH"
",T2.NUMCHECKONFLOP	+	VALUE(VALUE(D.NUMCHECKONFLOP,W.NUMCHECKONFLOP),0)	NUMCHECKONFLOP"
",T2.NUMCHECKONTURN	+	VALUE(VALUE(D.NUMCHECKONTURN,W.NUMCHECKONTURN),0)	NUMCHECKONTURN"
",T2.NUMCHECKONRIVER	+	VALUE(VALUE(D.NUMCHECKONRIVER,W.NUMCHECKONRIVER),0)	NUMCHECKONRIVER"
",T2.NUMCHECKON7TH	+	VALUE(VALUE(D.NUMCHECKON7TH,W.NUMCHECKON7TH),0)	NUMCHECKON7TH"
",T2.NUMFOLDPREFLOP	+	VALUE(VALUE(D.NUMFOLDPREFLOP,W.NUMFOLDPREFLOP),0)	NUMFOLDPREFLOP"
",T2.NUMFOLDONFLOP	+	VALUE(VALUE(D.NUMFOLDONFLOP,W.NUMFOLDONFLOP),0)	NUMFOLDONFLOP"
",T2.NUMFOLDONTURN	+	VALUE(VALUE(D.NUMFOLDONTURN,W.NUMFOLDONTURN),0)	NUMFOLDONTURN"
",T2.NUMFOLDONRIVER	+	VALUE(VALUE(D.NUMFOLDONRIVER,W.NUMFOLDONRIVER),0)	NUMFOLDONRIVER"
",T2.NUMFOLDON7TH	+	VALUE(VALUE(D.NUMFOLDON7TH,W.NUMFOLDON7TH),0)	NUMFOLDON7TH"
",T2.NUMCALLSPREFLOP	+	VALUE(VALUE(D.NUMCALLSPREFLOP,W.NUMCALLSPREFLOP),0)	NUMCALLSPREFLOP"
",T2.NUMCALLSONFLOP	+	VALUE(VALUE(D.NUMCALLSONFLOP,W.NUMCALLSONFLOP),0)	NUMCALLSONFLOP"
",T2.NUMCALLSONTURN	+	VALUE(VALUE(D.NUMCALLSONTURN,W.NUMCALLSONTURN),0)	NUMCALLSONTURN"
",T2.NUMCALLSONRIVER	+	VALUE(VALUE(D.NUMCALLSONRIVER,W.NUMCALLSONRIVER),0)	NUMCALLSONRIVER"
",T2.NUMCALLSON7TH	+	VALUE(VALUE(D.NUMCALLSON7TH,W.NUMCALLSON7TH),0)	NUMCALLSON7TH"
",T2.NUMRAISESPREFLOP	+	VALUE(VALUE(D.NUMRAISESPREFLOP,W.NUMRAISESPREFLOP),0)	NUMRAISESPREFLOP"
",T2.NUMRAISESONFLOP	+	VALUE(VALUE(D.NUMRAISESONFLOP,W.NUMRAISESONFLOP),0)	NUMRAISESONFLOP"
",T2.NUMRAISESONTURN	+	VALUE(VALUE(D.NUMRAISESONTURN,W.NUMRAISESONTURN),0)	NUMRAISESONTURN"
",T2.NUMRAISESONRIVER	+	VALUE(VALUE(D.NUMRAISESONRIVER,W.NUMRAISESONRIVER),0)	NUMRAISESONRIVER"
",T2.NUMRAISESON7TH	+	VALUE(VALUE(D.NUMRAISESON7TH,W.NUMRAISESON7TH),0)	NUMRAISESON7TH"
",T2.NUMCHECKCALLONFLOP	+	VALUE(VALUE(D.NUMCHECKCALLONFLOP,W.NUMCHECKCALLONFLOP),0)	NUMCHECKCALLONFLOP"
",T2.NUMCHECKCALLONTURN	+	VALUE(VALUE(D.NUMCHECKCALLONTURN,W.NUMCHECKCALLONTURN),0)	NUMCHECKCALLONTURN"
",T2.NUMCHECKCALLONRIVER	+	VALUE(VALUE(D.NUMCHECKCALLONRIVER,W.NUMCHECKCALLONRIVER),0)	NUMCHECKCALLONRIVER"
",T2.NUMCHECKCALLON7TH	+	VALUE(VALUE(D.NUMCHECKCALLON7TH,W.NUMCHECKCALLON7TH),0)	NUMCHECKCALLON7TH"
",T2.NUMCHECKRAISEONFLOP	+	VALUE(VALUE(D.NUMCHECKRAISEONFLOP,W.NUMCHECKRAISEONFLOP),0)	NUMCHECKRAISEONFLOP"
",T2.NUMCHECKRAISEONTURN	+	VALUE(VALUE(D.NUMCHECKRAISEONTURN,W.NUMCHECKRAISEONTURN),0)	NUMCHECKRAISEONTURN"
",T2.NUMCHECKRAISEONRIVER	+	VALUE(VALUE(D.NUMCHECKRAISEONRIVER,W.NUMCHECKRAISEONRIVER),0)	NUMCHECKRAISEONRIVER"
",T2.NUMCHECKRAISEON7TH	+	VALUE(VALUE(D.NUMCHECKRAISEON7TH,W.NUMCHECKRAISEON7TH),0)	NUMCHECKRAISEON7TH"
",T2.NUMCHECKFOLDONFLOP	+	VALUE(VALUE(D.NUMCHECKFOLDONFLOP,W.NUMCHECKFOLDONFLOP),0)	NUMCHECKFOLDONFLOP"
",T2.NUMCHECKFOLDONTURN	+	VALUE(VALUE(D.NUMCHECKFOLDONTURN,W.NUMCHECKFOLDONTURN),0)	NUMCHECKFOLDONTURN"
",T2.NUMCHECKFOLDONRIVER	+	VALUE(VALUE(D.NUMCHECKFOLDONRIVER,W.NUMCHECKFOLDONRIVER),0)	NUMCHECKFOLDONRIVER"
",T2.NUMCHECKFOLDON7TH	+	VALUE(VALUE(D.NUMCHECKFOLDON7TH,W.NUMCHECKFOLDON7TH),0)	NUMCHECKFOLDON7TH"
",T2.NUMOPENFOLDPOWERFULHAND	+	VALUE(VALUE(D.NUMOPENFOLDPOWERFULHAND,W.NUMOPENFOLDPOWERFULHAND),0)	NUMOPENFOLDPOWERFULHAND"
",T2.NUMFOLDTOEXTREMEODDS	+	VALUE(VALUE(D.NUMFOLDTOEXTREMEODDS,W.NUMFOLDTOEXTREMEODDS),0)	NUMFOLDTOEXTREMEODDS"
",T2.NUMRERAISEWITHGARBAGE	+	VALUE(VALUE(D.NUMRERAISEWITHGARBAGE,W.NUMRERAISEWITHGARBAGE),0)	NUMRERAISEWITHGARBAGE"
",T2.NUMCHECKBEHINDONRIVER	+	VALUE(VALUE(D.NUMCHECKBEHINDONRIVER,W.NUMCHECKBEHINDONRIVER),0)	NUMCHECKBEHINDONRIVER"
",T2.NUMFOLDWHENCOULDCHECK	+	VALUE(VALUE(D.NUMFOLDWHENCOULDCHECK,W.NUMFOLDWHENCOULDCHECK),0)	NUMFOLDWHENCOULDCHECK"
",T2.NUMATTEMPTSTEALBLINDS	+	VALUE(VALUE(D.NUMATTEMPTSTEALBLINDS,W.NUMATTEMPTSTEALBLINDS),0)	NUMATTEMPTSTEALBLINDS"
",T2.NUMFOLDTOSTEALFROMSBOPPS	+	VALUE(VALUE(D.NUMFOLDTOSTEALFROMSBOPPS,W.NUMFOLDTOSTEALFROMSBOPPS),0)	NUMFOLDTOSTEALFROMSBOPPS"
",T2.NUMFOLDTOSTEALFROMSB	+	VALUE(VALUE(D.NUMFOLDTOSTEALFROMSB,W.NUMFOLDTOSTEALFROMSB),0)	NUMFOLDTOSTEALFROMSB"
",T2.NUMFOLDTOSTEALFROMBBOPPS	+	VALUE(VALUE(D.NUMFOLDTOSTEALFROMBBOPPS,W.NUMFOLDTOSTEALFROMBBOPPS),0)	NUMFOLDTOSTEALFROMBBOPPS"
",T2.NUMFOLDTOSTEALFROMBB	+	VALUE(VALUE(D.NUMFOLDTOSTEALFROMBB,W.NUMFOLDTOSTEALFROMBB),0)	NUMFOLDTOSTEALFROMBB"
",T2.NUMCHECKRAISEOPPSONFLOP	+	VALUE(VALUE(D.NUMCHECKRAISEOPPSONFLOP,W.NUMCHECKRAISEOPPSONFLOP),0)	NUMCHECKRAISEOPPSONFLOP"
",T2.NUMCHECKRAISEOPPSONTURN	+	VALUE(VALUE(D.NUMCHECKRAISEOPPSONTURN,W.NUMCHECKRAISEOPPSONTURN),0)	NUMCHECKRAISEOPPSONTURN"
",T2.NUMCHECKRAISEOPPSONRIVER	+	VALUE(VALUE(D.NUMCHECKRAISEOPPSONRIVER,W.NUMCHECKRAISEOPPSONRIVER),0)	NUMCHECKRAISEOPPSONRIVER"
",T2.NUMCHECKRAISEOPPSON7TH	+	VALUE(VALUE(D.NUMCHECKRAISEOPPSON7TH,W.NUMCHECKRAISEOPPSON7TH),0)	NUMCHECKRAISEOPPSON7TH"
",T2.NUMATTEMPTSTEALBLINDSOPPS	+	VALUE(VALUE(D.NUMATTEMPTSTEALBLINDSOPPS,W.NUMATTEMPTSTEALBLINDSOPPS),0)	NUMATTEMPTSTEALBLINDSOPPS"
",T2.NUM4BETOPPORTUNITIES	+	VALUE(VALUE(D.NUM4BETOPPORTUNITIES,W.NUM4BETOPPORTUNITIES),0)	NUM4BETOPPORTUNITIES"
",T2.NUMHANDSRAISEDPREFLOP	+	VALUE(VALUE(D.NUMHANDSRAISEDPREFLOP,W.NUMHANDSRAISEDPREFLOP),0)	NUMHANDSRAISEDPREFLOP"
",T2.NUMCALLBETSONLYPREFLOP	+	VALUE(VALUE(D.NUMCALLBETSONLYPREFLOP,W.NUMCALLBETSONLYPREFLOP),0)	NUMCALLBETSONLYPREFLOP"
",T2.NUMCALLBETSONLYONFLOP	+	VALUE(VALUE(D.NUMCALLBETSONLYONFLOP,W.NUMCALLBETSONLYONFLOP),0)	NUMCALLBETSONLYONFLOP"
",T2.NUMCALLBETSONLYONTURN	+	VALUE(VALUE(D.NUMCALLBETSONLYONTURN,W.NUMCALLBETSONLYONTURN),0)	NUMCALLBETSONLYONTURN"
",T2.NUMCALLBETSONLYONRIVER	+	VALUE(VALUE(D.NUMCALLBETSONLYONRIVER,W.NUMCALLBETSONLYONRIVER),0)	NUMCALLBETSONLYONRIVER"
",T2.NUMCALLBETSONLYON7TH	+	VALUE(VALUE(D.NUMCALLBETSONLYON7TH,W.NUMCALLBETSONLYON7TH),0)	NUMCALLBETSONLYON7TH"
",T2.NUMTURNSFACINGBETONLYONFLOP	+	VALUE(VALUE(D.NUMTURNSFACINGBETONLYONFLOP,W.NUMTURNSFACINGBETONLYONFLOP),0)	NUMTURNSFACINGBETONLYONFLOP"
",T2.NUMTURNSFACINGBETONLYONTURN	+	VALUE(VALUE(D.NUMTURNSFACINGBETONLYONTURN,W.NUMTURNSFACINGBETONLYONTURN),0)	NUMTURNSFACINGBETONLYONTURN"
",T2.NUMTURNSFACINGBETONLYONRIVER	+	VALUE(VALUE(D.NUMTURNSFACINGBETONLYONRIVER,W.NUMTURNSFACINGBETONLYONRIVER),0)	NUMTURNSFACINGBETONLYONRIVER"
",T2.NUMTURNSFACINGBETONLYON7TH	+	VALUE(VALUE(D.NUMTURNSFACINGBETONLYON7TH,W.NUMTURNSFACINGBETONLYON7TH),0)	NUMTURNSFACINGBETONLYON7TH"
",T2.NUMFOLDTOBETONLYPREFLOP	+	VALUE(VALUE(D.NUMFOLDTOBETONLYPREFLOP,W.NUMFOLDTOBETONLYPREFLOP),0)	NUMFOLDTOBETONLYPREFLOP"
",T2.NUMFOLDTOBETONLYONFLOP	+	VALUE(VALUE(D.NUMFOLDTOBETONLYONFLOP,W.NUMFOLDTOBETONLYONFLOP),0)	NUMFOLDTOBETONLYONFLOP"
",T2.NUMFOLDTOBETONLYONTURN	+	VALUE(VALUE(D.NUMFOLDTOBETONLYONTURN,W.NUMFOLDTOBETONLYONTURN),0)	NUMFOLDTOBETONLYONTURN"
",T2.NUMFOLDTOBETONLYONRIVER	+	VALUE(VALUE(D.NUMFOLDTOBETONLYONRIVER,W.NUMFOLDTOBETONLYONRIVER),0)	NUMFOLDTOBETONLYONRIVER"
",T2.NUMFOLDTOBETONLYON7TH	+	VALUE(VALUE(D.NUMFOLDTOBETONLYON7TH,W.NUMFOLDTOBETONLYON7TH),0)	NUMFOLDTOBETONLYON7TH"
",T2.TOTALPLAYERSINHANDS	+	VALUE(VALUE(D.TOTALPLAYERSINHANDS,W.TOTALPLAYERSINHANDS),0)	TOTALPLAYERSINHANDS"
",T2.TOTALBET +	VALUE(VALUE(D.TOTALBET,W.TOTALBET),0)		TOTALBET"
",T2.NUMFACING3BET_HEM	+	VALUE(VALUE(D.NUMFACING3BET_HEM,W.NUMFACING3BET_HEM),0)	NUMFACING3BET_HEM"
",T2.NUMFOLDTO3BET_HEM	+	VALUE(VALUE(D.NUMFOLDTO3BET_HEM,W.NUMFOLDTO3BET_HEM),0)	NUMFOLDTO3BET_HEM"
",T2.NUMFACING4PLUSBET_HEM	+	VALUE(VALUE(D.NUMFACING4PLUSBET_HEM,W.NUMFACING4PLUSBET_HEM),0)	NUMFACING4PLUSBET_HEM"
",T2.NUMFOLDTO4PLUSBET_HEM	+	VALUE(VALUE(D.NUMFOLDTO4PLUSBET_HEM,W.NUMFOLDTO4PLUSBET_HEM),0)	NUMFOLDTO4PLUSBET_HEM"
",T2.NUMCONTBETOPPSVS2INPOSONFLOP	+	VALUE(VALUE(D.NUMCONTBETOPPSVS2INPOSONFLOP,W.NUMCONTBETOPPSVS2INPOSONFLOP),0)	NUMCONTBETOPPSVS2INPOSONFLOP"
",T2.NUMCONTBETOPPSVS2INPOSONTURN	+	VALUE(VALUE(D.NUMCONTBETOPPSVS2INPOSONTURN,W.NUMCONTBETOPPSVS2INPOSONTURN),0)	NUMCONTBETOPPSVS2INPOSONTURN"
",T2.NUMCONTBETOPPSVS2INPOSONRIVER	+	VALUE(VALUE(D.NUMCONTBETOPPSVS2INPOSONRIVER,W.NUMCONTBETOPPSVS2INPOSONRIVER),0)	NUMCONTBETOPPSVS2INPOSONRIVER"
",T2.NUMCONTBETOPPSVS2INPOSON7TH	+	VALUE(VALUE(D.NUMCONTBETOPPSVS2INPOSON7TH,W.NUMCONTBETOPPSVS2INPOSON7TH),0)	NUMCONTBETOPPSVS2INPOSON7TH"
",T2.NUMCONTBETVS2INPOSONFLOP	+	VALUE(VALUE(D.NUMCONTBETVS2INPOSONFLOP,W.NUMCONTBETVS2INPOSONFLOP),0)	NUMCONTBETVS2INPOSONFLOP"
",T2.NUMCONTBETVS2INPOSONTURN	+	VALUE(VALUE(D.NUMCONTBETVS2INPOSONTURN,W.NUMCONTBETVS2INPOSONTURN),0)	NUMCONTBETVS2INPOSONTURN"
",T2.NUMCONTBETVS2INPOSONRIVER	+	VALUE(VALUE(D.NUMCONTBETVS2INPOSONRIVER,W.NUMCONTBETVS2INPOSONRIVER),0)	NUMCONTBETVS2INPOSONRIVER"
",T2.NUMCONTBETVS2INPOSON7TH	+	VALUE(VALUE(D.NUMCONTBETVS2INPOSON7TH,W.NUMCONTBETVS2INPOSON7TH),0)	NUMCONTBETVS2INPOSON7TH"
;

static const char* HANDGAMETYPE = 
	"(CASE WHEN TOURNSCHEDULINGTYPE=1 THEN 1 "
	"WHEN TOURNSCHEDULINGTYPE=2 THEN 1 "
	"WHEN TOURNSCHEDULINGTYPE=0 AND BUYIN>=0 THEN 1 "
	"ELSE 0 "
	"END)";

static const char* ACCUMSTATSKEYCOLUMNNAMES =
		"USERID,STARTOFPERIOD,CURRENCY,RINGTOURNGAME";

static const char* ACCUMSTATSCOLUMNNAMES = 
/*   5 */  "totalinvested,totaltourns,usertotalprofit,rakepaid,totaltournswonmoney,"
/*  10 */  "totalhands,totalwin,totalblindsantespaid,totalrakepaid,numbigblinds,"
/*  15 */  "numsmallblinds,numblindspaidoutofposition,numvpip,numvpipfromsmallblind,numvpipfrombigblind,"
/*  20 */  "numsawshowdown,numwonshowdown,numwonafterflop,numlimp,numlimpraise,"
/*  25 */  "numlimpcall,numlimpfold,numallinpreflop,numcoldcallopportunities,numcoldcalls,"
/*  30 */  "num3betopportunities,num3bets,numfacing3bet,numfoldto3bet,num4plusbet,"
/*  35 */  "numsawflop,numsawturn,numsawriver,numsaw7th,numfacing4plusbet,"
/*  40 */  "numfoldto4plusbet,numturnspreflop,numturnsfacingbetonflop,numturnsfacingnobetonflop,numturnsfacingbetonturn,"
/*  45 */  "numturnsfacingnobetonturn,numturnsfacingbetonriver,numturnsfacingnobetonriver,numturnsfacingbeton7th,numturnsfacingnobeton7th,"
/*  50 */  "numlastagressorpreflop,numlastagressoronflop,numlastagressoronturn,numlastagressoronriver,numcontbetonflop,"
/*  55 */  "numcontbetonturn,numcontbetonriver,numcontbeton7th,numbetpreflop,numbetonflop,"
/*  60 */  "numbetonturn,numbetonriver,numbeton7th,numcheckonflop,numcheckonturn,"
/*  65 */  "numcheckonriver,numcheckon7th,numfoldpreflop,numfoldonflop,numfoldonturn,"
/*  70 */  "numfoldonriver,numfoldon7th,numcallspreflop,numcallsonflop,numcallsonturn,"
/*  75 */  "numcallsonriver,numcallson7th,numraisespreflop,numraisesonflop,numraisesonturn,"
/*  80 */  "numraisesonriver,numraiseson7th,numcheckcallonflop,numcheckcallonturn,numcheckcallonriver,"
/*  85 */  "numcheckcallon7th,numcheckraiseonflop,numcheckraiseonturn,numcheckraiseonriver,numcheckraiseon7th,"
/*  90 */  "numcheckfoldonflop,numcheckfoldonturn,numcheckfoldonriver,numcheckfoldon7th,numopenfoldpowerfulhand,"
/*  95 */  "numfoldtoextremeodds,numreraisewithgarbage,numcheckbehindonriver,numfoldwhencouldcheck,numattemptstealblinds,"
/* 100 */  "numfoldtostealfromsbopps,numfoldtostealfromsb,numfoldtostealfrombbopps,numfoldtostealfrombb,numcheckraiseoppsonflop,"
/* 105 */  "numcheckraiseoppsonturn,numcheckraiseoppsonriver,numcheckraiseoppson7th,numattemptstealblindsopps,num4betopportunities,"
/* 110 */  "numhandsraisedpreflop,numcallbetsonlypreflop,numcallbetsonlyonflop,numcallbetsonlyonturn,numcallbetsonlyonriver,"
/* 115 */  "numcallbetsonlyon7th,numturnsfacingbetonlyonflop,numturnsfacingbetonlyonturn,numturnsfacingbetonlyonriver,numturnsfacingbetonlyon7th,"
/* 120 */  "numfoldtobetonlypreflop,numfoldtobetonlyonflop,numfoldtobetonlyonturn,numfoldtobetonlyonriver,numfoldtobetonlyon7th,"
/* 125 */  "totalplayersinhands,totalbet,numfacing3bet_hem,numfoldto3bet_hem,numfacing4plusbet_hem,"
/* 130 */  "numfoldto4plusbet_hem,numcontbetoppsvs2inposonflop,numcontbetoppsvs2inposonturn,numcontbetoppsvs2inposonriver,numcontbetoppsvs2inposon7th,"
/* 134 */  "numcontbetvs2inposonflop,numcontbetvs2inposonturn,numcontbetvs2inposonriver,numcontbetvs2inposon7th"
;

//////////////////////////////////////////////////////////////////////////////////////

GetMaintJobEndDateStmt::GetMaintJobEndDateStmt(DatabaseManagerCommon& man) : NoExecStmt(man)
{
	PString query;
	query.assign("SELECT ENDPERIOD FROM MAINTJOBSETUP WHERE TBNAME = ? WITH UR");

	prepare(query);
	bindFirstCol(endDate);
	bindFirstParam(tableName);
}


void GetMaintJobEndDateStmt::execGet(const char* tableName_, SrvDate& endDate_)
{
	endDate_.setNull();

	tableName = tableName_;

	execute();
	if (fetch())
		endDate.getValue(endDate_);
	closeCursor();

}

GetMaintJobStartDateStmt::GetMaintJobStartDateStmt(DatabaseManagerCommon& man) : NoExecStmt(man)
{
	PString query;
	query.assign("SELECT STARTPERIOD FROM MAINTJOBSETUP WHERE TBNAME = ? WITH UR");

	prepare(query);
	bindFirstCol(startDate);
	bindFirstParam(tableName);
}

void GetMaintJobStartDateStmt::execGet(const char* tableName_, SrvDate& startDate_)
{
	startDate_.setNull();

	tableName = tableName_;

	execute();
	if (fetch())
		startDate.getValue(startDate_);
	closeCursor();

}

////////////////////////////////////////////////////////////////////////////////////////

ReadAccumAuxStmt::ReadAccumAuxStmt(DatabaseManagerCommon& man, const char* auxTableName) 
	: NoExecStmt(man)
{
	// Read the max start date of each (userid, currency, tournscheduleingtype) record
	// We only need to process lastest record
	PString query;
	/*query.assign("SELECT USERID, STARTDATE, CURRENCY, RINGTOURNGAME, ENDDATE FROM ").append(auxTableName).append(" a")
		 .append(" WHERE STARTDATE = (SELECT MAX(STARTDATE) FROM ").append(auxTableName)
		 .append(" GROUP BY USERID, CURRENCY, RINGTOURNGAME ")
		 .append(" HAVING USERID = a.USERID and CURRENCY = a.CURRENCY and RINGTOURNGAME = a.RINGTOURNGAME) WITH UR");
		 */
	query.assign("WITH temp1 AS (")
		 .append(" SELECT USERID, CURRENCY, RINGTOURNGAME, MAX(STARTDATE) AS MAXSTARTDATE FROM ").append(auxTableName)
		 .append(" GROUP BY USERID, CURRENCY, RINGTOURNGAME)")
		 .append(" SELECT a.USERID, a.STARTDATE, a.CURRENCY, a.RINGTOURNGAME, a.ENDDATE FROM ").append(auxTableName).append(" a")
		 .append(" JOIN temp1 ON a.USERID = temp1.USERID AND a.CURRENCY = temp1.CURRENCY AND a.RINGTOURNGAME = temp1.RINGTOURNGAME AND a.startdate = temp1.MAXSTARTDATE")
		;

	PLog("- ReadAccumAuxStmt query: ");
	PDumpEndLine(query);

	prepare(query);

	bindFirstCol(userId);
	bindNextCol(startDate);
	bindNextCol(currency);
	bindNextCol(ringTournGame);
	bindNextCol(endDate);
}


void ReadAccumAuxStmt::execGet(AccumAuxMap& accumAuxMap)
{
	accumAuxMap.clear();

	execute();
	while (fetch())
	{
		SrvDate startDate_, endDate_;
		startDate.getValue(startDate_);
		endDate.getValue(endDate_);

		AccumAuxKey accumAuxKey(userId.c_str(), currency.c_str(), ringTournGame.value);
		AccumAuxDateRange accumAuxData(startDate_, endDate_);
		accumAuxMap.insert(make_pair(accumAuxKey, accumAuxData));
	}
	closeCursor();
}


////////////////////////////////////////////////////////////////////////////////////////

ReadLatestAccumAuxDataStmt::ReadLatestAccumAuxDataStmt(DatabaseManagerCommon& man, const char* auxTableName) 
	: NoExecStmt(man)
{
	// Read the max start date 
	PString query;
	query.assign("SELECT STARTDATE, ENDDATE FROM ").append(auxTableName)
		 .append(" WHERE USERID=? AND CURRENCY=? AND RINGTOURNGAME=?")
		 .append(" ORDER BY STARTDATE DESC FETCH FIRST ROW ONLY WITH UR");

	prepare(query);

	bindFirstParam(userId);
	bindNextParam(currency);
	bindNextParam(ringTournGame);
	bindFirstCol(startDate);
	bindNextCol(endDate);
}


bool ReadLatestAccumAuxDataStmt::execGet(const AccumAuxKey& key, AccumAuxDateRange& data)
{
	bool found = false;
	userId = key.userid;
	currency = key.currency;
	ringTournGame = key.ringTournGame;

	execute();
	if (fetch())
	{
		startDate.getValue(data.startDate);
		endDate.getValue(data.endDate);

		found = true;
	}
	closeCursor();

	return found;
}

////////////////////////////////////////////////////////////////////////////////////////

ReadAccumTournROIStmt::ReadAccumTournROIStmt(DatabaseManagerCommon& man,  const SrvDate& date, const char* tournROITalbeName) 
	: NoExecStmt(man)
{
	startDate = date;

	PString query, dummy;
	query.assign("SELECT USERID, CURRENCY, sum(TOTALINVESTED) as TOTALINVESTED, sum(TOTALTOURNS) as TOTALTOURNS,")
		 .append(" sum(USERTOTALPROFIT) as USERTOTALPROFIT, sum(RAKEPAID) as RAKEPAID, sum(TOTALTOURNSWONMONEY) as TOTALTOURNSWONMONEY")
		 .append(" FROM ").append(tournROITalbeName)
		 .append(" WHERE STARTOFPERIOD='").append(srvDateToString(startDate, dummy)).append("' GROUP BY USERID, CURRENCY WITH UR");

	PLog("- ReadAccumTournROIStmt query: ");
	PDumpEndLine(query);

	prepare(query);

	bindFirstCol(cols.userId);
	bindNextCol(cols.currency);
	bindNextCol(cols.totalinvested);
	bindNextCol(cols.totaltourns);
	bindNextCol(cols.usertotalprofit);
	bindNextCol(cols.rakepaid);
	bindNextCol(cols.totaltournswonmoney);
}

void ReadAccumTournROIStmt::execGet(AccumStatsMap& accumStatsMap, UINT32& count, UINT32& accumOverflowCount)
{
	count = 0;

	execute();
	while (fetch())
	{
		AccumStatsKey accumStatsKey(cols.userId.c_str(), startDate, cols.currency.c_str(), ACCUM_GAMETYPE_TOURN);
		AccumStatsMap::iterator it = accumStatsMap.find(accumStatsKey);

		if (it == accumStatsMap.end())
		{
			AccumStatsData accumStatsData;
			cols.getTournCols(accumStatsData.tournData, accumOverflowCount);
			accumStatsMap.insert(make_pair(accumStatsKey, accumStatsData));
		}
		else
		{
			cols.getTournCols(it->second.tournData, accumOverflowCount);
		}
		++count;
	}
	closeCursor();
}

/////////////////////////////////////////////////////////////////////////////////////////////

ReadAccumHandStmt::ReadAccumHandStmt(DatabaseManagerCommon& man, const SrvDate& date, const char* handStatsTableName)
	: NoExecStmt(man)
{
	startDate = date;

	PString query, dummy;
	PString ringTournCaseStr = "(CASE WHEN TOURNSCHEDULINGTYPE=1 THEN 1 "
									 "WHEN TOURNSCHEDULINGTYPE=2 THEN 1 "
									 "WHEN TOURNSCHEDULINGTYPE=0 AND BUYIN>=0 THEN 1 "
									 "ELSE 0 "
								"END)";

	query.assign("SELECT USERID, CURRENCY, ").append(ringTournCaseStr).append(",").append(ACCUMHANDCOLUMNNAMES)
		 .append(" FROM ").append(handStatsTableName)
		 .append(" WHERE STARTOFPERIOD='").append(srvDateToString(startDate, dummy)).append("' GROUP BY USERID, CURRENCY, ").append(ringTournCaseStr).append(" WITH UR");

	PLog("- ReadAccumHandStmt query: ");
	PDumpEndLine(query);

	prepare(query);

	bindFirstCol(cols.userId);
	bindNextCol(cols.currency);
	bindNextCol(cols.ringTournGame);
	bindNextCol(cols.totalhands);
	bindNextCol(cols.totalwin);
	bindNextCol(cols.totalblindsantespaid);
	bindNextCol(cols.totalrakepaid);
	bindNextCol(cols.numbigblinds);
	bindNextCol(cols.numsmallblinds);
	bindNextCol(cols.numblindspaidoutofposition);
	bindNextCol(cols.numvpip);
	bindNextCol(cols.numvpipfromsmallblind);
	bindNextCol(cols.numvpipfrombigblind);
	bindNextCol(cols.numsawshowdown);
	bindNextCol(cols.numwonshowdown);
	bindNextCol(cols.numwonafterflop);
	bindNextCol(cols.numlimp);
	bindNextCol(cols.numlimpraise);
	bindNextCol(cols.numlimpcall);
	bindNextCol(cols.numlimpfold);
	bindNextCol(cols.numallinpreflop);
	bindNextCol(cols.numcoldcallopportunities);
	bindNextCol(cols.numcoldcalls);
	bindNextCol(cols.num3betopportunities);
	bindNextCol(cols.num3bets);
	bindNextCol(cols.numfacing3bet);
	bindNextCol(cols.numfoldto3bet);
	bindNextCol(cols.num4plusbet);
	bindNextCol(cols.numsawflop);
	bindNextCol(cols.numsawturn);
	bindNextCol(cols.numsawriver);
	bindNextCol(cols.numsaw7th);
	bindNextCol(cols.numfacing4plusbet);
	bindNextCol(cols.numfoldto4plusbet);
	bindNextCol(cols.numturnspreflop);
	bindNextCol(cols.numturnsfacingbetonflop);
	bindNextCol(cols.numturnsfacingnobetonflop);
	bindNextCol(cols.numturnsfacingbetonturn);
	bindNextCol(cols.numturnsfacingnobetonturn);
	bindNextCol(cols.numturnsfacingbetonriver);
	bindNextCol(cols.numturnsfacingnobetonriver);
	bindNextCol(cols.numturnsfacingbeton7th);
	bindNextCol(cols.numturnsfacingnobeton7th);
	bindNextCol(cols.numlastagressorpreflop);
	bindNextCol(cols.numlastagressoronflop);
	bindNextCol(cols.numlastagressoronturn);
	bindNextCol(cols.numlastagressoronriver);
	bindNextCol(cols.numcontbetonflop);
	bindNextCol(cols.numcontbetonturn);
	bindNextCol(cols.numcontbetonriver);
	bindNextCol(cols.numcontbeton7th);
	bindNextCol(cols.numbetpreflop);
	bindNextCol(cols.numbetonflop);
	bindNextCol(cols.numbetonturn);
	bindNextCol(cols.numbetonriver);
	bindNextCol(cols.numbeton7th);
	bindNextCol(cols.numcheckonflop);
	bindNextCol(cols.numcheckonturn);
	bindNextCol(cols.numcheckonriver);
	bindNextCol(cols.numcheckon7th);
	bindNextCol(cols.numfoldpreflop);
	bindNextCol(cols.numfoldonflop);
	bindNextCol(cols.numfoldonturn);
	bindNextCol(cols.numfoldonriver);
	bindNextCol(cols.numfoldon7th);
	bindNextCol(cols.numcallspreflop);
	bindNextCol(cols.numcallsonflop);
	bindNextCol(cols.numcallsonturn);
	bindNextCol(cols.numcallsonriver);
	bindNextCol(cols.numcallson7th);
	bindNextCol(cols.numraisespreflop);
	bindNextCol(cols.numraisesonflop);
	bindNextCol(cols.numraisesonturn);
	bindNextCol(cols.numraisesonriver);
	bindNextCol(cols.numraiseson7th);
	bindNextCol(cols.numcheckcallonflop);
	bindNextCol(cols.numcheckcallonturn);
	bindNextCol(cols.numcheckcallonriver);
	bindNextCol(cols.numcheckcallon7th);
	bindNextCol(cols.numcheckraiseonflop);
	bindNextCol(cols.numcheckraiseonturn);
	bindNextCol(cols.numcheckraiseonriver);
	bindNextCol(cols.numcheckraiseon7th);
	bindNextCol(cols.numcheckfoldonflop);
	bindNextCol(cols.numcheckfoldonturn);
	bindNextCol(cols.numcheckfoldonriver);
	bindNextCol(cols.numcheckfoldon7th);
	bindNextCol(cols.numopenfoldpowerfulhand);
	bindNextCol(cols.numfoldtoextremeodds);
	bindNextCol(cols.numreraisewithgarbage);
	bindNextCol(cols.numcheckbehindonriver);
	bindNextCol(cols.numfoldwhencouldcheck);
	bindNextCol(cols.numattemptstealblinds);
	bindNextCol(cols.numfoldtostealfromsbopps);
	bindNextCol(cols.numfoldtostealfromsb);
	bindNextCol(cols.numfoldtostealfrombbopps);
	bindNextCol(cols.numfoldtostealfrombb);
	bindNextCol(cols.numcheckraiseoppsonflop);
	bindNextCol(cols.numcheckraiseoppsonturn);
	bindNextCol(cols.numcheckraiseoppsonriver);
	bindNextCol(cols.numcheckraiseoppson7th);
	bindNextCol(cols.numattemptstealblindsopps);
	bindNextCol(cols.num4betopportunities);
	bindNextCol(cols.numhandsraisedpreflop);
	bindNextCol(cols.numcallbetsonlypreflop);
	bindNextCol(cols.numcallbetsonlyonflop);
	bindNextCol(cols.numcallbetsonlyonturn);
	bindNextCol(cols.numcallbetsonlyonriver);
	bindNextCol(cols.numcallbetsonlyon7th);
	bindNextCol(cols.numturnsfacingbetonlyonflop);
	bindNextCol(cols.numturnsfacingbetonlyonturn);
	bindNextCol(cols.numturnsfacingbetonlyonriver);
	bindNextCol(cols.numturnsfacingbetonlyon7th);
	bindNextCol(cols.numfoldtobetonlypreflop);
	bindNextCol(cols.numfoldtobetonlyonflop);
	bindNextCol(cols.numfoldtobetonlyonturn);
	bindNextCol(cols.numfoldtobetonlyonriver);
	bindNextCol(cols.numfoldtobetonlyon7th);
	bindNextCol(cols.totalplayersinhands);
	bindNextCol(cols.totalbet);
	bindNextCol(cols.numfacing3bet_hem);
	bindNextCol(cols.numfoldto3bet_hem);
	bindNextCol(cols.numfacing4plusbet_hem);
	bindNextCol(cols.numfoldto4plusbet_hem);
	bindNextCol(cols.numcontbetoppsvs2inposonflop);
	bindNextCol(cols.numcontbetoppsvs2inposonturn);
	bindNextCol(cols.numcontbetoppsvs2inposonriver);
	bindNextCol(cols.numcontbetoppsvs2inposon7th);
	bindNextCol(cols.numcontbetvs2inposonflop);
	bindNextCol(cols.numcontbetvs2inposonturn);
	bindNextCol(cols.numcontbetvs2inposonriver);
	bindNextCol(cols.numcontbetvs2inposon7th);
}

void ReadAccumHandStmt::execGet(AccumStatsMap& accumStatsMap, UINT32& count, UINT32& accumOverflowCount)
{
	count = 0;

	execute();
	while (fetch())
	{
		AccumStatsKey accumStatsKey(cols.userId.c_str(), startDate, cols.currency.c_str(), cols.ringTournGame.value);
		AccumStatsMap::iterator it = accumStatsMap.find(accumStatsKey);

		if (it == accumStatsMap.end())
		{
			AccumStatsData accumStatsData;
			cols.getHandCols(accumStatsData.handData, accumOverflowCount);
			accumStatsMap.insert(make_pair(accumStatsKey, accumStatsData));
		}
		else
		{
			cols.getHandCols(it->second.handData, accumOverflowCount);
		}

		++count;
	}
	closeCursor();
}

/////////////////////////////////////////////////////////////////////////////////////////////
ReadAccumStatsStmt::ReadAccumStatsStmt(DatabaseManagerCommon& man, const char* accumStatsTableName)
	: NoExecStmt(man)
{
	PString query;

	query.assign("SELECT ").append(ACCUMSTATSCOLUMNNAMES)
		 .append(" FROM ").append(accumStatsTableName)
		 .append(" WHERE USERID=? AND STARTOFPERIOD=? AND CURRENCY=? AND RINGTOURNGAME=?");

	prepare(query);

	bindFirstParam(userId);
	bindNextParam(startOfPeriod);
	bindNextParam(currency);
	bindNextParam(ringTournGame);

	bindFirstCol(cols.tournCols.totalinvested);
	bindNextCol(cols.tournCols.totaltourns);
	bindNextCol(cols.tournCols.usertotalprofit);
	bindNextCol(cols.tournCols.rakepaid);
	bindNextCol(cols.tournCols.totaltournswonmoney);
	bindNextCol(cols.handCols.totalhands);
	bindNextCol(cols.handCols.totalwin);
	bindNextCol(cols.handCols.totalblindsantespaid);
	bindNextCol(cols.handCols.totalrakepaid);
	bindNextCol(cols.handCols.numbigblinds);
	bindNextCol(cols.handCols.numsmallblinds);
	bindNextCol(cols.handCols.numblindspaidoutofposition);
	bindNextCol(cols.handCols.numvpip);
	bindNextCol(cols.handCols.numvpipfromsmallblind);
	bindNextCol(cols.handCols.numvpipfrombigblind);
	bindNextCol(cols.handCols.numsawshowdown);
	bindNextCol(cols.handCols.numwonshowdown);
	bindNextCol(cols.handCols.numwonafterflop);
	bindNextCol(cols.handCols.numlimp);
	bindNextCol(cols.handCols.numlimpraise);
	bindNextCol(cols.handCols.numlimpcall);
	bindNextCol(cols.handCols.numlimpfold);
	bindNextCol(cols.handCols.numallinpreflop);
	bindNextCol(cols.handCols.numcoldcallopportunities);
	bindNextCol(cols.handCols.numcoldcalls);
	bindNextCol(cols.handCols.num3betopportunities);
	bindNextCol(cols.handCols.num3bets);
	bindNextCol(cols.handCols.numfacing3bet);
	bindNextCol(cols.handCols.numfoldto3bet);
	bindNextCol(cols.handCols.num4plusbet);
	bindNextCol(cols.handCols.numsawflop);
	bindNextCol(cols.handCols.numsawturn);
	bindNextCol(cols.handCols.numsawriver);
	bindNextCol(cols.handCols.numsaw7th);
	bindNextCol(cols.handCols.numfacing4plusbet);
	bindNextCol(cols.handCols.numfoldto4plusbet);
	bindNextCol(cols.handCols.numturnspreflop);
	bindNextCol(cols.handCols.numturnsfacingbetonflop);
	bindNextCol(cols.handCols.numturnsfacingnobetonflop);
	bindNextCol(cols.handCols.numturnsfacingbetonturn);
	bindNextCol(cols.handCols.numturnsfacingnobetonturn);
	bindNextCol(cols.handCols.numturnsfacingbetonriver);
	bindNextCol(cols.handCols.numturnsfacingnobetonriver);
	bindNextCol(cols.handCols.numturnsfacingbeton7th);
	bindNextCol(cols.handCols.numturnsfacingnobeton7th);
	bindNextCol(cols.handCols.numlastagressorpreflop);
	bindNextCol(cols.handCols.numlastagressoronflop);
	bindNextCol(cols.handCols.numlastagressoronturn);
	bindNextCol(cols.handCols.numlastagressoronriver);
	bindNextCol(cols.handCols.numcontbetonflop);
	bindNextCol(cols.handCols.numcontbetonturn);
	bindNextCol(cols.handCols.numcontbetonriver);
	bindNextCol(cols.handCols.numcontbeton7th);
	bindNextCol(cols.handCols.numbetpreflop);
	bindNextCol(cols.handCols.numbetonflop);
	bindNextCol(cols.handCols.numbetonturn);
	bindNextCol(cols.handCols.numbetonriver);
	bindNextCol(cols.handCols.numbeton7th);
	bindNextCol(cols.handCols.numcheckonflop);
	bindNextCol(cols.handCols.numcheckonturn);
	bindNextCol(cols.handCols.numcheckonriver);
	bindNextCol(cols.handCols.numcheckon7th);
	bindNextCol(cols.handCols.numfoldpreflop);
	bindNextCol(cols.handCols.numfoldonflop);
	bindNextCol(cols.handCols.numfoldonturn);
	bindNextCol(cols.handCols.numfoldonriver);
	bindNextCol(cols.handCols.numfoldon7th);
	bindNextCol(cols.handCols.numcallspreflop);
	bindNextCol(cols.handCols.numcallsonflop);
	bindNextCol(cols.handCols.numcallsonturn);
	bindNextCol(cols.handCols.numcallsonriver);
	bindNextCol(cols.handCols.numcallson7th);
	bindNextCol(cols.handCols.numraisespreflop);
	bindNextCol(cols.handCols.numraisesonflop);
	bindNextCol(cols.handCols.numraisesonturn);
	bindNextCol(cols.handCols.numraisesonriver);
	bindNextCol(cols.handCols.numraiseson7th);
	bindNextCol(cols.handCols.numcheckcallonflop);
	bindNextCol(cols.handCols.numcheckcallonturn);
	bindNextCol(cols.handCols.numcheckcallonriver);
	bindNextCol(cols.handCols.numcheckcallon7th);
	bindNextCol(cols.handCols.numcheckraiseonflop);
	bindNextCol(cols.handCols.numcheckraiseonturn);
	bindNextCol(cols.handCols.numcheckraiseonriver);
	bindNextCol(cols.handCols.numcheckraiseon7th);
	bindNextCol(cols.handCols.numcheckfoldonflop);
	bindNextCol(cols.handCols.numcheckfoldonturn);
	bindNextCol(cols.handCols.numcheckfoldonriver);
	bindNextCol(cols.handCols.numcheckfoldon7th);
	bindNextCol(cols.handCols.numopenfoldpowerfulhand);
	bindNextCol(cols.handCols.numfoldtoextremeodds);
	bindNextCol(cols.handCols.numreraisewithgarbage);
	bindNextCol(cols.handCols.numcheckbehindonriver);
	bindNextCol(cols.handCols.numfoldwhencouldcheck);
	bindNextCol(cols.handCols.numattemptstealblinds);
	bindNextCol(cols.handCols.numfoldtostealfromsbopps);
	bindNextCol(cols.handCols.numfoldtostealfromsb);
	bindNextCol(cols.handCols.numfoldtostealfrombbopps);
	bindNextCol(cols.handCols.numfoldtostealfrombb);
	bindNextCol(cols.handCols.numcheckraiseoppsonflop);
	bindNextCol(cols.handCols.numcheckraiseoppsonturn);
	bindNextCol(cols.handCols.numcheckraiseoppsonriver);
	bindNextCol(cols.handCols.numcheckraiseoppson7th);
	bindNextCol(cols.handCols.numattemptstealblindsopps);
	bindNextCol(cols.handCols.num4betopportunities);
	bindNextCol(cols.handCols.numhandsraisedpreflop);
	bindNextCol(cols.handCols.numcallbetsonlypreflop);
	bindNextCol(cols.handCols.numcallbetsonlyonflop);
	bindNextCol(cols.handCols.numcallbetsonlyonturn);
	bindNextCol(cols.handCols.numcallbetsonlyonriver);
	bindNextCol(cols.handCols.numcallbetsonlyon7th);
	bindNextCol(cols.handCols.numturnsfacingbetonlyonflop);
	bindNextCol(cols.handCols.numturnsfacingbetonlyonturn);
	bindNextCol(cols.handCols.numturnsfacingbetonlyonriver);
	bindNextCol(cols.handCols.numturnsfacingbetonlyon7th);
	bindNextCol(cols.handCols.numfoldtobetonlypreflop);
	bindNextCol(cols.handCols.numfoldtobetonlyonflop);
	bindNextCol(cols.handCols.numfoldtobetonlyonturn);
	bindNextCol(cols.handCols.numfoldtobetonlyonriver);
	bindNextCol(cols.handCols.numfoldtobetonlyon7th);
	bindNextCol(cols.handCols.totalplayersinhands);
	bindNextCol(cols.handCols.totalbet);
	bindNextCol(cols.handCols.numfacing3bet_hem);
	bindNextCol(cols.handCols.numfoldto3bet_hem);
	bindNextCol(cols.handCols.numfacing4plusbet_hem);
	bindNextCol(cols.handCols.numfoldto4plusbet_hem);
	bindNextCol(cols.handCols.numcontbetoppsvs2inposonflop);
	bindNextCol(cols.handCols.numcontbetoppsvs2inposonturn);
	bindNextCol(cols.handCols.numcontbetoppsvs2inposonriver);
	bindNextCol(cols.handCols.numcontbetoppsvs2inposon7th);
	bindNextCol(cols.handCols.numcontbetvs2inposonflop);
	bindNextCol(cols.handCols.numcontbetvs2inposonturn);
	bindNextCol(cols.handCols.numcontbetvs2inposonriver);
	bindNextCol(cols.handCols.numcontbetvs2inposon7th);
}

bool ReadAccumStatsStmt::execGet(const AccumStatsKey& key, AccumStatsData& data, UINT32& accumOverflowCount)
{
	bool foundRecord = false;

	userId = key.userid;
	startOfPeriod = key.startDate;
	currency = key.currency;
	ringTournGame = key.ringTournGame;

	execute();
	if (fetch())
	{
		foundRecord = true;
		cols.tournCols.getTournCols(data.tournData, accumOverflowCount);
		cols.handCols.getHandCols(data.handData, accumOverflowCount);
	}
	closeCursor();

	return foundRecord;
}

/////////////////////////////////////////////////////////////////////////////////////////////

AccumulateWeeklyDataStmt::AccumulateWeeklyDataStmt(DatabaseManagerCommon& man, const SrvDate& date)
	: AccumulateDataBaseStmt(man)
{
	PString dateStr;
	srvDateToString(date, dateStr);

	query.assign("WITH T0 AS (")
		 .append(" SELECT USERID,CURRENCY,1 RINGTOURNGAME")
		 .append(ACCUMTOURNCOLUMNNAMES).append(ZEROHANDCOLUMNNAMES)
		 .append(" FROM TOURNROIWEEK WHERE STARTOFPERIOD = '").append(dateStr).append("' GROUP BY USERID, CURRENCY")
		 .append(" UNION ALL")
		 .append(" SELECT USERID,CURRENCY,").append(HANDGAMETYPE).append(" RINGTOURNGAME")
		 .append(ZEROTOURNCOLUMNNAMES).append(ACCUMHANDCOLUMNNAMES)
		 .append(" FROM HANDSTATSWEEK WHERE STARTOFPERIOD = '").append(dateStr).append("' GROUP BY USERID, CURRENCY, ").append(HANDGAMETYPE)
		 .append(")")
		 .append(", T1 AS(")
		 .append(" SELECT USERID,CURRENCY,CAST ('").append(dateStr).append("' AS DATE) STARTOFPERIOD,RINGTOURNGAME")
		 .append(ACCUMTOURNCOLUMNNAMES).append(ACCUMHANDCOLUMNNAMES)
		 .append(" FROM T0 GROUP BY USERID,CURRENCY,RINGTOURNGAME")
		 .append(")")
		 .append(",TX AS (")
		 .append("SELECT T1.*, VALUE(")
		 .append(" (SELECT MAX(STARTDATE) FROM ACCUMSTATSAUXWEEK WHERE USERID=T1.USERID AND CURRENCY=T1.CURRENCY AND RINGTOURNGAME=T1.RINGTOURNGAME AND STARTDATE<T1.STARTOFPERIOD),T1.STARTOFPERIOD) LASTSTARTDATE FROM T1") 
		 .append(" )")
		 .append(",T2 AS (")
		 .append(" SELECT TX.*, VALUE(")
		 .append(" (SELECT ENDDATE FROM ACCUMSTATSAUXWEEK WHERE USERID=TX.USERID AND CURRENCY=TX.CURRENCY AND RINGTOURNGAME=TX.RINGTOURNGAME AND STARTDATE=TX.LASTSTARTDATE),TX.STARTOFPERIOD) LASTENDDATE")
		 .append(" FROM TX")
		 .append(" )")
		 .append(" SELECT T2.USERID,T2.CURRENCY,T2.STARTOFPERIOD,T2.LASTSTARTDATE,T2.LASTENDDATE,T2.RINGTOURNGAME")
		 .append(ACCUMWEEKLYSTATSDATACOLUMNS)
		 .append(" FROM T2")
		 .append(" LEFT JOIN ACCUMSTATSWEEK A ON A.USERID=T2.USERID AND A.CURRENCY=T2.CURRENCY AND A.RINGTOURNGAME=T2.RINGTOURNGAME")
		 .append(" AND A.STARTOFPERIOD = T2.LASTENDDATE ORDER BY T2.USERID, T2.CURRENCY, T2.RINGTOURNGAME");

	PLog("- AccumulateWeeklyDataStmt query: ");
	PDumpEndLine(query);

	prepareAndBind();
}

AccumulateDailyDataStmt::AccumulateDailyDataStmt(DatabaseManagerCommon& man, const SrvDate& date)
	: AccumulateDataBaseStmt(man)
{
	PString dateStr;
	srvDateToString(date, dateStr);

	query.assign("WITH T0 AS (")
		 .append(" SELECT USERID,CURRENCY,1 RINGTOURNGAME")
		 .append(ACCUMTOURNCOLUMNNAMES).append(ZEROHANDCOLUMNNAMES)
		 .append(" FROM TOURNROIDAY WHERE STARTOFPERIOD = '").append(dateStr).append("' GROUP BY USERID, CURRENCY")
		 .append(" UNION ALL")
		 .append(" SELECT USERID,CURRENCY,").append(HANDGAMETYPE).append(" RINGTOURNGAME")
		 .append(ZEROTOURNCOLUMNNAMES).append(ACCUMHANDCOLUMNNAMES)
		 .append(" FROM HANDSTATSDAY WHERE STARTOFPERIOD = '").append(dateStr).append("' GROUP BY USERID, CURRENCY, ").append(HANDGAMETYPE)
		 .append(")")
		 .append(", T1 AS(")
		 .append(" SELECT USERID,CURRENCY,CAST ('").append(dateStr).append("' AS DATE) STARTOFPERIOD,RINGTOURNGAME")
		 .append(ACCUMTOURNCOLUMNNAMES).append(ACCUMHANDCOLUMNNAMES)
		 .append(" FROM T0 GROUP BY USERID,CURRENCY,RINGTOURNGAME")
		 .append(")")
		 .append(",TX AS (")
		 .append("SELECT T1.* ")
		 .append(",VALUE((SELECT MAX(STARTDATE) FROM ACCUMSTATSAUXDAY  WHERE USERID=T1.USERID AND CURRENCY=T1.CURRENCY AND RINGTOURNGAME=T1.RINGTOURNGAME AND STARTDATE<T1.STARTOFPERIOD),T1.STARTOFPERIOD) LASTSTARTDATE_D")
		 .append(",VALUE((SELECT MAX(STARTDATE) FROM ACCUMSTATSAUXWEEK WHERE USERID=T1.USERID AND CURRENCY=T1.CURRENCY AND RINGTOURNGAME=T1.RINGTOURNGAME AND STARTDATE<T1.STARTOFPERIOD),T1.STARTOFPERIOD) LASTSTARTDATE_W")
		 .append("  FROM T1") 
		 .append(" )")
		 .append(",T2 AS (")
		 .append(" SELECT TX.* ")
		 .append(",VALUE((SELECT ENDDATE FROM ACCUMSTATSAUXDAY  WHERE USERID=TX.USERID AND CURRENCY=TX.CURRENCY AND RINGTOURNGAME=TX.RINGTOURNGAME AND STARTDATE=TX.LASTSTARTDATE_D),TX.STARTOFPERIOD) LASTENDDATE_D")
		 .append(",VALUE((SELECT ENDDATE FROM ACCUMSTATSAUXWEEK WHERE USERID=TX.USERID AND CURRENCY=TX.CURRENCY AND RINGTOURNGAME=TX.RINGTOURNGAME AND STARTDATE=TX.LASTSTARTDATE_W),TX.STARTOFPERIOD) LASTENDDATE_W")
		 .append(" FROM TX")
		 .append(" )")
		 .append(" SELECT T2.USERID,T2.CURRENCY,T2.STARTOFPERIOD,T2.LASTSTARTDATE_D,T2.LASTENDDATE_D,T2.RINGTOURNGAME")
		 .append(ACCUMDAILYSTATSDATACOLUMNS)
		 .append(" FROM T2")
		 .append(" LEFT JOIN ACCUMSTATSDAY  D ON D.USERID=T2.USERID AND D.CURRENCY=T2.CURRENCY AND D.RINGTOURNGAME=T2.RINGTOURNGAME AND D.STARTOFPERIOD = T2.LASTENDDATE_D")
		 .append(" LEFT JOIN ACCUMSTATSWEEK W ON W.USERID=T2.USERID AND W.CURRENCY=T2.CURRENCY AND W.RINGTOURNGAME=T2.RINGTOURNGAME AND W.STARTOFPERIOD = T2.LASTENDDATE_W")
		 .append(" ORDER BY T2.USERID, T2.CURRENCY, T2.RINGTOURNGAME");

	PLog("- AccumulateDailyDataStmt query: ");
	PDumpEndLine(query);

	prepareAndBind();
}

void AccumulateDataBaseStmt::getAccumData(AccumStatsKey& key, AccumAuxDateRange& dateRange, AccumStatsData& data, UINT32& accumOverflowCount)
{
	key.userid = userId.c_str();
	key.currency = currency.c_str();
	startOfPeriod.getValue(key.startDate);
	key.ringTournGame = ringTournGame.value;

	lastStartDate.getValue(dateRange.startDate);
	lastEndDate.getValue(dateRange.endDate);

	cols.tournCols.getTournCols(data.tournData, accumOverflowCount);
	cols.handCols.getHandCols(data.handData, accumOverflowCount);
}

void AccumulateDataBaseStmt::prepareAndBind()
{
	prepare(query);

	bindFirstCol(userId);
	bindNextCol(currency);
	bindNextCol(startOfPeriod);
	bindNextCol(lastStartDate);
	bindNextCol(lastEndDate);
	bindNextCol(ringTournGame);
	bindNextCol(cols.tournCols.totalinvested);
	bindNextCol(cols.tournCols.totaltourns);
	bindNextCol(cols.tournCols.usertotalprofit);
	bindNextCol(cols.tournCols.rakepaid);
	bindNextCol(cols.tournCols.totaltournswonmoney);
	bindNextCol(cols.handCols.totalhands);
	bindNextCol(cols.handCols.totalwin);
	bindNextCol(cols.handCols.totalblindsantespaid);
	bindNextCol(cols.handCols.totalrakepaid);
	bindNextCol(cols.handCols.numbigblinds);
	bindNextCol(cols.handCols.numsmallblinds);
	bindNextCol(cols.handCols.numblindspaidoutofposition);
	bindNextCol(cols.handCols.numvpip);
	bindNextCol(cols.handCols.numvpipfromsmallblind);
	bindNextCol(cols.handCols.numvpipfrombigblind);
	bindNextCol(cols.handCols.numsawshowdown);
	bindNextCol(cols.handCols.numwonshowdown);
	bindNextCol(cols.handCols.numwonafterflop);
	bindNextCol(cols.handCols.numlimp);
	bindNextCol(cols.handCols.numlimpraise);
	bindNextCol(cols.handCols.numlimpcall);
	bindNextCol(cols.handCols.numlimpfold);
	bindNextCol(cols.handCols.numallinpreflop);
	bindNextCol(cols.handCols.numcoldcallopportunities);
	bindNextCol(cols.handCols.numcoldcalls);
	bindNextCol(cols.handCols.num3betopportunities);
	bindNextCol(cols.handCols.num3bets);
	bindNextCol(cols.handCols.numfacing3bet);
	bindNextCol(cols.handCols.numfoldto3bet);
	bindNextCol(cols.handCols.num4plusbet);
	bindNextCol(cols.handCols.numsawflop);
	bindNextCol(cols.handCols.numsawturn);
	bindNextCol(cols.handCols.numsawriver);
	bindNextCol(cols.handCols.numsaw7th);
	bindNextCol(cols.handCols.numfacing4plusbet);
	bindNextCol(cols.handCols.numfoldto4plusbet);
	bindNextCol(cols.handCols.numturnspreflop);
	bindNextCol(cols.handCols.numturnsfacingbetonflop);
	bindNextCol(cols.handCols.numturnsfacingnobetonflop);
	bindNextCol(cols.handCols.numturnsfacingbetonturn);
	bindNextCol(cols.handCols.numturnsfacingnobetonturn);
	bindNextCol(cols.handCols.numturnsfacingbetonriver);
	bindNextCol(cols.handCols.numturnsfacingnobetonriver);
	bindNextCol(cols.handCols.numturnsfacingbeton7th);
	bindNextCol(cols.handCols.numturnsfacingnobeton7th);
	bindNextCol(cols.handCols.numlastagressorpreflop);
	bindNextCol(cols.handCols.numlastagressoronflop);
	bindNextCol(cols.handCols.numlastagressoronturn);
	bindNextCol(cols.handCols.numlastagressoronriver);
	bindNextCol(cols.handCols.numcontbetonflop);
	bindNextCol(cols.handCols.numcontbetonturn);
	bindNextCol(cols.handCols.numcontbetonriver);
	bindNextCol(cols.handCols.numcontbeton7th);
	bindNextCol(cols.handCols.numbetpreflop);
	bindNextCol(cols.handCols.numbetonflop);
	bindNextCol(cols.handCols.numbetonturn);
	bindNextCol(cols.handCols.numbetonriver);
	bindNextCol(cols.handCols.numbeton7th);
	bindNextCol(cols.handCols.numcheckonflop);
	bindNextCol(cols.handCols.numcheckonturn);
	bindNextCol(cols.handCols.numcheckonriver);
	bindNextCol(cols.handCols.numcheckon7th);
	bindNextCol(cols.handCols.numfoldpreflop);
	bindNextCol(cols.handCols.numfoldonflop);
	bindNextCol(cols.handCols.numfoldonturn);
	bindNextCol(cols.handCols.numfoldonriver);
	bindNextCol(cols.handCols.numfoldon7th);
	bindNextCol(cols.handCols.numcallspreflop);
	bindNextCol(cols.handCols.numcallsonflop);
	bindNextCol(cols.handCols.numcallsonturn);
	bindNextCol(cols.handCols.numcallsonriver);
	bindNextCol(cols.handCols.numcallson7th);
	bindNextCol(cols.handCols.numraisespreflop);
	bindNextCol(cols.handCols.numraisesonflop);
	bindNextCol(cols.handCols.numraisesonturn);
	bindNextCol(cols.handCols.numraisesonriver);
	bindNextCol(cols.handCols.numraiseson7th);
	bindNextCol(cols.handCols.numcheckcallonflop);
	bindNextCol(cols.handCols.numcheckcallonturn);
	bindNextCol(cols.handCols.numcheckcallonriver);
	bindNextCol(cols.handCols.numcheckcallon7th);
	bindNextCol(cols.handCols.numcheckraiseonflop);
	bindNextCol(cols.handCols.numcheckraiseonturn);
	bindNextCol(cols.handCols.numcheckraiseonriver);
	bindNextCol(cols.handCols.numcheckraiseon7th);
	bindNextCol(cols.handCols.numcheckfoldonflop);
	bindNextCol(cols.handCols.numcheckfoldonturn);
	bindNextCol(cols.handCols.numcheckfoldonriver);
	bindNextCol(cols.handCols.numcheckfoldon7th);
	bindNextCol(cols.handCols.numopenfoldpowerfulhand);
	bindNextCol(cols.handCols.numfoldtoextremeodds);
	bindNextCol(cols.handCols.numreraisewithgarbage);
	bindNextCol(cols.handCols.numcheckbehindonriver);
	bindNextCol(cols.handCols.numfoldwhencouldcheck);
	bindNextCol(cols.handCols.numattemptstealblinds);
	bindNextCol(cols.handCols.numfoldtostealfromsbopps);
	bindNextCol(cols.handCols.numfoldtostealfromsb);
	bindNextCol(cols.handCols.numfoldtostealfrombbopps);
	bindNextCol(cols.handCols.numfoldtostealfrombb);
	bindNextCol(cols.handCols.numcheckraiseoppsonflop);
	bindNextCol(cols.handCols.numcheckraiseoppsonturn);
	bindNextCol(cols.handCols.numcheckraiseoppsonriver);
	bindNextCol(cols.handCols.numcheckraiseoppson7th);
	bindNextCol(cols.handCols.numattemptstealblindsopps);
	bindNextCol(cols.handCols.num4betopportunities);
	bindNextCol(cols.handCols.numhandsraisedpreflop);
	bindNextCol(cols.handCols.numcallbetsonlypreflop);
	bindNextCol(cols.handCols.numcallbetsonlyonflop);
	bindNextCol(cols.handCols.numcallbetsonlyonturn);
	bindNextCol(cols.handCols.numcallbetsonlyonriver);
	bindNextCol(cols.handCols.numcallbetsonlyon7th);
	bindNextCol(cols.handCols.numturnsfacingbetonlyonflop);
	bindNextCol(cols.handCols.numturnsfacingbetonlyonturn);
	bindNextCol(cols.handCols.numturnsfacingbetonlyonriver);
	bindNextCol(cols.handCols.numturnsfacingbetonlyon7th);
	bindNextCol(cols.handCols.numfoldtobetonlypreflop);
	bindNextCol(cols.handCols.numfoldtobetonlyonflop);
	bindNextCol(cols.handCols.numfoldtobetonlyonturn);
	bindNextCol(cols.handCols.numfoldtobetonlyonriver);
	bindNextCol(cols.handCols.numfoldtobetonlyon7th);
	bindNextCol(cols.handCols.totalplayersinhands);
	bindNextCol(cols.handCols.totalbet);
	bindNextCol(cols.handCols.numfacing3bet_hem);
	bindNextCol(cols.handCols.numfoldto3bet_hem);
	bindNextCol(cols.handCols.numfacing4plusbet_hem);
	bindNextCol(cols.handCols.numfoldto4plusbet_hem);
	bindNextCol(cols.handCols.numcontbetoppsvs2inposonflop);
	bindNextCol(cols.handCols.numcontbetoppsvs2inposonturn);
	bindNextCol(cols.handCols.numcontbetoppsvs2inposonriver);
	bindNextCol(cols.handCols.numcontbetoppsvs2inposon7th);
	bindNextCol(cols.handCols.numcontbetvs2inposonflop);
	bindNextCol(cols.handCols.numcontbetvs2inposonturn);
	bindNextCol(cols.handCols.numcontbetvs2inposonriver);
	bindNextCol(cols.handCols.numcontbetvs2inposon7th);
}

AccumulateUserDataStmt::AccumulateUserDataStmt(DatabaseManagerCommon& man)
	: AccumulateDataBaseStmt(man)
{
}

void AccumulateUserDataStmt::init(const char* userid, const SrvDate& date)
{
	input_userId.initCut(userid);
	input_startOfPeriod = date;
}

AccumulateUserDailyDataStmt::AccumulateUserDailyDataStmt(DatabaseManagerCommon& man)
	: AccumulateUserDataStmt(man)
{
	query.assign("WITH T0 AS (")
		.append(" SELECT USERID,STARTOFPERIOD,CURRENCY,1 RINGTOURNGAME")
		.append(ACCUMTOURNCOLUMNNAMES).append(ZEROHANDCOLUMNNAMES)
		.append(" FROM TOURNROIDAY WHERE STARTOFPERIOD=? AND USERID=? GROUP BY USERID,STARTOFPERIOD,CURRENCY")
		.append(" UNION ALL")
		.append(" SELECT USERID,STARTOFPERIOD,CURRENCY,").append(HANDGAMETYPE).append(" RINGTOURNGAME")
		.append(ZEROTOURNCOLUMNNAMES).append(ACCUMHANDCOLUMNNAMES)
		.append(" FROM HANDSTATSDAY WHERE STARTOFPERIOD=? AND USERID=? GROUP BY USERID,STARTOFPERIOD,CURRENCY, ").append(HANDGAMETYPE)
		.append(")")
		.append(", T1 AS(")
		.append(" SELECT USERID,CURRENCY, STARTOFPERIOD,RINGTOURNGAME")
		.append(ACCUMTOURNCOLUMNNAMES).append(ACCUMHANDCOLUMNNAMES)
		.append(" FROM T0 GROUP BY USERID, STARTOFPERIOD, CURRENCY,RINGTOURNGAME")
		.append(")")
		.append(",TX AS (")
		.append("SELECT T1.* ")
		.append(",VALUE((SELECT MAX(STARTDATE) FROM ACCUMSTATSAUXDAY  WHERE USERID=T1.USERID AND CURRENCY=T1.CURRENCY AND RINGTOURNGAME=T1.RINGTOURNGAME AND STARTDATE<T1.STARTOFPERIOD),T1.STARTOFPERIOD) LASTSTARTDATE_D")
		.append(",VALUE((SELECT MAX(STARTDATE) FROM ACCUMSTATSAUXWEEK WHERE USERID=T1.USERID AND CURRENCY=T1.CURRENCY AND RINGTOURNGAME=T1.RINGTOURNGAME AND STARTDATE<T1.STARTOFPERIOD),T1.STARTOFPERIOD) LASTSTARTDATE_W")
		.append("  FROM T1")
		.append(" )")
		.append(",T2 AS (")
		.append(" SELECT TX.* ")
		.append(",VALUE((SELECT ENDDATE FROM ACCUMSTATSAUXDAY  WHERE USERID=TX.USERID AND CURRENCY=TX.CURRENCY AND RINGTOURNGAME=TX.RINGTOURNGAME AND STARTDATE=TX.LASTSTARTDATE_D),TX.STARTOFPERIOD) LASTENDDATE_D")
		.append(",VALUE((SELECT ENDDATE FROM ACCUMSTATSAUXWEEK WHERE USERID=TX.USERID AND CURRENCY=TX.CURRENCY AND RINGTOURNGAME=TX.RINGTOURNGAME AND STARTDATE=TX.LASTSTARTDATE_W),TX.STARTOFPERIOD) LASTENDDATE_W")
		.append(" FROM TX")
		.append(" )")
		.append(" SELECT T2.USERID,T2.CURRENCY,T2.STARTOFPERIOD,T2.LASTSTARTDATE_D,T2.LASTENDDATE_D,T2.RINGTOURNGAME")
		.append(ACCUMDAILYSTATSDATACOLUMNS)
		.append(" FROM T2")
		.append(" LEFT JOIN ACCUMSTATSDAY  D ON D.USERID=T2.USERID AND D.CURRENCY=T2.CURRENCY AND D.RINGTOURNGAME=T2.RINGTOURNGAME AND D.STARTOFPERIOD = T2.LASTENDDATE_D")
		.append(" LEFT JOIN ACCUMSTATSWEEK W ON W.USERID=T2.USERID AND W.CURRENCY=T2.CURRENCY AND W.RINGTOURNGAME=T2.RINGTOURNGAME AND W.STARTOFPERIOD = T2.LASTENDDATE_W")
		.append(" ORDER BY T2.CURRENCY, T2.RINGTOURNGAME");

	PLog("- AccumulateUserDailyDataStmt query: ");
	PDumpEndLine(query);

	prepareAndBind();

	bindFirstParam(input_startOfPeriod);
	bindNextParam(input_userId);
	bindNextParam(input_startOfPeriod);
	bindNextParam(input_userId);
}

AccumulateUserWeeklyDataStmt::AccumulateUserWeeklyDataStmt(DatabaseManagerCommon& man)
	: AccumulateUserDataStmt(man)
{
	query.assign("WITH T0 AS (")
		.append(" SELECT USERID,STARTOFPERIOD,CURRENCY,1 RINGTOURNGAME")
		.append(ACCUMTOURNCOLUMNNAMES).append(ZEROHANDCOLUMNNAMES)
		.append(" FROM TOURNROIWEEK WHERE STARTOFPERIOD=? AND USERID=? GROUP BY USERID,STARTOFPERIOD,CURRENCY")
		.append(" UNION ALL")
		.append(" SELECT USERID,STARTOFPERIOD,CURRENCY,").append(HANDGAMETYPE).append(" RINGTOURNGAME")
		.append(ZEROTOURNCOLUMNNAMES).append(ACCUMHANDCOLUMNNAMES)
		.append(" FROM HANDSTATSWEEK WHERE STARTOFPERIOD=? AND USERID=? GROUP BY USERID,STARTOFPERIOD,CURRENCY, ").append(HANDGAMETYPE)
		.append(")")
		.append(", T1 AS(")
		.append(" SELECT USERID,CURRENCY,STARTOFPERIOD,RINGTOURNGAME")
		.append(ACCUMTOURNCOLUMNNAMES).append(ACCUMHANDCOLUMNNAMES)
		.append(" FROM T0 GROUP BY USERID,STARTOFPERIOD,CURRENCY,RINGTOURNGAME")
		.append(")")
		.append(",TX AS (")
		.append("SELECT T1.*, VALUE(")
		.append(" (SELECT MAX(STARTDATE) FROM ACCUMSTATSAUXWEEK WHERE USERID=T1.USERID AND CURRENCY=T1.CURRENCY AND RINGTOURNGAME=T1.RINGTOURNGAME AND STARTDATE<T1.STARTOFPERIOD),T1.STARTOFPERIOD) LASTSTARTDATE FROM T1")
		.append(" )")
		.append(",T2 AS (")
		.append(" SELECT TX.*, VALUE(")
		.append(" (SELECT ENDDATE FROM ACCUMSTATSAUXWEEK WHERE USERID=TX.USERID AND CURRENCY=TX.CURRENCY AND RINGTOURNGAME=TX.RINGTOURNGAME AND STARTDATE=TX.LASTSTARTDATE),TX.STARTOFPERIOD) LASTENDDATE")
		.append(" FROM TX")
		.append(" )")
		.append(" SELECT T2.USERID,T2.CURRENCY,T2.STARTOFPERIOD,T2.LASTSTARTDATE,T2.LASTENDDATE,T2.RINGTOURNGAME")
		.append(ACCUMWEEKLYSTATSDATACOLUMNS)
		.append(" FROM T2")
		.append(" LEFT JOIN ACCUMSTATSWEEK A ON A.USERID=T2.USERID AND A.CURRENCY=T2.CURRENCY AND A.RINGTOURNGAME=T2.RINGTOURNGAME")
		.append(" AND A.STARTOFPERIOD = T2.LASTENDDATE ORDER BY T2.USERID, T2.CURRENCY, T2.RINGTOURNGAME");

	PLog("- AccumulateWeeklyDataStmt query: ");
	PDumpEndLine(query);

	prepareAndBind();

	bindFirstParam(input_startOfPeriod);
	bindNextParam(input_userId);
	bindNextParam(input_startOfPeriod);
	bindNextParam(input_userId);
}

InsertAccumStatsStmt::InsertAccumStatsStmt(DatabaseManagerCommon& man, const char* tableName)
	: AccumulateDataBaseStmt(man)
{
	// #DBA_REVIEWED # PYR-113533 IrinaM 2019.build07
	query.assign("INSERT INTO ").append(tableName)
		.append(" (").append(ACCUMSTATSKEYCOLUMNNAMES).append(",").append(ACCUMSTATSCOLUMNNAMES).append(")")
		.append(" VALUES(?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?,?,?,")
		.append(" ?,?,?,?,?,?,?,?)");

	prepare(query);

	bindFirstParam(userId);
	bindNextParam(startOfPeriod);
	bindNextParam(currency);
	bindNextParam(ringTournGame);
	bindNextParam(cols.tournCols.totalinvested);
	bindNextParam(cols.tournCols.totaltourns);
	bindNextParam(cols.tournCols.usertotalprofit);
	bindNextParam(cols.tournCols.rakepaid);
	bindNextParam(cols.tournCols.totaltournswonmoney);
	bindNextParam(cols.handCols.totalhands);
	bindNextParam(cols.handCols.totalwin);
	bindNextParam(cols.handCols.totalblindsantespaid);
	bindNextParam(cols.handCols.totalrakepaid);
	bindNextParam(cols.handCols.numbigblinds);
	bindNextParam(cols.handCols.numsmallblinds);
	bindNextParam(cols.handCols.numblindspaidoutofposition);
	bindNextParam(cols.handCols.numvpip);
	bindNextParam(cols.handCols.numvpipfromsmallblind);
	bindNextParam(cols.handCols.numvpipfrombigblind);
	bindNextParam(cols.handCols.numsawshowdown);
	bindNextParam(cols.handCols.numwonshowdown);
	bindNextParam(cols.handCols.numwonafterflop);
	bindNextParam(cols.handCols.numlimp);
	bindNextParam(cols.handCols.numlimpraise);
	bindNextParam(cols.handCols.numlimpcall);
	bindNextParam(cols.handCols.numlimpfold);
	bindNextParam(cols.handCols.numallinpreflop);
	bindNextParam(cols.handCols.numcoldcallopportunities);
	bindNextParam(cols.handCols.numcoldcalls);
	bindNextParam(cols.handCols.num3betopportunities);
	bindNextParam(cols.handCols.num3bets);
	bindNextParam(cols.handCols.numfacing3bet);
	bindNextParam(cols.handCols.numfoldto3bet);
	bindNextParam(cols.handCols.num4plusbet);
	bindNextParam(cols.handCols.numsawflop);
	bindNextParam(cols.handCols.numsawturn);
	bindNextParam(cols.handCols.numsawriver);
	bindNextParam(cols.handCols.numsaw7th);
	bindNextParam(cols.handCols.numfacing4plusbet);
	bindNextParam(cols.handCols.numfoldto4plusbet);
	bindNextParam(cols.handCols.numturnspreflop);
	bindNextParam(cols.handCols.numturnsfacingbetonflop);
	bindNextParam(cols.handCols.numturnsfacingnobetonflop);
	bindNextParam(cols.handCols.numturnsfacingbetonturn);
	bindNextParam(cols.handCols.numturnsfacingnobetonturn);
	bindNextParam(cols.handCols.numturnsfacingbetonriver);
	bindNextParam(cols.handCols.numturnsfacingnobetonriver);
	bindNextParam(cols.handCols.numturnsfacingbeton7th);
	bindNextParam(cols.handCols.numturnsfacingnobeton7th);
	bindNextParam(cols.handCols.numlastagressorpreflop);
	bindNextParam(cols.handCols.numlastagressoronflop);
	bindNextParam(cols.handCols.numlastagressoronturn);
	bindNextParam(cols.handCols.numlastagressoronriver);
	bindNextParam(cols.handCols.numcontbetonflop);
	bindNextParam(cols.handCols.numcontbetonturn);
	bindNextParam(cols.handCols.numcontbetonriver);
	bindNextParam(cols.handCols.numcontbeton7th);
	bindNextParam(cols.handCols.numbetpreflop);
	bindNextParam(cols.handCols.numbetonflop);
	bindNextParam(cols.handCols.numbetonturn);
	bindNextParam(cols.handCols.numbetonriver);
	bindNextParam(cols.handCols.numbeton7th);
	bindNextParam(cols.handCols.numcheckonflop);
	bindNextParam(cols.handCols.numcheckonturn);
	bindNextParam(cols.handCols.numcheckonriver);
	bindNextParam(cols.handCols.numcheckon7th);
	bindNextParam(cols.handCols.numfoldpreflop);
	bindNextParam(cols.handCols.numfoldonflop);
	bindNextParam(cols.handCols.numfoldonturn);
	bindNextParam(cols.handCols.numfoldonriver);
	bindNextParam(cols.handCols.numfoldon7th);
	bindNextParam(cols.handCols.numcallspreflop);
	bindNextParam(cols.handCols.numcallsonflop);
	bindNextParam(cols.handCols.numcallsonturn);
	bindNextParam(cols.handCols.numcallsonriver);
	bindNextParam(cols.handCols.numcallson7th);
	bindNextParam(cols.handCols.numraisespreflop);
	bindNextParam(cols.handCols.numraisesonflop);
	bindNextParam(cols.handCols.numraisesonturn);
	bindNextParam(cols.handCols.numraisesonriver);
	bindNextParam(cols.handCols.numraiseson7th);
	bindNextParam(cols.handCols.numcheckcallonflop);
	bindNextParam(cols.handCols.numcheckcallonturn);
	bindNextParam(cols.handCols.numcheckcallonriver);
	bindNextParam(cols.handCols.numcheckcallon7th);
	bindNextParam(cols.handCols.numcheckraiseonflop);
	bindNextParam(cols.handCols.numcheckraiseonturn);
	bindNextParam(cols.handCols.numcheckraiseonriver);
	bindNextParam(cols.handCols.numcheckraiseon7th);
	bindNextParam(cols.handCols.numcheckfoldonflop);
	bindNextParam(cols.handCols.numcheckfoldonturn);
	bindNextParam(cols.handCols.numcheckfoldonriver);
	bindNextParam(cols.handCols.numcheckfoldon7th);
	bindNextParam(cols.handCols.numopenfoldpowerfulhand);
	bindNextParam(cols.handCols.numfoldtoextremeodds);
	bindNextParam(cols.handCols.numreraisewithgarbage);
	bindNextParam(cols.handCols.numcheckbehindonriver);
	bindNextParam(cols.handCols.numfoldwhencouldcheck);
	bindNextParam(cols.handCols.numattemptstealblinds);
	bindNextParam(cols.handCols.numfoldtostealfromsbopps);
	bindNextParam(cols.handCols.numfoldtostealfromsb);
	bindNextParam(cols.handCols.numfoldtostealfrombbopps);
	bindNextParam(cols.handCols.numfoldtostealfrombb);
	bindNextParam(cols.handCols.numcheckraiseoppsonflop);
	bindNextParam(cols.handCols.numcheckraiseoppsonturn);
	bindNextParam(cols.handCols.numcheckraiseoppsonriver);
	bindNextParam(cols.handCols.numcheckraiseoppson7th);
	bindNextParam(cols.handCols.numattemptstealblindsopps);
	bindNextParam(cols.handCols.num4betopportunities);
	bindNextParam(cols.handCols.numhandsraisedpreflop);
	bindNextParam(cols.handCols.numcallbetsonlypreflop);
	bindNextParam(cols.handCols.numcallbetsonlyonflop);
	bindNextParam(cols.handCols.numcallbetsonlyonturn);
	bindNextParam(cols.handCols.numcallbetsonlyonriver);
	bindNextParam(cols.handCols.numcallbetsonlyon7th);
	bindNextParam(cols.handCols.numturnsfacingbetonlyonflop);
	bindNextParam(cols.handCols.numturnsfacingbetonlyonturn);
	bindNextParam(cols.handCols.numturnsfacingbetonlyonriver);
	bindNextParam(cols.handCols.numturnsfacingbetonlyon7th);
	bindNextParam(cols.handCols.numfoldtobetonlypreflop);
	bindNextParam(cols.handCols.numfoldtobetonlyonflop);
	bindNextParam(cols.handCols.numfoldtobetonlyonturn);
	bindNextParam(cols.handCols.numfoldtobetonlyonriver);
	bindNextParam(cols.handCols.numfoldtobetonlyon7th);
	bindNextParam(cols.handCols.totalplayersinhands);
	bindNextParam(cols.handCols.totalbet);
	bindNextParam(cols.handCols.numfacing3bet_hem);
	bindNextParam(cols.handCols.numfoldto3bet_hem);
	bindNextParam(cols.handCols.numfacing4plusbet_hem);
	bindNextParam(cols.handCols.numfoldto4plusbet_hem);
	bindNextParam(cols.handCols.numcontbetoppsvs2inposonflop);
	bindNextParam(cols.handCols.numcontbetoppsvs2inposonturn);
	bindNextParam(cols.handCols.numcontbetoppsvs2inposonriver);
	bindNextParam(cols.handCols.numcontbetoppsvs2inposon7th);
	bindNextParam(cols.handCols.numcontbetvs2inposonflop);
	bindNextParam(cols.handCols.numcontbetvs2inposonturn);
	bindNextParam(cols.handCols.numcontbetvs2inposonriver);
	bindNextParam(cols.handCols.numcontbetvs2inposon7th);

	PLog("- InsertAccumStatsStmt query: ");
	PDumpEndLine(query);
}

void InsertAccumStatsStmt::exec(const AccumStatsKey& key, const AccumStatsData& data)
{
	userId.initCut(key.userid);
	currency.initCut(key.currency);
	startOfPeriod = key.startDate;
	ringTournGame = key.ringTournGame;

	cols.tournCols.setTournCols(data.tournData);
	cols.handCols.setHandCols(data.handData);

	execute();
}

/////////////////////////////////////////////////////////////////////////////////////////////
DeleteAccumAuxStmt::DeleteAccumAuxStmt(DatabaseManagerCommon& man, const char* tableName)
	: DbmStatement(man)
{
	// #DBA_REVIEWED # PYR-113533 IrinaM 2019.build07
	PString query, dummy;
	query.assign("DELETE FROM ").append(tableName)
		.append(" WHERE USERID=? AND STARTDATE >=?");

	PLog("- DeleteAccumAuxStmt query: ");
	PDumpEndLine(query);

	prepare(query);

	bindFirstParam(userId);
	bindNextParam(startDate);
}

void DeleteAccumAuxStmt::exec(const char* userid_, const SrvDate& startDate_)
{
	userId.initCut(userid_);
	startDate = startDate_;

	execUpdateDelete();
}

FixAccumAuxEndDateStmt::FixAccumAuxEndDateStmt(DatabaseManagerCommon& man, const char* tableName)
	: DbmStatement(man)
{
	// #DBA_REVIEWED # PYR-113533 IrinaM 2019.build07
	PString query, dummy;
	query.assign("UPDATE ").append(tableName)
		.append(" SET ENDDATE=? WHERE USERID=? AND ENDDATE >=?");

	PLog("- FixAccumAuxEndDateStmt query: ");
	PDumpEndLine(query);

	prepare(query);

	bindFirstParam(updatedEndDate);
	bindNextParam(userId);
	bindNextParam(endDate);
}

void FixAccumAuxEndDateStmt::exec(const char* userid_, const SrvDate& endDate_, const SrvDate& newEndDate_)
{
	userId.initCut(userid_);
	endDate = endDate_;
	updatedEndDate = newEndDate_;

	execUpdateDelete();
}

UpdateAccumAuxEndDateStmt::UpdateAccumAuxEndDateStmt(DatabaseManagerCommon& man, const char* tableName)
	: DbmStatement(man)
{
	// #DBA_REVIEWED # PYR-113533 IrinaM 2019.build07
	PString query, dummy;
	query.assign("UPDATE ").append(tableName)
		.append(" SET ENDDATE = ? WHERE USERID=? AND STARTDATE=? AND CURRENCY=? AND RINGTOURNGAME=?");

	PLog("- UpdateAccumAuxEndDateStmt query: ");
	PDumpEndLine(query);

	prepare(query);

	bindFirstParam(endDate);
	bindNextParam(userId);
	bindNextParam(startDate);
	bindNextParam(currency);
	bindNextParam(ringTournGame);
}

void UpdateAccumAuxEndDateStmt::exec(const char* userid_, const SrvDate& startDate_, const PString& currency_, UINT16 ringTournGame_, const SrvDate& endDate_)
{
	userId.initCut(userid_);
	startDate = startDate_;
	currency.initCut(currency_);
	ringTournGame = ringTournGame_;
	endDate = endDate_;

	execUpdateDelete();
}

InsertAccumAuxStmt::InsertAccumAuxStmt(DatabaseManagerCommon& man, const char* tableName)
	: DbmStatement(man)
{
	// #DBA_REVIEWED # PYR-113533 IrinaM 2019.build07
	PString query, dummy;
	query.assign("INSERT INTO ").append(tableName)
		.append(" (USERID,STARTDATE,CURRENCY,RINGTOURNGAME,ENDDATE)")
		.append(" VALUES(?,?,?,?,?)");

	PLog("- InsertAccumAuxStmt query: ");
	PDumpEndLine(query);

	prepare(query);

	bindFirstParam(userId);
	bindNextParam(startDate);
	bindNextParam(currency);
	bindNextParam(ringTournGame);
	bindNextParam(endDate);
}

void InsertAccumAuxStmt::exec(const char* userid_, const SrvDate& startDate_, const PString& currency_, UINT16 ringTournGame_, const SrvDate& endDate_)
{
	userId.initCut(userid_);
	startDate = startDate_;
	currency.initCut(currency_);
	ringTournGame = ringTournGame_;
	endDate = endDate_;

	execute();
}

DeleteAccumDataStmt::DeleteAccumDataStmt(DatabaseManagerCommon& man, const char* tableName)
	: DbmStatement(man)
{
	// #DBA_REVIEWED # PYR-113533 IrinaM 2019.build07
	PString query, dummy;
	query.assign("DELETE FROM ").append(tableName)
		.append(" WHERE USERID=? AND STARTOFPERIOD >=? ");

	PLog("- DeleteAccumDataStmt query: ");
	PDumpEndLine(query);

	prepare(query);

	bindFirstParam(userId);
	bindNextParam(startOfPeriod);
}

void DeleteAccumDataStmt::exec(const char* userid_, const SrvDate& startOfPeriod_)
{
	userId.initCut(userid_);
	startOfPeriod = startOfPeriod_;
	execUpdateDelete();
}