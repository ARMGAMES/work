/**
 * crossgamebuttonscommonprot.cpp
 *
 * This file was auto-generated from crossgamebuttonscommonprot.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor crossgamebuttonscommonprot.txt
 */
 
#include "crossgamebuttonscommonprot.h"

//=================================================================
//                    CrossGameLinkButtonDef
//=================================================================

CrossGameLinkCommon::CrossGameLinkButtonDef::CrossGameLinkButtonDef()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

CrossGameLinkCommon::CrossGameLinkButtonDef::CrossGameLinkButtonDef(CrossGameLinkButtonDef&& _o)
	: buttonName(std::move(_o.buttonName))
	, click2LaunchLink(std::move(_o.click2LaunchLink))
	, iconName(std::move(_o.iconName))
	, buttonLabel(std::move(_o.buttonLabel))
	, tooltip(std::move(_o.tooltip))
	, buttonType(std::move(_o.buttonType))
{
}

CrossGameLinkCommon::CrossGameLinkButtonDef& CrossGameLinkCommon::CrossGameLinkButtonDef::operator=(CrossGameLinkButtonDef&& _o)
{
	if(this != &_o)
	{
		buttonName = std::move(_o.buttonName);
		click2LaunchLink = std::move(_o.click2LaunchLink);
		iconName = std::move(_o.iconName);
		buttonLabel = std::move(_o.buttonLabel);
		tooltip = std::move(_o.tooltip);
		buttonType = std::move(_o.buttonType);
	}
	return *this;
}

#endif

void CrossGameLinkCommon::CrossGameLinkButtonDef::clear()
{
	buttonName.clear();
	click2LaunchLink.clear();
	iconName.clear();
	buttonLabel.clear();
	tooltip.clear();
	buttonType.clear();
}

bool CrossGameLinkCommon::CrossGameLinkButtonDef::equals(const CrossGameLinkButtonDef& _o) const
{
	return Atf::atfPStringEquals(buttonName, _o.buttonName) &&
		Atf::atfPStringEquals(click2LaunchLink, _o.click2LaunchLink) &&
		Atf::atfPStringEquals(iconName, _o.iconName) &&
		buttonLabel.equals(_o.buttonLabel) &&
		tooltip.equals(_o.tooltip) &&
		Atf::atfPStringEquals(buttonType, _o.buttonType);
}

const char *CrossGameLinkCommon::CrossGameLinkButtonDef::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("buttonName=");
	_buf.append(buttonName);
	_buf.append(',');
	_buf.append("click2LaunchLink=");
	_buf.append(click2LaunchLink);
	_buf.append(',');
	_buf.append("iconName=");
	_buf.append(iconName);
	_buf.append(',');
	_buf.append("buttonLabel=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, buttonLabel);
	_buf.append(',');
	_buf.append("tooltip=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, tooltip);
	_buf.append(',');
	_buf.append("buttonType=");
	_buf.append(buttonType);
	_buf.append('}');
	return _buf.c_str();
}

const char *CrossGameLinkCommon::CrossGameLinkButtonDef::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("buttonName", buttonName, _buf);
	Atf::XmlElement::encodeAsXmlElement("click2LaunchLink", click2LaunchLink, _buf);
	Atf::XmlElement::encodeAsXmlElement("iconName", iconName, _buf);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "buttonLabel", buttonLabel);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "tooltip", tooltip);
	Atf::XmlElement::encodeAsXmlElement("buttonType", buttonType, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool CrossGameLinkCommon::CrossGameLinkButtonDef::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("buttonName"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, buttonName)) return false;
		}
		else if (_element.equals("click2LaunchLink"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, click2LaunchLink)) return false;
		}
		else if (_element.equals("iconName"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, iconName)) return false;
		}
		else if (_element.equals("buttonLabel"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, buttonLabel);
		}
		else if (_element.equals("tooltip"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, tooltip);
		}
		else if (_element.equals("buttonType"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, buttonType)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void CrossGameLinkCommon::CrossGameLinkButtonDef::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(CrossGameLinkButtonDef())) // not empty
	{
		_body.composeString(buttonName);
		_body.composeString(click2LaunchLink);
		_body.composeString(iconName);
		buttonLabel.compose(_body);
		tooltip.compose(_body);
		_body.composeString(buttonType);
	}

	_msg.composeMsgBody(_body);
}

void CrossGameLinkCommon::CrossGameLinkButtonDef::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(buttonName);
	_parser0.parseStringP(click2LaunchLink);
	_parser0.parseStringP(iconName);
	buttonLabel.parse(_parser0);
	tooltip.parse(_parser0);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringP(buttonType);
}

const char *CrossGameLinkCommon::CrossGameLinkButtonDef::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("buttonName", buttonName);
	_jsonstr.compose("click2LaunchLink", click2LaunchLink);
	_jsonstr.compose("iconName", iconName);
	_jsonstr.compose("buttonLabel", buttonLabel);
	_jsonstr.compose("tooltip", tooltip);
	_jsonstr.compose("buttonType", buttonType);
	return _buf.c_str();
}

void CrossGameLinkCommon::CrossGameLinkButtonDef::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("buttonName", buttonName);
	_jparser.parseByNameThrow("click2LaunchLink", click2LaunchLink);
	_jparser.parseByNameThrow("iconName", iconName);
	_jparser.parseByNameThrow("buttonLabel", buttonLabel);
	_jparser.parseByNameThrow("tooltip", tooltip);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("buttonType", buttonType);
}

/* static */ void CrossGameLinkCommon::CrossGameLinkButtonDef::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString buttonName; _jparser.validateByNameThrow("buttonName", buttonName);
	AtfValidator::validateInt(_descr, "buttonName", buttonName.length(), _checker, __FILE__, __LINE__);
	PString click2LaunchLink; _jparser.validateByNameThrow("click2LaunchLink", click2LaunchLink);
	AtfValidator::validateInt(_descr, "click2LaunchLink", click2LaunchLink.length(), _checker, __FILE__, __LINE__);
	PString iconName; _jparser.validateByNameThrow("iconName", iconName);
	AtfValidator::validateInt(_descr, "iconName", iconName.length(), _checker, __FILE__, __LINE__);
	I18nPString buttonLabel; _jparser.validateByNameThrow("buttonLabel", buttonLabel);
	I18nPString tooltip; _jparser.validateByNameThrow("tooltip", tooltip);
	if(_jparser.parseEnded()) return;
	PString buttonType; _jparser.validateByNameThrow("buttonType", buttonType);
	AtfValidator::validateInt(_descr, "buttonType", buttonType.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void CrossGameLinkCommon::CrossGameLinkButtonDef::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "buttonName"); size_t szButtonName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "buttonName", szButtonName, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "click2LaunchLink"); size_t szClick2LaunchLink = strlen(_dummy);
	AtfValidator::validateInt(_descr, "click2LaunchLink", szClick2LaunchLink, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "iconName"); size_t szIconName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "iconName", szIconName, _checker, __FILE__, __LINE__);
	I18nPString buttonLabel; buttonLabel.parse(_parser0);
	I18nPString tooltip; tooltip.parse(_parser0);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringN(_dummy, 0, "buttonType"); size_t szButtonType = strlen(_dummy);
	AtfValidator::validateInt(_descr, "buttonType", szButtonType, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    CrossGameLinkButtonCriteria
//=================================================================

CrossGameLinkCommon::CrossGameLinkButtonCriteria::CrossGameLinkButtonCriteria()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

CrossGameLinkCommon::CrossGameLinkButtonCriteria::CrossGameLinkButtonCriteria(CrossGameLinkButtonCriteria&& _o)
	: criteriaLabel(std::move(_o.criteriaLabel))
{
}

CrossGameLinkCommon::CrossGameLinkButtonCriteria& CrossGameLinkCommon::CrossGameLinkButtonCriteria::operator=(CrossGameLinkButtonCriteria&& _o)
{
	if(this != &_o)
	{
		criteriaLabel = std::move(_o.criteriaLabel);
	}
	return *this;
}

#endif

void CrossGameLinkCommon::CrossGameLinkButtonCriteria::clear()
{
	criteriaLabel.clear();
}

bool CrossGameLinkCommon::CrossGameLinkButtonCriteria::equals(const CrossGameLinkButtonCriteria& _o) const
{
	return Atf::atfPStringEquals(criteriaLabel, _o.criteriaLabel);
}

const char *CrossGameLinkCommon::CrossGameLinkButtonCriteria::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("criteriaLabel=");
	_buf.append(criteriaLabel);
	_buf.append('}');
	return _buf.c_str();
}

const char *CrossGameLinkCommon::CrossGameLinkButtonCriteria::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("criteriaLabel", criteriaLabel, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool CrossGameLinkCommon::CrossGameLinkButtonCriteria::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("criteriaLabel"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, criteriaLabel)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void CrossGameLinkCommon::CrossGameLinkButtonCriteria::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(CrossGameLinkButtonCriteria())) // not empty
	{
		_body.composeString(criteriaLabel);
	}

	_msg.composeMsgBody(_body);
}

void CrossGameLinkCommon::CrossGameLinkButtonCriteria::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(criteriaLabel);
}

const char *CrossGameLinkCommon::CrossGameLinkButtonCriteria::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("criteriaLabel", criteriaLabel);
	return _buf.c_str();
}

void CrossGameLinkCommon::CrossGameLinkButtonCriteria::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("criteriaLabel", criteriaLabel);
}

/* static */ void CrossGameLinkCommon::CrossGameLinkButtonCriteria::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString criteriaLabel; _jparser.validateByNameThrow("criteriaLabel", criteriaLabel);
	AtfValidator::validateInt(_descr, "criteriaLabel", criteriaLabel.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void CrossGameLinkCommon::CrossGameLinkButtonCriteria::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "criteriaLabel"); size_t szCriteriaLabel = strlen(_dummy);
	AtfValidator::validateInt(_descr, "criteriaLabel", szCriteriaLabel, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    CrossGameLinkButtonData
//=================================================================

CrossGameLinkCommon::CrossGameLinkButtonData::CrossGameLinkButtonData()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

CrossGameLinkCommon::CrossGameLinkButtonData::CrossGameLinkButtonData(CrossGameLinkButtonData&& _o)
	: userCriteria(std::move(_o.userCriteria))
	, gameCriteria(std::move(_o.gameCriteria))
	, buttonDef(std::move(_o.buttonDef))
{
}

CrossGameLinkCommon::CrossGameLinkButtonData& CrossGameLinkCommon::CrossGameLinkButtonData::operator=(CrossGameLinkButtonData&& _o)
{
	if(this != &_o)
	{
		userCriteria = std::move(_o.userCriteria);
		gameCriteria = std::move(_o.gameCriteria);
		buttonDef = std::move(_o.buttonDef);
	}
	return *this;
}

#endif

void CrossGameLinkCommon::CrossGameLinkButtonData::clear()
{
	userCriteria.clear();
	gameCriteria.clear();
	buttonDef.clear();
}

bool CrossGameLinkCommon::CrossGameLinkButtonData::equals(const CrossGameLinkButtonData& _o) const
{
	return userCriteria.equals(_o.userCriteria) &&
		gameCriteria.equals(_o.gameCriteria) &&
		buttonDef.equals(_o.buttonDef);
}

const char *CrossGameLinkCommon::CrossGameLinkButtonData::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userCriteria=");
	userCriteria.toTraceString(_buf);
	_buf.append(',');
	_buf.append("gameCriteria=");
	gameCriteria.toTraceString(_buf);
	_buf.append(',');
	_buf.append("buttonDef=");
	buttonDef.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

const char *CrossGameLinkCommon::CrossGameLinkButtonData::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	userCriteria.toXmlString("userCriteria", _buf);
	gameCriteria.toXmlString("gameCriteria", _buf);
	buttonDef.toXmlString("buttonDef", _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool CrossGameLinkCommon::CrossGameLinkButtonData::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("userCriteria"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< CrossGameLinkButtonCriteria, 4 > >::FromXmlString(_value, userCriteria)) return false;
		}
		else if (_element.equals("gameCriteria"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< CrossGameLinkButtonCriteria, 4 > >::FromXmlString(_value, gameCriteria)) return false;
		}
		else if (_element.equals("buttonDef"))
		{
			if(!Atf::AtfTempl< CrossGameLinkButtonDef >::FromXmlString(_value, buttonDef)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void CrossGameLinkCommon::CrossGameLinkButtonData::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(CrossGameLinkButtonData())) // not empty
	{
		userCriteria.composeMsg(_body, _ignoreJSON);
		gameCriteria.composeMsg(_body, _ignoreJSON);
		buttonDef.composeMsg(_body, _ignoreJSON);
	}

	_msg.composeMsgBody(_body);
}

void CrossGameLinkCommon::CrossGameLinkButtonData::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	userCriteria.parseMsg(_parser0);
	gameCriteria.parseMsg(_parser0);
	buttonDef.parseMsg(_parser0);
}

const char *CrossGameLinkCommon::CrossGameLinkButtonData::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userCriteria", userCriteria);
	_jsonstr.compose("gameCriteria", gameCriteria);
	_jsonstr.compose("buttonDef", buttonDef);
	return _buf.c_str();
}

void CrossGameLinkCommon::CrossGameLinkButtonData::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userCriteria", userCriteria);
	_jparser.parseByNameThrow("gameCriteria", gameCriteria);
	_jparser.parseByNameThrow("buttonDef", buttonDef);
}

/* static */ void CrossGameLinkCommon::CrossGameLinkButtonData::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	Atf::AtfVectorBase< CrossGameLinkButtonCriteria > userCriteria; _jparser.validateByNameThrow("userCriteria", userCriteria);
	AtfValidator::validateInt(_descr, "userCriteria", userCriteria.size(), _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< CrossGameLinkButtonCriteria > gameCriteria; _jparser.validateByNameThrow("gameCriteria", gameCriteria);
	AtfValidator::validateInt(_descr, "gameCriteria", gameCriteria.size(), _checker, __FILE__, __LINE__);
	CrossGameLinkButtonDef buttonDef; _jparser.validateByNameThrow("buttonDef", buttonDef);
}

/*static*/ void CrossGameLinkCommon::CrossGameLinkButtonData::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	int szUserCriteria = Atf::LAtfVector< CrossGameLinkButtonCriteria, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("userCriteria"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "userCriteria", szUserCriteria, _checker, __FILE__, __LINE__);
	int szGameCriteria = Atf::LAtfVector< CrossGameLinkButtonCriteria, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("gameCriteria"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "gameCriteria", szGameCriteria, _checker, __FILE__, __LINE__);
	CrossGameLinkButtonDef::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("buttonDef"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

