/**
 * crossgamebuttonsclientprot.h
 *
 * This file was auto-generated from crossgamebuttonsclientprot.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor crossgamebuttonsclientprot.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_CROSSGAMEBUTTONSCLIENTPROT_H
#define ATF_PROTOCOL_DEFFILE_CROSSGAMEBUTTONSCLIENTPROT_H

//------------------------------------------------------------------------------
//	LobbyEtc <-> Client Protocol
//------------------------------------------------------------------------------
//
//	Copyright (c) 2001-2016 PYR Software Ltd. All rights reserved. This document
//	is for the use of licensed users only and is subject to the terms and
//	conditions of the accompanying and/or applicable license between you and
//	PYR Software Ltd, including without limitation those terms and conditions
//	prohibiting unauthorized translation, reverse engineering, decompilation,
//	disassembly, and other inappropriate use of any software provided. Any
//	unauthorized use, copying, modification, distribution, publication or
//	disclosure of information is a violation of copyright laws. No reproduction
//	in whole or in part of this document may be made without express written
//	consent of PYR Software Ltd.
//
//
//------------------------------------------------------------------------------

#include "crossgamebuttonscommonprot.h"


#include "UserDefStructs.h"

namespace CrossGameLink
{
	//------------------------------------------------------------------------------

	//------------------------------------------------------------------------------

	//------------------------------------------------------------------------------
	// Cross game link button publication
	//------------------------------------------------------------------------------
	//
	// Node { 0 } - root node
	//

	//------------------------------------------------------------------------------
	// Button publication leaf
	//------------------------------------------------------------------------------

	struct ButtonsLeaf	// Leaf { 0, 1 }
	{
		//! 4< <FIXME>CrossGameLinkCommon::CrossGameLinkButtonData</FIXME> > - numButtons< <FIXME>CrossGameLinkCommon::CrossGameLinkButtonData</FIXME> >
		Atf::LAtfVector< CrossGameLinkCommon::CrossGameLinkButtonData, 4 > buttons;

		ButtonsLeaf();
		void clear();
		bool equals(const ButtonsLeaf&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		ButtonsLeaf(ButtonsLeaf&&);
		ButtonsLeaf& operator=(ButtonsLeaf&&);
	private:
		ButtonsLeaf(const ButtonsLeaf&);  // prohibit
		ButtonsLeaf& operator=(const ButtonsLeaf&);  // prohibit
#endif
	};
};

#endif
