/**
 * crossgamebuttonsclientprot_thin.cpp
 *
 * This file was auto-generated from crossgamebuttonsclientprot.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin crossgamebuttonsclientprot.txt
 */
 
#include "crossgamebuttonsclientprot_thin.h"

//=================================================================
//                    ButtonsLeaf
//=================================================================

CrossGameLink::ButtonsLeaf::ButtonsLeaf()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

CrossGameLink::ButtonsLeaf::ButtonsLeaf(ButtonsLeaf&& _o)
	: buttons(std::move(_o.buttons))
{
}

CrossGameLink::ButtonsLeaf& CrossGameLink::ButtonsLeaf::operator=(ButtonsLeaf&& _o)
{
	if(this != &_o)
	{
		buttons = std::move(_o.buttons);
	}
	return *this;
}

#endif

void CrossGameLink::ButtonsLeaf::clear()
{
	buttons.clear();
}

bool CrossGameLink::ButtonsLeaf::equals(const ButtonsLeaf& _o) const
{
	return buttons.equals(_o.buttons);
}

const char *CrossGameLink::ButtonsLeaf::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("buttons=");
	buttons.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void CrossGameLink::ButtonsLeaf::composeMsg(CommMsgBody& _msg) const
{
	buttons.composeMsg(_msg);
}

void CrossGameLink::ButtonsLeaf::parseMsg(CommMsgParser& _parser)
{
	buttons.parseMsg(_parser);
}

/*static*/ void CrossGameLink::ButtonsLeaf::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szButtons = ThinAtf::LAtfVector< CrossGameLinkCommon::CrossGameLinkButtonData, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("buttons"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "buttons", szButtons, _checker, __FILE__, __LINE__);
}

