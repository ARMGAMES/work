/**
 * crossgamebuttonsserverprot_thin.h
 *
 * This file was auto-generated from crossgamebuttonsserverprot.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin crossgamebuttonsserverprot.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_CROSSGAMEBUTTONSSERVERPROT_THIN_H
#define ATF_PROTOCOL_DEFFILE_CROSSGAMEBUTTONSSERVERPROT_THIN_H

//------------------------------------------------------------------------------
//	LobbyEtc <-> DBM
//------------------------------------------------------------------------------
//
//	Copyright (c) 2001-2016 PYR Software Ltd. All rights reserved. This document
//	is for the use of licensed users only and is subject to the terms and
//	conditions of the accompanying and/or applicable license between you and
//	PYR Software Ltd, including without limitation those terms and conditions
//	prohibiting unauthorized translation, reverse engineering, decompilation,
//	disassembly, and other inappropriate use of any software provided. Any
//	unauthorized use, copying, modification, distribution, publication or
//	disclosure of information is a violation of copyright laws. No reproduction
//	in whole or in part of this document may be made without express written
//	consent of PYR Software Ltd.
//
//
//------------------------------------------------------------------------------

#include "crossgamebuttonscommonprot_thin.h"
#include "LobbyEtc.h"
#include "crmserver.h"


#include "ThinAtfUserDefStructs.h"

namespace CrossGameLinkServer
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	//------------------------------------------------------------------------------

	//------------------------------------------------------------------------------

	//------------------------------------------------------------------------------
	// Init button publication data
	//------------------------------------------------------------------------------

	struct Protocol_CRM_Q_GET_CROSSLINK_BUTTONS
	{

		Protocol_CRM_Q_GET_CROSSLINK_BUTTONS();
		void clear();
		bool equals(const Protocol_CRM_Q_GET_CROSSLINK_BUTTONS&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return CRM_Q_GET_CROSSLINK_BUTTONS; }
		static const char *getMsgIdString() { return "CRM_Q_GET_CROSSLINK_BUTTONS"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_CRM_A_GET_CROSSLINK_BUTTONS
	{
		//! 2[s|4< <FIXME>CrossGameLinkCommon::CrossGameLinkButtonData</FIXME> >] - errCode[errStr|numButtons< <FIXME>CrossGameLinkCommon::CrossGameLinkButtonData</FIXME> >]
		INT16 errCode;

		PString errStr;

		ThinAtf::LAtfVector< CrossGameLinkCommon::CrossGameLinkButtonData, 4 > buttons;

		Protocol_CRM_A_GET_CROSSLINK_BUTTONS();
		void clear();
		bool equals(const Protocol_CRM_A_GET_CROSSLINK_BUTTONS&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return CRM_A_GET_CROSSLINK_BUTTONS; }
		static const char *getMsgIdString() { return "CRM_A_GET_CROSSLINK_BUTTONS"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_CRM_A_GET_CROSSLINK_BUTTONS(Protocol_CRM_A_GET_CROSSLINK_BUTTONS&&);
		Protocol_CRM_A_GET_CROSSLINK_BUTTONS& operator=(Protocol_CRM_A_GET_CROSSLINK_BUTTONS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		Protocol_CRM_A_GET_CROSSLINK_BUTTONS(const Protocol_CRM_A_GET_CROSSLINK_BUTTONS&) = default;
		Protocol_CRM_A_GET_CROSSLINK_BUTTONS& operator=(const Protocol_CRM_A_GET_CROSSLINK_BUTTONS&) = default;
#endif
#endif
	};

	//------------------------------------------------------------------------------
	// Create button definitions
	//------------------------------------------------------------------------------

	struct Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE
	{
		//! 44< <FIXME>CrossGameLinkCommon::CrossGameLinkButtonData</FIXME> > - adminIntId,numButtons< <FIXME>CrossGameLinkCommon::CrossGameLinkButtonData</FIXME> >
		UINT32 adminIntId;
		ThinAtf::LAtfVector< CrossGameLinkCommon::CrossGameLinkButtonData, 4 > buttons;

		Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE();
		void clear();
		bool equals(const Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE; }
		static const char *getMsgIdString() { return "MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE(Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE&&);
		Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE& operator=(Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE(const Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE&) = default;
		Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE& operator=(const Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE&) = default;
#endif
#endif
	};

	struct Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY
	{
		// 2[s] - errCode[errStr]
		INT16 errCode;

		PString errStr;

		Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY();
		void clear();
		bool equals(const Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY; }
		static const char *getMsgIdString() { return "MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY(Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY&&);
		Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY& operator=(Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY(const Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY&) = default;
		Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY& operator=(const Protocol_MSG_LOBBYETC_CROSSLINK_BUTTONS_CREATE_REPLY&) = default;
#endif
#endif
	};

	struct Protocol_CRM_Q_CREATE_CROSSLINK_BUTTONS
	{
		//! 44< <FIXME>CrossGameLinkCommon::CrossGameLinkButtonData</FIXME> > - adminIntId,numButtons< <FIXME>CrossGameLinkCommon::CrossGameLinkButtonData</FIXME> >
		UINT32 adminIntId;
		ThinAtf::LAtfVector< CrossGameLinkCommon::CrossGameLinkButtonData, 4 > buttons;

		Protocol_CRM_Q_CREATE_CROSSLINK_BUTTONS();
		void clear();
		bool equals(const Protocol_CRM_Q_CREATE_CROSSLINK_BUTTONS&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return CRM_Q_CREATE_CROSSLINK_BUTTONS; }
		static const char *getMsgIdString() { return "CRM_Q_CREATE_CROSSLINK_BUTTONS"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_CRM_Q_CREATE_CROSSLINK_BUTTONS(Protocol_CRM_Q_CREATE_CROSSLINK_BUTTONS&&);
		Protocol_CRM_Q_CREATE_CROSSLINK_BUTTONS& operator=(Protocol_CRM_Q_CREATE_CROSSLINK_BUTTONS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		Protocol_CRM_Q_CREATE_CROSSLINK_BUTTONS(const Protocol_CRM_Q_CREATE_CROSSLINK_BUTTONS&) = default;
		Protocol_CRM_Q_CREATE_CROSSLINK_BUTTONS& operator=(const Protocol_CRM_Q_CREATE_CROSSLINK_BUTTONS&) = default;
#endif
#endif
	};

	struct Protocol_CRM_A_CREATE_CROSSLINK_BUTTONS
	{
		// 2[s] - errCode[errStr]
		INT16 errCode;

		PString errStr;

		Protocol_CRM_A_CREATE_CROSSLINK_BUTTONS();
		void clear();
		bool equals(const Protocol_CRM_A_CREATE_CROSSLINK_BUTTONS&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return CRM_A_CREATE_CROSSLINK_BUTTONS; }
		static const char *getMsgIdString() { return "CRM_A_CREATE_CROSSLINK_BUTTONS"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_CRM_A_CREATE_CROSSLINK_BUTTONS(Protocol_CRM_A_CREATE_CROSSLINK_BUTTONS&&);
		Protocol_CRM_A_CREATE_CROSSLINK_BUTTONS& operator=(Protocol_CRM_A_CREATE_CROSSLINK_BUTTONS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		Protocol_CRM_A_CREATE_CROSSLINK_BUTTONS(const Protocol_CRM_A_CREATE_CROSSLINK_BUTTONS&) = default;
		Protocol_CRM_A_CREATE_CROSSLINK_BUTTONS& operator=(const Protocol_CRM_A_CREATE_CROSSLINK_BUTTONS&) = default;
#endif
#endif
	};
};

#endif
