/**
 * crossgamebuttonscommonprot_thin.cpp
 *
 * This file was auto-generated from crossgamebuttonscommonprot.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin crossgamebuttonscommonprot.txt
 */
 
#include "crossgamebuttonscommonprot_thin.h"

//=================================================================
//                    CrossGameLinkButtonDef
//=================================================================

CrossGameLinkCommon::CrossGameLinkButtonDef::CrossGameLinkButtonDef()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

CrossGameLinkCommon::CrossGameLinkButtonDef::CrossGameLinkButtonDef(CrossGameLinkButtonDef&& _o)
	: buttonName(std::move(_o.buttonName))
	, click2LaunchLink(std::move(_o.click2LaunchLink))
	, iconName(std::move(_o.iconName))
	, buttonLabel(std::move(_o.buttonLabel))
	, tooltip(std::move(_o.tooltip))
	, buttonType(std::move(_o.buttonType))
{
}

CrossGameLinkCommon::CrossGameLinkButtonDef& CrossGameLinkCommon::CrossGameLinkButtonDef::operator=(CrossGameLinkButtonDef&& _o)
{
	if(this != &_o)
	{
		buttonName = std::move(_o.buttonName);
		click2LaunchLink = std::move(_o.click2LaunchLink);
		iconName = std::move(_o.iconName);
		buttonLabel = std::move(_o.buttonLabel);
		tooltip = std::move(_o.tooltip);
		buttonType = std::move(_o.buttonType);
	}
	return *this;
}

#endif

void CrossGameLinkCommon::CrossGameLinkButtonDef::clear()
{
	buttonName.clear();
	click2LaunchLink.clear();
	iconName.clear();
	buttonLabel.clear();
	tooltip.clear();
	buttonType.clear();
}

bool CrossGameLinkCommon::CrossGameLinkButtonDef::equals(const CrossGameLinkButtonDef& _o) const
{
	return buttonName.equals(_o.buttonName) &&
		click2LaunchLink.equals(_o.click2LaunchLink) &&
		iconName.equals(_o.iconName) &&
		buttonLabel.equals(_o.buttonLabel) &&
		tooltip.equals(_o.tooltip) &&
		buttonType.equals(_o.buttonType);
}

const char *CrossGameLinkCommon::CrossGameLinkButtonDef::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("buttonName=");
	_buf.append(buttonName);
	_buf.append(',');
	_buf.append("click2LaunchLink=");
	_buf.append(click2LaunchLink);
	_buf.append(',');
	_buf.append("iconName=");
	_buf.append(iconName);
	_buf.append(',');
	_buf.append("buttonLabel=");
	ThinAtf::AtfTempl<I18nPString>::ToTraceString(_buf, buttonLabel);
	_buf.append(',');
	_buf.append("tooltip=");
	ThinAtf::AtfTempl<I18nPString>::ToTraceString(_buf, tooltip);
	_buf.append(',');
	_buf.append("buttonType=");
	_buf.append(buttonType);
	_buf.append('}');
	return _buf.c_str();
}

void CrossGameLinkCommon::CrossGameLinkButtonDef::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(CrossGameLinkButtonDef())) // not empty
	{
		_body.composeString(buttonName);
		_body.composeString(click2LaunchLink);
		_body.composeString(iconName);
		buttonLabel.compose(_body);
		tooltip.compose(_body);
		_body.composeString(buttonType);
	}

	_msg.composeMsgBody(_body);
}

void CrossGameLinkCommon::CrossGameLinkButtonDef::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(buttonName);
	_parser0.parseStringP(click2LaunchLink);
	_parser0.parseStringP(iconName);
	buttonLabel.parse(_parser0);
	tooltip.parse(_parser0);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringP(buttonType);
}

/*static*/ void CrossGameLinkCommon::CrossGameLinkButtonDef::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "buttonName"); size_t szButtonName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "buttonName", szButtonName, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "click2LaunchLink"); size_t szClick2LaunchLink = strlen(_dummy);
	AtfValidator::validateInt(_descr, "click2LaunchLink", szClick2LaunchLink, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "iconName"); size_t szIconName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "iconName", szIconName, _checker, __FILE__, __LINE__);
	I18nPString buttonLabel; buttonLabel.parse(_parser0);
	I18nPString tooltip; tooltip.parse(_parser0);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringN(_dummy, 0, "buttonType"); size_t szButtonType = strlen(_dummy);
	AtfValidator::validateInt(_descr, "buttonType", szButtonType, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    CrossGameLinkButtonCriteria
//=================================================================

CrossGameLinkCommon::CrossGameLinkButtonCriteria::CrossGameLinkButtonCriteria()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

CrossGameLinkCommon::CrossGameLinkButtonCriteria::CrossGameLinkButtonCriteria(CrossGameLinkButtonCriteria&& _o)
	: criteriaLabel(std::move(_o.criteriaLabel))
{
}

CrossGameLinkCommon::CrossGameLinkButtonCriteria& CrossGameLinkCommon::CrossGameLinkButtonCriteria::operator=(CrossGameLinkButtonCriteria&& _o)
{
	if(this != &_o)
	{
		criteriaLabel = std::move(_o.criteriaLabel);
	}
	return *this;
}

#endif

void CrossGameLinkCommon::CrossGameLinkButtonCriteria::clear()
{
	criteriaLabel.clear();
}

bool CrossGameLinkCommon::CrossGameLinkButtonCriteria::equals(const CrossGameLinkButtonCriteria& _o) const
{
	return criteriaLabel.equals(_o.criteriaLabel);
}

const char *CrossGameLinkCommon::CrossGameLinkButtonCriteria::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("criteriaLabel=");
	_buf.append(criteriaLabel);
	_buf.append('}');
	return _buf.c_str();
}

void CrossGameLinkCommon::CrossGameLinkButtonCriteria::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(CrossGameLinkButtonCriteria())) // not empty
	{
		_body.composeString(criteriaLabel);
	}

	_msg.composeMsgBody(_body);
}

void CrossGameLinkCommon::CrossGameLinkButtonCriteria::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(criteriaLabel);
}

/*static*/ void CrossGameLinkCommon::CrossGameLinkButtonCriteria::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "criteriaLabel"); size_t szCriteriaLabel = strlen(_dummy);
	AtfValidator::validateInt(_descr, "criteriaLabel", szCriteriaLabel, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    CrossGameLinkButtonData
//=================================================================

CrossGameLinkCommon::CrossGameLinkButtonData::CrossGameLinkButtonData()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

CrossGameLinkCommon::CrossGameLinkButtonData::CrossGameLinkButtonData(CrossGameLinkButtonData&& _o)
	: userCriteria(std::move(_o.userCriteria))
	, gameCriteria(std::move(_o.gameCriteria))
	, buttonDef(std::move(_o.buttonDef))
{
}

CrossGameLinkCommon::CrossGameLinkButtonData& CrossGameLinkCommon::CrossGameLinkButtonData::operator=(CrossGameLinkButtonData&& _o)
{
	if(this != &_o)
	{
		userCriteria = std::move(_o.userCriteria);
		gameCriteria = std::move(_o.gameCriteria);
		buttonDef = std::move(_o.buttonDef);
	}
	return *this;
}

#endif

void CrossGameLinkCommon::CrossGameLinkButtonData::clear()
{
	userCriteria.clear();
	gameCriteria.clear();
	buttonDef.clear();
}

bool CrossGameLinkCommon::CrossGameLinkButtonData::equals(const CrossGameLinkButtonData& _o) const
{
	return userCriteria.equals(_o.userCriteria) &&
		gameCriteria.equals(_o.gameCriteria) &&
		buttonDef.equals(_o.buttonDef);
}

const char *CrossGameLinkCommon::CrossGameLinkButtonData::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userCriteria=");
	userCriteria.toTraceString(_buf);
	_buf.append(',');
	_buf.append("gameCriteria=");
	gameCriteria.toTraceString(_buf);
	_buf.append(',');
	_buf.append("buttonDef=");
	buttonDef.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void CrossGameLinkCommon::CrossGameLinkButtonData::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(CrossGameLinkButtonData())) // not empty
	{
		userCriteria.composeMsg(_body);
		gameCriteria.composeMsg(_body);
		buttonDef.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void CrossGameLinkCommon::CrossGameLinkButtonData::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	userCriteria.parseMsg(_parser0);
	gameCriteria.parseMsg(_parser0);
	buttonDef.parseMsg(_parser0);
}

/*static*/ void CrossGameLinkCommon::CrossGameLinkButtonData::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	int szUserCriteria = ThinAtf::LAtfVector< CrossGameLinkButtonCriteria, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("userCriteria"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "userCriteria", szUserCriteria, _checker, __FILE__, __LINE__);
	int szGameCriteria = ThinAtf::LAtfVector< CrossGameLinkButtonCriteria, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("gameCriteria"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "gameCriteria", szGameCriteria, _checker, __FILE__, __LINE__);
	CrossGameLinkButtonDef::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("buttonDef"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

