/**
 * stormhh_thin.h
 *
 * This file was auto-generated from stormhh.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin stormhh.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_STORMHH_THIN_H
#define ATF_PROTOCOL_DEFFILE_STORMHH_THIN_H

#include "ThinAtfUserDefStructs.h"
#include "table.h"


namespace StormHHThin
{
	struct P_Card
	{
		// M(11) - M(suit,rank)
		char suit;
		BYTE rank;

		P_Card();
		void clear();
		bool equals(const P_Card&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		// @Override
		P_Card(const Card& card);

		// @Override
		operator Card();
	};

	namespace invoke
	{
		struct Header
		{
			// M(8b4) - M(cost,exposePrivacy,powerCardUniqueId)
			INT64 cost;
			bool exposePrivacy;
			INT32 powerCardUniqueId;	// guaranteed unique inside one hand if > 0

			Header();
			void clear();
			bool equals(const Header&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct BaseData	// minimum fields must be defined in this "invoke" namespace
		{
			struct _PubDataType
			{
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M() <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M() <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			BaseData();
			void clear();
			bool equals(const BaseData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct PubClientExtraMsg	// client extra msg on publication, this struct does not go to database
		{
			// b[2] - hasPrivateDataInSeparateMsg[privateMessageSeatMask]
			bool hasPrivateDataInSeparateMsg;

			INT16 privateMessageSeatMask;

			PubClientExtraMsg();
			void clear();
			bool equals(const PubClientExtraMsg&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PubClientExtraMsg(PubClientExtraMsg&&);
			PubClientExtraMsg& operator=(PubClientExtraMsg&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PubClientExtraMsg(const PubClientExtraMsg&) = default;
			PubClientExtraMsg& operator=(const PubClientExtraMsg&) = default;
#endif
#endif
		};

		struct EMP
		{
			struct _PubDataType
			{
				BYTE startStreet;
				BYTE endStreet;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(11) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(startStreet,endStreet) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			EMP();
			void clear();
			bool equals(const EMP&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Clone
		{
			struct _PubDataType
			{
				INT32 powerIdToPlay;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				INT32 powerIdToPlay;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(4) <FIXME_COND_IF> M(4) <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(powerIdToPlay) <FIXME_COND_IF> ,M(powerIdToPlay) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Clone();
			void clear();
			bool equals(const Clone&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct DarkBet
		{
			struct _PubDataType
			{
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				INT64 amount;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M() <FIXME_COND_IF> M(8) <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M() <FIXME_COND_IF> ,M(amount) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			DarkBet();
			void clear();
			bool equals(const DarkBet&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Scanner
		{
			struct _PubDataType
			{
				PString keepOrDiscard;	// "k" or "d"
				BYTE numCards;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PubDataType(_PubDataType&&);
				_PubDataType& operator=(_PubDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PubDataType(const _PubDataType&) = default;
				_PubDataType& operator=(const _PubDataType&) = default;
#endif
#endif
			};

			struct _PrivDataType
			{
				PString cards;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PrivDataType(_PrivDataType&&);
				_PrivDataType& operator=(_PrivDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PrivDataType(const _PrivDataType&) = default;
				_PrivDataType& operator=(const _PrivDataType&) = default;
#endif
#endif
			};

			//! M(8b4)M(s1) <FIXME_COND_IF> M(s) <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(keepOrDiscard,numCards) <FIXME_COND_IF> ,M(cards) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Scanner();
			void clear();
			bool equals(const Scanner&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Scanner(Scanner&&);
			Scanner& operator=(Scanner&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Scanner(const Scanner&) = default;
			Scanner& operator=(const Scanner&) = default;
#endif
#endif
		};

		struct MindControl
		{
			struct _PubDataType
			{
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				INT32 stolenPowerId;
				ThinAtf::LAtfVector< INT32, 4 > powersLeft;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PrivDataType(_PrivDataType&&);
				_PrivDataType& operator=(_PrivDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PrivDataType(const _PrivDataType&) = default;
				_PrivDataType& operator=(const _PrivDataType&) = default;
#endif
#endif
			};

			//! M(8b4)M() <FIXME_COND_IF> M(44<4>) <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M() <FIXME_COND_IF> ,M(stolenPowerId,numPowersLeft<powersLeft>) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			MindControl();
			void clear();
			bool equals(const MindControl&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			MindControl(MindControl&&);
			MindControl& operator=(MindControl&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			MindControl(const MindControl&) = default;
			MindControl& operator=(const MindControl&) = default;
#endif
#endif
		};

		struct Intel
		{
			struct _PubDataType
			{
				INT32 numOfSensedNextCards;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				PString sensedCards;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PrivDataType(_PrivDataType&&);
				_PrivDataType& operator=(_PrivDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PrivDataType(const _PrivDataType&) = default;
				_PrivDataType& operator=(const _PrivDataType&) = default;
#endif
#endif
			};

			//! M(8b4)M(4) <FIXME_COND_IF> M(s) <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(numOfSensedNextCards) <FIXME_COND_IF> ,M(sensedCards) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Intel();
			void clear();
			bool equals(const Intel&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Intel(Intel&&);
			Intel& operator=(Intel&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Intel(const Intel&) = default;
			Intel& operator=(const Intel&) = default;
#endif
#endif
		};

		struct Pacify
		{
			struct _PubDataType
			{
				bool cardUnfreezePossible;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(b) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(cardUnfreezePossible) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Pacify();
			void clear();
			bool equals(const Pacify&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Reload
		{
			struct _PubDataType
			{
				INT32 numCards;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(4) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(numCards) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Reload();
			void clear();
			bool equals(const Reload&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Chaos
		{
			struct _PubDataType
			{
				INT32 numBombs;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(4) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(numBombs) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Chaos();
			void clear();
			bool equals(const Chaos&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Mint
		{
			struct _PubDataType
			{
				INT64 chipsMinted;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(8) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(chipsMinted) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Mint();
			void clear();
			bool equals(const Mint&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Swap
		{
			struct _PubDataType
			{
				PString holeCard;
				PString boardCard;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PubDataType(_PubDataType&&);
				_PubDataType& operator=(_PubDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PubDataType(const _PubDataType&) = default;
				_PubDataType& operator=(const _PubDataType&) = default;
#endif
#endif
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(ss) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(holeCard,boardCard) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Swap();
			void clear();
			bool equals(const Swap&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Swap(Swap&&);
			Swap& operator=(Swap&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Swap(const Swap&) = default;
			Swap& operator=(const Swap&) = default;
#endif
#endif
		};

		struct Engineer
		{
			struct _PubDataType
			{
				PString chosenCard;
				PString discardedCards;
				PString cardsCandidate;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PubDataType(_PubDataType&&);
				_PubDataType& operator=(_PubDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PubDataType(const _PubDataType&) = default;
				_PubDataType& operator=(const _PubDataType&) = default;
#endif
#endif
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(sss) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(chosenCard,discardedCards,cardsCandidate) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Engineer();
			void clear();
			bool equals(const Engineer&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Engineer(Engineer&&);
			Engineer& operator=(Engineer&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Engineer(const Engineer&) = default;
			Engineer& operator=(const Engineer&) = default;
#endif
#endif
		};

		struct Reboot
		{
			struct _PubDataType
			{
				INT32 numPowersDrawn;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(4) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(numPowersDrawn) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Reboot();
			void clear();
			bool equals(const Reboot&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Equalizer
		{
			struct _PubDataType
			{
				INT64 manaCopied;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(8) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(manaCopied) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Equalizer();
			void clear();
			bool equals(const Equalizer&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Freeze
		{
			struct _PubDataType
			{
				PString frozenCards;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PubDataType(_PubDataType&&);
				_PubDataType& operator=(_PubDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PubDataType(const _PubDataType&) = default;
				_PubDataType& operator=(const _PubDataType&) = default;
#endif
#endif
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(s) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(frozenCards) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Freeze();
			void clear();
			bool equals(const Freeze&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Freeze(Freeze&&);
			Freeze& operator=(Freeze&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Freeze(const Freeze&) = default;
			Freeze& operator=(const Freeze&) = default;
#endif
#endif
		};

		struct Syphon
		{
			struct _PubDataType
			{
				INT64 manaStolen;
				INT8 targetPlayer;
				PString targetUserId;
				INT64 manaReceived;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PubDataType(_PubDataType&&);
				_PubDataType& operator=(_PubDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PubDataType(const _PubDataType&) = default;
				_PubDataType& operator=(const _PubDataType&) = default;
#endif
#endif
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(81s8) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(manaStolen,targetPlayer,targetUserId,manaReceived) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Syphon();
			void clear();
			bool equals(const Syphon&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Syphon(Syphon&&);
			Syphon& operator=(Syphon&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Syphon(const Syphon&) = default;
			Syphon& operator=(const Syphon&) = default;
#endif
#endif
		};

		struct AnteUp
		{
			struct _PubDataType
			{
				INT64 ante;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(8) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(ante) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			AnteUp();
			void clear();
			bool equals(const AnteUp&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		// =================== the followings are secret powers =====================

		struct CounterSpell
		{
			struct _PubDataType
			{
				bool isRevealStage;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				INT32 mySecretPowerId;
				INT32 destroyedPowerId;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(b) <FIXME_COND_IF> M(44) <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(isRevealStage) <FIXME_COND_IF> ,M(mySecretPowerId,destroyedPowerId) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			CounterSpell();
			void clear();
			bool equals(const CounterSpell&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Lowblow
		{
			struct _PubDataType
			{
				bool isSecretPlay;
				bool isRevealStage;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				INT32 mySecretPowerId;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(bb) <FIXME_COND_IF> M(4) <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(isSecretPlay,isRevealStage) <FIXME_COND_IF> ,M(mySecretPowerId) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Lowblow();
			void clear();
			bool equals(const Lowblow&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Stretch
		{
			struct _PubDataType
			{
				bool isSecretPlay;
				bool isRevealStage;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				INT32 mySecretPowerId;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(bb) <FIXME_COND_IF> M(4) <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(isSecretPlay,isRevealStage) <FIXME_COND_IF> ,M(mySecretPowerId) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Stretch();
			void clear();
			bool equals(const Stretch&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct SuitUp
		{
			struct _PubDataType
			{
				bool isRevealStage;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				INT32 mySecretPowerId;
				BYTE suit;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(b) <FIXME_COND_IF> M(41) <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(isRevealStage) <FIXME_COND_IF> ,M(mySecretPowerId,suit) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			SuitUp();
			void clear();
			bool equals(const SuitUp&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct SplashPot
		{
			struct _PubDataType
			{
				bool isRevealStage;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				INT32 mySecretPowerId;
				INT64 splashSize;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(b) <FIXME_COND_IF> M(48) <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(isRevealStage) <FIXME_COND_IF> ,M(mySecretPowerId,splashSize) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			SplashPot();
			void clear();
			bool equals(const SplashPot&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Sabotage
		{
			struct _PubDataType
			{
				bool isRevealStage;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				INT32 mySecretPowerId;
				INT32 destroyedPowerId;
				INT64 hitPayment;
				bool isManaHit;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(8b4)M(b) <FIXME_COND_IF> M(448b) <FIXME_COND_ENDIF>  - M(cost,exposePrivacy,powerCardUniqueId),M(isRevealStage) <FIXME_COND_IF> ,M(mySecretPowerId,destroyedPowerId,hitPayment,isManaHit) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			Sabotage();
			void clear();
			bool equals(const Sabotage&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

	};

	namespace effect
	{
		struct Header
		{
			// M(4b4) - M(powerId,exposePrivacy,powerCardUniqueId)
			INT32 powerId;
			bool exposePrivacy;
			INT32 powerCardUniqueId;	// guaranteed unique inside one hand if > 0

			Header();
			void clear();
			bool equals(const Header&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct BaseData	// minimum fields must be defined in this "invoke" namespace
		{
			struct _PubDataType
			{
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M() <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M() <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			BaseData();
			void clear();
			bool equals(const BaseData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct PubClientExtraMsg	// client extra msg on publication, this struct does not go to database
		{
			// b[2] - hasPrivateDataInSeparateMsg[privateMessageSeatMask]
			bool hasPrivateDataInSeparateMsg;

			INT16 privateMessageSeatMask;

			PubClientExtraMsg();
			void clear();
			bool equals(const PubClientExtraMsg&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PubClientExtraMsg(PubClientExtraMsg&&);
			PubClientExtraMsg& operator=(PubClientExtraMsg&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PubClientExtraMsg(const PubClientExtraMsg&) = default;
			PubClientExtraMsg& operator=(const PubClientExtraMsg&) = default;
#endif
#endif
		};

		struct DarkBetCall
		{
			struct _PubDataType
			{
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M() <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M() <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			DarkBetCall();
			void clear();
			bool equals(const DarkBetCall&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct DarkBetEnd
		{
			struct _PubDataType
			{
				INT64 amount;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M(8) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M(amount) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			DarkBetEnd();
			void clear();
			bool equals(const DarkBetEnd&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct AllInFreeze
		{
			struct _PubDataType
			{
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M() <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M() <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			AllInFreeze();
			void clear();
			bool equals(const AllInFreeze&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ReplaceBoardCard
		{
			struct _PubDataType
			{
				PString oldCard;
				PString newCard;
				BYTE suit;	// for suit up
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PubDataType(_PubDataType&&);
				_PubDataType& operator=(_PubDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PubDataType(const _PubDataType&) = default;
				_PubDataType& operator=(const _PubDataType&) = default;
#endif
#endif
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M(ss1) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M(oldCard,newCard,suit) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			ReplaceBoardCard();
			void clear();
			bool equals(const ReplaceBoardCard&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ReplaceBoardCard(ReplaceBoardCard&&);
			ReplaceBoardCard& operator=(ReplaceBoardCard&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ReplaceBoardCard(const ReplaceBoardCard&) = default;
			ReplaceBoardCard& operator=(const ReplaceBoardCard&) = default;
#endif
#endif
		};

		struct ReplaceMultiBoardCards
		{
			struct _PubDataType
			{
				ThinAtf::LAtfVector< PString, 4 > oldCards;
				ThinAtf::LAtfVector< PString, 4 > newCards;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PubDataType(_PubDataType&&);
				_PubDataType& operator=(_PubDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PubDataType(const _PubDataType&) = default;
				_PubDataType& operator=(const _PubDataType&) = default;
#endif
#endif
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M(4<s>4<s>) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M(numOldCards<oldCards>,numNewCards<newCards>) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			ReplaceMultiBoardCards();
			void clear();
			bool equals(const ReplaceMultiBoardCards&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ReplaceMultiBoardCards(ReplaceMultiBoardCards&&);
			ReplaceMultiBoardCards& operator=(ReplaceMultiBoardCards&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ReplaceMultiBoardCards(const ReplaceMultiBoardCards&) = default;
			ReplaceMultiBoardCards& operator=(const ReplaceMultiBoardCards&) = default;
#endif
#endif
		};

		struct AddBoardCard
		{
			struct _PubDataType
			{
				PString card;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PubDataType(_PubDataType&&);
				_PubDataType& operator=(_PubDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PubDataType(const _PubDataType&) = default;
				_PubDataType& operator=(const _PubDataType&) = default;
#endif
#endif
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M(s) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M(card) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			AddBoardCard();
			void clear();
			bool equals(const AddBoardCard&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			AddBoardCard(AddBoardCard&&);
			AddBoardCard& operator=(AddBoardCard&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			AddBoardCard(const AddBoardCard&) = default;
			AddBoardCard& operator=(const AddBoardCard&) = default;
#endif
#endif
		};

		struct GetFreeChips
		{
			struct _PubDataType
			{
				INT64 freeChipsReceived;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M(8) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M(freeChipsReceived) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			GetFreeChips();
			void clear();
			bool equals(const GetFreeChips&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct CarryOverChipsToNextHand
		{
			struct _PubDataType
			{
				INT64 chipsCarriedOver;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M(8) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M(chipsCarriedOver) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			CarryOverChipsToNextHand();
			void clear();
			bool equals(const CarryOverChipsToNextHand&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct FrozenCardHit
		{
			struct _PubDataType
			{
				PString card;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PubDataType(_PubDataType&&);
				_PubDataType& operator=(_PubDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PubDataType(const _PubDataType&) = default;
				_PubDataType& operator=(const _PubDataType&) = default;
#endif
#endif
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M(s) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M(card) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			FrozenCardHit();
			void clear();
			bool equals(const FrozenCardHit&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			FrozenCardHit(FrozenCardHit&&);
			FrozenCardHit& operator=(FrozenCardHit&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			FrozenCardHit(const FrozenCardHit&) = default;
			FrozenCardHit& operator=(const FrozenCardHit&) = default;
#endif
#endif
		};

		struct ShowOneHoleCard
		{
			struct _PubDataType
			{
				PString card;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PubDataType(_PubDataType&&);
				_PubDataType& operator=(_PubDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PubDataType(const _PubDataType&) = default;
				_PubDataType& operator=(const _PubDataType&) = default;
#endif
#endif
			};

			struct _PrivDataType
			{
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M(s) <FIXME_COND_IF> M() <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M(card) <FIXME_COND_IF> ,M() <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			ShowOneHoleCard();
			void clear();
			bool equals(const ShowOneHoleCard&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ShowOneHoleCard(ShowOneHoleCard&&);
			ShowOneHoleCard& operator=(ShowOneHoleCard&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ShowOneHoleCard(const ShowOneHoleCard&) = default;
			ShowOneHoleCard& operator=(const ShowOneHoleCard&) = default;
#endif
#endif
		};

		struct ReplaceHoleCard
		{
			struct _PubDataType
			{
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				PString oldCard;
				PString newCard;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PrivDataType(_PrivDataType&&);
				_PrivDataType& operator=(_PrivDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PrivDataType(const _PrivDataType&) = default;
				_PrivDataType& operator=(const _PrivDataType&) = default;
#endif
#endif
			};

			//! M(4b4)M() <FIXME_COND_IF> M(ss) <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M() <FIXME_COND_IF> ,M(oldCard,newCard) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			ReplaceHoleCard();
			void clear();
			bool equals(const ReplaceHoleCard&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ReplaceHoleCard(ReplaceHoleCard&&);
			ReplaceHoleCard& operator=(ReplaceHoleCard&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ReplaceHoleCard(const ReplaceHoleCard&) = default;
			ReplaceHoleCard& operator=(const ReplaceHoleCard&) = default;
#endif
#endif
		};

		struct ReceiveHoleCards
		{
			struct _PubDataType
			{
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				PString cards;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PrivDataType(_PrivDataType&&);
				_PrivDataType& operator=(_PrivDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PrivDataType(const _PrivDataType&) = default;
				_PrivDataType& operator=(const _PrivDataType&) = default;
#endif
#endif
			};

			//! M(4b4)M() <FIXME_COND_IF> M(s) <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M() <FIXME_COND_IF> ,M(cards) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			ReceiveHoleCards();
			void clear();
			bool equals(const ReceiveHoleCards&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ReceiveHoleCards(ReceiveHoleCards&&);
			ReceiveHoleCards& operator=(ReceiveHoleCards&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ReceiveHoleCards(const ReceiveHoleCards&) = default;
			ReceiveHoleCards& operator=(const ReceiveHoleCards&) = default;
#endif
#endif
		};

		struct DiscardHoleCards
		{
			struct _PubDataType
			{
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				PString cards;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PrivDataType(_PrivDataType&&);
				_PrivDataType& operator=(_PrivDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PrivDataType(const _PrivDataType&) = default;
				_PrivDataType& operator=(const _PrivDataType&) = default;
#endif
#endif
			};

			//! M(4b4)M() <FIXME_COND_IF> M(s) <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M() <FIXME_COND_IF> ,M(cards) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			DiscardHoleCards();
			void clear();
			bool equals(const DiscardHoleCards&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			DiscardHoleCards(DiscardHoleCards&&);
			DiscardHoleCards& operator=(DiscardHoleCards&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			DiscardHoleCards(const DiscardHoleCards&) = default;
			DiscardHoleCards& operator=(const DiscardHoleCards&) = default;
#endif
#endif
		};

		struct RebootEffect
		{
			struct _PubDataType
			{
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				ThinAtf::LAtfVector< INT32, 4 > discardedPowers;
				ThinAtf::LAtfVector< INT32, 4 > reloadedPowers;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PrivDataType(_PrivDataType&&);
				_PrivDataType& operator=(_PrivDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PrivDataType(const _PrivDataType&) = default;
				_PrivDataType& operator=(const _PrivDataType&) = default;
#endif
#endif
			};

			//! M(4b4)M() <FIXME_COND_IF> M(4<4>4<4>) <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M() <FIXME_COND_IF> ,M(numDiscardedPowers<discardedPowers>,numReloadedPowers<reloadedPowers>) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			RebootEffect();
			void clear();
			bool equals(const RebootEffect&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			RebootEffect(RebootEffect&&);
			RebootEffect& operator=(RebootEffect&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			RebootEffect(const RebootEffect&) = default;
			RebootEffect& operator=(const RebootEffect&) = default;
#endif
#endif
		};

		struct IntelEffect
		{
			struct _PubDataType
			{
				INT32 numCardsSensed;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				PString sensedCards;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PrivDataType(_PrivDataType&&);
				_PrivDataType& operator=(_PrivDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PrivDataType(const _PrivDataType&) = default;
				_PrivDataType& operator=(const _PrivDataType&) = default;
#endif
#endif
			};

			//! M(4b4)M(4) <FIXME_COND_IF> M(s) <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M(numCardsSensed) <FIXME_COND_IF> ,M(sensedCards) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			IntelEffect();
			void clear();
			bool equals(const IntelEffect&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			IntelEffect(IntelEffect&&);
			IntelEffect& operator=(IntelEffect&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			IntelEffect(const IntelEffect&) = default;
			IntelEffect& operator=(const IntelEffect&) = default;
#endif
#endif
		};

		struct ExchangePowerEffect
		{
			struct _PubDataType
			{
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				bool isAdded;
				INT32 changedPowerId;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! M(4b4)M() <FIXME_COND_IF> M(b4) <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M() <FIXME_COND_IF> ,M(isAdded,changedPowerId) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			ExchangePowerEffect();
			void clear();
			bool equals(const ExchangePowerEffect&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct MindControlDrawNewPowersEffect
		{
			struct _PubDataType
			{
				INT32 numNewPowers;
				mutable bool _is_empty_internal;

				_PubDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PubDataType()); return _is_empty_internal; }
				bool equals(const _PubDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _PrivDataType
			{
				ThinAtf::LAtfVector< INT32, 4 > newPowerIds;
				mutable bool _is_empty_internal;

				_PrivDataType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_PrivDataType()); return _is_empty_internal; }
				bool equals(const _PrivDataType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_PrivDataType(_PrivDataType&&);
				_PrivDataType& operator=(_PrivDataType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_PrivDataType(const _PrivDataType&) = default;
				_PrivDataType& operator=(const _PrivDataType&) = default;
#endif
#endif
			};

			//! M(4b4)M(4) <FIXME_COND_IF> M(4<4>) <FIXME_COND_ENDIF>  - M(powerId,exposePrivacy,powerCardUniqueId),M(numNewPowers) <FIXME_COND_IF> ,M(numNewPowerIds<newPowerIds>) <FIXME_COND_ENDIF> 
			Header header;
			_PubDataType pubData;
			_PrivDataType privData;

			MindControlDrawNewPowersEffect();
			void clear();
			bool equals(const MindControlDrawNewPowersEffect&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			MindControlDrawNewPowersEffect(MindControlDrawNewPowersEffect&&);
			MindControlDrawNewPowersEffect& operator=(MindControlDrawNewPowersEffect&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			MindControlDrawNewPowersEffect(const MindControlDrawNewPowersEffect&) = default;
			MindControlDrawNewPowersEffect& operator=(const MindControlDrawNewPowersEffect&) = default;
#endif
#endif
		};

	};
};

#endif
