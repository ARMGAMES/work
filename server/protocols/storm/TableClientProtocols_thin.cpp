/**
 * TableClientProtocols_thin.cpp
 *
 * This file was auto-generated from TableClientProtocols.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin TableClientProtocols.txt
 */
 
#include "TableClientProtocols_thin.h"

//=================================================================
//                    PubBoardCardPosition
//=================================================================

// @Override
TableClientThin::PubBoardCardPosition::PubBoardCardPosition(int boardNum_, int cardNum_)
{
	boardNumber = static_cast< INT8 >( boardNum_ );
	cardNumber = static_cast< INT8 >( cardNum_ );
}

TableClientThin::PubBoardCardPosition::PubBoardCardPosition()
{
	clear();
}

void TableClientThin::PubBoardCardPosition::clear()
{
	boardNumber = 0;
	cardNumber = 0;
}

bool TableClientThin::PubBoardCardPosition::equals(const PubBoardCardPosition& _o) const
{
	return boardNumber == _o.boardNumber &&
		cardNumber == _o.cardNumber;
}

const char *TableClientThin::PubBoardCardPosition::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("boardNumber=");
	_buf.appendInt(boardNumber);
	_buf.append(',');
	_buf.append("cardNumber=");
	_buf.appendInt(cardNumber);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::PubBoardCardPosition::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(boardNumber);
	_msg.composeINT8(cardNumber);
}

void TableClientThin::PubBoardCardPosition::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(boardNumber);
	_parser.parseINT8(cardNumber);
}

/*static*/ void TableClientThin::PubBoardCardPosition::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT8 boardNumber; _parser.parseINT8(boardNumber);
	AtfValidator::validateInt(_descr, "boardNumber", boardNumber, _checker, __FILE__, __LINE__);
	INT8 cardNumber; _parser.parseINT8(cardNumber);
	AtfValidator::validateInt(_descr, "cardNumber", cardNumber, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    P_PlayerCardShown
//=================================================================

TableClientThin::P_PlayerCardShown::P_PlayerCardShown()
{
	clear();
}

void TableClientThin::P_PlayerCardShown::clear()
{
	suit = '0';
	rank = 0;
	shown = 0;
}

bool TableClientThin::P_PlayerCardShown::equals(const P_PlayerCardShown& _o) const
{
	return suit == _o.suit &&
		rank == _o.rank &&
		shown == _o.shown;
}

const char *TableClientThin::P_PlayerCardShown::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("suit=");
	_buf.append(suit);
	_buf.append(',');
	_buf.append("rank=");
	_buf.appendUint(rank);
	_buf.append(',');
	_buf.append("shown=");
	_buf.appendUint(shown);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::P_PlayerCardShown::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(suit);
	_msg.composeBYTE(rank);
	_msg.composeBYTE(shown);
}

void TableClientThin::P_PlayerCardShown::parseMsg(CommMsgParser& _parser)
{
	{ INT8 _n; _parser.parseINT8(_n); suit = _n; }
	_parser.parseBYTE(rank);
	_parser.parseBYTE(shown);
}

/*static*/ void TableClientThin::P_PlayerCardShown::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	char suit; { INT8 _n; _parser.parseINT8(_n); suit = _n; }
	AtfValidator::validateInt(_descr, "suit", suit, _checker, __FILE__, __LINE__);
	BYTE rank; _parser.parseBYTE(rank);
	AtfValidator::validateInt(_descr, "rank", rank, _checker, __FILE__, __LINE__);
	BYTE shown; _parser.parseBYTE(shown);
	AtfValidator::validateInt(_descr, "shown", shown, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    P_PlayerBetOption
//=================================================================

TableClientThin::P_PlayerBetOption::P_PlayerBetOption()
{
	clear();
}

void TableClientThin::P_PlayerBetOption::clear()
{
	act = '0';
	amount = 0;
}

bool TableClientThin::P_PlayerBetOption::equals(const P_PlayerBetOption& _o) const
{
	return act == _o.act &&
		amount == _o.amount;
}

const char *TableClientThin::P_PlayerBetOption::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("act=");
	_buf.append(act);
	_buf.append(',');
	_buf.append("v=");
	_buf.appendUint(amount);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::P_PlayerBetOption::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(act);
	_msg.composeUINT32(amount);
}

void TableClientThin::P_PlayerBetOption::parseMsg(CommMsgParser& _parser)
{
	{ INT8 _n; _parser.parseINT8(_n); act = _n; }
	_parser.parseUINT32(amount);
}

/*static*/ void TableClientThin::P_PlayerBetOption::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	char act; { INT8 _n; _parser.parseINT8(_n); act = _n; }
	AtfValidator::validateInt(_descr, "act", act, _checker, __FILE__, __LINE__);
	UINT32 amount; _parser.parseUINT32(amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    P_PlayerRequestAction
//=================================================================

// @Override
void TableClientThin::P_PlayerRequestAction::composeMsg(CommMsgBody& _msg) const
{
	if(amountMin == amountMax)
	{
		_msg.composeINT8(action);
		_msg.composeUINT32(amountMin);
	}
	else
	{
		_msg.composeINT8('*');
		_msg.composeINT8(action);
		_msg.composeUINT32(amountMin);
		_msg.composeUINT32(amountMax);
		_msg.composeUINT32(amountStep);
		_msg.composeUINT32(chipQuantum);
	}
}

// @Override
void TableClientThin::P_PlayerRequestAction::parseMsg(CommMsgParser& _parser)
{
	INT8 n;
	_parser.parseINT8(n);

	if (n == '*')
	{
		_parser.parseINT8(n);
		action = n;
		_parser.parseUINT32(amountMin);
		_parser.parseUINT32(amountMax);
		_parser.parseUINT32(amountStep);
		_parser.parseUINT32(chipQuantum);
	}
	else
	{
		action = n;
		_parser.parseUINT32(amountMin);
		amountMax = amountMin;
	}
}

TableClientThin::P_PlayerRequestAction::P_PlayerRequestAction()
{
	clear();
}

void TableClientThin::P_PlayerRequestAction::clear()
{
	action = '0';
	amountMin = 0;
	amountMax = 0;
	amountStep = 100;
	chipQuantum = 1;
}

bool TableClientThin::P_PlayerRequestAction::equals(const P_PlayerRequestAction& _o) const
{
	return action == _o.action &&
		amountMin == _o.amountMin &&
		amountMax == _o.amountMax &&
		amountStep == _o.amountStep &&
		chipQuantum == _o.chipQuantum;
}

const char *TableClientThin::P_PlayerRequestAction::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("a=");
	_buf.append(action);
	_buf.append(',');
	_buf.append("vMn=");
	_buf.appendUint(amountMin);
	_buf.append(',');
	_buf.append("vMx=");
	_buf.appendUint(amountMax);
	_buf.append(',');
	_buf.append("vStep=");
	_buf.appendUint(amountStep);
	_buf.append(',');
	_buf.append("chipQuantum=");
	_buf.appendUint(chipQuantum);
	_buf.append('}');
	return _buf.c_str();
}

/*static*/ void TableClientThin::P_PlayerRequestAction::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	char action; { INT8 _n; _parser.parseINT8(_n); action = _n; }
	AtfValidator::validateInt(_descr, "action", action, _checker, __FILE__, __LINE__);
	UINT32 amountMin; _parser.parseUINT32(amountMin);
	AtfValidator::validateInt(_descr, "amountMin", amountMin, _checker, __FILE__, __LINE__);
	UINT32 amountMax; _parser.parseUINT32(amountMax);
	AtfValidator::validateInt(_descr, "amountMax", amountMax, _checker, __FILE__, __LINE__);
	UINT32 amountStep; _parser.parseUINT32(amountStep);
	AtfValidator::validateInt(_descr, "amountStep", amountStep, _checker, __FILE__, __LINE__);
	UINT32 chipQuantum; _parser.parseUINT32(chipQuantum);
	AtfValidator::validateInt(_descr, "chipQuantum", chipQuantum, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    P_SuscrPlayerCards
//=================================================================

TableClientThin::P_SuscrPlayerCards::P_SuscrPlayerCards()
{
	clear();
}

void TableClientThin::P_SuscrPlayerCards::clear()
{
	seat = -1;
	numOfCards = 0;
}

bool TableClientThin::P_SuscrPlayerCards::equals(const P_SuscrPlayerCards& _o) const
{
	return seat == _o.seat &&
		numOfCards == _o.numOfCards;
}

const char *TableClientThin::P_SuscrPlayerCards::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("numOfCards=");
	_buf.appendUint(numOfCards);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::P_SuscrPlayerCards::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(seat);
	_msg.composeBYTE(numOfCards);
}

void TableClientThin::P_SuscrPlayerCards::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(seat);
	_parser.parseBYTE(numOfCards);
}

/*static*/ void TableClientThin::P_SuscrPlayerCards::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	BYTE numOfCards; _parser.parseBYTE(numOfCards);
	AtfValidator::validateInt(_descr, "numOfCards", numOfCards, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    P_PotInfo
//=================================================================

TableClientThin::P_PotInfo::P_PotInfo()
{
	clear();
}

void TableClientThin::P_PotInfo::clear()
{
	seat = -1;
	amount = 0;
}

bool TableClientThin::P_PotInfo::equals(const P_PotInfo& _o) const
{
	return seat == _o.seat &&
		amount == _o.amount;
}

const char *TableClientThin::P_PotInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("v=");
	_buf.appendUint(amount);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::P_PotInfo::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(seat);
	_msg.composeUINT32(amount);
}

void TableClientThin::P_PotInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(seat);
	_parser.parseUINT32(amount);
}

/*static*/ void TableClientThin::P_PotInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	UINT32 amount; _parser.parseUINT32(amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    P_BOUNTY_GREETINGS
//=================================================================

TableClientThin::P_BOUNTY_GREETINGS::P_BOUNTY_GREETINGS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::P_BOUNTY_GREETINGS::P_BOUNTY_GREETINGS(P_BOUNTY_GREETINGS&& _o)
	: amount(std::move(_o.amount))
	, bountyLoser(std::move(_o.bountyLoser))
{
}

TableClientThin::P_BOUNTY_GREETINGS& TableClientThin::P_BOUNTY_GREETINGS::operator=(P_BOUNTY_GREETINGS&& _o)
{
	if(this != &_o)
	{
		amount = std::move(_o.amount);
		bountyLoser = std::move(_o.bountyLoser);
	}
	return *this;
}

#endif

void TableClientThin::P_BOUNTY_GREETINGS::clear()
{
	amount = 0;
	bountyLoser.clear();
}

bool TableClientThin::P_BOUNTY_GREETINGS::equals(const P_BOUNTY_GREETINGS& _o) const
{
	return amount == _o.amount &&
		bountyLoser.equals(_o.bountyLoser);
}

const char *TableClientThin::P_BOUNTY_GREETINGS::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("v=");
	_buf.appendUint(amount);
	_buf.append(',');
	_buf.append("bountyLoser=");
	_buf.append(bountyLoser);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::P_BOUNTY_GREETINGS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(amount);
	_msg.composeString(bountyLoser);
}

void TableClientThin::P_BOUNTY_GREETINGS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(amount);
	_parser.parseStringP(bountyLoser);
}

/*static*/ void TableClientThin::P_BOUNTY_GREETINGS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT32 amount; _parser.parseUINT32(amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "bountyLoser"); size_t szBountyLoser = strlen(_dummy);
	AtfValidator::validateInt(_descr, "bountyLoser", szBountyLoser, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    CardWithPosition
//=================================================================

TableClientThin::CardWithPosition::CardWithPosition()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::CardWithPosition::CardWithPosition(CardWithPosition&& _o)
	: pos(std::move(_o.pos))
	, card(std::move(_o.card))
{
}

TableClientThin::CardWithPosition& TableClientThin::CardWithPosition::operator=(CardWithPosition&& _o)
{
	if(this != &_o)
	{
		pos = std::move(_o.pos);
		card = std::move(_o.card);
	}
	return *this;
}

#endif

void TableClientThin::CardWithPosition::clear()
{
	pos = 0;
	card.clear();
}

bool TableClientThin::CardWithPosition::equals(const CardWithPosition& _o) const
{
	return pos == _o.pos &&
		card.equals(_o.card);
}

const char *TableClientThin::CardWithPosition::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("pos=");
	_buf.appendUint(pos);
	_buf.append(',');
	_buf.append("card=");
	card.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::CardWithPosition::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(pos);
	card.composeMsg(_msg);
}

void TableClientThin::CardWithPosition::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(pos);
	card.parseMsg(_parser);
}

/*static*/ void TableClientThin::CardWithPosition::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	BYTE pos; _parser.parseBYTE(pos);
	AtfValidator::validateInt(_descr, "pos", pos, _checker, __FILE__, __LINE__);
	PString _descbuf;
	TableCommonThin::P_Card::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("card"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    CardInfo
//=================================================================

TableClientThin::CardInfo::CardInfo()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::CardInfo::CardInfo(CardInfo&& _o)
	: playerOrboard(std::move(_o.playerOrboard))
	, pos(std::move(_o.pos))
	, card(std::move(_o.card))
{
}

TableClientThin::CardInfo& TableClientThin::CardInfo::operator=(CardInfo&& _o)
{
	if(this != &_o)
	{
		playerOrboard = std::move(_o.playerOrboard);
		pos = std::move(_o.pos);
		card = std::move(_o.card);
	}
	return *this;
}

#endif

void TableClientThin::CardInfo::clear()
{
	playerOrboard = 0;
	pos = 0;
	card.clear();
}

bool TableClientThin::CardInfo::equals(const CardInfo& _o) const
{
	return playerOrboard == _o.playerOrboard &&
		pos == _o.pos &&
		card.equals(_o.card);
}

const char *TableClientThin::CardInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("playerOrboard=");
	_buf.appendInt(playerOrboard);
	_buf.append(',');
	_buf.append("pos=");
	_buf.appendUint(pos);
	_buf.append(',');
	_buf.append("card=");
	card.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::CardInfo::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(playerOrboard);
	_msg.composeBYTE(pos);
	card.composeMsg(_msg);
}

void TableClientThin::CardInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(playerOrboard);
	_parser.parseBYTE(pos);
	card.parseMsg(_parser);
}

/*static*/ void TableClientThin::CardInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT8 playerOrboard; _parser.parseINT8(playerOrboard);
	AtfValidator::validateInt(_descr, "playerOrboard", playerOrboard, _checker, __FILE__, __LINE__);
	BYTE pos; _parser.parseBYTE(pos);
	AtfValidator::validateInt(_descr, "pos", pos, _checker, __FILE__, __LINE__);
	PString _descbuf;
	TableCommonThin::P_Card::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("card"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    CardInfoBody
//=================================================================

TableClientThin::CardInfoBody::CardInfoBody()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::CardInfoBody::CardInfoBody(CardInfoBody&& _o)
	: c(std::move(_o.c))
{
}

TableClientThin::CardInfoBody& TableClientThin::CardInfoBody::operator=(CardInfoBody&& _o)
{
	if(this != &_o)
	{
		c = std::move(_o.c);
	}
	return *this;
}

#endif

void TableClientThin::CardInfoBody::clear()
{
	c.clear();
}

bool TableClientThin::CardInfoBody::equals(const CardInfoBody& _o) const
{
	return c.equals(_o.c);
}

const char *TableClientThin::CardInfoBody::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("c=");
	c.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::CardInfoBody::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(CardInfoBody())) // not empty
	{
		c.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::CardInfoBody::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	c.parseMsg(_parser0);
}

/*static*/ void TableClientThin::CardInfoBody::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	CardInfo::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("c"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    TotalBetInfo
//=================================================================

TableClientThin::TotalBetInfo::TotalBetInfo()
{
	clear();
}

void TableClientThin::TotalBetInfo::clear()
{
	sumOfBets = 0;
	netWon = 0;
}

bool TableClientThin::TotalBetInfo::equals(const TotalBetInfo& _o) const
{
	return sumOfBets == _o.sumOfBets &&
		netWon == _o.netWon;
}

const char *TableClientThin::TotalBetInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("sumOfBets=");
	_buf.appendInt64(sumOfBets);
	_buf.append(',');
	_buf.append("netWon=");
	_buf.appendInt64(netWon);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::TotalBetInfo::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(TotalBetInfo())) // not empty
	{
		_body.composeINT64(sumOfBets);
		_body.composeINT64(netWon);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::TotalBetInfo::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	if(_parser0.parseEnded()) return;
	_parser0.parseINT64(sumOfBets);
	_parser0.parseINT64(netWon);
}

/*static*/ void TableClientThin::TotalBetInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	if(_parser0.parseEnded()) return;
	INT64 sumOfBets; _parser0.parseINT64(sumOfBets);
	AtfValidator::validateInt(_descr, "sumOfBets", sumOfBets, _checker, __FILE__, __LINE__);
	INT64 netWon; _parser0.parseINT64(netWon);
	AtfValidator::validateInt(_descr, "netWon", netWon, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    ClientMsg_TxtEx_NSF
//=================================================================

TableClientThin::player::ClientMsg_TxtEx_NSF::ClientMsg_TxtEx_NSF()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::ClientMsg_TxtEx_NSF::ClientMsg_TxtEx_NSF(ClientMsg_TxtEx_NSF&& _o)
	: msgId(std::move(_o.msgId))
	, minLimit(std::move(_o.minLimit))
	, enoughMoneyInOtherCurrencies(std::move(_o.enoughMoneyInOtherCurrencies))
	, clientServiceFlag(std::move(_o.clientServiceFlag))
	, chips(std::move(_o.chips))
	, currency(std::move(_o.currency))
	, useAutoConvertBuyin(std::move(_o.useAutoConvertBuyin))
	, clientCurrencyContextShort(std::move(_o.clientCurrencyContextShort))
	, rebuyOrAddonData(std::move(_o.rebuyOrAddonData))
{
}

TableClientThin::player::ClientMsg_TxtEx_NSF& TableClientThin::player::ClientMsg_TxtEx_NSF::operator=(ClientMsg_TxtEx_NSF&& _o)
{
	if(this != &_o)
	{
		msgId = std::move(_o.msgId);
		minLimit = std::move(_o.minLimit);
		enoughMoneyInOtherCurrencies = std::move(_o.enoughMoneyInOtherCurrencies);
		clientServiceFlag = std::move(_o.clientServiceFlag);
		chips = std::move(_o.chips);
		currency = std::move(_o.currency);
		useAutoConvertBuyin = std::move(_o.useAutoConvertBuyin);
		clientCurrencyContextShort = std::move(_o.clientCurrencyContextShort);
		rebuyOrAddonData = std::move(_o.rebuyOrAddonData);
	}
	return *this;
}

#endif

void TableClientThin::player::ClientMsg_TxtEx_NSF::clear()
{
	msgId = ClientMsg_NSF;
	minLimit = 0;
	enoughMoneyInOtherCurrencies = false;
	clientServiceFlag = 0;
	chips = 0;
	currency.clear();
	useAutoConvertBuyin = false;
	clientCurrencyContextShort.clear();
	rebuyOrAddonData.clear();
}

bool TableClientThin::player::ClientMsg_TxtEx_NSF::equals(const ClientMsg_TxtEx_NSF& _o) const
{
	return msgId == _o.msgId &&
		minLimit == _o.minLimit &&
		enoughMoneyInOtherCurrencies == _o.enoughMoneyInOtherCurrencies &&
		clientServiceFlag == _o.clientServiceFlag &&
		chips == _o.chips &&
		currency.equals(_o.currency) &&
		useAutoConvertBuyin == _o.useAutoConvertBuyin &&
		clientCurrencyContextShort.equals(_o.clientCurrencyContextShort) &&
		rebuyOrAddonData.equals(_o.rebuyOrAddonData);
}

const char *TableClientThin::player::ClientMsg_TxtEx_NSF::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("msgId=");
	_buf.appendUint(msgId);
	_buf.append(',');
	_buf.append("minLimit=");
	_buf.appendInt(minLimit);
	_buf.append(',');
	_buf.append("enoughMoneyInOtherCurrencies=");
	_buf.appendUint(enoughMoneyInOtherCurrencies);
	_buf.append(',');
	_buf.append("clientServiceFlag=");
	_buf.appendUint(clientServiceFlag);
	_buf.append(',');
	_buf.append("chips=");
	_buf.appendInt(chips);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("useAutoConvertBuyin=");
	_buf.appendUint(useAutoConvertBuyin);
	_buf.append(',');
	_buf.append("clientCurrencyContextShort=");
	clientCurrencyContextShort.toTraceString(_buf);
	_buf.append(',');
	_buf.append("rebuyOrAddonData=");
	rebuyOrAddonData.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::ClientMsg_TxtEx_NSF::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(msgId);
	_msg.composeINT32(minLimit);
	_msg.composeBOOL(enoughMoneyInOtherCurrencies);
	_msg.composeBYTE(clientServiceFlag);
	_msg.composeINT32(chips);
	_msg.composeString(currency);
	_msg.composeBOOL(useAutoConvertBuyin);
	_msg.composeMsgBody(clientCurrencyContextShort);
	_msg.composeMsgBody(rebuyOrAddonData);
}

void TableClientThin::player::ClientMsg_TxtEx_NSF::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(msgId);
	_parser.parseINT32(minLimit);
	_parser.parseBOOL(enoughMoneyInOtherCurrencies);
	_parser.parseBYTE(clientServiceFlag);
	_parser.parseINT32(chips);
	_parser.parseStringP(currency);
	_parser.parseBOOL(useAutoConvertBuyin);
	_parser.parseMsgBody(clientCurrencyContextShort);
	_parser.parseMsgBody(rebuyOrAddonData);
}

/*static*/ void TableClientThin::player::ClientMsg_TxtEx_NSF::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT16 msgId; _parser.parseUINT16(msgId);
	AtfValidator::validateInt(_descr, "msgId", msgId, _checker, __FILE__, __LINE__);
	INT32 minLimit; _parser.parseINT32(minLimit);
	AtfValidator::validateInt(_descr, "minLimit", minLimit, _checker, __FILE__, __LINE__);
	bool enoughMoneyInOtherCurrencies; _parser.parseBOOL(enoughMoneyInOtherCurrencies);
	AtfValidator::validateInt(_descr, "enoughMoneyInOtherCurrencies", enoughMoneyInOtherCurrencies, _checker, __FILE__, __LINE__);
	BYTE clientServiceFlag; _parser.parseBYTE(clientServiceFlag);
	AtfValidator::validateInt(_descr, "clientServiceFlag", clientServiceFlag, _checker, __FILE__, __LINE__);
	INT32 chips; _parser.parseINT32(chips);
	AtfValidator::validateInt(_descr, "chips", chips, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "currency"); size_t szCurrency = strlen(_dummy);
	AtfValidator::validateInt(_descr, "currency", szCurrency, _checker, __FILE__, __LINE__);
	bool useAutoConvertBuyin; _parser.parseBOOL(useAutoConvertBuyin);
	AtfValidator::validateInt(_descr, "useAutoConvertBuyin", useAutoConvertBuyin, _checker, __FILE__, __LINE__);
	size_t szClientCurrencyContextShort; _parser.skipMsgBody(szClientCurrencyContextShort);  /*clientCurrencyContextShort*/
	AtfValidator::validateInt(_descr, "clientCurrencyContextShort", szClientCurrencyContextShort, _checker, __FILE__, __LINE__);
	size_t szRebuyOrAddonData; _parser.skipMsgBody(szRebuyOrAddonData);  /*rebuyOrAddonData*/
	AtfValidator::validateInt(_descr, "rebuyOrAddonData", szRebuyOrAddonData, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_TABLE_LOGIN
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_LOGIN::Protocol_MSG_TABLE_LOGIN()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_LOGIN::Protocol_MSG_TABLE_LOGIN(Protocol_MSG_TABLE_LOGIN&& _o)
	: user(std::move(_o.user))
	, clientSiteId(std::move(_o.clientSiteId))
	, notShowWhenAllIn(std::move(_o.notShowWhenAllIn))
	, sitOutNextHand(std::move(_o.sitOutNextHand))
	, useAllInitStacks(std::move(_o.useAllInitStacks))
{
}

TableClientThin::player::Protocol_MSG_TABLE_LOGIN& TableClientThin::player::Protocol_MSG_TABLE_LOGIN::operator=(Protocol_MSG_TABLE_LOGIN&& _o)
{
	if(this != &_o)
	{
		user = std::move(_o.user);
		clientSiteId = std::move(_o.clientSiteId);
		notShowWhenAllIn = std::move(_o.notShowWhenAllIn);
		sitOutNextHand = std::move(_o.sitOutNextHand);
		useAllInitStacks = std::move(_o.useAllInitStacks);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_LOGIN::clear()
{
	user.clear();
	clientSiteId = 0;
	notShowWhenAllIn = false;
	sitOutNextHand = false;
	useAllInitStacks = false;
}

bool TableClientThin::player::Protocol_MSG_TABLE_LOGIN::equals(const Protocol_MSG_TABLE_LOGIN& _o) const
{
	return user.equals(_o.user) &&
		clientSiteId == _o.clientSiteId &&
		notShowWhenAllIn == _o.notShowWhenAllIn &&
		sitOutNextHand == _o.sitOutNextHand &&
		useAllInitStacks == _o.useAllInitStacks;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_LOGIN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_LOGIN).append(")");
	_buf.append(',');
	_buf.append("u=");
	_buf.append(user);
	_buf.append(',');
	_buf.append("site=");
	_buf.appendUint(clientSiteId);
	_buf.append(',');
	_buf.append("nshown=");
	_buf.appendUint(notShowWhenAllIn);
	_buf.append(',');
	_buf.append("sitout=");
	_buf.appendUint(sitOutNextHand);
	_buf.append(',');
	_buf.append("allstacks=");
	_buf.appendUint(useAllInitStacks);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_LOGIN::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(user);
	_msg.composeUINT32(clientSiteId);
	_msg.composeBOOL(notShowWhenAllIn);
	_msg.composeBOOL(sitOutNextHand);
	_msg.composeBOOL(useAllInitStacks);
}

void TableClientThin::player::Protocol_MSG_TABLE_LOGIN::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(user);
	_parser.parseUINT32(clientSiteId);
	_parser.parseBOOL(notShowWhenAllIn);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(sitOutNextHand);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(useAllInitStacks);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_LOGIN::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_LOGIN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "user"); size_t szUser = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "user", szUser, 20, _checker, __FILE__, __LINE__);
	UINT32 clientSiteId; _parser.parseUINT32(clientSiteId);
	AtfValidator::validateIntMax(_descr, "clientSiteId", clientSiteId, PokerStars_Last, _checker, __FILE__, __LINE__);
	bool notShowWhenAllIn; _parser.parseBOOL(notShowWhenAllIn);
	AtfValidator::validateInt(_descr, "notShowWhenAllIn", notShowWhenAllIn, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool sitOutNextHand; _parser.parseBOOL(sitOutNextHand);
	AtfValidator::validateInt(_descr, "sitOutNextHand", sitOutNextHand, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool useAllInitStacks; _parser.parseBOOL(useAllInitStacks);
	AtfValidator::validateInt(_descr, "useAllInitStacks", useAllInitStacks, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_LOGIN_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_LOGIN_REPLY::Protocol_MSG_TABLE_LOGIN_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_LOGIN_REPLY::Protocol_MSG_TABLE_LOGIN_REPLY(Protocol_MSG_TABLE_LOGIN_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, seat(std::move(_o.seat))
	, sittingStatus(std::move(_o.sittingStatus))
	, clientIP(std::move(_o.clientIP))
	, waitingStatus(std::move(_o.waitingStatus))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
	, autoRebuyOptions(std::move(_o.autoRebuyOptions))
	, autoRebuyBigBets(std::move(_o.autoRebuyBigBets))
	, autoRebuyFallUnderBigBets(std::move(_o.autoRebuyFallUnderBigBets))
	, autoRebuyFallUnderPercents(std::move(_o.autoRebuyFallUnderPercents))
	, playerRITFavored(std::move(_o.playerRITFavored))
	, campingPreventionEnabled(std::move(_o.campingPreventionEnabled))
	, isTableDealingHands(std::move(_o.isTableDealingHands))
	, campingCountingDownSec(std::move(_o.campingCountingDownSec))
	, allinCashoutNotFavored(std::move(_o.allinCashoutNotFavored))
	, progressivePlusEntryId(std::move(_o.progressivePlusEntryId))
{
}

TableClientThin::player::Protocol_MSG_TABLE_LOGIN_REPLY& TableClientThin::player::Protocol_MSG_TABLE_LOGIN_REPLY::operator=(Protocol_MSG_TABLE_LOGIN_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		seat = std::move(_o.seat);
		sittingStatus = std::move(_o.sittingStatus);
		clientIP = std::move(_o.clientIP);
		waitingStatus = std::move(_o.waitingStatus);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
		autoRebuyOptions = std::move(_o.autoRebuyOptions);
		autoRebuyBigBets = std::move(_o.autoRebuyBigBets);
		autoRebuyFallUnderBigBets = std::move(_o.autoRebuyFallUnderBigBets);
		autoRebuyFallUnderPercents = std::move(_o.autoRebuyFallUnderPercents);
		playerRITFavored = std::move(_o.playerRITFavored);
		campingPreventionEnabled = std::move(_o.campingPreventionEnabled);
		isTableDealingHands = std::move(_o.isTableDealingHands);
		campingCountingDownSec = std::move(_o.campingCountingDownSec);
		allinCashoutNotFavored = std::move(_o.allinCashoutNotFavored);
		progressivePlusEntryId = std::move(_o.progressivePlusEntryId);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_LOGIN_REPLY::clear()
{
	errcode = 0;
	errstr.clear();
	seat = -1;
	sittingStatus = SittingOut;
	clientIP.clear();
	waitingStatus = 0;
	clientMsg_txtEx.clear();
	autoRebuyOptions = _autoRebuyDisabled;
	autoRebuyBigBets = 0;
	autoRebuyFallUnderBigBets = 0;
	autoRebuyFallUnderPercents = 0;
	playerRITFavored = false;
	campingPreventionEnabled = false;
	isTableDealingHands = false;
	campingCountingDownSec = 0;
	allinCashoutNotFavored = false;
	progressivePlusEntryId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_LOGIN_REPLY::equals(const Protocol_MSG_TABLE_LOGIN_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		seat == _o.seat &&
		sittingStatus == _o.sittingStatus &&
		waitingStatus == _o.waitingStatus &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx) &&
		autoRebuyOptions == _o.autoRebuyOptions &&
		autoRebuyBigBets == _o.autoRebuyBigBets &&
		autoRebuyFallUnderBigBets == _o.autoRebuyFallUnderBigBets &&
		autoRebuyFallUnderPercents == _o.autoRebuyFallUnderPercents &&
		playerRITFavored == _o.playerRITFavored &&
		campingPreventionEnabled == _o.campingPreventionEnabled &&
		isTableDealingHands == _o.isTableDealingHands &&
		campingCountingDownSec == _o.campingCountingDownSec &&
		allinCashoutNotFavored == _o.allinCashoutNotFavored &&
		progressivePlusEntryId == _o.progressivePlusEntryId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_LOGIN_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_LOGIN_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errstr=");
	_buf.append(errstr);
	_buf.append(',');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("ss=");
	_buf.appendUint(sittingStatus);
	_buf.append(',');
	_buf.append("ip=");
	_buf.append(clientIP);
	_buf.append(',');
	_buf.append("ws=");
	_buf.appendUint(waitingStatus);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	_buf.append(',');
	_buf.append("ar=");
	_buf.appendInt(autoRebuyOptions);
	_buf.append(',');
	_buf.append("arBB=");
	_buf.appendUint(autoRebuyBigBets);
	_buf.append(',');
	_buf.append("arFBB=");
	_buf.appendUint(autoRebuyFallUnderBigBets);
	_buf.append(',');
	_buf.append("arFPct=");
	_buf.appendUint(autoRebuyFallUnderPercents);
	_buf.append(',');
	_buf.append("rit=");
	_buf.appendUint(playerRITFavored);
	_buf.append(',');
	_buf.append("camping=");
	_buf.appendUint(campingPreventionEnabled);
	_buf.append(',');
	_buf.append("dealing=");
	_buf.appendUint(isTableDealingHands);
	_buf.append(',');
	_buf.append("campSecs=");
	_buf.appendUint(campingCountingDownSec);
	_buf.append(',');
	_buf.append("nco=");
	_buf.appendUint(allinCashoutNotFavored);
	_buf.append(',');
	_buf.append("pppEId=");
	_buf.appendUint64(progressivePlusEntryId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_LOGIN_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(errstr);
	_msg.composeINT8(seat);
	_msg.composeBYTE(sittingStatus);
	_msg.composeString(clientIP);
	_msg.composeUINT32(waitingStatus);
	_msg.composeMsgBody(clientMsg_txtEx);
	_msg.composeINT8(autoRebuyOptions);
	_msg.composeUINT16(autoRebuyBigBets);
	_msg.composeUINT16(autoRebuyFallUnderBigBets);
	_msg.composeUINT16(autoRebuyFallUnderPercents);
	_msg.composeBOOL(playerRITFavored);
	_msg.composeBOOL(campingPreventionEnabled);
	_msg.composeBOOL(isTableDealingHands);
	_msg.composeUINT16(campingCountingDownSec);
	_msg.composeBOOL(allinCashoutNotFavored);
	_msg.composeUINT64(progressivePlusEntryId);
}

void TableClientThin::player::Protocol_MSG_TABLE_LOGIN_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(errstr);
	_parser.parseINT8(seat);
	_parser.parseBYTE(sittingStatus);
	_parser.parseStringP(clientIP);
	_parser.parseUINT32(waitingStatus);
	_parser.parseMsgBody(clientMsg_txtEx);
	_parser.parseINT8(autoRebuyOptions);
	_parser.parseUINT16(autoRebuyBigBets);
	_parser.parseUINT16(autoRebuyFallUnderBigBets);
	_parser.parseUINT16(autoRebuyFallUnderPercents);
	_parser.parseBOOL(playerRITFavored);
	_parser.parseBOOL(campingPreventionEnabled);
	_parser.parseBOOL(isTableDealingHands);
	_parser.parseUINT16(campingCountingDownSec);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(allinCashoutNotFavored);
	if(_parser.parseEnded()) return;
	_parser.parseUINT64(progressivePlusEntryId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_LOGIN_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_LOGIN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	BYTE sittingStatus; _parser.parseBYTE(sittingStatus);
	AtfValidator::validateInt(_descr, "sittingStatus", sittingStatus, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "clientIP"); size_t szClientIP = strlen(_dummy);
	AtfValidator::validateInt(_descr, "clientIP", szClientIP, _checker, __FILE__, __LINE__);
	UINT32 waitingStatus; _parser.parseUINT32(waitingStatus);
	AtfValidator::validateInt(_descr, "waitingStatus", waitingStatus, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	INT8 autoRebuyOptions; _parser.parseINT8(autoRebuyOptions);
	AtfValidator::validateInt(_descr, "autoRebuyOptions", autoRebuyOptions, _checker, __FILE__, __LINE__);
	UINT16 autoRebuyBigBets; _parser.parseUINT16(autoRebuyBigBets);
	AtfValidator::validateInt(_descr, "autoRebuyBigBets", autoRebuyBigBets, _checker, __FILE__, __LINE__);
	UINT16 autoRebuyFallUnderBigBets; _parser.parseUINT16(autoRebuyFallUnderBigBets);
	AtfValidator::validateInt(_descr, "autoRebuyFallUnderBigBets", autoRebuyFallUnderBigBets, _checker, __FILE__, __LINE__);
	UINT16 autoRebuyFallUnderPercents; _parser.parseUINT16(autoRebuyFallUnderPercents);
	AtfValidator::validateInt(_descr, "autoRebuyFallUnderPercents", autoRebuyFallUnderPercents, _checker, __FILE__, __LINE__);
	bool playerRITFavored; _parser.parseBOOL(playerRITFavored);
	AtfValidator::validateInt(_descr, "playerRITFavored", playerRITFavored, _checker, __FILE__, __LINE__);
	bool campingPreventionEnabled; _parser.parseBOOL(campingPreventionEnabled);
	AtfValidator::validateInt(_descr, "campingPreventionEnabled", campingPreventionEnabled, _checker, __FILE__, __LINE__);
	bool isTableDealingHands; _parser.parseBOOL(isTableDealingHands);
	AtfValidator::validateInt(_descr, "isTableDealingHands", isTableDealingHands, _checker, __FILE__, __LINE__);
	UINT16 campingCountingDownSec; _parser.parseUINT16(campingCountingDownSec);
	AtfValidator::validateInt(_descr, "campingCountingDownSec", campingCountingDownSec, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool allinCashoutNotFavored; _parser.parseBOOL(allinCashoutNotFavored);
	AtfValidator::validateInt(_descr, "allinCashoutNotFavored", allinCashoutNotFavored, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT64 progressivePlusEntryId; _parser.parseUINT64(progressivePlusEntryId);
	AtfValidator::validateUint(_descr, "progressivePlusEntryId", progressivePlusEntryId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_LOGOUT
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_LOGOUT::Protocol_MSG_TABLE_LOGOUT()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_LOGOUT::clear()
{
}

bool TableClientThin::player::Protocol_MSG_TABLE_LOGOUT::equals(const Protocol_MSG_TABLE_LOGOUT& _o) const
{
	return true;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_LOGOUT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_LOGOUT).append(")");
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_LOGOUT::composeMsg(CommMsgBody& _msg) const
{
}

void TableClientThin::player::Protocol_MSG_TABLE_LOGOUT::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_LOGOUT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_LOGOUT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_LOGOUT_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_LOGOUT_REPLY::Protocol_MSG_TABLE_LOGOUT_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_LOGOUT_REPLY::Protocol_MSG_TABLE_LOGOUT_REPLY(Protocol_MSG_TABLE_LOGOUT_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, totalBetInfo(std::move(_o.totalBetInfo))
{
}

TableClientThin::player::Protocol_MSG_TABLE_LOGOUT_REPLY& TableClientThin::player::Protocol_MSG_TABLE_LOGOUT_REPLY::operator=(Protocol_MSG_TABLE_LOGOUT_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		totalBetInfo = std::move(_o.totalBetInfo);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_LOGOUT_REPLY::clear()
{
	errcode = 0;
	errstr.clear();
	totalBetInfo.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_LOGOUT_REPLY::equals(const Protocol_MSG_TABLE_LOGOUT_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		totalBetInfo.equals(_o.totalBetInfo);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_LOGOUT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_LOGOUT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errstr=");
	_buf.append(errstr);
	_buf.append(',');
	_buf.append("totalBetInfo=");
	totalBetInfo.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_LOGOUT_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(errstr);
	totalBetInfo.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_LOGOUT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(errstr);
	totalBetInfo.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_LOGOUT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_LOGOUT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	PString _descbuf;
	TotalBetInfo::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("totalBetInfo"), _fieldsWithUnparsedContent);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE(Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE&& _o)
	: eligible(std::move(_o.eligible))
	, numPlayedHands(std::move(_o.numPlayedHands))
	, poolBlockMinHands(std::move(_o.poolBlockMinHands))
	, poolBlockTimePenalty(std::move(_o.poolBlockTimePenalty))
{
}

TableClientThin::player::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE& TableClientThin::player::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE::operator=(Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE&& _o)
{
	if(this != &_o)
	{
		eligible = std::move(_o.eligible);
		numPlayedHands = std::move(_o.numPlayedHands);
		poolBlockMinHands = std::move(_o.poolBlockMinHands);
		poolBlockTimePenalty = std::move(_o.poolBlockTimePenalty);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE::clear()
{
	eligible = false;
	numPlayedHands = 0;
	poolBlockMinHands = 0;
	poolBlockTimePenalty.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE::equals(const Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE& _o) const
{
	return eligible == _o.eligible &&
		numPlayedHands == _o.numPlayedHands &&
		poolBlockMinHands == _o.poolBlockMinHands &&
		poolBlockTimePenalty.equals(_o.poolBlockTimePenalty);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE).append(")");
	_buf.append(',');
	_buf.append("eligible=");
	_buf.appendUint(eligible);
	_buf.append(',');
	_buf.append("numPlayedHands=");
	_buf.appendInt(numPlayedHands);
	_buf.append(',');
	_buf.append("poolBlockMinHands=");
	_buf.appendInt(poolBlockMinHands);
	_buf.append(',');
	_buf.append("poolBlockTimePenalty=");
	poolBlockTimePenalty.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(eligible);
	_msg.composeINT32(numPlayedHands);
	_msg.composeINT32(poolBlockMinHands);
	poolBlockTimePenalty.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(eligible);
	_parser.parseINT32(numPlayedHands);
	_parser.parseINT32(poolBlockMinHands);
	poolBlockTimePenalty.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	bool eligible; _parser.parseBOOL(eligible);
	AtfValidator::validateInt(_descr, "eligible", eligible, _checker, __FILE__, __LINE__);
	INT32 numPlayedHands; _parser.parseINT32(numPlayedHands);
	AtfValidator::validateInt(_descr, "numPlayedHands", numPlayedHands, _checker, __FILE__, __LINE__);
	INT32 poolBlockMinHands; _parser.parseINT32(poolBlockMinHands);
	AtfValidator::validateInt(_descr, "poolBlockMinHands", poolBlockMinHands, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szPoolBlockTimePenalty = ThinAtf::LAtfVector< INT32, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("poolBlockTimePenalty"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "poolBlockTimePenalty", szPoolBlockTimePenalty, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SIT1
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SIT1::Protocol_MSG_TABLE_SIT1()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT1::clear()
{
	seat = -1;
	verifyKey = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SIT1::equals(const Protocol_MSG_TABLE_SIT1& _o) const
{
	return seat == _o.seat &&
		verifyKey == _o.verifyKey;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SIT1::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SIT1).append(")");
	_buf.append(',');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("verifyKey=");
	_buf.appendUint(verifyKey);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT1::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(seat);
	_msg.composeUINT32(verifyKey);
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT1::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(seat);
	_parser.parseUINT32(verifyKey);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SIT1::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SIT1";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	UINT32 verifyKey; _parser.parseUINT32(verifyKey);
	AtfValidator::validateInt(_descr, "verifyKey", verifyKey, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SIT1_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SIT1_REPLY::Protocol_MSG_TABLE_SIT1_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_SIT1_REPLY::Protocol_MSG_TABLE_SIT1_REPLY(Protocol_MSG_TABLE_SIT1_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errUser(std::move(_o.errUser))
	, chips(std::move(_o.chips))
	, minLimit(std::move(_o.minLimit))
	, maxLimit(std::move(_o.maxLimit))
	, chipQuantum(std::move(_o.chipQuantum))
	, playAddedMask(std::move(_o.playAddedMask))
	, playAddedAmount(std::move(_o.playAddedAmount))
	, seat(std::move(_o.seat))
	, clientServiceFlag(std::move(_o.clientServiceFlag))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
	, currencyContextCli(std::move(_o.currencyContextCli))
	, defaultBuyIn(std::move(_o.defaultBuyIn))
	, ratHoleInSec(std::move(_o.ratHoleInSec))
	, pmChips(std::move(_o.pmChips))
	, userRollId(std::move(_o.userRollId))
{
}

TableClientThin::player::Protocol_MSG_TABLE_SIT1_REPLY& TableClientThin::player::Protocol_MSG_TABLE_SIT1_REPLY::operator=(Protocol_MSG_TABLE_SIT1_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errUser = std::move(_o.errUser);
		chips = std::move(_o.chips);
		minLimit = std::move(_o.minLimit);
		maxLimit = std::move(_o.maxLimit);
		chipQuantum = std::move(_o.chipQuantum);
		playAddedMask = std::move(_o.playAddedMask);
		playAddedAmount = std::move(_o.playAddedAmount);
		seat = std::move(_o.seat);
		clientServiceFlag = std::move(_o.clientServiceFlag);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
		currencyContextCli = std::move(_o.currencyContextCli);
		defaultBuyIn = std::move(_o.defaultBuyIn);
		ratHoleInSec = std::move(_o.ratHoleInSec);
		pmChips = std::move(_o.pmChips);
		userRollId = std::move(_o.userRollId);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_SIT1_REPLY::clear()
{
	errcode = 0;
	errUser.clear();
	chips = 0;
	minLimit = 0;
	maxLimit = 0;
	chipQuantum = 0;
	playAddedMask = 0;
	playAddedAmount = 0;
	seat = -1;
	clientServiceFlag = 0;
	clientMsg_txtEx.clear();
	currencyContextCli.clear();
	defaultBuyIn = 0;
	ratHoleInSec = 0;
	pmChips = 0;
	userRollId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SIT1_REPLY::equals(const Protocol_MSG_TABLE_SIT1_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errUser.equals(_o.errUser) &&
		chips == _o.chips &&
		minLimit == _o.minLimit &&
		maxLimit == _o.maxLimit &&
		chipQuantum == _o.chipQuantum &&
		playAddedMask == _o.playAddedMask &&
		playAddedAmount == _o.playAddedAmount &&
		seat == _o.seat &&
		clientServiceFlag == _o.clientServiceFlag &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx) &&
		currencyContextCli.equals(_o.currencyContextCli) &&
		defaultBuyIn == _o.defaultBuyIn &&
		ratHoleInSec == _o.ratHoleInSec &&
		pmChips == _o.pmChips &&
		userRollId == _o.userRollId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SIT1_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SIT1_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errUser=");
	_buf.append(errUser);
	_buf.append(',');
	_buf.append("chips=");
	_buf.appendUint(chips);
	_buf.append(',');
	_buf.append("mnLim=");
	_buf.appendUint(minLimit);
	_buf.append(',');
	_buf.append("mxLim=");
	_buf.appendUint(maxLimit);
	_buf.append(',');
	_buf.append("cq=");
	_buf.appendUint(chipQuantum);
	_buf.append(',');
	_buf.append("playAddedMask=");
	_buf.appendUint(playAddedMask);
	_buf.append(',');
	_buf.append("playAddedAmount=");
	_buf.appendUint(playAddedAmount);
	_buf.append(',');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("csf=");
	_buf.appendUint(clientServiceFlag);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	_buf.append(',');
	_buf.append("currency=");
	currencyContextCli.toTraceString(_buf);
	_buf.append(',');
	_buf.append("defaultBi=");
	_buf.appendUint(defaultBuyIn);
	_buf.append(',');
	_buf.append("rh=");
	_buf.appendUint(ratHoleInSec);
	_buf.append(',');
	_buf.append("pmChips=");
	_buf.appendUint64(pmChips);
	_buf.append(',');
	_buf.append("userRollId=");
	_buf.appendUint(userRollId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT1_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(errUser);
	_msg.composeUINT32(chips);
	_msg.composeUINT32(minLimit);
	_msg.composeUINT32(maxLimit);
	_msg.composeUINT32(chipQuantum);
	_msg.composeBYTE(playAddedMask);
	_msg.composeUINT32(playAddedAmount);
	_msg.composeINT8(seat);
	_msg.composeBYTE(clientServiceFlag);
	_msg.composeMsgBody(clientMsg_txtEx);
	_msg.composeMsgBody(currencyContextCli);
	_msg.composeUINT32(defaultBuyIn);
	_msg.composeUINT32(ratHoleInSec);
	_msg.composeUINT64(pmChips);
	_msg.composeUINT32(userRollId);
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT1_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(errUser);
	_parser.parseUINT32(chips);
	_parser.parseUINT32(minLimit);
	_parser.parseUINT32(maxLimit);
	_parser.parseUINT32(chipQuantum);
	_parser.parseBYTE(playAddedMask);
	_parser.parseUINT32(playAddedAmount);
	_parser.parseINT8(seat);
	_parser.parseBYTE(clientServiceFlag);
	_parser.parseMsgBody(clientMsg_txtEx);
	_parser.parseMsgBody(currencyContextCli);
	_parser.parseUINT32(defaultBuyIn);
	_parser.parseUINT32(ratHoleInSec);
	_parser.parseUINT64(pmChips);
	_parser.parseUINT32(userRollId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SIT1_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SIT1_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errUser"); size_t szErrUser = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errUser", szErrUser, _checker, __FILE__, __LINE__);
	UINT32 chips; _parser.parseUINT32(chips);
	AtfValidator::validateInt(_descr, "chips", chips, _checker, __FILE__, __LINE__);
	UINT32 minLimit; _parser.parseUINT32(minLimit);
	AtfValidator::validateInt(_descr, "minLimit", minLimit, _checker, __FILE__, __LINE__);
	UINT32 maxLimit; _parser.parseUINT32(maxLimit);
	AtfValidator::validateInt(_descr, "maxLimit", maxLimit, _checker, __FILE__, __LINE__);
	UINT32 chipQuantum; _parser.parseUINT32(chipQuantum);
	AtfValidator::validateInt(_descr, "chipQuantum", chipQuantum, _checker, __FILE__, __LINE__);
	BYTE playAddedMask; _parser.parseBYTE(playAddedMask);
	AtfValidator::validateInt(_descr, "playAddedMask", playAddedMask, _checker, __FILE__, __LINE__);
	UINT32 playAddedAmount; _parser.parseUINT32(playAddedAmount);
	AtfValidator::validateInt(_descr, "playAddedAmount", playAddedAmount, _checker, __FILE__, __LINE__);
	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	BYTE clientServiceFlag; _parser.parseBYTE(clientServiceFlag);
	AtfValidator::validateInt(_descr, "clientServiceFlag", clientServiceFlag, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	size_t szCurrencyContextCli; _parser.skipMsgBody(szCurrencyContextCli);  /*currencyContextCli*/
	AtfValidator::validateInt(_descr, "currencyContextCli", szCurrencyContextCli, _checker, __FILE__, __LINE__);
	UINT32 defaultBuyIn; _parser.parseUINT32(defaultBuyIn);
	AtfValidator::validateInt(_descr, "defaultBuyIn", defaultBuyIn, _checker, __FILE__, __LINE__);
	UINT32 ratHoleInSec; _parser.parseUINT32(ratHoleInSec);
	AtfValidator::validateInt(_descr, "ratHoleInSec", ratHoleInSec, _checker, __FILE__, __LINE__);
	UINT64 pmChips; _parser.parseUINT64(pmChips);
	AtfValidator::validateUint(_descr, "pmChips", pmChips, _checker, __FILE__, __LINE__);
	UINT32 userRollId; _parser.parseUINT32(userRollId);
	AtfValidator::validateInt(_descr, "userRollId", userRollId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SIT2
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SIT2::Protocol_MSG_TABLE_SIT2()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_SIT2::Protocol_MSG_TABLE_SIT2(Protocol_MSG_TABLE_SIT2&& _o)
	: chips(std::move(_o.chips))
	, pwd(std::move(_o.pwd))
	, autoRebuyOpt(std::move(_o.autoRebuyOpt))
	, autoRebuyBigBets(std::move(_o.autoRebuyBigBets))
	, autoRebuyFallUnderBigBets(std::move(_o.autoRebuyFallUnderBigBets))
	, autoRebuyFallUnderPercents(std::move(_o.autoRebuyFallUnderPercents))
	, notShowWhenAllIn(std::move(_o.notShowWhenAllIn))
	, realMoneyChips(std::move(_o.realMoneyChips))
	, runItTwice(std::move(_o.runItTwice))
	, allinCashoutNotFavored(std::move(_o.allinCashoutNotFavored))
{
}

TableClientThin::player::Protocol_MSG_TABLE_SIT2& TableClientThin::player::Protocol_MSG_TABLE_SIT2::operator=(Protocol_MSG_TABLE_SIT2&& _o)
{
	if(this != &_o)
	{
		chips = std::move(_o.chips);
		pwd = std::move(_o.pwd);
		autoRebuyOpt = std::move(_o.autoRebuyOpt);
		autoRebuyBigBets = std::move(_o.autoRebuyBigBets);
		autoRebuyFallUnderBigBets = std::move(_o.autoRebuyFallUnderBigBets);
		autoRebuyFallUnderPercents = std::move(_o.autoRebuyFallUnderPercents);
		notShowWhenAllIn = std::move(_o.notShowWhenAllIn);
		realMoneyChips = std::move(_o.realMoneyChips);
		runItTwice = std::move(_o.runItTwice);
		allinCashoutNotFavored = std::move(_o.allinCashoutNotFavored);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_SIT2::clear()
{
	chips = 0;
	pwd.clear();
	autoRebuyOpt = 0;
	autoRebuyBigBets = 0;
	autoRebuyFallUnderBigBets = 0;
	autoRebuyFallUnderPercents = 0;
	notShowWhenAllIn = false;
	realMoneyChips = 0;
	runItTwice = false;
	allinCashoutNotFavored = false;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SIT2::equals(const Protocol_MSG_TABLE_SIT2& _o) const
{
	return chips == _o.chips &&
		pwd.equals(_o.pwd) &&
		autoRebuyOpt == _o.autoRebuyOpt &&
		autoRebuyBigBets == _o.autoRebuyBigBets &&
		autoRebuyFallUnderBigBets == _o.autoRebuyFallUnderBigBets &&
		autoRebuyFallUnderPercents == _o.autoRebuyFallUnderPercents &&
		notShowWhenAllIn == _o.notShowWhenAllIn &&
		realMoneyChips == _o.realMoneyChips &&
		runItTwice == _o.runItTwice &&
		allinCashoutNotFavored == _o.allinCashoutNotFavored;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SIT2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SIT2).append(")");
	_buf.append(',');
	_buf.append("chips=");
	_buf.appendInt(chips);
	_buf.append(',');
	_buf.append("pwd=");
	_buf.append(pwd);
	_buf.append(',');
	_buf.append("ar=");
	_buf.appendInt(autoRebuyOpt);
	_buf.append(',');
	_buf.append("arBB=");
	_buf.appendUint(autoRebuyBigBets);
	_buf.append(',');
	_buf.append("arFBB=");
	_buf.appendUint(autoRebuyFallUnderBigBets);
	_buf.append(',');
	_buf.append("arFPct=");
	_buf.appendUint(autoRebuyFallUnderPercents);
	_buf.append(',');
	_buf.append("nshown=");
	_buf.appendUint(notShowWhenAllIn);
	_buf.append(',');
	_buf.append("rmChips=");
	_buf.appendUint(realMoneyChips);
	_buf.append(',');
	_buf.append("rit=");
	_buf.appendUint(runItTwice);
	_buf.append(',');
	_buf.append("nco=");
	_buf.appendUint(allinCashoutNotFavored);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT2::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(chips);
	_msg.composeString(pwd);
	_msg.composeINT8(autoRebuyOpt);
	_msg.composeUINT16(autoRebuyBigBets);
	_msg.composeUINT16(autoRebuyFallUnderBigBets);
	_msg.composeUINT16(autoRebuyFallUnderPercents);
	_msg.composeBOOL(notShowWhenAllIn);
	_msg.composeUINT32(realMoneyChips);
	_msg.composeBOOL(runItTwice);
	_msg.composeBOOL(allinCashoutNotFavored);
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT2::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(chips);
	_parser.parseStringP(pwd);
	_parser.parseINT8(autoRebuyOpt);
	_parser.parseUINT16(autoRebuyBigBets);
	_parser.parseUINT16(autoRebuyFallUnderBigBets);
	_parser.parseUINT16(autoRebuyFallUnderPercents);
	_parser.parseBOOL(notShowWhenAllIn);
	_parser.parseUINT32(realMoneyChips);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(runItTwice);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(allinCashoutNotFavored);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SIT2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SIT2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT32 chips; _parser.parseINT32(chips);
	AtfValidator::validateIntMin(_descr, "chips", chips, 0, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "pwd"); size_t szPwd = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "pwd", szPwd, 100, _checker, __FILE__, __LINE__);
	INT8 autoRebuyOpt; _parser.parseINT8(autoRebuyOpt);
	AtfValidator::validateIntRange(_descr, "autoRebuyOpt", autoRebuyOpt, 0, 100, _checker, __FILE__, __LINE__);
	UINT16 autoRebuyBigBets; _parser.parseUINT16(autoRebuyBigBets);
	AtfValidator::validateIntMax(_descr, "autoRebuyBigBets", autoRebuyBigBets, 1000, _checker, __FILE__, __LINE__);
	UINT16 autoRebuyFallUnderBigBets; _parser.parseUINT16(autoRebuyFallUnderBigBets);
	AtfValidator::validateIntMax(_descr, "autoRebuyFallUnderBigBets", autoRebuyFallUnderBigBets, 1000, _checker, __FILE__, __LINE__);
	UINT16 autoRebuyFallUnderPercents; _parser.parseUINT16(autoRebuyFallUnderPercents);
	AtfValidator::validateIntMax(_descr, "autoRebuyFallUnderPercents", autoRebuyFallUnderPercents, 100, _checker, __FILE__, __LINE__);
	bool notShowWhenAllIn; _parser.parseBOOL(notShowWhenAllIn);
	AtfValidator::validateInt(_descr, "notShowWhenAllIn", notShowWhenAllIn, _checker, __FILE__, __LINE__);
	UINT32 realMoneyChips; _parser.parseUINT32(realMoneyChips);
	AtfValidator::validateIntMax(_descr, "realMoneyChips", realMoneyChips, 2000000000, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool runItTwice; _parser.parseBOOL(runItTwice);
	AtfValidator::validateInt(_descr, "runItTwice", runItTwice, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool allinCashoutNotFavored; _parser.parseBOOL(allinCashoutNotFavored);
	AtfValidator::validateInt(_descr, "allinCashoutNotFavored", allinCashoutNotFavored, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SIT2_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SIT2_REPLY::Protocol_MSG_TABLE_SIT2_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_SIT2_REPLY::Protocol_MSG_TABLE_SIT2_REPLY(Protocol_MSG_TABLE_SIT2_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, sittingStatus(std::move(_o.sittingStatus))
	, waitingStatus(std::move(_o.waitingStatus))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
	, numOfSeats(std::move(_o.numOfSeats))
	, chipsAfter(std::move(_o.chipsAfter))
{
}

TableClientThin::player::Protocol_MSG_TABLE_SIT2_REPLY& TableClientThin::player::Protocol_MSG_TABLE_SIT2_REPLY::operator=(Protocol_MSG_TABLE_SIT2_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		sittingStatus = std::move(_o.sittingStatus);
		waitingStatus = std::move(_o.waitingStatus);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
		numOfSeats = std::move(_o.numOfSeats);
		chipsAfter = std::move(_o.chipsAfter);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_SIT2_REPLY::clear()
{
	errcode = 0;
	errstr.clear();
	sittingStatus = 0;
	waitingStatus = 0;
	clientMsg_txtEx.clear();
	numOfSeats = 0;
	chipsAfter = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SIT2_REPLY::equals(const Protocol_MSG_TABLE_SIT2_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		sittingStatus == _o.sittingStatus &&
		waitingStatus == _o.waitingStatus &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx) &&
		numOfSeats == _o.numOfSeats &&
		chipsAfter == _o.chipsAfter;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SIT2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SIT2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errstr=");
	_buf.append(errstr);
	_buf.append(',');
	_buf.append("ss=");
	_buf.appendUint(sittingStatus);
	_buf.append(',');
	_buf.append("ws=");
	_buf.appendUint(waitingStatus);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	_buf.append(',');
	_buf.append("sz=");
	_buf.appendUint(numOfSeats);
	_buf.append(',');
	_buf.append("chipsAfter=");
	_buf.appendInt(chipsAfter);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT2_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(errstr);
	_msg.composeBYTE(sittingStatus);
	_msg.composeUINT32(waitingStatus);
	_msg.composeMsgBody(clientMsg_txtEx);
	_msg.composeUINT32(numOfSeats);
	_msg.composeINT32(chipsAfter);
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(errstr);
	_parser.parseBYTE(sittingStatus);
	_parser.parseUINT32(waitingStatus);
	_parser.parseMsgBody(clientMsg_txtEx);
	_parser.parseUINT32(numOfSeats);
	_parser.parseINT32(chipsAfter);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SIT2_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SIT2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	BYTE sittingStatus; _parser.parseBYTE(sittingStatus);
	AtfValidator::validateInt(_descr, "sittingStatus", sittingStatus, _checker, __FILE__, __LINE__);
	UINT32 waitingStatus; _parser.parseUINT32(waitingStatus);
	AtfValidator::validateInt(_descr, "waitingStatus", waitingStatus, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	UINT32 numOfSeats; _parser.parseUINT32(numOfSeats);
	AtfValidator::validateInt(_descr, "numOfSeats", numOfSeats, _checker, __FILE__, __LINE__);
	INT32 chipsAfter; _parser.parseINT32(chipsAfter);
	AtfValidator::validateInt(_descr, "chipsAfter", chipsAfter, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_TIMEBANK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_TIMEBANK::Protocol_MSG_TABLE_TIMEBANK()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_TIMEBANK::clear()
{
	timeBank = 0;
	hasChipsPosted = false;
}

bool TableClientThin::player::Protocol_MSG_TABLE_TIMEBANK::equals(const Protocol_MSG_TABLE_TIMEBANK& _o) const
{
	return timeBank == _o.timeBank &&
		hasChipsPosted == _o.hasChipsPosted;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_TIMEBANK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_TIMEBANK).append(")");
	_buf.append(',');
	_buf.append("tb=");
	_buf.appendUint(timeBank);
	_buf.append(',');
	_buf.append("hasChipsPosted=");
	_buf.appendUint(hasChipsPosted);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_TIMEBANK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(timeBank);
	_msg.composeBOOL(hasChipsPosted);
}

void TableClientThin::player::Protocol_MSG_TABLE_TIMEBANK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(timeBank);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(hasChipsPosted);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_TIMEBANK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_TIMEBANK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 timeBank; _parser.parseUINT32(timeBank);
	AtfValidator::validateIntMax(_descr, "timeBank", timeBank, 1800, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool hasChipsPosted; _parser.parseBOOL(hasChipsPosted);
	AtfValidator::validateInt(_descr, "hasChipsPosted", hasChipsPosted, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_WARNING_BELL
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_WARNING_BELL::Protocol_MSG_TABLE_WARNING_BELL()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_WARNING_BELL::clear()
{
	delaySec = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_WARNING_BELL::equals(const Protocol_MSG_TABLE_WARNING_BELL& _o) const
{
	return delaySec == _o.delaySec;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_WARNING_BELL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_WARNING_BELL).append(")");
	_buf.append(',');
	_buf.append("delaySec=");
	_buf.appendInt(delaySec);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_WARNING_BELL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(delaySec);
}

void TableClientThin::player::Protocol_MSG_TABLE_WARNING_BELL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(delaySec);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_WARNING_BELL::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_WARNING_BELL";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 delaySec; _parser.parseINT32(delaySec);
	AtfValidator::validateInt(_descr, "delaySec", delaySec, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_REQUESTACTION
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION::Protocol_MSG_TABLE_REQUESTACTION()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION::Protocol_MSG_TABLE_REQUESTACTION(Protocol_MSG_TABLE_REQUESTACTION&& _o)
	: actionOpts(std::move(_o.actionOpts))
	, actionReqSeq(std::move(_o.actionReqSeq))
	, timeoutSec(std::move(_o.timeoutSec))
	, isNewGame(std::move(_o.isNewGame))
	, gameRound(std::move(_o.gameRound))
{
}

TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION& TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION::operator=(Protocol_MSG_TABLE_REQUESTACTION&& _o)
{
	if(this != &_o)
	{
		actionOpts = std::move(_o.actionOpts);
		actionReqSeq = std::move(_o.actionReqSeq);
		timeoutSec = std::move(_o.timeoutSec);
		isNewGame = std::move(_o.isNewGame);
		gameRound = std::move(_o.gameRound);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION::clear()
{
	actionOpts.clear();
	actionReqSeq = 0;
	timeoutSec = 0;
	isNewGame = false;
	gameRound = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION::equals(const Protocol_MSG_TABLE_REQUESTACTION& _o) const
{
	return actionOpts.equals(_o.actionOpts) &&
		actionReqSeq == _o.actionReqSeq &&
		timeoutSec == _o.timeoutSec &&
		isNewGame == _o.isNewGame &&
		gameRound == _o.gameRound;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_REQUESTACTION).append(")");
	_buf.append(',');
	_buf.append("aOpts=");
	actionOpts.toTraceString(_buf);
	_buf.append(',');
	_buf.append("seq=");
	_buf.appendUint(actionReqSeq);
	_buf.append(',');
	_buf.append("TO=");
	_buf.appendInt(timeoutSec);
	_buf.append(',');
	_buf.append("ng=");
	_buf.appendUint(isNewGame);
	_buf.append(',');
	_buf.append("gameRound=");
	_buf.appendInt(gameRound);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION::composeMsg(CommMsgBody& _msg) const
{
	actionOpts.composeMsg(_msg);
	_msg.composeUINT32(actionReqSeq);
	_msg.composeINT32(timeoutSec);
	_msg.composeBOOL(isNewGame);
	_msg.composeINT32(gameRound);
}

void TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION::parseMsg(CommMsgParser& _parser)
{
	actionOpts.parseMsg(_parser);
	_parser.parseUINT32(actionReqSeq);
	_parser.parseINT32(timeoutSec);
	_parser.parseBOOL(isNewGame);
	_parser.parseINT32(gameRound);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_REQUESTACTION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szActionOpts = ThinAtf::AtfVector0< P_PlayerRequestAction, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("actionOpts"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "actionOpts", szActionOpts, _checker, __FILE__, __LINE__);
	UINT32 actionReqSeq; _parser.parseUINT32(actionReqSeq);
	AtfValidator::validateInt(_descr, "actionReqSeq", actionReqSeq, _checker, __FILE__, __LINE__);
	INT32 timeoutSec; _parser.parseINT32(timeoutSec);
	AtfValidator::validateInt(_descr, "timeoutSec", timeoutSec, _checker, __FILE__, __LINE__);
	bool isNewGame; _parser.parseBOOL(isNewGame);
	AtfValidator::validateInt(_descr, "isNewGame", isNewGame, _checker, __FILE__, __LINE__);
	INT32 gameRound; _parser.parseINT32(gameRound);
	AtfValidator::validateInt(_descr, "gameRound", gameRound, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY(Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, chipsAdded(std::move(_o.chipsAdded))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
	, italyReservedChips(std::move(_o.italyReservedChips))
{
}

TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY& TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY::operator=(Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		chipsAdded = std::move(_o.chipsAdded);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
		italyReservedChips = std::move(_o.italyReservedChips);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY::clear()
{
	errcode = 0;
	errstr.clear();
	chipsAdded = 0;
	clientMsg_txtEx.clear();
	italyReservedChips = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY::equals(const Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		chipsAdded == _o.chipsAdded &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx) &&
		italyReservedChips == _o.italyReservedChips;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_ADDCHIPS_AUTO_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errstr=");
	_buf.append(errstr);
	_buf.append(',');
	_buf.append("chipsAdded=");
	_buf.appendUint(chipsAdded);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	_buf.append(',');
	_buf.append("reserved=");
	_buf.appendUint(italyReservedChips);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(errstr);
	_msg.composeUINT32(chipsAdded);
	_msg.composeMsgBody(clientMsg_txtEx);
	_msg.composeUINT32(italyReservedChips);
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(errstr);
	_parser.parseUINT32(chipsAdded);
	_parser.parseMsgBody(clientMsg_txtEx);
	_parser.parseUINT32(italyReservedChips);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_ADDCHIPS_AUTO_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	UINT32 chipsAdded; _parser.parseUINT32(chipsAdded);
	AtfValidator::validateInt(_descr, "chipsAdded", chipsAdded, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	UINT32 italyReservedChips; _parser.parseUINT32(italyReservedChips);
	AtfValidator::validateInt(_descr, "italyReservedChips", italyReservedChips, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_FORCE_SITOUT
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_FORCE_SITOUT::Protocol_MSG_TABLE_FORCE_SITOUT()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_FORCE_SITOUT::Protocol_MSG_TABLE_FORCE_SITOUT(Protocol_MSG_TABLE_FORCE_SITOUT&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, sittingStatus(std::move(_o.sittingStatus))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
{
}

TableClientThin::player::Protocol_MSG_TABLE_FORCE_SITOUT& TableClientThin::player::Protocol_MSG_TABLE_FORCE_SITOUT::operator=(Protocol_MSG_TABLE_FORCE_SITOUT&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		sittingStatus = std::move(_o.sittingStatus);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_FORCE_SITOUT::clear()
{
	errcode = 0;
	errstr.clear();
	sittingStatus = 0;
	clientMsg_txtEx.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_FORCE_SITOUT::equals(const Protocol_MSG_TABLE_FORCE_SITOUT& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		sittingStatus == _o.sittingStatus &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_FORCE_SITOUT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_FORCE_SITOUT).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errstr=");
	_buf.append(errstr);
	_buf.append(',');
	_buf.append("sittingStatus=");
	_buf.appendUint(sittingStatus);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_FORCE_SITOUT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(errstr);
	_msg.composeBYTE(sittingStatus);
	_msg.composeMsgBody(clientMsg_txtEx);
}

void TableClientThin::player::Protocol_MSG_TABLE_FORCE_SITOUT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(errstr);
	_parser.parseBYTE(sittingStatus);
	_parser.parseMsgBody(clientMsg_txtEx);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_FORCE_SITOUT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_FORCE_SITOUT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	BYTE sittingStatus; _parser.parseBYTE(sittingStatus);
	AtfValidator::validateInt(_descr, "sittingStatus", sittingStatus, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_ADVANCED_BET
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_ADVANCED_BET::Protocol_MSG_TABLE_ADVANCED_BET()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_ADVANCED_BET::Protocol_MSG_TABLE_ADVANCED_BET(Protocol_MSG_TABLE_ADVANCED_BET&& _o)
	: betOptions(std::move(_o.betOptions))
{
}

TableClientThin::player::Protocol_MSG_TABLE_ADVANCED_BET& TableClientThin::player::Protocol_MSG_TABLE_ADVANCED_BET::operator=(Protocol_MSG_TABLE_ADVANCED_BET&& _o)
{
	if(this != &_o)
	{
		betOptions = std::move(_o.betOptions);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_ADVANCED_BET::clear()
{
	betOptions.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_ADVANCED_BET::equals(const Protocol_MSG_TABLE_ADVANCED_BET& _o) const
{
	return betOptions.equals(_o.betOptions);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_ADVANCED_BET::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_ADVANCED_BET).append(")");
	_buf.append(',');
	_buf.append("betOptions=");
	betOptions.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_ADVANCED_BET::composeMsg(CommMsgBody& _msg) const
{
	betOptions.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_ADVANCED_BET::parseMsg(CommMsgParser& _parser)
{
	betOptions.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_ADVANCED_BET::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_ADVANCED_BET";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szBetOptions = ThinAtf::AtfVector0< P_PlayerBetOption, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("betOptions"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "betOptions", szBetOptions, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_STATISTIC
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_STATISTIC::Protocol_MSG_TABLE_STATISTIC()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_STATISTIC::clear()
{
	statistic = 0;
	earnedVPP = 0;
	mileStoneAward = 0;
	handId = 0;
	vppThisHand = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_STATISTIC::equals(const Protocol_MSG_TABLE_STATISTIC& _o) const
{
	return statistic == _o.statistic &&
		earnedVPP == _o.earnedVPP &&
		mileStoneAward == _o.mileStoneAward &&
		handId == _o.handId &&
		vppThisHand == _o.vppThisHand;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_STATISTIC::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_STATISTIC).append(")");
	_buf.append(',');
	_buf.append("statistic=");
	_buf.appendUint(statistic);
	_buf.append(',');
	_buf.append("earnedVPP=");
	_buf.appendUint(earnedVPP);
	_buf.append(',');
	_buf.append("mileStoneAward=");
	_buf.appendUint(mileStoneAward);
	_buf.append(',');
	_buf.append("hI=");
	_buf.appendUint64(handId);
	_buf.append(',');
	_buf.append("vppThisHand=");
	_buf.appendUint(vppThisHand);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_STATISTIC::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(statistic);
	_msg.composeUINT32(earnedVPP);
	_msg.composeUINT32(mileStoneAward);
	_msg.composeUINT64(handId);
	_msg.composeUINT32(vppThisHand);
}

void TableClientThin::player::Protocol_MSG_TABLE_STATISTIC::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(statistic);
	_parser.parseUINT32(earnedVPP);
	_parser.parseUINT32(mileStoneAward);
	_parser.parseUINT64(handId);
	_parser.parseUINT32(vppThisHand);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_STATISTIC::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_STATISTIC";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 statistic; _parser.parseUINT32(statistic);
	AtfValidator::validateInt(_descr, "statistic", statistic, _checker, __FILE__, __LINE__);
	UINT32 earnedVPP; _parser.parseUINT32(earnedVPP);
	AtfValidator::validateInt(_descr, "earnedVPP", earnedVPP, _checker, __FILE__, __LINE__);
	UINT32 mileStoneAward; _parser.parseUINT32(mileStoneAward);
	AtfValidator::validateInt(_descr, "mileStoneAward", mileStoneAward, _checker, __FILE__, __LINE__);
	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
	UINT32 vppThisHand; _parser.parseUINT32(vppThisHand);
	AtfValidator::validateInt(_descr, "vppThisHand", vppThisHand, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_HAND_RANK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_HAND_RANK::Protocol_MSG_TABLE_HAND_RANK()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_HAND_RANK::Protocol_MSG_TABLE_HAND_RANK(Protocol_MSG_TABLE_HAND_RANK&& _o)
	: strHi(std::move(_o.strHi))
	, strLo(std::move(_o.strLo))
	, bestHigh(std::move(_o.bestHigh))
	, bestLow(std::move(_o.bestLow))
	, strHi2(std::move(_o.strHi2))
	, bestHigh2(std::move(_o.bestHigh2))
	, cardsHigh(std::move(_o.cardsHigh))
	, cardsLow(std::move(_o.cardsLow))
	, cardsHigh2(std::move(_o.cardsHigh2))
	, strLo2(std::move(_o.strLo2))
	, bestLow2(std::move(_o.bestLow2))
	, cardsLow2(std::move(_o.cardsLow2))
{
}

TableClientThin::player::Protocol_MSG_TABLE_HAND_RANK& TableClientThin::player::Protocol_MSG_TABLE_HAND_RANK::operator=(Protocol_MSG_TABLE_HAND_RANK&& _o)
{
	if(this != &_o)
	{
		strHi = std::move(_o.strHi);
		strLo = std::move(_o.strLo);
		bestHigh = std::move(_o.bestHigh);
		bestLow = std::move(_o.bestLow);
		strHi2 = std::move(_o.strHi2);
		bestHigh2 = std::move(_o.bestHigh2);
		cardsHigh = std::move(_o.cardsHigh);
		cardsLow = std::move(_o.cardsLow);
		cardsHigh2 = std::move(_o.cardsHigh2);
		strLo2 = std::move(_o.strLo2);
		bestLow2 = std::move(_o.bestLow2);
		cardsLow2 = std::move(_o.cardsLow2);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_HAND_RANK::clear()
{
	strHi.clear();
	strLo.clear();
	bestHigh = 0;
	bestLow = 0;
	strHi2.clear();
	bestHigh2 = 0;
	cardsHigh.clear();
	cardsLow.clear();
	cardsHigh2.clear();
	strLo2.clear();
	bestLow2 = 0;
	cardsLow2.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_HAND_RANK::equals(const Protocol_MSG_TABLE_HAND_RANK& _o) const
{
	return strHi.equals(_o.strHi) &&
		strLo.equals(_o.strLo) &&
		bestHigh == _o.bestHigh &&
		bestLow == _o.bestLow &&
		strHi2.equals(_o.strHi2) &&
		bestHigh2 == _o.bestHigh2 &&
		strLo2.equals(_o.strLo2) &&
		bestLow2 == _o.bestLow2;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_HAND_RANK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_HAND_RANK).append(")");
	_buf.append(',');
	_buf.append("strHi=");
	_buf.append(strHi);
	_buf.append(',');
	_buf.append("strLo=");
	_buf.append(strLo);
	_buf.append(',');
	_buf.append("bestHigh=");
	_buf.appendUint(bestHigh);
	_buf.append(',');
	_buf.append("bestLow=");
	_buf.appendUint(bestLow);
	_buf.append(',');
	_buf.append("strHi2=");
	_buf.append(strHi2);
	_buf.append(',');
	_buf.append("bestHigh2=");
	_buf.appendUint(bestHigh2);
	_buf.append(',');
	_buf.append("cardsHigh=");
	cardsHigh.toTraceString(_buf);
	_buf.append(',');
	_buf.append("cardsLow=");
	cardsLow.toTraceString(_buf);
	_buf.append(',');
	_buf.append("cardsHigh2=");
	cardsHigh2.toTraceString(_buf);
	_buf.append(',');
	_buf.append("strLo2=");
	_buf.append(strLo2);
	_buf.append(',');
	_buf.append("bestLow2=");
	_buf.appendUint(bestLow2);
	_buf.append(',');
	_buf.append("cardsLow2=");
	cardsLow2.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_HAND_RANK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(strHi);
	_msg.composeString(strLo);
	_msg.composeBYTE(bestHigh);
	_msg.composeBYTE(bestLow);
	_msg.composeString(strHi2);
	_msg.composeBYTE(bestHigh2);
	cardsHigh.composeMsg(_msg);
	cardsLow.composeMsg(_msg);
	cardsHigh2.composeMsg(_msg);
	_msg.composeString(strLo2);
	_msg.composeBYTE(bestLow2);
	cardsLow2.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_HAND_RANK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(strHi);
	_parser.parseStringP(strLo);
	_parser.parseBYTE(bestHigh);
	_parser.parseBYTE(bestLow);
	if(_parser.parseEnded()) return;
	_parser.parseStringP(strHi2);
	_parser.parseBYTE(bestHigh2);
	if(_parser.parseEnded()) return;
	cardsHigh.parseMsg(_parser);
	cardsLow.parseMsg(_parser);
	cardsHigh2.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseStringP(strLo2);
	_parser.parseBYTE(bestLow2);
	cardsLow2.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_HAND_RANK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_HAND_RANK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "strHi"); size_t szStrHi = strlen(_dummy);
	AtfValidator::validateInt(_descr, "strHi", szStrHi, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "strLo"); size_t szStrLo = strlen(_dummy);
	AtfValidator::validateInt(_descr, "strLo", szStrLo, _checker, __FILE__, __LINE__);
	BYTE bestHigh; _parser.parseBYTE(bestHigh);
	AtfValidator::validateInt(_descr, "bestHigh", bestHigh, _checker, __FILE__, __LINE__);
	BYTE bestLow; _parser.parseBYTE(bestLow);
	AtfValidator::validateInt(_descr, "bestLow", bestLow, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	_parser.parseStringN(_dummy, 0, "strHi2"); size_t szStrHi2 = strlen(_dummy);
	AtfValidator::validateInt(_descr, "strHi2", szStrHi2, _checker, __FILE__, __LINE__);
	BYTE bestHigh2; _parser.parseBYTE(bestHigh2);
	AtfValidator::validateInt(_descr, "bestHigh2", bestHigh2, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	PString _descbuf;
	int szCardsHigh = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cardsHigh"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cardsHigh", szCardsHigh, _checker, __FILE__, __LINE__);
	int szCardsLow = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cardsLow"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cardsLow", szCardsLow, _checker, __FILE__, __LINE__);
	int szCardsHigh2 = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cardsHigh2"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cardsHigh2", szCardsHigh2, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	_parser.parseStringN(_dummy, 0, "strLo2"); size_t szStrLo2 = strlen(_dummy);
	AtfValidator::validateInt(_descr, "strLo2", szStrLo2, _checker, __FILE__, __LINE__);
	BYTE bestLow2; _parser.parseBYTE(bestLow2);
	AtfValidator::validateInt(_descr, "bestLow2", bestLow2, _checker, __FILE__, __LINE__);
	int szCardsLow2 = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cardsLow2"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cardsLow2", szCardsLow2, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_ADDCHIPS
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS::Protocol_MSG_TABLE_ADDCHIPS()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS::clear()
{
	chips = 0;
	realMoneyChips = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS::equals(const Protocol_MSG_TABLE_ADDCHIPS& _o) const
{
	return chips == _o.chips &&
		realMoneyChips == _o.realMoneyChips;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_ADDCHIPS).append(")");
	_buf.append(',');
	_buf.append("chips=");
	_buf.appendInt(chips);
	_buf.append(',');
	_buf.append("realMoneyChips=");
	_buf.appendInt(realMoneyChips);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(chips);
	_msg.composeINT32(realMoneyChips);
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(chips);
	if(_parser.parseEnded()) return;
	_parser.parseINT32(realMoneyChips);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_ADDCHIPS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 chips; _parser.parseINT32(chips);
	AtfValidator::validateIntRange(_descr, "chips", chips, 0, 2000000000, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	INT32 realMoneyChips; _parser.parseINT32(realMoneyChips);
	AtfValidator::validateIntRange(_descr, "realMoneyChips", realMoneyChips, 0, 2000000000, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_ADDCHIPS_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_REPLY::Protocol_MSG_TABLE_ADDCHIPS_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_REPLY::Protocol_MSG_TABLE_ADDCHIPS_REPLY(Protocol_MSG_TABLE_ADDCHIPS_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
	, italyReservedChips(std::move(_o.italyReservedChips))
{
}

TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_REPLY& TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_REPLY::operator=(Protocol_MSG_TABLE_ADDCHIPS_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
		italyReservedChips = std::move(_o.italyReservedChips);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_REPLY::clear()
{
	errcode = 0;
	errstr.clear();
	clientMsg_txtEx.clear();
	italyReservedChips = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_REPLY::equals(const Protocol_MSG_TABLE_ADDCHIPS_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx) &&
		italyReservedChips == _o.italyReservedChips;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_ADDCHIPS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errstr=");
	_buf.append(errstr);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	_buf.append(',');
	_buf.append("reserved=");
	_buf.appendUint(italyReservedChips);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(errstr);
	_msg.composeMsgBody(clientMsg_txtEx);
	_msg.composeUINT32(italyReservedChips);
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(errstr);
	_parser.parseMsgBody(clientMsg_txtEx);
	_parser.parseUINT32(italyReservedChips);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_ADDCHIPS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_ADDCHIPS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	UINT32 italyReservedChips; _parser.parseUINT32(italyReservedChips);
	AtfValidator::validateInt(_descr, "italyReservedChips", italyReservedChips, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_REBUYCHIPS
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS::Protocol_MSG_TABLE_REBUYCHIPS()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS::clear()
{
	numRebuys = 1;
}

bool TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS::equals(const Protocol_MSG_TABLE_REBUYCHIPS& _o) const
{
	return numRebuys == _o.numRebuys;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_REBUYCHIPS).append(")");
	_buf.append(',');
	_buf.append("numRebuys=");
	_buf.appendInt(numRebuys);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(numRebuys);
}

void TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS::parseMsg(CommMsgParser& _parser)
{
	if(_parser.parseEnded()) return;
	_parser.parseINT16(numRebuys);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_REBUYCHIPS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(_parser.parseEnded()) return;
	INT16 numRebuys; _parser.parseINT16(numRebuys);
	AtfValidator::validateIntRange(_descr, "numRebuys", numRebuys, 0, 10, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_REBUYCHIPS_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS_REPLY::Protocol_MSG_TABLE_REBUYCHIPS_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS_REPLY::Protocol_MSG_TABLE_REBUYCHIPS_REPLY(Protocol_MSG_TABLE_REBUYCHIPS_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
	, chips(std::move(_o.chips))
	, money(std::move(_o.money))
	, pChips(std::move(_o.pChips))
	, fppTaken(std::move(_o.fppTaken))
	, tChips(std::move(_o.tChips))
	, wChips(std::move(_o.wChips))
	, infoType(std::move(_o.infoType))
	, info(std::move(_o.info))
	, pChips64(std::move(_o.pChips64))
	, rebuysDone(std::move(_o.rebuysDone))
	, addonsDone(std::move(_o.addonsDone))
	, rebuysLeft(std::move(_o.rebuysLeft))
	, finalFlightTournId(std::move(_o.finalFlightTournId))
	, moneyAfter(std::move(_o.moneyAfter))
	, realMoney(std::move(_o.realMoney))
	, realTChips(std::move(_o.realTChips))
	, tChipsAfter(std::move(_o.tChipsAfter))
	, tournSpendLimit(std::move(_o.tournSpendLimit))
{
}

TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS_REPLY& TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS_REPLY::operator=(Protocol_MSG_TABLE_REBUYCHIPS_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
		chips = std::move(_o.chips);
		money = std::move(_o.money);
		pChips = std::move(_o.pChips);
		fppTaken = std::move(_o.fppTaken);
		tChips = std::move(_o.tChips);
		wChips = std::move(_o.wChips);
		infoType = std::move(_o.infoType);
		info = std::move(_o.info);
		pChips64 = std::move(_o.pChips64);
		rebuysDone = std::move(_o.rebuysDone);
		addonsDone = std::move(_o.addonsDone);
		rebuysLeft = std::move(_o.rebuysLeft);
		finalFlightTournId = std::move(_o.finalFlightTournId);
		moneyAfter = std::move(_o.moneyAfter);
		realMoney = std::move(_o.realMoney);
		realTChips = std::move(_o.realTChips);
		tChipsAfter = std::move(_o.tChipsAfter);
		tournSpendLimit = std::move(_o.tournSpendLimit);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS_REPLY::clear()
{
	errcode = 0;
	errstr.clear();
	clientMsg_txtEx.clear();
	chips = 0;
	money = 0;
	pChips = 0;
	fppTaken = 0;
	tChips = 0;
	wChips = 0;
	infoType = 0;
	info.clear();
	pChips64 = 0;
	rebuysDone = 0;
	addonsDone = 0;
	rebuysLeft = 0;
	finalFlightTournId = 0;
	moneyAfter = 0;
	realMoney = 0;
	realTChips = 0;
	tChipsAfter = 0;
	tournSpendLimit.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS_REPLY::equals(const Protocol_MSG_TABLE_REBUYCHIPS_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx) &&
		chips == _o.chips &&
		money == _o.money &&
		pChips == _o.pChips &&
		fppTaken == _o.fppTaken &&
		tChips == _o.tChips &&
		wChips == _o.wChips &&
		infoType == _o.infoType &&
		info.equals(_o.info) &&
		pChips64 == _o.pChips64 &&
		rebuysDone == _o.rebuysDone &&
		addonsDone == _o.addonsDone &&
		rebuysLeft == _o.rebuysLeft &&
		finalFlightTournId == _o.finalFlightTournId &&
		moneyAfter == _o.moneyAfter &&
		realMoney == _o.realMoney &&
		realTChips == _o.realTChips &&
		tChipsAfter == _o.tChipsAfter &&
		tournSpendLimit.equals(_o.tournSpendLimit);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_REBUYCHIPS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	if(errcode)
	{
		_buf.append(',');
		_buf.append("errstr=");
		_buf.append(errstr);
		_buf.append(',');
		_buf.append("m=");
		clientMsg_txtEx.toTraceString(_buf);
	}
	else
	{
		_buf.append(',');
		_buf.append("chips=");
		_buf.appendUint(chips);
		_buf.append(',');
		_buf.append("money=");
		_buf.appendUint(money);
		_buf.append(',');
		_buf.append("pChips=");
		_buf.appendUint(pChips);
		_buf.append(',');
		_buf.append("fppTaken=");
		_buf.appendUint(fppTaken);
		_buf.append(',');
		_buf.append("tChips=");
		_buf.appendUint(tChips);
		_buf.append(',');
		_buf.append("wChips=");
		_buf.appendUint(wChips);
		_buf.append(',');
		_buf.append("infoType=");
		_buf.appendUint(infoType);
		_buf.append(',');
		_buf.append("info=");
		_buf.append(info);
		_buf.append(',');
		_buf.append("pChips64=");
		_buf.appendUint64(pChips64);
		_buf.append(',');
		_buf.append("rebuysDone=");
		_buf.appendUint(rebuysDone);
		_buf.append(',');
		_buf.append("addonsDone=");
		_buf.appendUint(addonsDone);
		_buf.append(',');
		_buf.append("rebuysLeft=");
		_buf.appendInt(rebuysLeft);
		_buf.append(',');
		_buf.append("finalFlightTournId=");
		_buf.appendUint(finalFlightTournId);
		_buf.append(',');
		_buf.append("moneyAfter=");
		_buf.appendInt(moneyAfter);
		_buf.append(',');
		_buf.append("realMoney=");
		_buf.appendInt(realMoney);
		_buf.append(',');
		_buf.append("realTChips=");
		_buf.appendInt(realTChips);
		_buf.append(',');
		_buf.append("tChipsAfter=");
		_buf.appendInt(tChipsAfter);
		_buf.append(',');
		_buf.append("tournSpendLimit=");
		tournSpendLimit.toTraceString(_buf);
	}
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	if(errcode)
	{
		_msg.composeString(errstr);
		_msg.composeMsgBody(clientMsg_txtEx);
	}
	else
	{
		_msg.composeUINT32(chips);
		_msg.composeUINT32(money);
		_msg.composeUINT32(pChips);
		_msg.composeUINT32(fppTaken);
		_msg.composeUINT32(tChips);
		_msg.composeUINT32(wChips);
		_msg.composeUINT32(infoType);
		_msg.composeString(info);
		_msg.composeUINT64(pChips64);
		_msg.composeUINT16(rebuysDone);
		_msg.composeUINT16(addonsDone);
		_msg.composeINT16(rebuysLeft);
		_msg.composeUINT32(finalFlightTournId);
		_msg.composeINT32(moneyAfter);
		_msg.composeINT32(realMoney);
		_msg.composeINT32(realTChips);
		_msg.composeINT32(tChipsAfter);
		tournSpendLimit.composeMsg(_msg);
	}
}

void TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	if(errcode)
	{
		_parser.parseStringP(errstr);
		_parser.parseMsgBody(clientMsg_txtEx);
	}
	else
	{
		_parser.parseUINT32(chips);
		_parser.parseUINT32(money);
		_parser.parseUINT32(pChips);
		_parser.parseUINT32(fppTaken);
		_parser.parseUINT32(tChips);
		_parser.parseUINT32(wChips);
		_parser.parseUINT32(infoType);
		_parser.parseStringP(info);
		_parser.parseUINT64(pChips64);
		_parser.parseUINT16(rebuysDone);
		_parser.parseUINT16(addonsDone);
		_parser.parseINT16(rebuysLeft);
		_parser.parseUINT32(finalFlightTournId);
		_parser.parseINT32(moneyAfter);
		_parser.parseINT32(realMoney);
		_parser.parseINT32(realTChips);
		_parser.parseINT32(tChipsAfter);
		if(_parser.parseEnded()) return;
		tournSpendLimit.parseMsg(_parser);
	}
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_REBUYCHIPS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_REBUYCHIPS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode = 0;
	_parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	if(errcode)
	{
		_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
		size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
		AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 chips; _parser.parseUINT32(chips);
		AtfValidator::validateInt(_descr, "chips", chips, _checker, __FILE__, __LINE__);
		UINT32 money; _parser.parseUINT32(money);
		AtfValidator::validateInt(_descr, "money", money, _checker, __FILE__, __LINE__);
		UINT32 pChips; _parser.parseUINT32(pChips);
		AtfValidator::validateInt(_descr, "pChips", pChips, _checker, __FILE__, __LINE__);
		UINT32 fppTaken; _parser.parseUINT32(fppTaken);
		AtfValidator::validateInt(_descr, "fppTaken", fppTaken, _checker, __FILE__, __LINE__);
		UINT32 tChips; _parser.parseUINT32(tChips);
		AtfValidator::validateInt(_descr, "tChips", tChips, _checker, __FILE__, __LINE__);
		UINT32 wChips; _parser.parseUINT32(wChips);
		AtfValidator::validateInt(_descr, "wChips", wChips, _checker, __FILE__, __LINE__);
		UINT32 infoType; _parser.parseUINT32(infoType);
		AtfValidator::validateInt(_descr, "infoType", infoType, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "info"); size_t szInfo = strlen(_dummy);
		AtfValidator::validateInt(_descr, "info", szInfo, _checker, __FILE__, __LINE__);
		UINT64 pChips64; _parser.parseUINT64(pChips64);
		AtfValidator::validateUint(_descr, "pChips64", pChips64, _checker, __FILE__, __LINE__);
		UINT16 rebuysDone; _parser.parseUINT16(rebuysDone);
		AtfValidator::validateInt(_descr, "rebuysDone", rebuysDone, _checker, __FILE__, __LINE__);
		UINT16 addonsDone; _parser.parseUINT16(addonsDone);
		AtfValidator::validateInt(_descr, "addonsDone", addonsDone, _checker, __FILE__, __LINE__);
		INT16 rebuysLeft; _parser.parseINT16(rebuysLeft);
		AtfValidator::validateInt(_descr, "rebuysLeft", rebuysLeft, _checker, __FILE__, __LINE__);
		UINT32 finalFlightTournId; _parser.parseUINT32(finalFlightTournId);
		AtfValidator::validateInt(_descr, "finalFlightTournId", finalFlightTournId, _checker, __FILE__, __LINE__);
		INT32 moneyAfter; _parser.parseINT32(moneyAfter);
		AtfValidator::validateInt(_descr, "moneyAfter", moneyAfter, _checker, __FILE__, __LINE__);
		INT32 realMoney; _parser.parseINT32(realMoney);
		AtfValidator::validateInt(_descr, "realMoney", realMoney, _checker, __FILE__, __LINE__);
		INT32 realTChips; _parser.parseINT32(realTChips);
		AtfValidator::validateInt(_descr, "realTChips", realTChips, _checker, __FILE__, __LINE__);
		INT32 tChipsAfter; _parser.parseINT32(tChipsAfter);
		AtfValidator::validateInt(_descr, "tChipsAfter", tChipsAfter, _checker, __FILE__, __LINE__);
		if(_parser.parseEnded()) return;
		PString _descbuf;
		TournCommonThin::TournSpendLimit::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tournSpendLimit"), _fieldsWithUnparsedContent);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_ADDONCHIPS
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS::Protocol_MSG_TABLE_ADDONCHIPS()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS::clear()
{
}

bool TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS::equals(const Protocol_MSG_TABLE_ADDONCHIPS& _o) const
{
	return true;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_ADDONCHIPS).append(")");
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS::composeMsg(CommMsgBody& _msg) const
{
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_ADDONCHIPS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_ADDONCHIPS_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS_REPLY::Protocol_MSG_TABLE_ADDONCHIPS_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS_REPLY::Protocol_MSG_TABLE_ADDONCHIPS_REPLY(Protocol_MSG_TABLE_ADDONCHIPS_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
	, chips(std::move(_o.chips))
	, money(std::move(_o.money))
	, pChips(std::move(_o.pChips))
	, fppTaken(std::move(_o.fppTaken))
	, tChips(std::move(_o.tChips))
	, wChips(std::move(_o.wChips))
	, infoType(std::move(_o.infoType))
	, info(std::move(_o.info))
	, pChips64(std::move(_o.pChips64))
	, rebuysDone(std::move(_o.rebuysDone))
	, addonsDone(std::move(_o.addonsDone))
	, rebuysLeft(std::move(_o.rebuysLeft))
	, finalFlightTournId(std::move(_o.finalFlightTournId))
	, moneyAfter(std::move(_o.moneyAfter))
	, realMoney(std::move(_o.realMoney))
	, realTChips(std::move(_o.realTChips))
	, tChipsAfter(std::move(_o.tChipsAfter))
	, tournSpendLimit(std::move(_o.tournSpendLimit))
{
}

TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS_REPLY& TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS_REPLY::operator=(Protocol_MSG_TABLE_ADDONCHIPS_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
		chips = std::move(_o.chips);
		money = std::move(_o.money);
		pChips = std::move(_o.pChips);
		fppTaken = std::move(_o.fppTaken);
		tChips = std::move(_o.tChips);
		wChips = std::move(_o.wChips);
		infoType = std::move(_o.infoType);
		info = std::move(_o.info);
		pChips64 = std::move(_o.pChips64);
		rebuysDone = std::move(_o.rebuysDone);
		addonsDone = std::move(_o.addonsDone);
		rebuysLeft = std::move(_o.rebuysLeft);
		finalFlightTournId = std::move(_o.finalFlightTournId);
		moneyAfter = std::move(_o.moneyAfter);
		realMoney = std::move(_o.realMoney);
		realTChips = std::move(_o.realTChips);
		tChipsAfter = std::move(_o.tChipsAfter);
		tournSpendLimit = std::move(_o.tournSpendLimit);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS_REPLY::clear()
{
	errcode = 0;
	errstr.clear();
	clientMsg_txtEx.clear();
	chips = 0;
	money = 0;
	pChips = 0;
	fppTaken = 0;
	tChips = 0;
	wChips = 0;
	infoType = 0;
	info.clear();
	pChips64 = 0;
	rebuysDone = 0;
	addonsDone = 0;
	rebuysLeft = 0;
	finalFlightTournId = 0;
	moneyAfter = 0;
	realMoney = 0;
	realTChips = 0;
	tChipsAfter = 0;
	tournSpendLimit.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS_REPLY::equals(const Protocol_MSG_TABLE_ADDONCHIPS_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx) &&
		chips == _o.chips &&
		money == _o.money &&
		pChips == _o.pChips &&
		fppTaken == _o.fppTaken &&
		tChips == _o.tChips &&
		wChips == _o.wChips &&
		infoType == _o.infoType &&
		info.equals(_o.info) &&
		pChips64 == _o.pChips64 &&
		rebuysDone == _o.rebuysDone &&
		addonsDone == _o.addonsDone &&
		rebuysLeft == _o.rebuysLeft &&
		finalFlightTournId == _o.finalFlightTournId &&
		moneyAfter == _o.moneyAfter &&
		realMoney == _o.realMoney &&
		realTChips == _o.realTChips &&
		tChipsAfter == _o.tChipsAfter &&
		tournSpendLimit.equals(_o.tournSpendLimit);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_ADDONCHIPS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	if(errcode)
	{
		_buf.append(',');
		_buf.append("errstr=");
		_buf.append(errstr);
		_buf.append(',');
		_buf.append("m=");
		clientMsg_txtEx.toTraceString(_buf);
	}
	else
	{
		_buf.append(',');
		_buf.append("chips=");
		_buf.appendUint(chips);
		_buf.append(',');
		_buf.append("money=");
		_buf.appendUint(money);
		_buf.append(',');
		_buf.append("pChips=");
		_buf.appendUint(pChips);
		_buf.append(',');
		_buf.append("fppTaken=");
		_buf.appendUint(fppTaken);
		_buf.append(',');
		_buf.append("tChips=");
		_buf.appendUint(tChips);
		_buf.append(',');
		_buf.append("wChips=");
		_buf.appendUint(wChips);
		_buf.append(',');
		_buf.append("infoType=");
		_buf.appendUint(infoType);
		_buf.append(',');
		_buf.append("info=");
		_buf.append(info);
		_buf.append(',');
		_buf.append("pChips64=");
		_buf.appendUint64(pChips64);
		_buf.append(',');
		_buf.append("rebuysDone=");
		_buf.appendUint(rebuysDone);
		_buf.append(',');
		_buf.append("addonsDone=");
		_buf.appendUint(addonsDone);
		_buf.append(',');
		_buf.append("rebuysLeft=");
		_buf.appendInt(rebuysLeft);
		_buf.append(',');
		_buf.append("finalFlightTournId=");
		_buf.appendUint(finalFlightTournId);
		_buf.append(',');
		_buf.append("moneyAfter=");
		_buf.appendInt(moneyAfter);
		_buf.append(',');
		_buf.append("realMoney=");
		_buf.appendInt(realMoney);
		_buf.append(',');
		_buf.append("realTChips=");
		_buf.appendInt(realTChips);
		_buf.append(',');
		_buf.append("tChipsAfter=");
		_buf.appendInt(tChipsAfter);
		_buf.append(',');
		_buf.append("tournSpendLimit=");
		tournSpendLimit.toTraceString(_buf);
	}
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	if(errcode)
	{
		_msg.composeString(errstr);
		_msg.composeMsgBody(clientMsg_txtEx);
	}
	else
	{
		_msg.composeUINT32(chips);
		_msg.composeUINT32(money);
		_msg.composeUINT32(pChips);
		_msg.composeUINT32(fppTaken);
		_msg.composeUINT32(tChips);
		_msg.composeUINT32(wChips);
		_msg.composeUINT32(infoType);
		_msg.composeString(info);
		_msg.composeUINT64(pChips64);
		_msg.composeUINT16(rebuysDone);
		_msg.composeUINT16(addonsDone);
		_msg.composeINT16(rebuysLeft);
		_msg.composeUINT32(finalFlightTournId);
		_msg.composeINT32(moneyAfter);
		_msg.composeINT32(realMoney);
		_msg.composeINT32(realTChips);
		_msg.composeINT32(tChipsAfter);
		tournSpendLimit.composeMsg(_msg);
	}
}

void TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	if(errcode)
	{
		_parser.parseStringP(errstr);
		_parser.parseMsgBody(clientMsg_txtEx);
	}
	else
	{
		_parser.parseUINT32(chips);
		_parser.parseUINT32(money);
		_parser.parseUINT32(pChips);
		_parser.parseUINT32(fppTaken);
		_parser.parseUINT32(tChips);
		_parser.parseUINT32(wChips);
		_parser.parseUINT32(infoType);
		_parser.parseStringP(info);
		_parser.parseUINT64(pChips64);
		_parser.parseUINT16(rebuysDone);
		_parser.parseUINT16(addonsDone);
		_parser.parseINT16(rebuysLeft);
		_parser.parseUINT32(finalFlightTournId);
		_parser.parseINT32(moneyAfter);
		_parser.parseINT32(realMoney);
		_parser.parseINT32(realTChips);
		_parser.parseINT32(tChipsAfter);
		if(_parser.parseEnded()) return;
		tournSpendLimit.parseMsg(_parser);
	}
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_ADDONCHIPS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_ADDONCHIPS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode = 0;
	_parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	if(errcode)
	{
		_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
		size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
		AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 chips; _parser.parseUINT32(chips);
		AtfValidator::validateInt(_descr, "chips", chips, _checker, __FILE__, __LINE__);
		UINT32 money; _parser.parseUINT32(money);
		AtfValidator::validateInt(_descr, "money", money, _checker, __FILE__, __LINE__);
		UINT32 pChips; _parser.parseUINT32(pChips);
		AtfValidator::validateInt(_descr, "pChips", pChips, _checker, __FILE__, __LINE__);
		UINT32 fppTaken; _parser.parseUINT32(fppTaken);
		AtfValidator::validateInt(_descr, "fppTaken", fppTaken, _checker, __FILE__, __LINE__);
		UINT32 tChips; _parser.parseUINT32(tChips);
		AtfValidator::validateInt(_descr, "tChips", tChips, _checker, __FILE__, __LINE__);
		UINT32 wChips; _parser.parseUINT32(wChips);
		AtfValidator::validateInt(_descr, "wChips", wChips, _checker, __FILE__, __LINE__);
		UINT32 infoType; _parser.parseUINT32(infoType);
		AtfValidator::validateInt(_descr, "infoType", infoType, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "info"); size_t szInfo = strlen(_dummy);
		AtfValidator::validateInt(_descr, "info", szInfo, _checker, __FILE__, __LINE__);
		UINT64 pChips64; _parser.parseUINT64(pChips64);
		AtfValidator::validateUint(_descr, "pChips64", pChips64, _checker, __FILE__, __LINE__);
		UINT16 rebuysDone; _parser.parseUINT16(rebuysDone);
		AtfValidator::validateInt(_descr, "rebuysDone", rebuysDone, _checker, __FILE__, __LINE__);
		UINT16 addonsDone; _parser.parseUINT16(addonsDone);
		AtfValidator::validateInt(_descr, "addonsDone", addonsDone, _checker, __FILE__, __LINE__);
		INT16 rebuysLeft; _parser.parseINT16(rebuysLeft);
		AtfValidator::validateInt(_descr, "rebuysLeft", rebuysLeft, _checker, __FILE__, __LINE__);
		UINT32 finalFlightTournId; _parser.parseUINT32(finalFlightTournId);
		AtfValidator::validateInt(_descr, "finalFlightTournId", finalFlightTournId, _checker, __FILE__, __LINE__);
		INT32 moneyAfter; _parser.parseINT32(moneyAfter);
		AtfValidator::validateInt(_descr, "moneyAfter", moneyAfter, _checker, __FILE__, __LINE__);
		INT32 realMoney; _parser.parseINT32(realMoney);
		AtfValidator::validateInt(_descr, "realMoney", realMoney, _checker, __FILE__, __LINE__);
		INT32 realTChips; _parser.parseINT32(realTChips);
		AtfValidator::validateInt(_descr, "realTChips", realTChips, _checker, __FILE__, __LINE__);
		INT32 tChipsAfter; _parser.parseINT32(tChipsAfter);
		AtfValidator::validateInt(_descr, "tChipsAfter", tChipsAfter, _checker, __FILE__, __LINE__);
		if(_parser.parseEnded()) return;
		PString _descbuf;
		TournCommonThin::TournSpendLimit::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tournSpendLimit"), _fieldsWithUnparsedContent);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_CHAT2
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_CHAT2::Protocol_MSG_TABLE_CHAT2()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_CHAT2::Protocol_MSG_TABLE_CHAT2(Protocol_MSG_TABLE_CHAT2&& _o)
	: chat(std::move(_o.chat))
{
}

TableClientThin::player::Protocol_MSG_TABLE_CHAT2& TableClientThin::player::Protocol_MSG_TABLE_CHAT2::operator=(Protocol_MSG_TABLE_CHAT2&& _o)
{
	if(this != &_o)
	{
		chat = std::move(_o.chat);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_CHAT2::clear()
{
	chat.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_CHAT2::equals(const Protocol_MSG_TABLE_CHAT2& _o) const
{
	return chat.equals(_o.chat);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_CHAT2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_CHAT2).append(")");
	_buf.append(',');
	_buf.append("chat=");
	_buf.append(chat);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_CHAT2::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(chat);
}

void TableClientThin::player::Protocol_MSG_TABLE_CHAT2::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(chat);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_CHAT2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_CHAT2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "chat"); size_t szChat = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "chat", szChat, 10000, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_CHAT2_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_CHAT2_REPLY::Protocol_MSG_TABLE_CHAT2_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_CHAT2_REPLY::Protocol_MSG_TABLE_CHAT2_REPLY(Protocol_MSG_TABLE_CHAT2_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errMsgBody(std::move(_o.errMsgBody))
	, chatmsg(std::move(_o.chatmsg))
{
}

TableClientThin::player::Protocol_MSG_TABLE_CHAT2_REPLY& TableClientThin::player::Protocol_MSG_TABLE_CHAT2_REPLY::operator=(Protocol_MSG_TABLE_CHAT2_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errMsgBody = std::move(_o.errMsgBody);
		chatmsg = std::move(_o.chatmsg);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_CHAT2_REPLY::clear()
{
	errcode = 0;
	errMsgBody.clear();
	chatmsg.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_CHAT2_REPLY::equals(const Protocol_MSG_TABLE_CHAT2_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errMsgBody.equals(_o.errMsgBody) &&
		chatmsg.equals(_o.chatmsg);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_CHAT2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_CHAT2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errMsgBody=");
	errMsgBody.toTraceString(_buf);
	_buf.append(',');
	_buf.append("chatmsg=");
	_buf.append(chatmsg);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_CHAT2_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(errcode);
	_msg.composeMsgBody(errMsgBody);
	_msg.composeString(chatmsg);
}

void TableClientThin::player::Protocol_MSG_TABLE_CHAT2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(errcode);
	_parser.parseMsgBody(errMsgBody);
	_parser.parseStringP(chatmsg);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_CHAT2_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_CHAT2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT16 errcode; _parser.parseUINT16(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	size_t szErrMsgBody; _parser.skipMsgBody(szErrMsgBody);  /*errMsgBody*/
	AtfValidator::validateInt(_descr, "errMsgBody", szErrMsgBody, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "chatmsg"); size_t szChatmsg = strlen(_dummy);
	AtfValidator::validateInt(_descr, "chatmsg", szChatmsg, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SITIN
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SITIN::Protocol_MSG_TABLE_SITIN()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_SITIN::clear()
{
	flags = 0;
	flagsEx = 0;
	isPlayMoney = false;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SITIN::equals(const Protocol_MSG_TABLE_SITIN& _o) const
{
	return flags == _o.flags &&
		flagsEx == _o.flagsEx &&
		isPlayMoney == _o.isPlayMoney;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SITIN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SITIN).append(")");
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("flagsEx=");
	_buf.appendUint64(flagsEx);
	_buf.append(',');
	_buf.append("pm=");
	_buf.appendUint(isPlayMoney);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SITIN::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(flags);
	_msg.composeUINT64(flagsEx);
	_msg.composeBOOL(isPlayMoney);
}

void TableClientThin::player::Protocol_MSG_TABLE_SITIN::parseMsg(CommMsgParser& _parser)
{
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(flags);
	_parser.parseUINT64(flagsEx);
	_parser.parseBOOL(isPlayMoney);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SITIN::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SITIN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(_parser.parseEnded()) return;
	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT64 flagsEx; _parser.parseUINT64(flagsEx);
	AtfValidator::validateUint(_descr, "flagsEx", flagsEx, _checker, __FILE__, __LINE__);
	bool isPlayMoney; _parser.parseBOOL(isPlayMoney);
	AtfValidator::validateInt(_descr, "isPlayMoney", isPlayMoney, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SITIN_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SITIN_REPLY::Protocol_MSG_TABLE_SITIN_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_SITIN_REPLY::Protocol_MSG_TABLE_SITIN_REPLY(Protocol_MSG_TABLE_SITIN_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, sittingStatus(std::move(_o.sittingStatus))
	, waitingStatus(std::move(_o.waitingStatus))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
{
}

TableClientThin::player::Protocol_MSG_TABLE_SITIN_REPLY& TableClientThin::player::Protocol_MSG_TABLE_SITIN_REPLY::operator=(Protocol_MSG_TABLE_SITIN_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		sittingStatus = std::move(_o.sittingStatus);
		waitingStatus = std::move(_o.waitingStatus);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_SITIN_REPLY::clear()
{
	errcode = 0;
	errstr.clear();
	sittingStatus = 0;
	waitingStatus = 0;
	clientMsg_txtEx.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_SITIN_REPLY::equals(const Protocol_MSG_TABLE_SITIN_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		sittingStatus == _o.sittingStatus &&
		waitingStatus == _o.waitingStatus &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SITIN_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SITIN_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errstr=");
	_buf.append(errstr);
	_buf.append(',');
	_buf.append("ss=");
	_buf.appendUint(sittingStatus);
	_buf.append(',');
	_buf.append("ws=");
	_buf.appendUint(waitingStatus);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SITIN_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(errstr);
	_msg.composeBYTE(sittingStatus);
	_msg.composeUINT32(waitingStatus);
	_msg.composeMsgBody(clientMsg_txtEx);
}

void TableClientThin::player::Protocol_MSG_TABLE_SITIN_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(errstr);
	_parser.parseBYTE(sittingStatus);
	_parser.parseUINT32(waitingStatus);
	_parser.parseMsgBody(clientMsg_txtEx);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SITIN_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SITIN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	BYTE sittingStatus; _parser.parseBYTE(sittingStatus);
	AtfValidator::validateInt(_descr, "sittingStatus", sittingStatus, _checker, __FILE__, __LINE__);
	UINT32 waitingStatus; _parser.parseUINT32(waitingStatus);
	AtfValidator::validateInt(_descr, "waitingStatus", waitingStatus, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SITOUT
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SITOUT::Protocol_MSG_TABLE_SITOUT()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_SITOUT::clear()
{
	userFlags = 0;
	userFlagsEx = 0;
	isPlayMoney = false;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SITOUT::equals(const Protocol_MSG_TABLE_SITOUT& _o) const
{
	return userFlags == _o.userFlags &&
		userFlagsEx == _o.userFlagsEx &&
		isPlayMoney == _o.isPlayMoney;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SITOUT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SITOUT).append(")");
	_buf.append(',');
	_buf.append("userFlags=");
	_buf.appendUint(userFlags);
	_buf.append(',');
	_buf.append("userFlagsEx=");
	_buf.appendUint64(userFlagsEx);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SITOUT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(userFlags);
	_msg.composeUINT64(userFlagsEx);
	_msg.composeBOOL(isPlayMoney);
}

void TableClientThin::player::Protocol_MSG_TABLE_SITOUT::parseMsg(CommMsgParser& _parser)
{
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(userFlags);
	_parser.parseUINT64(userFlagsEx);
	_parser.parseBOOL(isPlayMoney);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SITOUT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SITOUT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(_parser.parseEnded()) return;
	UINT32 userFlags; _parser.parseUINT32(userFlags);
	AtfValidator::validateInt(_descr, "userFlags", userFlags, _checker, __FILE__, __LINE__);
	UINT64 userFlagsEx; _parser.parseUINT64(userFlagsEx);
	AtfValidator::validateUint(_descr, "userFlagsEx", userFlagsEx, _checker, __FILE__, __LINE__);
	bool isPlayMoney; _parser.parseBOOL(isPlayMoney);
	AtfValidator::validateInt(_descr, "isPlayMoney", isPlayMoney, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SITOUT_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SITOUT_REPLY::Protocol_MSG_TABLE_SITOUT_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_SITOUT_REPLY::Protocol_MSG_TABLE_SITOUT_REPLY(Protocol_MSG_TABLE_SITOUT_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, sittingStatus(std::move(_o.sittingStatus))
	, campingCountingDownSec(std::move(_o.campingCountingDownSec))
{
}

TableClientThin::player::Protocol_MSG_TABLE_SITOUT_REPLY& TableClientThin::player::Protocol_MSG_TABLE_SITOUT_REPLY::operator=(Protocol_MSG_TABLE_SITOUT_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		sittingStatus = std::move(_o.sittingStatus);
		campingCountingDownSec = std::move(_o.campingCountingDownSec);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_SITOUT_REPLY::clear()
{
	errcode = 0;
	errstr.clear();
	sittingStatus = 0;
	campingCountingDownSec = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SITOUT_REPLY::equals(const Protocol_MSG_TABLE_SITOUT_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		sittingStatus == _o.sittingStatus &&
		campingCountingDownSec == _o.campingCountingDownSec;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SITOUT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SITOUT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errstr=");
	_buf.append(errstr);
	_buf.append(',');
	_buf.append("ss=");
	_buf.appendUint(sittingStatus);
	_buf.append(',');
	_buf.append("campSecs=");
	_buf.appendUint(campingCountingDownSec);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SITOUT_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(errstr);
	_msg.composeBYTE(sittingStatus);
	_msg.composeUINT16(campingCountingDownSec);
}

void TableClientThin::player::Protocol_MSG_TABLE_SITOUT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(errstr);
	_parser.parseBYTE(sittingStatus);
	if(_parser.parseEnded()) return;
	_parser.parseUINT16(campingCountingDownSec);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SITOUT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SITOUT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	BYTE sittingStatus; _parser.parseBYTE(sittingStatus);
	AtfValidator::validateInt(_descr, "sittingStatus", sittingStatus, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT16 campingCountingDownSec; _parser.parseUINT16(campingCountingDownSec);
	AtfValidator::validateInt(_descr, "campingCountingDownSec", campingCountingDownSec, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SITOUT_NEXTHAND
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SITOUT_NEXTHAND::Protocol_MSG_TABLE_SITOUT_NEXTHAND()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_SITOUT_NEXTHAND::clear()
{
	checked = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SITOUT_NEXTHAND::equals(const Protocol_MSG_TABLE_SITOUT_NEXTHAND& _o) const
{
	return checked == _o.checked;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SITOUT_NEXTHAND::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SITOUT_NEXTHAND).append(")");
	_buf.append(',');
	_buf.append("checked=");
	_buf.appendUint(checked);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SITOUT_NEXTHAND::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(checked);
}

void TableClientThin::player::Protocol_MSG_TABLE_SITOUT_NEXTHAND::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(checked);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SITOUT_NEXTHAND::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SITOUT_NEXTHAND";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE checked; _parser.parseBYTE(checked);
	AtfValidator::validateInt(_descr, "checked", checked, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_CHIPSAVAIL
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL::Protocol_MSG_TABLE_CHIPSAVAIL()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL::clear()
{
}

bool TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL::equals(const Protocol_MSG_TABLE_CHIPSAVAIL& _o) const
{
	return true;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_CHIPSAVAIL).append(")");
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL::composeMsg(CommMsgBody& _msg) const
{
}

void TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_CHIPSAVAIL";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_CHIPSAVAIL_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY(Protocol_MSG_TABLE_CHIPSAVAIL_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, chips(std::move(_o.chips))
	, minLimit(std::move(_o.minLimit))
	, maxLimit(std::move(_o.maxLimit))
	, quantum(std::move(_o.quantum))
	, playAddedMask(std::move(_o.playAddedMask))
	, playAddedAmount(std::move(_o.playAddedAmount))
	, chipsHandStart(std::move(_o.chipsHandStart))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
	, currencyContext(std::move(_o.currencyContext))
	, ratHoleSeconds(std::move(_o.ratHoleSeconds))
	, maxRebuyChips_It(std::move(_o.maxRebuyChips_It))
	, totalRebuys_It(std::move(_o.totalRebuys_It))
	, pmChips(std::move(_o.pmChips))
	, userRollId(std::move(_o.userRollId))
{
}

TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY& TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY::operator=(Protocol_MSG_TABLE_CHIPSAVAIL_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		chips = std::move(_o.chips);
		minLimit = std::move(_o.minLimit);
		maxLimit = std::move(_o.maxLimit);
		quantum = std::move(_o.quantum);
		playAddedMask = std::move(_o.playAddedMask);
		playAddedAmount = std::move(_o.playAddedAmount);
		chipsHandStart = std::move(_o.chipsHandStart);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
		currencyContext = std::move(_o.currencyContext);
		ratHoleSeconds = std::move(_o.ratHoleSeconds);
		maxRebuyChips_It = std::move(_o.maxRebuyChips_It);
		totalRebuys_It = std::move(_o.totalRebuys_It);
		pmChips = std::move(_o.pmChips);
		userRollId = std::move(_o.userRollId);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY::clear()
{
	errcode = 0;
	errstr.clear();
	chips = 0;
	minLimit = 0;
	maxLimit = 0;
	quantum = 0;
	playAddedMask = 0;
	playAddedAmount = 0;
	chipsHandStart = 0;
	clientMsg_txtEx.clear();
	currencyContext.clear();
	ratHoleSeconds = 0;
	maxRebuyChips_It = 0;
	totalRebuys_It = 0;
	pmChips = 0;
	userRollId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY::equals(const Protocol_MSG_TABLE_CHIPSAVAIL_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		chips == _o.chips &&
		minLimit == _o.minLimit &&
		maxLimit == _o.maxLimit &&
		quantum == _o.quantum &&
		playAddedMask == _o.playAddedMask &&
		playAddedAmount == _o.playAddedAmount &&
		chipsHandStart == _o.chipsHandStart &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx) &&
		currencyContext.equals(_o.currencyContext) &&
		ratHoleSeconds == _o.ratHoleSeconds &&
		maxRebuyChips_It == _o.maxRebuyChips_It &&
		totalRebuys_It == _o.totalRebuys_It &&
		pmChips == _o.pmChips &&
		userRollId == _o.userRollId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_CHIPSAVAIL_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errstr=");
	_buf.append(errstr);
	_buf.append(',');
	_buf.append("chips=");
	_buf.appendUint(chips);
	_buf.append(',');
	_buf.append("mnLim=");
	_buf.appendUint(minLimit);
	_buf.append(',');
	_buf.append("mxLim=");
	_buf.appendUint(maxLimit);
	_buf.append(',');
	_buf.append("q=");
	_buf.appendUint(quantum);
	_buf.append(',');
	_buf.append("mask=");
	_buf.appendUint(playAddedMask);
	_buf.append(',');
	_buf.append("amt=");
	_buf.appendUint(playAddedAmount);
	_buf.append(',');
	_buf.append("chipsHS=");
	_buf.appendUint(chipsHandStart);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	_buf.append(',');
	_buf.append("currency=");
	currencyContext.toTraceString(_buf);
	_buf.append(',');
	_buf.append("rh=");
	_buf.appendUint(ratHoleSeconds);
	_buf.append(',');
	_buf.append("maxRebuy=");
	_buf.appendUint(maxRebuyChips_It);
	_buf.append(',');
	_buf.append("totRebuy=");
	_buf.appendUint(totalRebuys_It);
	_buf.append(',');
	_buf.append("pmChips=");
	_buf.appendUint64(pmChips);
	_buf.append(',');
	_buf.append("rId=");
	_buf.appendUint(userRollId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(errstr);
	_msg.composeUINT32(chips);
	_msg.composeUINT32(minLimit);
	_msg.composeUINT32(maxLimit);
	_msg.composeUINT32(quantum);
	_msg.composeBYTE(playAddedMask);
	_msg.composeUINT32(playAddedAmount);
	_msg.composeUINT32(chipsHandStart);
	_msg.composeMsgBody(clientMsg_txtEx);
	_msg.composeMsgBody(currencyContext);
	_msg.composeUINT32(ratHoleSeconds);
	_msg.composeUINT32(maxRebuyChips_It);
	_msg.composeUINT32(totalRebuys_It);
	_msg.composeUINT64(pmChips);
	_msg.composeUINT32(userRollId);
}

void TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(errstr);
	_parser.parseUINT32(chips);
	_parser.parseUINT32(minLimit);
	_parser.parseUINT32(maxLimit);
	_parser.parseUINT32(quantum);
	_parser.parseBYTE(playAddedMask);
	_parser.parseUINT32(playAddedAmount);
	_parser.parseUINT32(chipsHandStart);
	_parser.parseMsgBody(clientMsg_txtEx);
	_parser.parseMsgBody(currencyContext);
	_parser.parseUINT32(ratHoleSeconds);
	_parser.parseUINT32(maxRebuyChips_It);
	_parser.parseUINT32(totalRebuys_It);
	_parser.parseUINT64(pmChips);
	_parser.parseUINT32(userRollId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_CHIPSAVAIL_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	UINT32 chips; _parser.parseUINT32(chips);
	AtfValidator::validateInt(_descr, "chips", chips, _checker, __FILE__, __LINE__);
	UINT32 minLimit; _parser.parseUINT32(minLimit);
	AtfValidator::validateInt(_descr, "minLimit", minLimit, _checker, __FILE__, __LINE__);
	UINT32 maxLimit; _parser.parseUINT32(maxLimit);
	AtfValidator::validateInt(_descr, "maxLimit", maxLimit, _checker, __FILE__, __LINE__);
	UINT32 quantum; _parser.parseUINT32(quantum);
	AtfValidator::validateInt(_descr, "quantum", quantum, _checker, __FILE__, __LINE__);
	BYTE playAddedMask; _parser.parseBYTE(playAddedMask);
	AtfValidator::validateInt(_descr, "playAddedMask", playAddedMask, _checker, __FILE__, __LINE__);
	UINT32 playAddedAmount; _parser.parseUINT32(playAddedAmount);
	AtfValidator::validateInt(_descr, "playAddedAmount", playAddedAmount, _checker, __FILE__, __LINE__);
	UINT32 chipsHandStart; _parser.parseUINT32(chipsHandStart);
	AtfValidator::validateInt(_descr, "chipsHandStart", chipsHandStart, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	size_t szCurrencyContext; _parser.skipMsgBody(szCurrencyContext);  /*currencyContext*/
	AtfValidator::validateInt(_descr, "currencyContext", szCurrencyContext, _checker, __FILE__, __LINE__);
	UINT32 ratHoleSeconds; _parser.parseUINT32(ratHoleSeconds);
	AtfValidator::validateInt(_descr, "ratHoleSeconds", ratHoleSeconds, _checker, __FILE__, __LINE__);
	UINT32 maxRebuyChips_It; _parser.parseUINT32(maxRebuyChips_It);
	AtfValidator::validateInt(_descr, "maxRebuyChips_It", maxRebuyChips_It, _checker, __FILE__, __LINE__);
	UINT32 totalRebuys_It; _parser.parseUINT32(totalRebuys_It);
	AtfValidator::validateInt(_descr, "totalRebuys_It", totalRebuys_It, _checker, __FILE__, __LINE__);
	UINT64 pmChips; _parser.parseUINT64(pmChips);
	AtfValidator::validateUint(_descr, "pmChips", pmChips, _checker, __FILE__, __LINE__);
	UINT32 userRollId; _parser.parseUINT32(userRollId);
	AtfValidator::validateInt(_descr, "userRollId", userRollId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SET_AUTO_REBUY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY::Protocol_MSG_TABLE_SET_AUTO_REBUY()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY::clear()
{
	autoRebuyOpt = 0;
	bigBets = 0;
	underBigBets = 0;
	underPercents = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY::equals(const Protocol_MSG_TABLE_SET_AUTO_REBUY& _o) const
{
	return autoRebuyOpt == _o.autoRebuyOpt &&
		bigBets == _o.bigBets &&
		underBigBets == _o.underBigBets &&
		underPercents == _o.underPercents;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SET_AUTO_REBUY).append(")");
	_buf.append(',');
	_buf.append("ar=");
	_buf.appendInt(autoRebuyOpt);
	_buf.append(',');
	_buf.append("arBB=");
	_buf.appendUint(bigBets);
	_buf.append(',');
	_buf.append("arFBB=");
	_buf.appendUint(underBigBets);
	_buf.append(',');
	_buf.append("arFPcnt=");
	_buf.appendUint(underPercents);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(autoRebuyOpt);
	_msg.composeUINT16(bigBets);
	_msg.composeUINT16(underBigBets);
	_msg.composeUINT16(underPercents);
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(autoRebuyOpt);
	_parser.parseUINT16(bigBets);
	_parser.parseUINT16(underBigBets);
	_parser.parseUINT16(underPercents);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SET_AUTO_REBUY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT8 autoRebuyOpt; _parser.parseINT8(autoRebuyOpt);
	AtfValidator::validateIntRange(_descr, "autoRebuyOpt", autoRebuyOpt, 0, 100, _checker, __FILE__, __LINE__);
	UINT16 bigBets; _parser.parseUINT16(bigBets);
	AtfValidator::validateIntMax(_descr, "bigBets", bigBets, 1000, _checker, __FILE__, __LINE__);
	UINT16 underBigBets; _parser.parseUINT16(underBigBets);
	AtfValidator::validateIntMax(_descr, "underBigBets", underBigBets, 1000, _checker, __FILE__, __LINE__);
	UINT16 underPercents; _parser.parseUINT16(underPercents);
	AtfValidator::validateIntMax(_descr, "underPercents", underPercents, 100, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY::Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY::clear()
{
	errcode = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY::equals(const Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY& _o) const
{
	return errcode == _o.errcode;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SET_AUTO_REBUY_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SET_AUTO_REBUY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN::Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN::clear()
{
	notAllInShowAllowed = false;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN::equals(const Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN& _o) const
{
	return notAllInShowAllowed == _o.notAllInShowAllowed;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SET_SHOW_WHEN_ALLIN).append(")");
	_buf.append(',');
	_buf.append("opt=");
	_buf.appendUint(notAllInShowAllowed);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(notAllInShowAllowed);
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(notAllInShowAllowed);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SET_SHOW_WHEN_ALLIN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	bool notAllInShowAllowed; _parser.parseBOOL(notAllInShowAllowed);
	AtfValidator::validateInt(_descr, "notAllInShowAllowed", notAllInShowAllowed, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SET_DEAL
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SET_DEAL::Protocol_MSG_TABLE_SET_DEAL()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_DEAL::clear()
{
	setOptions = false;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SET_DEAL::equals(const Protocol_MSG_TABLE_SET_DEAL& _o) const
{
	return setOptions == _o.setOptions;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SET_DEAL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SET_DEAL).append(")");
	_buf.append(',');
	_buf.append("opt=");
	_buf.appendUint(setOptions);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_DEAL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(setOptions);
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_DEAL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(setOptions);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SET_DEAL::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SET_DEAL";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	bool setOptions; _parser.parseBOOL(setOptions);
	AtfValidator::validateInt(_descr, "setOptions", setOptions, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE::Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE::clear()
{
	runItTwice = false;
	allinCashoutNotFavored = false;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE::equals(const Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE& _o) const
{
	return runItTwice == _o.runItTwice &&
		allinCashoutNotFavored == _o.allinCashoutNotFavored;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE).append(")");
	_buf.append(',');
	_buf.append("rit=");
	_buf.appendUint(runItTwice);
	_buf.append(',');
	_buf.append("nco=");
	_buf.appendUint(allinCashoutNotFavored);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(runItTwice);
	_msg.composeBOOL(allinCashoutNotFavored);
}

void TableClientThin::player::Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(runItTwice);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(allinCashoutNotFavored);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	bool runItTwice; _parser.parseBOOL(runItTwice);
	AtfValidator::validateInt(_descr, "runItTwice", runItTwice, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool allinCashoutNotFavored; _parser.parseBOOL(allinCashoutNotFavored);
	AtfValidator::validateInt(_descr, "allinCashoutNotFavored", allinCashoutNotFavored, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_REQUESTACTION_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION_REPLY::Protocol_MSG_TABLE_REQUESTACTION_REPLY()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION_REPLY::clear()
{
}

bool TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION_REPLY::equals(const Protocol_MSG_TABLE_REQUESTACTION_REPLY& _o) const
{
	return true;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_REQUESTACTION_REPLY).append(")");
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION_REPLY::composeMsg(CommMsgBody& _msg) const
{
}

void TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION_REPLY::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_REQUESTACTION_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_REQUESTACTION_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_FAST_FOLD
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_FAST_FOLD::Protocol_MSG_TABLE_FAST_FOLD()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_FAST_FOLD::clear()
{
	handId = 0;
	flags = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_FAST_FOLD::equals(const Protocol_MSG_TABLE_FAST_FOLD& _o) const
{
	return handId == _o.handId &&
		flags == _o.flags;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_FAST_FOLD::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_FAST_FOLD).append(")");
	_buf.append(',');
	_buf.append("hI=");
	_buf.appendUint64(handId);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_FAST_FOLD::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(handId);
	_msg.composeBYTE(flags);
}

void TableClientThin::player::Protocol_MSG_TABLE_FAST_FOLD::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(handId);
	if(_parser.parseEnded()) return;
	_parser.parseBYTE(flags);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_FAST_FOLD::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_FAST_FOLD";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	BYTE flags; _parser.parseBYTE(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_GOTO_NEXTHAND
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_GOTO_NEXTHAND::Protocol_MSG_TABLE_GOTO_NEXTHAND()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_GOTO_NEXTHAND::clear()
{
	handId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_GOTO_NEXTHAND::equals(const Protocol_MSG_TABLE_GOTO_NEXTHAND& _o) const
{
	return handId == _o.handId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_GOTO_NEXTHAND::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_GOTO_NEXTHAND).append(")");
	_buf.append(',');
	_buf.append("hI=");
	_buf.appendUint64(handId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_GOTO_NEXTHAND::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(handId);
}

void TableClientThin::player::Protocol_MSG_TABLE_GOTO_NEXTHAND::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(handId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_GOTO_NEXTHAND::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_GOTO_NEXTHAND";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_REFRESH
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_REFRESH::Protocol_MSG_TABLE_REFRESH()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_REFRESH::clear()
{
}

bool TableClientThin::player::Protocol_MSG_TABLE_REFRESH::equals(const Protocol_MSG_TABLE_REFRESH& _o) const
{
	return true;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_REFRESH::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_REFRESH).append(")");
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_REFRESH::composeMsg(CommMsgBody& _msg) const
{
}

void TableClientThin::player::Protocol_MSG_TABLE_REFRESH::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_REFRESH::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_REFRESH";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_REFRESH_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_REFRESH_REPLY::Protocol_MSG_TABLE_REFRESH_REPLY()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_REFRESH_REPLY::clear()
{
	italyReservedChips = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_REFRESH_REPLY::equals(const Protocol_MSG_TABLE_REFRESH_REPLY& _o) const
{
	return italyReservedChips == _o.italyReservedChips;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_REFRESH_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_REFRESH_REPLY).append(")");
	_buf.append(',');
	_buf.append("italyReservedChips=");
	_buf.appendUint(italyReservedChips);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_REFRESH_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(italyReservedChips);
}

void TableClientThin::player::Protocol_MSG_TABLE_REFRESH_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(italyReservedChips);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_REFRESH_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_REFRESH_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 italyReservedChips; _parser.parseUINT32(italyReservedChips);
	AtfValidator::validateInt(_descr, "italyReservedChips", italyReservedChips, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_PLAYNOW
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_PLAYNOW::Protocol_MSG_TABLE_PLAYNOW()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_PLAYNOW::clear()
{
}

bool TableClientThin::player::Protocol_MSG_TABLE_PLAYNOW::equals(const Protocol_MSG_TABLE_PLAYNOW& _o) const
{
	return true;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_PLAYNOW::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_PLAYNOW).append(")");
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_PLAYNOW::composeMsg(CommMsgBody& _msg) const
{
}

void TableClientThin::player::Protocol_MSG_TABLE_PLAYNOW::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_PLAYNOW::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_PLAYNOW";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_ENTROPY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_ENTROPY::Protocol_MSG_TABLE_ENTROPY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_ENTROPY::Protocol_MSG_TABLE_ENTROPY(Protocol_MSG_TABLE_ENTROPY&& _o)
	: enthropy(std::move(_o.enthropy))
{
}

TableClientThin::player::Protocol_MSG_TABLE_ENTROPY& TableClientThin::player::Protocol_MSG_TABLE_ENTROPY::operator=(Protocol_MSG_TABLE_ENTROPY&& _o)
{
	if(this != &_o)
	{
		enthropy = std::move(_o.enthropy);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_ENTROPY::clear()
{
	enthropy.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_ENTROPY::equals(const Protocol_MSG_TABLE_ENTROPY& _o) const
{
	return enthropy.size() == _o.enthropy.size() && memcmp(enthropy.ptr(), _o.enthropy.ptr(), enthropy.size()) == 0;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_ENTROPY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_ENTROPY).append(")");
	_buf.append(',');
	_buf.append("enthropy=");
	ThinAtf::AtfTempl<PBlock>::ToTraceString(_buf, enthropy);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_ENTROPY::composeMsg(CommMsgBody& _msg) const
{
	_msg._composeVarBlock(enthropy.ptr(), enthropy.size());
}

void TableClientThin::player::Protocol_MSG_TABLE_ENTROPY::parseMsg(CommMsgParser& _parser)
{
	_parser.parsePBlock(enthropy);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_ENTROPY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_ENTROPY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const BYTE* enthropy; size_t szEnthropy; _parser._parseVarBlock(enthropy, szEnthropy);  /*enthropy*/
	AtfValidator::validateIntMax(_descr, "enthropy", szEnthropy, 8192, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_GET_DEAL
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL::Protocol_MSG_TABLE_GET_DEAL()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL::clear()
{
}

bool TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL::equals(const Protocol_MSG_TABLE_GET_DEAL& _o) const
{
	return true;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_GET_DEAL).append(")");
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL::composeMsg(CommMsgBody& _msg) const
{
}

void TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_GET_DEAL";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_GET_DEAL_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL_REPLY::Protocol_MSG_TABLE_GET_DEAL_REPLY()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL_REPLY::clear()
{
	dealOptionSet = false;
}

bool TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL_REPLY::equals(const Protocol_MSG_TABLE_GET_DEAL_REPLY& _o) const
{
	return dealOptionSet == _o.dealOptionSet;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_GET_DEAL_REPLY).append(")");
	_buf.append(',');
	_buf.append("dealOptionSet=");
	_buf.appendUint(dealOptionSet);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(dealOptionSet);
}

void TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(dealOptionSet);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_GET_DEAL_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_GET_DEAL_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	bool dealOptionSet; _parser.parseBOOL(dealOptionSet);
	AtfValidator::validateInt(_descr, "dealOptionSet", dealOptionSet, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_ACTION
//=================================================================

// @Override
void TableClientThin::player::Protocol_MSG_TABLE_ACTION::composeMsg(CommMsgBody& _body) const
{
	_body.composeINT8(action);
	_body.composeUINT32(amount);
	if (actionId != 0)
	{
		_body.composeUINT32(actionId);
		_body.composeBYTE(flags);
	}
}

TableClientThin::player::Protocol_MSG_TABLE_ACTION::Protocol_MSG_TABLE_ACTION()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_ACTION::clear()
{
	action = '0';
	amount = 0;
	actionId = 0;
	flags = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_ACTION::equals(const Protocol_MSG_TABLE_ACTION& _o) const
{
	return action == _o.action &&
		amount == _o.amount &&
		actionId == _o.actionId &&
		flags == _o.flags;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_ACTION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_ACTION).append(")");
	_buf.append(',');
	_buf.append("a=");
	_buf.append(action);
	_buf.append(',');
	_buf.append("v=");
	_buf.appendUint(amount);
	_buf.append(',');
	_buf.append("seq=");
	_buf.appendUint(actionId);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_ACTION::parseMsg(CommMsgParser& _parser)
{
	{ INT8 _n; _parser.parseINT8(_n); action = _n; }
	_parser.parseUINT32(amount);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(actionId);
	if(_parser.parseEnded()) return;
	_parser.parseBYTE(flags);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_ACTION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_ACTION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	char action; { INT8 _n; _parser.parseINT8(_n); action = _n; }
	AtfValidator::validateIntRange(_descr, "action", action, 0x20, 'z', _checker, __FILE__, __LINE__);
	UINT32 amount; _parser.parseUINT32(amount);
	AtfValidator::validateIntMax(_descr, "amount", amount, 2000000000, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 actionId; _parser.parseUINT32(actionId);
	AtfValidator::validateInt(_descr, "actionId", actionId, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	BYTE flags; _parser.parseBYTE(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_CANCELACTION
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_CANCELACTION::Protocol_MSG_TABLE_CANCELACTION()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_CANCELACTION::Protocol_MSG_TABLE_CANCELACTION(Protocol_MSG_TABLE_CANCELACTION&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, isActionTimedOut(std::move(_o.isActionTimedOut))
{
}

TableClientThin::player::Protocol_MSG_TABLE_CANCELACTION& TableClientThin::player::Protocol_MSG_TABLE_CANCELACTION::operator=(Protocol_MSG_TABLE_CANCELACTION&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		isActionTimedOut = std::move(_o.isActionTimedOut);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_CANCELACTION::clear()
{
	errcode = 0;
	errstr.clear();
	isActionTimedOut = true;
}

bool TableClientThin::player::Protocol_MSG_TABLE_CANCELACTION::equals(const Protocol_MSG_TABLE_CANCELACTION& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		isActionTimedOut == _o.isActionTimedOut;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_CANCELACTION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_CANCELACTION).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("errstr=");
	_buf.append(errstr);
	_buf.append(',');
	_buf.append("to=");
	_buf.appendUint(isActionTimedOut);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_CANCELACTION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(errstr);
	_msg.composeBOOL(isActionTimedOut);
}

void TableClientThin::player::Protocol_MSG_TABLE_CANCELACTION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(errstr);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(isActionTimedOut);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_CANCELACTION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_CANCELACTION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool isActionTimedOut; _parser.parseBOOL(isActionTimedOut);
	AtfValidator::validateInt(_descr, "isActionTimedOut", isActionTimedOut, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    TournPlayerKickMsgExtraShared
//=================================================================

TableClientThin::player::TournPlayerKickMsgExtraShared::TournPlayerKickMsgExtraShared()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::TournPlayerKickMsgExtraShared::TournPlayerKickMsgExtraShared(TournPlayerKickMsgExtraShared&& _o)
	: socialToken(std::move(_o.socialToken))
	, nextRecurringTournId(std::move(_o.nextRecurringTournId))
	, nextSchedTourn(std::move(_o.nextSchedTourn))
	, headBounty(std::move(_o.headBounty))
{
}

TableClientThin::player::TournPlayerKickMsgExtraShared& TableClientThin::player::TournPlayerKickMsgExtraShared::operator=(TournPlayerKickMsgExtraShared&& _o)
{
	if(this != &_o)
	{
		socialToken = std::move(_o.socialToken);
		nextRecurringTournId = std::move(_o.nextRecurringTournId);
		nextSchedTourn = std::move(_o.nextSchedTourn);
		headBounty = std::move(_o.headBounty);
	}
	return *this;
}

#endif

void TableClientThin::player::TournPlayerKickMsgExtraShared::clear()
{
	socialToken.clear();
	nextRecurringTournId = 0;
	nextSchedTourn.clear();
	headBounty = 0;
}

bool TableClientThin::player::TournPlayerKickMsgExtraShared::equals(const TournPlayerKickMsgExtraShared& _o) const
{
	return socialToken.equals(_o.socialToken) &&
		nextRecurringTournId == _o.nextRecurringTournId &&
		nextSchedTourn.equals(_o.nextSchedTourn) &&
		headBounty == _o.headBounty;
}

const char *TableClientThin::player::TournPlayerKickMsgExtraShared::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("token=");
	_buf.append(socialToken);
	_buf.append(',');
	_buf.append("nextId=");
	_buf.appendUint(nextRecurringTournId);
	if( nextRecurringTournId )
	{
		_buf.append(',');
		_buf.append("nextSchedTourn=");
		nextSchedTourn.toTraceString(_buf);
	}
	_buf.append(',');
	_buf.append("headBounty=");
	_buf.appendUint(headBounty);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::TournPlayerKickMsgExtraShared::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(socialToken);
	_msg.composeUINT32(nextRecurringTournId);
	if( nextRecurringTournId )
	{
		nextSchedTourn.composeMsg(_msg);
	}
	_msg.composeUINT32(headBounty);
}

void TableClientThin::player::TournPlayerKickMsgExtraShared::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(socialToken);
	_parser.parseUINT32(nextRecurringTournId);
	if( nextRecurringTournId )
	{
		nextSchedTourn.parseMsg(_parser);
	}
	_parser.parseUINT32(headBounty);
}

/*static*/ void TableClientThin::player::TournPlayerKickMsgExtraShared::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT32 nextRecurringTournId = 0;
	_parser.parseStringN(_dummy, 0, "socialToken"); size_t szSocialToken = strlen(_dummy);
	AtfValidator::validateInt(_descr, "socialToken", szSocialToken, _checker, __FILE__, __LINE__);
	_parser.parseUINT32(nextRecurringTournId);
	AtfValidator::validateInt(_descr, "nextRecurringTournId", nextRecurringTournId, _checker, __FILE__, __LINE__);
	if( nextRecurringTournId )
	{
		PString _descbuf;
		TableCommonThin::P_ScheduledTournament::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("nextSchedTourn"), _fieldsWithUnparsedContent);
	}
	UINT32 headBounty; _parser.parseUINT32(headBounty);
	AtfValidator::validateInt(_descr, "headBounty", headBounty, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TableSitKickMsgEx
//=================================================================

TableClientThin::player::TableSitKickMsgEx::TableSitKickMsgEx()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::TableSitKickMsgEx::TableSitKickMsgEx(TableSitKickMsgEx&& _o)
	: msgId(std::move(_o.msgId))
	, tpkes(std::move(_o.tpkes))
	, str_popup(std::move(_o.str_popup))
	, msgServiceBitMask(std::move(_o.msgServiceBitMask))
	, award(std::move(_o.award))
	, placeI(std::move(_o.placeI))
	, tournId(std::move(_o.tournId))
	, nextFlightTargetServer(std::move(_o.nextFlightTargetServer))
	, nextFlightTournName(std::move(_o.nextFlightTournName))
	, str_popup2(std::move(_o.str_popup2))
	, socialToken(std::move(_o.socialToken))
	, numMissedOrbits(std::move(_o.numMissedOrbits))
	, bounty(std::move(_o.bounty))
	, reEntryDeadline(std::move(_o.reEntryDeadline))
	, chips(std::move(_o.chips))
	, targetChips(std::move(_o.targetChips))
	, progressivePlusInitialBuyInTierId(std::move(_o.progressivePlusInitialBuyInTierId))
{
}

TableClientThin::player::TableSitKickMsgEx& TableClientThin::player::TableSitKickMsgEx::operator=(TableSitKickMsgEx&& _o)
{
	if(this != &_o)
	{
		msgId = std::move(_o.msgId);
		tpkes = std::move(_o.tpkes);
		str_popup = std::move(_o.str_popup);
		msgServiceBitMask = std::move(_o.msgServiceBitMask);
		award = std::move(_o.award);
		placeI = std::move(_o.placeI);
		tournId = std::move(_o.tournId);
		nextFlightTargetServer = std::move(_o.nextFlightTargetServer);
		nextFlightTournName = std::move(_o.nextFlightTournName);
		str_popup2 = std::move(_o.str_popup2);
		socialToken = std::move(_o.socialToken);
		numMissedOrbits = std::move(_o.numMissedOrbits);
		bounty = std::move(_o.bounty);
		reEntryDeadline = std::move(_o.reEntryDeadline);
		chips = std::move(_o.chips);
		targetChips = std::move(_o.targetChips);
		progressivePlusInitialBuyInTierId = std::move(_o.progressivePlusInitialBuyInTierId);
	}
	return *this;
}

#endif

void TableClientThin::player::TableSitKickMsgEx::clear()
{
	msgId = 0;
	tpkes.clear();
	str_popup.clear();
	msgServiceBitMask = 0;
	award = 0;
	placeI = 0;
	tournId = 0;
	nextFlightTargetServer.clear();
	nextFlightTournName.clear();
	str_popup2.clear();
	socialToken.clear();
	numMissedOrbits = 0;
	bounty = 0;
	reEntryDeadline.setNull();
	chips = 0;
	targetChips = 0;
	progressivePlusInitialBuyInTierId = 0;
}

bool TableClientThin::player::TableSitKickMsgEx::equals(const TableSitKickMsgEx& _o) const
{
	return msgId == _o.msgId &&
		tpkes.equals(_o.tpkes) &&
		str_popup.equals(_o.str_popup) &&
		msgServiceBitMask == _o.msgServiceBitMask &&
		award == _o.award &&
		placeI == _o.placeI &&
		tournId == _o.tournId &&
		nextFlightTargetServer.equals(_o.nextFlightTargetServer) &&
		nextFlightTournName.equals(_o.nextFlightTournName) &&
		str_popup2.equals(_o.str_popup2) &&
		socialToken.equals(_o.socialToken) &&
		numMissedOrbits == _o.numMissedOrbits &&
		bounty == _o.bounty &&
		reEntryDeadline.equals(_o.reEntryDeadline) &&
		chips == _o.chips &&
		targetChips == _o.targetChips &&
		progressivePlusInitialBuyInTierId == _o.progressivePlusInitialBuyInTierId;
}

const char *TableClientThin::player::TableSitKickMsgEx::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("msgId=");
	_buf.appendUint(msgId);
	if(msgId == ClientMsg_Tournmt_Winner)
	{
		_buf.append(',');
		_buf.append("tpkes=");
		tpkes.toTraceString(_buf);
		_buf.append(',');
		_buf.append("str_popup=");
		_buf.append(str_popup);
		_buf.append(',');
		_buf.append("msgServiceBitMask=");
		_buf.appendUint(msgServiceBitMask);
		_buf.append(',');
		_buf.append("award=");
		_buf.appendInt(award);
	}
	else if(msgId == ClientMsg_Tournmt_Kicked)
	{
		_buf.append(',');
		_buf.append("placeI=");
		_buf.appendUint(placeI);
		_buf.append(',');
		_buf.append("tpkes=");
		tpkes.toTraceString(_buf);
		_buf.append(',');
		_buf.append("str_popup=");
		_buf.append(str_popup);
		_buf.append(',');
		_buf.append("msgServiceBitMask=");
		_buf.appendUint(msgServiceBitMask);
		_buf.append(',');
		_buf.append("award=");
		_buf.appendInt(award);
	}
	else if(msgId == ClientMsg_Tournmt_Flight_Winner)
	{
		_buf.append(',');
		_buf.append("tournId=");
		_buf.appendUint(tournId);
		_buf.append(',');
		_buf.append("nextFlightTargetServer=");
		_buf.append(nextFlightTargetServer);
		_buf.append(',');
		_buf.append("nextFlightTournName=");
		ThinAtf::AtfTempl<I18nPString>::ToTraceString(_buf, nextFlightTournName);
		_buf.append(',');
		_buf.append("str_popup=");
		_buf.append(str_popup);
		_buf.append(',');
		_buf.append("msgServiceBitMask=");
		_buf.appendUint(msgServiceBitMask);
		_buf.append(',');
		_buf.append("award=");
		_buf.appendInt(award);
	}
	else if(msgId == ClientMsg_Tournmt_Kicked_Popup)
	{
		_buf.append(',');
		_buf.append("placeI=");
		_buf.appendUint(placeI);
		_buf.append(',');
		_buf.append("str_popup=");
		_buf.append(str_popup);
		_buf.append(',');
		_buf.append("tpkes=");
		tpkes.toTraceString(_buf);
		_buf.append(',');
		_buf.append("str_popup2=");
		_buf.append(str_popup2);
		_buf.append(',');
		_buf.append("msgServiceBitMask=");
		_buf.appendUint(msgServiceBitMask);
		_buf.append(',');
		_buf.append("award=");
		_buf.appendInt(award);
	}
	else if(msgId == ClientMsg_Tournmt_Sag_Winner_Custom_Prize)
	{
		_buf.append(',');
		_buf.append("placeI=");
		_buf.appendUint(placeI);
		_buf.append(',');
		_buf.append("str_popup=");
		_buf.append(str_popup);
		_buf.append(',');
		_buf.append("socialToken=");
		_buf.append(socialToken);
		_buf.append(',');
		_buf.append("str_popup2=");
		_buf.append(str_popup2);
		_buf.append(',');
		_buf.append("msgServiceBitMask=");
		_buf.appendUint(msgServiceBitMask);
		_buf.append(',');
		_buf.append("award=");
		_buf.appendInt(award);
	}
	else if(msgId == ClientMsg_Action_Kicked_Ante)
	{
		_buf.append(',');
		_buf.append("numMissedOrbits=");
		_buf.appendInt(numMissedOrbits);
	}
	else if(msgId == ClientMsg_Action_Kicked_BBlinds)
	{
		_buf.append(',');
		_buf.append("numMissedOrbits=");
		_buf.appendInt(numMissedOrbits);
	}
	_buf.append(',');
	_buf.append("bounty=");
	_buf.appendInt(bounty);
	_buf.append(',');
	_buf.append("reEntryDeadline=");
	ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, reEntryDeadline);
	_buf.append(',');
	_buf.append("chips=");
	_buf.appendInt(chips);
	_buf.append(',');
	_buf.append("targetChips=");
	_buf.appendInt(targetChips);
	_buf.append(',');
	_buf.append("progressivePlusInitialBuyInTierId=");
	_buf.appendUint(progressivePlusInitialBuyInTierId);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::TableSitKickMsgEx::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(msgId);
	if(msgId == ClientMsg_Tournmt_Winner)
	{
		tpkes.composeMsg(_msg);
		_msg.composeString(str_popup);
		_msg.composeUINT32(msgServiceBitMask);
		_msg.composeINT32(award);
	}
	else if(msgId == ClientMsg_Tournmt_Kicked)
	{
		_msg.composeUINT32(placeI);
		tpkes.composeMsg(_msg);
		_msg.composeString(str_popup);
		_msg.composeUINT32(msgServiceBitMask);
		_msg.composeINT32(award);
	}
	else if(msgId == ClientMsg_Tournmt_Flight_Winner)
	{
		_msg.composeUINT32(tournId);
		_msg.composeString(nextFlightTargetServer);
		nextFlightTournName.compose(_msg);
		_msg.composeString(str_popup);
		_msg.composeUINT32(msgServiceBitMask);
		_msg.composeINT32(award);
	}
	else if(msgId == ClientMsg_Tournmt_Kicked_Popup)
	{
		_msg.composeUINT32(placeI);
		_msg.composeString(str_popup);
		tpkes.composeMsg(_msg);
		_msg.composeString(str_popup2);
		_msg.composeUINT32(msgServiceBitMask);
		_msg.composeINT32(award);
	}
	else if(msgId == ClientMsg_Tournmt_Sag_Winner_Custom_Prize)
	{
		_msg.composeUINT32(placeI);
		_msg.composeString(str_popup);
		_msg.composeString(socialToken);
		_msg.composeString(str_popup2);
		_msg.composeUINT32(msgServiceBitMask);
		_msg.composeINT32(award);
	}
	else if(msgId == ClientMsg_Action_Kicked_Ante)
	{
		_msg.composeINT32(numMissedOrbits);
	}
	else if(msgId == ClientMsg_Action_Kicked_BBlinds)
	{
		_msg.composeINT32(numMissedOrbits);
	}
	_msg.composeINT32(bounty);
	_msg.composeSrvTime(reEntryDeadline);
	_msg.composeINT32(chips);
	_msg.composeINT32(targetChips);
	_msg.composeUINT32(progressivePlusInitialBuyInTierId);
}

void TableClientThin::player::TableSitKickMsgEx::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(msgId);
	if(msgId == ClientMsg_Tournmt_Winner)
	{
		tpkes.parseMsg(_parser);
		_parser.parseStringP(str_popup);
		_parser.parseUINT32(msgServiceBitMask);
		_parser.parseINT32(award);
	}
	else if(msgId == ClientMsg_Tournmt_Kicked)
	{
		_parser.parseUINT32(placeI);
		tpkes.parseMsg(_parser);
		_parser.parseStringP(str_popup);
		_parser.parseUINT32(msgServiceBitMask);
		_parser.parseINT32(award);
	}
	else if(msgId == ClientMsg_Tournmt_Flight_Winner)
	{
		_parser.parseUINT32(tournId);
		_parser.parseStringP(nextFlightTargetServer);
		nextFlightTournName.parse(_parser);
		_parser.parseStringP(str_popup);
		_parser.parseUINT32(msgServiceBitMask);
		_parser.parseINT32(award);
	}
	else if(msgId == ClientMsg_Tournmt_Kicked_Popup)
	{
		_parser.parseUINT32(placeI);
		_parser.parseStringP(str_popup);
		tpkes.parseMsg(_parser);
		_parser.parseStringP(str_popup2);
		_parser.parseUINT32(msgServiceBitMask);
		_parser.parseINT32(award);
	}
	else if(msgId == ClientMsg_Tournmt_Sag_Winner_Custom_Prize)
	{
		_parser.parseUINT32(placeI);
		_parser.parseStringP(str_popup);
		_parser.parseStringP(socialToken);
		_parser.parseStringP(str_popup2);
		_parser.parseUINT32(msgServiceBitMask);
		_parser.parseINT32(award);
	}
	else if(msgId == ClientMsg_Action_Kicked_Ante)
	{
		_parser.parseINT32(numMissedOrbits);
	}
	else if(msgId == ClientMsg_Action_Kicked_BBlinds)
	{
		_parser.parseINT32(numMissedOrbits);
	}
	_parser.parseINT32(bounty);
	if(_parser.parseEnded()) return;
	_parser.parseSrvTime(reEntryDeadline);
	if(_parser.parseEnded()) return;
	_parser.parseINT32(chips);
	if(_parser.parseEnded()) return;
	_parser.parseINT32(targetChips);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(progressivePlusInitialBuyInTierId);
}

/*static*/ void TableClientThin::player::TableSitKickMsgEx::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT16 msgId = 0;
	_parser.parseUINT16(msgId);
	AtfValidator::validateInt(_descr, "msgId", msgId, _checker, __FILE__, __LINE__);
	if(msgId == ClientMsg_Tournmt_Winner)
	{
		PString _descbuf;
		TournPlayerKickMsgExtraShared::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tpkes"), _fieldsWithUnparsedContent);
		_parser.parseStringN(_dummy, 0, "str_popup"); size_t szStr_popup = strlen(_dummy);
		AtfValidator::validateInt(_descr, "str_popup", szStr_popup, _checker, __FILE__, __LINE__);
		UINT32 msgServiceBitMask; _parser.parseUINT32(msgServiceBitMask);
		AtfValidator::validateInt(_descr, "msgServiceBitMask", msgServiceBitMask, _checker, __FILE__, __LINE__);
		INT32 award; _parser.parseINT32(award);
		AtfValidator::validateInt(_descr, "award", award, _checker, __FILE__, __LINE__);
	}
	else if(msgId == ClientMsg_Tournmt_Kicked)
	{
		UINT32 placeI; _parser.parseUINT32(placeI);
		AtfValidator::validateInt(_descr, "placeI", placeI, _checker, __FILE__, __LINE__);
		PString _descbuf;
		TournPlayerKickMsgExtraShared::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tpkes"), _fieldsWithUnparsedContent);
		_parser.parseStringN(_dummy, 0, "str_popup"); size_t szStr_popup = strlen(_dummy);
		AtfValidator::validateInt(_descr, "str_popup", szStr_popup, _checker, __FILE__, __LINE__);
		UINT32 msgServiceBitMask; _parser.parseUINT32(msgServiceBitMask);
		AtfValidator::validateInt(_descr, "msgServiceBitMask", msgServiceBitMask, _checker, __FILE__, __LINE__);
		INT32 award; _parser.parseINT32(award);
		AtfValidator::validateInt(_descr, "award", award, _checker, __FILE__, __LINE__);
	}
	else if(msgId == ClientMsg_Tournmt_Flight_Winner)
	{
		UINT32 tournId; _parser.parseUINT32(tournId);
		AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "nextFlightTargetServer"); size_t szNextFlightTargetServer = strlen(_dummy);
		AtfValidator::validateInt(_descr, "nextFlightTargetServer", szNextFlightTargetServer, _checker, __FILE__, __LINE__);
		I18nPString nextFlightTournName; nextFlightTournName.parse(_parser);
		_parser.parseStringN(_dummy, 0, "str_popup"); size_t szStr_popup = strlen(_dummy);
		AtfValidator::validateInt(_descr, "str_popup", szStr_popup, _checker, __FILE__, __LINE__);
		UINT32 msgServiceBitMask; _parser.parseUINT32(msgServiceBitMask);
		AtfValidator::validateInt(_descr, "msgServiceBitMask", msgServiceBitMask, _checker, __FILE__, __LINE__);
		INT32 award; _parser.parseINT32(award);
		AtfValidator::validateInt(_descr, "award", award, _checker, __FILE__, __LINE__);
	}
	else if(msgId == ClientMsg_Tournmt_Kicked_Popup)
	{
		UINT32 placeI; _parser.parseUINT32(placeI);
		AtfValidator::validateInt(_descr, "placeI", placeI, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "str_popup"); size_t szStr_popup = strlen(_dummy);
		AtfValidator::validateInt(_descr, "str_popup", szStr_popup, _checker, __FILE__, __LINE__);
		PString _descbuf;
		TournPlayerKickMsgExtraShared::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tpkes"), _fieldsWithUnparsedContent);
		_parser.parseStringN(_dummy, 0, "str_popup2"); size_t szStr_popup2 = strlen(_dummy);
		AtfValidator::validateInt(_descr, "str_popup2", szStr_popup2, _checker, __FILE__, __LINE__);
		UINT32 msgServiceBitMask; _parser.parseUINT32(msgServiceBitMask);
		AtfValidator::validateInt(_descr, "msgServiceBitMask", msgServiceBitMask, _checker, __FILE__, __LINE__);
		INT32 award; _parser.parseINT32(award);
		AtfValidator::validateInt(_descr, "award", award, _checker, __FILE__, __LINE__);
	}
	else if(msgId == ClientMsg_Tournmt_Sag_Winner_Custom_Prize)
	{
		UINT32 placeI; _parser.parseUINT32(placeI);
		AtfValidator::validateInt(_descr, "placeI", placeI, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "str_popup"); size_t szStr_popup = strlen(_dummy);
		AtfValidator::validateInt(_descr, "str_popup", szStr_popup, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "socialToken"); size_t szSocialToken = strlen(_dummy);
		AtfValidator::validateInt(_descr, "socialToken", szSocialToken, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "str_popup2"); size_t szStr_popup2 = strlen(_dummy);
		AtfValidator::validateInt(_descr, "str_popup2", szStr_popup2, _checker, __FILE__, __LINE__);
		UINT32 msgServiceBitMask; _parser.parseUINT32(msgServiceBitMask);
		AtfValidator::validateInt(_descr, "msgServiceBitMask", msgServiceBitMask, _checker, __FILE__, __LINE__);
		INT32 award; _parser.parseINT32(award);
		AtfValidator::validateInt(_descr, "award", award, _checker, __FILE__, __LINE__);
	}
	else if(msgId == ClientMsg_Action_Kicked_Ante)
	{
		INT32 numMissedOrbits; _parser.parseINT32(numMissedOrbits);
		AtfValidator::validateInt(_descr, "numMissedOrbits", numMissedOrbits, _checker, __FILE__, __LINE__);
	}
	else if(msgId == ClientMsg_Action_Kicked_BBlinds)
	{
		INT32 numMissedOrbits; _parser.parseINT32(numMissedOrbits);
		AtfValidator::validateInt(_descr, "numMissedOrbits", numMissedOrbits, _checker, __FILE__, __LINE__);
	}
	INT32 bounty; _parser.parseINT32(bounty);
	AtfValidator::validateInt(_descr, "bounty", bounty, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	SrvTime reEntryDeadline; _parser.parseSrvTime(reEntryDeadline);
	AtfValidator::validateSrvDateTime(_descr, "reEntryDeadline", reEntryDeadline, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	INT32 chips; _parser.parseINT32(chips);
	AtfValidator::validateInt(_descr, "chips", chips, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	INT32 targetChips; _parser.parseINT32(targetChips);
	AtfValidator::validateInt(_descr, "targetChips", targetChips, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 progressivePlusInitialBuyInTierId; _parser.parseUINT32(progressivePlusInitialBuyInTierId);
	AtfValidator::validateInt(_descr, "progressivePlusInitialBuyInTierId", progressivePlusInitialBuyInTierId, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_TABLE_SIT_KICK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SIT_KICK::Protocol_MSG_TABLE_SIT_KICK()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_SIT_KICK::Protocol_MSG_TABLE_SIT_KICK(Protocol_MSG_TABLE_SIT_KICK&& _o)
	: kickstr(std::move(_o.kickstr))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
	, totalBetInfo(std::move(_o.totalBetInfo))
	, forceCloseTable(std::move(_o.forceCloseTable))
{
}

TableClientThin::player::Protocol_MSG_TABLE_SIT_KICK& TableClientThin::player::Protocol_MSG_TABLE_SIT_KICK::operator=(Protocol_MSG_TABLE_SIT_KICK&& _o)
{
	if(this != &_o)
	{
		kickstr = std::move(_o.kickstr);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
		totalBetInfo = std::move(_o.totalBetInfo);
		forceCloseTable = std::move(_o.forceCloseTable);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_SIT_KICK::clear()
{
	kickstr.clear();
	clientMsg_txtEx.clear();
	totalBetInfo.clear();
	forceCloseTable = false;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SIT_KICK::equals(const Protocol_MSG_TABLE_SIT_KICK& _o) const
{
	return kickstr.equals(_o.kickstr) &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx) &&
		totalBetInfo.equals(_o.totalBetInfo) &&
		forceCloseTable == _o.forceCloseTable;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SIT_KICK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SIT_KICK).append(")");
	_buf.append(',');
	_buf.append("kickstr=");
	_buf.append(kickstr);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	_buf.append(',');
	_buf.append("totalBetInfo=");
	totalBetInfo.toTraceString(_buf);
	_buf.append(',');
	_buf.append("forceCloseTable=");
	_buf.appendUint(forceCloseTable);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT_KICK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(kickstr);
	_msg.composeMsgBody(clientMsg_txtEx);
	totalBetInfo.composeMsg(_msg);
	_msg.composeBOOL(forceCloseTable);
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT_KICK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(kickstr);
	_parser.parseMsgBody(clientMsg_txtEx);
	totalBetInfo.parseMsg(_parser);
	_parser.parseBOOL(forceCloseTable);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SIT_KICK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SIT_KICK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "kickstr"); size_t szKickstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "kickstr", szKickstr, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	PString _descbuf;
	TotalBetInfo::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("totalBetInfo"), _fieldsWithUnparsedContent);
	bool forceCloseTable; _parser.parseBOOL(forceCloseTable);
	AtfValidator::validateInt(_descr, "forceCloseTable", forceCloseTable, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SIT2_KICK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SIT2_KICK::Protocol_MSG_TABLE_SIT2_KICK()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_SIT2_KICK::Protocol_MSG_TABLE_SIT2_KICK(Protocol_MSG_TABLE_SIT2_KICK&& _o)
	: kickstr(std::move(_o.kickstr))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
{
}

TableClientThin::player::Protocol_MSG_TABLE_SIT2_KICK& TableClientThin::player::Protocol_MSG_TABLE_SIT2_KICK::operator=(Protocol_MSG_TABLE_SIT2_KICK&& _o)
{
	if(this != &_o)
	{
		kickstr = std::move(_o.kickstr);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_SIT2_KICK::clear()
{
	kickstr.clear();
	clientMsg_txtEx.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_SIT2_KICK::equals(const Protocol_MSG_TABLE_SIT2_KICK& _o) const
{
	return kickstr.equals(_o.kickstr) &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SIT2_KICK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SIT2_KICK).append(")");
	_buf.append(',');
	_buf.append("kickstr=");
	_buf.append(kickstr);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT2_KICK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(kickstr);
	_msg.composeMsgBody(clientMsg_txtEx);
}

void TableClientThin::player::Protocol_MSG_TABLE_SIT2_KICK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(kickstr);
	_parser.parseMsgBody(clientMsg_txtEx);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SIT2_KICK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SIT2_KICK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "kickstr"); size_t szKickstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "kickstr", szKickstr, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_MTT_CHANGETABLE
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_MTT_CHANGETABLE::Protocol_MSG_TABLE_MTT_CHANGETABLE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_MTT_CHANGETABLE::Protocol_MSG_TABLE_MTT_CHANGETABLE(Protocol_MSG_TABLE_MTT_CHANGETABLE&& _o)
	: errcode(std::move(_o.errcode))
	, msg(std::move(_o.msg))
{
}

TableClientThin::player::Protocol_MSG_TABLE_MTT_CHANGETABLE& TableClientThin::player::Protocol_MSG_TABLE_MTT_CHANGETABLE::operator=(Protocol_MSG_TABLE_MTT_CHANGETABLE&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		msg = std::move(_o.msg);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_MTT_CHANGETABLE::clear()
{
	errcode = 0;
	msg.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_MTT_CHANGETABLE::equals(const Protocol_MSG_TABLE_MTT_CHANGETABLE& _o) const
{
	return errcode == _o.errcode &&
		msg.equals(_o.msg);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_MTT_CHANGETABLE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_MTT_CHANGETABLE).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	_buf.append(',');
	_buf.append("msg=");
	_buf.append(msg);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_MTT_CHANGETABLE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	_msg.composeString(msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_MTT_CHANGETABLE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	_parser.parseStringP(msg);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_MTT_CHANGETABLE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_MTT_CHANGETABLE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode; _parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "msg"); size_t szMsg = strlen(_dummy);
	AtfValidator::validateInt(_descr, "msg", szMsg, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_ADMIN_INFO
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_ADMIN_INFO::Protocol_MSG_TABLE_ADMIN_INFO()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_ADMIN_INFO::Protocol_MSG_TABLE_ADMIN_INFO(Protocol_MSG_TABLE_ADMIN_INFO&& _o)
	: errstr(std::move(_o.errstr))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
{
}

TableClientThin::player::Protocol_MSG_TABLE_ADMIN_INFO& TableClientThin::player::Protocol_MSG_TABLE_ADMIN_INFO::operator=(Protocol_MSG_TABLE_ADMIN_INFO&& _o)
{
	if(this != &_o)
	{
		errstr = std::move(_o.errstr);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_ADMIN_INFO::clear()
{
	errstr.clear();
	clientMsg_txtEx.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_ADMIN_INFO::equals(const Protocol_MSG_TABLE_ADMIN_INFO& _o) const
{
	return errstr.equals(_o.errstr) &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_ADMIN_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_ADMIN_INFO).append(")");
	_buf.append(',');
	_buf.append("errstr=");
	_buf.append(errstr);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_ADMIN_INFO::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(errstr);
	_msg.composeMsgBody(clientMsg_txtEx);
}

void TableClientThin::player::Protocol_MSG_TABLE_ADMIN_INFO::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(errstr);
	_parser.parseMsgBody(clientMsg_txtEx);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_ADMIN_INFO::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_ADMIN_INFO";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SAGMAX_USER_DRAW
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SAGMAX_USER_DRAW::Protocol_MSG_TABLE_SAGMAX_USER_DRAW()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_SAGMAX_USER_DRAW::clear()
{
	action = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SAGMAX_USER_DRAW::equals(const Protocol_MSG_TABLE_SAGMAX_USER_DRAW& _o) const
{
	return action == _o.action;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SAGMAX_USER_DRAW::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SAGMAX_USER_DRAW).append(")");
	_buf.append(',');
	_buf.append("a=");
	_buf.appendInt(action);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SAGMAX_USER_DRAW::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(action);
}

void TableClientThin::player::Protocol_MSG_TABLE_SAGMAX_USER_DRAW::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(action);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SAGMAX_USER_DRAW::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SAGMAX_USER_DRAW";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 action; _parser.parseINT32(action);
	AtfValidator::validateInt(_descr, "action", action, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SITTING_STATUS
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_SITTING_STATUS::Protocol_MSG_TABLE_SITTING_STATUS()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_SITTING_STATUS::clear()
{
	sittingStatus = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_SITTING_STATUS::equals(const Protocol_MSG_TABLE_SITTING_STATUS& _o) const
{
	return sittingStatus == _o.sittingStatus;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_SITTING_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SITTING_STATUS).append(")");
	_buf.append(',');
	_buf.append("ss=");
	_buf.appendUint(sittingStatus);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_SITTING_STATUS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(sittingStatus);
}

void TableClientThin::player::Protocol_MSG_TABLE_SITTING_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(sittingStatus);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_SITTING_STATUS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SITTING_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE sittingStatus; _parser.parseBYTE(sittingStatus);
	AtfValidator::validateInt(_descr, "sittingStatus", sittingStatus, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_BOUNTY_GREETINGS
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_BOUNTY_GREETINGS::Protocol_MSG_TABLE_BOUNTY_GREETINGS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_BOUNTY_GREETINGS::Protocol_MSG_TABLE_BOUNTY_GREETINGS(Protocol_MSG_TABLE_BOUNTY_GREETINGS&& _o)
	: vec(std::move(_o.vec))
	, goldenSngBountyStub(std::move(_o.goldenSngBountyStub))
{
}

TableClientThin::player::Protocol_MSG_TABLE_BOUNTY_GREETINGS& TableClientThin::player::Protocol_MSG_TABLE_BOUNTY_GREETINGS::operator=(Protocol_MSG_TABLE_BOUNTY_GREETINGS&& _o)
{
	if(this != &_o)
	{
		vec = std::move(_o.vec);
		goldenSngBountyStub = std::move(_o.goldenSngBountyStub);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_BOUNTY_GREETINGS::clear()
{
	vec.clear();
	goldenSngBountyStub = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_BOUNTY_GREETINGS::equals(const Protocol_MSG_TABLE_BOUNTY_GREETINGS& _o) const
{
	return vec.equals(_o.vec) &&
		goldenSngBountyStub == _o.goldenSngBountyStub;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_BOUNTY_GREETINGS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_BOUNTY_GREETINGS).append(")");
	_buf.append(',');
	_buf.append("vec=");
	vec.toTraceString(_buf);
	_buf.append(',');
	_buf.append("goldenSngBountyStub=");
	_buf.appendUint(goldenSngBountyStub);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_BOUNTY_GREETINGS::composeMsg(CommMsgBody& _msg) const
{
	vec.composeMsg(_msg);
	_msg.composeUINT32(goldenSngBountyStub);
}

void TableClientThin::player::Protocol_MSG_TABLE_BOUNTY_GREETINGS::parseMsg(CommMsgParser& _parser)
{
	vec.parseMsg(_parser);
	_parser.parseUINT32(goldenSngBountyStub);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_BOUNTY_GREETINGS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_BOUNTY_GREETINGS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szVec = ThinAtf::AtfVector0< P_BOUNTY_GREETINGS, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("vec"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "vec", szVec, _checker, __FILE__, __LINE__);
	UINT32 goldenSngBountyStub; _parser.parseUINT32(goldenSngBountyStub);
	AtfValidator::validateInt(_descr, "goldenSngBountyStub", goldenSngBountyStub, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_START_CAMPING_PREVENTION
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_START_CAMPING_PREVENTION::Protocol_MSG_TABLE_START_CAMPING_PREVENTION()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_START_CAMPING_PREVENTION::clear()
{
	campingTimeOut = 0;
	sittingStatus = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_START_CAMPING_PREVENTION::equals(const Protocol_MSG_TABLE_START_CAMPING_PREVENTION& _o) const
{
	return campingTimeOut == _o.campingTimeOut &&
		sittingStatus == _o.sittingStatus;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_START_CAMPING_PREVENTION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_START_CAMPING_PREVENTION).append(")");
	_buf.append(',');
	_buf.append("campingTO=");
	_buf.appendUint(campingTimeOut);
	_buf.append(',');
	_buf.append("ss=");
	_buf.appendUint(sittingStatus);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_START_CAMPING_PREVENTION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(campingTimeOut);
	_msg.composeBYTE(sittingStatus);
}

void TableClientThin::player::Protocol_MSG_TABLE_START_CAMPING_PREVENTION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(campingTimeOut);
	_parser.parseBYTE(sittingStatus);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_START_CAMPING_PREVENTION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_START_CAMPING_PREVENTION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT16 campingTimeOut; _parser.parseUINT16(campingTimeOut);
	AtfValidator::validateInt(_descr, "campingTimeOut", campingTimeOut, _checker, __FILE__, __LINE__);
	BYTE sittingStatus; _parser.parseBYTE(sittingStatus);
	AtfValidator::validateInt(_descr, "sittingStatus", sittingStatus, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY::Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY::clear()
{
	stacksReloaded = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY::equals(const Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY& _o) const
{
	return stacksReloaded == _o.stacksReloaded;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY).append(")");
	_buf.append(',');
	_buf.append("stacksReloaded=");
	_buf.appendUint(stacksReloaded);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(stacksReloaded);
}

void TableClientThin::player::Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(stacksReloaded);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 stacksReloaded; _parser.parseUINT32(stacksReloaded);
	AtfValidator::validateInt(_descr, "stacksReloaded", stacksReloaded, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS::Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS::clear()
{
	unusedStacks = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS::equals(const Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS& _o) const
{
	return unusedStacks == _o.unusedStacks;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS).append(")");
	_buf.append(',');
	_buf.append("unusedStacks=");
	_buf.appendInt(unusedStacks);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(unusedStacks);
}

void TableClientThin::player::Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(unusedStacks);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 unusedStacks; _parser.parseINT32(unusedStacks);
	AtfValidator::validateInt(_descr, "unusedStacks", unusedStacks, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_NSTACK_RELOAD
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD::Protocol_MSG_TABLE_NSTACK_RELOAD()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD::clear()
{
	reqStacks = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD::equals(const Protocol_MSG_TABLE_NSTACK_RELOAD& _o) const
{
	return reqStacks == _o.reqStacks;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_NSTACK_RELOAD).append(")");
	_buf.append(',');
	_buf.append("s=");
	_buf.appendUint(reqStacks);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(reqStacks);
}

void TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(reqStacks);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_NSTACK_RELOAD";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 reqStacks; _parser.parseUINT32(reqStacks);
	AtfValidator::validateIntMax(_descr, "reqStacks", reqStacks, 16, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY(Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errDesc(std::move(_o.errDesc))
	, errMsgBody(std::move(_o.errMsgBody))
	, unusedStacks(std::move(_o.unusedStacks))
{
}

TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY& TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY::operator=(Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errDesc = std::move(_o.errDesc);
		errMsgBody = std::move(_o.errMsgBody);
		unusedStacks = std::move(_o.unusedStacks);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY::clear()
{
	errcode = 0;
	errDesc.clear();
	errMsgBody.clear();
	unusedStacks = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY::equals(const Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errDesc.equals(_o.errDesc) &&
		errMsgBody.equals(_o.errMsgBody) &&
		unusedStacks == _o.unusedStacks;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_NSTACK_RELOAD_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	if(errcode)
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
		_buf.append(',');
		_buf.append("errMsgBody=");
		errMsgBody.toTraceString(_buf);
	}
	else
	{
		_buf.append(',');
		_buf.append("unusedStacks=");
		_buf.appendInt(unusedStacks);
	}
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	if(errcode)
	{
		_msg.composeString(errDesc);
		_msg.composeMsgBody(errMsgBody);
	}
	else
	{
		_msg.composeINT32(unusedStacks);
	}
}

void TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	if(errcode)
	{
		_parser.parseStringP(errDesc);
		_parser.parseMsgBody(errMsgBody);
	}
	else
	{
		_parser.parseINT32(unusedStacks);
	}
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_NSTACK_RELOAD_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode = 0;
	_parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	if(errcode)
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
		size_t szErrMsgBody; _parser.skipMsgBody(szErrMsgBody);  /*errMsgBody*/
		AtfValidator::validateInt(_descr, "errMsgBody", szErrMsgBody, _checker, __FILE__, __LINE__);
	}
	else
	{
		INT32 unusedStacks; _parser.parseINT32(unusedStacks);
		AtfValidator::validateInt(_descr, "unusedStacks", unusedStacks, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_BLITZ_MTT_KICK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_BLITZ_MTT_KICK::Protocol_MSG_TABLE_BLITZ_MTT_KICK()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_BLITZ_MTT_KICK::clear()
{
	sittingIn = false;
	rebuyLeft = 0;
	rebuyTimeout = 0;
	limboAction = 0;
	actionAmount = 0;
	actionTimeout = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_BLITZ_MTT_KICK::equals(const Protocol_MSG_TABLE_BLITZ_MTT_KICK& _o) const
{
	return sittingIn == _o.sittingIn &&
		rebuyLeft == _o.rebuyLeft &&
		rebuyTimeout == _o.rebuyTimeout &&
		limboAction == _o.limboAction &&
		actionAmount == _o.actionAmount &&
		actionTimeout == _o.actionTimeout;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_BLITZ_MTT_KICK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_BLITZ_MTT_KICK).append(")");
	_buf.append(',');
	_buf.append("sittingIn=");
	_buf.appendUint(sittingIn);
	_buf.append(',');
	_buf.append("rebuyLeft=");
	_buf.appendUint(rebuyLeft);
	_buf.append(',');
	_buf.append("rebuyTO=");
	_buf.appendUint(rebuyTimeout);
	_buf.append(',');
	_buf.append("limboAction=");
	_buf.appendUint(limboAction);
	_buf.append(',');
	_buf.append("actAmount=");
	_buf.appendUint(actionAmount);
	_buf.append(',');
	_buf.append("actTO=");
	_buf.appendUint(actionTimeout);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_BLITZ_MTT_KICK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(sittingIn);
	_msg.composeUINT16(rebuyLeft);
	_msg.composeUINT32(rebuyTimeout);
	_msg.composeBYTE(limboAction);
	_msg.composeUINT16(actionAmount);
	_msg.composeUINT32(actionTimeout);
}

void TableClientThin::player::Protocol_MSG_TABLE_BLITZ_MTT_KICK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(sittingIn);
	_parser.parseUINT16(rebuyLeft);
	_parser.parseUINT32(rebuyTimeout);
	_parser.parseBYTE(limboAction);
	_parser.parseUINT16(actionAmount);
	_parser.parseUINT32(actionTimeout);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_BLITZ_MTT_KICK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_BLITZ_MTT_KICK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	bool sittingIn; _parser.parseBOOL(sittingIn);
	AtfValidator::validateInt(_descr, "sittingIn", sittingIn, _checker, __FILE__, __LINE__);
	UINT16 rebuyLeft; _parser.parseUINT16(rebuyLeft);
	AtfValidator::validateInt(_descr, "rebuyLeft", rebuyLeft, _checker, __FILE__, __LINE__);
	UINT32 rebuyTimeout; _parser.parseUINT32(rebuyTimeout);
	AtfValidator::validateInt(_descr, "rebuyTimeout", rebuyTimeout, _checker, __FILE__, __LINE__);
	BYTE limboAction; _parser.parseBYTE(limboAction);
	AtfValidator::validateInt(_descr, "limboAction", limboAction, _checker, __FILE__, __LINE__);
	UINT16 actionAmount; _parser.parseUINT16(actionAmount);
	AtfValidator::validateInt(_descr, "actionAmount", actionAmount, _checker, __FILE__, __LINE__);
	UINT32 actionTimeout; _parser.parseUINT32(actionTimeout);
	AtfValidator::validateInt(_descr, "actionTimeout", actionTimeout, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    PlayerNotifI18NMsg
//=================================================================

// @Override
bool TableClientThin::player::PlayerNotifI18NMsg::operator<( const PlayerNotifI18NMsg& other ) const
{
	return msgSeqId < other.msgSeqId;
}

TableClientThin::player::PlayerNotifI18NMsg::PlayerNotifI18NMsg()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::PlayerNotifI18NMsg::PlayerNotifI18NMsg(PlayerNotifI18NMsg&& _o)
	: str(std::move(_o.str))
	, msgSeqId(std::move(_o.msgSeqId))
{
}

TableClientThin::player::PlayerNotifI18NMsg& TableClientThin::player::PlayerNotifI18NMsg::operator=(PlayerNotifI18NMsg&& _o)
{
	if(this != &_o)
	{
		str = std::move(_o.str);
		msgSeqId = std::move(_o.msgSeqId);
	}
	return *this;
}

#endif

void TableClientThin::player::PlayerNotifI18NMsg::clear()
{
	str.clear();
	msgSeqId = 0;
}

bool TableClientThin::player::PlayerNotifI18NMsg::equals(const PlayerNotifI18NMsg& _o) const
{
	return str.equals(_o.str) &&
		msgSeqId == _o.msgSeqId;
}

const char *TableClientThin::player::PlayerNotifI18NMsg::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("str=");
	ThinAtf::AtfTempl<I18nPString>::ToTraceString(_buf, str);
	_buf.append(',');
	_buf.append("msgSq=");
	_buf.appendUint(msgSeqId);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::PlayerNotifI18NMsg::composeMsg(CommMsgBody& _msg) const
{
	str.compose(_msg);
	_msg.composeUINT32(msgSeqId);
}

void TableClientThin::player::PlayerNotifI18NMsg::parseMsg(CommMsgParser& _parser)
{
	str.parse(_parser);
	_parser.parseUINT32(msgSeqId);
}

/*static*/ void TableClientThin::player::PlayerNotifI18NMsg::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	I18nPString str; str.parse(_parser);
	UINT32 msgSeqId; _parser.parseUINT32(msgSeqId);
	AtfValidator::validateInt(_descr, "msgSeqId", msgSeqId, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST(Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST&& _o)
	: notifs(std::move(_o.notifs))
{
}

TableClientThin::player::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST& TableClientThin::player::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST::operator=(Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST&& _o)
{
	if(this != &_o)
	{
		notifs = std::move(_o.notifs);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST::clear()
{
	notifs.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST::equals(const Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST& _o) const
{
	return notifs.equals(_o.notifs);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_USER_SPECIFIC_BROADCAST).append(")");
	_buf.append(',');
	_buf.append("notifs=");
	notifs.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST::composeMsg(CommMsgBody& _msg) const
{
	notifs.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST::parseMsg(CommMsgParser& _parser)
{
	notifs.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_USER_SPECIFIC_BROADCAST";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szNotifs = ThinAtf::LAtfVector< PlayerNotifI18NMsg, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("notifs"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "notifs", szNotifs, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_USER_CHAT_WARN
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_WARN::Protocol_MSG_TABLE_USER_CHAT_WARN()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_WARN::Protocol_MSG_TABLE_USER_CHAT_WARN(Protocol_MSG_TABLE_USER_CHAT_WARN&& _o)
	: warnMsgId(std::move(_o.warnMsgId))
	, chat(std::move(_o.chat))
{
}

TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_WARN& TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_WARN::operator=(Protocol_MSG_TABLE_USER_CHAT_WARN&& _o)
{
	if(this != &_o)
	{
		warnMsgId = std::move(_o.warnMsgId);
		chat = std::move(_o.chat);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_WARN::clear()
{
	warnMsgId = 0;
	chat.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_WARN::equals(const Protocol_MSG_TABLE_USER_CHAT_WARN& _o) const
{
	return warnMsgId == _o.warnMsgId &&
		chat.equals(_o.chat);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_WARN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_USER_CHAT_WARN).append(")");
	_buf.append(',');
	_buf.append("warnMsgId=");
	_buf.appendUint(warnMsgId);
	_buf.append(',');
	_buf.append("chat=");
	_buf.append(chat);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_WARN::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(warnMsgId);
	_msg.composeString(chat);
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_WARN::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(warnMsgId);
	_parser.parseStringP(chat);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_WARN::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_USER_CHAT_WARN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT16 warnMsgId; _parser.parseUINT16(warnMsgId);
	AtfValidator::validateInt(_descr, "warnMsgId", warnMsgId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "chat"); size_t szChat = strlen(_dummy);
	AtfValidator::validateInt(_descr, "chat", szChat, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_USER_CHAT_BAN
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_BAN::Protocol_MSG_TABLE_USER_CHAT_BAN()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_BAN::clear()
{
	banMsgId = 0;
	banTimeMins = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_BAN::equals(const Protocol_MSG_TABLE_USER_CHAT_BAN& _o) const
{
	return banMsgId == _o.banMsgId &&
		banTimeMins == _o.banTimeMins;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_BAN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_USER_CHAT_BAN).append(")");
	_buf.append(',');
	_buf.append("banMsgId=");
	_buf.appendUint(banMsgId);
	_buf.append(',');
	_buf.append("banTimeMins=");
	_buf.appendInt(banTimeMins);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_BAN::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(banMsgId);
	_msg.composeINT32(banTimeMins);
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_BAN::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(banMsgId);
	_parser.parseINT32(banTimeMins);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_USER_CHAT_BAN::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_USER_CHAT_BAN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT16 banMsgId; _parser.parseUINT16(banMsgId);
	AtfValidator::validateInt(_descr, "banMsgId", banMsgId, _checker, __FILE__, __LINE__);
	INT32 banTimeMins; _parser.parseINT32(banTimeMins);
	AtfValidator::validateInt(_descr, "banTimeMins", banTimeMins, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    HoleCardSnapshot
//=================================================================

TableClientThin::player::HoleCardSnapshot::HoleCardSnapshot()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::HoleCardSnapshot::HoleCardSnapshot(HoleCardSnapshot&& _o)
	: round(std::move(_o.round))
	, holeCards(std::move(_o.holeCards))
{
}

TableClientThin::player::HoleCardSnapshot& TableClientThin::player::HoleCardSnapshot::operator=(HoleCardSnapshot&& _o)
{
	if(this != &_o)
	{
		round = std::move(_o.round);
		holeCards = std::move(_o.holeCards);
	}
	return *this;
}

#endif

void TableClientThin::player::HoleCardSnapshot::clear()
{
	round = 0;
	holeCards.clear();
}

bool TableClientThin::player::HoleCardSnapshot::equals(const HoleCardSnapshot& _o) const
{
	return round == _o.round &&
		holeCards.equals(_o.holeCards);
}

const char *TableClientThin::player::HoleCardSnapshot::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("round=");
	_buf.appendInt(round);
	_buf.append(',');
	_buf.append("holeCards=");
	holeCards.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::HoleCardSnapshot::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(HoleCardSnapshot())) // not empty
	{
		_body.composeINT8(round);
		holeCards.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::player::HoleCardSnapshot::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT8(round);
	holeCards.parseMsg(_parser0);
}

/*static*/ void TableClientThin::player::HoleCardSnapshot::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT8 round; _parser0.parseINT8(round);
	AtfValidator::validateInt(_descr, "round", round, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szHoleCards = ThinAtf::LAtfVector< TableCommonThin::CardDictionaryItem, 1 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("holeCards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "holeCards", szHoleCards, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE(Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE&& _o)
	: handId(std::move(_o.handId))
	, myHoleCards(std::move(_o.myHoleCards))
	, otherCards(std::move(_o.otherCards))
	, oldHoleCards(std::move(_o.oldHoleCards))
{
}

TableClientThin::player::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE& TableClientThin::player::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE::operator=(Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE&& _o)
{
	if(this != &_o)
	{
		handId = std::move(_o.handId);
		myHoleCards = std::move(_o.myHoleCards);
		otherCards = std::move(_o.otherCards);
		oldHoleCards = std::move(_o.oldHoleCards);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE::clear()
{
	handId = 0;
	myHoleCards.clear();
	otherCards.clear();
	oldHoleCards.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE::equals(const Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE& _o) const
{
	return handId == _o.handId &&
		myHoleCards.equals(_o.myHoleCards) &&
		otherCards.equals(_o.otherCards) &&
		oldHoleCards.equals(_o.oldHoleCards);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE).append(")");
	_buf.append(',');
	_buf.append("hI=");
	_buf.appendUint64(handId);
	_buf.append(',');
	_buf.append("myHoleCards=");
	myHoleCards.toTraceString(_buf);
	_buf.append(',');
	_buf.append("otherCards=");
	otherCards.toTraceString(_buf);
	_buf.append(',');
	_buf.append("oldHoleCards=");
	oldHoleCards.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(handId);
	myHoleCards.composeMsg(_msg);
	otherCards.composeMsg(_msg);
	oldHoleCards.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(handId);
	myHoleCards.parseMsg(_parser);
	otherCards.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	oldHoleCards.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szMyHoleCards = ThinAtf::LAtfVector< TableCommonThin::CardDictionaryItem, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("myHoleCards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "myHoleCards", szMyHoleCards, _checker, __FILE__, __LINE__);
	int szOtherCards = ThinAtf::LAtfVector< TableCommonThin::CardDictionaryItem, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("otherCards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "otherCards", szOtherCards, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	int szOldHoleCards = ThinAtf::LAtfVector< HoleCardSnapshot, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("oldHoleCards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "oldHoleCards", szOldHoleCards, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    UserDictionaryItem
//=================================================================

TableClientThin::player::UserDictionaryItem::UserDictionaryItem()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::UserDictionaryItem::UserDictionaryItem(UserDictionaryItem&& _o)
	: alias(std::move(_o.alias))
	, userId(std::move(_o.userId))
	, img(std::move(_o.img))
{
}

TableClientThin::player::UserDictionaryItem& TableClientThin::player::UserDictionaryItem::operator=(UserDictionaryItem&& _o)
{
	if(this != &_o)
	{
		alias = std::move(_o.alias);
		userId = std::move(_o.userId);
		img = std::move(_o.img);
	}
	return *this;
}

#endif

void TableClientThin::player::UserDictionaryItem::clear()
{
	alias.clear();
	userId.clear();
	img.clear();
}

bool TableClientThin::player::UserDictionaryItem::equals(const UserDictionaryItem& _o) const
{
	return alias.equals(_o.alias) &&
		userId.equals(_o.userId) &&
		img.equals(_o.img);
}

const char *TableClientThin::player::UserDictionaryItem::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("alias=");
	_buf.append(alias);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("img=");
	img.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::UserDictionaryItem::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(UserDictionaryItem())) // not empty
	{
		_body.composeString(alias);
		_body.composeString(userId);
		img.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::player::UserDictionaryItem::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(alias);
	_parser0.parseStringP(userId);
	img.parseMsg(_parser0);
}

/*static*/ void TableClientThin::player::UserDictionaryItem::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "alias"); size_t szAlias = strlen(_dummy);
	AtfValidator::validateInt(_descr, "alias", szAlias, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	BrandProtThin::BrandImageList::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("img"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE(Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE&& _o)
	: handId(std::move(_o.handId))
	, users(std::move(_o.users))
{
}

TableClientThin::player::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE& TableClientThin::player::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE::operator=(Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE&& _o)
{
	if(this != &_o)
	{
		handId = std::move(_o.handId);
		users = std::move(_o.users);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE::clear()
{
	handId = 0;
	users.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE::equals(const Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE& _o) const
{
	return handId == _o.handId &&
		users.equals(_o.users);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_USER_DICTIONARY_UPDATE).append(")");
	_buf.append(',');
	_buf.append("handId=");
	_buf.appendUint64(handId);
	_buf.append(',');
	_buf.append("users=");
	users.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(handId);
	users.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(handId);
	users.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_USER_DICTIONARY_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szUsers = ThinAtf::LAtfVector< UserDictionaryItem, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("users"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "users", szUsers, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_BLITZ_KICK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_BLITZ_KICK::Protocol_MSG_TABLE_BLITZ_KICK()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_BLITZ_KICK::clear()
{
	handId = 0;
	statistcs = 0;
	chips = 0;
	kickUserFlags = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_BLITZ_KICK::equals(const Protocol_MSG_TABLE_BLITZ_KICK& _o) const
{
	return handId == _o.handId &&
		statistcs == _o.statistcs &&
		chips == _o.chips &&
		kickUserFlags == _o.kickUserFlags;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_BLITZ_KICK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_BLITZ_KICK).append(")");
	_buf.append(',');
	_buf.append("hI=");
	_buf.appendUint64(handId);
	_buf.append(',');
	_buf.append("stat=");
	_buf.appendUint(statistcs);
	_buf.append(',');
	_buf.append("chips=");
	_buf.appendUint(chips);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(kickUserFlags);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_BLITZ_KICK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(handId);
	_msg.composeUINT32(statistcs);
	_msg.composeUINT32(chips);
	_msg.composeUINT32(kickUserFlags);
}

void TableClientThin::player::Protocol_MSG_TABLE_BLITZ_KICK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(handId);
	_parser.parseUINT32(statistcs);
	_parser.parseUINT32(chips);
	_parser.parseUINT32(kickUserFlags);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_BLITZ_KICK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_BLITZ_KICK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
	UINT32 statistcs; _parser.parseUINT32(statistcs);
	AtfValidator::validateInt(_descr, "statistcs", statistcs, _checker, __FILE__, __LINE__);
	UINT32 chips; _parser.parseUINT32(chips);
	AtfValidator::validateInt(_descr, "chips", chips, _checker, __FILE__, __LINE__);
	UINT32 kickUserFlags; _parser.parseUINT32(kickUserFlags);
	AtfValidator::validateInt(_descr, "kickUserFlags", kickUserFlags, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS(Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS&& _o)
	: powerActionSeqId(std::move(_o.powerActionSeqId))
	, powerId(std::move(_o.powerId))
	, timerInterval(std::move(_o.timerInterval))
	, minPowersChosen(std::move(_o.minPowersChosen))
	, maxPowersChosen(std::move(_o.maxPowersChosen))
	, powers(std::move(_o.powers))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS& TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS::operator=(Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS&& _o)
{
	if(this != &_o)
	{
		powerActionSeqId = std::move(_o.powerActionSeqId);
		powerId = std::move(_o.powerId);
		timerInterval = std::move(_o.timerInterval);
		minPowersChosen = std::move(_o.minPowersChosen);
		maxPowersChosen = std::move(_o.maxPowersChosen);
		powers = std::move(_o.powers);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS::clear()
{
	powerActionSeqId = 0;
	powerId = 0;
	timerInterval = 0;
	minPowersChosen = 0;
	maxPowersChosen = 0;
	powers.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS::equals(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS& _o) const
{
	return powerActionSeqId == _o.powerActionSeqId &&
		powerId == _o.powerId &&
		timerInterval == _o.timerInterval &&
		minPowersChosen == _o.minPowersChosen &&
		maxPowersChosen == _o.maxPowersChosen &&
		powers.equals(_o.powers);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHOOSE_POWER_SLOTS).append(")");
	_buf.append(',');
	_buf.append("pasq=");
	_buf.appendUint(powerActionSeqId);
	_buf.append(',');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("timerInterval=");
	_buf.appendUint(timerInterval);
	_buf.append(',');
	_buf.append("minPowersChosen=");
	_buf.appendUint(minPowersChosen);
	_buf.append(',');
	_buf.append("maxPowersChosen=");
	_buf.appendUint(maxPowersChosen);
	_buf.append(',');
	_buf.append("powers=");
	powers.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(powerActionSeqId);
	_msg.composeINT32(powerId);
	_msg.composeUINT32(timerInterval);
	_msg.composeBYTE(minPowersChosen);
	_msg.composeBYTE(maxPowersChosen);
	powers.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(powerActionSeqId);
	_parser.parseINT32(powerId);
	_parser.parseUINT32(timerInterval);
	_parser.parseBYTE(minPowersChosen);
	_parser.parseBYTE(maxPowersChosen);
	powers.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHOOSE_POWER_SLOTS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 powerActionSeqId; _parser.parseUINT32(powerActionSeqId);
	AtfValidator::validateInt(_descr, "powerActionSeqId", powerActionSeqId, _checker, __FILE__, __LINE__);
	INT32 powerId; _parser.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	UINT32 timerInterval; _parser.parseUINT32(timerInterval);
	AtfValidator::validateInt(_descr, "timerInterval", timerInterval, _checker, __FILE__, __LINE__);
	BYTE minPowersChosen; _parser.parseBYTE(minPowersChosen);
	AtfValidator::validateInt(_descr, "minPowersChosen", minPowersChosen, _checker, __FILE__, __LINE__);
	BYTE maxPowersChosen; _parser.parseBYTE(maxPowersChosen);
	AtfValidator::validateInt(_descr, "maxPowersChosen", maxPowersChosen, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szPowers = ThinAtf::LAtfVector< INT32 , 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("powers"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "powers", szPowers, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK::clear()
{
	powerActionSeqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK::equals(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK& _o) const
{
	return powerActionSeqId == _o.powerActionSeqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK).append(")");
	_buf.append(',');
	_buf.append("pasq=");
	_buf.appendUint(powerActionSeqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(powerActionSeqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(powerActionSeqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 powerActionSeqId; _parser.parseUINT32(powerActionSeqId);
	AtfValidator::validateInt(_descr, "powerActionSeqId", powerActionSeqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY(Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY&& _o)
	: powerActionSeqId(std::move(_o.powerActionSeqId))
	, powersChosen(std::move(_o.powersChosen))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY& TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY::operator=(Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY&& _o)
{
	if(this != &_o)
	{
		powerActionSeqId = std::move(_o.powerActionSeqId);
		powersChosen = std::move(_o.powersChosen);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY::clear()
{
	powerActionSeqId = 0;
	powersChosen.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY::equals(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY& _o) const
{
	return powerActionSeqId == _o.powerActionSeqId &&
		powersChosen.equals(_o.powersChosen);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY).append(")");
	_buf.append(',');
	_buf.append("pasq=");
	_buf.appendUint(powerActionSeqId);
	_buf.append(',');
	_buf.append("powersChosen=");
	powersChosen.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(powerActionSeqId);
	powersChosen.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(powerActionSeqId);
	powersChosen.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 powerActionSeqId; _parser.parseUINT32(powerActionSeqId);
	AtfValidator::validateInt(_descr, "powerActionSeqId", powerActionSeqId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szPowersChosen = ThinAtf::LAtfVector< INT32 , 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("powersChosen"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "powersChosen", szPowersChosen, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL::clear()
{
	powerActionSeqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL::equals(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL& _o) const
{
	return powerActionSeqId == _o.powerActionSeqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL).append(")");
	_buf.append(',');
	_buf.append("pasq=");
	_buf.appendUint(powerActionSeqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(powerActionSeqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(powerActionSeqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 powerActionSeqId; _parser.parseUINT32(powerActionSeqId);
	AtfValidator::validateInt(_descr, "powerActionSeqId", powerActionSeqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    PowerInfoBody
//=================================================================

TableClientThin::player::PowerInfoBody::PowerInfoBody()
{
	clear();
}

void TableClientThin::player::PowerInfoBody::clear()
{
	powerId = 0;
	status = 0;
	powerCardUniqueId = 0;
}

bool TableClientThin::player::PowerInfoBody::equals(const PowerInfoBody& _o) const
{
	return powerId == _o.powerId &&
		status == _o.status &&
		powerCardUniqueId == _o.powerCardUniqueId;
}

const char *TableClientThin::player::PowerInfoBody::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("status=");
	_buf.appendUint(status);
	_buf.append(',');
	_buf.append("puId=");
	_buf.appendInt(powerCardUniqueId);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::PowerInfoBody::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PowerInfoBody())) // not empty
	{
		_body.composeINT32(powerId);
		_body.composeUINT32(status);
		_body.composeINT32(powerCardUniqueId);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::player::PowerInfoBody::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(powerId);
	_parser0.parseUINT32(status);
	_parser0.parseINT32(powerCardUniqueId);
}

/*static*/ void TableClientThin::player::PowerInfoBody::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT32 powerId; _parser0.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	UINT32 status; _parser0.parseUINT32(status);
	AtfValidator::validateInt(_descr, "status", status, _checker, __FILE__, __LINE__);
	INT32 powerCardUniqueId; _parser0.parseINT32(powerCardUniqueId);
	AtfValidator::validateInt(_descr, "powerCardUniqueId", powerCardUniqueId, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_POSSESSION
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_POSSESSION::Protocol_MSG_TABLE_POWER_POSSESSION()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_POSSESSION::Protocol_MSG_TABLE_POWER_POSSESSION(Protocol_MSG_TABLE_POWER_POSSESSION&& _o)
	: powers(std::move(_o.powers))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_POSSESSION& TableClientThin::player::Protocol_MSG_TABLE_POWER_POSSESSION::operator=(Protocol_MSG_TABLE_POWER_POSSESSION&& _o)
{
	if(this != &_o)
	{
		powers = std::move(_o.powers);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_POSSESSION::clear()
{
	powers.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_POSSESSION::equals(const Protocol_MSG_TABLE_POWER_POSSESSION& _o) const
{
	return powers.equals(_o.powers);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_POSSESSION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_POSSESSION).append(")");
	_buf.append(',');
	_buf.append("powers=");
	powers.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_POSSESSION::composeMsg(CommMsgBody& _msg) const
{
	powers.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_POSSESSION::parseMsg(CommMsgParser& _parser)
{
	powers.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_POSSESSION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_POSSESSION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szPowers = ThinAtf::LAtfVector< PowerInfoBody , 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("powers"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "powers", szPowers, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    PowerStatus
//=================================================================

TableClientThin::player::PowerStatus::PowerStatus()
{
	clear();
}

void TableClientThin::player::PowerStatus::clear()
{
	powerId = 0;
	newStatus = 0;
	powerCardUniqueId = 0;
}

bool TableClientThin::player::PowerStatus::equals(const PowerStatus& _o) const
{
	return powerId == _o.powerId &&
		newStatus == _o.newStatus &&
		powerCardUniqueId == _o.powerCardUniqueId;
}

const char *TableClientThin::player::PowerStatus::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("ns=");
	_buf.appendUint(newStatus);
	_buf.append(',');
	_buf.append("puId=");
	_buf.appendInt(powerCardUniqueId);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::PowerStatus::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PowerStatus())) // not empty
	{
		_body.composeINT32(powerId);
		_body.composeUINT32(newStatus);
		_body.composeINT32(powerCardUniqueId);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::player::PowerStatus::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(powerId);
	_parser0.parseUINT32(newStatus);
	_parser0.parseINT32(powerCardUniqueId);
}

/*static*/ void TableClientThin::player::PowerStatus::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT32 powerId; _parser0.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	UINT32 newStatus; _parser0.parseUINT32(newStatus);
	AtfValidator::validateInt(_descr, "newStatus", newStatus, _checker, __FILE__, __LINE__);
	INT32 powerCardUniqueId; _parser0.parseINT32(powerCardUniqueId);
	AtfValidator::validateInt(_descr, "powerCardUniqueId", powerCardUniqueId, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_STATUS_UPDATE
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_STATUS_UPDATE::Protocol_MSG_TABLE_POWER_STATUS_UPDATE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_STATUS_UPDATE::Protocol_MSG_TABLE_POWER_STATUS_UPDATE(Protocol_MSG_TABLE_POWER_STATUS_UPDATE&& _o)
	: updates(std::move(_o.updates))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_STATUS_UPDATE& TableClientThin::player::Protocol_MSG_TABLE_POWER_STATUS_UPDATE::operator=(Protocol_MSG_TABLE_POWER_STATUS_UPDATE&& _o)
{
	if(this != &_o)
	{
		updates = std::move(_o.updates);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_STATUS_UPDATE::clear()
{
	updates.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_STATUS_UPDATE::equals(const Protocol_MSG_TABLE_POWER_STATUS_UPDATE& _o) const
{
	return updates.equals(_o.updates);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_STATUS_UPDATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_STATUS_UPDATE).append(")");
	_buf.append(',');
	_buf.append("updates=");
	updates.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_STATUS_UPDATE::composeMsg(CommMsgBody& _msg) const
{
	updates.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_STATUS_UPDATE::parseMsg(CommMsgParser& _parser)
{
	updates.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_STATUS_UPDATE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_STATUS_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szUpdates = ThinAtf::LAtfVector< PowerStatus, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("updates"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "updates", szUpdates, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD(Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD&& _o)
	: powerActionSeqId(std::move(_o.powerActionSeqId))
	, powerId(std::move(_o.powerId))
	, timerInterval(std::move(_o.timerInterval))
	, minCardsChosen(std::move(_o.minCardsChosen))
	, maxCardsChosen(std::move(_o.maxCardsChosen))
	, holeCards(std::move(_o.holeCards))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD& TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD::operator=(Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD&& _o)
{
	if(this != &_o)
	{
		powerActionSeqId = std::move(_o.powerActionSeqId);
		powerId = std::move(_o.powerId);
		timerInterval = std::move(_o.timerInterval);
		minCardsChosen = std::move(_o.minCardsChosen);
		maxCardsChosen = std::move(_o.maxCardsChosen);
		holeCards = std::move(_o.holeCards);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD::clear()
{
	powerActionSeqId = 0;
	powerId = 0;
	timerInterval = 0;
	minCardsChosen = 0;
	maxCardsChosen = 0;
	holeCards.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD::equals(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD& _o) const
{
	return powerActionSeqId == _o.powerActionSeqId &&
		powerId == _o.powerId &&
		timerInterval == _o.timerInterval &&
		minCardsChosen == _o.minCardsChosen &&
		maxCardsChosen == _o.maxCardsChosen &&
		holeCards.equals(_o.holeCards);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD).append(")");
	_buf.append(',');
	_buf.append("pasq=");
	_buf.appendUint(powerActionSeqId);
	_buf.append(',');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("timerInterval=");
	_buf.appendUint(timerInterval);
	_buf.append(',');
	_buf.append("minCardsChosen=");
	_buf.appendUint(minCardsChosen);
	_buf.append(',');
	_buf.append("maxCardsChosen=");
	_buf.appendUint(maxCardsChosen);
	_buf.append(',');
	_buf.append("holeCards=");
	holeCards.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(powerActionSeqId);
	_msg.composeINT32(powerId);
	_msg.composeUINT32(timerInterval);
	_msg.composeBYTE(minCardsChosen);
	_msg.composeBYTE(maxCardsChosen);
	holeCards.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(powerActionSeqId);
	_parser.parseINT32(powerId);
	_parser.parseUINT32(timerInterval);
	_parser.parseBYTE(minCardsChosen);
	_parser.parseBYTE(maxCardsChosen);
	holeCards.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 powerActionSeqId; _parser.parseUINT32(powerActionSeqId);
	AtfValidator::validateInt(_descr, "powerActionSeqId", powerActionSeqId, _checker, __FILE__, __LINE__);
	INT32 powerId; _parser.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	UINT32 timerInterval; _parser.parseUINT32(timerInterval);
	AtfValidator::validateInt(_descr, "timerInterval", timerInterval, _checker, __FILE__, __LINE__);
	BYTE minCardsChosen; _parser.parseBYTE(minCardsChosen);
	AtfValidator::validateInt(_descr, "minCardsChosen", minCardsChosen, _checker, __FILE__, __LINE__);
	BYTE maxCardsChosen; _parser.parseBYTE(maxCardsChosen);
	AtfValidator::validateInt(_descr, "maxCardsChosen", maxCardsChosen, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szHoleCards = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("holeCards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "holeCards", szHoleCards, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK::clear()
{
	powerActionSeqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK::equals(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK& _o) const
{
	return powerActionSeqId == _o.powerActionSeqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK).append(")");
	_buf.append(',');
	_buf.append("pasq=");
	_buf.appendUint(powerActionSeqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(powerActionSeqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(powerActionSeqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 powerActionSeqId; _parser.parseUINT32(powerActionSeqId);
	AtfValidator::validateInt(_descr, "powerActionSeqId", powerActionSeqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY(Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY&& _o)
	: powerActionSeqId(std::move(_o.powerActionSeqId))
	, cards(std::move(_o.cards))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY& TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY::operator=(Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY&& _o)
{
	if(this != &_o)
	{
		powerActionSeqId = std::move(_o.powerActionSeqId);
		cards = std::move(_o.cards);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY::clear()
{
	powerActionSeqId = 0;
	cards.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY::equals(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY& _o) const
{
	return powerActionSeqId == _o.powerActionSeqId &&
		cards.equals(_o.cards);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY).append(")");
	_buf.append(',');
	_buf.append("pasq=");
	_buf.appendUint(powerActionSeqId);
	_buf.append(',');
	_buf.append("cards=");
	cards.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(powerActionSeqId);
	cards.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(powerActionSeqId);
	cards.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 powerActionSeqId; _parser.parseUINT32(powerActionSeqId);
	AtfValidator::validateInt(_descr, "powerActionSeqId", powerActionSeqId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szCards = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cards", szCards, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL::clear()
{
	powerActionSeqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL::equals(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL& _o) const
{
	return powerActionSeqId == _o.powerActionSeqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL).append(")");
	_buf.append(',');
	_buf.append("pasq=");
	_buf.appendUint(powerActionSeqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(powerActionSeqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(powerActionSeqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 powerActionSeqId; _parser.parseUINT32(powerActionSeqId);
	AtfValidator::validateInt(_descr, "powerActionSeqId", powerActionSeqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    ReloadHoleCardsPowerExtInfo
//=================================================================

TableClientThin::player::ReloadHoleCardsPowerExtInfo::ReloadHoleCardsPowerExtInfo()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::ReloadHoleCardsPowerExtInfo::ReloadHoleCardsPowerExtInfo(ReloadHoleCardsPowerExtInfo&& _o)
	: cards(std::move(_o.cards))
{
}

TableClientThin::player::ReloadHoleCardsPowerExtInfo& TableClientThin::player::ReloadHoleCardsPowerExtInfo::operator=(ReloadHoleCardsPowerExtInfo&& _o)
{
	if(this != &_o)
	{
		cards = std::move(_o.cards);
	}
	return *this;
}

#endif

void TableClientThin::player::ReloadHoleCardsPowerExtInfo::clear()
{
	cards.clear();
}

bool TableClientThin::player::ReloadHoleCardsPowerExtInfo::equals(const ReloadHoleCardsPowerExtInfo& _o) const
{
	return cards.equals(_o.cards);
}

const char *TableClientThin::player::ReloadHoleCardsPowerExtInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("cards=");
	cards.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::ReloadHoleCardsPowerExtInfo::composeMsg(CommMsgBody& _msg) const
{
	cards.composeMsg(_msg);
}

void TableClientThin::player::ReloadHoleCardsPowerExtInfo::parseMsg(CommMsgParser& _parser)
{
	cards.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::ReloadHoleCardsPowerExtInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szCards = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cards", szCards, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CARD_PLAY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY::Protocol_MSG_TABLE_POWER_CARD_PLAY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY::Protocol_MSG_TABLE_POWER_CARD_PLAY(Protocol_MSG_TABLE_POWER_CARD_PLAY&& _o)
	: actionRequestId(std::move(_o.actionRequestId))
	, powerId(std::move(_o.powerId))
	, targetPlayer(std::move(_o.targetPlayer))
	, targetHoleCard(std::move(_o.targetHoleCard))
	, targetBoardCard(std::move(_o.targetBoardCard))
	, powerCardUniqueId(std::move(_o.powerCardUniqueId))
	, extInfo(std::move(_o.extInfo))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY& TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY::operator=(Protocol_MSG_TABLE_POWER_CARD_PLAY&& _o)
{
	if(this != &_o)
	{
		actionRequestId = std::move(_o.actionRequestId);
		powerId = std::move(_o.powerId);
		targetPlayer = std::move(_o.targetPlayer);
		targetHoleCard = std::move(_o.targetHoleCard);
		targetBoardCard = std::move(_o.targetBoardCard);
		powerCardUniqueId = std::move(_o.powerCardUniqueId);
		extInfo = std::move(_o.extInfo);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY::clear()
{
	actionRequestId = 0;
	powerId = 0;
	targetPlayer = -1;
	targetHoleCard.clear();
	targetBoardCard.clear();
	powerCardUniqueId = -1;
	extInfo.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY::equals(const Protocol_MSG_TABLE_POWER_CARD_PLAY& _o) const
{
	return actionRequestId == _o.actionRequestId &&
		powerId == _o.powerId &&
		targetPlayer == _o.targetPlayer &&
		targetHoleCard.equals(_o.targetHoleCard) &&
		targetBoardCard.equals(_o.targetBoardCard) &&
		powerCardUniqueId == _o.powerCardUniqueId &&
		extInfo.equals(_o.extInfo);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CARD_PLAY).append(")");
	_buf.append(',');
	_buf.append("aRqI=");
	_buf.appendUint(actionRequestId);
	_buf.append(',');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("targetPlayer=");
	_buf.appendInt(targetPlayer);
	_buf.append(',');
	_buf.append("targetHoleCard=");
	targetHoleCard.toTraceString(_buf);
	_buf.append(',');
	_buf.append("targetBoardCard=");
	targetBoardCard.toTraceString(_buf);
	_buf.append(',');
	_buf.append("powerCardUniqueId=");
	_buf.appendInt(powerCardUniqueId);
	_buf.append(',');
	_buf.append("extInfo=");
	extInfo.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(actionRequestId);
	_msg.composeINT32(powerId);
	_msg.composeINT8(targetPlayer);
	targetHoleCard.composeMsg(_msg);
	targetBoardCard.composeMsg(_msg);
	_msg.composeINT32(powerCardUniqueId);
	_msg.composeMsgBody(extInfo);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(actionRequestId);
	_parser.parseINT32(powerId);
	if(_parser.parseEnded()) return;
	_parser.parseINT8(targetPlayer);
	if(_parser.parseEnded()) return;
	targetHoleCard.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	targetBoardCard.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseINT32(powerCardUniqueId);
	if(_parser.parseEnded()) return;
	_parser.parseMsgBody(extInfo);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CARD_PLAY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 actionRequestId; _parser.parseUINT32(actionRequestId);
	AtfValidator::validateInt(_descr, "actionRequestId", actionRequestId, _checker, __FILE__, __LINE__);
	INT32 powerId; _parser.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	INT8 targetPlayer; _parser.parseINT8(targetPlayer);
	AtfValidator::validateInt(_descr, "targetPlayer", targetPlayer, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	PString _descbuf;
	TableCommonThin::P_Card::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("targetHoleCard"), _fieldsWithUnparsedContent);
	if(_parser.parseEnded()) return;
	TableCommonThin::P_Card::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("targetBoardCard"), _fieldsWithUnparsedContent);
	if(_parser.parseEnded()) return;
	INT32 powerCardUniqueId; _parser.parseINT32(powerCardUniqueId);
	AtfValidator::validateInt(_descr, "powerCardUniqueId", powerCardUniqueId, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	size_t szExtInfo; _parser.skipMsgBody(szExtInfo);  /*extInfo*/
	AtfValidator::validateInt(_descr, "extInfo", szExtInfo, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY(Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
	, powerId(std::move(_o.powerId))
	, powerCardUniqueId(std::move(_o.powerCardUniqueId))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY& TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY::operator=(Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
		powerId = std::move(_o.powerId);
		powerCardUniqueId = std::move(_o.powerCardUniqueId);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	powerId = 0;
	powerCardUniqueId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY::equals(const Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		powerId == _o.powerId &&
		powerCardUniqueId == _o.powerCardUniqueId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CARD_PLAY_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendUint(errCode);
	_buf.append(',');
	_buf.append("errString=");
	_buf.append(errString);
	_buf.append(',');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("powerCardUniqueId=");
	_buf.appendInt(powerCardUniqueId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errCode);
	_msg.composeString(errString);
	_msg.composeINT32(powerId);
	_msg.composeINT32(powerCardUniqueId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errCode);
	_parser.parseStringP(errString);
	_parser.parseINT32(powerId);
	_parser.parseINT32(powerCardUniqueId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CARD_PLAY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errCode; _parser.parseBYTE(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	INT32 powerId; _parser.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	INT32 powerCardUniqueId; _parser.parseINT32(powerCardUniqueId);
	AtfValidator::validateInt(_descr, "powerCardUniqueId", powerCardUniqueId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CARD_PRESELECT
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PRESELECT::Protocol_MSG_TABLE_POWER_CARD_PRESELECT()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PRESELECT::Protocol_MSG_TABLE_POWER_CARD_PRESELECT(Protocol_MSG_TABLE_POWER_CARD_PRESELECT&& _o)
	: powerId(std::move(_o.powerId))
	, selectOrUnselect(std::move(_o.selectOrUnselect))
	, targetPlayer(std::move(_o.targetPlayer))
	, targetHoleCard(std::move(_o.targetHoleCard))
	, targetBoardCard(std::move(_o.targetBoardCard))
	, powerCardUniqueId(std::move(_o.powerCardUniqueId))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PRESELECT& TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PRESELECT::operator=(Protocol_MSG_TABLE_POWER_CARD_PRESELECT&& _o)
{
	if(this != &_o)
	{
		powerId = std::move(_o.powerId);
		selectOrUnselect = std::move(_o.selectOrUnselect);
		targetPlayer = std::move(_o.targetPlayer);
		targetHoleCard = std::move(_o.targetHoleCard);
		targetBoardCard = std::move(_o.targetBoardCard);
		powerCardUniqueId = std::move(_o.powerCardUniqueId);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PRESELECT::clear()
{
	powerId = 0;
	selectOrUnselect = false;
	targetPlayer = -1;
	targetHoleCard.clear();
	targetBoardCard.clear();
	powerCardUniqueId = -1;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PRESELECT::equals(const Protocol_MSG_TABLE_POWER_CARD_PRESELECT& _o) const
{
	return powerId == _o.powerId &&
		selectOrUnselect == _o.selectOrUnselect &&
		targetPlayer == _o.targetPlayer &&
		targetHoleCard.equals(_o.targetHoleCard) &&
		targetBoardCard.equals(_o.targetBoardCard) &&
		powerCardUniqueId == _o.powerCardUniqueId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PRESELECT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CARD_PRESELECT).append(")");
	_buf.append(',');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("selectOrUnselect=");
	_buf.appendUint(selectOrUnselect);
	_buf.append(',');
	_buf.append("targetPlayer=");
	_buf.appendInt(targetPlayer);
	_buf.append(',');
	_buf.append("targetHoleCard=");
	targetHoleCard.toTraceString(_buf);
	_buf.append(',');
	_buf.append("targetBoardCard=");
	targetBoardCard.toTraceString(_buf);
	_buf.append(',');
	_buf.append("powerCardUniqueId=");
	_buf.appendInt(powerCardUniqueId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PRESELECT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(powerId);
	_msg.composeBOOL(selectOrUnselect);
	_msg.composeINT8(targetPlayer);
	targetHoleCard.composeMsg(_msg);
	targetBoardCard.composeMsg(_msg);
	_msg.composeINT32(powerCardUniqueId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PRESELECT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(powerId);
	_parser.parseBOOL(selectOrUnselect);
	if(_parser.parseEnded()) return;
	_parser.parseINT8(targetPlayer);
	if(_parser.parseEnded()) return;
	targetHoleCard.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	targetBoardCard.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseINT32(powerCardUniqueId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CARD_PRESELECT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CARD_PRESELECT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 powerId; _parser.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	bool selectOrUnselect; _parser.parseBOOL(selectOrUnselect);
	AtfValidator::validateInt(_descr, "selectOrUnselect", selectOrUnselect, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	INT8 targetPlayer; _parser.parseINT8(targetPlayer);
	AtfValidator::validateInt(_descr, "targetPlayer", targetPlayer, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	PString _descbuf;
	TableCommonThin::P_Card::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("targetHoleCard"), _fieldsWithUnparsedContent);
	if(_parser.parseEnded()) return;
	TableCommonThin::P_Card::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("targetBoardCard"), _fieldsWithUnparsedContent);
	if(_parser.parseEnded()) return;
	INT32 powerCardUniqueId; _parser.parseINT32(powerCardUniqueId);
	AtfValidator::validateInt(_descr, "powerCardUniqueId", powerCardUniqueId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS(Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS&& _o)
	: targetPlayer(std::move(_o.targetPlayer))
	, cards(std::move(_o.cards))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS& TableClientThin::player::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS::operator=(Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS&& _o)
{
	if(this != &_o)
	{
		targetPlayer = std::move(_o.targetPlayer);
		cards = std::move(_o.cards);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS::clear()
{
	targetPlayer = -1;
	cards.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS::equals(const Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS& _o) const
{
	return targetPlayer == _o.targetPlayer &&
		cards.equals(_o.cards);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_DETECT_HOLECARDS).append(")");
	_buf.append(',');
	_buf.append("targetPlayer=");
	_buf.appendInt(targetPlayer);
	_buf.append(',');
	_buf.append("cards=");
	cards.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(targetPlayer);
	cards.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(targetPlayer);
	cards.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_DETECT_HOLECARDS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT8 targetPlayer; _parser.parseINT8(targetPlayer);
	AtfValidator::validateInt(_descr, "targetPlayer", targetPlayer, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szCards = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cards", szCards, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_REDRAW
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW::Protocol_MSG_TABLE_POWER_REDRAW()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW::clear()
{
	seqId = 0;
	costChips = 0;
	maxAllowedCardsToRedraw = 0;
	timeoutSec = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW::equals(const Protocol_MSG_TABLE_POWER_REDRAW& _o) const
{
	return seqId == _o.seqId &&
		costChips == _o.costChips &&
		maxAllowedCardsToRedraw == _o.maxAllowedCardsToRedraw &&
		timeoutSec == _o.timeoutSec;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_REDRAW).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	_buf.append(',');
	_buf.append("costChips=");
	_buf.appendUint(costChips);
	_buf.append(',');
	_buf.append("maxAllowedCardsToRedraw=");
	_buf.appendInt(maxAllowedCardsToRedraw);
	_buf.append(',');
	_buf.append("TO=");
	_buf.appendInt(timeoutSec);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
	_msg.composeUINT32(costChips);
	_msg.composeINT32(maxAllowedCardsToRedraw);
	_msg.composeINT32(timeoutSec);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
	_parser.parseUINT32(costChips);
	_parser.parseINT32(maxAllowedCardsToRedraw);
	_parser.parseINT32(timeoutSec);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_REDRAW";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	UINT32 costChips; _parser.parseUINT32(costChips);
	AtfValidator::validateInt(_descr, "costChips", costChips, _checker, __FILE__, __LINE__);
	INT32 maxAllowedCardsToRedraw; _parser.parseINT32(maxAllowedCardsToRedraw);
	AtfValidator::validateInt(_descr, "maxAllowedCardsToRedraw", maxAllowedCardsToRedraw, _checker, __FILE__, __LINE__);
	INT32 timeoutSec; _parser.parseINT32(timeoutSec);
	AtfValidator::validateInt(_descr, "timeoutSec", timeoutSec, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_REDRAW_ACK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_ACK::Protocol_MSG_TABLE_POWER_REDRAW_ACK()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_ACK::clear()
{
	seqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_ACK::equals(const Protocol_MSG_TABLE_POWER_REDRAW_ACK& _o) const
{
	return seqId == _o.seqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_REDRAW_ACK).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_ACK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_ACK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_ACK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_REDRAW_ACK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_REDRAW_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_REPLY::Protocol_MSG_TABLE_POWER_REDRAW_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_REPLY::Protocol_MSG_TABLE_POWER_REDRAW_REPLY(Protocol_MSG_TABLE_POWER_REDRAW_REPLY&& _o)
	: seqId(std::move(_o.seqId))
	, isFinal(std::move(_o.isFinal))
	, powersToRedraw(std::move(_o.powersToRedraw))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_REPLY& TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_REPLY::operator=(Protocol_MSG_TABLE_POWER_REDRAW_REPLY&& _o)
{
	if(this != &_o)
	{
		seqId = std::move(_o.seqId);
		isFinal = std::move(_o.isFinal);
		powersToRedraw = std::move(_o.powersToRedraw);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_REPLY::clear()
{
	seqId = 0;
	isFinal = false;
	powersToRedraw.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_REPLY::equals(const Protocol_MSG_TABLE_POWER_REDRAW_REPLY& _o) const
{
	return seqId == _o.seqId &&
		isFinal == _o.isFinal &&
		powersToRedraw.equals(_o.powersToRedraw);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_REDRAW_REPLY).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	_buf.append(',');
	_buf.append("isFinal=");
	_buf.appendUint(isFinal);
	_buf.append(',');
	_buf.append("powersToRedraw=");
	powersToRedraw.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
	_msg.composeBOOL(isFinal);
	powersToRedraw.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
	_parser.parseBOOL(isFinal);
	powersToRedraw.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_REDRAW_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	bool isFinal; _parser.parseBOOL(isFinal);
	AtfValidator::validateInt(_descr, "isFinal", isFinal, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szPowersToRedraw = ThinAtf::LAtfVector< INT32, 2 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("powersToRedraw"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "powersToRedraw", szPowersToRedraw, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_REDRAW_CANCEL
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_CANCEL::Protocol_MSG_TABLE_POWER_REDRAW_CANCEL()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_CANCEL::clear()
{
	seqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_CANCEL::equals(const Protocol_MSG_TABLE_POWER_REDRAW_CANCEL& _o) const
{
	return seqId == _o.seqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_CANCEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_REDRAW_CANCEL).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_CANCEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_CANCEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_REDRAW_CANCEL::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_REDRAW_CANCEL";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHANGE_FUTURE
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE(Protocol_MSG_TABLE_POWER_CHANGE_FUTURE&& _o)
	: seqId(std::move(_o.seqId))
	, cards(std::move(_o.cards))
	, timeoutSec(std::move(_o.timeoutSec))
	, cardVisibilityMasks(std::move(_o.cardVisibilityMasks))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE& TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE::operator=(Protocol_MSG_TABLE_POWER_CHANGE_FUTURE&& _o)
{
	if(this != &_o)
	{
		seqId = std::move(_o.seqId);
		cards = std::move(_o.cards);
		timeoutSec = std::move(_o.timeoutSec);
		cardVisibilityMasks = std::move(_o.cardVisibilityMasks);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE::clear()
{
	seqId = 0;
	cards.clear();
	timeoutSec = 0;
	cardVisibilityMasks.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE::equals(const Protocol_MSG_TABLE_POWER_CHANGE_FUTURE& _o) const
{
	return seqId == _o.seqId &&
		cards.equals(_o.cards) &&
		timeoutSec == _o.timeoutSec &&
		cardVisibilityMasks.equals(_o.cardVisibilityMasks);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHANGE_FUTURE).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	_buf.append(',');
	_buf.append("cards=");
	cards.toTraceString(_buf);
	_buf.append(',');
	_buf.append("TO=");
	_buf.appendInt(timeoutSec);
	_buf.append(',');
	_buf.append("cardVisibilityMasks=");
	cardVisibilityMasks.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
	cards.composeMsg(_msg);
	_msg.composeINT32(timeoutSec);
	cardVisibilityMasks.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
	cards.parseMsg(_parser);
	_parser.parseINT32(timeoutSec);
	cardVisibilityMasks.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHANGE_FUTURE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szCards = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cards", szCards, _checker, __FILE__, __LINE__);
	INT32 timeoutSec; _parser.parseINT32(timeoutSec);
	AtfValidator::validateInt(_descr, "timeoutSec", timeoutSec, _checker, __FILE__, __LINE__);
	int szCardVisibilityMasks = ThinAtf::LAtfVector< INT16, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cardVisibilityMasks"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cardVisibilityMasks", szCardVisibilityMasks, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK::clear()
{
	seqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK::equals(const Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK& _o) const
{
	return seqId == _o.seqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHANGE_FUTURE_ACK).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHANGE_FUTURE_ACK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY::clear()
{
	seqId = 0;
	discardCards = false;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY::equals(const Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY& _o) const
{
	return seqId == _o.seqId &&
		discardCards == _o.discardCards;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHANGE_FUTURE_REPLY).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	_buf.append(',');
	_buf.append("discardCards=");
	_buf.appendUint(discardCards);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
	_msg.composeBOOL(discardCards);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
	_parser.parseBOOL(discardCards);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHANGE_FUTURE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	bool discardCards; _parser.parseBOOL(discardCards);
	AtfValidator::validateInt(_descr, "discardCards", discardCards, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL::clear()
{
	seqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL::equals(const Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL& _o) const
{
	return seqId == _o.seqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE(Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE&& _o)
	: seqId(std::move(_o.seqId))
	, cards(std::move(_o.cards))
	, timeoutSec(std::move(_o.timeoutSec))
	, cardVisibilityMasks(std::move(_o.cardVisibilityMasks))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE& TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE::operator=(Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE&& _o)
{
	if(this != &_o)
	{
		seqId = std::move(_o.seqId);
		cards = std::move(_o.cards);
		timeoutSec = std::move(_o.timeoutSec);
		cardVisibilityMasks = std::move(_o.cardVisibilityMasks);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE::clear()
{
	seqId = 0;
	cards.clear();
	timeoutSec = 0;
	cardVisibilityMasks.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE::equals(const Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE& _o) const
{
	return seqId == _o.seqId &&
		cards.equals(_o.cards) &&
		timeoutSec == _o.timeoutSec &&
		cardVisibilityMasks.equals(_o.cardVisibilityMasks);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_PLAYERS_CHOICE).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	_buf.append(',');
	_buf.append("cards=");
	cards.toTraceString(_buf);
	_buf.append(',');
	_buf.append("TO=");
	_buf.appendInt(timeoutSec);
	_buf.append(',');
	_buf.append("cardVisibilityMasks=");
	cardVisibilityMasks.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
	cards.composeMsg(_msg);
	_msg.composeINT32(timeoutSec);
	cardVisibilityMasks.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
	cards.parseMsg(_parser);
	_parser.parseINT32(timeoutSec);
	cardVisibilityMasks.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_PLAYERS_CHOICE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szCards = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cards", szCards, _checker, __FILE__, __LINE__);
	INT32 timeoutSec; _parser.parseINT32(timeoutSec);
	AtfValidator::validateInt(_descr, "timeoutSec", timeoutSec, _checker, __FILE__, __LINE__);
	int szCardVisibilityMasks = ThinAtf::LAtfVector< INT16, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cardVisibilityMasks"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cardVisibilityMasks", szCardVisibilityMasks, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK::clear()
{
	seqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK::equals(const Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK& _o) const
{
	return seqId == _o.seqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_PLAYERS_CHOICE_ACK).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_PLAYERS_CHOICE_ACK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY::clear()
{
	seqId = 0;
	selectedIndex = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY::equals(const Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY& _o) const
{
	return seqId == _o.seqId &&
		selectedIndex == _o.selectedIndex;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	_buf.append(',');
	_buf.append("selectedIndex=");
	_buf.appendInt(selectedIndex);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
	_msg.composeINT8(selectedIndex);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
	_parser.parseINT8(selectedIndex);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	INT8 selectedIndex; _parser.parseINT8(selectedIndex);
	AtfValidator::validateInt(_descr, "selectedIndex", selectedIndex, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL::clear()
{
	seqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL::equals(const Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL& _o) const
{
	return seqId == _o.seqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT(Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT&& _o)
	: handId(std::move(_o.handId))
	, clientOrdinal(std::move(_o.clientOrdinal))
	, powerId(std::move(_o.powerId))
	, effectId(std::move(_o.effectId))
	, contents(std::move(_o.contents))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT& TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT::operator=(Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT&& _o)
{
	if(this != &_o)
	{
		handId = std::move(_o.handId);
		clientOrdinal = std::move(_o.clientOrdinal);
		powerId = std::move(_o.powerId);
		effectId = std::move(_o.effectId);
		contents = std::move(_o.contents);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT::clear()
{
	handId = 0;
	clientOrdinal = 0;
	powerId = 0;
	effectId = 0;
	contents.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT::equals(const Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT& _o) const
{
	return handId == _o.handId &&
		clientOrdinal == _o.clientOrdinal &&
		powerId == _o.powerId &&
		effectId == _o.effectId &&
		contents.equals(_o.contents);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_PRIVATE_EFFECT).append(")");
	_buf.append(',');
	_buf.append("hI=");
	_buf.appendUint64(handId);
	_buf.append(',');
	_buf.append("clientOrdinal=");
	_buf.appendUint(clientOrdinal);
	_buf.append(',');
	_buf.append("pI=");
	_buf.appendUint(powerId);
	_buf.append(',');
	_buf.append("effectId=");
	_buf.appendUint(effectId);
	_buf.append(',');
	_buf.append("contents=");
	_buf.append(contents);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(handId);
	_msg.composeUINT32(clientOrdinal);
	_msg.composeUINT32(powerId);
	_msg.composeUINT32(effectId);
	_msg.composeString(contents);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(handId);
	_parser.parseUINT32(clientOrdinal);
	_parser.parseUINT32(powerId);
	_parser.parseUINT32(effectId);
	_parser.parseStringP(contents);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_PRIVATE_EFFECT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
	UINT32 clientOrdinal; _parser.parseUINT32(clientOrdinal);
	AtfValidator::validateInt(_descr, "clientOrdinal", clientOrdinal, _checker, __FILE__, __LINE__);
	UINT32 powerId; _parser.parseUINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	UINT32 effectId; _parser.parseUINT32(effectId);
	AtfValidator::validateInt(_descr, "effectId", effectId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "contents"); size_t szContents = strlen(_dummy);
	AtfValidator::validateInt(_descr, "contents", szContents, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    SabotageTrappedCard
//=================================================================

TableClientThin::player::SabotageTrappedCard::SabotageTrappedCard()
{
	clear();
}

void TableClientThin::player::SabotageTrappedCard::clear()
{
	cardPosition.clear();
	bombsCount = 0;
}

bool TableClientThin::player::SabotageTrappedCard::equals(const SabotageTrappedCard& _o) const
{
	return cardPosition.equals(_o.cardPosition) &&
		bombsCount == _o.bombsCount;
}

const char *TableClientThin::player::SabotageTrappedCard::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("cardPosition=");
	cardPosition.toTraceString(_buf);
	_buf.append(',');
	_buf.append("bombsCount=");
	_buf.appendInt(bombsCount);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::SabotageTrappedCard::composeMsg(CommMsgBody& _msg) const
{
	cardPosition.composeMsg(_msg);
	_msg.composeINT8(bombsCount);
}

void TableClientThin::player::SabotageTrappedCard::parseMsg(CommMsgParser& _parser)
{
	cardPosition.parseMsg(_parser);
	_parser.parseINT8(bombsCount);
}

/*static*/ void TableClientThin::player::SabotageTrappedCard::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	PubBoardCardPosition::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cardPosition"), _fieldsWithUnparsedContent);
	INT8 bombsCount; _parser.parseINT8(bombsCount);
	AtfValidator::validateInt(_descr, "bombsCount", bombsCount, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS(Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS&& _o)
	: trappedCards(std::move(_o.trappedCards))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS& TableClientThin::player::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS::operator=(Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS&& _o)
{
	if(this != &_o)
	{
		trappedCards = std::move(_o.trappedCards);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS::clear()
{
	trappedCards.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS::equals(const Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS& _o) const
{
	return trappedCards.equals(_o.trappedCards);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS).append(")");
	_buf.append(',');
	_buf.append("trappedCards=");
	trappedCards.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS::composeMsg(CommMsgBody& _msg) const
{
	trappedCards.composeMsg(_msg);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS::parseMsg(CommMsgParser& _parser)
{
	trappedCards.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szTrappedCards = ThinAtf::LAtfVector< SabotageTrappedCard, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("trappedCards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "trappedCards", szTrappedCards, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST::Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST::clear()
{
	textId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST::equals(const Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST& _o) const
{
	return textId == _o.textId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_USER_MINI_CHAT_REQUEST).append(")");
	_buf.append(',');
	_buf.append("textId=");
	_buf.appendInt(textId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(textId);
}

void TableClientThin::player::Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(textId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_USER_MINI_CHAT_REQUEST";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT16 textId; _parser.parseINT16(textId);
	AtfValidator::validateInt(_descr, "textId", textId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_DARK_BET
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET::Protocol_MSG_TABLE_POWER_DARK_BET()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET::Protocol_MSG_TABLE_POWER_DARK_BET(Protocol_MSG_TABLE_POWER_DARK_BET&& _o)
	: seqId(std::move(_o.seqId))
	, values(std::move(_o.values))
	, timeoutSec(std::move(_o.timeoutSec))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET& TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET::operator=(Protocol_MSG_TABLE_POWER_DARK_BET&& _o)
{
	if(this != &_o)
	{
		seqId = std::move(_o.seqId);
		values = std::move(_o.values);
		timeoutSec = std::move(_o.timeoutSec);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET::clear()
{
	seqId = 0;
	values.clear();
	timeoutSec = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET::equals(const Protocol_MSG_TABLE_POWER_DARK_BET& _o) const
{
	return seqId == _o.seqId &&
		values.equals(_o.values) &&
		timeoutSec == _o.timeoutSec;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_DARK_BET).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	_buf.append(',');
	_buf.append("values=");
	values.toTraceString(_buf);
	_buf.append(',');
	_buf.append("TO=");
	_buf.appendInt(timeoutSec);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
	values.composeMsg(_msg);
	_msg.composeINT32(timeoutSec);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
	values.parseMsg(_parser);
	_parser.parseINT32(timeoutSec);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_DARK_BET";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szValues = ThinAtf::LAtfVector< INT32 , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("values"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "values", szValues, _checker, __FILE__, __LINE__);
	INT32 timeoutSec; _parser.parseINT32(timeoutSec);
	AtfValidator::validateInt(_descr, "timeoutSec", timeoutSec, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_DARK_BET_ACK
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_ACK::Protocol_MSG_TABLE_POWER_DARK_BET_ACK()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_ACK::clear()
{
	seqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_ACK::equals(const Protocol_MSG_TABLE_POWER_DARK_BET_ACK& _o) const
{
	return seqId == _o.seqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_DARK_BET_ACK).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_ACK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_ACK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_ACK::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_DARK_BET_ACK";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_DARK_BET_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_REPLY::Protocol_MSG_TABLE_POWER_DARK_BET_REPLY()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_REPLY::clear()
{
	seqId = 0;
	value = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_REPLY::equals(const Protocol_MSG_TABLE_POWER_DARK_BET_REPLY& _o) const
{
	return seqId == _o.seqId &&
		value == _o.value;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_DARK_BET_REPLY).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	_buf.append(',');
	_buf.append("value=");
	_buf.appendInt(value);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
	_msg.composeINT32(value);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
	_parser.parseINT32(value);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_DARK_BET_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	INT32 value; _parser.parseINT32(value);
	AtfValidator::validateInt(_descr, "value", value, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL::Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL::clear()
{
	seqId = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL::equals(const Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL& _o) const
{
	return seqId == _o.seqId;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_DARK_BET_CANCEL).append(")");
	_buf.append(',');
	_buf.append("sq=");
	_buf.appendUint(seqId);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(seqId);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(seqId);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_DARK_BET_CANCEL";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 seqId; _parser.parseUINT32(seqId);
	AtfValidator::validateInt(_descr, "seqId", seqId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_MOUSE_OVER
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_MOUSE_OVER::Protocol_MSG_TABLE_POWER_MOUSE_OVER()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_MOUSE_OVER::clear()
{
	position = 0;
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_MOUSE_OVER::equals(const Protocol_MSG_TABLE_POWER_MOUSE_OVER& _o) const
{
	return position == _o.position;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_MOUSE_OVER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_MOUSE_OVER).append(")");
	_buf.append(',');
	_buf.append("position=");
	_buf.appendInt(position);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_MOUSE_OVER::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(position);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_MOUSE_OVER::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(position);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_MOUSE_OVER::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_MOUSE_OVER";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT8 position; _parser.parseINT8(position);
	AtfValidator::validateInt(_descr, "position", position, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION(Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION&& _o)
	: handId(std::move(_o.handId))
	, powerId(std::move(_o.powerId))
	, effectbody(std::move(_o.effectbody))
{
}

TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION& TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION::operator=(Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION&& _o)
{
	if(this != &_o)
	{
		handId = std::move(_o.handId);
		powerId = std::move(_o.powerId);
		effectbody = std::move(_o.effectbody);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION::clear()
{
	handId = 0;
	powerId = 0;
	effectbody.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION::equals(const Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION& _o) const
{
	return handId == _o.handId &&
		powerId == _o.powerId &&
		effectbody.equals(_o.effectbody);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_POWER_PRIVATE_ANIMATION).append(")");
	_buf.append(',');
	_buf.append("hI=");
	_buf.appendUint64(handId);
	_buf.append(',');
	_buf.append("pI=");
	_buf.appendUint(powerId);
	_buf.append(',');
	_buf.append("effectbody=");
	effectbody.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(handId);
	_msg.composeUINT32(powerId);
	_msg.composeMsgBody(effectbody);
}

void TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(handId);
	_parser.parseUINT32(powerId);
	_parser.parseMsgBody(effectbody);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_POWER_PRIVATE_ANIMATION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
	UINT32 powerId; _parser.parseUINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	size_t szEffectbody; _parser.skipMsgBody(szEffectbody);  /*effectbody*/
	AtfValidator::validateInt(_descr, "effectbody", szEffectbody, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    PowerCardInfo
//=================================================================

TableClientThin::player::PowerCardInfo::PowerCardInfo()
{
	clear();
}

void TableClientThin::player::PowerCardInfo::clear()
{
	powerId = 0;
	cost = 0;
}

bool TableClientThin::player::PowerCardInfo::equals(const PowerCardInfo& _o) const
{
	return powerId == _o.powerId &&
		cost == _o.cost;
}

const char *TableClientThin::player::PowerCardInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("cost=");
	_buf.appendInt(cost);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::PowerCardInfo::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(powerId);
	_msg.composeINT32(cost);
}

void TableClientThin::player::PowerCardInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(powerId);
	_parser.parseINT32(cost);
}

/*static*/ void TableClientThin::player::PowerCardInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT32 powerId; _parser.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	INT32 cost; _parser.parseINT32(cost);
	AtfValidator::validateInt(_descr, "cost", cost, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    PrivDealingPowerCardsAnimationEffect
//=================================================================

TableClientThin::player::PrivDealingPowerCardsAnimationEffect::PrivDealingPowerCardsAnimationEffect()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::PrivDealingPowerCardsAnimationEffect::PrivDealingPowerCardsAnimationEffect(PrivDealingPowerCardsAnimationEffect&& _o)
	: numPowerCardsBeforeDealt(std::move(_o.numPowerCardsBeforeDealt))
	, powerCards(std::move(_o.powerCards))
{
}

TableClientThin::player::PrivDealingPowerCardsAnimationEffect& TableClientThin::player::PrivDealingPowerCardsAnimationEffect::operator=(PrivDealingPowerCardsAnimationEffect&& _o)
{
	if(this != &_o)
	{
		numPowerCardsBeforeDealt = std::move(_o.numPowerCardsBeforeDealt);
		powerCards = std::move(_o.powerCards);
	}
	return *this;
}

#endif

void TableClientThin::player::PrivDealingPowerCardsAnimationEffect::clear()
{
	numPowerCardsBeforeDealt = 0;
	powerCards.clear();
}

bool TableClientThin::player::PrivDealingPowerCardsAnimationEffect::equals(const PrivDealingPowerCardsAnimationEffect& _o) const
{
	return numPowerCardsBeforeDealt == _o.numPowerCardsBeforeDealt &&
		powerCards.equals(_o.powerCards);
}

const char *TableClientThin::player::PrivDealingPowerCardsAnimationEffect::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("numPowerCardsBeforeDealt=");
	_buf.appendInt(numPowerCardsBeforeDealt);
	_buf.append(',');
	_buf.append("powerCards=");
	powerCards.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::player::PrivDealingPowerCardsAnimationEffect::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(numPowerCardsBeforeDealt);
	powerCards.composeMsg(_msg);
}

void TableClientThin::player::PrivDealingPowerCardsAnimationEffect::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(numPowerCardsBeforeDealt);
	powerCards.parseMsg(_parser);
}

/*static*/ void TableClientThin::player::PrivDealingPowerCardsAnimationEffect::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT32 numPowerCardsBeforeDealt; _parser.parseINT32(numPowerCardsBeforeDealt);
	AtfValidator::validateInt(_descr, "numPowerCardsBeforeDealt", numPowerCardsBeforeDealt, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szPowerCards = ThinAtf::LAtfVector< PowerCardInfo, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("powerCards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "powerCards", szPowerCards, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_TABLE_THROW
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_THROW::Protocol_MSG_TABLE_THROW()
{
	clear();
}

void TableClientThin::player::Protocol_MSG_TABLE_THROW::clear()
{
	throwableTypeId = 0;
	seat = -1;
}

bool TableClientThin::player::Protocol_MSG_TABLE_THROW::equals(const Protocol_MSG_TABLE_THROW& _o) const
{
	return throwableTypeId == _o.throwableTypeId &&
		seat == _o.seat;
}

const char *TableClientThin::player::Protocol_MSG_TABLE_THROW::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_THROW).append(")");
	_buf.append(',');
	_buf.append("throwableTypeId=");
	_buf.appendUint(throwableTypeId);
	_buf.append(',');
	_buf.append("s=");
	_buf.appendInt(seat);
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_THROW::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(throwableTypeId);
	_msg.composeINT8(seat);
}

void TableClientThin::player::Protocol_MSG_TABLE_THROW::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(throwableTypeId);
	_parser.parseINT8(seat);
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_THROW::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_THROW";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 throwableTypeId; _parser.parseUINT32(throwableTypeId);
	AtfValidator::validateInt(_descr, "throwableTypeId", throwableTypeId, _checker, __FILE__, __LINE__);
	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_THROW_REPLY
//=================================================================

TableClientThin::player::Protocol_MSG_TABLE_THROW_REPLY::Protocol_MSG_TABLE_THROW_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::player::Protocol_MSG_TABLE_THROW_REPLY::Protocol_MSG_TABLE_THROW_REPLY(Protocol_MSG_TABLE_THROW_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
{
}

TableClientThin::player::Protocol_MSG_TABLE_THROW_REPLY& TableClientThin::player::Protocol_MSG_TABLE_THROW_REPLY::operator=(Protocol_MSG_TABLE_THROW_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
	}
	return *this;
}

#endif

void TableClientThin::player::Protocol_MSG_TABLE_THROW_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
	clientMsg_txtEx.clear();
}

bool TableClientThin::player::Protocol_MSG_TABLE_THROW_REPLY::equals(const Protocol_MSG_TABLE_THROW_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx);
}

const char *TableClientThin::player::Protocol_MSG_TABLE_THROW_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_THROW_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode)
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
		_buf.append(',');
		_buf.append("m=");
		clientMsg_txtEx.toTraceString(_buf);
	}
	return _buf.c_str();
}

void TableClientThin::player::Protocol_MSG_TABLE_THROW_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode)
	{
		_msg.composeString(errStr);
		_msg.composeMsgBody(clientMsg_txtEx);
	}
}

void TableClientThin::player::Protocol_MSG_TABLE_THROW_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode)
	{
		_parser.parseStringP(errStr);
		_parser.parseMsgBody(clientMsg_txtEx);
	}
}

/*static*/ void TableClientThin::player::Protocol_MSG_TABLE_THROW_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_THROW_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if(errCode)
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
		size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
		AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    ClientExtraForTakeFromPotEvent
//=================================================================

// @Override
void TableClientThin::publication::ClientExtraForTakeFromPotEvent::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(numWinners);
	_msg.composeBOOL(isSingleWinner);
	_msg.composeBOOL(winHighHand);
	_msg.composeINT8(maxPotLevel);
	_msg.composeBYTE(bestHigh);
	if(kickerRanks.size() < 4)
	{
		kickerRanks.composeMsg(_msg);
	}
	else
	{
		for(int i = 0; i < 4; ++i)
		{
			_msg.composeINT8(kickerRanks[i]);
		}
	}
	_msg.composeBYTE(boardNum);
}

// @Override
void TableClientThin::publication::ClientExtraForTakeFromPotEvent::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(numWinners);
	_parser.parseBOOL(isSingleWinner);
	_parser.parseBOOL(winHighHand);
	_parser.parseINT8(maxPotLevel);
	_parser.parseBYTE(bestHigh);
	for(int i = 0; i < 4; ++i)
	{
		INT8 t;
		_parser.parseINT8(t);
		if(t == 0) break;
		kickerRanks.push_back(t);
	}
	if(_parser.parseEnded()) return;
	_parser.parseBYTE(boardNum);
}

TableClientThin::publication::ClientExtraForTakeFromPotEvent::ClientExtraForTakeFromPotEvent()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ClientExtraForTakeFromPotEvent::ClientExtraForTakeFromPotEvent(ClientExtraForTakeFromPotEvent&& _o)
	: numWinners(std::move(_o.numWinners))
	, isSingleWinner(std::move(_o.isSingleWinner))
	, winHighHand(std::move(_o.winHighHand))
	, maxPotLevel(std::move(_o.maxPotLevel))
	, bestHigh(std::move(_o.bestHigh))
	, kickerRanks(std::move(_o.kickerRanks))
	, boardNum(std::move(_o.boardNum))
{
}

TableClientThin::publication::ClientExtraForTakeFromPotEvent& TableClientThin::publication::ClientExtraForTakeFromPotEvent::operator=(ClientExtraForTakeFromPotEvent&& _o)
{
	if(this != &_o)
	{
		numWinners = std::move(_o.numWinners);
		isSingleWinner = std::move(_o.isSingleWinner);
		winHighHand = std::move(_o.winHighHand);
		maxPotLevel = std::move(_o.maxPotLevel);
		bestHigh = std::move(_o.bestHigh);
		kickerRanks = std::move(_o.kickerRanks);
		boardNum = std::move(_o.boardNum);
	}
	return *this;
}

#endif

void TableClientThin::publication::ClientExtraForTakeFromPotEvent::clear()
{
	numWinners = 0;
	isSingleWinner = false;
	winHighHand = false;
	maxPotLevel = 0;
	bestHigh = 0;
	kickerRanks.clear();
	boardNum = 0;
}

bool TableClientThin::publication::ClientExtraForTakeFromPotEvent::equals(const ClientExtraForTakeFromPotEvent& _o) const
{
	return numWinners == _o.numWinners &&
		isSingleWinner == _o.isSingleWinner &&
		winHighHand == _o.winHighHand &&
		maxPotLevel == _o.maxPotLevel &&
		bestHigh == _o.bestHigh &&
		kickerRanks.equals(_o.kickerRanks) &&
		boardNum == _o.boardNum;
}

const char *TableClientThin::publication::ClientExtraForTakeFromPotEvent::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("numWinners=");
	_buf.appendInt(numWinners);
	_buf.append(',');
	_buf.append("isSingleWinner=");
	_buf.appendUint(isSingleWinner);
	_buf.append(',');
	_buf.append("winHighHand=");
	_buf.appendUint(winHighHand);
	_buf.append(',');
	_buf.append("maxPotLevel=");
	_buf.appendInt(maxPotLevel);
	_buf.append(',');
	_buf.append("bestHigh=");
	_buf.appendUint(bestHigh);
	_buf.append(',');
	_buf.append("kickerRanks=");
	kickerRanks.toTraceString(_buf);
	_buf.append(',');
	_buf.append("boardNum=");
	_buf.appendUint(boardNum);
	_buf.append('}');
	return _buf.c_str();
}

/*static*/ void TableClientThin::publication::ClientExtraForTakeFromPotEvent::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT8 numWinners; _parser.parseINT8(numWinners);
	AtfValidator::validateInt(_descr, "numWinners", numWinners, _checker, __FILE__, __LINE__);
	bool isSingleWinner; _parser.parseBOOL(isSingleWinner);
	AtfValidator::validateInt(_descr, "isSingleWinner", isSingleWinner, _checker, __FILE__, __LINE__);
	bool winHighHand; _parser.parseBOOL(winHighHand);
	AtfValidator::validateInt(_descr, "winHighHand", winHighHand, _checker, __FILE__, __LINE__);
	INT8 maxPotLevel; _parser.parseINT8(maxPotLevel);
	AtfValidator::validateInt(_descr, "maxPotLevel", maxPotLevel, _checker, __FILE__, __LINE__);
	BYTE bestHigh; _parser.parseBYTE(bestHigh);
	AtfValidator::validateInt(_descr, "bestHigh", bestHigh, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szKickerRanks = ThinAtf::AtfVector0< INT8, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("kickerRanks"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "kickerRanks", szKickerRanks, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	BYTE boardNum; _parser.parseBYTE(boardNum);
	AtfValidator::validateInt(_descr, "boardNum", boardNum, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_ACTION
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTION::Protocol_MSG_TABLE_SUBSCR_ACTION()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTION::clear()
{
	seat = -1;
	action = '0';
	amount = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTION::equals(const Protocol_MSG_TABLE_SUBSCR_ACTION& _o) const
{
	return seat == _o.seat &&
		action == _o.action &&
		amount == _o.amount;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_ACTION).append(")");
	_buf.append(',');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("a=");
	_buf.append(action);
	_buf.append(',');
	_buf.append("v=");
	_buf.appendUint(amount);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(seat);
	_msg.composeINT8(action);
	_msg.composeUINT32(amount);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(seat);
	{ INT8 _n; _parser.parseINT8(_n); action = _n; }
	_parser.parseUINT32(amount);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_ACTION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	char action; { INT8 _n; _parser.parseINT8(_n); action = _n; }
	AtfValidator::validateInt(_descr, "action", action, _checker, __FILE__, __LINE__);
	UINT32 amount; _parser.parseUINT32(amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT::Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT::clear()
{
	seat = -1;
	isBlindOrAnte = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT::equals(const Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT& _o) const
{
	return seat == _o.seat &&
		isBlindOrAnte == _o.isBlindOrAnte;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_ACTIVESEAT).append(")");
	_buf.append(',');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("isBlindOrAnte=");
	_buf.appendUint(isBlindOrAnte);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(seat);
	_msg.composeBYTE(isBlindOrAnte);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(seat);
	_parser.parseBYTE(isBlindOrAnte);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_ACTIVESEAT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	BYTE isBlindOrAnte; _parser.parseBYTE(isBlindOrAnte);
	AtfValidator::validateInt(_descr, "isBlindOrAnte", isBlindOrAnte, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_BEGINHAND
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_BEGINHAND::Protocol_MSG_TABLE_SUBSCR_BEGINHAND()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_BEGINHAND::clear()
{
	dealer = -1;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_BEGINHAND::equals(const Protocol_MSG_TABLE_SUBSCR_BEGINHAND& _o) const
{
	return dealer == _o.dealer;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_BEGINHAND::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_BEGINHAND).append(")");
	_buf.append(',');
	_buf.append("dealer=");
	_buf.appendInt(dealer);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_BEGINHAND::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(dealer);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_BEGINHAND::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(dealer);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_BEGINHAND::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_BEGINHAND";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT8 dealer; _parser.parseINT8(dealer);
	AtfValidator::validateInt(_descr, "dealer", dealer, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE(Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE&& _o)
	: seat(std::move(_o.seat))
	, chat(std::move(_o.chat))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE::operator=(Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE&& _o)
{
	if(this != &_o)
	{
		seat = std::move(_o.seat);
		chat = std::move(_o.chat);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE::clear()
{
	seat = -1;
	chat.clear();
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE::equals(const Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE& _o) const
{
	return seat == _o.seat &&
		chat.equals(_o.chat);
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_CHAT_BUBBLE).append(")");
	_buf.append(',');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("chat=");
	_buf.append(chat);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(seat);
	_msg.composeString(chat);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(seat);
	_parser.parseStringP(chat);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_CHAT_BUBBLE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "chat"); size_t szChat = strlen(_dummy);
	AtfValidator::validateInt(_descr, "chat", szChat, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_DEALBOARD
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD::Protocol_MSG_TABLE_SUBSCR_DEALBOARD()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD::clear()
{
	numOfBoardCards = 0;
	runItTwiceMode = false;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD::equals(const Protocol_MSG_TABLE_SUBSCR_DEALBOARD& _o) const
{
	return numOfBoardCards == _o.numOfBoardCards &&
		runItTwiceMode == _o.runItTwiceMode;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_DEALBOARD).append(")");
	_buf.append(',');
	_buf.append("numOfBoardCards=");
	_buf.appendUint(numOfBoardCards);
	_buf.append(',');
	_buf.append("runItTwiceMode=");
	_buf.appendUint(runItTwiceMode);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(numOfBoardCards);
	_msg.composeBOOL(runItTwiceMode);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(numOfBoardCards);
	_parser.parseBOOL(runItTwiceMode);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_DEALBOARD";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE numOfBoardCards; _parser.parseBYTE(numOfBoardCards);
	AtfValidator::validateInt(_descr, "numOfBoardCards", numOfBoardCards, _checker, __FILE__, __LINE__);
	bool runItTwiceMode; _parser.parseBOOL(runItTwiceMode);
	AtfValidator::validateInt(_descr, "runItTwiceMode", runItTwiceMode, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT::Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT::clear()
{
	boardNumber = 0;
	numCardsDealt = 0;
	numBoardCards = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT::equals(const Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT& _o) const
{
	return boardNumber == _o.boardNumber &&
		numCardsDealt == _o.numCardsDealt &&
		numBoardCards == _o.numBoardCards;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_DEALBOARD_RIT).append(")");
	_buf.append(',');
	_buf.append("boardNumber=");
	_buf.appendUint(boardNumber);
	_buf.append(',');
	_buf.append("numCardsDealt=");
	_buf.appendUint(numCardsDealt);
	_buf.append(',');
	_buf.append("numBoardCards=");
	_buf.appendUint(numBoardCards);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(boardNumber);
	_msg.composeBYTE(numCardsDealt);
	_msg.composeBYTE(numBoardCards);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(boardNumber);
	_parser.parseBYTE(numCardsDealt);
	_parser.parseBYTE(numBoardCards);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_DEALBOARD_RIT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE boardNumber; _parser.parseBYTE(boardNumber);
	AtfValidator::validateInt(_descr, "boardNumber", boardNumber, _checker, __FILE__, __LINE__);
	BYTE numCardsDealt; _parser.parseBYTE(numCardsDealt);
	AtfValidator::validateInt(_descr, "numCardsDealt", numCardsDealt, _checker, __FILE__, __LINE__);
	BYTE numBoardCards; _parser.parseBYTE(numBoardCards);
	AtfValidator::validateInt(_descr, "numBoardCards", numBoardCards, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS(): playerCardInfos("FF") 
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS(Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS&& _o)
	: playerCardInfos(std::move(_o.playerCardInfos))
	, dealerPos(std::move(_o.dealerPos))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS::operator=(Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS&& _o)
{
	if(this != &_o)
	{
		playerCardInfos = std::move(_o.playerCardInfos);
		dealerPos = std::move(_o.dealerPos);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS::clear()
{
	playerCardInfos.clear();
	dealerPos = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS::equals(const Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS& _o) const
{
	return playerCardInfos.equals(_o.playerCardInfos) &&
		dealerPos == _o.dealerPos;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_DEALPLAYERCARDS).append(")");
	_buf.append(',');
	_buf.append("playerCardInfos=");
	playerCardInfos.toTraceString(_buf);
	_buf.append(',');
	_buf.append("dealerPos=");
	_buf.appendInt(dealerPos);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS::composeMsg(CommMsgBody& _msg) const
{
	playerCardInfos.composeMsg(_msg);
	_msg.composeINT8(dealerPos);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS::parseMsg(CommMsgParser& _parser)
{
	playerCardInfos.parseMsg(_parser);
	_parser.parseINT8(dealerPos);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_DEALPLAYERCARDS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szPlayerCardInfos = ThinAtf::AtfVectorWithSpecialTerminator< P_SuscrPlayerCards >::validateMsg(_parser, "FF", _checker, _descbuf.assign(_descr).append('.').append("playerCardInfos"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "playerCardInfos", szPlayerCardInfos, _checker, __FILE__, __LINE__);
	INT8 dealerPos; _parser.parseINT8(dealerPos);
	AtfValidator::validateInt(_descr, "dealerPos", dealerPos, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_ENDHAND
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ENDHAND::Protocol_MSG_TABLE_SUBSCR_ENDHAND()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ENDHAND::clear()
{
	handStatus = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ENDHAND::equals(const Protocol_MSG_TABLE_SUBSCR_ENDHAND& _o) const
{
	return handStatus == _o.handStatus;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ENDHAND::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_ENDHAND).append(")");
	_buf.append(',');
	_buf.append("handStatus=");
	_buf.appendUint(handStatus);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ENDHAND::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(handStatus);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ENDHAND::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(handStatus);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ENDHAND::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_ENDHAND";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE handStatus; _parser.parseBYTE(handStatus);
	AtfValidator::validateInt(_descr, "handStatus", handStatus, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE(Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE&& _o)
	: i18nString(std::move(_o.i18nString))
	, timerValue(std::move(_o.timerValue))
	, flags(std::move(_o.flags))
	, chatItemId(std::move(_o.chatItemId))
	, brandMask(std::move(_o.brandMask))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE::operator=(Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE&& _o)
{
	if(this != &_o)
	{
		i18nString = std::move(_o.i18nString);
		timerValue = std::move(_o.timerValue);
		flags = std::move(_o.flags);
		chatItemId = std::move(_o.chatItemId);
		brandMask = std::move(_o.brandMask);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE::clear()
{
	i18nString.clear();
	timerValue = 0;
	flags = 0;
	chatItemId = 0;
	brandMask = BrandType_ALLMask;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE::equals(const Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE& _o) const
{
	return i18nString.equals(_o.i18nString) &&
		timerValue == _o.timerValue &&
		flags == _o.flags &&
		chatItemId == _o.chatItemId &&
		brandMask == _o.brandMask;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_I18N_MESSAGE).append(")");
	_buf.append(',');
	_buf.append("i18nString=");
	ThinAtf::AtfTempl<I18nPString>::ToTraceString(_buf, i18nString);
	_buf.append(',');
	_buf.append("timerValue=");
	_buf.appendUint(timerValue);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("chatItemId=");
	_buf.appendUint(chatItemId);
	_buf.append(',');
	_buf.append("brandMask=");
	_buf.appendUint(brandMask);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE::composeMsg(CommMsgBody& _msg) const
{
	i18nString.compose(_msg);
	_msg.composeUINT16(timerValue);
	_msg.composeUINT32(flags);
	_msg.composeUINT32(chatItemId);
	_msg.composeUINT32(brandMask);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE::parseMsg(CommMsgParser& _parser)
{
	i18nString.parse(_parser);
	_parser.parseUINT16(timerValue);
	_parser.parseUINT32(flags);
	_parser.parseUINT32(chatItemId);
	_parser.parseUINT32(brandMask);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_I18N_MESSAGE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	I18nPString i18nString; i18nString.parse(_parser);
	UINT16 timerValue; _parser.parseUINT16(timerValue);
	AtfValidator::validateInt(_descr, "timerValue", timerValue, _checker, __FILE__, __LINE__);
	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT32 chatItemId; _parser.parseUINT32(chatItemId);
	AtfValidator::validateInt(_descr, "chatItemId", chatItemId, _checker, __FILE__, __LINE__);
	UINT32 brandMask; _parser.parseUINT32(brandMask);
	AtfValidator::validateInt(_descr, "brandMask", brandMask, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    ClientMsg_TxtEx_Tournmt_NewRound
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewRound::ClientMsg_TxtEx_Tournmt_NewRound()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewRound::ClientMsg_TxtEx_Tournmt_NewRound(ClientMsg_TxtEx_Tournmt_NewRound&& _o)
	: handType(std::move(_o.handType))
	, potStruct(std::move(_o.potStruct))
	, stakeSmall(std::move(_o.stakeSmall))
	, stakeBig(std::move(_o.stakeBig))
	, ante(std::move(_o.ante))
	, round(std::move(_o.round))
	, tableStakes(std::move(_o.tableStakes))
{
}

TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewRound& TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewRound::operator=(ClientMsg_TxtEx_Tournmt_NewRound&& _o)
{
	if(this != &_o)
	{
		handType = std::move(_o.handType);
		potStruct = std::move(_o.potStruct);
		stakeSmall = std::move(_o.stakeSmall);
		stakeBig = std::move(_o.stakeBig);
		ante = std::move(_o.ante);
		round = std::move(_o.round);
		tableStakes = std::move(_o.tableStakes);
	}
	return *this;
}

#endif

void TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewRound::clear()
{
	handType = 0;
	potStruct = 0;
	stakeSmall = 0;
	stakeBig = 0;
	ante = 0;
	round = 0;
	tableStakes.clear();
}

bool TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewRound::equals(const ClientMsg_TxtEx_Tournmt_NewRound& _o) const
{
	return handType == _o.handType &&
		potStruct == _o.potStruct &&
		stakeSmall == _o.stakeSmall &&
		stakeBig == _o.stakeBig &&
		ante == _o.ante &&
		round == _o.round &&
		tableStakes.equals(_o.tableStakes);
}

const char *TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewRound::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("handType=");
	_buf.appendUint(handType);
	_buf.append(',');
	_buf.append("potStruct=");
	_buf.appendUint(potStruct);
	_buf.append(',');
	_buf.append("stakeSmall=");
	_buf.appendUint(stakeSmall);
	_buf.append(',');
	_buf.append("stakeBig=");
	_buf.appendUint(stakeBig);
	_buf.append(',');
	_buf.append("ante=");
	_buf.appendUint(ante);
	_buf.append(',');
	_buf.append("round=");
	_buf.appendInt(round);
	_buf.append(',');
	_buf.append("tableStakes=");
	tableStakes.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewRound::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(handType);
	_msg.composeBYTE(potStruct);
	_msg.composeUINT32(stakeSmall);
	_msg.composeUINT32(stakeBig);
	_msg.composeUINT32(ante);
	_msg.composeINT8(round);
	tableStakes.composeMsg(_msg);
}

void TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewRound::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(handType);
	_parser.parseBYTE(potStruct);
	_parser.parseUINT32(stakeSmall);
	_parser.parseUINT32(stakeBig);
	_parser.parseUINT32(ante);
	_parser.parseINT8(round);
	if(_parser.parseEnded()) return;
	tableStakes.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewRound::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	BYTE handType; _parser.parseBYTE(handType);
	AtfValidator::validateInt(_descr, "handType", handType, _checker, __FILE__, __LINE__);
	BYTE potStruct; _parser.parseBYTE(potStruct);
	AtfValidator::validateInt(_descr, "potStruct", potStruct, _checker, __FILE__, __LINE__);
	UINT32 stakeSmall; _parser.parseUINT32(stakeSmall);
	AtfValidator::validateInt(_descr, "stakeSmall", stakeSmall, _checker, __FILE__, __LINE__);
	UINT32 stakeBig; _parser.parseUINT32(stakeBig);
	AtfValidator::validateInt(_descr, "stakeBig", stakeBig, _checker, __FILE__, __LINE__);
	UINT32 ante; _parser.parseUINT32(ante);
	AtfValidator::validateInt(_descr, "ante", ante, _checker, __FILE__, __LINE__);
	INT8 round; _parser.parseINT8(round);
	AtfValidator::validateInt(_descr, "round", round, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	PString _descbuf;
	TableCommonThin::TableStakes::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tableStakes"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    ClientMsg_TxtEx_Tournmt_NewStakes
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewStakes::ClientMsg_TxtEx_Tournmt_NewStakes()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewStakes::ClientMsg_TxtEx_Tournmt_NewStakes(ClientMsg_TxtEx_Tournmt_NewStakes&& _o)
	: handType(std::move(_o.handType))
	, potStruct(std::move(_o.potStruct))
	, stakeSmall(std::move(_o.stakeSmall))
	, stakeBig(std::move(_o.stakeBig))
	, ante(std::move(_o.ante))
	, tableStakes(std::move(_o.tableStakes))
{
}

TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewStakes& TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewStakes::operator=(ClientMsg_TxtEx_Tournmt_NewStakes&& _o)
{
	if(this != &_o)
	{
		handType = std::move(_o.handType);
		potStruct = std::move(_o.potStruct);
		stakeSmall = std::move(_o.stakeSmall);
		stakeBig = std::move(_o.stakeBig);
		ante = std::move(_o.ante);
		tableStakes = std::move(_o.tableStakes);
	}
	return *this;
}

#endif

void TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewStakes::clear()
{
	handType = 0;
	potStruct = 0;
	stakeSmall = 0;
	stakeBig = 0;
	ante = 0;
	tableStakes.clear();
}

bool TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewStakes::equals(const ClientMsg_TxtEx_Tournmt_NewStakes& _o) const
{
	return handType == _o.handType &&
		potStruct == _o.potStruct &&
		stakeSmall == _o.stakeSmall &&
		stakeBig == _o.stakeBig &&
		ante == _o.ante &&
		tableStakes.equals(_o.tableStakes);
}

const char *TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewStakes::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("handType=");
	_buf.appendUint(handType);
	_buf.append(',');
	_buf.append("potStruct=");
	_buf.appendUint(potStruct);
	_buf.append(',');
	_buf.append("stakeSmall=");
	_buf.appendUint(stakeSmall);
	_buf.append(',');
	_buf.append("stakeBig=");
	_buf.appendUint(stakeBig);
	_buf.append(',');
	_buf.append("ante=");
	_buf.appendUint(ante);
	_buf.append(',');
	_buf.append("tableStakes=");
	tableStakes.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewStakes::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(handType);
	_msg.composeBYTE(potStruct);
	_msg.composeUINT32(stakeSmall);
	_msg.composeUINT32(stakeBig);
	_msg.composeUINT32(ante);
	tableStakes.composeMsg(_msg);
}

void TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewStakes::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(handType);
	_parser.parseBYTE(potStruct);
	_parser.parseUINT32(stakeSmall);
	_parser.parseUINT32(stakeBig);
	_parser.parseUINT32(ante);
	if(_parser.parseEnded()) return;
	tableStakes.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_Tournmt_NewStakes::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	BYTE handType; _parser.parseBYTE(handType);
	AtfValidator::validateInt(_descr, "handType", handType, _checker, __FILE__, __LINE__);
	BYTE potStruct; _parser.parseBYTE(potStruct);
	AtfValidator::validateInt(_descr, "potStruct", potStruct, _checker, __FILE__, __LINE__);
	UINT32 stakeSmall; _parser.parseUINT32(stakeSmall);
	AtfValidator::validateInt(_descr, "stakeSmall", stakeSmall, _checker, __FILE__, __LINE__);
	UINT32 stakeBig; _parser.parseUINT32(stakeBig);
	AtfValidator::validateInt(_descr, "stakeBig", stakeBig, _checker, __FILE__, __LINE__);
	UINT32 ante; _parser.parseUINT32(ante);
	AtfValidator::validateInt(_descr, "ante", ante, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	PString _descbuf;
	TableCommonThin::TableStakes::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tableStakes"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    ClientMsg_TxtEx_Milestone_Hand
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_Milestone_Hand::ClientMsg_TxtEx_Milestone_Hand()
{
	clear();
}

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Hand::clear()
{
	handId = 0;
}

bool TableClientThin::publication::ClientMsg_TxtEx_Milestone_Hand::equals(const ClientMsg_TxtEx_Milestone_Hand& _o) const
{
	return handId == _o.handId;
}

const char *TableClientThin::publication::ClientMsg_TxtEx_Milestone_Hand::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("handId=");
	_buf.appendUint64(handId);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Hand::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(handId);
}

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Hand::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(handId);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Hand::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    ClientMsg_TxtEx_Milestone_Prior_Draw
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_Milestone_Prior_Draw::ClientMsg_TxtEx_Milestone_Prior_Draw()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ClientMsg_TxtEx_Milestone_Prior_Draw::ClientMsg_TxtEx_Milestone_Prior_Draw(ClientMsg_TxtEx_Milestone_Prior_Draw&& _o)
	: prize(std::move(_o.prize))
{
}

TableClientThin::publication::ClientMsg_TxtEx_Milestone_Prior_Draw& TableClientThin::publication::ClientMsg_TxtEx_Milestone_Prior_Draw::operator=(ClientMsg_TxtEx_Milestone_Prior_Draw&& _o)
{
	if(this != &_o)
	{
		prize = std::move(_o.prize);
	}
	return *this;
}

#endif

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Prior_Draw::clear()
{
	prize.clear();
}

bool TableClientThin::publication::ClientMsg_TxtEx_Milestone_Prior_Draw::equals(const ClientMsg_TxtEx_Milestone_Prior_Draw& _o) const
{
	return prize.equals(_o.prize);
}

const char *TableClientThin::publication::ClientMsg_TxtEx_Milestone_Prior_Draw::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("prize=");
	prize.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Prior_Draw::composeMsg(CommMsgBody& _msg) const
{
	prize.composeMsg(_msg);
}

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Prior_Draw::parseMsg(CommMsgParser& _parser)
{
	prize.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Prior_Draw::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	TournMileStonePrize::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("prize"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    ClientMsg_TxtEx_Milestone_Losing_Table
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_Milestone_Losing_Table::ClientMsg_TxtEx_Milestone_Losing_Table()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ClientMsg_TxtEx_Milestone_Losing_Table::ClientMsg_TxtEx_Milestone_Losing_Table(ClientMsg_TxtEx_Milestone_Losing_Table&& _o)
	: numOfWinningTables(std::move(_o.numOfWinningTables))
	, winningTableName(std::move(_o.winningTableName))
	, winningTableServerAddress(std::move(_o.winningTableServerAddress))
	, winningTableServerObject(std::move(_o.winningTableServerObject))
	, winningTableId(std::move(_o.winningTableId))
	, numWinningPlayers(std::move(_o.numWinningPlayers))
	, prize(std::move(_o.prize))
{
}

TableClientThin::publication::ClientMsg_TxtEx_Milestone_Losing_Table& TableClientThin::publication::ClientMsg_TxtEx_Milestone_Losing_Table::operator=(ClientMsg_TxtEx_Milestone_Losing_Table&& _o)
{
	if(this != &_o)
	{
		numOfWinningTables = std::move(_o.numOfWinningTables);
		winningTableName = std::move(_o.winningTableName);
		winningTableServerAddress = std::move(_o.winningTableServerAddress);
		winningTableServerObject = std::move(_o.winningTableServerObject);
		winningTableId = std::move(_o.winningTableId);
		numWinningPlayers = std::move(_o.numWinningPlayers);
		prize = std::move(_o.prize);
	}
	return *this;
}

#endif

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Losing_Table::clear()
{
	numOfWinningTables = 0;
	winningTableName.clear();
	winningTableServerAddress.clear();
	winningTableServerObject.clear();
	winningTableId = 0;
	numWinningPlayers = 0;
	prize.clear();
}

bool TableClientThin::publication::ClientMsg_TxtEx_Milestone_Losing_Table::equals(const ClientMsg_TxtEx_Milestone_Losing_Table& _o) const
{
	return numOfWinningTables == _o.numOfWinningTables &&
		winningTableName.equals(_o.winningTableName) &&
		winningTableServerAddress.equals(_o.winningTableServerAddress) &&
		winningTableServerObject.equals(_o.winningTableServerObject) &&
		winningTableId == _o.winningTableId &&
		numWinningPlayers == _o.numWinningPlayers &&
		prize.equals(_o.prize);
}

const char *TableClientThin::publication::ClientMsg_TxtEx_Milestone_Losing_Table::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("numOfWinningTables=");
	_buf.appendInt(numOfWinningTables);
	_buf.append(',');
	_buf.append("winningTableName=");
	_buf.append(winningTableName);
	_buf.append(',');
	_buf.append("winningTableServerAddress=");
	_buf.append(winningTableServerAddress);
	_buf.append(',');
	_buf.append("winningTableServerObject=");
	_buf.append(winningTableServerObject);
	_buf.append(',');
	_buf.append("winningTableId=");
	_buf.appendUint64(winningTableId);
	_buf.append(',');
	_buf.append("numWinningPlayers=");
	_buf.appendUint(numWinningPlayers);
	_buf.append(',');
	_buf.append("prize=");
	prize.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Losing_Table::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(numOfWinningTables);
	_msg.composeString(winningTableName);
	_msg.composeString(winningTableServerAddress);
	_msg.composeString(winningTableServerObject);
	_msg.composeUINT64(winningTableId);
	_msg.composeUINT32(numWinningPlayers);
	prize.composeMsg(_msg);
}

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Losing_Table::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(numOfWinningTables);
	_parser.parseStringP(winningTableName);
	_parser.parseStringP(winningTableServerAddress);
	_parser.parseStringP(winningTableServerObject);
	_parser.parseUINT64(winningTableId);
	_parser.parseUINT32(numWinningPlayers);
	prize.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Losing_Table::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	INT32 numOfWinningTables; _parser.parseINT32(numOfWinningTables);
	AtfValidator::validateInt(_descr, "numOfWinningTables", numOfWinningTables, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "winningTableName"); size_t szWinningTableName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "winningTableName", szWinningTableName, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "winningTableServerAddress"); size_t szWinningTableServerAddress = strlen(_dummy);
	AtfValidator::validateInt(_descr, "winningTableServerAddress", szWinningTableServerAddress, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "winningTableServerObject"); size_t szWinningTableServerObject = strlen(_dummy);
	AtfValidator::validateInt(_descr, "winningTableServerObject", szWinningTableServerObject, _checker, __FILE__, __LINE__);
	UINT64 winningTableId; _parser.parseUINT64(winningTableId);
	AtfValidator::validateUint(_descr, "winningTableId", winningTableId, _checker, __FILE__, __LINE__);
	UINT32 numWinningPlayers; _parser.parseUINT32(numWinningPlayers);
	AtfValidator::validateInt(_descr, "numWinningPlayers", numWinningPlayers, _checker, __FILE__, __LINE__);
	PString _descbuf;
	TournMileStonePrize::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("prize"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    ClientMsg_TxtEx_Milestone_Winners
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_Milestone_Winners::ClientMsg_TxtEx_Milestone_Winners()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ClientMsg_TxtEx_Milestone_Winners::ClientMsg_TxtEx_Milestone_Winners(ClientMsg_TxtEx_Milestone_Winners&& _o)
	: tables(std::move(_o.tables))
	, nWinners(std::move(_o.nWinners))
	, prize(std::move(_o.prize))
{
}

TableClientThin::publication::ClientMsg_TxtEx_Milestone_Winners& TableClientThin::publication::ClientMsg_TxtEx_Milestone_Winners::operator=(ClientMsg_TxtEx_Milestone_Winners&& _o)
{
	if(this != &_o)
	{
		tables = std::move(_o.tables);
		nWinners = std::move(_o.nWinners);
		prize = std::move(_o.prize);
	}
	return *this;
}

#endif

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Winners::clear()
{
	tables.clear();
	nWinners = 0;
	prize.clear();
}

bool TableClientThin::publication::ClientMsg_TxtEx_Milestone_Winners::equals(const ClientMsg_TxtEx_Milestone_Winners& _o) const
{
	return tables.equals(_o.tables) &&
		nWinners == _o.nWinners &&
		prize.equals(_o.prize);
}

const char *TableClientThin::publication::ClientMsg_TxtEx_Milestone_Winners::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("tables=");
	tables.toTraceString(_buf);
	_buf.append(',');
	_buf.append("nWinners=");
	_buf.appendUint(nWinners);
	_buf.append(',');
	_buf.append("prize=");
	prize.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Winners::composeMsg(CommMsgBody& _msg) const
{
	tables.composeMsg(_msg);
	_msg.composeUINT32(nWinners);
	prize.composeMsg(_msg);
}

void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Winners::parseMsg(CommMsgParser& _parser)
{
	tables.parseMsg(_parser);
	_parser.parseUINT32(nWinners);
	prize.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_Milestone_Winners::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szTables = ThinAtf::LAtfVector< PString , 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tables"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "tables", szTables, _checker, __FILE__, __LINE__);
	UINT32 nWinners; _parser.parseUINT32(nWinners);
	AtfValidator::validateInt(_descr, "nWinners", nWinners, _checker, __FILE__, __LINE__);
	TournMileStonePrize::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("prize"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    ClientMsg_TxtEx_TableHistory_StartNewHand
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewHand::ClientMsg_TxtEx_TableHistory_StartNewHand()
{
	clear();
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewHand::clear()
{
	started.setNull();
	stakeSmall = 0;
	stakeBig = 0;
	smallBlind = 0;
	ante = 0;
	handType = 0;
	isHiLo = 0;
	potStruct = 0;
}

bool TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewHand::equals(const ClientMsg_TxtEx_TableHistory_StartNewHand& _o) const
{
	return started.equals(_o.started) &&
		stakeSmall == _o.stakeSmall &&
		stakeBig == _o.stakeBig &&
		smallBlind == _o.smallBlind &&
		ante == _o.ante &&
		handType == _o.handType &&
		isHiLo == _o.isHiLo &&
		potStruct == _o.potStruct;
}

const char *TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewHand::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("started=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, started);
	_buf.append(',');
	_buf.append("stakeSmall=");
	_buf.appendUint(stakeSmall);
	_buf.append(',');
	_buf.append("stakeBig=");
	_buf.appendUint(stakeBig);
	_buf.append(',');
	_buf.append("smallBlind=");
	_buf.appendUint(smallBlind);
	_buf.append(',');
	_buf.append("ante=");
	_buf.appendUint(ante);
	_buf.append(',');
	_buf.append("handType=");
	_buf.appendUint(handType);
	_buf.append(',');
	_buf.append("isHiLo=");
	_buf.appendUint(isHiLo);
	_buf.append(',');
	_buf.append("potStruct=");
	_buf.appendUint(potStruct);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewHand::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeSrvTime(started);
	_msg.composeUINT32(stakeSmall);
	_msg.composeUINT32(stakeBig);
	_msg.composeUINT32(smallBlind);
	_msg.composeUINT32(ante);
	_msg.composeBYTE(handType);
	_msg.composeBYTE(isHiLo);
	_msg.composeBYTE(potStruct);
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewHand::parseMsg(CommMsgParser& _parser)
{
	_parser.parseSrvTime(started);
	_parser.parseUINT32(stakeSmall);
	_parser.parseUINT32(stakeBig);
	_parser.parseUINT32(smallBlind);
	_parser.parseUINT32(ante);
	_parser.parseBYTE(handType);
	_parser.parseBYTE(isHiLo);
	_parser.parseBYTE(potStruct);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewHand::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	CommSrvTime started; _parser.parseSrvTime(started);
	AtfValidator::validateSrvDateTime(_descr, "started", started, _checker, __FILE__, __LINE__);
	UINT32 stakeSmall; _parser.parseUINT32(stakeSmall);
	AtfValidator::validateInt(_descr, "stakeSmall", stakeSmall, _checker, __FILE__, __LINE__);
	UINT32 stakeBig; _parser.parseUINT32(stakeBig);
	AtfValidator::validateInt(_descr, "stakeBig", stakeBig, _checker, __FILE__, __LINE__);
	UINT32 smallBlind; _parser.parseUINT32(smallBlind);
	AtfValidator::validateInt(_descr, "smallBlind", smallBlind, _checker, __FILE__, __LINE__);
	UINT32 ante; _parser.parseUINT32(ante);
	AtfValidator::validateInt(_descr, "ante", ante, _checker, __FILE__, __LINE__);
	BYTE handType; _parser.parseBYTE(handType);
	AtfValidator::validateInt(_descr, "handType", handType, _checker, __FILE__, __LINE__);
	BYTE isHiLo; _parser.parseBYTE(isHiLo);
	AtfValidator::validateInt(_descr, "isHiLo", isHiLo, _checker, __FILE__, __LINE__);
	BYTE potStruct; _parser.parseBYTE(potStruct);
	AtfValidator::validateInt(_descr, "potStruct", potStruct, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    ClientMsg_TxtEx_TableHistory_StartNewGame
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewGame::ClientMsg_TxtEx_TableHistory_StartNewGame()
{
	clear();
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewGame::clear()
{
	stakeSmall = 0;
	stakeBig = 0;
	ante = 0;
	handType = 0;
	isHiLo = 0;
	potStruct = 0;
}

bool TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewGame::equals(const ClientMsg_TxtEx_TableHistory_StartNewGame& _o) const
{
	return stakeSmall == _o.stakeSmall &&
		stakeBig == _o.stakeBig &&
		ante == _o.ante &&
		handType == _o.handType &&
		isHiLo == _o.isHiLo &&
		potStruct == _o.potStruct;
}

const char *TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewGame::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("stakeSmall=");
	_buf.appendUint(stakeSmall);
	_buf.append(',');
	_buf.append("stakeBig=");
	_buf.appendUint(stakeBig);
	_buf.append(',');
	_buf.append("ante=");
	_buf.appendUint(ante);
	_buf.append(',');
	_buf.append("handType=");
	_buf.appendUint(handType);
	_buf.append(',');
	_buf.append("isHiLo=");
	_buf.appendUint(isHiLo);
	_buf.append(',');
	_buf.append("potStruct=");
	_buf.appendUint(potStruct);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewGame::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(stakeSmall);
	_msg.composeUINT32(stakeBig);
	_msg.composeUINT32(ante);
	_msg.composeBYTE(handType);
	_msg.composeBYTE(isHiLo);
	_msg.composeBYTE(potStruct);
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewGame::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(stakeSmall);
	_parser.parseUINT32(stakeBig);
	_parser.parseUINT32(ante);
	_parser.parseBYTE(handType);
	_parser.parseBYTE(isHiLo);
	_parser.parseBYTE(potStruct);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_StartNewGame::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	UINT32 stakeSmall; _parser.parseUINT32(stakeSmall);
	AtfValidator::validateInt(_descr, "stakeSmall", stakeSmall, _checker, __FILE__, __LINE__);
	UINT32 stakeBig; _parser.parseUINT32(stakeBig);
	AtfValidator::validateInt(_descr, "stakeBig", stakeBig, _checker, __FILE__, __LINE__);
	UINT32 ante; _parser.parseUINT32(ante);
	AtfValidator::validateInt(_descr, "ante", ante, _checker, __FILE__, __LINE__);
	BYTE handType; _parser.parseBYTE(handType);
	AtfValidator::validateInt(_descr, "handType", handType, _checker, __FILE__, __LINE__);
	BYTE isHiLo; _parser.parseBYTE(isHiLo);
	AtfValidator::validateInt(_descr, "isHiLo", isHiLo, _checker, __FILE__, __LINE__);
	BYTE potStruct; _parser.parseBYTE(potStruct);
	AtfValidator::validateInt(_descr, "potStruct", potStruct, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    ClientMsg_TxtEx_TableHistory_Dealing
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_Dealing::ClientMsg_TxtEx_TableHistory_Dealing()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_Dealing::ClientMsg_TxtEx_TableHistory_Dealing(ClientMsg_TxtEx_TableHistory_Dealing&& _o)
	: holeCardsDict(std::move(_o.holeCardsDict))
{
}

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_Dealing& TableClientThin::publication::ClientMsg_TxtEx_TableHistory_Dealing::operator=(ClientMsg_TxtEx_TableHistory_Dealing&& _o)
{
	if(this != &_o)
	{
		holeCardsDict = std::move(_o.holeCardsDict);
	}
	return *this;
}

#endif

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_Dealing::clear()
{
	holeCardsDict.clear();
}

bool TableClientThin::publication::ClientMsg_TxtEx_TableHistory_Dealing::equals(const ClientMsg_TxtEx_TableHistory_Dealing& _o) const
{
	return holeCardsDict.equals(_o.holeCardsDict);
}

const char *TableClientThin::publication::ClientMsg_TxtEx_TableHistory_Dealing::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("holeCardsDict=");
	holeCardsDict.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_Dealing::composeMsg(CommMsgBody& _msg) const
{
	holeCardsDict.composeMsg(_msg);
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_Dealing::parseMsg(CommMsgParser& _parser)
{
	holeCardsDict.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_Dealing::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szHoleCardsDict = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("holeCardsDict"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "holeCardsDict", szHoleCardsDict, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    ClientMsg_TxtEx_TableHistory_CardsShown
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_CardsShown::ClientMsg_TxtEx_TableHistory_CardsShown()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_CardsShown::ClientMsg_TxtEx_TableHistory_CardsShown(ClientMsg_TxtEx_TableHistory_CardsShown&& _o)
	: cards(std::move(_o.cards))
{
}

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_CardsShown& TableClientThin::publication::ClientMsg_TxtEx_TableHistory_CardsShown::operator=(ClientMsg_TxtEx_TableHistory_CardsShown&& _o)
{
	if(this != &_o)
	{
		cards = std::move(_o.cards);
	}
	return *this;
}

#endif

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_CardsShown::clear()
{
	cards.clear();
}

bool TableClientThin::publication::ClientMsg_TxtEx_TableHistory_CardsShown::equals(const ClientMsg_TxtEx_TableHistory_CardsShown& _o) const
{
	return cards.equals(_o.cards);
}

const char *TableClientThin::publication::ClientMsg_TxtEx_TableHistory_CardsShown::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("cards=");
	_buf.append(cards);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_CardsShown::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(cards);
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_CardsShown::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(cards);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_CardsShown::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "cards"); size_t szCards = strlen(_dummy);
	AtfValidator::validateInt(_descr, "cards", szCards, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    ClientMsg_TxtEx_TableHistory_WinningHand
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_WinningHand::ClientMsg_TxtEx_TableHistory_WinningHand()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_WinningHand::ClientMsg_TxtEx_TableHistory_WinningHand(ClientMsg_TxtEx_TableHistory_WinningHand&& _o)
	: bestHigh(std::move(_o.bestHigh))
	, bestHighHand(std::move(_o.bestHighHand))
	, bestLowHand(std::move(_o.bestLowHand))
	, bestLow(std::move(_o.bestLow))
	, boardNum(std::move(_o.boardNum))
{
}

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_WinningHand& TableClientThin::publication::ClientMsg_TxtEx_TableHistory_WinningHand::operator=(ClientMsg_TxtEx_TableHistory_WinningHand&& _o)
{
	if(this != &_o)
	{
		bestHigh = std::move(_o.bestHigh);
		bestHighHand = std::move(_o.bestHighHand);
		bestLowHand = std::move(_o.bestLowHand);
		bestLow = std::move(_o.bestLow);
		boardNum = std::move(_o.boardNum);
	}
	return *this;
}

#endif

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_WinningHand::clear()
{
	bestHigh = 0;
	bestHighHand.clear();
	bestLowHand.clear();
	bestLow = 0;
	boardNum = 0;
}

bool TableClientThin::publication::ClientMsg_TxtEx_TableHistory_WinningHand::equals(const ClientMsg_TxtEx_TableHistory_WinningHand& _o) const
{
	return bestHigh == _o.bestHigh &&
		bestHighHand.equals(_o.bestHighHand) &&
		bestLowHand.equals(_o.bestLowHand) &&
		bestLow == _o.bestLow &&
		boardNum == _o.boardNum;
}

const char *TableClientThin::publication::ClientMsg_TxtEx_TableHistory_WinningHand::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("bestHigh=");
	_buf.appendUint(bestHigh);
	_buf.append(',');
	_buf.append("bestHighHand=");
	_buf.append(bestHighHand);
	_buf.append(',');
	_buf.append("bestLowHand=");
	_buf.append(bestLowHand);
	_buf.append(',');
	_buf.append("bestLow=");
	_buf.appendUint(bestLow);
	_buf.append(',');
	_buf.append("boardNum=");
	_buf.appendUint(boardNum);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_WinningHand::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(bestHigh);
	_msg.composeString(bestHighHand);
	_msg.composeString(bestLowHand);
	_msg.composeBYTE(bestLow);
	_msg.composeBYTE(boardNum);
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_WinningHand::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(bestHigh);
	_parser.parseStringP(bestHighHand);
	_parser.parseStringP(bestLowHand);
	_parser.parseBYTE(bestLow);
	_parser.parseBYTE(boardNum);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_WinningHand::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	BYTE bestHigh; _parser.parseBYTE(bestHigh);
	AtfValidator::validateInt(_descr, "bestHigh", bestHigh, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "bestHighHand"); size_t szBestHighHand = strlen(_dummy);
	AtfValidator::validateInt(_descr, "bestHighHand", szBestHighHand, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "bestLowHand"); size_t szBestLowHand = strlen(_dummy);
	AtfValidator::validateInt(_descr, "bestLowHand", szBestLowHand, _checker, __FILE__, __LINE__);
	BYTE bestLow; _parser.parseBYTE(bestLow);
	AtfValidator::validateInt(_descr, "bestLow", bestLow, _checker, __FILE__, __LINE__);
	BYTE boardNum; _parser.parseBYTE(boardNum);
	AtfValidator::validateInt(_descr, "boardNum", boardNum, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    ClientMsg_TxtEx_TableHistory_ShownHand
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_ShownHand::ClientMsg_TxtEx_TableHistory_ShownHand()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_ShownHand::ClientMsg_TxtEx_TableHistory_ShownHand(ClientMsg_TxtEx_TableHistory_ShownHand&& _o)
	: cmp(std::move(_o.cmp))
	, bestHigh(std::move(_o.bestHigh))
	, bestHighHand(std::move(_o.bestHighHand))
	, kicker(std::move(_o.kicker))
	, extraKickerRanks(std::move(_o.extraKickerRanks))
	, boardNum(std::move(_o.boardNum))
{
}

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_ShownHand& TableClientThin::publication::ClientMsg_TxtEx_TableHistory_ShownHand::operator=(ClientMsg_TxtEx_TableHistory_ShownHand&& _o)
{
	if(this != &_o)
	{
		cmp = std::move(_o.cmp);
		bestHigh = std::move(_o.bestHigh);
		bestHighHand = std::move(_o.bestHighHand);
		kicker = std::move(_o.kicker);
		extraKickerRanks = std::move(_o.extraKickerRanks);
		boardNum = std::move(_o.boardNum);
	}
	return *this;
}

#endif

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_ShownHand::clear()
{
	cmp = 0;
	bestHigh = 0;
	bestHighHand.clear();
	kicker.clear();
	extraKickerRanks.clear();
	boardNum = 0;
}

bool TableClientThin::publication::ClientMsg_TxtEx_TableHistory_ShownHand::equals(const ClientMsg_TxtEx_TableHistory_ShownHand& _o) const
{
	return cmp == _o.cmp &&
		bestHigh == _o.bestHigh &&
		bestHighHand.equals(_o.bestHighHand) &&
		kicker.equals(_o.kicker) &&
		extraKickerRanks.equals(_o.extraKickerRanks) &&
		boardNum == _o.boardNum;
}

const char *TableClientThin::publication::ClientMsg_TxtEx_TableHistory_ShownHand::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("cmp=");
	_buf.appendInt(cmp);
	_buf.append(',');
	_buf.append("bestHigh=");
	_buf.appendUint(bestHigh);
	_buf.append(',');
	_buf.append("bestHighHand=");
	_buf.append(bestHighHand);
	_buf.append(',');
	_buf.append("kicker=");
	kicker.toTraceString(_buf);
	_buf.append(',');
	_buf.append("extraKickerRanks=");
	extraKickerRanks.toTraceString(_buf);
	_buf.append(',');
	_buf.append("boardNum=");
	_buf.appendUint(boardNum);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_ShownHand::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(cmp);
	_msg.composeBYTE(bestHigh);
	_msg.composeString(bestHighHand);
	kicker.composeMsg(_msg);
	extraKickerRanks.composeMsg(_msg);
	_msg.composeBYTE(boardNum);
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_ShownHand::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(cmp);
	_parser.parseBYTE(bestHigh);
	_parser.parseStringP(bestHighHand);
	kicker.parseMsg(_parser);
	extraKickerRanks.parseMsg(_parser);
	_parser.parseBYTE(boardNum);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_ShownHand::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	INT8 cmp; _parser.parseINT8(cmp);
	AtfValidator::validateInt(_descr, "cmp", cmp, _checker, __FILE__, __LINE__);
	BYTE bestHigh; _parser.parseBYTE(bestHigh);
	AtfValidator::validateInt(_descr, "bestHigh", bestHigh, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "bestHighHand"); size_t szBestHighHand = strlen(_dummy);
	AtfValidator::validateInt(_descr, "bestHighHand", szBestHighHand, _checker, __FILE__, __LINE__);
	PString _descbuf;
	TableCommonThin::P_Card::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("kicker"), _fieldsWithUnparsedContent);
	int szExtraKickerRanks = ThinAtf::AtfVector0< INT8, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("extraKickerRanks"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "extraKickerRanks", szExtraKickerRanks, _checker, __FILE__, __LINE__);
	BYTE boardNum; _parser.parseBYTE(boardNum);
	AtfValidator::validateInt(_descr, "boardNum", boardNum, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    ClientMsg_TxtEx_TableHistory_TournPrizeWon
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_TournPrizeWon::ClientMsg_TxtEx_TableHistory_TournPrizeWon()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_TournPrizeWon::ClientMsg_TxtEx_TableHistory_TournPrizeWon(ClientMsg_TxtEx_TableHistory_TournPrizeWon&& _o)
	: flags(std::move(_o.flags))
	, tournId(std::move(_o.tournId))
	, ticketAdmission(std::move(_o.ticketAdmission))
	, headBounty(std::move(_o.headBounty))
{
}

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_TournPrizeWon& TableClientThin::publication::ClientMsg_TxtEx_TableHistory_TournPrizeWon::operator=(ClientMsg_TxtEx_TableHistory_TournPrizeWon&& _o)
{
	if(this != &_o)
	{
		flags = std::move(_o.flags);
		tournId = std::move(_o.tournId);
		ticketAdmission = std::move(_o.ticketAdmission);
		headBounty = std::move(_o.headBounty);
	}
	return *this;
}

#endif

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_TournPrizeWon::clear()
{
	flags = 0;
	tournId = 0;
	ticketAdmission.clear();
	headBounty = 0;
}

bool TableClientThin::publication::ClientMsg_TxtEx_TableHistory_TournPrizeWon::equals(const ClientMsg_TxtEx_TableHistory_TournPrizeWon& _o) const
{
	return flags == _o.flags &&
		tournId == _o.tournId &&
		ticketAdmission.equals(_o.ticketAdmission) &&
		headBounty == _o.headBounty;
}

const char *TableClientThin::publication::ClientMsg_TxtEx_TableHistory_TournPrizeWon::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("tournId=");
	_buf.appendUint(tournId);
	_buf.append(',');
	_buf.append("ticketAdmission=");
	_buf.append(ticketAdmission);
	_buf.append(',');
	_buf.append("headBounty=");
	_buf.appendUint(headBounty);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_TournPrizeWon::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(flags);
	_msg.composeUINT32(tournId);
	_msg.composeString(ticketAdmission);
	_msg.composeUINT32(headBounty);
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_TournPrizeWon::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(flags);
	_parser.parseUINT32(tournId);
	_parser.parseStringP(ticketAdmission);
	_parser.parseUINT32(headBounty);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_TournPrizeWon::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT16 flags; _parser.parseUINT16(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT32 tournId; _parser.parseUINT32(tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "ticketAdmission"); size_t szTicketAdmission = strlen(_dummy);
	AtfValidator::validateInt(_descr, "ticketAdmission", szTicketAdmission, _checker, __FILE__, __LINE__);
	UINT32 headBounty; _parser.parseUINT32(headBounty);
	AtfValidator::validateInt(_descr, "headBounty", headBounty, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_MESSAGE
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE::Protocol_MSG_TABLE_SUBSCR_MESSAGE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE::Protocol_MSG_TABLE_SUBSCR_MESSAGE(Protocol_MSG_TABLE_SUBSCR_MESSAGE&& _o)
	: attach(std::move(_o.attach))
	, timerValue(std::move(_o.timerValue))
	, options(std::move(_o.options))
	, cltMsgStrCode(std::move(_o.cltMsgStrCode))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
	, BrandMask(std::move(_o.BrandMask))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE::operator=(Protocol_MSG_TABLE_SUBSCR_MESSAGE&& _o)
{
	if(this != &_o)
	{
		attach = std::move(_o.attach);
		timerValue = std::move(_o.timerValue);
		options = std::move(_o.options);
		cltMsgStrCode = std::move(_o.cltMsgStrCode);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
		BrandMask = std::move(_o.BrandMask);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE::clear()
{
	attach.clear();
	timerValue = 0;
	options = 0;
	cltMsgStrCode = 0;
	clientMsg_txtEx.clear();
	BrandMask = BrandType_ALLMask;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE::equals(const Protocol_MSG_TABLE_SUBSCR_MESSAGE& _o) const
{
	return attach.equals(_o.attach) &&
		timerValue == _o.timerValue &&
		options == _o.options &&
		cltMsgStrCode == _o.cltMsgStrCode &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx) &&
		BrandMask == _o.BrandMask;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_MESSAGE).append(")");
	_buf.append(',');
	_buf.append("attach=");
	_buf.append(attach);
	_buf.append(',');
	_buf.append("timerValue=");
	_buf.appendUint(timerValue);
	_buf.append(',');
	_buf.append("options=");
	_buf.appendUint(options);
	_buf.append(',');
	_buf.append("cltMsgStrCode=");
	_buf.appendUint(cltMsgStrCode);
	_buf.append(',');
	_buf.append("m=");
	clientMsg_txtEx.toTraceString(_buf);
	_buf.append(',');
	_buf.append("BrandMask=");
	_buf.appendUint(BrandMask);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(attach);
	_msg.composeUINT16(timerValue);
	_msg.composeUINT32(options);
	_msg.composeUINT16(cltMsgStrCode);
	_msg.composeMsgBody(clientMsg_txtEx);
	_msg.composeUINT32(BrandMask);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(attach);
	_parser.parseUINT16(timerValue);
	_parser.parseUINT32(options);
	if(_parser.parseEnded()) return;
	_parser.parseUINT16(cltMsgStrCode);
	_parser.parseMsgBody(clientMsg_txtEx);
	_parser.parseUINT32(BrandMask);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_MESSAGE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "attach"); size_t szAttach = strlen(_dummy);
	AtfValidator::validateInt(_descr, "attach", szAttach, _checker, __FILE__, __LINE__);
	UINT16 timerValue; _parser.parseUINT16(timerValue);
	AtfValidator::validateInt(_descr, "timerValue", timerValue, _checker, __FILE__, __LINE__);
	UINT32 options; _parser.parseUINT32(options);
	AtfValidator::validateInt(_descr, "options", options, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT16 cltMsgStrCode; _parser.parseUINT16(cltMsgStrCode);
	AtfValidator::validateInt(_descr, "cltMsgStrCode", cltMsgStrCode, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	UINT32 BrandMask; _parser.parseUINT32(BrandMask);
	AtfValidator::validateInt(_descr, "BrandMask", BrandMask, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_MESSAGE2
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE2::Protocol_MSG_TABLE_SUBSCR_MESSAGE2()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE2::Protocol_MSG_TABLE_SUBSCR_MESSAGE2(Protocol_MSG_TABLE_SUBSCR_MESSAGE2&& _o)
	: attach(std::move(_o.attach))
	, timerValue(std::move(_o.timerValue))
	, flags(std::move(_o.flags))
	, siteObsolete(std::move(_o.siteObsolete))
	, BrandMask(std::move(_o.BrandMask))
	, siteMask(std::move(_o.siteMask))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE2& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE2::operator=(Protocol_MSG_TABLE_SUBSCR_MESSAGE2&& _o)
{
	if(this != &_o)
	{
		attach = std::move(_o.attach);
		timerValue = std::move(_o.timerValue);
		flags = std::move(_o.flags);
		siteObsolete = std::move(_o.siteObsolete);
		BrandMask = std::move(_o.BrandMask);
		siteMask = std::move(_o.siteMask);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE2::clear()
{
	attach.clear();
	timerValue = 0;
	flags = 0;
	siteObsolete = 0;
	BrandMask = BrandType_ALLMask;
	siteMask.clear();
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE2::equals(const Protocol_MSG_TABLE_SUBSCR_MESSAGE2& _o) const
{
	return attach.equals(_o.attach) &&
		timerValue == _o.timerValue &&
		flags == _o.flags &&
		siteObsolete == _o.siteObsolete &&
		BrandMask == _o.BrandMask &&
		siteMask.equals(_o.siteMask);
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_MESSAGE2).append(")");
	_buf.append(',');
	_buf.append("attach=");
	_buf.append(attach);
	_buf.append(',');
	_buf.append("timerValue=");
	_buf.appendUint(timerValue);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("siteObsolete=");
	_buf.appendUint(siteObsolete);
	_buf.append(',');
	_buf.append("BrandMask=");
	_buf.appendUint(BrandMask);
	_buf.append(',');
	_buf.append("siteMask=");
	siteMask.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE2::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(attach);
	_msg.composeUINT16(timerValue);
	_msg.composeUINT32(flags);
	_msg.composeUINT32(siteObsolete);
	_msg.composeUINT32(BrandMask);
	siteMask.composeMsg(_msg);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE2::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(attach);
	_parser.parseUINT16(timerValue);
	_parser.parseUINT32(flags);
	_parser.parseUINT32(siteObsolete);
	_parser.parseUINT32(BrandMask);
	if(_parser.parseEnded()) return;
	siteMask.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_MESSAGE2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "attach"); size_t szAttach = strlen(_dummy);
	AtfValidator::validateInt(_descr, "attach", szAttach, _checker, __FILE__, __LINE__);
	UINT16 timerValue; _parser.parseUINT16(timerValue);
	AtfValidator::validateInt(_descr, "timerValue", timerValue, _checker, __FILE__, __LINE__);
	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT32 siteObsolete; _parser.parseUINT32(siteObsolete);
	AtfValidator::validateInt(_descr, "siteObsolete", siteObsolete, _checker, __FILE__, __LINE__);
	UINT32 BrandMask; _parser.parseUINT32(BrandMask);
	AtfValidator::validateInt(_descr, "BrandMask", BrandMask, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	PString _descbuf;
	PSiteMask::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("siteMask"), _fieldsWithUnparsedContent);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT(): pots("FFFF") 
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT(Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT&& _o)
	: potNum(std::move(_o.potNum))
	, pots(std::move(_o.pots))
	, potCategoryId(std::move(_o.potCategoryId))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT::operator=(Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT&& _o)
{
	if(this != &_o)
	{
		potNum = std::move(_o.potNum);
		pots = std::move(_o.pots);
		potCategoryId = std::move(_o.potCategoryId);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT::clear()
{
	potNum = 0;
	pots.clear();
	potCategoryId = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT::equals(const Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT& _o) const
{
	return potNum == _o.potNum &&
		pots.equals(_o.pots) &&
		potCategoryId == _o.potCategoryId;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_MOVEFROMPOT).append(")");
	_buf.append(',');
	_buf.append("potNum=");
	_buf.appendUint(potNum);
	_buf.append(',');
	_buf.append("pots=");
	pots.toTraceString(_buf);
	_buf.append(',');
	_buf.append("potCategoryId=");
	_buf.appendUint(potCategoryId);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(potNum);
	pots.composeMsg(_msg);
	_msg.composeBYTE(potCategoryId);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(potNum);
	pots.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseBYTE(potCategoryId);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_MOVEFROMPOT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE potNum; _parser.parseBYTE(potNum);
	AtfValidator::validateInt(_descr, "potNum", potNum, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szPots = ThinAtf::AtfVectorWithSpecialTerminator< P_PotInfo >::validateMsg(_parser, "FFFF", _checker, _descbuf.assign(_descr).append('.').append("pots"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "pots", szPots, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	BYTE potCategoryId; _parser.parseBYTE(potCategoryId);
	AtfValidator::validateInt(_descr, "potCategoryId", potCategoryId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_MOVETOPOT
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT(): pots("FFFF") 
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT(Protocol_MSG_TABLE_SUBSCR_MOVETOPOT&& _o)
	: potNum(std::move(_o.potNum))
	, pots(std::move(_o.pots))
	, potCategoryId(std::move(_o.potCategoryId))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT::operator=(Protocol_MSG_TABLE_SUBSCR_MOVETOPOT&& _o)
{
	if(this != &_o)
	{
		potNum = std::move(_o.potNum);
		pots = std::move(_o.pots);
		potCategoryId = std::move(_o.potCategoryId);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT::clear()
{
	potNum = 0;
	pots.clear();
	potCategoryId = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT::equals(const Protocol_MSG_TABLE_SUBSCR_MOVETOPOT& _o) const
{
	return potNum == _o.potNum &&
		pots.equals(_o.pots) &&
		potCategoryId == _o.potCategoryId;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_MOVETOPOT).append(")");
	_buf.append(',');
	_buf.append("potNum=");
	_buf.appendUint(potNum);
	_buf.append(',');
	_buf.append("pots=");
	pots.toTraceString(_buf);
	_buf.append(',');
	_buf.append("potCategoryId=");
	_buf.appendUint(potCategoryId);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(potNum);
	pots.composeMsg(_msg);
	_msg.composeBYTE(potCategoryId);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(potNum);
	pots.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseBYTE(potCategoryId);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_MOVETOPOT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE potNum; _parser.parseBYTE(potNum);
	AtfValidator::validateInt(_descr, "potNum", potNum, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szPots = ThinAtf::AtfVectorWithSpecialTerminator< P_PotInfo >::validateMsg(_parser, "FFFF", _checker, _descbuf.assign(_descr).append('.').append("pots"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "pots", szPots, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	BYTE potCategoryId; _parser.parseBYTE(potCategoryId);
	AtfValidator::validateInt(_descr, "potCategoryId", potCategoryId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_NEWGAME
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_NEWGAME::Protocol_MSG_TABLE_SUBSCR_NEWGAME()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_NEWGAME::Protocol_MSG_TABLE_SUBSCR_NEWGAME(Protocol_MSG_TABLE_SUBSCR_NEWGAME&& _o)
	: stakeSmall(std::move(_o.stakeSmall))
	, stakeBig(std::move(_o.stakeBig))
	, ante(std::move(_o.ante))
	, handType(std::move(_o.handType))
	, isHiLo(std::move(_o.isHiLo))
	, potStruct(std::move(_o.potStruct))
	, tableStakes(std::move(_o.tableStakes))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_NEWGAME& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_NEWGAME::operator=(Protocol_MSG_TABLE_SUBSCR_NEWGAME&& _o)
{
	if(this != &_o)
	{
		stakeSmall = std::move(_o.stakeSmall);
		stakeBig = std::move(_o.stakeBig);
		ante = std::move(_o.ante);
		handType = std::move(_o.handType);
		isHiLo = std::move(_o.isHiLo);
		potStruct = std::move(_o.potStruct);
		tableStakes = std::move(_o.tableStakes);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_NEWGAME::clear()
{
	stakeSmall = 0;
	stakeBig = 0;
	ante = 0;
	handType = 0;
	isHiLo = 0;
	potStruct = 0;
	tableStakes.clear();
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_NEWGAME::equals(const Protocol_MSG_TABLE_SUBSCR_NEWGAME& _o) const
{
	return stakeSmall == _o.stakeSmall &&
		stakeBig == _o.stakeBig &&
		ante == _o.ante &&
		handType == _o.handType &&
		isHiLo == _o.isHiLo &&
		potStruct == _o.potStruct &&
		tableStakes.equals(_o.tableStakes);
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_NEWGAME::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_NEWGAME).append(")");
	_buf.append(',');
	_buf.append("stakeSmall=");
	_buf.appendInt(stakeSmall);
	_buf.append(',');
	_buf.append("stakeBig=");
	_buf.appendInt(stakeBig);
	_buf.append(',');
	_buf.append("ante=");
	_buf.appendInt(ante);
	_buf.append(',');
	_buf.append("gm=");
	_buf.appendUint(handType);
	_buf.append(',');
	_buf.append("isHiLo=");
	_buf.appendUint(isHiLo);
	_buf.append(',');
	_buf.append("lm=");
	_buf.appendUint(potStruct);
	_buf.append(',');
	_buf.append("tableStakes=");
	tableStakes.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_NEWGAME::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(stakeSmall);
	_msg.composeINT32(stakeBig);
	_msg.composeINT32(ante);
	_msg.composeBYTE(handType);
	_msg.composeBYTE(isHiLo);
	_msg.composeBYTE(potStruct);
	tableStakes.composeMsg(_msg);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_NEWGAME::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(stakeSmall);
	_parser.parseINT32(stakeBig);
	_parser.parseINT32(ante);
	_parser.parseBYTE(handType);
	_parser.parseBYTE(isHiLo);
	_parser.parseBYTE(potStruct);
	if(_parser.parseEnded()) return;
	tableStakes.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_NEWGAME::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_NEWGAME";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 stakeSmall; _parser.parseINT32(stakeSmall);
	AtfValidator::validateInt(_descr, "stakeSmall", stakeSmall, _checker, __FILE__, __LINE__);
	INT32 stakeBig; _parser.parseINT32(stakeBig);
	AtfValidator::validateInt(_descr, "stakeBig", stakeBig, _checker, __FILE__, __LINE__);
	INT32 ante; _parser.parseINT32(ante);
	AtfValidator::validateInt(_descr, "ante", ante, _checker, __FILE__, __LINE__);
	BYTE handType; _parser.parseBYTE(handType);
	AtfValidator::validateInt(_descr, "handType", handType, _checker, __FILE__, __LINE__);
	BYTE isHiLo; _parser.parseBYTE(isHiLo);
	AtfValidator::validateInt(_descr, "isHiLo", isHiLo, _checker, __FILE__, __LINE__);
	BYTE potStruct; _parser.parseBYTE(potStruct);
	AtfValidator::validateInt(_descr, "potStruct", potStruct, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	PString _descbuf;
	TableCommonThin::TableStakes::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tableStakes"), _fieldsWithUnparsedContent);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE::Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE::clear()
{
	pause = false;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE::equals(const Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE& _o) const
{
	return pause == _o.pause;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE).append(")");
	_buf.append(',');
	_buf.append("pause=");
	_buf.appendUint(pause);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(pause);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(pause);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	bool pause; _parser.parseBOOL(pause);
	AtfValidator::validateInt(_descr, "pause", pause, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE::Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE::clear()
{
	start = 0;
	delayedSec = 0;
	forceClose = false;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE::equals(const Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE& _o) const
{
	return start == _o.start &&
		delayedSec == _o.delayedSec &&
		forceClose == _o.forceClose;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE).append(")");
	_buf.append(',');
	_buf.append("start=");
	_buf.appendUint(start);
	_buf.append(',');
	_buf.append("delayedSec=");
	_buf.appendUint(delayedSec);
	_buf.append(',');
	_buf.append("forceClose=");
	_buf.appendUint(forceClose);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(start);
	_msg.composeUINT32(delayedSec);
	_msg.composeBOOL(forceClose);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(start);
	_parser.parseUINT32(delayedSec);
	_parser.parseBOOL(forceClose);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE start; _parser.parseBYTE(start);
	AtfValidator::validateInt(_descr, "start", start, _checker, __FILE__, __LINE__);
	UINT32 delayedSec; _parser.parseUINT32(delayedSec);
	AtfValidator::validateInt(_descr, "delayedSec", delayedSec, _checker, __FILE__, __LINE__);
	bool forceClose; _parser.parseBOOL(forceClose);
	AtfValidator::validateInt(_descr, "forceClose", forceClose, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS::Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS::clear()
{
	playersUnfolded = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS::equals(const Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS& _o) const
{
	return playersUnfolded == _o.playersUnfolded;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS).append(")");
	_buf.append(',');
	_buf.append("playersUnfolded=");
	_buf.appendUint(playersUnfolded);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(playersUnfolded);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(playersUnfolded);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT16 playersUnfolded; _parser.parseUINT16(playersUnfolded);
	AtfValidator::validateInt(_descr, "playersUnfolded", playersUnfolded, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS::Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS::clear()
{
	potCategoryId = 0;
	winners = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS::equals(const Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS& _o) const
{
	return potCategoryId == _o.potCategoryId &&
		winners == _o.winners;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_SHOW_POT_WINNERS).append(")");
	_buf.append(',');
	_buf.append("potCategoryId=");
	_buf.appendUint(potCategoryId);
	_buf.append(',');
	_buf.append("winners=");
	_buf.appendUint(winners);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(potCategoryId);
	_msg.composeUINT16(winners);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(potCategoryId);
	_parser.parseUINT16(winners);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_SHOW_POT_WINNERS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE potCategoryId; _parser.parseBYTE(potCategoryId);
	AtfValidator::validateInt(_descr, "potCategoryId", potCategoryId, _checker, __FILE__, __LINE__);
	UINT16 winners; _parser.parseUINT16(winners);
	AtfValidator::validateInt(_descr, "winners", winners, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET::Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET::clear()
{
	potCategoryId = 0;
	seat = 0xFF;
	amount = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET::equals(const Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET& _o) const
{
	return potCategoryId == _o.potCategoryId &&
		seat == _o.seat &&
		amount == _o.amount;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET).append(")");
	_buf.append(',');
	_buf.append("pcid=");
	_buf.appendUint(potCategoryId);
	_buf.append(',');
	_buf.append("s=");
	_buf.appendUint(seat);
	_buf.append(',');
	_buf.append("v=");
	_buf.appendUint(amount);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(potCategoryId);
	_msg.composeBYTE(seat);
	_msg.composeUINT32(amount);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(potCategoryId);
	_parser.parseBYTE(seat);
	_parser.parseUINT32(amount);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE potCategoryId; _parser.parseBYTE(potCategoryId);
	AtfValidator::validateInt(_descr, "potCategoryId", potCategoryId, _checker, __FILE__, __LINE__);
	BYTE seat; _parser.parseBYTE(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	UINT32 amount; _parser.parseUINT32(amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_POWER_PLAY
//=================================================================

//=================================================================
//                _BaseAttrType
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::_BaseAttrType::_BaseAttrType()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::_BaseAttrType::clear()
{
	seat = -1;
	_is_empty_internal = true;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::_BaseAttrType::equals(const _BaseAttrType& _o) const
{
	return seat == _o.seat;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::_BaseAttrType::toTraceString(PString& _buf) const
{
	_buf.append('{');
	if (!isEmptyMsg())
	{
		_buf.append("s=");
		_buf.appendInt(seat);
	}
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::_BaseAttrType::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _msg0;
	if (!isEmptyMsg())
	{
		_msg0.composeINT8(seat);
	}

	_msg.composeMsgBody(_msg0);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::_BaseAttrType::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);
	
	if(!_body._size())
	{
		_is_empty_internal = true;
		return;
	}

	_is_empty_internal = false;
	CommMsgParser _parser0(_body);
	_parser0.parseINT8(seat);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::_BaseAttrType::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	if(_parser0.msgBodyViewSize() == 0) return;

	INT8 seat; _parser0.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY(Protocol_MSG_TABLE_SUBSCR_POWER_PLAY&& _o)
	: powerId(std::move(_o.powerId))
	, baseAttr(std::move(_o.baseAttr))
	, powerAttr(std::move(_o.powerAttr))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::operator=(Protocol_MSG_TABLE_SUBSCR_POWER_PLAY&& _o)
{
	if(this != &_o)
	{
		powerId = std::move(_o.powerId);
		baseAttr = std::move(_o.baseAttr);
		powerAttr = std::move(_o.powerAttr);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::clear()
{
	powerId = 0;
	baseAttr.clear();
	powerAttr.clear();
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::equals(const Protocol_MSG_TABLE_SUBSCR_POWER_PLAY& _o) const
{
	return powerId == _o.powerId &&
		baseAttr.equals(_o.baseAttr) &&
		powerAttr.equals(_o.powerAttr);
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_POWER_PLAY).append(")");
	_buf.append(',');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("baseAttr=");
	baseAttr.toTraceString(_buf);
	_buf.append(',');
	_buf.append("powerAttr=");
	powerAttr.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(powerId);
	baseAttr.composeMsg(_msg);
	_msg.composeMsgBody(powerAttr);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(powerId);
	baseAttr.parseMsg(_parser);
	_parser.parseMsgBody(powerAttr);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_POWER_PLAY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 powerId; _parser.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	_BaseAttrType::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("baseAttr"), _fieldsWithUnparsedContent);
	size_t szPowerAttr; _parser.skipMsgBody(szPowerAttr);  /*powerAttr*/
	AtfValidator::validateInt(_descr, "powerAttr", szPowerAttr, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    XRayCard
//=================================================================

TableClientThin::publication::XRayCard::XRayCard()
{
	clear();
}

void TableClientThin::publication::XRayCard::clear()
{
	player = 0;
	cardIndex = 0;
	suit = '0';
	rank = 0;
}

bool TableClientThin::publication::XRayCard::equals(const XRayCard& _o) const
{
	return player == _o.player &&
		cardIndex == _o.cardIndex &&
		suit == _o.suit &&
		rank == _o.rank;
}

const char *TableClientThin::publication::XRayCard::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("player=");
	_buf.appendUint(player);
	_buf.append(',');
	_buf.append("cardIndex=");
	_buf.appendUint(cardIndex);
	_buf.append(',');
	_buf.append("suit=");
	_buf.append(suit);
	_buf.append(',');
	_buf.append("rank=");
	_buf.appendUint(rank);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::XRayCard::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(player);
	_msg.composeBYTE(cardIndex);
	_msg.composeINT8(suit);
	_msg.composeBYTE(rank);
}

void TableClientThin::publication::XRayCard::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(player);
	_parser.parseBYTE(cardIndex);
	{ INT8 _n; _parser.parseINT8(_n); suit = _n; }
	_parser.parseBYTE(rank);
}

/*static*/ void TableClientThin::publication::XRayCard::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	BYTE player; _parser.parseBYTE(player);
	AtfValidator::validateInt(_descr, "player", player, _checker, __FILE__, __LINE__);
	BYTE cardIndex; _parser.parseBYTE(cardIndex);
	AtfValidator::validateInt(_descr, "cardIndex", cardIndex, _checker, __FILE__, __LINE__);
	char suit; { INT8 _n; _parser.parseINT8(_n); suit = _n; }
	AtfValidator::validateInt(_descr, "suit", suit, _checker, __FILE__, __LINE__);
	BYTE rank; _parser.parseBYTE(rank);
	AtfValidator::validateInt(_descr, "rank", rank, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    XRayAnimation
//=================================================================

TableClientThin::publication::XRayAnimation::XRayAnimation()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::XRayAnimation::XRayAnimation(XRayAnimation&& _o)
	: cards(std::move(_o.cards))
{
}

TableClientThin::publication::XRayAnimation& TableClientThin::publication::XRayAnimation::operator=(XRayAnimation&& _o)
{
	if(this != &_o)
	{
		cards = std::move(_o.cards);
	}
	return *this;
}

#endif

void TableClientThin::publication::XRayAnimation::clear()
{
	cards.clear();
}

bool TableClientThin::publication::XRayAnimation::equals(const XRayAnimation& _o) const
{
	return cards.equals(_o.cards);
}

const char *TableClientThin::publication::XRayAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("cards=");
	cards.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::XRayAnimation::composeMsg(CommMsgBody& _msg) const
{
	cards.composeMsg(_msg);
}

void TableClientThin::publication::XRayAnimation::parseMsg(CommMsgParser& _parser)
{
	cards.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::XRayAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szCards = ThinAtf::LAtfVector< XRayCard, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cards", szCards, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    DisintgrateAnimation
//=================================================================

TableClientThin::publication::DisintgrateAnimation::DisintgrateAnimation()
{
	clear();
}

void TableClientThin::publication::DisintgrateAnimation::clear()
{
	c.clear();
}

bool TableClientThin::publication::DisintgrateAnimation::equals(const DisintgrateAnimation& _o) const
{
	return c.equals(_o.c);
}

const char *TableClientThin::publication::DisintgrateAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("c=");
	c.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::DisintgrateAnimation::composeMsg(CommMsgBody& _msg) const
{
	c.composeMsg(_msg);
}

void TableClientThin::publication::DisintgrateAnimation::parseMsg(CommMsgParser& _parser)
{
	c.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::DisintgrateAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	PubBoardCardPosition::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("c"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    ScannerAnimation
//=================================================================

TableClientThin::publication::ScannerAnimation::ScannerAnimation()
{
	clear();
}

void TableClientThin::publication::ScannerAnimation::clear()
{
	startOrEnd = false;
	numCards = 0;
	discarded = false;
}

bool TableClientThin::publication::ScannerAnimation::equals(const ScannerAnimation& _o) const
{
	return startOrEnd == _o.startOrEnd &&
		numCards == _o.numCards &&
		discarded == _o.discarded;
}

const char *TableClientThin::publication::ScannerAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("startOrEnd=");
	_buf.appendUint(startOrEnd);
	_buf.append(',');
	_buf.append("numCards=");
	_buf.appendUint(numCards);
	_buf.append(',');
	_buf.append("discarded=");
	_buf.appendUint(discarded);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ScannerAnimation::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(startOrEnd);
	_msg.composeBYTE(numCards);
	_msg.composeBOOL(discarded);
}

void TableClientThin::publication::ScannerAnimation::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(startOrEnd);
	_parser.parseBYTE(numCards);
	_parser.parseBOOL(discarded);
}

/*static*/ void TableClientThin::publication::ScannerAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	bool startOrEnd; _parser.parseBOOL(startOrEnd);
	AtfValidator::validateInt(_descr, "startOrEnd", startOrEnd, _checker, __FILE__, __LINE__);
	BYTE numCards; _parser.parseBYTE(numCards);
	AtfValidator::validateInt(_descr, "numCards", numCards, _checker, __FILE__, __LINE__);
	bool discarded; _parser.parseBOOL(discarded);
	AtfValidator::validateInt(_descr, "discarded", discarded, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    EngineerAnimation
//=================================================================

TableClientThin::publication::EngineerAnimation::EngineerAnimation()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::EngineerAnimation::EngineerAnimation(EngineerAnimation&& _o)
	: startOrEnd(std::move(_o.startOrEnd))
	, cards(std::move(_o.cards))
	, chosenCard(std::move(_o.chosenCard))
{
}

TableClientThin::publication::EngineerAnimation& TableClientThin::publication::EngineerAnimation::operator=(EngineerAnimation&& _o)
{
	if(this != &_o)
	{
		startOrEnd = std::move(_o.startOrEnd);
		cards = std::move(_o.cards);
		chosenCard = std::move(_o.chosenCard);
	}
	return *this;
}

#endif

void TableClientThin::publication::EngineerAnimation::clear()
{
	startOrEnd = false;
	cards.clear();
	chosenCard.clear();
}

bool TableClientThin::publication::EngineerAnimation::equals(const EngineerAnimation& _o) const
{
	return startOrEnd == _o.startOrEnd &&
		cards.equals(_o.cards) &&
		chosenCard.equals(_o.chosenCard);
}

const char *TableClientThin::publication::EngineerAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("startOrEnd=");
	_buf.appendUint(startOrEnd);
	_buf.append(',');
	_buf.append("cards=");
	cards.toTraceString(_buf);
	_buf.append(',');
	_buf.append("chosenCard=");
	chosenCard.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::EngineerAnimation::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(startOrEnd);
	cards.composeMsg(_msg);
	chosenCard.composeMsg(_msg);
}

void TableClientThin::publication::EngineerAnimation::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(startOrEnd);
	cards.parseMsg(_parser);
	chosenCard.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::EngineerAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	bool startOrEnd; _parser.parseBOOL(startOrEnd);
	AtfValidator::validateInt(_descr, "startOrEnd", startOrEnd, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szCards = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cards", szCards, _checker, __FILE__, __LINE__);
	TableCommonThin::P_Card::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("chosenCard"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    CloneAnimation
//=================================================================

TableClientThin::publication::CloneAnimation::CloneAnimation()
{
	clear();
}

void TableClientThin::publication::CloneAnimation::clear()
{
	toSlotIndex = 0;
	powerIdCopied = 0;
	newPowerState = 0;
	newPowerCost = 0;
}

bool TableClientThin::publication::CloneAnimation::equals(const CloneAnimation& _o) const
{
	return toSlotIndex == _o.toSlotIndex &&
		powerIdCopied == _o.powerIdCopied &&
		newPowerState == _o.newPowerState &&
		newPowerCost == _o.newPowerCost;
}

const char *TableClientThin::publication::CloneAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("toSlotIndex=");
	_buf.appendUint(toSlotIndex);
	_buf.append(',');
	_buf.append("powerIdCopied=");
	_buf.appendInt(powerIdCopied);
	_buf.append(',');
	_buf.append("newPowerState=");
	_buf.appendUint(newPowerState);
	_buf.append(',');
	_buf.append("newPowerCost=");
	_buf.appendInt(newPowerCost);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::CloneAnimation::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(toSlotIndex);
	_msg.composeINT32(powerIdCopied);
	_msg.composeUINT32(newPowerState);
	_msg.composeINT32(newPowerCost);
}

void TableClientThin::publication::CloneAnimation::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(toSlotIndex);
	_parser.parseINT32(powerIdCopied);
	_parser.parseUINT32(newPowerState);
	_parser.parseINT32(newPowerCost);
}

/*static*/ void TableClientThin::publication::CloneAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	BYTE toSlotIndex; _parser.parseBYTE(toSlotIndex);
	AtfValidator::validateInt(_descr, "toSlotIndex", toSlotIndex, _checker, __FILE__, __LINE__);
	INT32 powerIdCopied; _parser.parseINT32(powerIdCopied);
	AtfValidator::validateInt(_descr, "powerIdCopied", powerIdCopied, _checker, __FILE__, __LINE__);
	UINT32 newPowerState; _parser.parseUINT32(newPowerState);
	AtfValidator::validateInt(_descr, "newPowerState", newPowerState, _checker, __FILE__, __LINE__);
	INT32 newPowerCost; _parser.parseINT32(newPowerCost);
	AtfValidator::validateInt(_descr, "newPowerCost", newPowerCost, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    UpgradeAnimation
//=================================================================

TableClientThin::publication::UpgradeAnimation::UpgradeAnimation()
{
	clear();
}

void TableClientThin::publication::UpgradeAnimation::clear()
{
	startOrEnd = false;
}

bool TableClientThin::publication::UpgradeAnimation::equals(const UpgradeAnimation& _o) const
{
	return startOrEnd == _o.startOrEnd;
}

const char *TableClientThin::publication::UpgradeAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("startOrEnd=");
	_buf.appendUint(startOrEnd);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::UpgradeAnimation::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(startOrEnd);
}

void TableClientThin::publication::UpgradeAnimation::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(startOrEnd);
}

/*static*/ void TableClientThin::publication::UpgradeAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	bool startOrEnd; _parser.parseBOOL(startOrEnd);
	AtfValidator::validateInt(_descr, "startOrEnd", startOrEnd, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    IntelAnimation
//=================================================================

TableClientThin::publication::IntelAnimation::IntelAnimation()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::IntelAnimation::IntelAnimation(IntelAnimation&& _o)
	: player(std::move(_o.player))
	, NumCards(std::move(_o.NumCards))
	, isFirstEffect(std::move(_o.isFirstEffect))
	, sensedCardIndexes(std::move(_o.sensedCardIndexes))
{
}

TableClientThin::publication::IntelAnimation& TableClientThin::publication::IntelAnimation::operator=(IntelAnimation&& _o)
{
	if(this != &_o)
	{
		player = std::move(_o.player);
		NumCards = std::move(_o.NumCards);
		isFirstEffect = std::move(_o.isFirstEffect);
		sensedCardIndexes = std::move(_o.sensedCardIndexes);
	}
	return *this;
}

#endif

void TableClientThin::publication::IntelAnimation::clear()
{
	player = 0;
	NumCards = 0;
	isFirstEffect = false;
	sensedCardIndexes.clear();
}

bool TableClientThin::publication::IntelAnimation::equals(const IntelAnimation& _o) const
{
	return player == _o.player &&
		NumCards == _o.NumCards &&
		isFirstEffect == _o.isFirstEffect &&
		sensedCardIndexes.equals(_o.sensedCardIndexes);
}

const char *TableClientThin::publication::IntelAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("player=");
	_buf.appendUint(player);
	_buf.append(',');
	_buf.append("NumCards=");
	_buf.appendUint(NumCards);
	_buf.append(',');
	_buf.append("isFirstEffect=");
	_buf.appendUint(isFirstEffect);
	_buf.append(',');
	_buf.append("sensedCardIndexes=");
	sensedCardIndexes.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::IntelAnimation::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(player);
	_msg.composeBYTE(NumCards);
	_msg.composeBOOL(isFirstEffect);
	sensedCardIndexes.composeMsg(_msg);
}

void TableClientThin::publication::IntelAnimation::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(player);
	_parser.parseBYTE(NumCards);
	_parser.parseBOOL(isFirstEffect);
	sensedCardIndexes.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::IntelAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	BYTE player; _parser.parseBYTE(player);
	AtfValidator::validateInt(_descr, "player", player, _checker, __FILE__, __LINE__);
	BYTE NumCards; _parser.parseBYTE(NumCards);
	AtfValidator::validateInt(_descr, "NumCards", NumCards, _checker, __FILE__, __LINE__);
	bool isFirstEffect; _parser.parseBOOL(isFirstEffect);
	AtfValidator::validateInt(_descr, "isFirstEffect", isFirstEffect, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szSensedCardIndexes = ThinAtf::LAtfVector< TableCommonThin::P_Card, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("sensedCardIndexes"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "sensedCardIndexes", szSensedCardIndexes, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    ReloadAnimation
//=================================================================

TableClientThin::publication::ReloadAnimation::ReloadAnimation()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ReloadAnimation::ReloadAnimation(ReloadAnimation&& _o)
	: cardIndexes(std::move(_o.cardIndexes))
{
}

TableClientThin::publication::ReloadAnimation& TableClientThin::publication::ReloadAnimation::operator=(ReloadAnimation&& _o)
{
	if(this != &_o)
	{
		cardIndexes = std::move(_o.cardIndexes);
	}
	return *this;
}

#endif

void TableClientThin::publication::ReloadAnimation::clear()
{
	cardIndexes.clear();
}

bool TableClientThin::publication::ReloadAnimation::equals(const ReloadAnimation& _o) const
{
	return cardIndexes.equals(_o.cardIndexes);
}

const char *TableClientThin::publication::ReloadAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("cardIndexes=");
	cardIndexes.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ReloadAnimation::composeMsg(CommMsgBody& _msg) const
{
	cardIndexes.composeMsg(_msg);
}

void TableClientThin::publication::ReloadAnimation::parseMsg(CommMsgParser& _parser)
{
	cardIndexes.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::ReloadAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szCardIndexes = ThinAtf::LAtfVector< CardWithPosition, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cardIndexes"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cardIndexes", szCardIndexes, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    SyphonAnimation
//=================================================================

TableClientThin::publication::SyphonAnimation::SyphonAnimation()
{
	clear();
}

void TableClientThin::publication::SyphonAnimation::clear()
{
	fromPlayer = 0;
	toPlayer = 0;
	originManaTo = 0;
	origManaFrom = 0;
	amountDrained = 0;
	amountReceived = 0;
}

bool TableClientThin::publication::SyphonAnimation::equals(const SyphonAnimation& _o) const
{
	return fromPlayer == _o.fromPlayer &&
		toPlayer == _o.toPlayer &&
		originManaTo == _o.originManaTo &&
		origManaFrom == _o.origManaFrom &&
		amountDrained == _o.amountDrained &&
		amountReceived == _o.amountReceived;
}

const char *TableClientThin::publication::SyphonAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("fromPlayer=");
	_buf.appendInt(fromPlayer);
	_buf.append(',');
	_buf.append("toPlayer=");
	_buf.appendInt(toPlayer);
	_buf.append(',');
	_buf.append("originManaTo=");
	_buf.appendInt64(originManaTo);
	_buf.append(',');
	_buf.append("origManaFrom=");
	_buf.appendInt64(origManaFrom);
	_buf.append(',');
	_buf.append("amountDrained=");
	_buf.appendInt64(amountDrained);
	_buf.append(',');
	_buf.append("amountReceived=");
	_buf.appendInt64(amountReceived);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::SyphonAnimation::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(fromPlayer);
	_msg.composeINT8(toPlayer);
	_msg.composeINT64(originManaTo);
	_msg.composeINT64(origManaFrom);
	_msg.composeINT64(amountDrained);
	_msg.composeINT64(amountReceived);
}

void TableClientThin::publication::SyphonAnimation::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(fromPlayer);
	_parser.parseINT8(toPlayer);
	_parser.parseINT64(originManaTo);
	_parser.parseINT64(origManaFrom);
	_parser.parseINT64(amountDrained);
	_parser.parseINT64(amountReceived);
}

/*static*/ void TableClientThin::publication::SyphonAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT8 fromPlayer; _parser.parseINT8(fromPlayer);
	AtfValidator::validateInt(_descr, "fromPlayer", fromPlayer, _checker, __FILE__, __LINE__);
	INT8 toPlayer; _parser.parseINT8(toPlayer);
	AtfValidator::validateInt(_descr, "toPlayer", toPlayer, _checker, __FILE__, __LINE__);
	INT64 originManaTo; _parser.parseINT64(originManaTo);
	AtfValidator::validateInt(_descr, "originManaTo", originManaTo, _checker, __FILE__, __LINE__);
	INT64 origManaFrom; _parser.parseINT64(origManaFrom);
	AtfValidator::validateInt(_descr, "origManaFrom", origManaFrom, _checker, __FILE__, __LINE__);
	INT64 amountDrained; _parser.parseINT64(amountDrained);
	AtfValidator::validateInt(_descr, "amountDrained", amountDrained, _checker, __FILE__, __LINE__);
	INT64 amountReceived; _parser.parseINT64(amountReceived);
	AtfValidator::validateInt(_descr, "amountReceived", amountReceived, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    DeployPowerAnimation
//=================================================================

TableClientThin::publication::DeployPowerAnimation::DeployPowerAnimation()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::DeployPowerAnimation::DeployPowerAnimation(DeployPowerAnimation&& _o)
	: boardWidth(std::move(_o.boardWidth))
	, cards(std::move(_o.cards))
{
}

TableClientThin::publication::DeployPowerAnimation& TableClientThin::publication::DeployPowerAnimation::operator=(DeployPowerAnimation&& _o)
{
	if(this != &_o)
	{
		boardWidth = std::move(_o.boardWidth);
		cards = std::move(_o.cards);
	}
	return *this;
}

#endif

void TableClientThin::publication::DeployPowerAnimation::clear()
{
	boardWidth = 0;
	cards.clear();
}

bool TableClientThin::publication::DeployPowerAnimation::equals(const DeployPowerAnimation& _o) const
{
	return boardWidth == _o.boardWidth &&
		cards.equals(_o.cards);
}

const char *TableClientThin::publication::DeployPowerAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("boardWidth=");
	_buf.appendUint(boardWidth);
	_buf.append(',');
	_buf.append("cards=");
	cards.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::DeployPowerAnimation::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(boardWidth);
	cards.composeMsg(_msg);
}

void TableClientThin::publication::DeployPowerAnimation::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(boardWidth);
	cards.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::DeployPowerAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	BYTE boardWidth; _parser.parseBYTE(boardWidth);
	AtfValidator::validateInt(_descr, "boardWidth", boardWidth, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szCards = ThinAtf::LAtfVector< CardInfoBody, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cards", szCards, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    MorphAnimation
//=================================================================

TableClientThin::publication::MorphAnimation::MorphAnimation()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::MorphAnimation::MorphAnimation(MorphAnimation&& _o)
	: c(std::move(_o.c))
{
}

TableClientThin::publication::MorphAnimation& TableClientThin::publication::MorphAnimation::operator=(MorphAnimation&& _o)
{
	if(this != &_o)
	{
		c = std::move(_o.c);
	}
	return *this;
}

#endif

void TableClientThin::publication::MorphAnimation::clear()
{
	c.clear();
}

bool TableClientThin::publication::MorphAnimation::equals(const MorphAnimation& _o) const
{
	return c.equals(_o.c);
}

const char *TableClientThin::publication::MorphAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("c=");
	c.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::MorphAnimation::composeMsg(CommMsgBody& _msg) const
{
	c.composeMsg(_msg);
}

void TableClientThin::publication::MorphAnimation::parseMsg(CommMsgParser& _parser)
{
	c.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::MorphAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	CardInfo::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("c"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    PacifyAnimPlayer
//=================================================================

TableClientThin::publication::PacifyAnimPlayer::PacifyAnimPlayer()
{
	clear();
}

void TableClientThin::publication::PacifyAnimPlayer::clear()
{
	seat = -1;
	chipsReturned = 0;
	chipsRemaining = 0;
	newBalance = 0;
}

bool TableClientThin::publication::PacifyAnimPlayer::equals(const PacifyAnimPlayer& _o) const
{
	return seat == _o.seat &&
		chipsReturned == _o.chipsReturned &&
		chipsRemaining == _o.chipsRemaining &&
		newBalance == _o.newBalance;
}

const char *TableClientThin::publication::PacifyAnimPlayer::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("chipsReturned=");
	_buf.appendInt64(chipsReturned);
	_buf.append(',');
	_buf.append("chipsRemaining=");
	_buf.appendInt64(chipsRemaining);
	_buf.append(',');
	_buf.append("newBalance=");
	_buf.appendInt64(newBalance);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::PacifyAnimPlayer::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PacifyAnimPlayer())) // not empty
	{
		_body.composeINT8(seat);
		_body.composeINT64(chipsReturned);
		_body.composeINT64(chipsRemaining);
		_body.composeINT64(newBalance);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::PacifyAnimPlayer::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT8(seat);
	_parser0.parseINT64(chipsReturned);
	_parser0.parseINT64(chipsRemaining);
	_parser0.parseINT64(newBalance);
}

/*static*/ void TableClientThin::publication::PacifyAnimPlayer::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT8 seat; _parser0.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	INT64 chipsReturned; _parser0.parseINT64(chipsReturned);
	AtfValidator::validateInt(_descr, "chipsReturned", chipsReturned, _checker, __FILE__, __LINE__);
	INT64 chipsRemaining; _parser0.parseINT64(chipsRemaining);
	AtfValidator::validateInt(_descr, "chipsRemaining", chipsRemaining, _checker, __FILE__, __LINE__);
	INT64 newBalance; _parser0.parseINT64(newBalance);
	AtfValidator::validateInt(_descr, "newBalance", newBalance, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    PacifyAnimation
//=================================================================

TableClientThin::publication::PacifyAnimation::PacifyAnimation()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::PacifyAnimation::PacifyAnimation(PacifyAnimation&& _o)
	: players(std::move(_o.players))
{
}

TableClientThin::publication::PacifyAnimation& TableClientThin::publication::PacifyAnimation::operator=(PacifyAnimation&& _o)
{
	if(this != &_o)
	{
		players = std::move(_o.players);
	}
	return *this;
}

#endif

void TableClientThin::publication::PacifyAnimation::clear()
{
	players.clear();
}

bool TableClientThin::publication::PacifyAnimation::equals(const PacifyAnimation& _o) const
{
	return players.equals(_o.players);
}

const char *TableClientThin::publication::PacifyAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("players=");
	players.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::PacifyAnimation::composeMsg(CommMsgBody& _msg) const
{
	players.composeMsg(_msg);
}

void TableClientThin::publication::PacifyAnimation::parseMsg(CommMsgParser& _parser)
{
	players.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::PacifyAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szPlayers = ThinAtf::LAtfVector< PacifyAnimPlayer, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("players"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "players", szPlayers, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    MintAnimation
//=================================================================

TableClientThin::publication::MintAnimation::MintAnimation()
{
	clear();
}

void TableClientThin::publication::MintAnimation::clear()
{
	chipsMinted = 0;
	betAmountAfterMint = 0;
}

bool TableClientThin::publication::MintAnimation::equals(const MintAnimation& _o) const
{
	return chipsMinted == _o.chipsMinted &&
		betAmountAfterMint == _o.betAmountAfterMint;
}

const char *TableClientThin::publication::MintAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("chipsMinted=");
	_buf.appendInt64(chipsMinted);
	_buf.append(',');
	_buf.append("betAmountAfterMint=");
	_buf.appendInt64(betAmountAfterMint);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::MintAnimation::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT64(chipsMinted);
	_msg.composeINT64(betAmountAfterMint);
}

void TableClientThin::publication::MintAnimation::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT64(chipsMinted);
	_parser.parseINT64(betAmountAfterMint);
}

/*static*/ void TableClientThin::publication::MintAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT64 chipsMinted; _parser.parseINT64(chipsMinted);
	AtfValidator::validateInt(_descr, "chipsMinted", chipsMinted, _checker, __FILE__, __LINE__);
	INT64 betAmountAfterMint; _parser.parseINT64(betAmountAfterMint);
	AtfValidator::validateInt(_descr, "betAmountAfterMint", betAmountAfterMint, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    ChaosCard
//=================================================================

TableClientThin::publication::ChaosCard::ChaosCard()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ChaosCard::ChaosCard(ChaosCard&& _o)
	: card(std::move(_o.card))
	, boardNo(std::move(_o.boardNo))
	, cardPos(std::move(_o.cardPos))
	, isBlocked(std::move(_o.isBlocked))
{
}

TableClientThin::publication::ChaosCard& TableClientThin::publication::ChaosCard::operator=(ChaosCard&& _o)
{
	if(this != &_o)
	{
		card = std::move(_o.card);
		boardNo = std::move(_o.boardNo);
		cardPos = std::move(_o.cardPos);
		isBlocked = std::move(_o.isBlocked);
	}
	return *this;
}

#endif

void TableClientThin::publication::ChaosCard::clear()
{
	card.clear();
	boardNo = 0;
	cardPos = 0;
	isBlocked = false;
}

bool TableClientThin::publication::ChaosCard::equals(const ChaosCard& _o) const
{
	return card.equals(_o.card) &&
		boardNo == _o.boardNo &&
		cardPos == _o.cardPos &&
		isBlocked == _o.isBlocked;
}

const char *TableClientThin::publication::ChaosCard::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("card=");
	card.toTraceString(_buf);
	_buf.append(',');
	_buf.append("boardNo=");
	_buf.appendUint(boardNo);
	_buf.append(',');
	_buf.append("cardPos=");
	_buf.appendUint(cardPos);
	_buf.append(',');
	_buf.append("isBlocked=");
	_buf.appendUint(isBlocked);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ChaosCard::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(ChaosCard())) // not empty
	{
		card.composeMsg(_body);
		_body.composeBYTE(boardNo);
		_body.composeBYTE(cardPos);
		_body.composeBOOL(isBlocked);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::ChaosCard::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	card.parseMsg(_parser0);
	_parser0.parseBYTE(boardNo);
	_parser0.parseBYTE(cardPos);
	_parser0.parseBOOL(isBlocked);
}

/*static*/ void TableClientThin::publication::ChaosCard::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	TableCommonThin::P_Card::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("card"), _fieldsWithUnparsedContent);
	BYTE boardNo; _parser0.parseBYTE(boardNo);
	AtfValidator::validateInt(_descr, "boardNo", boardNo, _checker, __FILE__, __LINE__);
	BYTE cardPos; _parser0.parseBYTE(cardPos);
	AtfValidator::validateInt(_descr, "cardPos", cardPos, _checker, __FILE__, __LINE__);
	bool isBlocked; _parser0.parseBOOL(isBlocked);
	AtfValidator::validateInt(_descr, "isBlocked", isBlocked, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    ChaosAnimation
//=================================================================

TableClientThin::publication::ChaosAnimation::ChaosAnimation()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::ChaosAnimation::ChaosAnimation(ChaosAnimation&& _o)
	: chaos(std::move(_o.chaos))
{
}

TableClientThin::publication::ChaosAnimation& TableClientThin::publication::ChaosAnimation::operator=(ChaosAnimation&& _o)
{
	if(this != &_o)
	{
		chaos = std::move(_o.chaos);
	}
	return *this;
}

#endif

void TableClientThin::publication::ChaosAnimation::clear()
{
	chaos.clear();
}

bool TableClientThin::publication::ChaosAnimation::equals(const ChaosAnimation& _o) const
{
	return chaos.equals(_o.chaos);
}

const char *TableClientThin::publication::ChaosAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("chaos=");
	chaos.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ChaosAnimation::composeMsg(CommMsgBody& _msg) const
{
	chaos.composeMsg(_msg);
}

void TableClientThin::publication::ChaosAnimation::parseMsg(CommMsgParser& _parser)
{
	chaos.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::ChaosAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szChaos = ThinAtf::LAtfVector< ChaosCard, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("chaos"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "chaos", szChaos, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    DealingPowerCardsAnimation
//=================================================================

TableClientThin::publication::DealingPowerCardsAnimation::DealingPowerCardsAnimation()
{
	clear();
}

void TableClientThin::publication::DealingPowerCardsAnimation::clear()
{
	player = 0;
	numPowerCardsBeforeDealt = 0;
	numPowerCardsDealt = 0;
}

bool TableClientThin::publication::DealingPowerCardsAnimation::equals(const DealingPowerCardsAnimation& _o) const
{
	return player == _o.player &&
		numPowerCardsBeforeDealt == _o.numPowerCardsBeforeDealt &&
		numPowerCardsDealt == _o.numPowerCardsDealt;
}

const char *TableClientThin::publication::DealingPowerCardsAnimation::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("player=");
	_buf.appendUint(player);
	_buf.append(',');
	_buf.append("numPowerCardsBeforeDealt=");
	_buf.appendInt(numPowerCardsBeforeDealt);
	_buf.append(',');
	_buf.append("numPowerCardsDealt=");
	_buf.appendInt(numPowerCardsDealt);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::DealingPowerCardsAnimation::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(player);
	_msg.composeINT32(numPowerCardsBeforeDealt);
	_msg.composeINT32(numPowerCardsDealt);
}

void TableClientThin::publication::DealingPowerCardsAnimation::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(player);
	_parser.parseINT32(numPowerCardsBeforeDealt);
	_parser.parseINT32(numPowerCardsDealt);
}

/*static*/ void TableClientThin::publication::DealingPowerCardsAnimation::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	BYTE player; _parser.parseBYTE(player);
	AtfValidator::validateInt(_descr, "player", player, _checker, __FILE__, __LINE__);
	INT32 numPowerCardsBeforeDealt; _parser.parseINT32(numPowerCardsBeforeDealt);
	AtfValidator::validateInt(_descr, "numPowerCardsBeforeDealt", numPowerCardsBeforeDealt, _checker, __FILE__, __LINE__);
	INT32 numPowerCardsDealt; _parser.parseINT32(numPowerCardsDealt);
	AtfValidator::validateInt(_descr, "numPowerCardsDealt", numPowerCardsDealt, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    WinnerInfo
//=================================================================

TableClientThin::publication::WinnerInfo::WinnerInfo()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::WinnerInfo::WinnerInfo(WinnerInfo&& _o)
	: seat(std::move(_o.seat))
	, winningAmount(std::move(_o.winningAmount))
	, handRank(std::move(_o.handRank))
	, kickerRanks(std::move(_o.kickerRanks))
	, winningCards(std::move(_o.winningCards))
{
}

TableClientThin::publication::WinnerInfo& TableClientThin::publication::WinnerInfo::operator=(WinnerInfo&& _o)
{
	if(this != &_o)
	{
		seat = std::move(_o.seat);
		winningAmount = std::move(_o.winningAmount);
		handRank = std::move(_o.handRank);
		kickerRanks = std::move(_o.kickerRanks);
		winningCards = std::move(_o.winningCards);
	}
	return *this;
}

#endif

void TableClientThin::publication::WinnerInfo::clear()
{
	seat = -1;
	winningAmount = 0;
	handRank = 0;
	kickerRanks.clear();
	winningCards.clear();
}

bool TableClientThin::publication::WinnerInfo::equals(const WinnerInfo& _o) const
{
	return seat == _o.seat &&
		winningAmount == _o.winningAmount &&
		handRank == _o.handRank &&
		kickerRanks.equals(_o.kickerRanks) &&
		winningCards.equals(_o.winningCards);
}

const char *TableClientThin::publication::WinnerInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("winningAmount=");
	_buf.appendInt64(winningAmount);
	_buf.append(',');
	_buf.append("handRank=");
	_buf.appendUint(handRank);
	_buf.append(',');
	_buf.append("kickerRanks=");
	kickerRanks.toTraceString(_buf);
	_buf.append(',');
	_buf.append("winningCards=");
	winningCards.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::WinnerInfo::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(WinnerInfo())) // not empty
	{
		_body.composeINT8(seat);
		_body.composeINT64(winningAmount);
		_body.composeBYTE(handRank);
		kickerRanks.composeMsg(_body);
		winningCards.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::WinnerInfo::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT8(seat);
	_parser0.parseINT64(winningAmount);
	_parser0.parseBYTE(handRank);
	kickerRanks.parseMsg(_parser0);
	winningCards.parseMsg(_parser0);
}

/*static*/ void TableClientThin::publication::WinnerInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT8 seat; _parser0.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	INT64 winningAmount; _parser0.parseINT64(winningAmount);
	AtfValidator::validateInt(_descr, "winningAmount", winningAmount, _checker, __FILE__, __LINE__);
	BYTE handRank; _parser0.parseBYTE(handRank);
	AtfValidator::validateInt(_descr, "handRank", handRank, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szKickerRanks = ThinAtf::LAtfVector< INT8, 1 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("kickerRanks"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "kickerRanks", szKickerRanks, _checker, __FILE__, __LINE__);
	int szWinningCards = ThinAtf::LAtfVector< CardInfoBody, 1 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("winningCards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "winningCards", szWinningCards, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION(Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION&& _o)
	: potNo(std::move(_o.potNo))
	, startAmount(std::move(_o.startAmount))
	, endAmount(std::move(_o.endAmount))
	, playersInPot(std::move(_o.playersInPot))
	, winners(std::move(_o.winners))
	, boardNo(std::move(_o.boardNo))
	, isLoHand(std::move(_o.isLoHand))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION::operator=(Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION&& _o)
{
	if(this != &_o)
	{
		potNo = std::move(_o.potNo);
		startAmount = std::move(_o.startAmount);
		endAmount = std::move(_o.endAmount);
		playersInPot = std::move(_o.playersInPot);
		winners = std::move(_o.winners);
		boardNo = std::move(_o.boardNo);
		isLoHand = std::move(_o.isLoHand);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION::clear()
{
	potNo = 0;
	startAmount = 0;
	endAmount = 0;
	playersInPot.clear();
	winners.clear();
	boardNo = 0;
	isLoHand = false;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION::equals(const Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION& _o) const
{
	return potNo == _o.potNo &&
		startAmount == _o.startAmount &&
		endAmount == _o.endAmount &&
		playersInPot.equals(_o.playersInPot) &&
		winners.equals(_o.winners) &&
		boardNo == _o.boardNo &&
		isLoHand == _o.isLoHand;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_POT_DISTRIBUTION).append(")");
	_buf.append(',');
	_buf.append("potNo=");
	_buf.appendUint(potNo);
	_buf.append(',');
	_buf.append("startAmount=");
	_buf.appendInt64(startAmount);
	_buf.append(',');
	_buf.append("endAmount=");
	_buf.appendInt64(endAmount);
	_buf.append(',');
	_buf.append("playersInPot=");
	playersInPot.toTraceString(_buf);
	_buf.append(',');
	_buf.append("winners=");
	winners.toTraceString(_buf);
	_buf.append(',');
	_buf.append("boardNo=");
	_buf.appendUint(boardNo);
	_buf.append(',');
	_buf.append("isLoHand=");
	_buf.appendUint(isLoHand);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(potNo);
	_msg.composeINT64(startAmount);
	_msg.composeINT64(endAmount);
	playersInPot.composeMsg(_msg);
	winners.composeMsg(_msg);
	_msg.composeBYTE(boardNo);
	_msg.composeBOOL(isLoHand);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(potNo);
	_parser.parseINT64(startAmount);
	_parser.parseINT64(endAmount);
	playersInPot.parseMsg(_parser);
	winners.parseMsg(_parser);
	_parser.parseBYTE(boardNo);
	_parser.parseBOOL(isLoHand);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_POT_DISTRIBUTION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE potNo; _parser.parseBYTE(potNo);
	AtfValidator::validateInt(_descr, "potNo", potNo, _checker, __FILE__, __LINE__);
	INT64 startAmount; _parser.parseINT64(startAmount);
	AtfValidator::validateInt(_descr, "startAmount", startAmount, _checker, __FILE__, __LINE__);
	INT64 endAmount; _parser.parseINT64(endAmount);
	AtfValidator::validateInt(_descr, "endAmount", endAmount, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szPlayersInPot = ThinAtf::LAtfVector< BYTE, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("playersInPot"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "playersInPot", szPlayersInPot, _checker, __FILE__, __LINE__);
	int szWinners = ThinAtf::LAtfVector< WinnerInfo, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("winners"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "winners", szWinners, _checker, __FILE__, __LINE__);
	BYTE boardNo; _parser.parseBYTE(boardNo);
	AtfValidator::validateInt(_descr, "boardNo", boardNo, _checker, __FILE__, __LINE__);
	bool isLoHand; _parser.parseBOOL(isLoHand);
	AtfValidator::validateInt(_descr, "isLoHand", isLoHand, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST::Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST::clear()
{
	seat = -1;
	textId = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST::equals(const Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST& _o) const
{
	return seat == _o.seat &&
		textId == _o.textId;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_USER_MINI_CHAT_BROADCAST).append(")");
	_buf.append(',');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("textId=");
	_buf.appendInt(textId);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(seat);
	_msg.composeINT16(textId);
}

void TableClientThin::publication::Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(seat);
	_parser.parseINT16(textId);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_USER_MINI_CHAT_BROADCAST";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	INT16 textId; _parser.parseINT16(textId);
	AtfValidator::validateInt(_descr, "textId", textId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_ANIMATION
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ANIMATION::Protocol_MSG_TABLE_SUBSCR_ANIMATION()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ANIMATION::Protocol_MSG_TABLE_SUBSCR_ANIMATION(Protocol_MSG_TABLE_SUBSCR_ANIMATION&& _o)
	: userId(std::move(_o.userId))
	, seat(std::move(_o.seat))
	, animationTypeId(std::move(_o.animationTypeId))
	, extraInfo(std::move(_o.extraInfo))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ANIMATION& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ANIMATION::operator=(Protocol_MSG_TABLE_SUBSCR_ANIMATION&& _o)
{
	if(this != &_o)
	{
		userId = std::move(_o.userId);
		seat = std::move(_o.seat);
		animationTypeId = std::move(_o.animationTypeId);
		extraInfo = std::move(_o.extraInfo);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ANIMATION::clear()
{
	userId.clear();
	seat = -1;
	animationTypeId = 0;
	extraInfo.clear();
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ANIMATION::equals(const Protocol_MSG_TABLE_SUBSCR_ANIMATION& _o) const
{
	return userId.equals(_o.userId) &&
		seat == _o.seat &&
		animationTypeId == _o.animationTypeId &&
		extraInfo.equals(_o.extraInfo);
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ANIMATION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_ANIMATION).append(")");
	_buf.append(',');
	_buf.append("u=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("animationTypeId=");
	_buf.appendUint(animationTypeId);
	_buf.append(',');
	_buf.append("extraInfo=");
	extraInfo.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ANIMATION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId);
	_msg.composeINT8(seat);
	_msg.composeUINT32(animationTypeId);
	_msg.composeMsgBody(extraInfo);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ANIMATION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseINT8(seat);
	_parser.parseUINT32(animationTypeId);
	_parser.parseMsgBody(extraInfo);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_ANIMATION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_ANIMATION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	UINT32 animationTypeId; _parser.parseUINT32(animationTypeId);
	AtfValidator::validateInt(_descr, "animationTypeId", animationTypeId, _checker, __FILE__, __LINE__);
	size_t szExtraInfo; _parser.skipMsgBody(szExtraInfo);  /*extraInfo*/
	AtfValidator::validateInt(_descr, "extraInfo", szExtraInfo, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_THROW
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_THROW::Protocol_MSG_TABLE_SUBSCR_THROW()
{
	clear();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_THROW::clear()
{
	seatFrom = -1;
	seatTo = -1;
	throwableTypeId = 0;
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_THROW::equals(const Protocol_MSG_TABLE_SUBSCR_THROW& _o) const
{
	return seatFrom == _o.seatFrom &&
		seatTo == _o.seatTo &&
		throwableTypeId == _o.throwableTypeId;
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_THROW::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_THROW).append(")");
	_buf.append(',');
	_buf.append("sF=");
	_buf.appendInt(seatFrom);
	_buf.append(',');
	_buf.append("sT=");
	_buf.appendInt(seatTo);
	_buf.append(',');
	_buf.append("throwableTypeId=");
	_buf.appendUint(throwableTypeId);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_THROW::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(seatFrom);
	_msg.composeINT8(seatTo);
	_msg.composeUINT32(throwableTypeId);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_THROW::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(seatFrom);
	_parser.parseINT8(seatTo);
	_parser.parseUINT32(throwableTypeId);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_THROW::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_THROW";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT8 seatFrom; _parser.parseINT8(seatFrom);
	AtfValidator::validateInt(_descr, "seatFrom", seatFrom, _checker, __FILE__, __LINE__);
	INT8 seatTo; _parser.parseINT8(seatTo);
	AtfValidator::validateInt(_descr, "seatTo", seatTo, _checker, __FILE__, __LINE__);
	UINT32 throwableTypeId; _parser.parseUINT32(throwableTypeId);
	AtfValidator::validateInt(_descr, "throwableTypeId", throwableTypeId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    KnockedOutBy
//=================================================================

TableClientThin::publication::KnockedOutBy::KnockedOutBy()
{
	clear();
}

void TableClientThin::publication::KnockedOutBy::clear()
{
	seat = -1;
	bountyWon = 0;
	spinBountyWon = 0;
	ownBountyIncrease = 0;
}

bool TableClientThin::publication::KnockedOutBy::equals(const KnockedOutBy& _o) const
{
	return seat == _o.seat &&
		bountyWon == _o.bountyWon &&
		spinBountyWon == _o.spinBountyWon &&
		ownBountyIncrease == _o.ownBountyIncrease;
}

const char *TableClientThin::publication::KnockedOutBy::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("seat=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("bountyWon=");
	_buf.appendInt64(bountyWon);
	_buf.append(',');
	_buf.append("spinBountyWon=");
	_buf.appendInt64(spinBountyWon);
	_buf.append(',');
	_buf.append("ownBountyIncrease=");
	_buf.appendInt64(ownBountyIncrease);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::KnockedOutBy::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(KnockedOutBy())) // not empty
	{
		_body.composeINT8(seat);
		_body.composeINT64(bountyWon);
		_body.composeINT64(spinBountyWon);
		_body.composeINT64(ownBountyIncrease);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::KnockedOutBy::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT8(seat);
	_parser0.parseINT64(bountyWon);
	_parser0.parseINT64(spinBountyWon);
	_parser0.parseINT64(ownBountyIncrease);
}

/*static*/ void TableClientThin::publication::KnockedOutBy::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT8 seat; _parser0.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	INT64 bountyWon; _parser0.parseINT64(bountyWon);
	AtfValidator::validateInt(_descr, "bountyWon", bountyWon, _checker, __FILE__, __LINE__);
	INT64 spinBountyWon; _parser0.parseINT64(spinBountyWon);
	AtfValidator::validateInt(_descr, "spinBountyWon", spinBountyWon, _checker, __FILE__, __LINE__);
	INT64 ownBountyIncrease; _parser0.parseINT64(ownBountyIncrease);
	AtfValidator::validateInt(_descr, "ownBountyIncrease", ownBountyIncrease, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    KnockedOut
//=================================================================

TableClientThin::publication::KnockedOut::KnockedOut()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::KnockedOut::KnockedOut(KnockedOut&& _o)
	: seat(std::move(_o.seat))
	, knockedOutBy(std::move(_o.knockedOutBy))
	, spinMultiplier(std::move(_o.spinMultiplier))
	, animationType(std::move(_o.animationType))
{
}

TableClientThin::publication::KnockedOut& TableClientThin::publication::KnockedOut::operator=(KnockedOut&& _o)
{
	if(this != &_o)
	{
		seat = std::move(_o.seat);
		knockedOutBy = std::move(_o.knockedOutBy);
		spinMultiplier = std::move(_o.spinMultiplier);
		animationType = std::move(_o.animationType);
	}
	return *this;
}

#endif

void TableClientThin::publication::KnockedOut::clear()
{
	seat = -1;
	knockedOutBy.clear();
	spinMultiplier = 0;
	animationType = 0;
}

bool TableClientThin::publication::KnockedOut::equals(const KnockedOut& _o) const
{
	return seat == _o.seat &&
		knockedOutBy.equals(_o.knockedOutBy) &&
		spinMultiplier == _o.spinMultiplier &&
		animationType == _o.animationType;
}

const char *TableClientThin::publication::KnockedOut::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("seat=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("knockedOutBy=");
	knockedOutBy.toTraceString(_buf);
	_buf.append(',');
	_buf.append("spinMultiplier=");
	_buf.appendInt(spinMultiplier);
	_buf.append(',');
	_buf.append("animationType=");
	_buf.appendUint(animationType);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::KnockedOut::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(KnockedOut())) // not empty
	{
		_body.composeINT8(seat);
		knockedOutBy.composeMsg(_body);
		_body.composeINT32(spinMultiplier);
		_body.composeUINT32(animationType);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::KnockedOut::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT8(seat);
	knockedOutBy.parseMsg(_parser0);
	_parser0.parseINT32(spinMultiplier);
	_parser0.parseUINT32(animationType);
}

/*static*/ void TableClientThin::publication::KnockedOut::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT8 seat; _parser0.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szKnockedOutBy = ThinAtf::LAtfVector< KnockedOutBy , 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("knockedOutBy"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "knockedOutBy", szKnockedOutBy, _checker, __FILE__, __LINE__);
	INT32 spinMultiplier; _parser0.parseINT32(spinMultiplier);
	AtfValidator::validateInt(_descr, "spinMultiplier", spinMultiplier, _checker, __FILE__, __LINE__);
	UINT32 animationType; _parser0.parseUINT32(animationType);
	AtfValidator::validateInt(_descr, "animationType", animationType, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_TABLE_SUBSCR_KNOCKOUT
//=================================================================

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT(Protocol_MSG_TABLE_SUBSCR_KNOCKOUT&& _o)
	: knockedOut(std::move(_o.knockedOut))
{
}

TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT& TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT::operator=(Protocol_MSG_TABLE_SUBSCR_KNOCKOUT&& _o)
{
	if(this != &_o)
	{
		knockedOut = std::move(_o.knockedOut);
	}
	return *this;
}

#endif

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT::clear()
{
	knockedOut.clear();
}

bool TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT::equals(const Protocol_MSG_TABLE_SUBSCR_KNOCKOUT& _o) const
{
	return knockedOut.equals(_o.knockedOut);
}

const char *TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_SUBSCR_KNOCKOUT).append(")");
	_buf.append(',');
	_buf.append("knockedOut=");
	knockedOut.toTraceString(_buf);
	return _buf.c_str();
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT::composeMsg(CommMsgBody& _msg) const
{
	knockedOut.composeMsg(_msg);
}

void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT::parseMsg(CommMsgParser& _parser)
{
	knockedOut.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_SUBSCR_KNOCKOUT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szKnockedOut = ThinAtf::LAtfVector< KnockedOut , 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("knockedOut"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "knockedOut", szKnockedOut, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    TableSubscr_Chat
//=================================================================

TableClientThin::publication::TableSubscr_Chat::TableSubscr_Chat()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TableSubscr_Chat::TableSubscr_Chat(TableSubscr_Chat&& _o)
	: clentOrdinal(std::move(_o.clentOrdinal))
	, handId(std::move(_o.handId))
	, eventCode(std::move(_o.eventCode))
	, seat(std::move(_o.seat))
	, action(std::move(_o.action))
	, amount(std::move(_o.amount))
	, user(std::move(_o.user))
	, content(std::move(_o.content))
	, amount2(std::move(_o.amount2))
	, msgClientExtra(std::move(_o.msgClientExtra))
	, timestamp(std::move(_o.timestamp))
	, eventSeqId(std::move(_o.eventSeqId))
	, brandMask(std::move(_o.brandMask))
{
}

TableClientThin::publication::TableSubscr_Chat& TableClientThin::publication::TableSubscr_Chat::operator=(TableSubscr_Chat&& _o)
{
	if(this != &_o)
	{
		clentOrdinal = std::move(_o.clentOrdinal);
		handId = std::move(_o.handId);
		eventCode = std::move(_o.eventCode);
		seat = std::move(_o.seat);
		action = std::move(_o.action);
		amount = std::move(_o.amount);
		user = std::move(_o.user);
		content = std::move(_o.content);
		amount2 = std::move(_o.amount2);
		msgClientExtra = std::move(_o.msgClientExtra);
		timestamp = std::move(_o.timestamp);
		eventSeqId = std::move(_o.eventSeqId);
		brandMask = std::move(_o.brandMask);
	}
	return *this;
}

#endif

void TableClientThin::publication::TableSubscr_Chat::clear()
{
	clentOrdinal = 0;
	handId = 0;
	eventCode = 0;
	seat = -1;
	action = 0;
	amount = 0;
	user.clear();
	content.clear();
	amount2 = 0;
	msgClientExtra.clear();
	timestamp = 0;
	eventSeqId = 0;
	brandMask = BrandType_ALLMask;
}

bool TableClientThin::publication::TableSubscr_Chat::equals(const TableSubscr_Chat& _o) const
{
	return clentOrdinal == _o.clentOrdinal &&
		handId == _o.handId &&
		eventCode == _o.eventCode &&
		seat == _o.seat &&
		action == _o.action &&
		amount == _o.amount &&
		user.equals(_o.user) &&
		content.equals(_o.content) &&
		amount2 == _o.amount2 &&
		eventSeqId == _o.eventSeqId &&
		brandMask == _o.brandMask;
}

const char *TableClientThin::publication::TableSubscr_Chat::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("clentOrdinal=");
	_buf.appendUint(clentOrdinal);
	_buf.append(',');
	_buf.append("hI=");
	_buf.appendUint64(handId);
	_buf.append(',');
	_buf.append("eventCode=");
	_buf.appendInt(eventCode);
	_buf.append(',');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("a=");
	_buf.appendInt(action);
	_buf.append(',');
	_buf.append("v=");
	_buf.appendUint(amount);
	_buf.append(',');
	_buf.append("user=");
	_buf.append(user);
	_buf.append(',');
	_buf.append("content=");
	_buf.append(content);
	_buf.append(',');
	_buf.append("v2=");
	_buf.appendInt(amount2);
	_buf.append(',');
	_buf.append("msgClientExtra=");
	msgClientExtra.toTraceString(_buf);
	_buf.append(',');
	_buf.append("timestamp=");
	_buf.appendUint(timestamp);
	_buf.append(',');
	_buf.append("eventSq=");
	_buf.appendUint(eventSeqId);
	_buf.append(',');
	_buf.append("brandMask=");
	_buf.appendUint(brandMask);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_Chat::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(clentOrdinal);
	_msg.composeUINT64(handId);
	_msg.composeINT16(eventCode);
	_msg.composeINT8(seat);
	_msg.composeINT8(action);
	_msg.composeUINT32(amount);
	_msg.composeString(user);
	_msg.composeString(content);
	_msg.composeINT32(amount2);
	_msg.composeMsgBody(msgClientExtra);
	_msg.composeUINT32(timestamp);
	_msg.composeUINT32(eventSeqId);
	_msg.composeUINT32(brandMask);
}

void TableClientThin::publication::TableSubscr_Chat::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(clentOrdinal);
	_parser.parseUINT64(handId);
	_parser.parseINT16(eventCode);
	_parser.parseINT8(seat);
	_parser.parseINT8(action);
	_parser.parseUINT32(amount);
	_parser.parseStringP(user);
	_parser.parseStringP(content);
	_parser.parseINT32(amount2);
	_parser.parseMsgBody(msgClientExtra);
	_parser.parseUINT32(timestamp);
	_parser.parseUINT32(eventSeqId);
	_parser.parseUINT32(brandMask);
}

/*static*/ void TableClientThin::publication::TableSubscr_Chat::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT32 clentOrdinal; _parser.parseUINT32(clentOrdinal);
	AtfValidator::validateInt(_descr, "clentOrdinal", clentOrdinal, _checker, __FILE__, __LINE__);
	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
	INT16 eventCode; _parser.parseINT16(eventCode);
	AtfValidator::validateInt(_descr, "eventCode", eventCode, _checker, __FILE__, __LINE__);
	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	INT8 action; _parser.parseINT8(action);
	AtfValidator::validateInt(_descr, "action", action, _checker, __FILE__, __LINE__);
	UINT32 amount; _parser.parseUINT32(amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "user"); size_t szUser = strlen(_dummy);
	AtfValidator::validateInt(_descr, "user", szUser, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "content"); size_t szContent = strlen(_dummy);
	AtfValidator::validateInt(_descr, "content", szContent, _checker, __FILE__, __LINE__);
	INT32 amount2; _parser.parseINT32(amount2);
	AtfValidator::validateInt(_descr, "amount2", amount2, _checker, __FILE__, __LINE__);
	size_t szMsgClientExtra; _parser.skipMsgBody(szMsgClientExtra);  /*msgClientExtra*/
	AtfValidator::validateInt(_descr, "msgClientExtra", szMsgClientExtra, _checker, __FILE__, __LINE__);
	UINT32 timestamp; _parser.parseUINT32(timestamp);
	AtfValidator::validateInt(_descr, "timestamp", timestamp, _checker, __FILE__, __LINE__);
	UINT32 eventSeqId; _parser.parseUINT32(eventSeqId);
	AtfValidator::validateInt(_descr, "eventSeqId", eventSeqId, _checker, __FILE__, __LINE__);
	UINT32 brandMask; _parser.parseUINT32(brandMask);
	AtfValidator::validateInt(_descr, "brandMask", brandMask, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TableSubscr_Static
//=================================================================

//=================================================================
//                _HappyHourInfoPublMsgType
//=================================================================

TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType::_HappyHourInfoPublMsgType()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType::_HappyHourInfoPublMsgType(_HappyHourInfoPublMsgType&& _o)
	: fppFactors(std::move(_o.fppFactors))
	, fppFactorSiteMasks(std::move(_o.fppFactorSiteMasks))
	, _is_empty_internal(std::move(_o._is_empty_internal))
{
}

TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType& TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType::operator=(_HappyHourInfoPublMsgType&& _o)
{
	if(this != &_o)
	{
		fppFactors = std::move(_o.fppFactors);
		fppFactorSiteMasks = std::move(_o.fppFactorSiteMasks);
		_is_empty_internal = std::move(_o._is_empty_internal);
	}
	return *this;
}

#endif

void TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType::clear()
{
	fppFactors.clear();
	fppFactorSiteMasks.clear();
	_is_empty_internal = true;
}

bool TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType::equals(const _HappyHourInfoPublMsgType& _o) const
{
	return fppFactors.equals(_o.fppFactors) &&
		fppFactorSiteMasks.equals(_o.fppFactorSiteMasks);
}

const char *TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType::toTraceString(PString& _buf) const
{
	_buf.append('{');
	if (!isEmptyMsg())
	{
		_buf.append("fppFactors=");
		fppFactors.toTraceString(_buf);
		_buf.append(',');
		_buf.append("fppFactorSiteMasks=");
		fppFactorSiteMasks.toTraceString(_buf);
	}
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _msg0;
	if (!isEmptyMsg())
	{
		fppFactors.composeMsg(_msg0);
		fppFactorSiteMasks.composeMsg(_msg0);
	}

	_msg.composeMsgBody(_msg0);
}

void TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);
	
	if(!_body._size())
	{
		_is_empty_internal = true;
		return;
	}

	_is_empty_internal = false;
	CommMsgParser _parser0(_body);
	if(_parser0.parseEnded()) return;
	fppFactors.parseMsg(_parser0);
	if(_parser0.parseEnded()) return;
	fppFactorSiteMasks.parseMsg(_parser0);
}

/*static*/ void TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	if(_parser0.msgBodyViewSize() == 0) return;

	if(_parser0.parseEnded()) return;
	PString _descbuf;
	int szFppFactors = ThinAtf::LAtfVector< TableCommonThin::P_FppFactor , 2 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("fppFactors"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "fppFactors", szFppFactors, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	int szFppFactorSiteMasks = ThinAtf::LAtfVector< TableCommonThin::P_FppFactorEx , 2 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("fppFactorSiteMasks"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "fppFactorSiteMasks", szFppFactorSiteMasks, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

TableClientThin::publication::TableSubscr_Static::TableSubscr_Static()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TableSubscr_Static::TableSubscr_Static(TableSubscr_Static&& _o)
	: serverVersion(std::move(_o.serverVersion))
	, protocolVersion(std::move(_o.protocolVersion))
	, tableId32Obsolete(std::move(_o.tableId32Obsolete))
	, handType(std::move(_o.handType))
	, potStruct(std::move(_o.potStruct))
	, tournamentType(std::move(_o.tournamentType))
	, isHiLo(std::move(_o.isHiLo))
	, isPlayMoney(std::move(_o.isPlayMoney))
	, isOneToOne(std::move(_o.isOneToOne))
	, numOfSeats(std::move(_o.numOfSeats))
	, tableName(std::move(_o.tableName))
	, nameSuffix(std::move(_o.nameSuffix))
	, multiGameType(std::move(_o.multiGameType))
	, multiGameTypeDesc(std::move(_o.multiGameTypeDesc))
	, stakeSmall(std::move(_o.stakeSmall))
	, stakeBig(std::move(_o.stakeBig))
	, chatLang(std::move(_o.chatLang))
	, minChipsLimit(std::move(_o.minChipsLimit))
	, maxBuyIn(std::move(_o.maxBuyIn))
	, currency(std::move(_o.currency))
	, cap(std::move(_o.cap))
	, itSessionId(std::move(_o.itSessionId))
	, clubId(std::move(_o.clubId))
	, dealOptions(std::move(_o.dealOptions))
	, isShowCity(std::move(_o.isShowCity))
	, createdBy(std::move(_o.createdBy))
	, cancelledBy(std::move(_o.cancelledBy))
	, voiceObjectAddress(std::move(_o.voiceObjectAddress))
	, voiceObjectUdpAddress(std::move(_o.voiceObjectUdpAddress))
	, voiceObjectName(std::move(_o.voiceObjectName))
	, accessMask(std::move(_o.accessMask))
	, scalePM(std::move(_o.scalePM))
	, happyHourInfoPublMsg(std::move(_o.happyHourInfoPublMsg))
	, showObservFlags(std::move(_o.showObservFlags))
	, tableId(std::move(_o.tableId))
	, noVppGainSiteId(std::move(_o.noVppGainSiteId))
	, tableFlags2(std::move(_o.tableFlags2))
	, tableStakesObsolete(std::move(_o.tableStakesObsolete))
	, variableAntes(std::move(_o.variableAntes))
	, noVppGainSiteMask(std::move(_o.noVppGainSiteMask))
{
}

TableClientThin::publication::TableSubscr_Static& TableClientThin::publication::TableSubscr_Static::operator=(TableSubscr_Static&& _o)
{
	if(this != &_o)
	{
		serverVersion = std::move(_o.serverVersion);
		protocolVersion = std::move(_o.protocolVersion);
		tableId32Obsolete = std::move(_o.tableId32Obsolete);
		handType = std::move(_o.handType);
		potStruct = std::move(_o.potStruct);
		tournamentType = std::move(_o.tournamentType);
		isHiLo = std::move(_o.isHiLo);
		isPlayMoney = std::move(_o.isPlayMoney);
		isOneToOne = std::move(_o.isOneToOne);
		numOfSeats = std::move(_o.numOfSeats);
		tableName = std::move(_o.tableName);
		nameSuffix = std::move(_o.nameSuffix);
		multiGameType = std::move(_o.multiGameType);
		multiGameTypeDesc = std::move(_o.multiGameTypeDesc);
		stakeSmall = std::move(_o.stakeSmall);
		stakeBig = std::move(_o.stakeBig);
		chatLang = std::move(_o.chatLang);
		minChipsLimit = std::move(_o.minChipsLimit);
		maxBuyIn = std::move(_o.maxBuyIn);
		currency = std::move(_o.currency);
		cap = std::move(_o.cap);
		itSessionId = std::move(_o.itSessionId);
		clubId = std::move(_o.clubId);
		dealOptions = std::move(_o.dealOptions);
		isShowCity = std::move(_o.isShowCity);
		createdBy = std::move(_o.createdBy);
		cancelledBy = std::move(_o.cancelledBy);
		voiceObjectAddress = std::move(_o.voiceObjectAddress);
		voiceObjectUdpAddress = std::move(_o.voiceObjectUdpAddress);
		voiceObjectName = std::move(_o.voiceObjectName);
		accessMask = std::move(_o.accessMask);
		scalePM = std::move(_o.scalePM);
		happyHourInfoPublMsg = std::move(_o.happyHourInfoPublMsg);
		showObservFlags = std::move(_o.showObservFlags);
		tableId = std::move(_o.tableId);
		noVppGainSiteId = std::move(_o.noVppGainSiteId);
		tableFlags2 = std::move(_o.tableFlags2);
		tableStakesObsolete = std::move(_o.tableStakesObsolete);
		variableAntes = std::move(_o.variableAntes);
		noVppGainSiteMask = std::move(_o.noVppGainSiteMask);
	}
	return *this;
}

#endif

void TableClientThin::publication::TableSubscr_Static::clear()
{
	serverVersion.clear();
	protocolVersion = TABLE_PROTOCOL_VERSION;
	tableId32Obsolete = 0;
	handType = 0;
	potStruct = 0;
	tournamentType = 0;
	isHiLo = 0;
	isPlayMoney = 0;
	isOneToOne = 0;
	numOfSeats = 0;
	tableName.clear();
	nameSuffix.clear();
	multiGameType = 0;
	multiGameTypeDesc.clear();
	stakeSmall = 0;
	stakeBig = 0;
	chatLang = 0;
	minChipsLimit = 0;
	maxBuyIn = 0;
	currency.clear();
	cap = 0;
	itSessionId.clear();
	clubId = 0;
	dealOptions = 0;
	isShowCity = false;
	createdBy.clear();
	cancelledBy.clear();
	voiceObjectAddress.clear();
	voiceObjectUdpAddress.clear();
	voiceObjectName.clear();
	accessMask = 0;
	scalePM = 0;
	happyHourInfoPublMsg.clear();
	showObservFlags = 0;
	tableId = 0;
	noVppGainSiteId = 0;
	tableFlags2 = 0;
	tableStakesObsolete.clear();
	variableAntes.clear();
	noVppGainSiteMask.clear();
}

bool TableClientThin::publication::TableSubscr_Static::equals(const TableSubscr_Static& _o) const
{
	return serverVersion.equals(_o.serverVersion) &&
		protocolVersion.equals(_o.protocolVersion) &&
		tableId32Obsolete == _o.tableId32Obsolete &&
		handType == _o.handType &&
		potStruct == _o.potStruct &&
		tournamentType == _o.tournamentType &&
		isHiLo == _o.isHiLo &&
		isPlayMoney == _o.isPlayMoney &&
		isOneToOne == _o.isOneToOne &&
		numOfSeats == _o.numOfSeats &&
		tableName.equals(_o.tableName) &&
		nameSuffix.equals(_o.nameSuffix) &&
		multiGameType == _o.multiGameType &&
		multiGameTypeDesc.equals(_o.multiGameTypeDesc) &&
		stakeSmall == _o.stakeSmall &&
		stakeBig == _o.stakeBig &&
		chatLang == _o.chatLang &&
		minChipsLimit == _o.minChipsLimit &&
		maxBuyIn == _o.maxBuyIn &&
		currency.equals(_o.currency) &&
		cap == _o.cap &&
		itSessionId.equals(_o.itSessionId) &&
		clubId == _o.clubId &&
		dealOptions == _o.dealOptions &&
		isShowCity == _o.isShowCity &&
		createdBy.equals(_o.createdBy) &&
		cancelledBy.equals(_o.cancelledBy) &&
		voiceObjectAddress.equals(_o.voiceObjectAddress) &&
		voiceObjectUdpAddress.equals(_o.voiceObjectUdpAddress) &&
		voiceObjectName.equals(_o.voiceObjectName) &&
		accessMask == _o.accessMask &&
		scalePM == _o.scalePM &&
		happyHourInfoPublMsg.equals(_o.happyHourInfoPublMsg) &&
		showObservFlags == _o.showObservFlags &&
		tableId == _o.tableId &&
		noVppGainSiteId == _o.noVppGainSiteId &&
		tableFlags2 == _o.tableFlags2 &&
		tableStakesObsolete.equals(_o.tableStakesObsolete) &&
		variableAntes.equals(_o.variableAntes) &&
		noVppGainSiteMask.equals(_o.noVppGainSiteMask);
}

const char *TableClientThin::publication::TableSubscr_Static::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("serverVersion=");
	_buf.append(serverVersion);
	_buf.append(',');
	_buf.append("protocolVersion=");
	_buf.append(protocolVersion);
	_buf.append(',');
	_buf.append("tableId32Obsolete=");
	_buf.appendUint(tableId32Obsolete);
	_buf.append(',');
	_buf.append("gm=");
	_buf.appendUint(handType);
	_buf.append(',');
	_buf.append("lm=");
	_buf.appendUint(potStruct);
	_buf.append(',');
	_buf.append("tournamentType=");
	_buf.appendUint(tournamentType);
	_buf.append(',');
	_buf.append("isHiLo=");
	_buf.appendUint(isHiLo);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("isOneToOne=");
	_buf.appendUint(isOneToOne);
	_buf.append(',');
	_buf.append("numOfSeats=");
	_buf.appendUint(numOfSeats);
	_buf.append(',');
	_buf.append("tableName=");
	_buf.append(tableName);
	_buf.append(',');
	_buf.append("nameSuffix=");
	_buf.append(nameSuffix);
	_buf.append(',');
	_buf.append("multiGameType=");
	_buf.appendUint(multiGameType);
	_buf.append(',');
	_buf.append("multiGameTypeDesc=");
	_buf.append(multiGameTypeDesc);
	_buf.append(',');
	_buf.append("stakeSmall=");
	_buf.appendInt(stakeSmall);
	_buf.append(',');
	_buf.append("stakeBig=");
	_buf.appendInt(stakeBig);
	_buf.append(',');
	_buf.append("chatLang=");
	_buf.appendUint(chatLang);
	_buf.append(',');
	_buf.append("minChipsLimit=");
	_buf.appendInt(minChipsLimit);
	_buf.append(',');
	_buf.append("mxBI=");
	_buf.appendInt(maxBuyIn);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("cap=");
	_buf.appendInt(cap);
	_buf.append(',');
	_buf.append("itSessionId=");
	_buf.append(itSessionId);
	_buf.append(',');
	_buf.append("clubId=");
	_buf.appendUint(clubId);
	_buf.append(',');
	_buf.append("dealOptions=");
	_buf.appendUint(dealOptions);
	_buf.append(',');
	_buf.append("isShowCity=");
	_buf.appendUint(isShowCity);
	_buf.append(',');
	_buf.append("createdBy=");
	_buf.append(createdBy);
	_buf.append(',');
	_buf.append("cancelledBy=");
	_buf.append(cancelledBy);
	_buf.append(',');
	_buf.append("voiceObjectAddress=");
	_buf.append(voiceObjectAddress);
	_buf.append(',');
	_buf.append("voiceObjectUdpAddress=");
	_buf.append(voiceObjectUdpAddress);
	_buf.append(',');
	_buf.append("voiceObjectName=");
	_buf.append(voiceObjectName);
	_buf.append(',');
	_buf.append("accessMask=");
	_buf.appendUint(accessMask);
	_buf.append(',');
	_buf.append("scalePM=");
	_buf.appendUint(scalePM);
	_buf.append(',');
	_buf.append("happyHourInfoPublMsg=");
	happyHourInfoPublMsg.toTraceString(_buf);
	_buf.append(',');
	_buf.append("showObservFlags=");
	_buf.appendUint(showObservFlags);
	_buf.append(',');
	_buf.append("tI=");
	_buf.appendUint64(tableId);
	_buf.append(',');
	_buf.append("noVppGainSiteId=");
	_buf.appendUint(noVppGainSiteId);
	_buf.append(',');
	_buf.append("tableFlags2=");
	_buf.appendUint64(tableFlags2);
	_buf.append(',');
	_buf.append("tableStakesObsolete=");
	tableStakesObsolete.toTraceString(_buf);
	_buf.append(',');
	_buf.append("variableAntes=");
	variableAntes.toTraceString(_buf);
	_buf.append(',');
	_buf.append("noVppGainSiteMask=");
	noVppGainSiteMask.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_Static::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(serverVersion);
	_msg.composeString(protocolVersion);
	_msg.composeUINT32(tableId32Obsolete);
	_msg.composeBYTE(handType);
	_msg.composeBYTE(potStruct);
	_msg.composeBYTE(tournamentType);
	_msg.composeBYTE(isHiLo);
	_msg.composeBYTE(isPlayMoney);
	_msg.composeBYTE(isOneToOne);
	_msg.composeBYTE(numOfSeats);
	_msg.composeString(tableName);
	_msg.composeString(nameSuffix);
	_msg.composeBYTE(multiGameType);
	_msg.composeString(multiGameTypeDesc);
	_msg.composeINT32(stakeSmall);
	_msg.composeINT32(stakeBig);
	_msg.composeUINT16(chatLang);
	_msg.composeINT32(minChipsLimit);
	_msg.composeINT32(maxBuyIn);
	_msg.composeString(currency);
	_msg.composeINT32(cap);
	_msg.composeString(itSessionId);
	_msg.composeUINT32(clubId);
	_msg.composeBYTE(dealOptions);
	_msg.composeBOOL(isShowCity);
	_msg.composeString(createdBy);
	_msg.composeString(cancelledBy);
	_msg.composeString(voiceObjectAddress);
	_msg.composeString(voiceObjectUdpAddress);
	_msg.composeString(voiceObjectName);
	_msg.composeUINT32(accessMask);
	_msg.composeUINT32(scalePM);
	happyHourInfoPublMsg.composeMsg(_msg);
	_msg.composeUINT32(showObservFlags);
	_msg.composeUINT64(tableId);
	_msg.composeUINT32(noVppGainSiteId);
	_msg.composeUINT64(tableFlags2);
	tableStakesObsolete.composeMsg(_msg);
	variableAntes.composeMsg(_msg);
	noVppGainSiteMask.composeMsg(_msg);
}

void TableClientThin::publication::TableSubscr_Static::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(serverVersion);
	_parser.parseStringP(protocolVersion);
	_parser.parseUINT32(tableId32Obsolete);
	_parser.parseBYTE(handType);
	_parser.parseBYTE(potStruct);
	_parser.parseBYTE(tournamentType);
	_parser.parseBYTE(isHiLo);
	_parser.parseBYTE(isPlayMoney);
	_parser.parseBYTE(isOneToOne);
	_parser.parseBYTE(numOfSeats);
	_parser.parseStringP(tableName);
	_parser.parseStringP(nameSuffix);
	_parser.parseBYTE(multiGameType);
	_parser.parseStringP(multiGameTypeDesc);
	_parser.parseINT32(stakeSmall);
	_parser.parseINT32(stakeBig);
	_parser.parseUINT16(chatLang);
	_parser.parseINT32(minChipsLimit);
	_parser.parseINT32(maxBuyIn);
	_parser.parseStringP(currency);
	_parser.parseINT32(cap);
	_parser.parseStringP(itSessionId);
	_parser.parseUINT32(clubId);
	_parser.parseBYTE(dealOptions);
	_parser.parseBOOL(isShowCity);
	_parser.parseStringP(createdBy);
	_parser.parseStringP(cancelledBy);
	_parser.parseStringP(voiceObjectAddress);
	_parser.parseStringP(voiceObjectUdpAddress);
	_parser.parseStringP(voiceObjectName);
	_parser.parseUINT32(accessMask);
	_parser.parseUINT32(scalePM);
	happyHourInfoPublMsg.parseMsg(_parser);
	_parser.parseUINT32(showObservFlags);
	_parser.parseUINT64(tableId);
	_parser.parseUINT32(noVppGainSiteId);
	if(_parser.parseEnded()) return;
	_parser.parseUINT64(tableFlags2);
	if(_parser.parseEnded()) return;
	tableStakesObsolete.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	variableAntes.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	noVppGainSiteMask.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::TableSubscr_Static::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "serverVersion"); size_t szServerVersion = strlen(_dummy);
	AtfValidator::validateInt(_descr, "serverVersion", szServerVersion, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "protocolVersion"); size_t szProtocolVersion = strlen(_dummy);
	AtfValidator::validateInt(_descr, "protocolVersion", szProtocolVersion, _checker, __FILE__, __LINE__);
	UINT32 tableId32Obsolete; _parser.parseUINT32(tableId32Obsolete);
	AtfValidator::validateInt(_descr, "tableId32Obsolete", tableId32Obsolete, _checker, __FILE__, __LINE__);
	BYTE handType; _parser.parseBYTE(handType);
	AtfValidator::validateInt(_descr, "handType", handType, _checker, __FILE__, __LINE__);
	BYTE potStruct; _parser.parseBYTE(potStruct);
	AtfValidator::validateInt(_descr, "potStruct", potStruct, _checker, __FILE__, __LINE__);
	BYTE tournamentType; _parser.parseBYTE(tournamentType);
	AtfValidator::validateInt(_descr, "tournamentType", tournamentType, _checker, __FILE__, __LINE__);
	BYTE isHiLo; _parser.parseBYTE(isHiLo);
	AtfValidator::validateInt(_descr, "isHiLo", isHiLo, _checker, __FILE__, __LINE__);
	BYTE isPlayMoney; _parser.parseBYTE(isPlayMoney);
	AtfValidator::validateInt(_descr, "isPlayMoney", isPlayMoney, _checker, __FILE__, __LINE__);
	BYTE isOneToOne; _parser.parseBYTE(isOneToOne);
	AtfValidator::validateInt(_descr, "isOneToOne", isOneToOne, _checker, __FILE__, __LINE__);
	BYTE numOfSeats; _parser.parseBYTE(numOfSeats);
	AtfValidator::validateInt(_descr, "numOfSeats", numOfSeats, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "tableName"); size_t szTableName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "tableName", szTableName, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "nameSuffix"); size_t szNameSuffix = strlen(_dummy);
	AtfValidator::validateInt(_descr, "nameSuffix", szNameSuffix, _checker, __FILE__, __LINE__);
	BYTE multiGameType; _parser.parseBYTE(multiGameType);
	AtfValidator::validateInt(_descr, "multiGameType", multiGameType, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "multiGameTypeDesc"); size_t szMultiGameTypeDesc = strlen(_dummy);
	AtfValidator::validateInt(_descr, "multiGameTypeDesc", szMultiGameTypeDesc, _checker, __FILE__, __LINE__);
	INT32 stakeSmall; _parser.parseINT32(stakeSmall);
	AtfValidator::validateInt(_descr, "stakeSmall", stakeSmall, _checker, __FILE__, __LINE__);
	INT32 stakeBig; _parser.parseINT32(stakeBig);
	AtfValidator::validateInt(_descr, "stakeBig", stakeBig, _checker, __FILE__, __LINE__);
	UINT16 chatLang; _parser.parseUINT16(chatLang);
	AtfValidator::validateInt(_descr, "chatLang", chatLang, _checker, __FILE__, __LINE__);
	INT32 minChipsLimit; _parser.parseINT32(minChipsLimit);
	AtfValidator::validateInt(_descr, "minChipsLimit", minChipsLimit, _checker, __FILE__, __LINE__);
	INT32 maxBuyIn; _parser.parseINT32(maxBuyIn);
	AtfValidator::validateInt(_descr, "maxBuyIn", maxBuyIn, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "currency"); size_t szCurrency = strlen(_dummy);
	AtfValidator::validateInt(_descr, "currency", szCurrency, _checker, __FILE__, __LINE__);
	INT32 cap; _parser.parseINT32(cap);
	AtfValidator::validateInt(_descr, "cap", cap, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "itSessionId"); size_t szItSessionId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "itSessionId", szItSessionId, _checker, __FILE__, __LINE__);
	UINT32 clubId; _parser.parseUINT32(clubId);
	AtfValidator::validateInt(_descr, "clubId", clubId, _checker, __FILE__, __LINE__);
	BYTE dealOptions; _parser.parseBYTE(dealOptions);
	AtfValidator::validateInt(_descr, "dealOptions", dealOptions, _checker, __FILE__, __LINE__);
	bool isShowCity; _parser.parseBOOL(isShowCity);
	AtfValidator::validateInt(_descr, "isShowCity", isShowCity, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "createdBy"); size_t szCreatedBy = strlen(_dummy);
	AtfValidator::validateInt(_descr, "createdBy", szCreatedBy, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "cancelledBy"); size_t szCancelledBy = strlen(_dummy);
	AtfValidator::validateInt(_descr, "cancelledBy", szCancelledBy, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "voiceObjectAddress"); size_t szVoiceObjectAddress = strlen(_dummy);
	AtfValidator::validateInt(_descr, "voiceObjectAddress", szVoiceObjectAddress, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "voiceObjectUdpAddress"); size_t szVoiceObjectUdpAddress = strlen(_dummy);
	AtfValidator::validateInt(_descr, "voiceObjectUdpAddress", szVoiceObjectUdpAddress, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "voiceObjectName"); size_t szVoiceObjectName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "voiceObjectName", szVoiceObjectName, _checker, __FILE__, __LINE__);
	UINT32 accessMask; _parser.parseUINT32(accessMask);
	AtfValidator::validateInt(_descr, "accessMask", accessMask, _checker, __FILE__, __LINE__);
	UINT32 scalePM; _parser.parseUINT32(scalePM);
	AtfValidator::validateInt(_descr, "scalePM", scalePM, _checker, __FILE__, __LINE__);
	PString _descbuf;
	_HappyHourInfoPublMsgType::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("happyHourInfoPublMsg"), _fieldsWithUnparsedContent);
	UINT32 showObservFlags; _parser.parseUINT32(showObservFlags);
	AtfValidator::validateInt(_descr, "showObservFlags", showObservFlags, _checker, __FILE__, __LINE__);
	UINT64 tableId; _parser.parseUINT64(tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	UINT32 noVppGainSiteId; _parser.parseUINT32(noVppGainSiteId);
	AtfValidator::validateInt(_descr, "noVppGainSiteId", noVppGainSiteId, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT64 tableFlags2; _parser.parseUINT64(tableFlags2);
	AtfValidator::validateUint(_descr, "tableFlags2", tableFlags2, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	TableCommonThin::TableStakes::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tableStakesObsolete"), _fieldsWithUnparsedContent);
	if(_parser.parseEnded()) return;
	int szVariableAntes = ThinAtf::LAtfVector< INT64, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("variableAntes"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "variableAntes", szVariableAntes, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	PSiteMask::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("noVppGainSiteMask"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    TableSubscr_Hand
//=================================================================

TableClientThin::publication::TableSubscr_Hand::TableSubscr_Hand()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TableSubscr_Hand::TableSubscr_Hand(TableSubscr_Hand&& _o)
	: handId(std::move(_o.handId))
	, stakeSmall(std::move(_o.stakeSmall))
	, stakeBig(std::move(_o.stakeBig))
	, dealer(std::move(_o.dealer))
	, lastHandId(std::move(_o.lastHandId))
	, adminMsg(std::move(_o.adminMsg))
	, round(std::move(_o.round))
	, ante(std::move(_o.ante))
	, tableFlags(std::move(_o.tableFlags))
	, multiGameHands(std::move(_o.multiGameHands))
	, clientMsgStrId(std::move(_o.clientMsgStrId))
	, advertiseI18n(std::move(_o.advertiseI18n))
	, milestoneHandId(std::move(_o.milestoneHandId))
	, superstarShowdownResults(std::move(_o.superstarShowdownResults))
	, banner(std::move(_o.banner))
	, tournMileStoneWinMsg(std::move(_o.tournMileStoneWinMsg))
	, variableAnteIndex(std::move(_o.variableAnteIndex))
	, tableStakes(std::move(_o.tableStakes))
{
}

TableClientThin::publication::TableSubscr_Hand& TableClientThin::publication::TableSubscr_Hand::operator=(TableSubscr_Hand&& _o)
{
	if(this != &_o)
	{
		handId = std::move(_o.handId);
		stakeSmall = std::move(_o.stakeSmall);
		stakeBig = std::move(_o.stakeBig);
		dealer = std::move(_o.dealer);
		lastHandId = std::move(_o.lastHandId);
		adminMsg = std::move(_o.adminMsg);
		round = std::move(_o.round);
		ante = std::move(_o.ante);
		tableFlags = std::move(_o.tableFlags);
		multiGameHands = std::move(_o.multiGameHands);
		clientMsgStrId = std::move(_o.clientMsgStrId);
		advertiseI18n = std::move(_o.advertiseI18n);
		milestoneHandId = std::move(_o.milestoneHandId);
		superstarShowdownResults = std::move(_o.superstarShowdownResults);
		banner = std::move(_o.banner);
		tournMileStoneWinMsg = std::move(_o.tournMileStoneWinMsg);
		variableAnteIndex = std::move(_o.variableAnteIndex);
		tableStakes = std::move(_o.tableStakes);
	}
	return *this;
}

#endif

void TableClientThin::publication::TableSubscr_Hand::clear()
{
	handId = 0;
	stakeSmall = 0;
	stakeBig = 0;
	dealer = -1;
	lastHandId = 0;
	adminMsg.clear();
	round = -128;
	ante = 0;
	tableFlags = 0;
	multiGameHands = 0;
	clientMsgStrId = 0;
	advertiseI18n.clear();
	milestoneHandId = 0;
	superstarShowdownResults.clear();
	banner = -1;
	tournMileStoneWinMsg.clear();
	variableAnteIndex = -1;
	tableStakes.clear();
}

bool TableClientThin::publication::TableSubscr_Hand::equals(const TableSubscr_Hand& _o) const
{
	return handId == _o.handId &&
		stakeSmall == _o.stakeSmall &&
		stakeBig == _o.stakeBig &&
		dealer == _o.dealer &&
		lastHandId == _o.lastHandId &&
		adminMsg.equals(_o.adminMsg) &&
		round == _o.round &&
		ante == _o.ante &&
		tableFlags == _o.tableFlags &&
		multiGameHands == _o.multiGameHands &&
		clientMsgStrId == _o.clientMsgStrId &&
		advertiseI18n.equals(_o.advertiseI18n) &&
		milestoneHandId == _o.milestoneHandId &&
		superstarShowdownResults.equals(_o.superstarShowdownResults) &&
		banner == _o.banner &&
		tournMileStoneWinMsg.equals(_o.tournMileStoneWinMsg) &&
		variableAnteIndex == _o.variableAnteIndex &&
		tableStakes.equals(_o.tableStakes);
}

const char *TableClientThin::publication::TableSubscr_Hand::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("hI=");
	_buf.appendUint64(handId);
	_buf.append(',');
	_buf.append("stakeSmall=");
	_buf.appendUint(stakeSmall);
	_buf.append(',');
	_buf.append("stakeBig=");
	_buf.appendUint(stakeBig);
	_buf.append(',');
	_buf.append("dealer=");
	_buf.appendInt(dealer);
	_buf.append(',');
	_buf.append("lastHI=");
	_buf.appendUint64(lastHandId);
	_buf.append(',');
	_buf.append("adminMsg=");
	_buf.append(adminMsg);
	_buf.append(',');
	_buf.append("round=");
	_buf.appendInt(round);
	_buf.append(',');
	_buf.append("ante=");
	_buf.appendUint(ante);
	_buf.append(',');
	_buf.append("tableFlags=");
	_buf.appendUint(tableFlags);
	_buf.append(',');
	_buf.append("multiGameHands=");
	_buf.appendInt(multiGameHands);
	_buf.append(',');
	_buf.append("clientMsgStrId=");
	_buf.appendUint(clientMsgStrId);
	_buf.append(',');
	_buf.append("advertiseI18n=");
	ThinAtf::AtfTempl<I18nPString>::ToTraceString(_buf, advertiseI18n);
	_buf.append(',');
	_buf.append("milestoneHI=");
	_buf.appendUint64(milestoneHandId);
	_buf.append(',');
	_buf.append("superstarShowdownResults=");
	_buf.append(superstarShowdownResults);
	_buf.append(',');
	_buf.append("banner=");
	_buf.appendInt(banner);
	_buf.append(',');
	_buf.append("tournMileStoneWinMsg=");
	tournMileStoneWinMsg.toTraceString(_buf);
	_buf.append(',');
	_buf.append("variableAnteIndex=");
	_buf.appendInt(variableAnteIndex);
	_buf.append(',');
	_buf.append("tableStakes=");
	tableStakes.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_Hand::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(handId);
	_msg.composeUINT32(stakeSmall);
	_msg.composeUINT32(stakeBig);
	_msg.composeINT8(dealer);
	_msg.composeUINT64(lastHandId);
	_msg.composeString(adminMsg);
	_msg.composeINT8(round);
	_msg.composeUINT32(ante);
	_msg.composeUINT32(tableFlags);
	_msg.composeINT32(multiGameHands);
	_msg.composeUINT16(clientMsgStrId);
	advertiseI18n.compose(_msg);
	_msg.composeUINT64(milestoneHandId);
	_msg.composeString(superstarShowdownResults);
	_msg.composeINT32(banner);
	_msg.composeMsgBody(tournMileStoneWinMsg);
	_msg.composeINT8(variableAnteIndex);
	tableStakes.composeMsg(_msg);
}

void TableClientThin::publication::TableSubscr_Hand::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(handId);
	_parser.parseUINT32(stakeSmall);
	_parser.parseUINT32(stakeBig);
	_parser.parseINT8(dealer);
	_parser.parseUINT64(lastHandId);
	_parser.parseStringP(adminMsg);
	_parser.parseINT8(round);
	_parser.parseUINT32(ante);
	_parser.parseUINT32(tableFlags);
	_parser.parseINT32(multiGameHands);
	_parser.parseUINT16(clientMsgStrId);
	advertiseI18n.parse(_parser);
	_parser.parseUINT64(milestoneHandId);
	_parser.parseStringP(superstarShowdownResults);
	_parser.parseINT32(banner);
	_parser.parseMsgBody(tournMileStoneWinMsg);
	if(_parser.parseEnded()) return;
	_parser.parseINT8(variableAnteIndex);
	tableStakes.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::TableSubscr_Hand::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
	UINT32 stakeSmall; _parser.parseUINT32(stakeSmall);
	AtfValidator::validateInt(_descr, "stakeSmall", stakeSmall, _checker, __FILE__, __LINE__);
	UINT32 stakeBig; _parser.parseUINT32(stakeBig);
	AtfValidator::validateInt(_descr, "stakeBig", stakeBig, _checker, __FILE__, __LINE__);
	INT8 dealer; _parser.parseINT8(dealer);
	AtfValidator::validateInt(_descr, "dealer", dealer, _checker, __FILE__, __LINE__);
	UINT64 lastHandId; _parser.parseUINT64(lastHandId);
	AtfValidator::validateUint(_descr, "lastHandId", lastHandId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "adminMsg"); size_t szAdminMsg = strlen(_dummy);
	AtfValidator::validateInt(_descr, "adminMsg", szAdminMsg, _checker, __FILE__, __LINE__);
	INT8 round; _parser.parseINT8(round);
	AtfValidator::validateInt(_descr, "round", round, _checker, __FILE__, __LINE__);
	UINT32 ante; _parser.parseUINT32(ante);
	AtfValidator::validateInt(_descr, "ante", ante, _checker, __FILE__, __LINE__);
	UINT32 tableFlags; _parser.parseUINT32(tableFlags);
	AtfValidator::validateInt(_descr, "tableFlags", tableFlags, _checker, __FILE__, __LINE__);
	INT32 multiGameHands; _parser.parseINT32(multiGameHands);
	AtfValidator::validateInt(_descr, "multiGameHands", multiGameHands, _checker, __FILE__, __LINE__);
	UINT16 clientMsgStrId; _parser.parseUINT16(clientMsgStrId);
	AtfValidator::validateInt(_descr, "clientMsgStrId", clientMsgStrId, _checker, __FILE__, __LINE__);
	I18nPString advertiseI18n; advertiseI18n.parse(_parser);
	UINT64 milestoneHandId; _parser.parseUINT64(milestoneHandId);
	AtfValidator::validateUint(_descr, "milestoneHandId", milestoneHandId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "superstarShowdownResults"); size_t szSuperstarShowdownResults = strlen(_dummy);
	AtfValidator::validateInt(_descr, "superstarShowdownResults", szSuperstarShowdownResults, _checker, __FILE__, __LINE__);
	INT32 banner; _parser.parseINT32(banner);
	AtfValidator::validateInt(_descr, "banner", banner, _checker, __FILE__, __LINE__);
	size_t szTournMileStoneWinMsg; _parser.skipMsgBody(szTournMileStoneWinMsg);  /*tournMileStoneWinMsg*/
	AtfValidator::validateInt(_descr, "tournMileStoneWinMsg", szTournMileStoneWinMsg, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	INT8 variableAnteIndex; _parser.parseINT8(variableAnteIndex);
	AtfValidator::validateInt(_descr, "variableAnteIndex", variableAnteIndex, _checker, __FILE__, __LINE__);
	PString _descbuf;
	TableCommonThin::TableStakes::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tableStakes"), _fieldsWithUnparsedContent);
}

//=================================================================
//                    SidePot
//=================================================================

TableClientThin::publication::SidePot::SidePot()
{
	clear();
}

void TableClientThin::publication::SidePot::clear()
{
	amount = 0;
	playersMask = 0;
}

bool TableClientThin::publication::SidePot::equals(const SidePot& _o) const
{
	return amount == _o.amount &&
		playersMask == _o.playersMask;
}

const char *TableClientThin::publication::SidePot::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("amount=");
	_buf.appendInt64(amount);
	_buf.append(',');
	_buf.append("playersMask=");
	_buf.appendUint(playersMask);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::SidePot::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(SidePot())) // not empty
	{
		_body.composeINT64(amount);
		_body.composeUINT16(playersMask);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::SidePot::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT64(amount);
	_parser0.parseUINT16(playersMask);
}

/*static*/ void TableClientThin::publication::SidePot::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT64 amount; _parser0.parseINT64(amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
	UINT16 playersMask; _parser0.parseUINT16(playersMask);
	AtfValidator::validateInt(_descr, "playersMask", playersMask, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    PotCat
//=================================================================

TableClientThin::publication::PotCat::PotCat()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::PotCat::PotCat(PotCat&& _o)
	: potCategoryId(std::move(_o.potCategoryId))
	, pots(std::move(_o.pots))
	, rake(std::move(_o.rake))
{
}

TableClientThin::publication::PotCat& TableClientThin::publication::PotCat::operator=(PotCat&& _o)
{
	if(this != &_o)
	{
		potCategoryId = std::move(_o.potCategoryId);
		pots = std::move(_o.pots);
		rake = std::move(_o.rake);
	}
	return *this;
}

#endif

void TableClientThin::publication::PotCat::clear()
{
	potCategoryId = 0;
	pots.clear();
	rake = 0;
}

bool TableClientThin::publication::PotCat::equals(const PotCat& _o) const
{
	return potCategoryId == _o.potCategoryId &&
		pots.equals(_o.pots) &&
		rake == _o.rake;
}

const char *TableClientThin::publication::PotCat::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("potCategoryId=");
	_buf.appendUint(potCategoryId);
	_buf.append(',');
	_buf.append("pots=");
	pots.toTraceString(_buf);
	_buf.append(',');
	_buf.append("rake=");
	_buf.appendInt(rake);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::PotCat::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PotCat())) // not empty
	{
		_body.composeBYTE(potCategoryId);
		pots.composeMsg(_body);
		_body.composeINT32(rake);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::PotCat::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseBYTE(potCategoryId);
	pots.parseMsg(_parser0);
	if(_parser0.parseEnded()) return;
	_parser0.parseINT32(rake);
}

/*static*/ void TableClientThin::publication::PotCat::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	BYTE potCategoryId; _parser0.parseBYTE(potCategoryId);
	AtfValidator::validateInt(_descr, "potCategoryId", potCategoryId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szPots = ThinAtf::LAtfVector< SidePot, 1 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("pots"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "pots", szPots, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	INT32 rake; _parser0.parseINT32(rake);
	AtfValidator::validateInt(_descr, "rake", rake, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    TableSubscr_ActivePlayer
//=================================================================

TableClientThin::publication::TableSubscr_ActivePlayer::TableSubscr_ActivePlayer()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TableSubscr_ActivePlayer::TableSubscr_ActivePlayer(TableSubscr_ActivePlayer&& _o)
	: activePlayer(std::move(_o.activePlayer))
	, rake(std::move(_o.rake))
	, pots(std::move(_o.pots))
	, columns(std::move(_o.columns))
	, totalPot(std::move(_o.totalPot))
	, activeTBstate(std::move(_o.activeTBstate))
	, activeTimeBank(std::move(_o.activeTimeBank))
	, capX(std::move(_o.capX))
	, capY(std::move(_o.capY))
	, actionTimeType(std::move(_o.actionTimeType))
	, totalActionTime(std::move(_o.totalActionTime))
	, remainingActionTime(std::move(_o.remainingActionTime))
	, isActionTimerPaused(std::move(_o.isActionTimerPaused))
	, multiActivePlayersMask(std::move(_o.multiActivePlayersMask))
	, potCats(std::move(_o.potCats))
{
}

TableClientThin::publication::TableSubscr_ActivePlayer& TableClientThin::publication::TableSubscr_ActivePlayer::operator=(TableSubscr_ActivePlayer&& _o)
{
	if(this != &_o)
	{
		activePlayer = std::move(_o.activePlayer);
		rake = std::move(_o.rake);
		pots = std::move(_o.pots);
		columns = std::move(_o.columns);
		totalPot = std::move(_o.totalPot);
		activeTBstate = std::move(_o.activeTBstate);
		activeTimeBank = std::move(_o.activeTimeBank);
		capX = std::move(_o.capX);
		capY = std::move(_o.capY);
		actionTimeType = std::move(_o.actionTimeType);
		totalActionTime = std::move(_o.totalActionTime);
		remainingActionTime = std::move(_o.remainingActionTime);
		isActionTimerPaused = std::move(_o.isActionTimerPaused);
		multiActivePlayersMask = std::move(_o.multiActivePlayersMask);
		potCats = std::move(_o.potCats);
	}
	return *this;
}

#endif

void TableClientThin::publication::TableSubscr_ActivePlayer::clear()
{
	activePlayer = -1;
	rake = 0;
	pots.clear();
	columns.clear();
	totalPot = 0;
	activeTBstate = 0;
	activeTimeBank = 0;
	capX = 0;
	capY = 0;
	actionTimeType = 0;
	totalActionTime = 0;
	remainingActionTime = 0;
	isActionTimerPaused = false;
	multiActivePlayersMask = 0;
	potCats.clear();
}

bool TableClientThin::publication::TableSubscr_ActivePlayer::equals(const TableSubscr_ActivePlayer& _o) const
{
	return activePlayer == _o.activePlayer &&
		rake == _o.rake &&
		pots.equals(_o.pots) &&
		columns.equals(_o.columns) &&
		totalPot == _o.totalPot &&
		activeTBstate == _o.activeTBstate &&
		activeTimeBank == _o.activeTimeBank &&
		capX == _o.capX &&
		actionTimeType == _o.actionTimeType &&
		totalActionTime == _o.totalActionTime &&
		remainingActionTime == _o.remainingActionTime &&
		isActionTimerPaused == _o.isActionTimerPaused &&
		multiActivePlayersMask == _o.multiActivePlayersMask;
}

const char *TableClientThin::publication::TableSubscr_ActivePlayer::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("activePlayer=");
	_buf.appendInt(activePlayer);
	_buf.append(',');
	_buf.append("rake=");
	_buf.appendUint(rake);
	_buf.append(',');
	_buf.append("pots=");
	pots.toTraceString(_buf);
	_buf.append(',');
	_buf.append("columns=");
	columns.toTraceString(_buf);
	_buf.append(',');
	_buf.append("totalPot=");
	_buf.appendUint(totalPot);
	_buf.append(',');
	_buf.append("activeTBstate=");
	_buf.appendUint(activeTBstate);
	_buf.append(',');
	_buf.append("activeTb=");
	_buf.appendUint(activeTimeBank);
	_buf.append(',');
	_buf.append("capX=");
	_buf.appendInt(capX);
	_buf.append(',');
	_buf.append("capY=");
	_buf.appendInt(capY);
	_buf.append(',');
	_buf.append("actionTimeType=");
	_buf.appendUint(actionTimeType);
	_buf.append(',');
	_buf.append("totalActionTime=");
	_buf.appendUint(totalActionTime);
	_buf.append(',');
	_buf.append("remainingActionTime=");
	_buf.appendUint(remainingActionTime);
	_buf.append(',');
	_buf.append("isActionTimerPaused=");
	_buf.appendUint(isActionTimerPaused);
	_buf.append(',');
	_buf.append("multiActivePlayersMask=");
	_buf.appendUint(multiActivePlayersMask);
	_buf.append(',');
	_buf.append("potCats=");
	potCats.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_ActivePlayer::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(activePlayer);
	_msg.composeUINT32(rake);
	pots.composeMsg(_msg);
	columns.composeMsg(_msg);
	_msg.composeUINT32(totalPot);
	_msg.composeBYTE(activeTBstate);
	_msg.composeUINT32(activeTimeBank);
	_msg.composeINT32(capX);
	_msg.composeINT32(capY);
	_msg.composeBYTE(actionTimeType);
	_msg.composeUINT32(totalActionTime);
	_msg.composeUINT32(remainingActionTime);
	_msg.composeBOOL(isActionTimerPaused);
	_msg.composeUINT16(multiActivePlayersMask);
	potCats.composeMsg(_msg);
}

void TableClientThin::publication::TableSubscr_ActivePlayer::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(activePlayer);
	_parser.parseUINT32(rake);
	pots.parseMsg(_parser);
	columns.parseMsg(_parser);
	_parser.parseUINT32(totalPot);
	_parser.parseBYTE(activeTBstate);
	_parser.parseUINT32(activeTimeBank);
	_parser.parseINT32(capX);
	_parser.parseINT32(capY);
	_parser.parseBYTE(actionTimeType);
	_parser.parseUINT32(totalActionTime);
	_parser.parseUINT32(remainingActionTime);
	_parser.parseBOOL(isActionTimerPaused);
	if(_parser.parseEnded()) return;
	_parser.parseUINT16(multiActivePlayersMask);
	if(_parser.parseEnded()) return;
	potCats.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::TableSubscr_ActivePlayer::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT8 activePlayer; _parser.parseINT8(activePlayer);
	AtfValidator::validateInt(_descr, "activePlayer", activePlayer, _checker, __FILE__, __LINE__);
	UINT32 rake; _parser.parseUINT32(rake);
	AtfValidator::validateInt(_descr, "rake", rake, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szPots = ThinAtf::LAtfVector< UINT32, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("pots"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "pots", szPots, _checker, __FILE__, __LINE__);
	int szColumns = ThinAtf::LAtfVector< UINT32, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("columns"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "columns", szColumns, _checker, __FILE__, __LINE__);
	UINT32 totalPot; _parser.parseUINT32(totalPot);
	AtfValidator::validateInt(_descr, "totalPot", totalPot, _checker, __FILE__, __LINE__);
	BYTE activeTBstate; _parser.parseBYTE(activeTBstate);
	AtfValidator::validateInt(_descr, "activeTBstate", activeTBstate, _checker, __FILE__, __LINE__);
	UINT32 activeTimeBank; _parser.parseUINT32(activeTimeBank);
	AtfValidator::validateInt(_descr, "activeTimeBank", activeTimeBank, _checker, __FILE__, __LINE__);
	INT32 capX; _parser.parseINT32(capX);
	AtfValidator::validateInt(_descr, "capX", capX, _checker, __FILE__, __LINE__);
	INT32 capY; _parser.parseINT32(capY);
	AtfValidator::validateInt(_descr, "capY", capY, _checker, __FILE__, __LINE__);
	BYTE actionTimeType; _parser.parseBYTE(actionTimeType);
	AtfValidator::validateInt(_descr, "actionTimeType", actionTimeType, _checker, __FILE__, __LINE__);
	UINT32 totalActionTime; _parser.parseUINT32(totalActionTime);
	AtfValidator::validateInt(_descr, "totalActionTime", totalActionTime, _checker, __FILE__, __LINE__);
	UINT32 remainingActionTime; _parser.parseUINT32(remainingActionTime);
	AtfValidator::validateInt(_descr, "remainingActionTime", remainingActionTime, _checker, __FILE__, __LINE__);
	bool isActionTimerPaused; _parser.parseBOOL(isActionTimerPaused);
	AtfValidator::validateInt(_descr, "isActionTimerPaused", isActionTimerPaused, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT16 multiActivePlayersMask; _parser.parseUINT16(multiActivePlayersMask);
	AtfValidator::validateInt(_descr, "multiActivePlayersMask", multiActivePlayersMask, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	int szPotCats = ThinAtf::LAtfVector< PotCat, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("potCats"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "potCats", szPotCats, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TableSubscr_Board
//=================================================================

TableClientThin::publication::TableSubscr_Board::TableSubscr_Board()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TableSubscr_Board::TableSubscr_Board(TableSubscr_Board&& _o)
	: activeBoardCards(std::move(_o.activeBoardCards))
{
}

TableClientThin::publication::TableSubscr_Board& TableClientThin::publication::TableSubscr_Board::operator=(TableSubscr_Board&& _o)
{
	if(this != &_o)
	{
		activeBoardCards = std::move(_o.activeBoardCards);
	}
	return *this;
}

#endif

void TableClientThin::publication::TableSubscr_Board::clear()
{
	activeBoardCards.clear();
}

bool TableClientThin::publication::TableSubscr_Board::equals(const TableSubscr_Board& _o) const
{
	return activeBoardCards.equals(_o.activeBoardCards);
}

const char *TableClientThin::publication::TableSubscr_Board::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("activeBoardCards=");
	activeBoardCards.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_Board::composeMsg(CommMsgBody& _msg) const
{
	activeBoardCards.composeMsg(_msg);
}

void TableClientThin::publication::TableSubscr_Board::parseMsg(CommMsgParser& _parser)
{
	activeBoardCards.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::TableSubscr_Board::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szActiveBoardCards = ThinAtf::LAtfVector< TableCommonThin::P_Card , 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("activeBoardCards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "activeBoardCards", szActiveBoardCards, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TableSubscr_PlayerChips
//=================================================================

TableClientThin::publication::TableSubscr_PlayerChips::TableSubscr_PlayerChips()
{
	clear();
}

void TableClientThin::publication::TableSubscr_PlayerChips::clear()
{
	chips = 0;
	chipsBet = 0;
	isSittingIn = 0;
	isSeatedAndConnected = 0;
	allInFlag = 0;
	inHand = 0;
	seatIndicator = 0;
	connectQuality = CONNECTION_QUALITY_DISCONNECTED;
	timeBank = 0;
	numOfAllInsLeft = ALLIN_NOALLINTOURN;
	capN = 0;
	totalBet = 0;
	playerState = 0;
	remainingStacks = 0;
	hasCard = false;
	hasFolded = false;
	totalBetInUnfoldPot = 0;
	playerState2 = 0;
}

bool TableClientThin::publication::TableSubscr_PlayerChips::equals(const TableSubscr_PlayerChips& _o) const
{
	return chips == _o.chips &&
		chipsBet == _o.chipsBet &&
		isSittingIn == _o.isSittingIn &&
		isSeatedAndConnected == _o.isSeatedAndConnected &&
		allInFlag == _o.allInFlag &&
		inHand == _o.inHand &&
		seatIndicator == _o.seatIndicator &&
		connectQuality == _o.connectQuality &&
		timeBank == _o.timeBank &&
		numOfAllInsLeft == _o.numOfAllInsLeft &&
		totalBet == _o.totalBet &&
		playerState == _o.playerState &&
		remainingStacks == _o.remainingStacks &&
		hasCard == _o.hasCard &&
		hasFolded == _o.hasFolded &&
		totalBetInUnfoldPot == _o.totalBetInUnfoldPot &&
		playerState2 == _o.playerState2;
}

const char *TableClientThin::publication::TableSubscr_PlayerChips::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("chips=");
	_buf.appendUint(chips);
	_buf.append(',');
	_buf.append("chipsBet=");
	_buf.appendUint(chipsBet);
	_buf.append(',');
	_buf.append("isSittingIn=");
	_buf.appendUint(isSittingIn);
	_buf.append(',');
	_buf.append("isSeatedAndConnected=");
	_buf.appendUint(isSeatedAndConnected);
	_buf.append(',');
	_buf.append("allInFlag=");
	_buf.appendUint(allInFlag);
	_buf.append(',');
	_buf.append("inHand=");
	_buf.appendUint(inHand);
	_buf.append(',');
	_buf.append("seatIndicator=");
	_buf.appendUint(seatIndicator);
	_buf.append(',');
	_buf.append("connectQuality=");
	_buf.appendInt(connectQuality);
	_buf.append(',');
	_buf.append("tb=");
	_buf.appendUint(timeBank);
	_buf.append(',');
	_buf.append("numOfAllInsLeft=");
	_buf.appendInt(numOfAllInsLeft);
	_buf.append(',');
	_buf.append("capN=");
	_buf.appendInt(capN);
	_buf.append(',');
	_buf.append("totalBet=");
	_buf.appendUint(totalBet);
	_buf.append(',');
	_buf.append("playerState=");
	_buf.appendUint(playerState);
	_buf.append(',');
	_buf.append("remainingStacks=");
	_buf.appendUint(remainingStacks);
	_buf.append(',');
	_buf.append("hasCard=");
	_buf.appendUint(hasCard);
	_buf.append(',');
	_buf.append("hasFolded=");
	_buf.appendUint(hasFolded);
	_buf.append(',');
	_buf.append("totalBetInUnfoldPot=");
	_buf.appendInt(totalBetInUnfoldPot);
	_buf.append(',');
	_buf.append("playerState2=");
	_buf.appendUint64(playerState2);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_PlayerChips::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(chips);
	_msg.composeUINT32(chipsBet);
	_msg.composeBYTE(isSittingIn);
	_msg.composeBYTE(isSeatedAndConnected);
	_msg.composeBYTE(allInFlag);
	_msg.composeBYTE(inHand);
	_msg.composeBYTE(seatIndicator);
	_msg.composeINT8(connectQuality);
	_msg.composeUINT32(timeBank);
	_msg.composeINT16(numOfAllInsLeft);
	_msg.composeINT32(capN);
	_msg.composeUINT32(totalBet);
	_msg.composeBYTE(playerState);
	_msg.composeUINT32(remainingStacks);
	_msg.composeBOOL(hasCard);
	_msg.composeBOOL(hasFolded);
	_msg.composeINT32(totalBetInUnfoldPot);
	_msg.composeUINT64(playerState2);
}

void TableClientThin::publication::TableSubscr_PlayerChips::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(chips);
	_parser.parseUINT32(chipsBet);
	_parser.parseBYTE(isSittingIn);
	_parser.parseBYTE(isSeatedAndConnected);
	_parser.parseBYTE(allInFlag);
	_parser.parseBYTE(inHand);
	_parser.parseBYTE(seatIndicator);
	_parser.parseINT8(connectQuality);
	_parser.parseUINT32(timeBank);
	_parser.parseINT16(numOfAllInsLeft);
	_parser.parseINT32(capN);
	_parser.parseUINT32(totalBet);
	_parser.parseBYTE(playerState);
	_parser.parseUINT32(remainingStacks);
	_parser.parseBOOL(hasCard);
	_parser.parseBOOL(hasFolded);
	if(_parser.parseEnded()) return;
	_parser.parseINT32(totalBetInUnfoldPot);
	if(_parser.parseEnded()) return;
	_parser.parseUINT64(playerState2);
}

/*static*/ void TableClientThin::publication::TableSubscr_PlayerChips::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	UINT32 chips; _parser.parseUINT32(chips);
	AtfValidator::validateInt(_descr, "chips", chips, _checker, __FILE__, __LINE__);
	UINT32 chipsBet; _parser.parseUINT32(chipsBet);
	AtfValidator::validateInt(_descr, "chipsBet", chipsBet, _checker, __FILE__, __LINE__);
	BYTE isSittingIn; _parser.parseBYTE(isSittingIn);
	AtfValidator::validateInt(_descr, "isSittingIn", isSittingIn, _checker, __FILE__, __LINE__);
	BYTE isSeatedAndConnected; _parser.parseBYTE(isSeatedAndConnected);
	AtfValidator::validateInt(_descr, "isSeatedAndConnected", isSeatedAndConnected, _checker, __FILE__, __LINE__);
	BYTE allInFlag; _parser.parseBYTE(allInFlag);
	AtfValidator::validateInt(_descr, "allInFlag", allInFlag, _checker, __FILE__, __LINE__);
	BYTE inHand; _parser.parseBYTE(inHand);
	AtfValidator::validateInt(_descr, "inHand", inHand, _checker, __FILE__, __LINE__);
	BYTE seatIndicator; _parser.parseBYTE(seatIndicator);
	AtfValidator::validateInt(_descr, "seatIndicator", seatIndicator, _checker, __FILE__, __LINE__);
	INT8 connectQuality; _parser.parseINT8(connectQuality);
	AtfValidator::validateInt(_descr, "connectQuality", connectQuality, _checker, __FILE__, __LINE__);
	UINT32 timeBank; _parser.parseUINT32(timeBank);
	AtfValidator::validateInt(_descr, "timeBank", timeBank, _checker, __FILE__, __LINE__);
	INT16 numOfAllInsLeft; _parser.parseINT16(numOfAllInsLeft);
	AtfValidator::validateInt(_descr, "numOfAllInsLeft", numOfAllInsLeft, _checker, __FILE__, __LINE__);
	INT32 capN; _parser.parseINT32(capN);
	AtfValidator::validateInt(_descr, "capN", capN, _checker, __FILE__, __LINE__);
	UINT32 totalBet; _parser.parseUINT32(totalBet);
	AtfValidator::validateInt(_descr, "totalBet", totalBet, _checker, __FILE__, __LINE__);
	BYTE playerState; _parser.parseBYTE(playerState);
	AtfValidator::validateInt(_descr, "playerState", playerState, _checker, __FILE__, __LINE__);
	UINT32 remainingStacks; _parser.parseUINT32(remainingStacks);
	AtfValidator::validateInt(_descr, "remainingStacks", remainingStacks, _checker, __FILE__, __LINE__);
	bool hasCard; _parser.parseBOOL(hasCard);
	AtfValidator::validateInt(_descr, "hasCard", hasCard, _checker, __FILE__, __LINE__);
	bool hasFolded; _parser.parseBOOL(hasFolded);
	AtfValidator::validateInt(_descr, "hasFolded", hasFolded, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	INT32 totalBetInUnfoldPot; _parser.parseINT32(totalBetInUnfoldPot);
	AtfValidator::validateInt(_descr, "totalBetInUnfoldPot", totalBetInUnfoldPot, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT64 playerState2; _parser.parseUINT64(playerState2);
	AtfValidator::validateUint(_descr, "playerState2", playerState2, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TableSubscr_PlayerProfile
//=================================================================

TableClientThin::publication::TableSubscr_PlayerProfile::TableSubscr_PlayerProfile()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TableSubscr_PlayerProfile::TableSubscr_PlayerProfile(TableSubscr_PlayerProfile&& _o)
	: user(std::move(_o.user))
	, city(std::move(_o.city))
	, imageId(std::move(_o.imageId))
	, siteId(std::move(_o.siteId))
	, vipStatus(std::move(_o.vipStatus))
	, publProp(std::move(_o.publProp))
	, bounty(std::move(_o.bounty))
	, promoImageCode(std::move(_o.promoImageCode))
	, country(std::move(_o.country))
	, showCountry(std::move(_o.showCountry))
	, headBounty(std::move(_o.headBounty))
	, hallOfFame(std::move(_o.hallOfFame))
	, mileStoneAward(std::move(_o.mileStoneAward))
	, clientDevice(std::move(_o.clientDevice))
	, userPropertyMsg(std::move(_o.userPropertyMsg))
	, brandImages(std::move(_o.brandImages))
	, altBounty_tournId(std::move(_o.altBounty_tournId))
	, altBounty_admission(std::move(_o.altBounty_admission))
	, altBounty_tChips(std::move(_o.altBounty_tChips))
	, earlyBirdMultiplier(std::move(_o.earlyBirdMultiplier))
	, earlyBirdMins(std::move(_o.earlyBirdMins))
	, amountToHeadIfEliminated(std::move(_o.amountToHeadIfEliminated))
	, baseWinIfEliminated(std::move(_o.baseWinIfEliminated))
	, maxBonusWinIfEliminated(std::move(_o.maxBonusWinIfEliminated))
{
}

TableClientThin::publication::TableSubscr_PlayerProfile& TableClientThin::publication::TableSubscr_PlayerProfile::operator=(TableSubscr_PlayerProfile&& _o)
{
	if(this != &_o)
	{
		user = std::move(_o.user);
		city = std::move(_o.city);
		imageId = std::move(_o.imageId);
		siteId = std::move(_o.siteId);
		vipStatus = std::move(_o.vipStatus);
		publProp = std::move(_o.publProp);
		bounty = std::move(_o.bounty);
		promoImageCode = std::move(_o.promoImageCode);
		country = std::move(_o.country);
		showCountry = std::move(_o.showCountry);
		headBounty = std::move(_o.headBounty);
		hallOfFame = std::move(_o.hallOfFame);
		mileStoneAward = std::move(_o.mileStoneAward);
		clientDevice = std::move(_o.clientDevice);
		userPropertyMsg = std::move(_o.userPropertyMsg);
		brandImages = std::move(_o.brandImages);
		altBounty_tournId = std::move(_o.altBounty_tournId);
		altBounty_admission = std::move(_o.altBounty_admission);
		altBounty_tChips = std::move(_o.altBounty_tChips);
		earlyBirdMultiplier = std::move(_o.earlyBirdMultiplier);
		earlyBirdMins = std::move(_o.earlyBirdMins);
		amountToHeadIfEliminated = std::move(_o.amountToHeadIfEliminated);
		baseWinIfEliminated = std::move(_o.baseWinIfEliminated);
		maxBonusWinIfEliminated = std::move(_o.maxBonusWinIfEliminated);
	}
	return *this;
}

#endif

void TableClientThin::publication::TableSubscr_PlayerProfile::clear()
{
	user.clear();
	city.clear();
	imageId = 0;
	siteId = 0;
	vipStatus = 0;
	publProp = 0;
	bounty = 0;
	promoImageCode.clear();
	country.clear();
	showCountry = 0;
	headBounty = 0;
	hallOfFame = 0;
	mileStoneAward = 0;
	clientDevice = 0;
	userPropertyMsg.clear();
	brandImages.clear();
	altBounty_tournId = 0;
	altBounty_admission.clear();
	altBounty_tChips = 0;
	earlyBirdMultiplier = 0;
	earlyBirdMins = 0;
	amountToHeadIfEliminated = 0;
	baseWinIfEliminated = 0;
	maxBonusWinIfEliminated = 0;
}

bool TableClientThin::publication::TableSubscr_PlayerProfile::equals(const TableSubscr_PlayerProfile& _o) const
{
	return user.equals(_o.user) &&
		city.equals(_o.city) &&
		imageId == _o.imageId &&
		siteId == _o.siteId &&
		vipStatus == _o.vipStatus &&
		publProp == _o.publProp &&
		bounty == _o.bounty &&
		promoImageCode.equals(_o.promoImageCode) &&
		country.equals(_o.country) &&
		showCountry == _o.showCountry &&
		headBounty == _o.headBounty &&
		hallOfFame == _o.hallOfFame &&
		mileStoneAward == _o.mileStoneAward &&
		clientDevice == _o.clientDevice &&
		userPropertyMsg.equals(_o.userPropertyMsg) &&
		brandImages.equals(_o.brandImages) &&
		altBounty_tournId == _o.altBounty_tournId &&
		altBounty_admission.equals(_o.altBounty_admission) &&
		altBounty_tChips == _o.altBounty_tChips &&
		earlyBirdMultiplier == _o.earlyBirdMultiplier &&
		earlyBirdMins == _o.earlyBirdMins &&
		amountToHeadIfEliminated == _o.amountToHeadIfEliminated &&
		baseWinIfEliminated == _o.baseWinIfEliminated &&
		maxBonusWinIfEliminated == _o.maxBonusWinIfEliminated;
}

const char *TableClientThin::publication::TableSubscr_PlayerProfile::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("user=");
	_buf.append(user);
	_buf.append(',');
	_buf.append("city=");
	_buf.append(city);
	_buf.append(',');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append(',');
	_buf.append("siteId=");
	_buf.appendUint(siteId);
	_buf.append(',');
	_buf.append("vipStatus=");
	_buf.appendUint(vipStatus);
	_buf.append(',');
	_buf.append("publProp=");
	_buf.appendUint(publProp);
	_buf.append(',');
	_buf.append("bounty=");
	_buf.appendUint(bounty);
	_buf.append(',');
	_buf.append("promoImageCode=");
	_buf.append(promoImageCode);
	_buf.append(',');
	_buf.append("country=");
	_buf.append(country);
	_buf.append(',');
	_buf.append("showCountry=");
	_buf.appendUint(showCountry);
	_buf.append(',');
	_buf.append("headBounty=");
	_buf.appendUint(headBounty);
	_buf.append(',');
	_buf.append("hallOfFame=");
	_buf.appendUint(hallOfFame);
	_buf.append(',');
	_buf.append("mileStoneAward=");
	_buf.appendUint(mileStoneAward);
	_buf.append(',');
	_buf.append("clientDevice=");
	_buf.appendUint(clientDevice);
	_buf.append(',');
	_buf.append("userPropertyMsg=");
	userPropertyMsg.toTraceString(_buf);
	_buf.append(',');
	_buf.append("brandImages=");
	brandImages.toTraceString(_buf);
	_buf.append(',');
	_buf.append("altBounty_tournId=");
	_buf.appendUint64(altBounty_tournId);
	_buf.append(',');
	_buf.append("altBounty_admission=");
	_buf.append(altBounty_admission);
	_buf.append(',');
	_buf.append("altBounty_tChips=");
	_buf.appendInt(altBounty_tChips);
	_buf.append(',');
	_buf.append("earlyBirdMultiplier=");
	_buf.appendInt(earlyBirdMultiplier);
	_buf.append(',');
	_buf.append("earlyBirdMins=");
	_buf.appendInt(earlyBirdMins);
	_buf.append(',');
	_buf.append("amountToHeadIfEliminated=");
	_buf.appendInt64(amountToHeadIfEliminated);
	_buf.append(',');
	_buf.append("baseWinIfEliminated=");
	_buf.appendInt64(baseWinIfEliminated);
	_buf.append(',');
	_buf.append("maxBonusWinIfEliminated=");
	_buf.appendInt64(maxBonusWinIfEliminated);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_PlayerProfile::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(user);
	_msg.composeString(city);
	_msg.composeUINT32(imageId);
	_msg.composeUINT32(siteId);
	_msg.composeUINT32(vipStatus);
	_msg.composeBYTE(publProp);
	_msg.composeUINT32(bounty);
	_msg.composeString(promoImageCode);
	_msg.composeString(country);
	_msg.composeBYTE(showCountry);
	_msg.composeUINT32(headBounty);
	_msg.composeUINT32(hallOfFame);
	_msg.composeUINT32(mileStoneAward);
	_msg.composeUINT32(clientDevice);
	_msg.composeMsgBody(userPropertyMsg);
	brandImages.composeMsg(_msg);
	_msg.composeUINT64(altBounty_tournId);
	_msg.composeString(altBounty_admission);
	_msg.composeINT32(altBounty_tChips);
	_msg.composeINT32(earlyBirdMultiplier);
	_msg.composeINT32(earlyBirdMins);
	_msg.composeINT64(amountToHeadIfEliminated);
	_msg.composeINT64(baseWinIfEliminated);
	_msg.composeINT64(maxBonusWinIfEliminated);
}

void TableClientThin::publication::TableSubscr_PlayerProfile::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(user);
	_parser.parseStringP(city);
	_parser.parseUINT32(imageId);
	_parser.parseUINT32(siteId);
	_parser.parseUINT32(vipStatus);
	_parser.parseBYTE(publProp);
	_parser.parseUINT32(bounty);
	_parser.parseStringP(promoImageCode);
	_parser.parseStringP(country);
	_parser.parseBYTE(showCountry);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(headBounty);
	_parser.parseUINT32(hallOfFame);
	_parser.parseUINT32(mileStoneAward);
	_parser.parseUINT32(clientDevice);
	_parser.parseMsgBody(userPropertyMsg);
	brandImages.parseMsg(_parser);
	_parser.parseUINT64(altBounty_tournId);
	_parser.parseStringP(altBounty_admission);
	_parser.parseINT32(altBounty_tChips);
	if(_parser.parseEnded()) return;
	_parser.parseINT32(earlyBirdMultiplier);
	_parser.parseINT32(earlyBirdMins);
	if(_parser.parseEnded()) return;
	_parser.parseINT64(amountToHeadIfEliminated);
	_parser.parseINT64(baseWinIfEliminated);
	_parser.parseINT64(maxBonusWinIfEliminated);
}

/*static*/ void TableClientThin::publication::TableSubscr_PlayerProfile::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "user"); size_t szUser = strlen(_dummy);
	AtfValidator::validateInt(_descr, "user", szUser, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "city"); size_t szCity = strlen(_dummy);
	AtfValidator::validateInt(_descr, "city", szCity, _checker, __FILE__, __LINE__);
	UINT32 imageId; _parser.parseUINT32(imageId);
	AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
	UINT32 siteId; _parser.parseUINT32(siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	UINT32 vipStatus; _parser.parseUINT32(vipStatus);
	AtfValidator::validateInt(_descr, "vipStatus", vipStatus, _checker, __FILE__, __LINE__);
	BYTE publProp; _parser.parseBYTE(publProp);
	AtfValidator::validateInt(_descr, "publProp", publProp, _checker, __FILE__, __LINE__);
	UINT32 bounty; _parser.parseUINT32(bounty);
	AtfValidator::validateInt(_descr, "bounty", bounty, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "promoImageCode"); size_t szPromoImageCode = strlen(_dummy);
	AtfValidator::validateInt(_descr, "promoImageCode", szPromoImageCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "country"); size_t szCountry = strlen(_dummy);
	AtfValidator::validateInt(_descr, "country", szCountry, _checker, __FILE__, __LINE__);
	BYTE showCountry; _parser.parseBYTE(showCountry);
	AtfValidator::validateInt(_descr, "showCountry", showCountry, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 headBounty; _parser.parseUINT32(headBounty);
	AtfValidator::validateInt(_descr, "headBounty", headBounty, _checker, __FILE__, __LINE__);
	UINT32 hallOfFame; _parser.parseUINT32(hallOfFame);
	AtfValidator::validateInt(_descr, "hallOfFame", hallOfFame, _checker, __FILE__, __LINE__);
	UINT32 mileStoneAward; _parser.parseUINT32(mileStoneAward);
	AtfValidator::validateInt(_descr, "mileStoneAward", mileStoneAward, _checker, __FILE__, __LINE__);
	UINT32 clientDevice; _parser.parseUINT32(clientDevice);
	AtfValidator::validateInt(_descr, "clientDevice", clientDevice, _checker, __FILE__, __LINE__);
	size_t szUserPropertyMsg; _parser.skipMsgBody(szUserPropertyMsg);  /*userPropertyMsg*/
	AtfValidator::validateInt(_descr, "userPropertyMsg", szUserPropertyMsg, _checker, __FILE__, __LINE__);
	PString _descbuf;
	BrandProtThin::BrandImageList::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("brandImages"), _fieldsWithUnparsedContent);
	UINT64 altBounty_tournId; _parser.parseUINT64(altBounty_tournId);
	AtfValidator::validateUint(_descr, "altBounty_tournId", altBounty_tournId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "altBounty_admission"); size_t szAltBounty_admission = strlen(_dummy);
	AtfValidator::validateInt(_descr, "altBounty_admission", szAltBounty_admission, _checker, __FILE__, __LINE__);
	INT32 altBounty_tChips; _parser.parseINT32(altBounty_tChips);
	AtfValidator::validateInt(_descr, "altBounty_tChips", altBounty_tChips, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	INT32 earlyBirdMultiplier; _parser.parseINT32(earlyBirdMultiplier);
	AtfValidator::validateInt(_descr, "earlyBirdMultiplier", earlyBirdMultiplier, _checker, __FILE__, __LINE__);
	INT32 earlyBirdMins; _parser.parseINT32(earlyBirdMins);
	AtfValidator::validateInt(_descr, "earlyBirdMins", earlyBirdMins, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	INT64 amountToHeadIfEliminated; _parser.parseINT64(amountToHeadIfEliminated);
	AtfValidator::validateInt(_descr, "amountToHeadIfEliminated", amountToHeadIfEliminated, _checker, __FILE__, __LINE__);
	INT64 baseWinIfEliminated; _parser.parseINT64(baseWinIfEliminated);
	AtfValidator::validateInt(_descr, "baseWinIfEliminated", baseWinIfEliminated, _checker, __FILE__, __LINE__);
	INT64 maxBonusWinIfEliminated; _parser.parseINT64(maxBonusWinIfEliminated);
	AtfValidator::validateInt(_descr, "maxBonusWinIfEliminated", maxBonusWinIfEliminated, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    PowerOnCard
//=================================================================

TableClientThin::publication::PowerOnCard::PowerOnCard()
{
	clear();
}

void TableClientThin::publication::PowerOnCard::clear()
{
	powerId = 0;
	powerPlayer = 0;
}

bool TableClientThin::publication::PowerOnCard::equals(const PowerOnCard& _o) const
{
	return powerId == _o.powerId &&
		powerPlayer == _o.powerPlayer;
}

const char *TableClientThin::publication::PowerOnCard::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("powerPlayer=");
	_buf.appendUint(powerPlayer);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::PowerOnCard::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PowerOnCard())) // not empty
	{
		_body.composeINT32(powerId);
		_body.composeBYTE(powerPlayer);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::PowerOnCard::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(powerId);
	_parser0.parseBYTE(powerPlayer);
}

/*static*/ void TableClientThin::publication::PowerOnCard::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT32 powerId; _parser0.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	BYTE powerPlayer; _parser0.parseBYTE(powerPlayer);
	AtfValidator::validateInt(_descr, "powerPlayer", powerPlayer, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    SubscrPlayerCard
//=================================================================

TableClientThin::publication::SubscrPlayerCard::SubscrPlayerCard()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::SubscrPlayerCard::SubscrPlayerCard(SubscrPlayerCard&& _o)
	: showFlag(std::move(_o.showFlag))
	, cardOrIndex(std::move(_o.cardOrIndex))
	, visibilityMask(std::move(_o.visibilityMask))
	, powers(std::move(_o.powers))
{
}

TableClientThin::publication::SubscrPlayerCard& TableClientThin::publication::SubscrPlayerCard::operator=(SubscrPlayerCard&& _o)
{
	if(this != &_o)
	{
		showFlag = std::move(_o.showFlag);
		cardOrIndex = std::move(_o.cardOrIndex);
		visibilityMask = std::move(_o.visibilityMask);
		powers = std::move(_o.powers);
	}
	return *this;
}

#endif

void TableClientThin::publication::SubscrPlayerCard::clear()
{
	showFlag = 0;
	cardOrIndex.clear();
	visibilityMask = 0;
	powers.clear();
}

bool TableClientThin::publication::SubscrPlayerCard::equals(const SubscrPlayerCard& _o) const
{
	return showFlag == _o.showFlag &&
		cardOrIndex.equals(_o.cardOrIndex) &&
		visibilityMask == _o.visibilityMask &&
		powers.equals(_o.powers);
}

const char *TableClientThin::publication::SubscrPlayerCard::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("showFlag=");
	_buf.appendUint(showFlag);
	_buf.append(',');
	_buf.append("cardOrIndex=");
	cardOrIndex.toTraceString(_buf);
	_buf.append(',');
	_buf.append("visibilityMask=");
	_buf.appendInt(visibilityMask);
	_buf.append(',');
	_buf.append("powers=");
	powers.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::SubscrPlayerCard::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(SubscrPlayerCard())) // not empty
	{
		_body.composeBYTE(showFlag);
		cardOrIndex.composeMsg(_body);
		_body.composeINT16(visibilityMask);
		powers.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::SubscrPlayerCard::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseBYTE(showFlag);
	cardOrIndex.parseMsg(_parser0);
	_parser0.parseINT16(visibilityMask);
	powers.parseMsg(_parser0);
}

/*static*/ void TableClientThin::publication::SubscrPlayerCard::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	BYTE showFlag; _parser0.parseBYTE(showFlag);
	AtfValidator::validateInt(_descr, "showFlag", showFlag, _checker, __FILE__, __LINE__);
	PString _descbuf;
	TableCommonThin::P_Card::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("cardOrIndex"), _fieldsWithUnparsedContent);
	INT16 visibilityMask; _parser0.parseINT16(visibilityMask);
	AtfValidator::validateInt(_descr, "visibilityMask", visibilityMask, _checker, __FILE__, __LINE__);
	int szPowers = ThinAtf::LAtfVector< PowerOnCard, 1 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("powers"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "powers", szPowers, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    TableSubscr_PlayerCards_Dict
//=================================================================

TableClientThin::publication::TableSubscr_PlayerCards_Dict::TableSubscr_PlayerCards_Dict()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TableSubscr_PlayerCards_Dict::TableSubscr_PlayerCards_Dict(TableSubscr_PlayerCards_Dict&& _o)
	: playerCards(std::move(_o.playerCards))
	, numSwapped(std::move(_o.numSwapped))
	, swapRound(std::move(_o.swapRound))
{
}

TableClientThin::publication::TableSubscr_PlayerCards_Dict& TableClientThin::publication::TableSubscr_PlayerCards_Dict::operator=(TableSubscr_PlayerCards_Dict&& _o)
{
	if(this != &_o)
	{
		playerCards = std::move(_o.playerCards);
		numSwapped = std::move(_o.numSwapped);
		swapRound = std::move(_o.swapRound);
	}
	return *this;
}

#endif

void TableClientThin::publication::TableSubscr_PlayerCards_Dict::clear()
{
	playerCards.clear();
	numSwapped = 0;
	swapRound = 0;
}

bool TableClientThin::publication::TableSubscr_PlayerCards_Dict::equals(const TableSubscr_PlayerCards_Dict& _o) const
{
	return playerCards.equals(_o.playerCards) &&
		numSwapped == _o.numSwapped &&
		swapRound == _o.swapRound;
}

const char *TableClientThin::publication::TableSubscr_PlayerCards_Dict::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("playerCards=");
	playerCards.toTraceString(_buf);
	_buf.append(',');
	_buf.append("numSwapped=");
	_buf.appendInt(numSwapped);
	_buf.append(',');
	_buf.append("swapRound=");
	_buf.appendInt(swapRound);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_PlayerCards_Dict::composeMsg(CommMsgBody& _msg) const
{
	playerCards.composeMsg(_msg);
	_msg.composeINT8(numSwapped);
	_msg.composeINT8(swapRound);
}

void TableClientThin::publication::TableSubscr_PlayerCards_Dict::parseMsg(CommMsgParser& _parser)
{
	playerCards.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseINT8(numSwapped);
	_parser.parseINT8(swapRound);
}

/*static*/ void TableClientThin::publication::TableSubscr_PlayerCards_Dict::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szPlayerCards = ThinAtf::LAtfVector< SubscrPlayerCard, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("playerCards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "playerCards", szPlayerCards, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	INT8 numSwapped; _parser.parseINT8(numSwapped);
	AtfValidator::validateInt(_descr, "numSwapped", numSwapped, _checker, __FILE__, __LINE__);
	INT8 swapRound; _parser.parseINT8(swapRound);
	AtfValidator::validateInt(_descr, "swapRound", swapRound, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TableSubscr_AllBoards
//=================================================================

TableClientThin::publication::TableSubscr_AllBoards::TableSubscr_AllBoards()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TableSubscr_AllBoards::TableSubscr_AllBoards(TableSubscr_AllBoards&& _o)
	: allBoards(std::move(_o.allBoards))
{
}

TableClientThin::publication::TableSubscr_AllBoards& TableClientThin::publication::TableSubscr_AllBoards::operator=(TableSubscr_AllBoards&& _o)
{
	if(this != &_o)
	{
		allBoards = std::move(_o.allBoards);
	}
	return *this;
}

#endif

void TableClientThin::publication::TableSubscr_AllBoards::clear()
{
	allBoards.clear();
}

bool TableClientThin::publication::TableSubscr_AllBoards::equals(const TableSubscr_AllBoards& _o) const
{
	return allBoards.equals(_o.allBoards);
}

const char *TableClientThin::publication::TableSubscr_AllBoards::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("allBoards=");
	allBoards.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_AllBoards::composeMsg(CommMsgBody& _msg) const
{
	allBoards.composeMsg(_msg);
}

void TableClientThin::publication::TableSubscr_AllBoards::parseMsg(CommMsgParser& _parser)
{
	allBoards.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::TableSubscr_AllBoards::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szAllBoards = ThinAtf::LAtfVector< TableSubscr_Board, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("allBoards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "allBoards", szAllBoards, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TableSubscr_Dynamic
//=================================================================

TableClientThin::publication::TableSubscr_Dynamic::TableSubscr_Dynamic()
{
	clear();
}

void TableClientThin::publication::TableSubscr_Dynamic::clear()
{
	numPublSubscribers = -1;
}

bool TableClientThin::publication::TableSubscr_Dynamic::equals(const TableSubscr_Dynamic& _o) const
{
	return numPublSubscribers == _o.numPublSubscribers;
}

const char *TableClientThin::publication::TableSubscr_Dynamic::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("numPublSubscribers=");
	_buf.appendInt(numPublSubscribers);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_Dynamic::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(numPublSubscribers);
}

void TableClientThin::publication::TableSubscr_Dynamic::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(numPublSubscribers);
}

/*static*/ void TableClientThin::publication::TableSubscr_Dynamic::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT32 numPublSubscribers; _parser.parseINT32(numPublSubscribers);
	AtfValidator::validateInt(_descr, "numPublSubscribers", numPublSubscribers, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TableSubscr_AutoDeal
//=================================================================

TableClientThin::publication::TableSubscr_AutoDeal::TableSubscr_AutoDeal()
{
	clear();
}

void TableClientThin::publication::TableSubscr_AutoDeal::clear()
{
	autoDealState = 0;
	numInterested = 0;
	numRemaining = 0;
}

bool TableClientThin::publication::TableSubscr_AutoDeal::equals(const TableSubscr_AutoDeal& _o) const
{
	return autoDealState == _o.autoDealState &&
		numInterested == _o.numInterested &&
		numRemaining == _o.numRemaining;
}

const char *TableClientThin::publication::TableSubscr_AutoDeal::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("autoDealState=");
	_buf.appendInt(autoDealState);
	_buf.append(',');
	_buf.append("numInterested=");
	_buf.appendInt(numInterested);
	_buf.append(',');
	_buf.append("numRemaining=");
	_buf.appendInt(numRemaining);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TableSubscr_AutoDeal::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(autoDealState);
	_msg.composeINT8(numInterested);
	_msg.composeINT8(numRemaining);
}

void TableClientThin::publication::TableSubscr_AutoDeal::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(autoDealState);
	_parser.parseINT8(numInterested);
	_parser.parseINT8(numRemaining);
}

/*static*/ void TableClientThin::publication::TableSubscr_AutoDeal::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT8 autoDealState; _parser.parseINT8(autoDealState);
	AtfValidator::validateInt(_descr, "autoDealState", autoDealState, _checker, __FILE__, __LINE__);
	INT8 numInterested; _parser.parseINT8(numInterested);
	AtfValidator::validateInt(_descr, "numInterested", numInterested, _checker, __FILE__, __LINE__);
	INT8 numRemaining; _parser.parseINT8(numRemaining);
	AtfValidator::validateInt(_descr, "numRemaining", numRemaining, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    PowerBasicInfo
//=================================================================

TableClientThin::publication::PowerBasicInfo::PowerBasicInfo()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::PowerBasicInfo::PowerBasicInfo(PowerBasicInfo&& _o)
	: powerId(std::move(_o.powerId))
	, cost(std::move(_o.cost))
	, powerName(std::move(_o.powerName))
	, desc(std::move(_o.desc))
{
}

TableClientThin::publication::PowerBasicInfo& TableClientThin::publication::PowerBasicInfo::operator=(PowerBasicInfo&& _o)
{
	if(this != &_o)
	{
		powerId = std::move(_o.powerId);
		cost = std::move(_o.cost);
		powerName = std::move(_o.powerName);
		desc = std::move(_o.desc);
	}
	return *this;
}

#endif

void TableClientThin::publication::PowerBasicInfo::clear()
{
	powerId = 0;
	cost = 0;
	powerName.clear();
	desc.clear();
}

bool TableClientThin::publication::PowerBasicInfo::equals(const PowerBasicInfo& _o) const
{
	return powerId == _o.powerId &&
		cost == _o.cost &&
		powerName.equals(_o.powerName) &&
		desc.equals(_o.desc);
}

const char *TableClientThin::publication::PowerBasicInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("cost=");
	_buf.appendInt(cost);
	_buf.append(',');
	_buf.append("powerName=");
	_buf.append(powerName);
	_buf.append(',');
	_buf.append("desc=");
	_buf.append(desc);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::PowerBasicInfo::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PowerBasicInfo())) // not empty
	{
		_body.composeINT32(powerId);
		_body.composeINT32(cost);
		_body.composeString(powerName);
		_body.composeString(desc);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::PowerBasicInfo::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(powerId);
	_parser0.parseINT32(cost);
	_parser0.parseStringP(powerName);
	_parser0.parseStringP(desc);
}

/*static*/ void TableClientThin::publication::PowerBasicInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	INT32 powerId; _parser0.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	INT32 cost; _parser0.parseINT32(cost);
	AtfValidator::validateInt(_descr, "cost", cost, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "powerName"); size_t szPowerName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "powerName", szPowerName, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "desc"); size_t szDesc = strlen(_dummy);
	AtfValidator::validateInt(_descr, "desc", szDesc, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    TablePowerSubscr_PowerList
//=================================================================

TableClientThin::publication::TablePowerSubscr_PowerList::TablePowerSubscr_PowerList()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TablePowerSubscr_PowerList::TablePowerSubscr_PowerList(TablePowerSubscr_PowerList&& _o)
	: oldPowers(std::move(_o.oldPowers))
	, maxPowersPerPlayer(std::move(_o.maxPowersPerPlayer))
	, numDiscardedPowers(std::move(_o.numDiscardedPowers))
	, powersLimitPerStreet(std::move(_o.powersLimitPerStreet))
	, powersLimitPerHand(std::move(_o.powersLimitPerHand))
	, isManaEnabled(std::move(_o.isManaEnabled))
{
}

TableClientThin::publication::TablePowerSubscr_PowerList& TableClientThin::publication::TablePowerSubscr_PowerList::operator=(TablePowerSubscr_PowerList&& _o)
{
	if(this != &_o)
	{
		oldPowers = std::move(_o.oldPowers);
		maxPowersPerPlayer = std::move(_o.maxPowersPerPlayer);
		numDiscardedPowers = std::move(_o.numDiscardedPowers);
		powersLimitPerStreet = std::move(_o.powersLimitPerStreet);
		powersLimitPerHand = std::move(_o.powersLimitPerHand);
		isManaEnabled = std::move(_o.isManaEnabled);
	}
	return *this;
}

#endif

void TableClientThin::publication::TablePowerSubscr_PowerList::clear()
{
	oldPowers.clear();
	maxPowersPerPlayer = 0;
	numDiscardedPowers = 0;
	powersLimitPerStreet = 0;
	powersLimitPerHand = 0;
	isManaEnabled = false;
}

bool TableClientThin::publication::TablePowerSubscr_PowerList::equals(const TablePowerSubscr_PowerList& _o) const
{
	return oldPowers.equals(_o.oldPowers) &&
		maxPowersPerPlayer == _o.maxPowersPerPlayer &&
		numDiscardedPowers == _o.numDiscardedPowers &&
		powersLimitPerStreet == _o.powersLimitPerStreet &&
		powersLimitPerHand == _o.powersLimitPerHand &&
		isManaEnabled == _o.isManaEnabled;
}

const char *TableClientThin::publication::TablePowerSubscr_PowerList::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("oldPowers=");
	oldPowers.toTraceString(_buf);
	_buf.append(',');
	_buf.append("maxPowersPerPlayer=");
	_buf.appendInt(maxPowersPerPlayer);
	_buf.append(',');
	_buf.append("numDiscardedPowers=");
	_buf.appendInt(numDiscardedPowers);
	_buf.append(',');
	_buf.append("powersLimitPerStreet=");
	_buf.appendInt(powersLimitPerStreet);
	_buf.append(',');
	_buf.append("powersLimitPerHand=");
	_buf.appendInt(powersLimitPerHand);
	_buf.append(',');
	_buf.append("isManaEnabled=");
	_buf.appendUint(isManaEnabled);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_PowerList::composeMsg(CommMsgBody& _msg) const
{
	oldPowers.composeMsg(_msg);
	_msg.composeINT32(maxPowersPerPlayer);
	_msg.composeINT32(numDiscardedPowers);
	_msg.composeINT32(powersLimitPerStreet);
	_msg.composeINT32(powersLimitPerHand);
	_msg.composeBOOL(isManaEnabled);
}

void TableClientThin::publication::TablePowerSubscr_PowerList::parseMsg(CommMsgParser& _parser)
{
	oldPowers.parseMsg(_parser);
	_parser.parseINT32(maxPowersPerPlayer);
	_parser.parseINT32(numDiscardedPowers);
	_parser.parseINT32(powersLimitPerStreet);
	_parser.parseINT32(powersLimitPerHand);
	_parser.parseBOOL(isManaEnabled);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_PowerList::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szOldPowers = ThinAtf::LAtfVector< PowerBasicInfo, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("oldPowers"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "oldPowers", szOldPowers, _checker, __FILE__, __LINE__);
	INT32 maxPowersPerPlayer; _parser.parseINT32(maxPowersPerPlayer);
	AtfValidator::validateInt(_descr, "maxPowersPerPlayer", maxPowersPerPlayer, _checker, __FILE__, __LINE__);
	INT32 numDiscardedPowers; _parser.parseINT32(numDiscardedPowers);
	AtfValidator::validateInt(_descr, "numDiscardedPowers", numDiscardedPowers, _checker, __FILE__, __LINE__);
	INT32 powersLimitPerStreet; _parser.parseINT32(powersLimitPerStreet);
	AtfValidator::validateInt(_descr, "powersLimitPerStreet", powersLimitPerStreet, _checker, __FILE__, __LINE__);
	INT32 powersLimitPerHand; _parser.parseINT32(powersLimitPerHand);
	AtfValidator::validateInt(_descr, "powersLimitPerHand", powersLimitPerHand, _checker, __FILE__, __LINE__);
	bool isManaEnabled; _parser.parseBOOL(isManaEnabled);
	AtfValidator::validateInt(_descr, "isManaEnabled", isManaEnabled, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TablePowerSubscr_PowerPot
//=================================================================

TableClientThin::publication::TablePowerSubscr_PowerPot::TablePowerSubscr_PowerPot()
{
	clear();
}

void TableClientThin::publication::TablePowerSubscr_PowerPot::clear()
{
	carryOverAmount = 0;
}

bool TableClientThin::publication::TablePowerSubscr_PowerPot::equals(const TablePowerSubscr_PowerPot& _o) const
{
	return carryOverAmount == _o.carryOverAmount;
}

const char *TableClientThin::publication::TablePowerSubscr_PowerPot::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("carryOverAmount=");
	_buf.appendInt(carryOverAmount);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_PowerPot::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(carryOverAmount);
}

void TableClientThin::publication::TablePowerSubscr_PowerPot::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(carryOverAmount);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_PowerPot::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT32 carryOverAmount; _parser.parseINT32(carryOverAmount);
	AtfValidator::validateInt(_descr, "carryOverAmount", carryOverAmount, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    CardRedealt
//=================================================================

TableClientThin::publication::CardRedealt::CardRedealt()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::CardRedealt::CardRedealt(CardRedealt&& _o)
	: newCard(std::move(_o.newCard))
	, oldCard(std::move(_o.oldCard))
{
}

TableClientThin::publication::CardRedealt& TableClientThin::publication::CardRedealt::operator=(CardRedealt&& _o)
{
	if(this != &_o)
	{
		newCard = std::move(_o.newCard);
		oldCard = std::move(_o.oldCard);
	}
	return *this;
}

#endif

void TableClientThin::publication::CardRedealt::clear()
{
	newCard.clear();
	oldCard.clear();
}

bool TableClientThin::publication::CardRedealt::equals(const CardRedealt& _o) const
{
	return newCard.equals(_o.newCard) &&
		oldCard.equals(_o.oldCard);
}

const char *TableClientThin::publication::CardRedealt::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("newCard=");
	newCard.toTraceString(_buf);
	_buf.append(',');
	_buf.append("oldCard=");
	oldCard.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::CardRedealt::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(CardRedealt())) // not empty
	{
		newCard.composeMsg(_body);
		oldCard.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::CardRedealt::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	newCard.parseMsg(_parser0);
	oldCard.parseMsg(_parser0);
}

/*static*/ void TableClientThin::publication::CardRedealt::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	TableCommonThin::P_Card::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("newCard"), _fieldsWithUnparsedContent);
	TableCommonThin::P_Card::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("oldCard"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    PowerInfoOnBoardCard
//=================================================================

TableClientThin::publication::PowerInfoOnBoardCard::PowerInfoOnBoardCard()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::PowerInfoOnBoardCard::PowerInfoOnBoardCard(PowerInfoOnBoardCard&& _o)
	: powers(std::move(_o.powers))
	, flag(std::move(_o.flag))
{
}

TableClientThin::publication::PowerInfoOnBoardCard& TableClientThin::publication::PowerInfoOnBoardCard::operator=(PowerInfoOnBoardCard&& _o)
{
	if(this != &_o)
	{
		powers = std::move(_o.powers);
		flag = std::move(_o.flag);
	}
	return *this;
}

#endif

void TableClientThin::publication::PowerInfoOnBoardCard::clear()
{
	powers.clear();
	flag = 0;
}

bool TableClientThin::publication::PowerInfoOnBoardCard::equals(const PowerInfoOnBoardCard& _o) const
{
	return powers.equals(_o.powers) &&
		flag == _o.flag;
}

const char *TableClientThin::publication::PowerInfoOnBoardCard::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("powers=");
	powers.toTraceString(_buf);
	_buf.append(',');
	_buf.append("flag=");
	_buf.appendInt(flag);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::PowerInfoOnBoardCard::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PowerInfoOnBoardCard())) // not empty
	{
		powers.composeMsg(_body);
		_body.composeINT8(flag);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::PowerInfoOnBoardCard::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	powers.parseMsg(_parser0);
	_parser0.parseINT8(flag);
}

/*static*/ void TableClientThin::publication::PowerInfoOnBoardCard::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	int szPowers = ThinAtf::LAtfVector< PowerOnCard, 1 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("powers"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "powers", szPowers, _checker, __FILE__, __LINE__);
	INT8 flag; _parser0.parseINT8(flag);
	AtfValidator::validateInt(_descr, "flag", flag, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    TablePowerSubscr_BoardRedealt
//=================================================================

TableClientThin::publication::TablePowerSubscr_BoardRedealt::TablePowerSubscr_BoardRedealt()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TablePowerSubscr_BoardRedealt::TablePowerSubscr_BoardRedealt(TablePowerSubscr_BoardRedealt&& _o)
	: boardCardChangesOld(std::move(_o.boardCardChangesOld))
	, board1CardsFlagsOld(std::move(_o.board1CardsFlagsOld))
	, board2CardsFlagsOld(std::move(_o.board2CardsFlagsOld))
	, boardCardsStreet(std::move(_o.boardCardsStreet))
	, board1(std::move(_o.board1))
	, board2(std::move(_o.board2))
	, maxBoardWidth(std::move(_o.maxBoardWidth))
{
}

TableClientThin::publication::TablePowerSubscr_BoardRedealt& TableClientThin::publication::TablePowerSubscr_BoardRedealt::operator=(TablePowerSubscr_BoardRedealt&& _o)
{
	if(this != &_o)
	{
		boardCardChangesOld = std::move(_o.boardCardChangesOld);
		board1CardsFlagsOld = std::move(_o.board1CardsFlagsOld);
		board2CardsFlagsOld = std::move(_o.board2CardsFlagsOld);
		boardCardsStreet = std::move(_o.boardCardsStreet);
		board1 = std::move(_o.board1);
		board2 = std::move(_o.board2);
		maxBoardWidth = std::move(_o.maxBoardWidth);
	}
	return *this;
}

#endif

void TableClientThin::publication::TablePowerSubscr_BoardRedealt::clear()
{
	boardCardChangesOld.clear();
	board1CardsFlagsOld.clear();
	board2CardsFlagsOld.clear();
	boardCardsStreet.clear();
	board1.clear();
	board2.clear();
	maxBoardWidth = 0;
}

bool TableClientThin::publication::TablePowerSubscr_BoardRedealt::equals(const TablePowerSubscr_BoardRedealt& _o) const
{
	return boardCardChangesOld.equals(_o.boardCardChangesOld) &&
		board1CardsFlagsOld.equals(_o.board1CardsFlagsOld) &&
		board2CardsFlagsOld.equals(_o.board2CardsFlagsOld) &&
		boardCardsStreet.equals(_o.boardCardsStreet) &&
		board1.equals(_o.board1) &&
		board2.equals(_o.board2) &&
		maxBoardWidth == _o.maxBoardWidth;
}

const char *TableClientThin::publication::TablePowerSubscr_BoardRedealt::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("boardCardChangesOld=");
	boardCardChangesOld.toTraceString(_buf);
	_buf.append(',');
	_buf.append("board1CardsFlagsOld=");
	board1CardsFlagsOld.toTraceString(_buf);
	_buf.append(',');
	_buf.append("board2CardsFlagsOld=");
	board2CardsFlagsOld.toTraceString(_buf);
	_buf.append(',');
	_buf.append("boardCardsStreet=");
	boardCardsStreet.toTraceString(_buf);
	_buf.append(',');
	_buf.append("board1=");
	board1.toTraceString(_buf);
	_buf.append(',');
	_buf.append("board2=");
	board2.toTraceString(_buf);
	_buf.append(',');
	_buf.append("maxBoardWidth=");
	_buf.appendUint(maxBoardWidth);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_BoardRedealt::composeMsg(CommMsgBody& _msg) const
{
	boardCardChangesOld.composeMsg(_msg);
	board1CardsFlagsOld.composeMsg(_msg);
	board2CardsFlagsOld.composeMsg(_msg);
	boardCardsStreet.composeMsg(_msg);
	board1.composeMsg(_msg);
	board2.composeMsg(_msg);
	_msg.composeBYTE(maxBoardWidth);
}

void TableClientThin::publication::TablePowerSubscr_BoardRedealt::parseMsg(CommMsgParser& _parser)
{
	boardCardChangesOld.parseMsg(_parser);
	board1CardsFlagsOld.parseMsg(_parser);
	board2CardsFlagsOld.parseMsg(_parser);
	boardCardsStreet.parseMsg(_parser);
	board1.parseMsg(_parser);
	board2.parseMsg(_parser);
	_parser.parseBYTE(maxBoardWidth);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_BoardRedealt::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szBoardCardChangesOld = ThinAtf::LAtfVector< CardRedealt, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("boardCardChangesOld"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "boardCardChangesOld", szBoardCardChangesOld, _checker, __FILE__, __LINE__);
	int szBoard1CardsFlagsOld = ThinAtf::LAtfVector< INT8, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("board1CardsFlagsOld"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "board1CardsFlagsOld", szBoard1CardsFlagsOld, _checker, __FILE__, __LINE__);
	int szBoard2CardsFlagsOld = ThinAtf::LAtfVector< INT8, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("board2CardsFlagsOld"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "board2CardsFlagsOld", szBoard2CardsFlagsOld, _checker, __FILE__, __LINE__);
	int szBoardCardsStreet = ThinAtf::LAtfVector< INT8, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("boardCardsStreet"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "boardCardsStreet", szBoardCardsStreet, _checker, __FILE__, __LINE__);
	int szBoard1 = ThinAtf::LAtfVector< PowerInfoOnBoardCard, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("board1"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "board1", szBoard1, _checker, __FILE__, __LINE__);
	int szBoard2 = ThinAtf::LAtfVector< PowerInfoOnBoardCard, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("board2"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "board2", szBoard2, _checker, __FILE__, __LINE__);
	BYTE maxBoardWidth; _parser.parseBYTE(maxBoardWidth);
	AtfValidator::validateInt(_descr, "maxBoardWidth", maxBoardWidth, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TablePowerSubscr_PlayerInfo
//=================================================================

TableClientThin::publication::TablePowerSubscr_PlayerInfo::TablePowerSubscr_PlayerInfo()
{
	clear();
}

void TableClientThin::publication::TablePowerSubscr_PlayerInfo::clear()
{
	numPowers = 0;
	currentMana = 0;
	numOfPendingSecrets = 0;
	manaRewards = 0;
}

bool TableClientThin::publication::TablePowerSubscr_PlayerInfo::equals(const TablePowerSubscr_PlayerInfo& _o) const
{
	return numPowers == _o.numPowers &&
		currentMana == _o.currentMana &&
		numOfPendingSecrets == _o.numOfPendingSecrets &&
		manaRewards == _o.manaRewards;
}

const char *TableClientThin::publication::TablePowerSubscr_PlayerInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("numPowers=");
	_buf.appendUint(numPowers);
	_buf.append(',');
	_buf.append("currentMana=");
	_buf.appendUint(currentMana);
	_buf.append(',');
	_buf.append("numOfPendingSecrets=");
	_buf.appendInt(numOfPendingSecrets);
	_buf.append(',');
	_buf.append("manaRewards=");
	_buf.appendUint(manaRewards);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_PlayerInfo::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(numPowers);
	_msg.composeUINT32(currentMana);
	_msg.composeINT8(numOfPendingSecrets);
	_msg.composeUINT32(manaRewards);
}

void TableClientThin::publication::TablePowerSubscr_PlayerInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(numPowers);
	_parser.parseUINT32(currentMana);
	_parser.parseINT8(numOfPendingSecrets);
	_parser.parseUINT32(manaRewards);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_PlayerInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	BYTE numPowers; _parser.parseBYTE(numPowers);
	AtfValidator::validateInt(_descr, "numPowers", numPowers, _checker, __FILE__, __LINE__);
	UINT32 currentMana; _parser.parseUINT32(currentMana);
	AtfValidator::validateInt(_descr, "currentMana", currentMana, _checker, __FILE__, __LINE__);
	INT8 numOfPendingSecrets; _parser.parseINT8(numOfPendingSecrets);
	AtfValidator::validateInt(_descr, "numOfPendingSecrets", numOfPendingSecrets, _checker, __FILE__, __LINE__);
	UINT32 manaRewards; _parser.parseUINT32(manaRewards);
	AtfValidator::validateInt(_descr, "manaRewards", manaRewards, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TablePowerSubscr_SilenceStateInfo
//=================================================================

TableClientThin::publication::TablePowerSubscr_SilenceStateInfo::TablePowerSubscr_SilenceStateInfo()
{
	clear();
}

void TableClientThin::publication::TablePowerSubscr_SilenceStateInfo::clear()
{
	silenceIsOn = false;
	nonSilencedSeatsMask = 0;
}

bool TableClientThin::publication::TablePowerSubscr_SilenceStateInfo::equals(const TablePowerSubscr_SilenceStateInfo& _o) const
{
	return silenceIsOn == _o.silenceIsOn &&
		nonSilencedSeatsMask == _o.nonSilencedSeatsMask;
}

const char *TableClientThin::publication::TablePowerSubscr_SilenceStateInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("silenceIsOn=");
	_buf.appendUint(silenceIsOn);
	_buf.append(',');
	_buf.append("nonSilencedSeatsMask=");
	_buf.appendInt(nonSilencedSeatsMask);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_SilenceStateInfo::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(silenceIsOn);
	_msg.composeINT16(nonSilencedSeatsMask);
}

void TableClientThin::publication::TablePowerSubscr_SilenceStateInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(silenceIsOn);
	_parser.parseINT16(nonSilencedSeatsMask);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_SilenceStateInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	bool silenceIsOn; _parser.parseBOOL(silenceIsOn);
	AtfValidator::validateInt(_descr, "silenceIsOn", silenceIsOn, _checker, __FILE__, __LINE__);
	INT16 nonSilencedSeatsMask; _parser.parseINT16(nonSilencedSeatsMask);
	AtfValidator::validateInt(_descr, "nonSilencedSeatsMask", nonSilencedSeatsMask, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TablePowerSubscr_SenseStateInfo
//=================================================================

TableClientThin::publication::TablePowerSubscr_SenseStateInfo::TablePowerSubscr_SenseStateInfo()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TablePowerSubscr_SenseStateInfo::TablePowerSubscr_SenseStateInfo(TablePowerSubscr_SenseStateInfo&& _o)
	: tokensNum(std::move(_o.tokensNum))
{
}

TableClientThin::publication::TablePowerSubscr_SenseStateInfo& TableClientThin::publication::TablePowerSubscr_SenseStateInfo::operator=(TablePowerSubscr_SenseStateInfo&& _o)
{
	if(this != &_o)
	{
		tokensNum = std::move(_o.tokensNum);
	}
	return *this;
}

#endif

void TableClientThin::publication::TablePowerSubscr_SenseStateInfo::clear()
{
	tokensNum.clear();
}

bool TableClientThin::publication::TablePowerSubscr_SenseStateInfo::equals(const TablePowerSubscr_SenseStateInfo& _o) const
{
	return tokensNum.equals(_o.tokensNum);
}

const char *TableClientThin::publication::TablePowerSubscr_SenseStateInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("tokensNum=");
	tokensNum.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_SenseStateInfo::composeMsg(CommMsgBody& _msg) const
{
	tokensNum.composeMsg(_msg);
}

void TableClientThin::publication::TablePowerSubscr_SenseStateInfo::parseMsg(CommMsgParser& _parser)
{
	tokensNum.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_SenseStateInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szTokensNum = ThinAtf::LAtfVector< INT16, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tokensNum"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "tokensNum", szTokensNum, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TablePowerSubscr_CloakedStateInfo
//=================================================================

TableClientThin::publication::TablePowerSubscr_CloakedStateInfo::TablePowerSubscr_CloakedStateInfo()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TablePowerSubscr_CloakedStateInfo::TablePowerSubscr_CloakedStateInfo(TablePowerSubscr_CloakedStateInfo&& _o)
	: cloakedSeatsNow(std::move(_o.cloakedSeatsNow))
	, cloakedSeatsPerHand(std::move(_o.cloakedSeatsPerHand))
{
}

TableClientThin::publication::TablePowerSubscr_CloakedStateInfo& TableClientThin::publication::TablePowerSubscr_CloakedStateInfo::operator=(TablePowerSubscr_CloakedStateInfo&& _o)
{
	if(this != &_o)
	{
		cloakedSeatsNow = std::move(_o.cloakedSeatsNow);
		cloakedSeatsPerHand = std::move(_o.cloakedSeatsPerHand);
	}
	return *this;
}

#endif

void TableClientThin::publication::TablePowerSubscr_CloakedStateInfo::clear()
{
	cloakedSeatsNow.clear();
	cloakedSeatsPerHand.clear();
}

bool TableClientThin::publication::TablePowerSubscr_CloakedStateInfo::equals(const TablePowerSubscr_CloakedStateInfo& _o) const
{
	return cloakedSeatsNow.equals(_o.cloakedSeatsNow) &&
		cloakedSeatsPerHand.equals(_o.cloakedSeatsPerHand);
}

const char *TableClientThin::publication::TablePowerSubscr_CloakedStateInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("cloakedSeatsNow=");
	cloakedSeatsNow.toTraceString(_buf);
	_buf.append(',');
	_buf.append("cloakedSeatsPerHand=");
	cloakedSeatsPerHand.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_CloakedStateInfo::composeMsg(CommMsgBody& _msg) const
{
	cloakedSeatsNow.composeMsg(_msg);
	cloakedSeatsPerHand.composeMsg(_msg);
}

void TableClientThin::publication::TablePowerSubscr_CloakedStateInfo::parseMsg(CommMsgParser& _parser)
{
	cloakedSeatsNow.parseMsg(_parser);
	cloakedSeatsPerHand.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_CloakedStateInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szCloakedSeatsNow = ThinAtf::LAtfVector< INT8, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cloakedSeatsNow"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cloakedSeatsNow", szCloakedSeatsNow, _checker, __FILE__, __LINE__);
	int szCloakedSeatsPerHand = ThinAtf::LAtfVector< INT8, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cloakedSeatsPerHand"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "cloakedSeatsPerHand", szCloakedSeatsPerHand, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    CardVisibility
//=================================================================

TableClientThin::publication::CardVisibility::CardVisibility()
{
	clear();
}

void TableClientThin::publication::CardVisibility::clear()
{
	seat = -1;
	position = 0;
	visibilityMask = 0;
}

bool TableClientThin::publication::CardVisibility::equals(const CardVisibility& _o) const
{
	return seat == _o.seat &&
		position == _o.position &&
		visibilityMask == _o.visibilityMask;
}

const char *TableClientThin::publication::CardVisibility::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("s=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("position=");
	_buf.appendInt(position);
	_buf.append(',');
	_buf.append("visibilityMask=");
	_buf.appendInt(visibilityMask);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::CardVisibility::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(seat);
	_msg.composeINT8(position);
	_msg.composeINT16(visibilityMask);
}

void TableClientThin::publication::CardVisibility::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(seat);
	_parser.parseINT8(position);
	_parser.parseINT16(visibilityMask);
}

/*static*/ void TableClientThin::publication::CardVisibility::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	INT8 position; _parser.parseINT8(position);
	AtfValidator::validateInt(_descr, "position", position, _checker, __FILE__, __LINE__);
	INT16 visibilityMask; _parser.parseINT16(visibilityMask);
	AtfValidator::validateInt(_descr, "visibilityMask", visibilityMask, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    SensedCardIndex
//=================================================================

TableClientThin::publication::SensedCardIndex::SensedCardIndex()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::SensedCardIndex::SensedCardIndex(SensedCardIndex&& _o)
	: cardOrIndex(std::move(_o.cardOrIndex))
	, visibilityMask(std::move(_o.visibilityMask))
	, powers(std::move(_o.powers))
{
}

TableClientThin::publication::SensedCardIndex& TableClientThin::publication::SensedCardIndex::operator=(SensedCardIndex&& _o)
{
	if(this != &_o)
	{
		cardOrIndex = std::move(_o.cardOrIndex);
		visibilityMask = std::move(_o.visibilityMask);
		powers = std::move(_o.powers);
	}
	return *this;
}

#endif

void TableClientThin::publication::SensedCardIndex::clear()
{
	cardOrIndex.clear();
	visibilityMask = 0;
	powers.clear();
}

bool TableClientThin::publication::SensedCardIndex::equals(const SensedCardIndex& _o) const
{
	return cardOrIndex.equals(_o.cardOrIndex) &&
		visibilityMask == _o.visibilityMask &&
		powers.equals(_o.powers);
}

const char *TableClientThin::publication::SensedCardIndex::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("cardOrIndex=");
	cardOrIndex.toTraceString(_buf);
	_buf.append(',');
	_buf.append("visibilityMask=");
	_buf.appendInt(visibilityMask);
	_buf.append(',');
	_buf.append("powers=");
	powers.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::SensedCardIndex::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(SensedCardIndex())) // not empty
	{
		cardOrIndex.composeMsg(_body);
		_body.composeINT16(visibilityMask);
		powers.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::SensedCardIndex::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	cardOrIndex.parseMsg(_parser0);
	_parser0.parseINT16(visibilityMask);
	powers.parseMsg(_parser0);
}

/*static*/ void TableClientThin::publication::SensedCardIndex::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	TableCommonThin::P_Card::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("cardOrIndex"), _fieldsWithUnparsedContent);
	INT16 visibilityMask; _parser0.parseINT16(visibilityMask);
	AtfValidator::validateInt(_descr, "visibilityMask", visibilityMask, _checker, __FILE__, __LINE__);
	int szPowers = ThinAtf::LAtfVector< PowerOnCard, 1 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("powers"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "powers", szPowers, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    TablePowerSubscr_CardsVisibility
//=================================================================

TableClientThin::publication::TablePowerSubscr_CardsVisibility::TablePowerSubscr_CardsVisibility()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TablePowerSubscr_CardsVisibility::TablePowerSubscr_CardsVisibility(TablePowerSubscr_CardsVisibility&& _o)
	: visInfo(std::move(_o.visInfo))
	, sensedCards(std::move(_o.sensedCards))
{
}

TableClientThin::publication::TablePowerSubscr_CardsVisibility& TableClientThin::publication::TablePowerSubscr_CardsVisibility::operator=(TablePowerSubscr_CardsVisibility&& _o)
{
	if(this != &_o)
	{
		visInfo = std::move(_o.visInfo);
		sensedCards = std::move(_o.sensedCards);
	}
	return *this;
}

#endif

void TableClientThin::publication::TablePowerSubscr_CardsVisibility::clear()
{
	visInfo.clear();
	sensedCards.clear();
}

bool TableClientThin::publication::TablePowerSubscr_CardsVisibility::equals(const TablePowerSubscr_CardsVisibility& _o) const
{
	return visInfo.equals(_o.visInfo) &&
		sensedCards.equals(_o.sensedCards);
}

const char *TableClientThin::publication::TablePowerSubscr_CardsVisibility::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("visInfo=");
	visInfo.toTraceString(_buf);
	_buf.append(',');
	_buf.append("sensedCards=");
	sensedCards.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_CardsVisibility::composeMsg(CommMsgBody& _msg) const
{
	visInfo.composeMsg(_msg);
	sensedCards.composeMsg(_msg);
}

void TableClientThin::publication::TablePowerSubscr_CardsVisibility::parseMsg(CommMsgParser& _parser)
{
	visInfo.parseMsg(_parser);
	sensedCards.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_CardsVisibility::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szVisInfo = ThinAtf::LAtfVector< CardVisibility, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("visInfo"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "visInfo", szVisInfo, _checker, __FILE__, __LINE__);
	int szSensedCards = ThinAtf::LAtfVector< SensedCardIndex, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("sensedCards"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "sensedCards", szSensedCards, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TablePowerSubscr_PowerStateInfo
//=================================================================

TableClientThin::publication::TablePowerSubscr_PowerStateInfo::TablePowerSubscr_PowerStateInfo()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TablePowerSubscr_PowerStateInfo::TablePowerSubscr_PowerStateInfo(TablePowerSubscr_PowerStateInfo&& _o)
	: powerId(std::move(_o.powerId))
	, isActive(std::move(_o.isActive))
	, playerSeat(std::move(_o.playerSeat))
	, extInfo(std::move(_o.extInfo))
{
}

TableClientThin::publication::TablePowerSubscr_PowerStateInfo& TableClientThin::publication::TablePowerSubscr_PowerStateInfo::operator=(TablePowerSubscr_PowerStateInfo&& _o)
{
	if(this != &_o)
	{
		powerId = std::move(_o.powerId);
		isActive = std::move(_o.isActive);
		playerSeat = std::move(_o.playerSeat);
		extInfo = std::move(_o.extInfo);
	}
	return *this;
}

#endif

void TableClientThin::publication::TablePowerSubscr_PowerStateInfo::clear()
{
	powerId = 0;
	isActive = false;
	playerSeat = 0;
	extInfo.clear();
}

bool TableClientThin::publication::TablePowerSubscr_PowerStateInfo::equals(const TablePowerSubscr_PowerStateInfo& _o) const
{
	return powerId == _o.powerId &&
		isActive == _o.isActive &&
		playerSeat == _o.playerSeat &&
		extInfo.equals(_o.extInfo);
}

const char *TableClientThin::publication::TablePowerSubscr_PowerStateInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("isActive=");
	_buf.appendUint(isActive);
	_buf.append(',');
	_buf.append("playerSeat=");
	_buf.appendInt(playerSeat);
	_buf.append(',');
	_buf.append("extInfo=");
	extInfo.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_PowerStateInfo::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(powerId);
	_msg.composeBOOL(isActive);
	_msg.composeINT8(playerSeat);
	_msg.composeMsgBody(extInfo);
}

void TableClientThin::publication::TablePowerSubscr_PowerStateInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(powerId);
	_parser.parseBOOL(isActive);
	_parser.parseINT8(playerSeat);
	_parser.parseMsgBody(extInfo);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_PowerStateInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT32 powerId; _parser.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	bool isActive; _parser.parseBOOL(isActive);
	AtfValidator::validateInt(_descr, "isActive", isActive, _checker, __FILE__, __LINE__);
	INT8 playerSeat; _parser.parseINT8(playerSeat);
	AtfValidator::validateInt(_descr, "playerSeat", playerSeat, _checker, __FILE__, __LINE__);
	size_t szExtInfo; _parser.skipMsgBody(szExtInfo);  /*extInfo*/
	AtfValidator::validateInt(_descr, "extInfo", szExtInfo, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    PowerIndicator
//=================================================================

TableClientThin::publication::PowerIndicator::PowerIndicator()
{
	clear();
}

void TableClientThin::publication::PowerIndicator::clear()
{
	powerId = 0;
	powerCardUniqueId = 0;
	powerPlayer = 0;
}

bool TableClientThin::publication::PowerIndicator::equals(const PowerIndicator& _o) const
{
	return powerId == _o.powerId &&
		powerCardUniqueId == _o.powerCardUniqueId &&
		powerPlayer == _o.powerPlayer;
}

const char *TableClientThin::publication::PowerIndicator::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("powerCardUniqueId=");
	_buf.appendInt(powerCardUniqueId);
	_buf.append(',');
	_buf.append("powerPlayer=");
	_buf.appendUint(powerPlayer);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::PowerIndicator::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PowerIndicator())) // not empty
	{
		_body.composeINT32(powerId);
		_body.composeINT32(powerCardUniqueId);
		_body.composeBYTE(powerPlayer);
	}

	_msg.composeMsgBody(_body);
}

void TableClientThin::publication::PowerIndicator::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(powerId);
	_parser0.parseINT32(powerCardUniqueId);
	_parser0.parseBYTE(powerPlayer);
}

/*static*/ void TableClientThin::publication::PowerIndicator::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT32 powerId; _parser0.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	INT32 powerCardUniqueId; _parser0.parseINT32(powerCardUniqueId);
	AtfValidator::validateInt(_descr, "powerCardUniqueId", powerCardUniqueId, _checker, __FILE__, __LINE__);
	BYTE powerPlayer; _parser0.parseBYTE(powerPlayer);
	AtfValidator::validateInt(_descr, "powerPlayer", powerPlayer, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    TablePowerSubscr_PowerIndicators
//=================================================================

TableClientThin::publication::TablePowerSubscr_PowerIndicators::TablePowerSubscr_PowerIndicators()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TablePowerSubscr_PowerIndicators::TablePowerSubscr_PowerIndicators(TablePowerSubscr_PowerIndicators&& _o)
	: powers(std::move(_o.powers))
{
}

TableClientThin::publication::TablePowerSubscr_PowerIndicators& TableClientThin::publication::TablePowerSubscr_PowerIndicators::operator=(TablePowerSubscr_PowerIndicators&& _o)
{
	if(this != &_o)
	{
		powers = std::move(_o.powers);
	}
	return *this;
}

#endif

void TableClientThin::publication::TablePowerSubscr_PowerIndicators::clear()
{
	powers.clear();
}

bool TableClientThin::publication::TablePowerSubscr_PowerIndicators::equals(const TablePowerSubscr_PowerIndicators& _o) const
{
	return powers.equals(_o.powers);
}

const char *TableClientThin::publication::TablePowerSubscr_PowerIndicators::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("powers=");
	powers.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_PowerIndicators::composeMsg(CommMsgBody& _msg) const
{
	powers.composeMsg(_msg);
}

void TableClientThin::publication::TablePowerSubscr_PowerIndicators::parseMsg(CommMsgParser& _parser)
{
	powers.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_PowerIndicators::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szPowers = ThinAtf::LAtfVector< PowerIndicator, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("powers"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "powers", szPowers, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TablePowerSubscr_PowerInfo
//=================================================================

TableClientThin::publication::TablePowerSubscr_PowerInfo::TablePowerSubscr_PowerInfo()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::TablePowerSubscr_PowerInfo::TablePowerSubscr_PowerInfo(TablePowerSubscr_PowerInfo&& _o)
	: powerId(std::move(_o.powerId))
	, cost(std::move(_o.cost))
	, paramBody(std::move(_o.paramBody))
{
}

TableClientThin::publication::TablePowerSubscr_PowerInfo& TableClientThin::publication::TablePowerSubscr_PowerInfo::operator=(TablePowerSubscr_PowerInfo&& _o)
{
	if(this != &_o)
	{
		powerId = std::move(_o.powerId);
		cost = std::move(_o.cost);
		paramBody = std::move(_o.paramBody);
	}
	return *this;
}

#endif

void TableClientThin::publication::TablePowerSubscr_PowerInfo::clear()
{
	powerId = 0;
	cost = 0;
	paramBody.clear();
}

bool TableClientThin::publication::TablePowerSubscr_PowerInfo::equals(const TablePowerSubscr_PowerInfo& _o) const
{
	return powerId == _o.powerId &&
		cost == _o.cost &&
		paramBody.equals(_o.paramBody);
}

const char *TableClientThin::publication::TablePowerSubscr_PowerInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("pI=");
	_buf.appendInt(powerId);
	_buf.append(',');
	_buf.append("cost=");
	_buf.appendInt(cost);
	_buf.append(',');
	_buf.append("paramBody=");
	paramBody.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_PowerInfo::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(powerId);
	_msg.composeINT32(cost);
	_msg.composeMsgBody(paramBody);
}

void TableClientThin::publication::TablePowerSubscr_PowerInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(powerId);
	_parser.parseINT32(cost);
	_parser.parseMsgBody(paramBody);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_PowerInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT32 powerId; _parser.parseINT32(powerId);
	AtfValidator::validateInt(_descr, "powerId", powerId, _checker, __FILE__, __LINE__);
	INT32 cost; _parser.parseINT32(cost);
	AtfValidator::validateInt(_descr, "cost", cost, _checker, __FILE__, __LINE__);
	size_t szParamBody; _parser.skipMsgBody(szParamBody);  /*paramBody*/
	AtfValidator::validateInt(_descr, "paramBody", szParamBody, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    TablePowerSubscr_PowerMouseOver
//=================================================================

TableClientThin::publication::TablePowerSubscr_PowerMouseOver::TablePowerSubscr_PowerMouseOver()
{
	clear();
}

void TableClientThin::publication::TablePowerSubscr_PowerMouseOver::clear()
{
	position = 0;
}

bool TableClientThin::publication::TablePowerSubscr_PowerMouseOver::equals(const TablePowerSubscr_PowerMouseOver& _o) const
{
	return position == _o.position;
}

const char *TableClientThin::publication::TablePowerSubscr_PowerMouseOver::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("position=");
	_buf.appendInt(position);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::TablePowerSubscr_PowerMouseOver::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT8(position);
}

void TableClientThin::publication::TablePowerSubscr_PowerMouseOver::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT8(position);
}

/*static*/ void TableClientThin::publication::TablePowerSubscr_PowerMouseOver::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT8 position; _parser.parseINT8(position);
	AtfValidator::validateInt(_descr, "position", position, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    ClientMsg_TxtEx_TableHistory_AllInCashout
//=================================================================

TableClientThin::publication::ClientMsg_TxtEx_TableHistory_AllInCashout::ClientMsg_TxtEx_TableHistory_AllInCashout()
{
	clear();
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_AllInCashout::clear()
{
	code = 0;
}

bool TableClientThin::publication::ClientMsg_TxtEx_TableHistory_AllInCashout::equals(const ClientMsg_TxtEx_TableHistory_AllInCashout& _o) const
{
	return code == _o.code;
}

const char *TableClientThin::publication::ClientMsg_TxtEx_TableHistory_AllInCashout::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("code=");
	_buf.appendUint(code);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_AllInCashout::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(code);
}

void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_AllInCashout::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(code);
}

/*static*/ void TableClientThin::publication::ClientMsg_TxtEx_TableHistory_AllInCashout::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	BYTE code; _parser.parseBYTE(code);
	AtfValidator::validateInt(_descr, "code", code, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    AllInCashout_PlayerCashedOut_Data
//=================================================================

TableClientThin::publication::AllInCashout_PlayerCashedOut_Data::AllInCashout_PlayerCashedOut_Data()
{
	clear();
}

void TableClientThin::publication::AllInCashout_PlayerCashedOut_Data::clear()
{
	cashoutAmount = 0;
}

bool TableClientThin::publication::AllInCashout_PlayerCashedOut_Data::equals(const AllInCashout_PlayerCashedOut_Data& _o) const
{
	return cashoutAmount == _o.cashoutAmount;
}

const char *TableClientThin::publication::AllInCashout_PlayerCashedOut_Data::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("cashoutAmount=");
	_buf.appendInt64(cashoutAmount);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::AllInCashout_PlayerCashedOut_Data::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT64(cashoutAmount);
}

void TableClientThin::publication::AllInCashout_PlayerCashedOut_Data::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT64(cashoutAmount);
}

/*static*/ void TableClientThin::publication::AllInCashout_PlayerCashedOut_Data::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT64 cashoutAmount; _parser.parseINT64(cashoutAmount);
	AtfValidator::validateInt(_descr, "cashoutAmount", cashoutAmount, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    AllInCashout_ResumingHand_Data
//=================================================================

TableClientThin::publication::AllInCashout_ResumingHand_Data::AllInCashout_ResumingHand_Data()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::publication::AllInCashout_ResumingHand_Data::AllInCashout_ResumingHand_Data(AllInCashout_ResumingHand_Data&& _o)
	: activePlayers(std::move(_o.activePlayers))
{
}

TableClientThin::publication::AllInCashout_ResumingHand_Data& TableClientThin::publication::AllInCashout_ResumingHand_Data::operator=(AllInCashout_ResumingHand_Data&& _o)
{
	if(this != &_o)
	{
		activePlayers = std::move(_o.activePlayers);
	}
	return *this;
}

#endif

void TableClientThin::publication::AllInCashout_ResumingHand_Data::clear()
{
	activePlayers.clear();
}

bool TableClientThin::publication::AllInCashout_ResumingHand_Data::equals(const AllInCashout_ResumingHand_Data& _o) const
{
	return activePlayers.equals(_o.activePlayers);
}

const char *TableClientThin::publication::AllInCashout_ResumingHand_Data::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("activePlayers=");
	activePlayers.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void TableClientThin::publication::AllInCashout_ResumingHand_Data::composeMsg(CommMsgBody& _msg) const
{
	activePlayers.composeMsg(_msg);
}

void TableClientThin::publication::AllInCashout_ResumingHand_Data::parseMsg(CommMsgParser& _parser)
{
	activePlayers.parseMsg(_parser);
}

/*static*/ void TableClientThin::publication::AllInCashout_ResumingHand_Data::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szActivePlayers = ThinAtf::AtfVector0< PString, 1 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("activePlayers"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "activePlayers", szActivePlayers, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_TABLE_IHH_GET_HANDBLOB
//=================================================================

TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB::Protocol_MSG_TABLE_IHH_GET_HANDBLOB()
{
	clear();
}

void TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB::clear()
{
	handId = 0;
}

bool TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB::equals(const Protocol_MSG_TABLE_IHH_GET_HANDBLOB& _o) const
{
	return handId == _o.handId;
}

const char *TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_IHH_GET_HANDBLOB).append(")");
	_buf.append(',');
	_buf.append("handId=");
	_buf.appendUint64(handId);
	return _buf.c_str();
}

void TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(handId);
}

void TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(handId);
}

/*static*/ void TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_IHH_GET_HANDBLOB";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT64 handId; _parser.parseUINT64(handId);
	AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY
//=================================================================

TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY(Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY&& _o)
	: errcode(std::move(_o.errcode))
	, errstr(std::move(_o.errstr))
	, handId(std::move(_o.handId))
	, zipped(std::move(_o.zipped))
	, blob(std::move(_o.blob))
{
}

TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY& TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY::operator=(Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY&& _o)
{
	if(this != &_o)
	{
		errcode = std::move(_o.errcode);
		errstr = std::move(_o.errstr);
		handId = std::move(_o.handId);
		zipped = std::move(_o.zipped);
		blob = std::move(_o.blob);
	}
	return *this;
}

#endif

void TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY::clear()
{
	errcode = 0;
	errstr.clear();
	handId = 0;
	zipped = false;
	blob.clear();
}

bool TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY::equals(const Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		handId == _o.handId &&
		zipped == _o.zipped &&
		blob.size() == _o.blob.size() && memcmp(blob.ptr(), _o.blob.ptr(), blob.size()) == 0;
}

const char *TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_IHH_GET_HANDBLOB_REPLY).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendUint(errcode);
	if(errcode)
	{
		_buf.append(',');
		_buf.append("errstr=");
		_buf.append(errstr);
	}
	else
	{
		_buf.append(',');
		_buf.append("handId=");
		_buf.appendUint64(handId);
		_buf.append(',');
		_buf.append("zipped=");
		_buf.appendUint(zipped);
		_buf.append(',');
		_buf.append("blob=");
		_buf.append("...");
	}
	return _buf.c_str();
}

void TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errcode);
	if(errcode)
	{
		_msg.composeString(errstr);
	}
	else
	{
		_msg.composeUINT64(handId);
		_msg.composeBOOL(zipped);
		_msg._composeVarBlock(blob.ptr(), blob.size());
	}
}

void TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errcode);
	if(errcode)
	{
		_parser.parseStringP(errstr);
	}
	else
	{
		_parser.parseUINT64(handId);
		_parser.parseBOOL(zipped);
		_parser.parsePBlock(blob);
	}
}

/*static*/ void TableClientThin::ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_IHH_GET_HANDBLOB_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errcode = 0;
	_parser.parseBYTE(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	if(errcode)
	{
		_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT64 handId; _parser.parseUINT64(handId);
		AtfValidator::validateUint(_descr, "handId", handId, _checker, __FILE__, __LINE__);
		bool zipped; _parser.parseBOOL(zipped);
		AtfValidator::validateInt(_descr, "zipped", zipped, _checker, __FILE__, __LINE__);
		const BYTE* blob; size_t szBlob; _parser._parseVarBlock(blob, szBlob);  /*blob*/
		AtfValidator::validateInt(_descr, "blob", szBlob, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool TableClientThin::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "ihh"))
	{
		switch(_msgId)
		{
			case MSG_TABLE_IHH_GET_HANDBLOB: ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_IHH_GET_HANDBLOB_REPLY: ihh::Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "player"))
	{
		switch(_msgId)
		{
			case MSG_TABLE_ACTION: player::Protocol_MSG_TABLE_ACTION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_ADDCHIPS: player::Protocol_MSG_TABLE_ADDCHIPS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_ADDCHIPS_AUTO_REPLY: player::Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_ADDCHIPS_REPLY: player::Protocol_MSG_TABLE_ADDCHIPS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_ADDONCHIPS: player::Protocol_MSG_TABLE_ADDONCHIPS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_ADDONCHIPS_REPLY: player::Protocol_MSG_TABLE_ADDONCHIPS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_ADMIN_INFO: player::Protocol_MSG_TABLE_ADMIN_INFO::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_ADVANCED_BET: player::Protocol_MSG_TABLE_ADVANCED_BET::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY: player::Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_BLITZ_KICK: player::Protocol_MSG_TABLE_BLITZ_KICK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_BLITZ_MTT_KICK: player::Protocol_MSG_TABLE_BLITZ_MTT_KICK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_BOUNTY_GREETINGS: player::Protocol_MSG_TABLE_BOUNTY_GREETINGS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_CANCELACTION: player::Protocol_MSG_TABLE_CANCELACTION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_CHAT2: player::Protocol_MSG_TABLE_CHAT2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_CHAT2_REPLY: player::Protocol_MSG_TABLE_CHAT2_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_CHIPSAVAIL: player::Protocol_MSG_TABLE_CHIPSAVAIL::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_CHIPSAVAIL_REPLY: player::Protocol_MSG_TABLE_CHIPSAVAIL_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_ENTROPY: player::Protocol_MSG_TABLE_ENTROPY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_FAST_FOLD: player::Protocol_MSG_TABLE_FAST_FOLD::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_FORCE_SITOUT: player::Protocol_MSG_TABLE_FORCE_SITOUT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_GET_DEAL: player::Protocol_MSG_TABLE_GET_DEAL::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_GET_DEAL_REPLY: player::Protocol_MSG_TABLE_GET_DEAL_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_GOTO_NEXTHAND: player::Protocol_MSG_TABLE_GOTO_NEXTHAND::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_HAND_RANK: player::Protocol_MSG_TABLE_HAND_RANK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS: player::Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_LOGIN: player::Protocol_MSG_TABLE_LOGIN::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_LOGIN_REPLY: player::Protocol_MSG_TABLE_LOGIN_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_LOGOUT: player::Protocol_MSG_TABLE_LOGOUT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_LOGOUT_REPLY: player::Protocol_MSG_TABLE_LOGOUT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_MTT_CHANGETABLE: player::Protocol_MSG_TABLE_MTT_CHANGETABLE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_NSTACK_RELOAD: player::Protocol_MSG_TABLE_NSTACK_RELOAD::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_NSTACK_RELOAD_REPLY: player::Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE: player::Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_PLAYNOW: player::Protocol_MSG_TABLE_PLAYNOW::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CARD_PLAY: player::Protocol_MSG_TABLE_POWER_CARD_PLAY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CARD_PLAY_REPLY: player::Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CARD_PRESELECT: player::Protocol_MSG_TABLE_POWER_CARD_PRESELECT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHANGE_FUTURE: player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHANGE_FUTURE_ACK: player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL: player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHANGE_FUTURE_REPLY: player::Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD: player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK: player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL: player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY: player::Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHOOSE_POWER_SLOTS: player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK: player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL: player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY: player::Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_DARK_BET: player::Protocol_MSG_TABLE_POWER_DARK_BET::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_DARK_BET_ACK: player::Protocol_MSG_TABLE_POWER_DARK_BET_ACK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_DARK_BET_CANCEL: player::Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_DARK_BET_REPLY: player::Protocol_MSG_TABLE_POWER_DARK_BET_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_DETECT_HOLECARDS: player::Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_MOUSE_OVER: player::Protocol_MSG_TABLE_POWER_MOUSE_OVER::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_PLAYERS_CHOICE: player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_PLAYERS_CHOICE_ACK: player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL: player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY: player::Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_POSSESSION: player::Protocol_MSG_TABLE_POWER_POSSESSION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_PRIVATE_ANIMATION: player::Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_PRIVATE_EFFECT: player::Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_REDRAW: player::Protocol_MSG_TABLE_POWER_REDRAW::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_REDRAW_ACK: player::Protocol_MSG_TABLE_POWER_REDRAW_ACK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_REDRAW_CANCEL: player::Protocol_MSG_TABLE_POWER_REDRAW_CANCEL::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_REDRAW_REPLY: player::Protocol_MSG_TABLE_POWER_REDRAW_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS: player::Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_POWER_STATUS_UPDATE: player::Protocol_MSG_TABLE_POWER_STATUS_UPDATE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_REBUYCHIPS: player::Protocol_MSG_TABLE_REBUYCHIPS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_REBUYCHIPS_REPLY: player::Protocol_MSG_TABLE_REBUYCHIPS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_REFRESH: player::Protocol_MSG_TABLE_REFRESH::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_REFRESH_REPLY: player::Protocol_MSG_TABLE_REFRESH_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_REQUESTACTION: player::Protocol_MSG_TABLE_REQUESTACTION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_REQUESTACTION_REPLY: player::Protocol_MSG_TABLE_REQUESTACTION_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SAGMAX_USER_DRAW: player::Protocol_MSG_TABLE_SAGMAX_USER_DRAW::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SET_AUTO_REBUY: player::Protocol_MSG_TABLE_SET_AUTO_REBUY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SET_AUTO_REBUY_REPLY: player::Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SET_DEAL: player::Protocol_MSG_TABLE_SET_DEAL::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE: player::Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SET_SHOW_WHEN_ALLIN: player::Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SIT1: player::Protocol_MSG_TABLE_SIT1::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SIT1_REPLY: player::Protocol_MSG_TABLE_SIT1_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SIT2: player::Protocol_MSG_TABLE_SIT2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SIT2_KICK: player::Protocol_MSG_TABLE_SIT2_KICK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SIT2_REPLY: player::Protocol_MSG_TABLE_SIT2_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SITIN: player::Protocol_MSG_TABLE_SITIN::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SITIN_REPLY: player::Protocol_MSG_TABLE_SITIN_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SITOUT: player::Protocol_MSG_TABLE_SITOUT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SITOUT_NEXTHAND: player::Protocol_MSG_TABLE_SITOUT_NEXTHAND::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SITOUT_REPLY: player::Protocol_MSG_TABLE_SITOUT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SITTING_STATUS: player::Protocol_MSG_TABLE_SITTING_STATUS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SIT_KICK: player::Protocol_MSG_TABLE_SIT_KICK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_START_CAMPING_PREVENTION: player::Protocol_MSG_TABLE_START_CAMPING_PREVENTION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_STATISTIC: player::Protocol_MSG_TABLE_STATISTIC::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_THROW: player::Protocol_MSG_TABLE_THROW::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_THROW_REPLY: player::Protocol_MSG_TABLE_THROW_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_TIMEBANK: player::Protocol_MSG_TABLE_TIMEBANK::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_USER_CHAT_BAN: player::Protocol_MSG_TABLE_USER_CHAT_BAN::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_USER_CHAT_WARN: player::Protocol_MSG_TABLE_USER_CHAT_WARN::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_USER_DICTIONARY_UPDATE: player::Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_USER_MINI_CHAT_REQUEST: player::Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE: player::Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_USER_SPECIFIC_BROADCAST: player::Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_WARNING_BELL: player::Protocol_MSG_TABLE_WARNING_BELL::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "publication"))
	{
		switch(_msgId)
		{
			case MSG_TABLE_SUBSCR_ACTION: publication::Protocol_MSG_TABLE_SUBSCR_ACTION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_ACTIVESEAT: publication::Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_ANIMATION: publication::Protocol_MSG_TABLE_SUBSCR_ANIMATION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_BEGINHAND: publication::Protocol_MSG_TABLE_SUBSCR_BEGINHAND::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_CHAT_BUBBLE: publication::Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_DEALBOARD: publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_DEALBOARD_RIT: publication::Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_DEALPLAYERCARDS: publication::Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE: publication::Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_ENDHAND: publication::Protocol_MSG_TABLE_SUBSCR_ENDHAND::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_I18N_MESSAGE: publication::Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_KNOCKOUT: publication::Protocol_MSG_TABLE_SUBSCR_KNOCKOUT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_MESSAGE: publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_MESSAGE2: publication::Protocol_MSG_TABLE_SUBSCR_MESSAGE2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_MOVEFROMPOT: publication::Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_MOVETOPOT: publication::Protocol_MSG_TABLE_SUBSCR_MOVETOPOT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_NEWGAME: publication::Protocol_MSG_TABLE_SUBSCR_NEWGAME::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_POT_DISTRIBUTION: publication::Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_POWER_PLAY: publication::Protocol_MSG_TABLE_SUBSCR_POWER_PLAY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET: publication::Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS: publication::Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE: publication::Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_SHOW_POT_WINNERS: publication::Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_SUBSCR_THROW: publication::Protocol_MSG_TABLE_SUBSCR_THROW::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_USER_MINI_CHAT_BROADCAST: publication::Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

