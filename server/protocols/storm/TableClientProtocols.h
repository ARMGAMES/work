/**
 * TableClientProtocols.h
 *
 * This file was auto-generated from TableClientProtocols.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor TableClientProtocols.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_TABLECLIENTPROTOCOLS_H
#define ATF_PROTOCOL_DEFFILE_TABLECLIENTPROTOCOLS_H

#include "table.h"
#include "brands.h"
#include "UserDefStructs.h"
#include "TableCommonStructs.h"
#include "atfgenerated/brandimgs.h"
#include "tournmilestoneprize.h"
#include "mtlobby/TournCommonStructs.h"


namespace TableClient
{
	class ProtocolFactory
	{
	public:
		static Atf::MessageProtocol* createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId);
		static bool validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	//  aliases list: (see https://confluence.pyrsoftware.ca/confluence/x/fF58Ag )
	//
	//  userId - u
	//  userIntId - uI
	//  seat - s
	//  amount - v
	//  action - a - finished here
	//  min value - mn
	//  max value - mx
	//  seqId - sq
	//  timeout - TO
	//  handId - hI
	//  tableId - tI
	//  timebank - tb
	//  handType (gameId) - gm
	//  loBet - lb
	//  hiBet- hb
	//  smallBlind - sb
	//  bigBlind - bb
	//  buyIn - bI
	//  potStruct (limit) - lm
	//  power - p
	//  powerId - pI

	struct PubBoardCardPosition
	{
		// 11 - boardNumber,cardNumber
		INT8 boardNumber;	// 0..2
		INT8 cardNumber;	// 0..6

		PubBoardCardPosition();
		void clear();
		bool equals(const PubBoardCardPosition&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		// @Override
		PubBoardCardPosition(int boardNum_, int cardNum_);
	};

	struct P_PlayerCardShown
	{
		// 111 - suit,rank,shown
		char suit;
		BYTE rank;
		BYTE shown;

		P_PlayerCardShown();
		void clear();
		bool equals(const P_PlayerCardShown&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct P_PlayerBetOption
	{
		// 14 - act,amount
		char act;
		UINT32 amount;	//alias v

		P_PlayerBetOption();
		void clear();
		bool equals(const P_PlayerBetOption&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct P_PlayerRequestAction
	{
		// 14444 - action,amountMin,amountMax,amountStep,chipQuantum
		char action;	//alias a
		UINT32 amountMin;	//alias vMn
		UINT32 amountMax;	//alias vMx
		UINT32 amountStep;	//alias vStep
		UINT32 chipQuantum;

		P_PlayerRequestAction();
		void clear();
		bool equals(const P_PlayerRequestAction&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		// @Override
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;

		// @Override
		void parseMsg(CommMsgParser& _parser);
	};

	struct P_SuscrPlayerCards
	{
		// 11 - seat,numOfCards
		INT8 seat;	//alias s
		BYTE numOfCards;

		P_SuscrPlayerCards();
		void clear();
		bool equals(const P_SuscrPlayerCards&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct P_PotInfo
	{
		// 14 - seat,amount
		INT8 seat;	//alias s
		UINT32 amount;	//alias v

		P_PotInfo();
		void clear();
		bool equals(const P_PotInfo&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct P_BOUNTY_GREETINGS
	{
		// 4s - amount,bountyLoser
		UINT32 amount;	//alias v
		PString bountyLoser;

		P_BOUNTY_GREETINGS();
		void clear();
		bool equals(const P_BOUNTY_GREETINGS&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		P_BOUNTY_GREETINGS(P_BOUNTY_GREETINGS&&);
		P_BOUNTY_GREETINGS& operator=(P_BOUNTY_GREETINGS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		P_BOUNTY_GREETINGS(const P_BOUNTY_GREETINGS&) = default;
		P_BOUNTY_GREETINGS& operator=(const P_BOUNTY_GREETINGS&) = default;
#endif
#endif
	};

	struct CardWithPosition
	{
		//! 1 <FIXME>TableCommon::P_Card</FIXME>  - pos, <FIXME>card</FIXME> 
		BYTE pos;
		TableCommon::P_Card card;

		CardWithPosition();
		void clear();
		bool equals(const CardWithPosition&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		CardWithPosition(CardWithPosition&&);
		CardWithPosition& operator=(CardWithPosition&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		CardWithPosition(const CardWithPosition&) = default;
		CardWithPosition& operator=(const CardWithPosition&) = default;
#endif
#endif
	};

	struct CardInfo
	{
		//! 11 <FIXME>TableCommon::P_Card</FIXME>  - playerOrboard,pos, <FIXME>card</FIXME> 
		INT8 playerOrboard;	// 0-9: player seat, -1: board number before RIT starts, -2: first board, -3: second board
		BYTE pos;
		TableCommon::P_Card card;

		CardInfo();
		void clear();
		bool equals(const CardInfo&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		CardInfo(CardInfo&&);
		CardInfo& operator=(CardInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		CardInfo(const CardInfo&) = default;
		CardInfo& operator=(const CardInfo&) = default;
#endif
#endif
	};

	struct CardInfoBody
	{
		//! M(11 <FIXME>TableCommon::P_Card</FIXME> ) - M(playerOrboard,pos, <FIXME>card</FIXME> )
		CardInfo c;

		CardInfoBody();
		void clear();
		bool equals(const CardInfoBody&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		CardInfoBody(CardInfoBody&&);
		CardInfoBody& operator=(CardInfoBody&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		CardInfoBody(const CardInfoBody&) = default;
		CardInfoBody& operator=(const CardInfoBody&) = default;
#endif
#endif
	};

	struct TotalBetInfo
	{
		// M(88) - M(sumOfBets,netWon)
		INT64 sumOfBets;
		INT64 netWon;

		TotalBetInfo();
		void clear();
		bool equals(const TotalBetInfo&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	namespace player
	{
		struct ClientMsg_TxtEx_NSF	// TODO: is this name okay?
		{
			// 24b14sbM()M() - msgId,minLimit,enoughMoneyInOtherCurrencies,clientServiceFlag,chips,currency,useAutoConvertBuyin,M(),M()
			UINT16 msgId;
			INT32 minLimit;
			bool enoughMoneyInOtherCurrencies;
			BYTE clientServiceFlag;
			INT32 chips;
			PString currency;
			bool useAutoConvertBuyin;
			Atf::CopyableMsgBody clientCurrencyContextShort;
			Atf::CopyableMsgBody rebuyOrAddonData;

			ClientMsg_TxtEx_NSF();
			void clear();
			bool equals(const ClientMsg_TxtEx_NSF&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientMsg_TxtEx_NSF(ClientMsg_TxtEx_NSF&&);
			ClientMsg_TxtEx_NSF& operator=(ClientMsg_TxtEx_NSF&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientMsg_TxtEx_NSF(const ClientMsg_TxtEx_NSF&) = default;
			ClientMsg_TxtEx_NSF& operator=(const ClientMsg_TxtEx_NSF&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_LOGIN : public Atf::MessageProtocol
		{
			// s4bbb - user,clientSiteId,notShowWhenAllIn,sitOutNextHand,useAllInitStacks
			PString user;	//alias u	// obsoleted by PYR-80360
			UINT32 clientSiteId;	//alias site	// obsoleted by PYR-80360
			bool notShowWhenAllIn;	//alias nshown	// obsoleted by PYR-43014
			bool sitOutNextHand;	//alias sitout
			bool useAllInitStacks;	//alias allstacks

			Protocol_MSG_TABLE_LOGIN();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_LOGIN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_LOGIN; }
			const char *getMsgIdString() const override { return "LGN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_LOGIN(Protocol_MSG_TABLE_LOGIN&&);
			Protocol_MSG_TABLE_LOGIN& operator=(Protocol_MSG_TABLE_LOGIN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_LOGIN(const Protocol_MSG_TABLE_LOGIN&) = default;
			Protocol_MSG_TABLE_LOGIN& operator=(const Protocol_MSG_TABLE_LOGIN&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_LOGIN_REPLY : public Atf::MessageProtocol
		{
			// 1s11s4M()1222bbb2b8 - errcode,errstr,seat,sittingStatus,clientIP,waitingStatus,M(),autoRebuyOptions,autoRebuyBigBets,autoRebuyFallUnderBigBets,autoRebuyFallUnderPercents,playerRITFavored,campingPreventionEnabled,isTableDealingHands,campingCountingDownSec,allinCashoutNotFavored,progressivePlusEntryId
			BYTE errcode;
			PString errstr;
			INT8 seat;	//alias s
			BYTE sittingStatus;	//alias ss
			PString clientIP;	//alias ip
			UINT32 waitingStatus;	//alias ws
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m
			INT8 autoRebuyOptions;	//alias ar
			UINT16 autoRebuyBigBets;	//alias arBB
			UINT16 autoRebuyFallUnderBigBets;	//alias arFBB
			UINT16 autoRebuyFallUnderPercents;	//alias arFPct
			bool playerRITFavored;	//alias rit
			bool campingPreventionEnabled;	//alias camping
			bool isTableDealingHands;	//alias dealing
			UINT16 campingCountingDownSec;	//alias campSecs
			bool allinCashoutNotFavored;	//alias nco
			UINT64 progressivePlusEntryId;	//alias pppEId

			Protocol_MSG_TABLE_LOGIN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_LOGIN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_LOGIN_REPLY; }
			const char *getMsgIdString() const override { return "LGNR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_LOGIN_REPLY(Protocol_MSG_TABLE_LOGIN_REPLY&&);
			Protocol_MSG_TABLE_LOGIN_REPLY& operator=(Protocol_MSG_TABLE_LOGIN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_LOGIN_REPLY(const Protocol_MSG_TABLE_LOGIN_REPLY&) = default;
			Protocol_MSG_TABLE_LOGIN_REPLY& operator=(const Protocol_MSG_TABLE_LOGIN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_LOGOUT : public Atf::MessageProtocol
		{
			// dummy message

			Protocol_MSG_TABLE_LOGOUT();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_LOGOUT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_LOGOUT; }
			const char *getMsgIdString() const override { return "LGO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_LOGOUT_REPLY : public Atf::MessageProtocol
		{
			// 1sM(88) - errcode,errstr,M(sumOfBets,netWon)
			BYTE errcode;
			PString errstr;
			TotalBetInfo totalBetInfo;	// dummy for tourn

			Protocol_MSG_TABLE_LOGOUT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_LOGOUT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_LOGOUT_REPLY; }
			const char *getMsgIdString() const override { return "LGOR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_LOGOUT_REPLY(Protocol_MSG_TABLE_LOGOUT_REPLY&&);
			Protocol_MSG_TABLE_LOGOUT_REPLY& operator=(Protocol_MSG_TABLE_LOGOUT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_LOGOUT_REPLY(const Protocol_MSG_TABLE_LOGOUT_REPLY&) = default;
			Protocol_MSG_TABLE_LOGOUT_REPLY& operator=(const Protocol_MSG_TABLE_LOGOUT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE : public Atf::MessageProtocol
		{
			// b444<4> - eligible,numPlayedHands,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>
			bool eligible;
			INT32 numPlayedHands;
			INT32 poolBlockMinHands;
			Atf::LAtfVector< INT32, 4 > poolBlockTimePenalty;

			Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE; }
			const char *getMsgIdString() const override { return "PBU"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE(Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE&&);
			Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE& operator=(Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE(const Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE&) = default;
			Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE& operator=(const Protocol_MSG_TABLE_USER_POOL_BLOCK_STATE_UPDATE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SIT1 : public Atf::MessageProtocol
		{
			// 14 - seat,verifyKey
			INT8 seat;	//alias s	// default -1 // max 9 removed due to a client bug (client sends -1) described in PYR-59403
			UINT32 verifyKey;	// not limited

			Protocol_MSG_TABLE_SIT1();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SIT1&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SIT1; }
			const char *getMsgIdString() const override { return "SIT1"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SIT1_REPLY : public Atf::MessageProtocol
		{
			// 1s44441411M()M()4484 - errcode,errUser,chips,minLimit,maxLimit,chipQuantum,playAddedMask,playAddedAmount,seat,clientServiceFlag,M(),M(),defaultBuyIn,ratHoleInSec,pmChips,userRollId
			BYTE errcode;
			PString errUser;
			UINT32 chips;
			UINT32 minLimit;	//alias mnLim
			UINT32 maxLimit;	//alias mxLim
			UINT32 chipQuantum;	//alias cq
			BYTE playAddedMask;
			UINT32 playAddedAmount;
			INT8 seat;	//alias s
			BYTE clientServiceFlag;	//alias csf
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m
			Atf::CopyableMsgBody currencyContextCli;	//alias currency
			UINT32 defaultBuyIn;	//alias defaultBi
			UINT32 ratHoleInSec;	//alias rh
			UINT64 pmChips;
			UINT32 userRollId;

			Protocol_MSG_TABLE_SIT1_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SIT1_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SIT1_REPLY; }
			const char *getMsgIdString() const override { return "SIT1R"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SIT1_REPLY(Protocol_MSG_TABLE_SIT1_REPLY&&);
			Protocol_MSG_TABLE_SIT1_REPLY& operator=(Protocol_MSG_TABLE_SIT1_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SIT1_REPLY(const Protocol_MSG_TABLE_SIT1_REPLY&) = default;
			Protocol_MSG_TABLE_SIT1_REPLY& operator=(const Protocol_MSG_TABLE_SIT1_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SIT2 : public Atf::MessageProtocol
		{
			// 4s1222b4bb - chips,pwd,autoRebuyOpt,autoRebuyBigBets,autoRebuyFallUnderBigBets,autoRebuyFallUnderPercents,notShowWhenAllIn,realMoneyChips,runItTwice,allinCashoutNotFavored
			INT32 chips;
			PString pwd;
			INT8 autoRebuyOpt;	//alias ar
			UINT16 autoRebuyBigBets;	//alias arBB
			UINT16 autoRebuyFallUnderBigBets;	//alias arFBB
			UINT16 autoRebuyFallUnderPercents;	//alias arFPct
			bool notShowWhenAllIn;	//alias nshown
			UINT32 realMoneyChips;	//alias rmChips	// not used in Table server side
			bool runItTwice;	//alias rit
			bool allinCashoutNotFavored;	//alias nco

			Protocol_MSG_TABLE_SIT2();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SIT2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SIT2; }
			const char *getMsgIdString() const override { return "SIT2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SIT2(Protocol_MSG_TABLE_SIT2&&);
			Protocol_MSG_TABLE_SIT2& operator=(Protocol_MSG_TABLE_SIT2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SIT2(const Protocol_MSG_TABLE_SIT2&) = default;
			Protocol_MSG_TABLE_SIT2& operator=(const Protocol_MSG_TABLE_SIT2&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SIT2_REPLY : public Atf::MessageProtocol
		{
			// 1s14M()44 - errcode,errstr,sittingStatus,waitingStatus,M(),numOfSeats,chipsAfter
			BYTE errcode;
			PString errstr;
			BYTE sittingStatus;	//alias ss
			UINT32 waitingStatus;	//alias ws
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m
			UINT32 numOfSeats;	//alias sz
			INT32 chipsAfter;

			Protocol_MSG_TABLE_SIT2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SIT2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SIT2_REPLY; }
			const char *getMsgIdString() const override { return "SIT2R"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SIT2_REPLY(Protocol_MSG_TABLE_SIT2_REPLY&&);
			Protocol_MSG_TABLE_SIT2_REPLY& operator=(Protocol_MSG_TABLE_SIT2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SIT2_REPLY(const Protocol_MSG_TABLE_SIT2_REPLY&) = default;
			Protocol_MSG_TABLE_SIT2_REPLY& operator=(const Protocol_MSG_TABLE_SIT2_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_TIMEBANK : public Atf::MessageProtocol
		{
			// 4b - timeBank,hasChipsPosted
			UINT32 timeBank;	//alias tb
			bool hasChipsPosted;	// MSG_TABLE_TIMEBANK could be inport or output messages, they differ

			Protocol_MSG_TABLE_TIMEBANK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_TIMEBANK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_TIMEBANK; }
			const char *getMsgIdString() const override { return "TB"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_WARNING_BELL : public Atf::MessageProtocol
		{
			// 4 - delaySec
			INT32 delaySec;

			Protocol_MSG_TABLE_WARNING_BELL();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_WARNING_BELL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_WARNING_BELL; }
			const char *getMsgIdString() const override { return "BEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_REQUESTACTION : public Atf::MessageProtocol
		{
			//!  <FIXME>vector01<P_PlayerRequestAction></FIXME> 44b4 -  <FIXME>actionOpts</FIXME> ,actionReqSeq,timeoutSec,isNewGame,gameRound
			Atf::AtfVector0< P_PlayerRequestAction, 1 > actionOpts;	//alias aOpts
			UINT32 actionReqSeq;	//alias seq
			INT32 timeoutSec;	//alias TO
			bool isNewGame;	//alias ng
			INT32 gameRound;

			Protocol_MSG_TABLE_REQUESTACTION();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_REQUESTACTION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_REQUESTACTION; }
			const char *getMsgIdString() const override { return "ARQ"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_REQUESTACTION(Protocol_MSG_TABLE_REQUESTACTION&&);
			Protocol_MSG_TABLE_REQUESTACTION& operator=(Protocol_MSG_TABLE_REQUESTACTION&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_REQUESTACTION(const Protocol_MSG_TABLE_REQUESTACTION&) = default;
			Protocol_MSG_TABLE_REQUESTACTION& operator=(const Protocol_MSG_TABLE_REQUESTACTION&) = default;
#endif
#endif
		};

		//Message MSG_TABLE_PLAYERCARDS  // never logging   // client starts to retire this message in 2019 Main.02
		//{
		//	vector01<P_PlayerCardShown> playerCards;
		//	UINT32 specialServClient;
		//	UINT64 handId alias hI;
		//};

		//Message MSG_TABLE_PLAYERCARDS_DRAWSETS DRW   // client starts to retire this message in 2019 Main.02
		//{
		//	UINT64 handId alias hI;
		//	BYTE numSets;
		//	CommMsgBody	cardSetMsg;
		//
		//	@Override void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const  // @no_thin_version
		//	{
		//		_msg.composeUINT64(handId);
		//		_msg.composeBYTE(numSets);
		//		_msg.merge(cardSetMsg);
		//	}
		//

		//	{
		//		_msg.composeUINT64(handId);
		//		_msg.composeBYTE(numSets);
		//		_msg.merge(cardSetMsg);
		//	}
		//
		//	@Override void parseMsg(CommMsgParser& _parser)
		//	{
		//		_parser.parseUINT64(handId);
		//		_parser.parseBYTE(numSets);
		//		cardSetMsg.copyMsgBodyFromParser(_parser);
		//		_parser.skip(cardSetMsg._size());
		//	}
		//};

		struct Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY : public Atf::MessageProtocol
		{
			// 1s4M()4 - errcode,errstr,chipsAdded,M(),italyReservedChips
			BYTE errcode;
			PString errstr;
			UINT32 chipsAdded;
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m
			UINT32 italyReservedChips;	//alias reserved

			Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_ADDCHIPS_AUTO_REPLY; }
			const char *getMsgIdString() const override { return "ADDCHIPSAUTOR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY(Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY&&);
			Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY& operator=(Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY(const Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY&) = default;
			Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY& operator=(const Protocol_MSG_TABLE_ADDCHIPS_AUTO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_FORCE_SITOUT : public Atf::MessageProtocol
		{
			// 1s1M() - errcode,errstr,sittingStatus,M()
			BYTE errcode;
			PString errstr;
			BYTE sittingStatus;
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m

			Protocol_MSG_TABLE_FORCE_SITOUT();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_FORCE_SITOUT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_FORCE_SITOUT; }
			const char *getMsgIdString() const override { return "MSG_TABLE_FORCE_SITOUT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_FORCE_SITOUT(Protocol_MSG_TABLE_FORCE_SITOUT&&);
			Protocol_MSG_TABLE_FORCE_SITOUT& operator=(Protocol_MSG_TABLE_FORCE_SITOUT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_FORCE_SITOUT(const Protocol_MSG_TABLE_FORCE_SITOUT&) = default;
			Protocol_MSG_TABLE_FORCE_SITOUT& operator=(const Protocol_MSG_TABLE_FORCE_SITOUT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_ADVANCED_BET : public Atf::MessageProtocol
		{
			//!  <FIXME>vector01<P_PlayerBetOption></FIXME>  -  <FIXME>betOptions</FIXME> 
			Atf::AtfVector0< P_PlayerBetOption, 1 > betOptions;

			Protocol_MSG_TABLE_ADVANCED_BET();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_ADVANCED_BET&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_ADVANCED_BET; }
			const char *getMsgIdString() const override { return "ADB"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_ADVANCED_BET(Protocol_MSG_TABLE_ADVANCED_BET&&);
			Protocol_MSG_TABLE_ADVANCED_BET& operator=(Protocol_MSG_TABLE_ADVANCED_BET&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_ADVANCED_BET(const Protocol_MSG_TABLE_ADVANCED_BET&) = default;
			Protocol_MSG_TABLE_ADVANCED_BET& operator=(const Protocol_MSG_TABLE_ADVANCED_BET&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_STATISTIC : public Atf::MessageProtocol
		{
			// 44484 - statistic,earnedVPP,mileStoneAward,handId,vppThisHand
			UINT32 statistic;
			UINT32 earnedVPP;
			UINT32 mileStoneAward;
			UINT64 handId;	//alias hI
			UINT32 vppThisHand;

			Protocol_MSG_TABLE_STATISTIC();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_STATISTIC&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_STATISTIC; }
			const char *getMsgIdString() const override { return "STS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_HAND_RANK : public Atf::MessageProtocol	// nver logged
		{
			//! ss11s11< <FIXME>TableCommon::P_Card </FIXME> >1< <FIXME>TableCommon::P_Card </FIXME> >1< <FIXME>TableCommon::P_Card </FIXME> >s11< <FIXME>TableCommon::P_Card </FIXME> > - strHi,strLo,bestHigh,bestLow,strHi2,bestHigh2,numCardsHigh< <FIXME>TableCommon::P_Card </FIXME> >,numCardsLow< <FIXME>TableCommon::P_Card </FIXME> >,numCardsHigh2< <FIXME>TableCommon::P_Card </FIXME> >,strLo2,bestLow2,numCardsLow2< <FIXME>TableCommon::P_Card </FIXME> >
			PString strHi;
			PString strLo;
			BYTE bestHigh;
			BYTE bestLow;
			PString strHi2;
			BYTE bestHigh2;
			Atf::LAtfVector< TableCommon::P_Card , 1 > cardsHigh;
			Atf::LAtfVector< TableCommon::P_Card , 1 > cardsLow;
			Atf::LAtfVector< TableCommon::P_Card , 1 > cardsHigh2;
			PString strLo2;
			BYTE bestLow2;
			Atf::LAtfVector< TableCommon::P_Card , 1 > cardsLow2;

			Protocol_MSG_TABLE_HAND_RANK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_HAND_RANK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_HAND_RANK; }
			const char *getMsgIdString() const override { return "MSG_TABLE_HAND_RANK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_HAND_RANK(Protocol_MSG_TABLE_HAND_RANK&&);
			Protocol_MSG_TABLE_HAND_RANK& operator=(Protocol_MSG_TABLE_HAND_RANK&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_HAND_RANK(const Protocol_MSG_TABLE_HAND_RANK&) = default;
			Protocol_MSG_TABLE_HAND_RANK& operator=(const Protocol_MSG_TABLE_HAND_RANK&) = default;
#endif
#endif
		};

		//Message MSG_TABLE_FOLDCARDS  // never logged
		//{
		//	vector01< TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::P_Card > msgCards;
		//};

		struct Protocol_MSG_TABLE_ADDCHIPS : public Atf::MessageProtocol
		{
			// 44 - chips,realMoneyChips
			INT32 chips;
			INT32 realMoneyChips;

			Protocol_MSG_TABLE_ADDCHIPS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_ADDCHIPS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_ADDCHIPS; }
			const char *getMsgIdString() const override { return "ADDCHIPS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_ADDCHIPS_REPLY : public Atf::MessageProtocol
		{
			// 1sM()4 - errcode,errstr,M(),italyReservedChips
			BYTE errcode;
			PString errstr;
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m
			UINT32 italyReservedChips;	//alias reserved

			Protocol_MSG_TABLE_ADDCHIPS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_ADDCHIPS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_ADDCHIPS_REPLY; }
			const char *getMsgIdString() const override { return "ADDCHIPSR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_ADDCHIPS_REPLY(Protocol_MSG_TABLE_ADDCHIPS_REPLY&&);
			Protocol_MSG_TABLE_ADDCHIPS_REPLY& operator=(Protocol_MSG_TABLE_ADDCHIPS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_ADDCHIPS_REPLY(const Protocol_MSG_TABLE_ADDCHIPS_REPLY&) = default;
			Protocol_MSG_TABLE_ADDCHIPS_REPLY& operator=(const Protocol_MSG_TABLE_ADDCHIPS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_REBUYCHIPS : public Atf::MessageProtocol
		{
			// 2 - numRebuys
			INT16 numRebuys;

			Protocol_MSG_TABLE_REBUYCHIPS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_REBUYCHIPS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_REBUYCHIPS; }
			const char *getMsgIdString() const override { return "REBUYCHIPS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_REBUYCHIPS_REPLY : public Atf::MessageProtocol
		{
			//! 1[sM()|4444444s822244444 <FIXME>TournCommon::TournSpendLimit</FIXME> ] - errcode[errstr,M()|chips,money,pChips,fppTaken,tChips,wChips,infoType,info,pChips64,rebuysDone,addonsDone,rebuysLeft,finalFlightTournId,moneyAfter,realMoney,realTChips,tChipsAfter, <FIXME>tournSpendLimit</FIXME> ]
			BYTE errcode;

			PString errstr;
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m

			UINT32 chips;
			UINT32 money;
			UINT32 pChips;
			UINT32 fppTaken;
			UINT32 tChips;
			UINT32 wChips;
			UINT32 infoType;	// 1==AAMS ticket
			PString info;
			UINT64 pChips64;
			UINT16 rebuysDone;
			UINT16 addonsDone;
			INT16 rebuysLeft;
			UINT32 finalFlightTournId;
			INT32 moneyAfter;
			INT32 realMoney;
			INT32 realTChips;
			INT32 tChipsAfter;
			TournCommon::TournSpendLimit tournSpendLimit;

			Protocol_MSG_TABLE_REBUYCHIPS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_REBUYCHIPS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_REBUYCHIPS_REPLY; }
			const char *getMsgIdString() const override { return "REBUYCHIPSR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_REBUYCHIPS_REPLY(Protocol_MSG_TABLE_REBUYCHIPS_REPLY&&);
			Protocol_MSG_TABLE_REBUYCHIPS_REPLY& operator=(Protocol_MSG_TABLE_REBUYCHIPS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_REBUYCHIPS_REPLY(const Protocol_MSG_TABLE_REBUYCHIPS_REPLY&) = default;
			Protocol_MSG_TABLE_REBUYCHIPS_REPLY& operator=(const Protocol_MSG_TABLE_REBUYCHIPS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_ADDONCHIPS : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_TABLE_ADDONCHIPS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_ADDONCHIPS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_ADDONCHIPS; }
			const char *getMsgIdString() const override { return "ADDON"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_ADDONCHIPS_REPLY : public Atf::MessageProtocol
		{
			//! 1[sM()|4444444s822244444 <FIXME>TournCommon::TournSpendLimit</FIXME> ] - errcode[errstr,M()|chips,money,pChips,fppTaken,tChips,wChips,infoType,info,pChips64,rebuysDone,addonsDone,rebuysLeft,finalFlightTournId,moneyAfter,realMoney,realTChips,tChipsAfter, <FIXME>tournSpendLimit</FIXME> ]
			BYTE errcode;

			PString errstr;
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m

			UINT32 chips;
			UINT32 money;
			UINT32 pChips;
			UINT32 fppTaken;
			UINT32 tChips;
			UINT32 wChips;
			UINT32 infoType;	// 1==AAMS ticket
			PString info;
			UINT64 pChips64;
			UINT16 rebuysDone;
			UINT16 addonsDone;
			INT16 rebuysLeft;
			UINT32 finalFlightTournId;
			INT32 moneyAfter;
			INT32 realMoney;
			INT32 realTChips;
			INT32 tChipsAfter;
			TournCommon::TournSpendLimit tournSpendLimit;

			Protocol_MSG_TABLE_ADDONCHIPS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_ADDONCHIPS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_ADDONCHIPS_REPLY; }
			const char *getMsgIdString() const override { return "ADDONR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_ADDONCHIPS_REPLY(Protocol_MSG_TABLE_ADDONCHIPS_REPLY&&);
			Protocol_MSG_TABLE_ADDONCHIPS_REPLY& operator=(Protocol_MSG_TABLE_ADDONCHIPS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_ADDONCHIPS_REPLY(const Protocol_MSG_TABLE_ADDONCHIPS_REPLY&) = default;
			Protocol_MSG_TABLE_ADDONCHIPS_REPLY& operator=(const Protocol_MSG_TABLE_ADDONCHIPS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_CHAT2 : public Atf::MessageProtocol
		{
			// s - chat
			PString chat;

			Protocol_MSG_TABLE_CHAT2();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_CHAT2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_CHAT2; }
			const char *getMsgIdString() const override { return "CHAT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_CHAT2(Protocol_MSG_TABLE_CHAT2&&);
			Protocol_MSG_TABLE_CHAT2& operator=(Protocol_MSG_TABLE_CHAT2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_CHAT2(const Protocol_MSG_TABLE_CHAT2&) = default;
			Protocol_MSG_TABLE_CHAT2& operator=(const Protocol_MSG_TABLE_CHAT2&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_CHAT2_REPLY : public Atf::MessageProtocol
		{
			// 2M()s - errcode,M(),chatmsg
			UINT16 errcode;
			Atf::CopyableMsgBody errMsgBody;
			PString chatmsg;

			Protocol_MSG_TABLE_CHAT2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_CHAT2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_CHAT2_REPLY; }
			const char *getMsgIdString() const override { return "CHATR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_CHAT2_REPLY(Protocol_MSG_TABLE_CHAT2_REPLY&&);
			Protocol_MSG_TABLE_CHAT2_REPLY& operator=(Protocol_MSG_TABLE_CHAT2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_CHAT2_REPLY(const Protocol_MSG_TABLE_CHAT2_REPLY&) = default;
			Protocol_MSG_TABLE_CHAT2_REPLY& operator=(const Protocol_MSG_TABLE_CHAT2_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SITIN : public Atf::MessageProtocol
		{
			// 48b - flags,flagsEx,isPlayMoney
			UINT32 flags;	// not used in table server; no limit
			UINT64 flagsEx;	// not used in table server; no limit
			bool isPlayMoney;	//alias pm	// not used in table server

			Protocol_MSG_TABLE_SITIN();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SITIN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SITIN; }
			const char *getMsgIdString() const override { return "SITIN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SITIN_REPLY : public Atf::MessageProtocol
		{
			// 1s14M() - errcode,errstr,sittingStatus,waitingStatus,M()
			BYTE errcode;
			PString errstr;
			BYTE sittingStatus;	//alias ss
			UINT32 waitingStatus;	//alias ws
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m

			Protocol_MSG_TABLE_SITIN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SITIN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SITIN_REPLY; }
			const char *getMsgIdString() const override { return "SITINR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SITIN_REPLY(Protocol_MSG_TABLE_SITIN_REPLY&&);
			Protocol_MSG_TABLE_SITIN_REPLY& operator=(Protocol_MSG_TABLE_SITIN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SITIN_REPLY(const Protocol_MSG_TABLE_SITIN_REPLY&) = default;
			Protocol_MSG_TABLE_SITIN_REPLY& operator=(const Protocol_MSG_TABLE_SITIN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SITOUT : public Atf::MessageProtocol
		{
			// 48b - userFlags,userFlagsEx,isPlayMoney
			UINT32 userFlags;	// no limit
			UINT64 userFlagsEx;	//no limit
			bool isPlayMoney;

			Protocol_MSG_TABLE_SITOUT();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SITOUT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SITOUT; }
			const char *getMsgIdString() const override { return "SITOUT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SITOUT_REPLY : public Atf::MessageProtocol
		{
			// 1s12 - errcode,errstr,sittingStatus,campingCountingDownSec
			BYTE errcode;
			PString errstr;
			BYTE sittingStatus;	//alias ss
			UINT16 campingCountingDownSec;	//alias campSecs

			Protocol_MSG_TABLE_SITOUT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SITOUT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SITOUT_REPLY; }
			const char *getMsgIdString() const override { return "SITOUTR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SITOUT_REPLY(Protocol_MSG_TABLE_SITOUT_REPLY&&);
			Protocol_MSG_TABLE_SITOUT_REPLY& operator=(Protocol_MSG_TABLE_SITOUT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SITOUT_REPLY(const Protocol_MSG_TABLE_SITOUT_REPLY&) = default;
			Protocol_MSG_TABLE_SITOUT_REPLY& operator=(const Protocol_MSG_TABLE_SITOUT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SITOUT_NEXTHAND : public Atf::MessageProtocol
		{
			// 1 - checked
			BYTE checked;	// treated as bool, no limits

			Protocol_MSG_TABLE_SITOUT_NEXTHAND();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SITOUT_NEXTHAND&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SITOUT_NEXTHAND; }
			const char *getMsgIdString() const override { return "SITOUTNH"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_CHIPSAVAIL : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_TABLE_CHIPSAVAIL();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_CHIPSAVAIL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_CHIPSAVAIL; }
			const char *getMsgIdString() const override { return "CHIPSAVAIL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_CHIPSAVAIL_REPLY : public Atf::MessageProtocol
		{
			// 1s4444144M()M()44484 - errcode,errstr,chips,minLimit,maxLimit,quantum,playAddedMask,playAddedAmount,chipsHandStart,M(),M(),ratHoleSeconds,maxRebuyChips_It,totalRebuys_It,pmChips,userRollId
			BYTE errcode;
			PString errstr;
			UINT32 chips;
			UINT32 minLimit;	//alias mnLim
			UINT32 maxLimit;	//alias mxLim
			UINT32 quantum;	//alias q
			BYTE playAddedMask;	//alias mask
			UINT32 playAddedAmount;	//alias amt
			UINT32 chipsHandStart;	//alias chipsHS
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m
			Atf::CopyableMsgBody currencyContext;	//alias currency
			UINT32 ratHoleSeconds;	//alias rh
			UINT32 maxRebuyChips_It;	//alias maxRebuy
			UINT32 totalRebuys_It;	//alias totRebuy
			UINT64 pmChips;	//PYR-23052
			UINT32 userRollId;	//alias rId

			Protocol_MSG_TABLE_CHIPSAVAIL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_CHIPSAVAIL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_CHIPSAVAIL_REPLY; }
			const char *getMsgIdString() const override { return "CHIPSAVAILR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_CHIPSAVAIL_REPLY(Protocol_MSG_TABLE_CHIPSAVAIL_REPLY&&);
			Protocol_MSG_TABLE_CHIPSAVAIL_REPLY& operator=(Protocol_MSG_TABLE_CHIPSAVAIL_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_CHIPSAVAIL_REPLY(const Protocol_MSG_TABLE_CHIPSAVAIL_REPLY&) = default;
			Protocol_MSG_TABLE_CHIPSAVAIL_REPLY& operator=(const Protocol_MSG_TABLE_CHIPSAVAIL_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SET_AUTO_REBUY : public Atf::MessageProtocol
		{
			// 1222 - autoRebuyOpt,bigBets,underBigBets,underPercents
			INT8 autoRebuyOpt;	//alias ar
			UINT16 bigBets;	//alias arBB
			UINT16 underBigBets;	//alias arFBB
			UINT16 underPercents;	//alias arFPcnt

			Protocol_MSG_TABLE_SET_AUTO_REBUY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SET_AUTO_REBUY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SET_AUTO_REBUY; }
			const char *getMsgIdString() const override { return "SETAREBUY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY : public Atf::MessageProtocol
		{
			// 1 - errcode
			BYTE errcode;

			Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SET_AUTO_REBUY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SET_AUTO_REBUY_REPLY; }
			const char *getMsgIdString() const override { return "SETAREBUYR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN : public Atf::MessageProtocol
		{
			// b - notAllInShowAllowed
			bool notAllInShowAllowed;	//alias opt

			Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SET_SHOW_WHEN_ALLIN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SET_SHOW_WHEN_ALLIN; }
			const char *getMsgIdString() const override { return "SETALLIN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SET_DEAL : public Atf::MessageProtocol
		{
			// b - setOptions
			bool setOptions;	//alias opt

			Protocol_MSG_TABLE_SET_DEAL();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SET_DEAL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SET_DEAL; }
			const char *getMsgIdString() const override { return "SETDEAL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE : public Atf::MessageProtocol
		{
			// bb - runItTwice,allinCashoutNotFavored
			bool runItTwice;	//alias rit
			bool allinCashoutNotFavored;	//alias nco

			Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SET_RUN_IT_TWICE_AND_MORE; }
			const char *getMsgIdString() const override { return "SETRIT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_REQUESTACTION_REPLY : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_TABLE_REQUESTACTION_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_REQUESTACTION_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_REQUESTACTION_REPLY; }
			const char *getMsgIdString() const override { return "ARQR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_FAST_FOLD : public Atf::MessageProtocol
		{
			// 81 - handId,flags
			UINT64 handId;	//alias hI	// not limited
			BYTE flags;	// not limited

			Protocol_MSG_TABLE_FAST_FOLD();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_FAST_FOLD&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_FAST_FOLD; }
			const char *getMsgIdString() const override { return "FASTFOLD"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_GOTO_NEXTHAND : public Atf::MessageProtocol
		{
			// 8 - handId
			UINT64 handId;	//alias hI	// not limited

			Protocol_MSG_TABLE_GOTO_NEXTHAND();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_GOTO_NEXTHAND&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_GOTO_NEXTHAND; }
			const char *getMsgIdString() const override { return "GNEXTH"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_REFRESH : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_TABLE_REFRESH();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_REFRESH&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_REFRESH; }
			const char *getMsgIdString() const override { return "REFRESH"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_REFRESH_REPLY : public Atf::MessageProtocol
		{
			// 4 - italyReservedChips
			UINT32 italyReservedChips;

			Protocol_MSG_TABLE_REFRESH_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_REFRESH_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_REFRESH_REPLY; }
			const char *getMsgIdString() const override { return "REFRESH_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_PLAYNOW : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_TABLE_PLAYNOW();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_PLAYNOW&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_PLAYNOW; }
			const char *getMsgIdString() const override { return "PLAYNOW"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_ENTROPY : public Atf::MessageProtocol	// never logged
		{
			// v - enthropy
			PBlock enthropy;

			Protocol_MSG_TABLE_ENTROPY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_ENTROPY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_ENTROPY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_ENTROPY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_ENTROPY(Protocol_MSG_TABLE_ENTROPY&&);
			Protocol_MSG_TABLE_ENTROPY& operator=(Protocol_MSG_TABLE_ENTROPY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_ENTROPY(const Protocol_MSG_TABLE_ENTROPY&) = default;
			Protocol_MSG_TABLE_ENTROPY& operator=(const Protocol_MSG_TABLE_ENTROPY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_GET_DEAL : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_TABLE_GET_DEAL();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_GET_DEAL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_GET_DEAL; }
			const char *getMsgIdString() const override { return "GETDEAL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_GET_DEAL_REPLY : public Atf::MessageProtocol
		{
			// b - dealOptionSet
			bool dealOptionSet;

			Protocol_MSG_TABLE_GET_DEAL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_GET_DEAL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_GET_DEAL_REPLY; }
			const char *getMsgIdString() const override { return "GETDEALR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_ACTION : public Atf::MessageProtocol
		{
			// 1441 - action,amount,actionId,flags
			char action;	//alias a	// 0x20 represents ' '
			UINT32 amount;	//alias v
			UINT32 actionId;	//alias seq	// id not limited
			BYTE flags;

			Protocol_MSG_TABLE_ACTION();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_ACTION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			UINT32 getMsgId() const override { return MSG_TABLE_ACTION; }
			const char *getMsgIdString() const override { return "ACT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

			// @Override
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = true) const override;
		};

		struct Protocol_MSG_TABLE_CANCELACTION : public Atf::MessageProtocol
		{
			// 1sb - errcode,errstr,isActionTimedOut
			BYTE errcode;
			PString errstr;
			bool isActionTimedOut;	//alias to	// non-storm table server won't compose this field

			Protocol_MSG_TABLE_CANCELACTION();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_CANCELACTION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_CANCELACTION; }
			const char *getMsgIdString() const override { return "CXACT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_CANCELACTION(Protocol_MSG_TABLE_CANCELACTION&&);
			Protocol_MSG_TABLE_CANCELACTION& operator=(Protocol_MSG_TABLE_CANCELACTION&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_CANCELACTION(const Protocol_MSG_TABLE_CANCELACTION&) = default;
			Protocol_MSG_TABLE_CANCELACTION& operator=(const Protocol_MSG_TABLE_CANCELACTION&) = default;
#endif
#endif
		};

		struct TournPlayerKickMsgExtraShared
		{
			//! s4[ <FIXME>TableCommon::P_ScheduledTournament</FIXME> ]4 - socialToken,nextRecurringTournId[ <FIXME>nextSchedTourn</FIXME> ],headBounty
			PString socialToken;	//alias token
			UINT32 nextRecurringTournId;	//alias nextId

			TableCommon::P_ScheduledTournament nextSchedTourn;

			UINT32 headBounty;

			TournPlayerKickMsgExtraShared();
			void clear();
			bool equals(const TournPlayerKickMsgExtraShared&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournPlayerKickMsgExtraShared(TournPlayerKickMsgExtraShared&&);
			TournPlayerKickMsgExtraShared& operator=(TournPlayerKickMsgExtraShared&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournPlayerKickMsgExtraShared(const TournPlayerKickMsgExtraShared&) = default;
			TournPlayerKickMsgExtraShared& operator=(const TournPlayerKickMsgExtraShared&) = default;
#endif
#endif
		};

		struct TableSitKickMsgEx	// will be composed into clientMsg_txtEx msgbody
		{
			//! 2 <FIXME_COND_IF> s4[ <FIXME>TableCommon::P_ScheduledTournament</FIXME> ]4s44 <FIXME_COND_ELSE> 4s4[ <FIXME>TableCommon::P_ScheduledTournament</FIXME> ]4s44 <FIXME_COND_ELSE> 4sIs44 <FIXME_COND_ELSE> 4ss4[ <FIXME>TableCommon::P_ScheduledTournament</FIXME> ]4s44 <FIXME_COND_ELSE> 4sss44 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 4 <FIXME_COND_ENDIF> 4t444 - msgId <FIXME_COND_IF> ,socialToken,nextRecurringTournId[ <FIXME>nextSchedTourn</FIXME> ],headBounty,str_popup,msgServiceBitMask,award <FIXME_COND_ELSE> ,placeI,socialToken,nextRecurringTournId[ <FIXME>nextSchedTourn</FIXME> ],headBounty,str_popup,msgServiceBitMask,award <FIXME_COND_ELSE> ,tournId,nextFlightTargetServer,nextFlightTournName,str_popup,msgServiceBitMask,award <FIXME_COND_ELSE> ,placeI,str_popup,socialToken,nextRecurringTournId[ <FIXME>nextSchedTourn</FIXME> ],headBounty,str_popup2,msgServiceBitMask,award <FIXME_COND_ELSE> ,placeI,str_popup,socialToken,str_popup2,msgServiceBitMask,award <FIXME_COND_ELSE> ,numMissedOrbits <FIXME_COND_ELSE> ,numMissedOrbits <FIXME_COND_ENDIF> ,bounty,reEntryDeadline,chips,targetChips,progressivePlusInitialBuyInTierId
			UINT16 msgId;

			TournPlayerKickMsgExtraShared tpkes;
			PString str_popup;
			UINT32 msgServiceBitMask;
			INT32 award;

			UINT32 placeI;

			UINT32 tournId;
			PString nextFlightTargetServer;
			I18nPString nextFlightTournName;

			PString str_popup2;	// duplicated version of str_popup

			PString socialToken;
			// duplicated version of str_popup

			INT32 numMissedOrbits;

			//else if( msgId == ClientMsg_Action_Kicked_MultiGame)
			//{
			// empty
			//}
			//else if( msgId == ClientMsg_Kick_GeoIP_Unknown )
			//{
			// empty
			//}
			//else if( msgId == ClientMsg_Kick_Action_Kicked_ByAdmin )
			//{
			// empty
			//}
			//else if( msgId == ClientMsg_Kick_Action_Kicked_ByAdmin_Silent )
			//{
			// empty
			//}
			//else if( msgId == ClientMsg_Player_Kick_Camping_Timeout )
			//{
			// empty
			//}
			//else if( msgId == ClientMsg_Player_Kick_No_Blind_Posted )
			//{
			// empty
			//}

			INT32 bounty;
			SrvTime reEntryDeadline;	// PYR-50362
			INT32 chips;	// PYR-103089
			INT32 targetChips;	// PYR-103089
			UINT32 progressivePlusInitialBuyInTierId;	// PYR-123713

			TableSitKickMsgEx();
			void clear();
			bool equals(const TableSitKickMsgEx&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSitKickMsgEx(TableSitKickMsgEx&&);
			TableSitKickMsgEx& operator=(TableSitKickMsgEx&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSitKickMsgEx(const TableSitKickMsgEx&) = default;
			TableSitKickMsgEx& operator=(const TableSitKickMsgEx&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SIT_KICK : public Atf::MessageProtocol
		{
			// sM()M(88)b - kickstr,M(),M(sumOfBets,netWon),forceCloseTable
			PString kickstr;

			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m

			TotalBetInfo totalBetInfo;	// dummy for tourn
			bool forceCloseTable;

			Protocol_MSG_TABLE_SIT_KICK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SIT_KICK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SIT_KICK; }
			const char *getMsgIdString() const override { return "SITKICK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SIT_KICK(Protocol_MSG_TABLE_SIT_KICK&&);
			Protocol_MSG_TABLE_SIT_KICK& operator=(Protocol_MSG_TABLE_SIT_KICK&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SIT_KICK(const Protocol_MSG_TABLE_SIT_KICK&) = default;
			Protocol_MSG_TABLE_SIT_KICK& operator=(const Protocol_MSG_TABLE_SIT_KICK&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SIT2_KICK : public Atf::MessageProtocol
		{
			// sM() - kickstr,M()
			PString kickstr;
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m

			Protocol_MSG_TABLE_SIT2_KICK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SIT2_KICK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SIT2_KICK; }
			const char *getMsgIdString() const override { return "SIT2KICK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SIT2_KICK(Protocol_MSG_TABLE_SIT2_KICK&&);
			Protocol_MSG_TABLE_SIT2_KICK& operator=(Protocol_MSG_TABLE_SIT2_KICK&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SIT2_KICK(const Protocol_MSG_TABLE_SIT2_KICK&) = default;
			Protocol_MSG_TABLE_SIT2_KICK& operator=(const Protocol_MSG_TABLE_SIT2_KICK&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_MTT_CHANGETABLE : public Atf::MessageProtocol
		{
			// 1s - errcode,msg
			BYTE errcode;
			PString msg;

			Protocol_MSG_TABLE_MTT_CHANGETABLE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_MTT_CHANGETABLE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_MTT_CHANGETABLE; }
			const char *getMsgIdString() const override { return "CHGTBL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_MTT_CHANGETABLE(Protocol_MSG_TABLE_MTT_CHANGETABLE&&);
			Protocol_MSG_TABLE_MTT_CHANGETABLE& operator=(Protocol_MSG_TABLE_MTT_CHANGETABLE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_MTT_CHANGETABLE(const Protocol_MSG_TABLE_MTT_CHANGETABLE&) = default;
			Protocol_MSG_TABLE_MTT_CHANGETABLE& operator=(const Protocol_MSG_TABLE_MTT_CHANGETABLE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_ADMIN_INFO : public Atf::MessageProtocol
		{
			// sM() - errstr,M()
			PString errstr;
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m

			Protocol_MSG_TABLE_ADMIN_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_ADMIN_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_ADMIN_INFO; }
			const char *getMsgIdString() const override { return "MSG_TABLE_ADMIN_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_ADMIN_INFO(Protocol_MSG_TABLE_ADMIN_INFO&&);
			Protocol_MSG_TABLE_ADMIN_INFO& operator=(Protocol_MSG_TABLE_ADMIN_INFO&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_ADMIN_INFO(const Protocol_MSG_TABLE_ADMIN_INFO&) = default;
			Protocol_MSG_TABLE_ADMIN_INFO& operator=(const Protocol_MSG_TABLE_ADMIN_INFO&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SAGMAX_USER_DRAW : public Atf::MessageProtocol
		{
			// 4 - action
			INT32 action;	//alias a

			Protocol_MSG_TABLE_SAGMAX_USER_DRAW();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SAGMAX_USER_DRAW&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SAGMAX_USER_DRAW; }
			const char *getMsgIdString() const override { return "SAGDRAW"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SITTING_STATUS : public Atf::MessageProtocol
		{
			// 1 - sittingStatus
			BYTE sittingStatus;	//alias ss

			Protocol_MSG_TABLE_SITTING_STATUS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SITTING_STATUS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SITTING_STATUS; }
			const char *getMsgIdString() const override { return "SS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_BOUNTY_GREETINGS : public Atf::MessageProtocol
		{
			//!  <FIXME>vector04<P_BOUNTY_GREETINGS></FIXME> 4 -  <FIXME>vec</FIXME> ,goldenSngBountyStub
			Atf::AtfVector0< P_BOUNTY_GREETINGS, 4 > vec;
			UINT32 goldenSngBountyStub;	// obsolete

			Protocol_MSG_TABLE_BOUNTY_GREETINGS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_BOUNTY_GREETINGS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_BOUNTY_GREETINGS; }
			const char *getMsgIdString() const override { return "BNTY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_BOUNTY_GREETINGS(Protocol_MSG_TABLE_BOUNTY_GREETINGS&&);
			Protocol_MSG_TABLE_BOUNTY_GREETINGS& operator=(Protocol_MSG_TABLE_BOUNTY_GREETINGS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_BOUNTY_GREETINGS(const Protocol_MSG_TABLE_BOUNTY_GREETINGS&) = default;
			Protocol_MSG_TABLE_BOUNTY_GREETINGS& operator=(const Protocol_MSG_TABLE_BOUNTY_GREETINGS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_START_CAMPING_PREVENTION : public Atf::MessageProtocol
		{
			// 21 - campingTimeOut,sittingStatus
			UINT16 campingTimeOut;	//alias campingTO
			BYTE sittingStatus;	//alias ss

			Protocol_MSG_TABLE_START_CAMPING_PREVENTION();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_START_CAMPING_PREVENTION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_START_CAMPING_PREVENTION; }
			const char *getMsgIdString() const override { return "STCAMP"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY : public Atf::MessageProtocol
		{
			// 4 - stacksReloaded
			UINT32 stacksReloaded;

			Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_AUTO_RELOAD_STACKS_NOTIFY; }
			const char *getMsgIdString() const override { return "ARSTACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS : public Atf::MessageProtocol
		{
			// 4 - unusedStacks
			INT32 unusedStacks;

			Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_INVITE_CHOOSE_STARTING_STACKS; }
			const char *getMsgIdString() const override { return "CHSSTACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_NSTACK_RELOAD : public Atf::MessageProtocol
		{
			// 4 - reqStacks
			UINT32 reqStacks;	//alias s

			Protocol_MSG_TABLE_NSTACK_RELOAD();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_NSTACK_RELOAD&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_NSTACK_RELOAD; }
			const char *getMsgIdString() const override { return "RLDSTACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY : public Atf::MessageProtocol
		{
			// 1[sM()|4] - errcode[errDesc,M()|unusedStacks]
			BYTE errcode;

			PString errDesc;
			Atf::CopyableMsgBody errMsgBody;

			INT32 unusedStacks;

			Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_NSTACK_RELOAD_REPLY; }
			const char *getMsgIdString() const override { return "RLDSTACKR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY(Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY&&);
			Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY& operator=(Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY(const Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY&) = default;
			Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY& operator=(const Protocol_MSG_TABLE_NSTACK_RELOAD_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_BLITZ_MTT_KICK : public Atf::MessageProtocol
		{
			// b24124 - sittingIn,rebuyLeft,rebuyTimeout,limboAction,actionAmount,actionTimeout
			bool sittingIn;
			UINT16 rebuyLeft;
			UINT32 rebuyTimeout;	//alias rebuyTO
			BYTE limboAction;
			UINT16 actionAmount;	//alias actAmount
			UINT32 actionTimeout;	//alias actTO

			Protocol_MSG_TABLE_BLITZ_MTT_KICK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_BLITZ_MTT_KICK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_BLITZ_MTT_KICK; }
			const char *getMsgIdString() const override { return "BMKICK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct PlayerNotifI18NMsg
		{
			// I4 - str,msgSeqId
			I18nPString str;
			UINT32 msgSeqId;	//alias msgSq

			PlayerNotifI18NMsg();
			void clear();
			bool equals(const PlayerNotifI18NMsg&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

			// @Override
			bool operator<( const PlayerNotifI18NMsg& other ) const;

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PlayerNotifI18NMsg(PlayerNotifI18NMsg&&);
			PlayerNotifI18NMsg& operator=(PlayerNotifI18NMsg&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PlayerNotifI18NMsg(const PlayerNotifI18NMsg&) = default;
			PlayerNotifI18NMsg& operator=(const PlayerNotifI18NMsg&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST : public Atf::MessageProtocol
		{
			// 4<I4> - numNotifs<str,msgSeqId>
			Atf::LAtfVector< PlayerNotifI18NMsg, 4 > notifs;

			Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_USER_SPECIFIC_BROADCAST; }
			const char *getMsgIdString() const override { return "USERSPEC"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST(Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST&&);
			Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST& operator=(Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST(const Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST&) = default;
			Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST& operator=(const Protocol_MSG_TABLE_USER_SPECIFIC_BROADCAST&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_USER_CHAT_WARN : public Atf::MessageProtocol
		{
			// 2s - warnMsgId,chat
			UINT16 warnMsgId;
			PString chat;

			Protocol_MSG_TABLE_USER_CHAT_WARN();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_USER_CHAT_WARN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_USER_CHAT_WARN; }
			const char *getMsgIdString() const override { return "CHATWARN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_USER_CHAT_WARN(Protocol_MSG_TABLE_USER_CHAT_WARN&&);
			Protocol_MSG_TABLE_USER_CHAT_WARN& operator=(Protocol_MSG_TABLE_USER_CHAT_WARN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_USER_CHAT_WARN(const Protocol_MSG_TABLE_USER_CHAT_WARN&) = default;
			Protocol_MSG_TABLE_USER_CHAT_WARN& operator=(const Protocol_MSG_TABLE_USER_CHAT_WARN&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_USER_CHAT_BAN : public Atf::MessageProtocol
		{
			// 24 - banMsgId,banTimeMins
			UINT16 banMsgId;
			INT32 banTimeMins;

			Protocol_MSG_TABLE_USER_CHAT_BAN();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_USER_CHAT_BAN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_USER_CHAT_BAN; }
			const char *getMsgIdString() const override { return "CHATBAN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct HoleCardSnapshot
		{
			//! M(11< <FIXME>TableCommon::CardDictionaryItem</FIXME> >) - M(round,numHoleCards< <FIXME>TableCommon::CardDictionaryItem</FIXME> >)
			INT8 round;
			Atf::LAtfVector< TableCommon::CardDictionaryItem, 1 > holeCards;

			HoleCardSnapshot();
			void clear();
			bool equals(const HoleCardSnapshot&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			HoleCardSnapshot(HoleCardSnapshot&&);
			HoleCardSnapshot& operator=(HoleCardSnapshot&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			HoleCardSnapshot(const HoleCardSnapshot&) = default;
			HoleCardSnapshot& operator=(const HoleCardSnapshot&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE : public Atf::MessageProtocol	// never logged
		{
			//! 81< <FIXME>TableCommon::CardDictionaryItem</FIXME> >1< <FIXME>TableCommon::CardDictionaryItem</FIXME> >1<M(11< <FIXME>TableCommon::CardDictionaryItem</FIXME> >)> - handId,numMyHoleCards< <FIXME>TableCommon::CardDictionaryItem</FIXME> >,numOtherCards< <FIXME>TableCommon::CardDictionaryItem</FIXME> >,numOldHoleCards<M(round,numHoleCards< <FIXME>TableCommon::CardDictionaryItem</FIXME> >)>
			UINT64 handId;	//alias hI
			Atf::LAtfVector< TableCommon::CardDictionaryItem, 1 > myHoleCards;
			Atf::LAtfVector< TableCommon::CardDictionaryItem, 1 > otherCards;	// could be the old hole cards mapping or sensed cards in power-up
			Atf::LAtfVector< HoleCardSnapshot, 1 > oldHoleCards;	// for draw or swap game (empty if no card drawn)

			Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE; }
			const char *getMsgIdString() const override { return "MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE(Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE&&);
			Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE& operator=(Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE(const Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE&) = default;
			Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE& operator=(const Protocol_MSG_TABLE_PLAYER_CARD_DICTIONARY_UPDATE&) = default;
#endif
#endif
		};

		struct UserDictionaryItem
		{
			//! M(ss <FIXME>BrandProt::BrandImageList</FIXME> ) - M(alias,userId, <FIXME>img</FIXME> )
			PString alias;
			PString userId;
			BrandProt::BrandImageList img;

			UserDictionaryItem();
			void clear();
			bool equals(const UserDictionaryItem&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UserDictionaryItem(UserDictionaryItem&&);
			UserDictionaryItem& operator=(UserDictionaryItem&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UserDictionaryItem(const UserDictionaryItem&) = default;
			UserDictionaryItem& operator=(const UserDictionaryItem&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE : public Atf::MessageProtocol
		{
			//! 84<M(ss <FIXME>BrandProt::BrandImageList</FIXME> )> - handId,numUsers<M(alias,userId, <FIXME>img</FIXME> )>
			UINT64 handId;	// currently not used
			Atf::LAtfVector< UserDictionaryItem, 4 > users;

			Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_USER_DICTIONARY_UPDATE; }
			const char *getMsgIdString() const override { return "MSG_TABLE_USER_DICTIONARY_UPDATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE(Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE&&);
			Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE& operator=(Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE(const Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE&) = default;
			Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE& operator=(const Protocol_MSG_TABLE_USER_DICTIONARY_UPDATE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_BLITZ_KICK : public Atf::MessageProtocol
		{
			// 8444 - handId,statistcs,chips,kickUserFlags
			UINT64 handId;	//alias hI
			UINT32 statistcs;	//alias stat
			UINT32 chips;
			UINT32 kickUserFlags;	//alias flags

			Protocol_MSG_TABLE_BLITZ_KICK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_BLITZ_KICK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_BLITZ_KICK; }
			const char *getMsgIdString() const override { return "BKICK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//=====================================

		struct Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS : public Atf::MessageProtocol
		{
			// 444114<4> - powerActionSeqId,powerId,timerInterval,minPowersChosen,maxPowersChosen,numPowers<powers>
			UINT32 powerActionSeqId;	//alias pasq
			INT32 powerId;	//alias pI
			UINT32 timerInterval;
			BYTE minPowersChosen;
			BYTE maxPowersChosen;
			Atf::LAtfVector< INT32 , 4 > powers;

			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHOOSE_POWER_SLOTS; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHOOSE_POWER_SLOTS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS(Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS&&);
			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS& operator=(Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS&) = default;
			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS& operator=(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK : public Atf::MessageProtocol
		{
			// 4 - powerActionSeqId
			UINT32 powerActionSeqId;	//alias pasq

			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY : public Atf::MessageProtocol
		{
			// 44<4> - powerActionSeqId,numPowersChosen<powersChosen>
			UINT32 powerActionSeqId;	//alias pasq
			Atf::LAtfVector< INT32 , 4 > powersChosen;

			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY(Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY&&);
			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY& operator=(Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY&) = default;
			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY& operator=(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL : public Atf::MessageProtocol
		{
			// 4 - powerActionSeqId
			UINT32 powerActionSeqId;	//alias pasq

			Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHOOSE_POWER_SLOTS_CANCEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct PowerInfoBody
		{
			// M(444) - M(powerId,status,powerCardUniqueId)
			INT32 powerId;	//alias pI
			UINT32 status;
			INT32 powerCardUniqueId;	//alias puId

			PowerInfoBody();
			void clear();
			bool equals(const PowerInfoBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_POSSESSION : public Atf::MessageProtocol
		{
			// 4<M(444)> - numPowers<M(powerId,status,powerCardUniqueId)>
			Atf::LAtfVector< PowerInfoBody , 4 > powers;

			Protocol_MSG_TABLE_POWER_POSSESSION();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_POSSESSION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_POSSESSION; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_POSSESSION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_POSSESSION(Protocol_MSG_TABLE_POWER_POSSESSION&&);
			Protocol_MSG_TABLE_POWER_POSSESSION& operator=(Protocol_MSG_TABLE_POWER_POSSESSION&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_POSSESSION(const Protocol_MSG_TABLE_POWER_POSSESSION&) = default;
			Protocol_MSG_TABLE_POWER_POSSESSION& operator=(const Protocol_MSG_TABLE_POWER_POSSESSION&) = default;
#endif
#endif
		};

		struct PowerStatus
		{
			// M(444) - M(powerId,newStatus,powerCardUniqueId)
			INT32 powerId;	//alias pI
			UINT32 newStatus;	//alias ns
			INT32 powerCardUniqueId;	//alias puId

			PowerStatus();
			void clear();
			bool equals(const PowerStatus&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_STATUS_UPDATE : public Atf::MessageProtocol
		{
			// 4<M(444)> - numUpdates<M(powerId,newStatus,powerCardUniqueId)>
			Atf::LAtfVector< PowerStatus, 4 > updates;

			Protocol_MSG_TABLE_POWER_STATUS_UPDATE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_STATUS_UPDATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_STATUS_UPDATE; }
			const char *getMsgIdString() const override { return "T_POW_SU"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_STATUS_UPDATE(Protocol_MSG_TABLE_POWER_STATUS_UPDATE&&);
			Protocol_MSG_TABLE_POWER_STATUS_UPDATE& operator=(Protocol_MSG_TABLE_POWER_STATUS_UPDATE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_STATUS_UPDATE(const Protocol_MSG_TABLE_POWER_STATUS_UPDATE&) = default;
			Protocol_MSG_TABLE_POWER_STATUS_UPDATE& operator=(const Protocol_MSG_TABLE_POWER_STATUS_UPDATE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD : public Atf::MessageProtocol
		{
			//! 444111< <FIXME>TableCommon::P_Card </FIXME> > - powerActionSeqId,powerId,timerInterval,minCardsChosen,maxCardsChosen,numHoleCards< <FIXME>TableCommon::P_Card </FIXME> >
			UINT32 powerActionSeqId;	//alias pasq
			INT32 powerId;	//alias pI
			UINT32 timerInterval;
			BYTE minCardsChosen;
			BYTE maxCardsChosen;
			Atf::LAtfVector< TableCommon::P_Card , 1 > holeCards;

			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD(Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD&&);
			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD& operator=(Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD&) = default;
			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD& operator=(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK : public Atf::MessageProtocol
		{
			// 4 - powerActionSeqId
			UINT32 powerActionSeqId;	//alias pasq

			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY : public Atf::MessageProtocol
		{
			//! 41< <FIXME>TableCommon::P_Card </FIXME> > - powerActionSeqId,numCards< <FIXME>TableCommon::P_Card </FIXME> >
			UINT32 powerActionSeqId;	//alias pasq
			Atf::LAtfVector< TableCommon::P_Card , 1 > cards;

			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY(Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY&&);
			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY& operator=(Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY&) = default;
			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY& operator=(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL : public Atf::MessageProtocol
		{
			// 4 - powerActionSeqId
			UINT32 powerActionSeqId;	//alias pasq

			Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHOOSE_HOLECARDS_DISCARD_CANCEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct ReloadHoleCardsPowerExtInfo
		{
			//! 1< <FIXME>TableCommon::P_Card </FIXME> > - numCards< <FIXME>TableCommon::P_Card </FIXME> >
			Atf::LAtfVector< TableCommon::P_Card , 1 > cards;

			ReloadHoleCardsPowerExtInfo();
			void clear();
			bool equals(const ReloadHoleCardsPowerExtInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ReloadHoleCardsPowerExtInfo(ReloadHoleCardsPowerExtInfo&&);
			ReloadHoleCardsPowerExtInfo& operator=(ReloadHoleCardsPowerExtInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ReloadHoleCardsPowerExtInfo(const ReloadHoleCardsPowerExtInfo&) = default;
			ReloadHoleCardsPowerExtInfo& operator=(const ReloadHoleCardsPowerExtInfo&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_CARD_PLAY : public Atf::MessageProtocol
		{
			//! 441 <FIXME>TableCommon::P_Card</FIXME>  <FIXME>TableCommon::P_Card</FIXME> 4M() - actionRequestId,powerId,targetPlayer, <FIXME>targetHoleCard</FIXME> , <FIXME>targetBoardCard</FIXME> ,powerCardUniqueId,M()
			UINT32 actionRequestId;	//alias aRqI	// this number could be found in MSG_TABLE_REQUESTACTION
			INT32 powerId;	//alias pI
			INT8 targetPlayer;
			TableCommon::P_Card targetHoleCard;
			TableCommon::P_Card targetBoardCard;
			INT32 powerCardUniqueId;
			Atf::CopyableMsgBody extInfo;

			Protocol_MSG_TABLE_POWER_CARD_PLAY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CARD_PLAY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CARD_PLAY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CARD_PLAY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_CARD_PLAY(Protocol_MSG_TABLE_POWER_CARD_PLAY&&);
			Protocol_MSG_TABLE_POWER_CARD_PLAY& operator=(Protocol_MSG_TABLE_POWER_CARD_PLAY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_CARD_PLAY(const Protocol_MSG_TABLE_POWER_CARD_PLAY&) = default;
			Protocol_MSG_TABLE_POWER_CARD_PLAY& operator=(const Protocol_MSG_TABLE_POWER_CARD_PLAY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY : public Atf::MessageProtocol
		{
			// 1s44 - errCode,errString,powerId,powerCardUniqueId
			BYTE errCode;
			PString errString;
			INT32 powerId;	//alias pI
			INT32 powerCardUniqueId;

			Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CARD_PLAY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CARD_PLAY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY(Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY&&);
			Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY& operator=(Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY(const Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY&) = default;
			Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY& operator=(const Protocol_MSG_TABLE_POWER_CARD_PLAY_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_CARD_PRESELECT : public Atf::MessageProtocol
		{
			//! 4b1 <FIXME>TableCommon::P_Card</FIXME>  <FIXME>TableCommon::P_Card</FIXME> 4 - powerId,selectOrUnselect,targetPlayer, <FIXME>targetHoleCard</FIXME> , <FIXME>targetBoardCard</FIXME> ,powerCardUniqueId
			INT32 powerId;	//alias pI
			bool selectOrUnselect;
			INT8 targetPlayer;
			TableCommon::P_Card targetHoleCard;
			TableCommon::P_Card targetBoardCard;
			INT32 powerCardUniqueId;

			Protocol_MSG_TABLE_POWER_CARD_PRESELECT();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CARD_PRESELECT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CARD_PRESELECT; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CARD_PRESELECT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_CARD_PRESELECT(Protocol_MSG_TABLE_POWER_CARD_PRESELECT&&);
			Protocol_MSG_TABLE_POWER_CARD_PRESELECT& operator=(Protocol_MSG_TABLE_POWER_CARD_PRESELECT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_CARD_PRESELECT(const Protocol_MSG_TABLE_POWER_CARD_PRESELECT&) = default;
			Protocol_MSG_TABLE_POWER_CARD_PRESELECT& operator=(const Protocol_MSG_TABLE_POWER_CARD_PRESELECT&) = default;
#endif
#endif
		};

		/*
		   Message MSG_TABLE_POWER_DISCARD_POWERS_CANCEL
		   {
		   };
		 */

		struct Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS : public Atf::MessageProtocol
		{
			//! 11< <FIXME>TableCommon::P_Card </FIXME> > - targetPlayer,numCards< <FIXME>TableCommon::P_Card </FIXME> >
			INT8 targetPlayer;
			Atf::LAtfVector< TableCommon::P_Card , 1 > cards;

			Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_DETECT_HOLECARDS; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_DETECT_HOLECARDS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS(Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS&&);
			Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS& operator=(Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS(const Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS&) = default;
			Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS& operator=(const Protocol_MSG_TABLE_POWER_DETECT_HOLECARDS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_REDRAW : public Atf::MessageProtocol
		{
			// 4444 - seqId,costChips,maxAllowedCardsToRedraw,timeoutSec
			UINT32 seqId;	//alias sq
			UINT32 costChips;
			INT32 maxAllowedCardsToRedraw;
			INT32 timeoutSec;	//alias TO

			Protocol_MSG_TABLE_POWER_REDRAW();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_REDRAW&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_REDRAW; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_REDRAW"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_REDRAW_ACK : public Atf::MessageProtocol
		{
			// 4 - seqId
			UINT32 seqId;	//alias sq

			Protocol_MSG_TABLE_POWER_REDRAW_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_REDRAW_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_REDRAW_ACK; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_REDRAW_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_REDRAW_REPLY : public Atf::MessageProtocol
		{
			// 4b2<4> - seqId,isFinal,numPowersToRedraw<powersToRedraw>
			UINT32 seqId;	//alias sq
			bool isFinal;
			Atf::LAtfVector< INT32, 2 > powersToRedraw;

			Protocol_MSG_TABLE_POWER_REDRAW_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_REDRAW_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_REDRAW_REPLY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_REDRAW_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_REDRAW_REPLY(Protocol_MSG_TABLE_POWER_REDRAW_REPLY&&);
			Protocol_MSG_TABLE_POWER_REDRAW_REPLY& operator=(Protocol_MSG_TABLE_POWER_REDRAW_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_REDRAW_REPLY(const Protocol_MSG_TABLE_POWER_REDRAW_REPLY&) = default;
			Protocol_MSG_TABLE_POWER_REDRAW_REPLY& operator=(const Protocol_MSG_TABLE_POWER_REDRAW_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_REDRAW_CANCEL : public Atf::MessageProtocol
		{
			// 4 - seqId
			UINT32 seqId;	//alias sq

			Protocol_MSG_TABLE_POWER_REDRAW_CANCEL();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_REDRAW_CANCEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_REDRAW_CANCEL; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_REDRAW_CANCEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_CHANGE_FUTURE : public Atf::MessageProtocol
		{
			//! 41< <FIXME>TableCommon::P_Card </FIXME> >41<2> - seqId,numCards< <FIXME>TableCommon::P_Card </FIXME> >,timeoutSec,numCardVisibilityMasks<cardVisibilityMasks>
			UINT32 seqId;	//alias sq
			Atf::LAtfVector< TableCommon::P_Card , 1 > cards;
			INT32 timeoutSec;	//alias TO
			Atf::LAtfVector< INT16, 1 > cardVisibilityMasks;

			Protocol_MSG_TABLE_POWER_CHANGE_FUTURE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHANGE_FUTURE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHANGE_FUTURE; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHANGE_FUTURE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_CHANGE_FUTURE(Protocol_MSG_TABLE_POWER_CHANGE_FUTURE&&);
			Protocol_MSG_TABLE_POWER_CHANGE_FUTURE& operator=(Protocol_MSG_TABLE_POWER_CHANGE_FUTURE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_CHANGE_FUTURE(const Protocol_MSG_TABLE_POWER_CHANGE_FUTURE&) = default;
			Protocol_MSG_TABLE_POWER_CHANGE_FUTURE& operator=(const Protocol_MSG_TABLE_POWER_CHANGE_FUTURE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK : public Atf::MessageProtocol
		{
			// 4 - seqId
			UINT32 seqId;	//alias sq

			Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHANGE_FUTURE_ACK; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHANGE_FUTURE_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY : public Atf::MessageProtocol
		{
			// 4b - seqId,discardCards
			UINT32 seqId;	//alias sq
			bool discardCards;

			Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHANGE_FUTURE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHANGE_FUTURE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL : public Atf::MessageProtocol
		{
			// 4 - seqId
			UINT32 seqId;	//alias sq

			Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_CHANGE_FUTURE_CANCEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE : public Atf::MessageProtocol
		{
			//! 41< <FIXME>TableCommon::P_Card </FIXME> >41<2> - seqId,numCards< <FIXME>TableCommon::P_Card </FIXME> >,timeoutSec,numCardVisibilityMasks<cardVisibilityMasks>
			UINT32 seqId;	//alias sq
			Atf::LAtfVector< TableCommon::P_Card , 1 > cards;
			INT32 timeoutSec;	//alias TO
			Atf::LAtfVector< INT16, 1 > cardVisibilityMasks;

			Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_PLAYERS_CHOICE; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_PLAYERS_CHOICE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE(Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE&&);
			Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE& operator=(Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE(const Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE&) = default;
			Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE& operator=(const Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK : public Atf::MessageProtocol
		{
			// 4 - seqId
			UINT32 seqId;	//alias sq

			Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_PLAYERS_CHOICE_ACK; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_PLAYERS_CHOICE_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY : public Atf::MessageProtocol
		{
			// 41 - seqId,selectedIndex
			UINT32 seqId;	//alias sq
			INT8 selectedIndex;

			Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_PLAYERS_CHOICE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL : public Atf::MessageProtocol
		{
			// 4 - seqId
			UINT32 seqId;	//alias sq

			Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_PLAYERS_CHOICE_CANCEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT : public Atf::MessageProtocol
		{
			// 8444s - handId,clientOrdinal,powerId,effectId,contents
			UINT64 handId;	//alias hI
			UINT32 clientOrdinal;
			UINT32 powerId;	//alias pI
			UINT32 effectId;
			PString contents;

			Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_PRIVATE_EFFECT; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_PRIVATE_EFFECT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT(Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT&&);
			Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT& operator=(Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT(const Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT&) = default;
			Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT& operator=(const Protocol_MSG_TABLE_POWER_PRIVATE_EFFECT&) = default;
#endif
#endif
		};

		struct SabotageTrappedCard
		{
			// 111 - boardNumber,cardNumber,bombsCount
			PubBoardCardPosition cardPosition;
			INT8 bombsCount;

			SabotageTrappedCard();
			void clear();
			bool equals(const SabotageTrappedCard&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS : public Atf::MessageProtocol
		{
			// 1<111> - numTrappedCards<boardNumber,cardNumber,bombsCount>
			Atf::LAtfVector< SabotageTrappedCard, 1 > trappedCards;

			Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS(Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS&&);
			Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS& operator=(Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS(const Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS&) = default;
			Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS& operator=(const Protocol_MSG_TABLE_POWER_SABOTAGE_TRAPPED_CARDS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST : public Atf::MessageProtocol
		{
			// 2 - textId
			INT16 textId;

			Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_USER_MINI_CHAT_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_USER_MINI_CHAT_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_TABLE_USER_MINI_CHAT_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_DARK_BET : public Atf::MessageProtocol
		{
			// 41<4>4 - seqId,numValues<values>,timeoutSec
			UINT32 seqId;	//alias sq
			Atf::LAtfVector< INT32 , 1 > values;
			INT32 timeoutSec;	//alias TO

			Protocol_MSG_TABLE_POWER_DARK_BET();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_DARK_BET&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_DARK_BET; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_DARK_BET"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_DARK_BET(Protocol_MSG_TABLE_POWER_DARK_BET&&);
			Protocol_MSG_TABLE_POWER_DARK_BET& operator=(Protocol_MSG_TABLE_POWER_DARK_BET&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_DARK_BET(const Protocol_MSG_TABLE_POWER_DARK_BET&) = default;
			Protocol_MSG_TABLE_POWER_DARK_BET& operator=(const Protocol_MSG_TABLE_POWER_DARK_BET&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_POWER_DARK_BET_ACK : public Atf::MessageProtocol
		{
			// 4 - seqId
			UINT32 seqId;	//alias sq

			Protocol_MSG_TABLE_POWER_DARK_BET_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_DARK_BET_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_DARK_BET_ACK; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_DARK_BET_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_DARK_BET_REPLY : public Atf::MessageProtocol
		{
			// 44 - seqId,value
			UINT32 seqId;	//alias sq
			INT32 value;

			Protocol_MSG_TABLE_POWER_DARK_BET_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_DARK_BET_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_DARK_BET_REPLY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_DARK_BET_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL : public Atf::MessageProtocol
		{
			// 4 - seqId
			UINT32 seqId;	//alias sq

			Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_DARK_BET_CANCEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_DARK_BET_CANCEL; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_DARK_BET_CANCEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_POWER_MOUSE_OVER : public Atf::MessageProtocol
		{
			// 1 - position
			INT8 position;	// Power card currently on mouseover, -1 for none.

			Protocol_MSG_TABLE_POWER_MOUSE_OVER();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_MOUSE_OVER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_MOUSE_OVER; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_MOUSE_OVER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		// for player private power effect messages for animation

		struct Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION : public Atf::MessageProtocol
		{
			// 84M() - handId,powerId,M()
			UINT64 handId;	//alias hI
			UINT32 powerId;	//alias pI
			Atf::CopyableMsgBody effectbody;

			Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_POWER_PRIVATE_ANIMATION; }
			const char *getMsgIdString() const override { return "MSG_TABLE_POWER_PRIVATE_ANIMATION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION(Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION&&);
			Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION& operator=(Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION(const Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION&) = default;
			Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION& operator=(const Protocol_MSG_TABLE_POWER_PRIVATE_ANIMATION&) = default;
#endif
#endif
		};

		struct PowerCardInfo
		{
			// 44 - powerId,cost
			INT32 powerId;	//alias pI
			INT32 cost;

			PowerCardInfo();
			void clear();
			bool equals(const PowerCardInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct PrivDealingPowerCardsAnimationEffect
		{
			// 44<44> - numPowerCardsBeforeDealt,numPowerCards<powerId,cost>
			INT32 numPowerCardsBeforeDealt;
			Atf::LAtfVector< PowerCardInfo, 4 > powerCards;

			PrivDealingPowerCardsAnimationEffect();
			void clear();
			bool equals(const PrivDealingPowerCardsAnimationEffect&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PrivDealingPowerCardsAnimationEffect(PrivDealingPowerCardsAnimationEffect&&);
			PrivDealingPowerCardsAnimationEffect& operator=(PrivDealingPowerCardsAnimationEffect&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PrivDealingPowerCardsAnimationEffect(const PrivDealingPowerCardsAnimationEffect&) = default;
			PrivDealingPowerCardsAnimationEffect& operator=(const PrivDealingPowerCardsAnimationEffect&) = default;
#endif
#endif
		};

		// PYR-98733
		struct Protocol_MSG_TABLE_THROW : public Atf::MessageProtocol
		{
			// 41 - throwableTypeId,seat
			UINT32 throwableTypeId;	// enum Throwable::Type in Throwables.h
			INT8 seat;	//alias s

			Protocol_MSG_TABLE_THROW();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_THROW&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_THROW; }
			const char *getMsgIdString() const override { return "MSG_TABLE_THROW"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_THROW_REPLY : public Atf::MessageProtocol
		{
			// 2[sM()] - errCode[errStr,M()]
			INT16 errCode;

			PString errStr;
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m

			Protocol_MSG_TABLE_THROW_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_THROW_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_THROW_REPLY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_THROW_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_THROW_REPLY(Protocol_MSG_TABLE_THROW_REPLY&&);
			Protocol_MSG_TABLE_THROW_REPLY& operator=(Protocol_MSG_TABLE_THROW_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_THROW_REPLY(const Protocol_MSG_TABLE_THROW_REPLY&) = default;
			Protocol_MSG_TABLE_THROW_REPLY& operator=(const Protocol_MSG_TABLE_THROW_REPLY&) = default;
#endif
#endif
		};
	};

	namespace publication
	{
		struct ClientExtraForTakeFromPotEvent
		{
			//! 1bb11 <FIXME>vector01<INT8></FIXME> 1 - numWinners,isSingleWinner,winHighHand,maxPotLevel,bestHigh, <FIXME>kickerRanks</FIXME> ,boardNum
			INT8 numWinners;
			bool isSingleWinner;
			bool winHighHand;
			INT8 maxPotLevel;	//TODO:
			BYTE bestHigh;
			Atf::AtfVector0< INT8, 1 > kickerRanks;
			BYTE boardNum;

			ClientExtraForTakeFromPotEvent();
			void clear();
			bool equals(const ClientExtraForTakeFromPotEvent&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

			// @Override
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = true) const;

			// @Override
			void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientExtraForTakeFromPotEvent(ClientExtraForTakeFromPotEvent&&);
			ClientExtraForTakeFromPotEvent& operator=(ClientExtraForTakeFromPotEvent&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientExtraForTakeFromPotEvent(const ClientExtraForTakeFromPotEvent&) = default;
			ClientExtraForTakeFromPotEvent& operator=(const ClientExtraForTakeFromPotEvent&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SUBSCR_ACTION : public Atf::MessageProtocol
		{
			// 114 - seat,action,amount
			INT8 seat;	//alias s
			char action;	//alias a
			UINT32 amount;	//alias v

			Protocol_MSG_TABLE_SUBSCR_ACTION();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_ACTION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_ACTION; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_ACTION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT : public Atf::MessageProtocol
		{
			// 11 - seat,isBlindOrAnte
			INT8 seat;	//alias s
			BYTE isBlindOrAnte;

			Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_ACTIVESEAT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_ACTIVESEAT; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_ACTIVESEAT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SUBSCR_BEGINHAND : public Atf::MessageProtocol
		{
			// 1 - dealer
			INT8 dealer;

			Protocol_MSG_TABLE_SUBSCR_BEGINHAND();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_BEGINHAND&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_BEGINHAND; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_BEGINHAND"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE : public Atf::MessageProtocol
		{
			// 1s - seat,chat
			INT8 seat;	//alias s
			PString chat;

			Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_CHAT_BUBBLE; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_CHAT_BUBBLE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE(Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE&&);
			Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE& operator=(Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE(const Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE&) = default;
			Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE& operator=(const Protocol_MSG_TABLE_SUBSCR_CHAT_BUBBLE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SUBSCR_DEALBOARD : public Atf::MessageProtocol
		{
			// 1b - numOfBoardCards,runItTwiceMode
			BYTE numOfBoardCards;
			bool runItTwiceMode;

			Protocol_MSG_TABLE_SUBSCR_DEALBOARD();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_DEALBOARD&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_DEALBOARD; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_DEALBOARD"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT : public Atf::MessageProtocol
		{
			// 111 - boardNumber,numCardsDealt,numBoardCards
			BYTE boardNumber;
			BYTE numCardsDealt;
			BYTE numBoardCards;

			Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_DEALBOARD_RIT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_DEALBOARD_RIT; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_DEALBOARD_RIT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS : public Atf::MessageProtocol
		{
			//!  <FIXME>vector_FF<P_SuscrPlayerCards></FIXME> 1 -  <FIXME>playerCardInfos</FIXME> ,dealerPos
			Atf::AtfVectorWithSpecialTerminator< P_SuscrPlayerCards > playerCardInfos;
			INT8 dealerPos;

			Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_DEALPLAYERCARDS; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_DEALPLAYERCARDS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS(Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS&&);
			Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS& operator=(Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS(const Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS&) = default;
			Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS& operator=(const Protocol_MSG_TABLE_SUBSCR_DEALPLAYERCARDS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SUBSCR_ENDHAND : public Atf::MessageProtocol
		{
			// 1 - handStatus
			BYTE handStatus;

			Protocol_MSG_TABLE_SUBSCR_ENDHAND();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_ENDHAND&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_ENDHAND; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_ENDHAND"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE : public Atf::MessageProtocol
		{
			// I2444 - i18nString,timerValue,flags,chatItemId,brandMask
			I18nPString i18nString;
			UINT16 timerValue;
			UINT32 flags;
			UINT32 chatItemId;
			UINT32 brandMask;

			Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_I18N_MESSAGE; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_I18N_MESSAGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE(Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE&&);
			Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE& operator=(Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE(const Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE&) = default;
			Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE& operator=(const Protocol_MSG_TABLE_SUBSCR_I18N_MESSAGE&) = default;
#endif
#endif
		};

		struct ClientMsg_TxtEx_Tournmt_NewRound
		{
			//! 114441 <FIXME>TableCommon::TableStakes</FIXME>  - handType,potStruct,stakeSmall,stakeBig,ante,round, <FIXME>tableStakes</FIXME> 
			BYTE handType;
			BYTE potStruct;
			UINT32 stakeSmall;
			UINT32 stakeBig;
			UINT32 ante;
			INT8 round;
			TableCommon::TableStakes tableStakes;

			ClientMsg_TxtEx_Tournmt_NewRound();
			void clear();
			bool equals(const ClientMsg_TxtEx_Tournmt_NewRound&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientMsg_TxtEx_Tournmt_NewRound(ClientMsg_TxtEx_Tournmt_NewRound&&);
			ClientMsg_TxtEx_Tournmt_NewRound& operator=(ClientMsg_TxtEx_Tournmt_NewRound&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientMsg_TxtEx_Tournmt_NewRound(const ClientMsg_TxtEx_Tournmt_NewRound&) = default;
			ClientMsg_TxtEx_Tournmt_NewRound& operator=(const ClientMsg_TxtEx_Tournmt_NewRound&) = default;
#endif
#endif
		};

		struct ClientMsg_TxtEx_Tournmt_NewStakes
		{
			//! 11444 <FIXME>TableCommon::TableStakes</FIXME>  - handType,potStruct,stakeSmall,stakeBig,ante, <FIXME>tableStakes</FIXME> 
			BYTE handType;
			BYTE potStruct;
			UINT32 stakeSmall;
			UINT32 stakeBig;
			UINT32 ante;
			TableCommon::TableStakes tableStakes;

			ClientMsg_TxtEx_Tournmt_NewStakes();
			void clear();
			bool equals(const ClientMsg_TxtEx_Tournmt_NewStakes&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientMsg_TxtEx_Tournmt_NewStakes(ClientMsg_TxtEx_Tournmt_NewStakes&&);
			ClientMsg_TxtEx_Tournmt_NewStakes& operator=(ClientMsg_TxtEx_Tournmt_NewStakes&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientMsg_TxtEx_Tournmt_NewStakes(const ClientMsg_TxtEx_Tournmt_NewStakes&) = default;
			ClientMsg_TxtEx_Tournmt_NewStakes& operator=(const ClientMsg_TxtEx_Tournmt_NewStakes&) = default;
#endif
#endif
		};

		struct ClientMsg_TxtEx_Milestone_Hand
		{
			// 8 - handId
			UINT64 handId;

			ClientMsg_TxtEx_Milestone_Hand();
			void clear();
			bool equals(const ClientMsg_TxtEx_Milestone_Hand&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ClientMsg_TxtEx_Milestone_Prior_Draw
		{
			//!  <FIXME>TournMileStonePrize</FIXME>  -  <FIXME>prize</FIXME> 
			TournMileStonePrize prize;

			ClientMsg_TxtEx_Milestone_Prior_Draw();
			void clear();
			bool equals(const ClientMsg_TxtEx_Milestone_Prior_Draw&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientMsg_TxtEx_Milestone_Prior_Draw(ClientMsg_TxtEx_Milestone_Prior_Draw&&);
			ClientMsg_TxtEx_Milestone_Prior_Draw& operator=(ClientMsg_TxtEx_Milestone_Prior_Draw&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientMsg_TxtEx_Milestone_Prior_Draw(const ClientMsg_TxtEx_Milestone_Prior_Draw&) = default;
			ClientMsg_TxtEx_Milestone_Prior_Draw& operator=(const ClientMsg_TxtEx_Milestone_Prior_Draw&) = default;
#endif
#endif
		};

		struct ClientMsg_TxtEx_Milestone_Losing_Table
		{
			//! 4sss84 <FIXME>TournMileStonePrize</FIXME>  - numOfWinningTables,winningTableName,winningTableServerAddress,winningTableServerObject,winningTableId,numWinningPlayers, <FIXME>prize</FIXME> 
			INT32 numOfWinningTables;
			PString winningTableName;
			PString winningTableServerAddress;
			PString winningTableServerObject;
			UINT64 winningTableId;
			UINT32 numWinningPlayers;
			TournMileStonePrize prize;

			ClientMsg_TxtEx_Milestone_Losing_Table();
			void clear();
			bool equals(const ClientMsg_TxtEx_Milestone_Losing_Table&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientMsg_TxtEx_Milestone_Losing_Table(ClientMsg_TxtEx_Milestone_Losing_Table&&);
			ClientMsg_TxtEx_Milestone_Losing_Table& operator=(ClientMsg_TxtEx_Milestone_Losing_Table&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientMsg_TxtEx_Milestone_Losing_Table(const ClientMsg_TxtEx_Milestone_Losing_Table&) = default;
			ClientMsg_TxtEx_Milestone_Losing_Table& operator=(const ClientMsg_TxtEx_Milestone_Losing_Table&) = default;
#endif
#endif
		};

		struct ClientMsg_TxtEx_Milestone_Winners
		{
			//! 4<s>4 <FIXME>TournMileStonePrize</FIXME>  - numTables<tables>,nWinners, <FIXME>prize</FIXME> 
			Atf::LAtfVector< PString , 4 > tables;
			UINT32 nWinners;
			TournMileStonePrize prize;

			ClientMsg_TxtEx_Milestone_Winners();
			void clear();
			bool equals(const ClientMsg_TxtEx_Milestone_Winners&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientMsg_TxtEx_Milestone_Winners(ClientMsg_TxtEx_Milestone_Winners&&);
			ClientMsg_TxtEx_Milestone_Winners& operator=(ClientMsg_TxtEx_Milestone_Winners&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientMsg_TxtEx_Milestone_Winners(const ClientMsg_TxtEx_Milestone_Winners&) = default;
			ClientMsg_TxtEx_Milestone_Winners& operator=(const ClientMsg_TxtEx_Milestone_Winners&) = default;
#endif
#endif
		};

		struct ClientMsg_TxtEx_TableHistory_StartNewHand
		{
			// t4444111 - started,stakeSmall,stakeBig,smallBlind,ante,handType,isHiLo,potStruct
			CommSrvTime started;
			UINT32 stakeSmall;
			UINT32 stakeBig;
			UINT32 smallBlind;
			UINT32 ante;
			BYTE handType;
			BYTE isHiLo;
			BYTE potStruct;

			ClientMsg_TxtEx_TableHistory_StartNewHand();
			void clear();
			bool equals(const ClientMsg_TxtEx_TableHistory_StartNewHand&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ClientMsg_TxtEx_TableHistory_StartNewGame
		{
			// 444111 - stakeSmall,stakeBig,ante,handType,isHiLo,potStruct
			UINT32 stakeSmall;
			UINT32 stakeBig;
			UINT32 ante;
			BYTE handType;
			BYTE isHiLo;
			BYTE potStruct;

			ClientMsg_TxtEx_TableHistory_StartNewGame();
			void clear();
			bool equals(const ClientMsg_TxtEx_TableHistory_StartNewGame&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ClientMsg_TxtEx_TableHistory_Dealing
		{
			//! 1< <FIXME>TableCommon::P_Card </FIXME> > - numHoleCardsDict< <FIXME>TableCommon::P_Card </FIXME> >
			Atf::LAtfVector< TableCommon::P_Card , 1 > holeCardsDict;

			ClientMsg_TxtEx_TableHistory_Dealing();
			void clear();
			bool equals(const ClientMsg_TxtEx_TableHistory_Dealing&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientMsg_TxtEx_TableHistory_Dealing(ClientMsg_TxtEx_TableHistory_Dealing&&);
			ClientMsg_TxtEx_TableHistory_Dealing& operator=(ClientMsg_TxtEx_TableHistory_Dealing&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientMsg_TxtEx_TableHistory_Dealing(const ClientMsg_TxtEx_TableHistory_Dealing&) = default;
			ClientMsg_TxtEx_TableHistory_Dealing& operator=(const ClientMsg_TxtEx_TableHistory_Dealing&) = default;
#endif
#endif
		};

		struct ClientMsg_TxtEx_TableHistory_CardsShown
		{
			// s - cards
			PString cards;

			ClientMsg_TxtEx_TableHistory_CardsShown();
			void clear();
			bool equals(const ClientMsg_TxtEx_TableHistory_CardsShown&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientMsg_TxtEx_TableHistory_CardsShown(ClientMsg_TxtEx_TableHistory_CardsShown&&);
			ClientMsg_TxtEx_TableHistory_CardsShown& operator=(ClientMsg_TxtEx_TableHistory_CardsShown&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientMsg_TxtEx_TableHistory_CardsShown(const ClientMsg_TxtEx_TableHistory_CardsShown&) = default;
			ClientMsg_TxtEx_TableHistory_CardsShown& operator=(const ClientMsg_TxtEx_TableHistory_CardsShown&) = default;
#endif
#endif
		};

		struct ClientMsg_TxtEx_TableHistory_WinningHand
		{
			// 1ss11 - bestHigh,bestHighHand,bestLowHand,bestLow,boardNum
			BYTE bestHigh;
			PString bestHighHand;
			PString bestLowHand;
			BYTE bestLow;
			BYTE boardNum;

			ClientMsg_TxtEx_TableHistory_WinningHand();
			void clear();
			bool equals(const ClientMsg_TxtEx_TableHistory_WinningHand&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientMsg_TxtEx_TableHistory_WinningHand(ClientMsg_TxtEx_TableHistory_WinningHand&&);
			ClientMsg_TxtEx_TableHistory_WinningHand& operator=(ClientMsg_TxtEx_TableHistory_WinningHand&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientMsg_TxtEx_TableHistory_WinningHand(const ClientMsg_TxtEx_TableHistory_WinningHand&) = default;
			ClientMsg_TxtEx_TableHistory_WinningHand& operator=(const ClientMsg_TxtEx_TableHistory_WinningHand&) = default;
#endif
#endif
		};

		struct ClientMsg_TxtEx_TableHistory_ShownHand
		{
			//! 11s <FIXME>TableCommon::P_Card</FIXME>  <FIXME>vector01<INT8></FIXME> 1 - cmp,bestHigh,bestHighHand, <FIXME>kicker</FIXME> , <FIXME>extraKickerRanks</FIXME> ,boardNum
			INT8 cmp;
			BYTE bestHigh;
			PString bestHighHand;
			TableCommon::P_Card kicker;
			Atf::AtfVector0< INT8, 1 > extraKickerRanks;
			BYTE boardNum;

			ClientMsg_TxtEx_TableHistory_ShownHand();
			void clear();
			bool equals(const ClientMsg_TxtEx_TableHistory_ShownHand&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientMsg_TxtEx_TableHistory_ShownHand(ClientMsg_TxtEx_TableHistory_ShownHand&&);
			ClientMsg_TxtEx_TableHistory_ShownHand& operator=(ClientMsg_TxtEx_TableHistory_ShownHand&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientMsg_TxtEx_TableHistory_ShownHand(const ClientMsg_TxtEx_TableHistory_ShownHand&) = default;
			ClientMsg_TxtEx_TableHistory_ShownHand& operator=(const ClientMsg_TxtEx_TableHistory_ShownHand&) = default;
#endif
#endif
		};

		struct ClientMsg_TxtEx_TableHistory_TournPrizeWon
		{
			// 24s4 - flags,tournId,ticketAdmission,headBounty
			UINT16 flags;
			UINT32 tournId;
			PString ticketAdmission;
			UINT32 headBounty;

			ClientMsg_TxtEx_TableHistory_TournPrizeWon();
			void clear();
			bool equals(const ClientMsg_TxtEx_TableHistory_TournPrizeWon&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientMsg_TxtEx_TableHistory_TournPrizeWon(ClientMsg_TxtEx_TableHistory_TournPrizeWon&&);
			ClientMsg_TxtEx_TableHistory_TournPrizeWon& operator=(ClientMsg_TxtEx_TableHistory_TournPrizeWon&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientMsg_TxtEx_TableHistory_TournPrizeWon(const ClientMsg_TxtEx_TableHistory_TournPrizeWon&) = default;
			ClientMsg_TxtEx_TableHistory_TournPrizeWon& operator=(const ClientMsg_TxtEx_TableHistory_TournPrizeWon&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SUBSCR_MESSAGE : public Atf::MessageProtocol
		{
			// s242M()4 - attach,timerValue,options,cltMsgStrCode,M(),BrandMask
			PString attach;
			UINT16 timerValue;
			UINT32 options;
			UINT16 cltMsgStrCode;
			Atf::CopyableMsgBody clientMsg_txtEx;	//alias m
			UINT32 BrandMask;

			Protocol_MSG_TABLE_SUBSCR_MESSAGE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_MESSAGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_MESSAGE; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_MESSAGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_MESSAGE(Protocol_MSG_TABLE_SUBSCR_MESSAGE&&);
			Protocol_MSG_TABLE_SUBSCR_MESSAGE& operator=(Protocol_MSG_TABLE_SUBSCR_MESSAGE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_MESSAGE(const Protocol_MSG_TABLE_SUBSCR_MESSAGE&) = default;
			Protocol_MSG_TABLE_SUBSCR_MESSAGE& operator=(const Protocol_MSG_TABLE_SUBSCR_MESSAGE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SUBSCR_MESSAGE2 : public Atf::MessageProtocol
		{
			// s2444m - attach,timerValue,flags,siteObsolete,BrandMask,siteMask
			PString attach;
			UINT16 timerValue;
			UINT32 flags;
			UINT32 siteObsolete;
			UINT32 BrandMask;
			PSiteMask siteMask;

			Protocol_MSG_TABLE_SUBSCR_MESSAGE2();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_MESSAGE2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_MESSAGE2; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_MESSAGE2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_MESSAGE2(Protocol_MSG_TABLE_SUBSCR_MESSAGE2&&);
			Protocol_MSG_TABLE_SUBSCR_MESSAGE2& operator=(Protocol_MSG_TABLE_SUBSCR_MESSAGE2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_MESSAGE2(const Protocol_MSG_TABLE_SUBSCR_MESSAGE2&) = default;
			Protocol_MSG_TABLE_SUBSCR_MESSAGE2& operator=(const Protocol_MSG_TABLE_SUBSCR_MESSAGE2&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT : public Atf::MessageProtocol
		{
			//! 1 <FIXME>vector_FFFF<P_PotInfo></FIXME> 1 - potNum, <FIXME>pots</FIXME> ,potCategoryId
			BYTE potNum;
			Atf::AtfVectorWithSpecialTerminator< P_PotInfo > pots;
			BYTE potCategoryId;

			Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_MOVEFROMPOT; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_MOVEFROMPOT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT(Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT&&);
			Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT& operator=(Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT(const Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT&) = default;
			Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT& operator=(const Protocol_MSG_TABLE_SUBSCR_MOVEFROMPOT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SUBSCR_MOVETOPOT : public Atf::MessageProtocol
		{
			//! 1 <FIXME>vector_FFFF<P_PotInfo></FIXME> 1 - potNum, <FIXME>pots</FIXME> ,potCategoryId
			BYTE potNum;
			Atf::AtfVectorWithSpecialTerminator< P_PotInfo > pots;
			BYTE potCategoryId;

			Protocol_MSG_TABLE_SUBSCR_MOVETOPOT();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_MOVETOPOT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_MOVETOPOT; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_MOVETOPOT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_MOVETOPOT(Protocol_MSG_TABLE_SUBSCR_MOVETOPOT&&);
			Protocol_MSG_TABLE_SUBSCR_MOVETOPOT& operator=(Protocol_MSG_TABLE_SUBSCR_MOVETOPOT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_MOVETOPOT(const Protocol_MSG_TABLE_SUBSCR_MOVETOPOT&) = default;
			Protocol_MSG_TABLE_SUBSCR_MOVETOPOT& operator=(const Protocol_MSG_TABLE_SUBSCR_MOVETOPOT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SUBSCR_NEWGAME : public Atf::MessageProtocol
		{
			//! 444111 <FIXME>TableCommon::TableStakes</FIXME>  - stakeSmall,stakeBig,ante,handType,isHiLo,potStruct, <FIXME>tableStakes</FIXME> 
			INT32 stakeSmall;
			INT32 stakeBig;
			INT32 ante;
			BYTE handType;	//alias gm
			BYTE isHiLo;
			BYTE potStruct;	//alias lm
			TableCommon::TableStakes tableStakes;

			Protocol_MSG_TABLE_SUBSCR_NEWGAME();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_NEWGAME&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_NEWGAME; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_NEWGAME"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_NEWGAME(Protocol_MSG_TABLE_SUBSCR_NEWGAME&&);
			Protocol_MSG_TABLE_SUBSCR_NEWGAME& operator=(Protocol_MSG_TABLE_SUBSCR_NEWGAME&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_NEWGAME(const Protocol_MSG_TABLE_SUBSCR_NEWGAME&) = default;
			Protocol_MSG_TABLE_SUBSCR_NEWGAME& operator=(const Protocol_MSG_TABLE_SUBSCR_NEWGAME&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE : public Atf::MessageProtocol
		{
			// b - pause
			bool pause;

			Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_SET_RECORDING_PAUSE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE : public Atf::MessageProtocol
		{
			// 14b - start,delayedSec,forceClose
			BYTE start;
			UINT32 delayedSec;
			bool forceClose;

			Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_DELAYED_TABLECLOSE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS : public Atf::MessageProtocol
		{
			// 2 - playersUnfolded
			UINT16 playersUnfolded;	// bit mask for players who played unfold

			Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_REVEAL_UNFOLD_ACTIONS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS : public Atf::MessageProtocol	// currently on unfold pot has this animation msg
		{
			// 12 - potCategoryId,winners
			BYTE potCategoryId;
			UINT16 winners;	// bit mask for winners from this pot category

			Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_SHOW_POT_WINNERS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_SHOW_POT_WINNERS; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_SHOW_POT_WINNERS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET : public Atf::MessageProtocol	// currently on unfold pot when there is only one player played unfold
		{
			// 114 - potCategoryId,seat,amount
			BYTE potCategoryId;	//alias pcid
			BYTE seat;	//alias s
			UINT32 amount;	//alias v

			Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_RETURN_UNCALLED_BET"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		// ============ for new animations ============

		struct Protocol_MSG_TABLE_SUBSCR_POWER_PLAY : public Atf::MessageProtocol
		{
			struct _BaseAttrType
			{
				INT8 seat;	//alias s
				mutable bool _is_empty_internal;

				_BaseAttrType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_BaseAttrType()); return _is_empty_internal; }
				bool equals(const _BaseAttrType&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			// 4M(1)M() - powerId,M(seat),M()
			INT32 powerId;	//alias pI
			_BaseAttrType baseAttr;

			Atf::CopyableMsgBody powerAttr;

			Protocol_MSG_TABLE_SUBSCR_POWER_PLAY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_POWER_PLAY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_POWER_PLAY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_POWER_PLAY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_POWER_PLAY(Protocol_MSG_TABLE_SUBSCR_POWER_PLAY&&);
			Protocol_MSG_TABLE_SUBSCR_POWER_PLAY& operator=(Protocol_MSG_TABLE_SUBSCR_POWER_PLAY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_POWER_PLAY(const Protocol_MSG_TABLE_SUBSCR_POWER_PLAY&) = default;
			Protocol_MSG_TABLE_SUBSCR_POWER_PLAY& operator=(const Protocol_MSG_TABLE_SUBSCR_POWER_PLAY&) = default;
#endif
#endif
		};

		struct XRayCard
		{
			// 1111 - player,cardIndex,suit,rank
			BYTE player;
			BYTE cardIndex;
			char suit;
			BYTE rank;

			XRayCard();
			void clear();
			bool equals(const XRayCard&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct XRayAnimation
		{
			// 4<1111> - numCards<player,cardIndex,suit,rank>
			Atf::LAtfVector< XRayCard, 4 > cards;

			XRayAnimation();
			void clear();
			bool equals(const XRayAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			XRayAnimation(XRayAnimation&&);
			XRayAnimation& operator=(XRayAnimation&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			XRayAnimation(const XRayAnimation&) = default;
			XRayAnimation& operator=(const XRayAnimation&) = default;
#endif
#endif
		};

		struct DisintgrateAnimation
		{
			// 11 - boardNumber,cardNumber
			PubBoardCardPosition c;

			DisintgrateAnimation();
			void clear();
			bool equals(const DisintgrateAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ScannerAnimation
		{
			// b1b - startOrEnd,numCards,discarded
			bool startOrEnd;
			BYTE numCards;
			bool discarded;

			ScannerAnimation();
			void clear();
			bool equals(const ScannerAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct EngineerAnimation
		{
			//! b1< <FIXME>TableCommon::P_Card </FIXME> > <FIXME>TableCommon::P_Card</FIXME>  - startOrEnd,numCards< <FIXME>TableCommon::P_Card </FIXME> >, <FIXME>chosenCard</FIXME> 
			bool startOrEnd;
			Atf::LAtfVector< TableCommon::P_Card , 1 > cards;
			TableCommon::P_Card chosenCard;

			EngineerAnimation();
			void clear();
			bool equals(const EngineerAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			EngineerAnimation(EngineerAnimation&&);
			EngineerAnimation& operator=(EngineerAnimation&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			EngineerAnimation(const EngineerAnimation&) = default;
			EngineerAnimation& operator=(const EngineerAnimation&) = default;
#endif
#endif
		};

		struct CloneAnimation
		{
			// 1444 - toSlotIndex,powerIdCopied,newPowerState,newPowerCost
			BYTE toSlotIndex;
			INT32 powerIdCopied;
			UINT32 newPowerState;
			INT32 newPowerCost;

			CloneAnimation();
			void clear();
			bool equals(const CloneAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct UpgradeAnimation
		{
			// b - startOrEnd
			bool startOrEnd;

			UpgradeAnimation();
			void clear();
			bool equals(const UpgradeAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct IntelAnimation
		{
			//! 11b1< <FIXME>TableCommon::P_Card</FIXME> > - player,NumCards,isFirstEffect,numSensedCardIndexes< <FIXME>TableCommon::P_Card</FIXME> >
			BYTE player;
			BYTE NumCards;
			bool isFirstEffect;
			Atf::LAtfVector< TableCommon::P_Card, 1 > sensedCardIndexes;

			IntelAnimation();
			void clear();
			bool equals(const IntelAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			IntelAnimation(IntelAnimation&&);
			IntelAnimation& operator=(IntelAnimation&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			IntelAnimation(const IntelAnimation&) = default;
			IntelAnimation& operator=(const IntelAnimation&) = default;
#endif
#endif
		};

		struct ReloadAnimation
		{
			//! 1<1 <FIXME>TableCommon::P_Card</FIXME> > - numCardIndexes<pos, <FIXME>card</FIXME> >
			Atf::LAtfVector< CardWithPosition, 1 > cardIndexes;

			ReloadAnimation();
			void clear();
			bool equals(const ReloadAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ReloadAnimation(ReloadAnimation&&);
			ReloadAnimation& operator=(ReloadAnimation&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ReloadAnimation(const ReloadAnimation&) = default;
			ReloadAnimation& operator=(const ReloadAnimation&) = default;
#endif
#endif
		};

		struct SyphonAnimation
		{
			// 118888 - fromPlayer,toPlayer,originManaTo,origManaFrom,amountDrained,amountReceived
			INT8 fromPlayer;
			INT8 toPlayer;
			INT64 originManaTo;
			INT64 origManaFrom;
			INT64 amountDrained;
			INT64 amountReceived;

			SyphonAnimation();
			void clear();
			bool equals(const SyphonAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct DeployPowerAnimation
		{
			//! 11<M(11 <FIXME>TableCommon::P_Card</FIXME> )> - boardWidth,numCards<M(playerOrboard,pos, <FIXME>card</FIXME> )>
			BYTE boardWidth;	// max_number_of_cards_in_board_line
			Atf::LAtfVector< CardInfoBody, 1 > cards;

			DeployPowerAnimation();
			void clear();
			bool equals(const DeployPowerAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			DeployPowerAnimation(DeployPowerAnimation&&);
			DeployPowerAnimation& operator=(DeployPowerAnimation&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			DeployPowerAnimation(const DeployPowerAnimation&) = default;
			DeployPowerAnimation& operator=(const DeployPowerAnimation&) = default;
#endif
#endif
		};

		struct MorphAnimation
		{
			//! 11 <FIXME>TableCommon::P_Card</FIXME>  - playerOrboard,pos, <FIXME>card</FIXME> 
			CardInfo c;

			MorphAnimation();
			void clear();
			bool equals(const MorphAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			MorphAnimation(MorphAnimation&&);
			MorphAnimation& operator=(MorphAnimation&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			MorphAnimation(const MorphAnimation&) = default;
			MorphAnimation& operator=(const MorphAnimation&) = default;
#endif
#endif
		};

		struct PacifyAnimPlayer
		{
			// M(1888) - M(seat,chipsReturned,chipsRemaining,newBalance)
			INT8 seat;	//alias s
			INT64 chipsReturned;
			INT64 chipsRemaining;
			INT64 newBalance;

			PacifyAnimPlayer();
			void clear();
			bool equals(const PacifyAnimPlayer&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct PacifyAnimation
		{
			// 1<M(1888)> - numPlayers<M(seat,chipsReturned,chipsRemaining,newBalance)>
			Atf::LAtfVector< PacifyAnimPlayer, 1 > players;

			PacifyAnimation();
			void clear();
			bool equals(const PacifyAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PacifyAnimation(PacifyAnimation&&);
			PacifyAnimation& operator=(PacifyAnimation&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PacifyAnimation(const PacifyAnimation&) = default;
			PacifyAnimation& operator=(const PacifyAnimation&) = default;
#endif
#endif
		};

		struct MintAnimation
		{
			// 88 - chipsMinted,betAmountAfterMint
			INT64 chipsMinted;
			INT64 betAmountAfterMint;

			MintAnimation();
			void clear();
			bool equals(const MintAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ChaosCard
		{
			//! M( <FIXME>TableCommon::P_Card</FIXME> 11b) - M( <FIXME>card</FIXME> ,boardNo,cardPos,isBlocked)
			TableCommon::P_Card card;
			BYTE boardNo;
			BYTE cardPos;
			bool isBlocked;

			ChaosCard();
			void clear();
			bool equals(const ChaosCard&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ChaosCard(ChaosCard&&);
			ChaosCard& operator=(ChaosCard&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ChaosCard(const ChaosCard&) = default;
			ChaosCard& operator=(const ChaosCard&) = default;
#endif
#endif
		};

		struct ChaosAnimation
		{
			//! 1<M( <FIXME>TableCommon::P_Card</FIXME> 11b)> - numChaos<M( <FIXME>card</FIXME> ,boardNo,cardPos,isBlocked)>
			Atf::LAtfVector< ChaosCard, 1 > chaos;

			ChaosAnimation();
			void clear();
			bool equals(const ChaosAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ChaosAnimation(ChaosAnimation&&);
			ChaosAnimation& operator=(ChaosAnimation&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ChaosAnimation(const ChaosAnimation&) = default;
			ChaosAnimation& operator=(const ChaosAnimation&) = default;
#endif
#endif
		};

		struct DealingPowerCardsAnimation
		{
			// 144 - player,numPowerCardsBeforeDealt,numPowerCardsDealt
			BYTE player;
			INT32 numPowerCardsBeforeDealt;
			INT32 numPowerCardsDealt;

			DealingPowerCardsAnimation();
			void clear();
			bool equals(const DealingPowerCardsAnimation&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct WinnerInfo
		{
			//! M(1811<1>1<M(11 <FIXME>TableCommon::P_Card</FIXME> )>) - M(seat,winningAmount,handRank,numKickerRanks<kickerRanks>,numWinningCards<M(playerOrboard,pos, <FIXME>card</FIXME> )>)
			INT8 seat;	//alias s
			INT64 winningAmount;
			BYTE handRank;	// 1 - 9
			Atf::LAtfVector< INT8, 1 > kickerRanks;
			Atf::LAtfVector< CardInfoBody, 1 > winningCards;

			WinnerInfo();
			void clear();
			bool equals(const WinnerInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			WinnerInfo(WinnerInfo&&);
			WinnerInfo& operator=(WinnerInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			WinnerInfo(const WinnerInfo&) = default;
			WinnerInfo& operator=(const WinnerInfo&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION : public Atf::MessageProtocol	// for showdown animations
		{
			//! 1881<1>1<M(1811<1>1<M(11 <FIXME>TableCommon::P_Card</FIXME> )>)>1b - potNo,startAmount,endAmount,numPlayersInPot<playersInPot>,numWinners<M(seat,winningAmount,handRank,numKickerRanks<kickerRanks>,numWinningCards<M(playerOrboard,pos, <FIXME>card</FIXME> )>)>,boardNo,isLoHand
			BYTE potNo;
			INT64 startAmount;
			INT64 endAmount;	// maybe half amount if pot is split, usually zero if no split
			Atf::LAtfVector< BYTE, 1 > playersInPot;	// if no showdown reached, this vector is empty
			Atf::LAtfVector< WinnerInfo, 1 > winners;
			BYTE boardNo;	// 0 - non RIT, 1 - RIT first board, 2 - RIT second board
			bool isLoHand;

			Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_POT_DISTRIBUTION; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_POT_DISTRIBUTION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION(Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION&&);
			Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION& operator=(Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION(const Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION&) = default;
			Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION& operator=(const Protocol_MSG_TABLE_SUBSCR_POT_DISTRIBUTION&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST : public Atf::MessageProtocol
		{
			// 12 - seat,textId
			INT8 seat;	//alias s
			INT16 textId;

			Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_USER_MINI_CHAT_BROADCAST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_USER_MINI_CHAT_BROADCAST; }
			const char *getMsgIdString() const override { return "MSG_TABLE_USER_MINI_CHAT_BROADCAST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_SUBSCR_ANIMATION : public Atf::MessageProtocol
		{
			// s14M() - userId,seat,animationTypeId,M()
			PString userId;	//alias u
			INT8 seat;	//alias s
			UINT32 animationTypeId;	// defined in upserver.h
			Atf::CopyableMsgBody extraInfo;

			Protocol_MSG_TABLE_SUBSCR_ANIMATION();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_ANIMATION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_ANIMATION; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_ANIMATION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_ANIMATION(Protocol_MSG_TABLE_SUBSCR_ANIMATION&&);
			Protocol_MSG_TABLE_SUBSCR_ANIMATION& operator=(Protocol_MSG_TABLE_SUBSCR_ANIMATION&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_ANIMATION(const Protocol_MSG_TABLE_SUBSCR_ANIMATION&) = default;
			Protocol_MSG_TABLE_SUBSCR_ANIMATION& operator=(const Protocol_MSG_TABLE_SUBSCR_ANIMATION&) = default;
#endif
#endif
		};

		// PYR-98733
		struct Protocol_MSG_TABLE_SUBSCR_THROW : public Atf::MessageProtocol
		{
			// 114 - seatFrom,seatTo,throwableTypeId
			INT8 seatFrom;	//alias sF
			INT8 seatTo;	//alias sT
			UINT32 throwableTypeId;	// enum Throwable::Type in Throwables.h

			Protocol_MSG_TABLE_SUBSCR_THROW();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_THROW&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_THROW; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_THROW"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		// PYR-123867
		struct KnockedOutBy
		{
			// M(1888) - M(seat,bountyWon,spinBountyWon,ownBountyIncrease)
			INT8 seat;
			INT64 bountyWon;
			INT64 spinBountyWon;
			INT64 ownBountyIncrease;

			KnockedOutBy();
			void clear();
			bool equals(const KnockedOutBy&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct KnockedOut
		{
			// M(14<M(1888)>44) - M(seat,numKnockedOutBy<M(seat,bountyWon,spinBountyWon,ownBountyIncrease)>,spinMultiplier,animationType)
			INT8 seat;
			Atf::LAtfVector< KnockedOutBy , 4 > knockedOutBy;
			INT32 spinMultiplier;
			UINT32 animationType;

			KnockedOut();
			void clear();
			bool equals(const KnockedOut&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			KnockedOut(KnockedOut&&);
			KnockedOut& operator=(KnockedOut&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			KnockedOut(const KnockedOut&) = default;
			KnockedOut& operator=(const KnockedOut&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_SUBSCR_KNOCKOUT : public Atf::MessageProtocol
		{
			// 4<M(14<M(1888)>44)> - numKnockedOut<M(seat,numKnockedOutBy<M(seat,bountyWon,spinBountyWon,ownBountyIncrease)>,spinMultiplier,animationType)>
			Atf::LAtfVector< KnockedOut , 4 > knockedOut;

			Protocol_MSG_TABLE_SUBSCR_KNOCKOUT();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_SUBSCR_KNOCKOUT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_SUBSCR_KNOCKOUT; }
			const char *getMsgIdString() const override { return "MSG_TABLE_SUBSCR_KNOCKOUT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_SUBSCR_KNOCKOUT(Protocol_MSG_TABLE_SUBSCR_KNOCKOUT&&);
			Protocol_MSG_TABLE_SUBSCR_KNOCKOUT& operator=(Protocol_MSG_TABLE_SUBSCR_KNOCKOUT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_SUBSCR_KNOCKOUT(const Protocol_MSG_TABLE_SUBSCR_KNOCKOUT&) = default;
			Protocol_MSG_TABLE_SUBSCR_KNOCKOUT& operator=(const Protocol_MSG_TABLE_SUBSCR_KNOCKOUT&) = default;
#endif
#endif
		};

		// structs for publications

		struct TableSubscr_Chat	// Path {0}
		{
			// 482114ss4M()444 - clentOrdinal,handId,eventCode,seat,action,amount,user,content,amount2,M(),timestamp,eventSeqId,brandMask
			UINT32 clentOrdinal;
			UINT64 handId;	//alias hI
			INT16 eventCode;
			INT8 seat;	//alias s	// not used for real chat, seat info can be determined at the eventCode
			INT8 action;	//alias a	// flags for real chat
			UINT32 amount;	//alias v	// 0 for real chat
			PString user;
			PString content;
			INT32 amount2;	//alias v2
			Atf::CopyableMsgBody msgClientExtra;
			UINT32 timestamp;	// this is real time stamp in seconds: plib_time(NULL)
			UINT32 eventSeqId;	//alias eventSq
			UINT32 brandMask;

			TableSubscr_Chat();
			void clear();
			bool equals(const TableSubscr_Chat&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSubscr_Chat(TableSubscr_Chat&&);
			TableSubscr_Chat& operator=(TableSubscr_Chat&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSubscr_Chat(const TableSubscr_Chat&) = default;
			TableSubscr_Chat& operator=(const TableSubscr_Chat&) = default;
#endif
#endif
		};

		struct TableSubscr_Static	// Path {1}
		{
			struct _HappyHourInfoPublMsgType
			{
				Atf::LAtfVector< TableCommon::P_FppFactor , 2 > fppFactors;	// TODO: to be retired
				Atf::LAtfVector< TableCommon::P_FppFactorEx , 2 > fppFactorSiteMasks;
				mutable bool _is_empty_internal;

				_HappyHourInfoPublMsgType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_HappyHourInfoPublMsgType()); return _is_empty_internal; }
				bool equals(const _HappyHourInfoPublMsgType&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_HappyHourInfoPublMsgType(_HappyHourInfoPublMsgType&&);
				_HappyHourInfoPublMsgType& operator=(_HappyHourInfoPublMsgType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_HappyHourInfoPublMsgType(const _HappyHourInfoPublMsgType&) = default;
				_HappyHourInfoPublMsgType& operator=(const _HappyHourInfoPublMsgType&) = default;
#endif
#endif
			};

			//! ss41111111ss1s44244s4s41bsssss44M(2< <FIXME>TableCommon::P_FppFactor </FIXME> >2< <FIXME>TableCommon::P_FppFactorEx </FIXME> >)4848 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m - serverVersion,protocolVersion,tableId32Obsolete,handType,potStruct,tournamentType,isHiLo,isPlayMoney,isOneToOne,numOfSeats,tableName,nameSuffix,multiGameType,multiGameTypeDesc,stakeSmall,stakeBig,chatLang,minChipsLimit,maxBuyIn,currency,cap,itSessionId,clubId,dealOptions,isShowCity,createdBy,cancelledBy,voiceObjectAddress,voiceObjectUdpAddress,voiceObjectName,accessMask,scalePM,M(numFppFactors< <FIXME>TableCommon::P_FppFactor </FIXME> >,numFppFactorSiteMasks< <FIXME>TableCommon::P_FppFactorEx </FIXME> >),showObservFlags,tableId,noVppGainSiteId,tableFlags2, <FIXME>tableStakesObsolete</FIXME> ,numVariableAntes<variableAntes>,noVppGainSiteMask
			PString serverVersion;	// always ""
			PString protocolVersion;
			UINT32 tableId32Obsolete;
			BYTE handType;	//alias gm
			BYTE potStruct;	//alias lm
			BYTE tournamentType;
			BYTE isHiLo;
			BYTE isPlayMoney;
			BYTE isOneToOne;
			BYTE numOfSeats;
			PString tableName;
			PString nameSuffix;
			BYTE multiGameType;	// if it is not mutiple game, this field is zero
			PString multiGameTypeDesc;
			INT32 stakeSmall;	// isMultiGameFixedMixed ? LoBetGuard : StakeSmall;  // low bet
			INT32 stakeBig;	// isMultiGameFixedMixed ? HiBetGuard : StakeBig;    // hi bet
			UINT16 chatLang;
			INT32 minChipsLimit;	// min buyin
			INT32 maxBuyIn;	//alias mxBI	// max buyin
			PString currency;	// table currency
			INT32 cap;
			PString itSessionId;	// italy session
			UINT32 clubId;
			BYTE dealOptions;
			bool isShowCity;
			PString createdBy;
			PString cancelledBy;
			PString voiceObjectAddress;	// voice chat
			PString voiceObjectUdpAddress;
			PString voiceObjectName;
			UINT32 accessMask;
			UINT32 scalePM;
			_HappyHourInfoPublMsgType happyHourInfoPublMsg;

			UINT32 showObservFlags;
			UINT64 tableId;	//alias tI
			UINT32 noVppGainSiteId;
			UINT64 tableFlags2;
			TableCommon::TableStakes tableStakesObsolete;	// found to be duplicated with tableStakes in TableSubscr_Hand, so deprecated.
			Atf::LAtfVector< INT64, 4 > variableAntes;	// only populated if variable antes is available, indexed by "variableAnteIndex" in TableSubscr_Hand
			PSiteMask noVppGainSiteMask;

			TableSubscr_Static();
			void clear();
			bool equals(const TableSubscr_Static&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSubscr_Static(TableSubscr_Static&&);
			TableSubscr_Static& operator=(TableSubscr_Static&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSubscr_Static(const TableSubscr_Static&) = default;
			TableSubscr_Static& operator=(const TableSubscr_Static&) = default;
#endif
#endif
		};

		struct TableSubscr_Hand	// Path {2}
		{
			//! 84418s14442I8s4M()1 <FIXME>TableCommon::TableStakes</FIXME>  - handId,stakeSmall,stakeBig,dealer,lastHandId,adminMsg,round,ante,tableFlags,multiGameHands,clientMsgStrId,advertiseI18n,milestoneHandId,superstarShowdownResults,banner,M(),variableAnteIndex, <FIXME>tableStakes</FIXME> 
			UINT64 handId;	//alias hI	// current hand id
			UINT32 stakeSmall;	// lo bet
			UINT32 stakeBig;	// hi bet
			INT8 dealer;	// dealer position
			UINT64 lastHandId;	//alias lastHI	// last hand id
			PString adminMsg;
			INT8 round;	// may be break
			UINT32 ante;
			UINT32 tableFlags;	// published table flags
			INT32 multiGameHands;	// multigame hands
			UINT16 clientMsgStrId;	// client msg string id
			I18nPString advertiseI18n;
			UINT64 milestoneHandId;	//alias milestoneHI
			PString superstarShowdownResults;	// #18541 super star show down result
			INT32 banner;
			Atf::CopyableMsgBody tournMileStoneWinMsg;
			INT8 variableAnteIndex;	// index into TableSubscr_Static.variableAntes
			TableCommon::TableStakes tableStakes;

			TableSubscr_Hand();
			void clear();
			bool equals(const TableSubscr_Hand&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSubscr_Hand(TableSubscr_Hand&&);
			TableSubscr_Hand& operator=(TableSubscr_Hand&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSubscr_Hand(const TableSubscr_Hand&) = default;
			TableSubscr_Hand& operator=(const TableSubscr_Hand&) = default;
#endif
#endif
		};

		struct SidePot
		{
			// M(82) - M(amount,playersMask)
			INT64 amount;
			UINT16 playersMask;	// in-hand players who are eligible to win this pot

			SidePot();
			void clear();
			bool equals(const SidePot&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct PotCat	// define pot category info
		{
			// M(11<M(82)>4) - M(potCategoryId,numPots<M(amount,playersMask)>,rake)
			BYTE potCategoryId;
			Atf::LAtfVector< SidePot, 1 > pots;	// main pot also included here
			INT32 rake;

			PotCat();
			void clear();
			bool equals(const PotCat&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PotCat(PotCat&&);
			PotCat& operator=(PotCat&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PotCat(const PotCat&) = default;
			PotCat& operator=(const PotCat&) = default;
#endif
#endif
		};

		struct TableSubscr_ActivePlayer	// Path {3}
		{
			// 141<4>1<4>41444144b21<M(11<M(82)>4)> - activePlayer,rake,numPots<pots>,numColumns<columns>,totalPot,activeTBstate,activeTimeBank,capX,capY,actionTimeType,totalActionTime,remainingActionTime,isActionTimerPaused,multiActivePlayersMask,numPotCats<M(potCategoryId,numPots<M(amount,playersMask)>,rake)>
			INT8 activePlayer;	// display active player seat
			UINT32 rake;	// rake
			Atf::LAtfVector< UINT32, 1 > pots;	// pot amounts
			Atf::LAtfVector< UINT32, 1 > columns;	// chips columns
			UINT32 totalPot;	// total pot value including temp pot
			BYTE activeTBstate;	// active time bank status
			UINT32 activeTimeBank;	//alias activeTb	// active time bank balance
			INT32 capX;	// capX
			INT32 capY;	// capY  //TODO: temporary not comparison
			BYTE actionTimeType;
			UINT32 totalActionTime;
			UINT32 remainingActionTime;
			bool isActionTimerPaused;
			UINT16 multiActivePlayersMask;
			Atf::LAtfVector< PotCat, 1 > potCats;	// pot categories //TODO: temporary not comparison

			TableSubscr_ActivePlayer();
			void clear();
			bool equals(const TableSubscr_ActivePlayer&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSubscr_ActivePlayer(TableSubscr_ActivePlayer&&);
			TableSubscr_ActivePlayer& operator=(TableSubscr_ActivePlayer&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSubscr_ActivePlayer(const TableSubscr_ActivePlayer&) = default;
			TableSubscr_ActivePlayer& operator=(const TableSubscr_ActivePlayer&) = default;
#endif
#endif
		};

		struct TableSubscr_Board	// Path {4}  // this one has been phased out, it could be reused in the future
		{
			//! 1< <FIXME>TableCommon::P_Card </FIXME> > - numActiveBoardCards< <FIXME>TableCommon::P_Card </FIXME> >
			Atf::LAtfVector< TableCommon::P_Card , 1 > activeBoardCards;

			TableSubscr_Board();
			void clear();
			bool equals(const TableSubscr_Board&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSubscr_Board(TableSubscr_Board&&);
			TableSubscr_Board& operator=(TableSubscr_Board&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSubscr_Board(const TableSubscr_Board&) = default;
			TableSubscr_Board& operator=(const TableSubscr_Board&) = default;
#endif
#endif
		};

		struct TableSubscr_PlayerChips	// Path {5,x,0}
		{
			// 44111111424414bb48 - chips,chipsBet,isSittingIn,isSeatedAndConnected,allInFlag,inHand,seatIndicator,connectQuality,timeBank,numOfAllInsLeft,capN,totalBet,playerState,remainingStacks,hasCard,hasFolded,totalBetInUnfoldPot,playerState2
			UINT32 chips;	// chips
			UINT32 chipsBet;	// chips bet
			BYTE isSittingIn;	// sitting in
			BYTE isSeatedAndConnected;	// connected status after seated
			BYTE allInFlag;	// AllIn or Capped
			BYTE inHand;	// is player in this hand?
			BYTE seatIndicator;	// seat indicator
			INT8 connectQuality;	// connection quality
			UINT32 timeBank;	//alias tb	// time bank balance
			INT16 numOfAllInsLeft;	// num of AllIns remaining
			INT32 capN;	// capN - //TODO: temporary not comparison
			UINT32 totalBet;	// total bet  //PYR-16708
			BYTE playerState;
			UINT32 remainingStacks;	// for n-stack tournament
			bool hasCard;
			bool hasFolded;
			INT32 totalBetInUnfoldPot;	// PYR-77049
			UINT64 playerState2;	// PYR-95107

			TableSubscr_PlayerChips();
			void clear();
			bool equals(const TableSubscr_PlayerChips&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TableSubscr_PlayerProfile	// Path {5,x,1}
		{
			//! ss44414ss14444M() <FIXME>BrandProt::BrandImageList</FIXME> 8s444888 - user,city,imageId,siteId,vipStatus,publProp,bounty,promoImageCode,country,showCountry,headBounty,hallOfFame,mileStoneAward,clientDevice,M(), <FIXME>brandImages</FIXME> ,altBounty_tournId,altBounty_admission,altBounty_tChips,earlyBirdMultiplier,earlyBirdMins,amountToHeadIfEliminated,baseWinIfEliminated,maxBonusWinIfEliminated
			PString user;	// user
			PString city;	// city
			UINT32 imageId;	//
			UINT32 siteId;	// client site id
			UINT32 vipStatus;	// obsolete: vip status
			BYTE publProp;	// publish property flag
			UINT32 bounty;	// bounty
			PString promoImageCode;	// promo image name
			PString country;	// country
			BYTE showCountry;	// actually same as NOT showCity
			UINT32 headBounty;
			UINT32 hallOfFame;
			UINT32 mileStoneAward;
			UINT32 clientDevice;
			Atf::CopyableMsgBody userPropertyMsg;
			BrandProt::BrandImageList brandImages;
			UINT64 altBounty_tournId;
			PString altBounty_admission;
			INT32 altBounty_tChips;
			INT32 earlyBirdMultiplier;
			INT32 earlyBirdMins;
			INT64 amountToHeadIfEliminated;	// unscaled for PM
			INT64 baseWinIfEliminated;	// unscaled for PM
			INT64 maxBonusWinIfEliminated;	// unscaled for PM

			TableSubscr_PlayerProfile();
			void clear();
			bool equals(const TableSubscr_PlayerProfile&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSubscr_PlayerProfile(TableSubscr_PlayerProfile&&);
			TableSubscr_PlayerProfile& operator=(TableSubscr_PlayerProfile&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSubscr_PlayerProfile(const TableSubscr_PlayerProfile&) = default;
			TableSubscr_PlayerProfile& operator=(const TableSubscr_PlayerProfile&) = default;
#endif
#endif
		};

		//struct SubscrShowcard  // retired!
		//{
		//	BYTE showFlag;
		//
		//	if (showFlag != Closed && showFlag != ClosedButShown)
		//	{
		//		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::P_Card card;
		//	}
		//};
		//
		//struct TableSubscr_PlayerCards    // Path {5,x,2}   // retired!
		//{
		//	l1vector<SubscrShowcard> playerCards;
		//};

		struct PowerOnCard
		{
			// M(41) - M(powerId,powerPlayer)
			INT32 powerId;	//alias pI
			BYTE powerPlayer;

			PowerOnCard();
			void clear();
			bool equals(const PowerOnCard&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct SubscrPlayerCard
		{
			//! M(1 <FIXME>TableCommon::P_Card</FIXME> 21<M(41)>) - M(showFlag, <FIXME>cardOrIndex</FIXME> ,visibilityMask,numPowers<M(powerId,powerPlayer)>)
			BYTE showFlag;
			TableCommon::P_Card cardOrIndex;
			INT16 visibilityMask;
			Atf::LAtfVector< PowerOnCard, 1 > powers;

			SubscrPlayerCard();
			void clear();
			bool equals(const SubscrPlayerCard&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SubscrPlayerCard(SubscrPlayerCard&&);
			SubscrPlayerCard& operator=(SubscrPlayerCard&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SubscrPlayerCard(const SubscrPlayerCard&) = default;
			SubscrPlayerCard& operator=(const SubscrPlayerCard&) = default;
#endif
#endif
		};

		struct TableSubscr_PlayerCards_Dict	// Path {5,x,3}
		{
			//! 1<M(1 <FIXME>TableCommon::P_Card</FIXME> 21<M(41)>)>11 - numPlayerCards<M(showFlag, <FIXME>cardOrIndex</FIXME> ,visibilityMask,numPowers<M(powerId,powerPlayer)>)>,numSwapped,swapRound
			Atf::LAtfVector< SubscrPlayerCard, 1 > playerCards;
			INT8 numSwapped;	// for Swap Holdem only
			INT8 swapRound;	// for Swap Holdem only

			TableSubscr_PlayerCards_Dict();
			void clear();
			bool equals(const TableSubscr_PlayerCards_Dict&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSubscr_PlayerCards_Dict(TableSubscr_PlayerCards_Dict&&);
			TableSubscr_PlayerCards_Dict& operator=(TableSubscr_PlayerCards_Dict&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSubscr_PlayerCards_Dict(const TableSubscr_PlayerCards_Dict&) = default;
			TableSubscr_PlayerCards_Dict& operator=(const TableSubscr_PlayerCards_Dict&) = default;
#endif
#endif
		};

		struct TableSubscr_AllBoards	// Path {6}
		{
			//! 1<1< <FIXME>TableCommon::P_Card </FIXME> >> - numAllBoards<numActiveBoardCards< <FIXME>TableCommon::P_Card </FIXME> >>
			Atf::LAtfVector< TableSubscr_Board, 1 > allBoards;

			TableSubscr_AllBoards();
			void clear();
			bool equals(const TableSubscr_AllBoards&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSubscr_AllBoards(TableSubscr_AllBoards&&);
			TableSubscr_AllBoards& operator=(TableSubscr_AllBoards&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSubscr_AllBoards(const TableSubscr_AllBoards&) = default;
			TableSubscr_AllBoards& operator=(const TableSubscr_AllBoards&) = default;
#endif
#endif
		};

		struct TableSubscr_Dynamic	// Path {7}
		{
			// 4 - numPublSubscribers
			INT32 numPublSubscribers;

			TableSubscr_Dynamic();
			void clear();
			bool equals(const TableSubscr_Dynamic&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TableSubscr_AutoDeal	// Path {8}
		{
			// 111 - autoDealState,numInterested,numRemaining
			INT8 autoDealState;
			INT8 numInterested;
			INT8 numRemaining;

			TableSubscr_AutoDeal();
			void clear();
			bool equals(const TableSubscr_AutoDeal&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct PowerBasicInfo	// obsoleted
		{
			// M(44ss) - M(powerId,cost,powerName,desc)
			INT32 powerId;	//alias pI
			INT32 cost;
			PString powerName;
			PString desc;

			PowerBasicInfo();
			void clear();
			bool equals(const PowerBasicInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PowerBasicInfo(PowerBasicInfo&&);
			PowerBasicInfo& operator=(PowerBasicInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PowerBasicInfo(const PowerBasicInfo&) = default;
			PowerBasicInfo& operator=(const PowerBasicInfo&) = default;
#endif
#endif
		};

		struct TablePowerSubscr_PowerList	// Path {9,0}
		{
			// 4<M(44ss)>4444b - numOldPowers<M(powerId,cost,powerName,desc)>,maxPowersPerPlayer,numDiscardedPowers,powersLimitPerStreet,powersLimitPerHand,isManaEnabled
			Atf::LAtfVector< PowerBasicInfo, 4 > oldPowers;	// obsoleted, no data will be populated in this vector
			INT32 maxPowersPerPlayer;
			INT32 numDiscardedPowers;
			INT32 powersLimitPerStreet;
			INT32 powersLimitPerHand;
			bool isManaEnabled;

			TablePowerSubscr_PowerList();
			void clear();
			bool equals(const TablePowerSubscr_PowerList&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TablePowerSubscr_PowerList(TablePowerSubscr_PowerList&&);
			TablePowerSubscr_PowerList& operator=(TablePowerSubscr_PowerList&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TablePowerSubscr_PowerList(const TablePowerSubscr_PowerList&) = default;
			TablePowerSubscr_PowerList& operator=(const TablePowerSubscr_PowerList&) = default;
#endif
#endif
		};

		struct TablePowerSubscr_PowerPot	// Path {9,1}
		{
			// 4 - carryOverAmount
			INT32 carryOverAmount;

			TablePowerSubscr_PowerPot();
			void clear();
			bool equals(const TablePowerSubscr_PowerPot&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct CardRedealt	// obsoleted
		{
			//! M( <FIXME>TableCommon::P_Card</FIXME>  <FIXME>TableCommon::P_Card</FIXME> ) - M( <FIXME>newCard</FIXME> , <FIXME>oldCard</FIXME> )
			TableCommon::P_Card newCard;
			TableCommon::P_Card oldCard;

			CardRedealt();
			void clear();
			bool equals(const CardRedealt&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			CardRedealt(CardRedealt&&);
			CardRedealt& operator=(CardRedealt&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			CardRedealt(const CardRedealt&) = default;
			CardRedealt& operator=(const CardRedealt&) = default;
#endif
#endif
		};

		struct PowerInfoOnBoardCard
		{
			// M(1<M(41)>1) - M(numPowers<M(powerId,powerPlayer)>,flag)
			Atf::LAtfVector< PowerOnCard, 1 > powers;
			INT8 flag;	// used for card freezing

			PowerInfoOnBoardCard();
			void clear();
			bool equals(const PowerInfoOnBoardCard&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PowerInfoOnBoardCard(PowerInfoOnBoardCard&&);
			PowerInfoOnBoardCard& operator=(PowerInfoOnBoardCard&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PowerInfoOnBoardCard(const PowerInfoOnBoardCard&) = default;
			PowerInfoOnBoardCard& operator=(const PowerInfoOnBoardCard&) = default;
#endif
#endif
		};

		struct TablePowerSubscr_BoardRedealt	// Path {9,2}
		{
			//! 1<M( <FIXME>TableCommon::P_Card</FIXME>  <FIXME>TableCommon::P_Card</FIXME> )>1<1>1<1>1<1>1<M(1<M(41)>1)>1<M(1<M(41)>1)>1 - numBoardCardChangesOld<M( <FIXME>newCard</FIXME> , <FIXME>oldCard</FIXME> )>,numBoard1CardsFlagsOld<board1CardsFlagsOld>,numBoard2CardsFlagsOld<board2CardsFlagsOld>,numBoardCardsStreet<boardCardsStreet>,numBoard1<M(numPowers<M(powerId,powerPlayer)>,flag)>,numBoard2<M(numPowers<M(powerId,powerPlayer)>,flag)>,maxBoardWidth
			Atf::LAtfVector< CardRedealt, 1 > boardCardChangesOld;	// obsoleted
			Atf::LAtfVector< INT8, 1 > board1CardsFlagsOld;	// obsoleted
			Atf::LAtfVector< INT8, 1 > board2CardsFlagsOld;	// obsoleted
			Atf::LAtfVector< INT8, 1 > boardCardsStreet;
			Atf::LAtfVector< PowerInfoOnBoardCard, 1 > board1;
			Atf::LAtfVector< PowerInfoOnBoardCard, 1 > board2;
			BYTE maxBoardWidth;	// maximum number of cards in the first board

			TablePowerSubscr_BoardRedealt();
			void clear();
			bool equals(const TablePowerSubscr_BoardRedealt&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TablePowerSubscr_BoardRedealt(TablePowerSubscr_BoardRedealt&&);
			TablePowerSubscr_BoardRedealt& operator=(TablePowerSubscr_BoardRedealt&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TablePowerSubscr_BoardRedealt(const TablePowerSubscr_BoardRedealt&) = default;
			TablePowerSubscr_BoardRedealt& operator=(const TablePowerSubscr_BoardRedealt&) = default;
#endif
#endif
		};

		struct TablePowerSubscr_PlayerInfo	// Path {9,3,x}
		{
			// 1414 - numPowers,currentMana,numOfPendingSecrets,manaRewards
			BYTE numPowers;
			UINT32 currentMana;
			INT8 numOfPendingSecrets;
			UINT32 manaRewards;

			TablePowerSubscr_PlayerInfo();
			void clear();
			bool equals(const TablePowerSubscr_PlayerInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TablePowerSubscr_SilenceStateInfo	// Path {9,4,0}
		{
			// b2 - silenceIsOn,nonSilencedSeatsMask
			bool silenceIsOn;
			INT16 nonSilencedSeatsMask;

			TablePowerSubscr_SilenceStateInfo();
			void clear();
			bool equals(const TablePowerSubscr_SilenceStateInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TablePowerSubscr_SenseStateInfo	// Path {9,4,1}
		{
			// 1<2> - numTokensNum<tokensNum>
			Atf::LAtfVector< INT16, 1 > tokensNum;

			TablePowerSubscr_SenseStateInfo();
			void clear();
			bool equals(const TablePowerSubscr_SenseStateInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TablePowerSubscr_SenseStateInfo(TablePowerSubscr_SenseStateInfo&&);
			TablePowerSubscr_SenseStateInfo& operator=(TablePowerSubscr_SenseStateInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TablePowerSubscr_SenseStateInfo(const TablePowerSubscr_SenseStateInfo&) = default;
			TablePowerSubscr_SenseStateInfo& operator=(const TablePowerSubscr_SenseStateInfo&) = default;
#endif
#endif
		};

		struct TablePowerSubscr_CloakedStateInfo	// Path {9,4,2}
		{
			// 1<1>1<1> - numCloakedSeatsNow<cloakedSeatsNow>,numCloakedSeatsPerHand<cloakedSeatsPerHand>
			Atf::LAtfVector< INT8, 1 > cloakedSeatsNow;
			Atf::LAtfVector< INT8, 1 > cloakedSeatsPerHand;

			TablePowerSubscr_CloakedStateInfo();
			void clear();
			bool equals(const TablePowerSubscr_CloakedStateInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TablePowerSubscr_CloakedStateInfo(TablePowerSubscr_CloakedStateInfo&&);
			TablePowerSubscr_CloakedStateInfo& operator=(TablePowerSubscr_CloakedStateInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TablePowerSubscr_CloakedStateInfo(const TablePowerSubscr_CloakedStateInfo&) = default;
			TablePowerSubscr_CloakedStateInfo& operator=(const TablePowerSubscr_CloakedStateInfo&) = default;
#endif
#endif
		};

		struct CardVisibility
		{
			// 112 - seat,position,visibilityMask
			INT8 seat;	//alias s
			INT8 position;
			INT16 visibilityMask;

			CardVisibility();
			void clear();
			bool equals(const CardVisibility&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct SensedCardIndex
		{
			//! M( <FIXME>TableCommon::P_Card</FIXME> 21<M(41)>) - M( <FIXME>cardOrIndex</FIXME> ,visibilityMask,numPowers<M(powerId,powerPlayer)>)
			TableCommon::P_Card cardOrIndex;	// when the sensed card visible for everybody, publish card value
			INT16 visibilityMask;
			Atf::LAtfVector< PowerOnCard, 1 > powers;

			SensedCardIndex();
			void clear();
			bool equals(const SensedCardIndex&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SensedCardIndex(SensedCardIndex&&);
			SensedCardIndex& operator=(SensedCardIndex&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SensedCardIndex(const SensedCardIndex&) = default;
			SensedCardIndex& operator=(const SensedCardIndex&) = default;
#endif
#endif
		};

		struct TablePowerSubscr_CardsVisibility	// Path {9,5}
		{
			//! 1<112>1<M( <FIXME>TableCommon::P_Card</FIXME> 21<M(41)>)> - numVisInfo<seat,position,visibilityMask>,numSensedCards<M( <FIXME>cardOrIndex</FIXME> ,visibilityMask,numPowers<M(powerId,powerPlayer)>)>
			Atf::LAtfVector< CardVisibility, 1 > visInfo;	// obsoleted, no data will be populated!
			Atf::LAtfVector< SensedCardIndex, 1 > sensedCards;

			TablePowerSubscr_CardsVisibility();
			void clear();
			bool equals(const TablePowerSubscr_CardsVisibility&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TablePowerSubscr_CardsVisibility(TablePowerSubscr_CardsVisibility&&);
			TablePowerSubscr_CardsVisibility& operator=(TablePowerSubscr_CardsVisibility&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TablePowerSubscr_CardsVisibility(const TablePowerSubscr_CardsVisibility&) = default;
			TablePowerSubscr_CardsVisibility& operator=(const TablePowerSubscr_CardsVisibility&) = default;
#endif
#endif
		};

		struct TablePowerSubscr_PowerStateInfo	// Path {9,6,x}
		{
			// 4b1M() - powerId,isActive,playerSeat,M()
			INT32 powerId;	//alias pI
			bool isActive;
			INT8 playerSeat;
			Atf::CopyableMsgBody extInfo;

			TablePowerSubscr_PowerStateInfo();
			void clear();
			bool equals(const TablePowerSubscr_PowerStateInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TablePowerSubscr_PowerStateInfo(TablePowerSubscr_PowerStateInfo&&);
			TablePowerSubscr_PowerStateInfo& operator=(TablePowerSubscr_PowerStateInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TablePowerSubscr_PowerStateInfo(const TablePowerSubscr_PowerStateInfo&) = default;
			TablePowerSubscr_PowerStateInfo& operator=(const TablePowerSubscr_PowerStateInfo&) = default;
#endif
#endif
		};

		struct PowerIndicator
		{
			// M(441) - M(powerId,powerCardUniqueId,powerPlayer)
			INT32 powerId;	//alias pI
			INT32 powerCardUniqueId;
			BYTE powerPlayer;

			PowerIndicator();
			void clear();
			bool equals(const PowerIndicator&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TablePowerSubscr_PowerIndicators	// Path {9,7}
		{
			// 1<M(441)> - numPowers<M(powerId,powerCardUniqueId,powerPlayer)>
			Atf::LAtfVector< PowerIndicator, 1 > powers;

			TablePowerSubscr_PowerIndicators();
			void clear();
			bool equals(const TablePowerSubscr_PowerIndicators&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TablePowerSubscr_PowerIndicators(TablePowerSubscr_PowerIndicators&&);
			TablePowerSubscr_PowerIndicators& operator=(TablePowerSubscr_PowerIndicators&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TablePowerSubscr_PowerIndicators(const TablePowerSubscr_PowerIndicators&) = default;
			TablePowerSubscr_PowerIndicators& operator=(const TablePowerSubscr_PowerIndicators&) = default;
#endif
#endif
		};

		struct TablePowerSubscr_PowerInfo	// Path {9,8,x}
		{
			// 44M() - powerId,cost,M()
			INT32 powerId;	//alias pI
			INT32 cost;
			//PString powerName;  // client does not use this string
			//PString desc;       // client does not use this string
			Atf::CopyableMsgBody paramBody;	// for power static parameters client needs

			TablePowerSubscr_PowerInfo();
			void clear();
			bool equals(const TablePowerSubscr_PowerInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TablePowerSubscr_PowerInfo(TablePowerSubscr_PowerInfo&&);
			TablePowerSubscr_PowerInfo& operator=(TablePowerSubscr_PowerInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TablePowerSubscr_PowerInfo(const TablePowerSubscr_PowerInfo&) = default;
			TablePowerSubscr_PowerInfo& operator=(const TablePowerSubscr_PowerInfo&) = default;
#endif
#endif
		};

		struct TablePowerSubscr_PowerMouseOver	// Path {9,9,x}
		{
			// 1 - position
			INT8 position;	// Power card currently on mouseover, -1 for none.

			TablePowerSubscr_PowerMouseOver();
			void clear();
			bool equals(const TablePowerSubscr_PowerMouseOver&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct AppendOrUpdateLeafMsg	// @no_thin_version
		{
			struct _Path0Type
			{
				TableSubscr_Chat chat;
				mutable bool _is_empty_internal;

				_Path0Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path0Type()); return _is_empty_internal; }
				bool equals(const _Path0Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path0Type(_Path0Type&&);
				_Path0Type& operator=(_Path0Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path0Type(const _Path0Type&) = default;
				_Path0Type& operator=(const _Path0Type&) = default;
#endif
#endif
			};

			struct _Path1Type
			{
				TableSubscr_Static staticInfo;
				mutable bool _is_empty_internal;

				_Path1Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path1Type()); return _is_empty_internal; }
				bool equals(const _Path1Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path1Type(_Path1Type&&);
				_Path1Type& operator=(_Path1Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path1Type(const _Path1Type&) = default;
				_Path1Type& operator=(const _Path1Type&) = default;
#endif
#endif
			};

			struct _Path2Type
			{
				TableSubscr_Hand hand;
				mutable bool _is_empty_internal;

				_Path2Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path2Type()); return _is_empty_internal; }
				bool equals(const _Path2Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path2Type(_Path2Type&&);
				_Path2Type& operator=(_Path2Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path2Type(const _Path2Type&) = default;
				_Path2Type& operator=(const _Path2Type&) = default;
#endif
#endif
			};

			struct _Path3Type
			{
				TableSubscr_ActivePlayer activePlayer;
				mutable bool _is_empty_internal;

				_Path3Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path3Type()); return _is_empty_internal; }
				bool equals(const _Path3Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path3Type(_Path3Type&&);
				_Path3Type& operator=(_Path3Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path3Type(const _Path3Type&) = default;
				_Path3Type& operator=(const _Path3Type&) = default;
#endif
#endif
			};

			struct _Path5x0Type
			{
				TableSubscr_PlayerChips chips;
				mutable bool _is_empty_internal;

				_Path5x0Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path5x0Type()); return _is_empty_internal; }
				bool equals(const _Path5x0Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _Path5x1Type
			{
				TableSubscr_PlayerProfile profile;
				mutable bool _is_empty_internal;

				_Path5x1Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path5x1Type()); return _is_empty_internal; }
				bool equals(const _Path5x1Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path5x1Type(_Path5x1Type&&);
				_Path5x1Type& operator=(_Path5x1Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path5x1Type(const _Path5x1Type&) = default;
				_Path5x1Type& operator=(const _Path5x1Type&) = default;
#endif
#endif
			};

			struct _Path5x3Type
			{
				TableSubscr_PlayerCards_Dict cards;
				mutable bool _is_empty_internal;

				_Path5x3Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path5x3Type()); return _is_empty_internal; }
				bool equals(const _Path5x3Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path5x3Type(_Path5x3Type&&);
				_Path5x3Type& operator=(_Path5x3Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path5x3Type(const _Path5x3Type&) = default;
				_Path5x3Type& operator=(const _Path5x3Type&) = default;
#endif
#endif
			};

			struct _Path6Type
			{
				TableSubscr_AllBoards allBoards;
				mutable bool _is_empty_internal;

				_Path6Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path6Type()); return _is_empty_internal; }
				bool equals(const _Path6Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path6Type(_Path6Type&&);
				_Path6Type& operator=(_Path6Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path6Type(const _Path6Type&) = default;
				_Path6Type& operator=(const _Path6Type&) = default;
#endif
#endif
			};

			struct _Path7Type
			{
				TableSubscr_Dynamic dynamic;
				mutable bool _is_empty_internal;

				_Path7Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path7Type()); return _is_empty_internal; }
				bool equals(const _Path7Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _Path8Type
			{
				TableSubscr_AutoDeal autoDeal;
				mutable bool _is_empty_internal;

				_Path8Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path8Type()); return _is_empty_internal; }
				bool equals(const _Path8Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _Path90Type
			{
				TablePowerSubscr_PowerList powerList;
				mutable bool _is_empty_internal;

				_Path90Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path90Type()); return _is_empty_internal; }
				bool equals(const _Path90Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path90Type(_Path90Type&&);
				_Path90Type& operator=(_Path90Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path90Type(const _Path90Type&) = default;
				_Path90Type& operator=(const _Path90Type&) = default;
#endif
#endif
			};

			struct _Path91Type
			{
				TablePowerSubscr_PowerPot powerPot;
				mutable bool _is_empty_internal;

				_Path91Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path91Type()); return _is_empty_internal; }
				bool equals(const _Path91Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _Path92Type
			{
				TablePowerSubscr_BoardRedealt boardRedealt;
				mutable bool _is_empty_internal;

				_Path92Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path92Type()); return _is_empty_internal; }
				bool equals(const _Path92Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path92Type(_Path92Type&&);
				_Path92Type& operator=(_Path92Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path92Type(const _Path92Type&) = default;
				_Path92Type& operator=(const _Path92Type&) = default;
#endif
#endif
			};

			struct _Path93xType
			{
				TablePowerSubscr_PlayerInfo powerPlayerInfo;
				mutable bool _is_empty_internal;

				_Path93xType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path93xType()); return _is_empty_internal; }
				bool equals(const _Path93xType&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _Path940Type
			{
				TablePowerSubscr_SilenceStateInfo silenceStateInfo;
				mutable bool _is_empty_internal;

				_Path940Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path940Type()); return _is_empty_internal; }
				bool equals(const _Path940Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			struct _Path941Type
			{
				TablePowerSubscr_SenseStateInfo senseStateInfo;
				mutable bool _is_empty_internal;

				_Path941Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path941Type()); return _is_empty_internal; }
				bool equals(const _Path941Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path941Type(_Path941Type&&);
				_Path941Type& operator=(_Path941Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path941Type(const _Path941Type&) = default;
				_Path941Type& operator=(const _Path941Type&) = default;
#endif
#endif
			};

			struct _Path942Type
			{
				TablePowerSubscr_CloakedStateInfo cloakedStateInfo;
				mutable bool _is_empty_internal;

				_Path942Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path942Type()); return _is_empty_internal; }
				bool equals(const _Path942Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path942Type(_Path942Type&&);
				_Path942Type& operator=(_Path942Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path942Type(const _Path942Type&) = default;
				_Path942Type& operator=(const _Path942Type&) = default;
#endif
#endif
			};

			struct _Path95Type
			{
				TablePowerSubscr_CardsVisibility cardsVisibility;
				mutable bool _is_empty_internal;

				_Path95Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path95Type()); return _is_empty_internal; }
				bool equals(const _Path95Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path95Type(_Path95Type&&);
				_Path95Type& operator=(_Path95Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path95Type(const _Path95Type&) = default;
				_Path95Type& operator=(const _Path95Type&) = default;
#endif
#endif
			};

			struct _Path96xType
			{
				TablePowerSubscr_PowerStateInfo powerStateInfo;
				mutable bool _is_empty_internal;

				_Path96xType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path96xType()); return _is_empty_internal; }
				bool equals(const _Path96xType&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path96xType(_Path96xType&&);
				_Path96xType& operator=(_Path96xType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path96xType(const _Path96xType&) = default;
				_Path96xType& operator=(const _Path96xType&) = default;
#endif
#endif
			};

			struct _Path97Type
			{
				TablePowerSubscr_PowerIndicators powerIndicators;
				mutable bool _is_empty_internal;

				_Path97Type();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path97Type()); return _is_empty_internal; }
				bool equals(const _Path97Type&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path97Type(_Path97Type&&);
				_Path97Type& operator=(_Path97Type&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path97Type(const _Path97Type&) = default;
				_Path97Type& operator=(const _Path97Type&) = default;
#endif
#endif
			};

			struct _Path98xType
			{
				TablePowerSubscr_PowerInfo powerInfo;
				mutable bool _is_empty_internal;

				_Path98xType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path98xType()); return _is_empty_internal; }
				bool equals(const _Path98xType&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_Path98xType(_Path98xType&&);
				_Path98xType& operator=(_Path98xType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_Path98xType(const _Path98xType&) = default;
				_Path98xType& operator=(const _Path98xType&) = default;
#endif
#endif
			};

			struct _Path99xType
			{
				TablePowerSubscr_PowerMouseOver powerMoouseOver;
				mutable bool _is_empty_internal;

				_Path99xType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_Path99xType()); return _is_empty_internal; }
				bool equals(const _Path99xType&) const;
				const char *toTraceString(PString& _str) const;
				const char *toXmlString(const char *_element, PString& _str) const;
				bool fromXmlString(const PString& _str);
				void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
				void parseMsg(CommMsgParser& _parser);
				const char *toJSONString(PString& _str) const;
				void fromJSONString(const PString& _str);
				static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			};

			//! 2<2> <FIXME_COND_IF> M(482114ss4M()444) <FIXME_COND_ELSE> M(ss41111111ss1s44244s4s41bsssss44M(2< <FIXME>TableCommon::P_FppFactor </FIXME> >2< <FIXME>TableCommon::P_FppFactorEx </FIXME> >)4848 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m) <FIXME_COND_ELSE> M(84418s14442I8s4M()1 <FIXME>TableCommon::TableStakes</FIXME> ) <FIXME_COND_ELSE> M(141<4>1<4>41444144b21<M(11<M(82)>4)>) <FIXME_COND_ELSE> M(44111111424414bb48) <FIXME_COND_ELSE> M(ss44414ss14444M() <FIXME>BrandProt::BrandImageList</FIXME> 8s444888) <FIXME_COND_ELSE> M(1<M(1 <FIXME>TableCommon::P_Card</FIXME> 21<M(41)>)>11) <FIXME_COND_ELSE> M(1<1< <FIXME>TableCommon::P_Card </FIXME> >>) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M(111) <FIXME_COND_ELSE> M(4<M(44ss)>4444b) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M(1<M( <FIXME>TableCommon::P_Card</FIXME>  <FIXME>TableCommon::P_Card</FIXME> )>1<1>1<1>1<1>1<M(1<M(41)>1)>1<M(1<M(41)>1)>1) <FIXME_COND_ELSE> M(1414) <FIXME_COND_ELSE> M(b2) <FIXME_COND_ELSE> M(1<2>) <FIXME_COND_ELSE> M(1<1>1<1>) <FIXME_COND_ELSE> M(1<112>1<M( <FIXME>TableCommon::P_Card</FIXME> 21<M(41)>)>) <FIXME_COND_ELSE> M(4b1M()) <FIXME_COND_ELSE> M(1<M(441)>) <FIXME_COND_ELSE> M(44M()) <FIXME_COND_ELSE> M(1) <FIXME_COND_ENDIF>  - numPath<path> <FIXME_COND_IF> ,M(clentOrdinal,handId,eventCode,seat,action,amount,user,content,amount2,M(),timestamp,eventSeqId,brandMask) <FIXME_COND_ELSE> ,M(serverVersion,protocolVersion,tableId32Obsolete,handType,potStruct,tournamentType,isHiLo,isPlayMoney,isOneToOne,numOfSeats,tableName,nameSuffix,multiGameType,multiGameTypeDesc,stakeSmall,stakeBig,chatLang,minChipsLimit,maxBuyIn,currency,cap,itSessionId,clubId,dealOptions,isShowCity,createdBy,cancelledBy,voiceObjectAddress,voiceObjectUdpAddress,voiceObjectName,accessMask,scalePM,M(numFppFactors< <FIXME>TableCommon::P_FppFactor </FIXME> >,numFppFactorSiteMasks< <FIXME>TableCommon::P_FppFactorEx </FIXME> >),showObservFlags,tableId,noVppGainSiteId,tableFlags2, <FIXME>tableStakesObsolete</FIXME> ,numVariableAntes<variableAntes>,noVppGainSiteMask) <FIXME_COND_ELSE> ,M(handId,stakeSmall,stakeBig,dealer,lastHandId,adminMsg,round,ante,tableFlags,multiGameHands,clientMsgStrId,advertiseI18n,milestoneHandId,superstarShowdownResults,banner,M(),variableAnteIndex, <FIXME>tableStakes</FIXME> ) <FIXME_COND_ELSE> ,M(activePlayer,rake,numPots<pots>,numColumns<columns>,totalPot,activeTBstate,activeTimeBank,capX,capY,actionTimeType,totalActionTime,remainingActionTime,isActionTimerPaused,multiActivePlayersMask,numPotCats<M(potCategoryId,numPots<M(amount,playersMask)>,rake)>) <FIXME_COND_ELSE> ,M(chips,chipsBet,isSittingIn,isSeatedAndConnected,allInFlag,inHand,seatIndicator,connectQuality,timeBank,numOfAllInsLeft,capN,totalBet,playerState,remainingStacks,hasCard,hasFolded,totalBetInUnfoldPot,playerState2) <FIXME_COND_ELSE> ,M(user,city,imageId,siteId,vipStatus,publProp,bounty,promoImageCode,country,showCountry,headBounty,hallOfFame,mileStoneAward,clientDevice,M(), <FIXME>brandImages</FIXME> ,altBounty_tournId,altBounty_admission,altBounty_tChips,earlyBirdMultiplier,earlyBirdMins,amountToHeadIfEliminated,baseWinIfEliminated,maxBonusWinIfEliminated) <FIXME_COND_ELSE> ,M(numPlayerCards<M(showFlag, <FIXME>cardOrIndex</FIXME> ,visibilityMask,numPowers<M(powerId,powerPlayer)>)>,numSwapped,swapRound) <FIXME_COND_ELSE> ,M(numAllBoards<numActiveBoardCards< <FIXME>TableCommon::P_Card </FIXME> >>) <FIXME_COND_ELSE> ,M(numPublSubscribers) <FIXME_COND_ELSE> ,M(autoDealState,numInterested,numRemaining) <FIXME_COND_ELSE> ,M(numOldPowers<M(powerId,cost,powerName,desc)>,maxPowersPerPlayer,numDiscardedPowers,powersLimitPerStreet,powersLimitPerHand,isManaEnabled) <FIXME_COND_ELSE> ,M(carryOverAmount) <FIXME_COND_ELSE> ,M(numBoardCardChangesOld<M( <FIXME>newCard</FIXME> , <FIXME>oldCard</FIXME> )>,numBoard1CardsFlagsOld<board1CardsFlagsOld>,numBoard2CardsFlagsOld<board2CardsFlagsOld>,numBoardCardsStreet<boardCardsStreet>,numBoard1<M(numPowers<M(powerId,powerPlayer)>,flag)>,numBoard2<M(numPowers<M(powerId,powerPlayer)>,flag)>,maxBoardWidth) <FIXME_COND_ELSE> ,M(numPowers,currentMana,numOfPendingSecrets,manaRewards) <FIXME_COND_ELSE> ,M(silenceIsOn,nonSilencedSeatsMask) <FIXME_COND_ELSE> ,M(numTokensNum<tokensNum>) <FIXME_COND_ELSE> ,M(numCloakedSeatsNow<cloakedSeatsNow>,numCloakedSeatsPerHand<cloakedSeatsPerHand>) <FIXME_COND_ELSE> ,M(numVisInfo<seat,position,visibilityMask>,numSensedCards<M( <FIXME>cardOrIndex</FIXME> ,visibilityMask,numPowers<M(powerId,powerPlayer)>)>) <FIXME_COND_ELSE> ,M(powerId,isActive,playerSeat,M()) <FIXME_COND_ELSE> ,M(numPowers<M(powerId,powerCardUniqueId,powerPlayer)>) <FIXME_COND_ELSE> ,M(powerId,cost,M()) <FIXME_COND_ELSE> ,M(position) <FIXME_COND_ENDIF> 
			Atf::LAtfVector< UINT16, 2 > path;
			_Path0Type path0;
			_Path1Type path1;
			_Path2Type path2;
			_Path3Type path3;
			_Path5x0Type path5x0;
			_Path5x1Type path5x1;
			_Path5x3Type path5x3;
			_Path6Type path6;
			_Path7Type path7;
			_Path8Type path8;
			_Path90Type path90;
			_Path91Type path91;
			_Path92Type path92;
			_Path93xType path93x;
			_Path940Type path940;
			_Path941Type path941;
			_Path942Type path942;
			_Path95Type path95;
			_Path96xType path96x;
			_Path97Type path97;
			_Path98xType path98x;
			_Path99xType path99x;

			AppendOrUpdateLeafMsg();
			void clear();
			bool equals(const AppendOrUpdateLeafMsg&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			AppendOrUpdateLeafMsg(AppendOrUpdateLeafMsg&&);
			AppendOrUpdateLeafMsg& operator=(AppendOrUpdateLeafMsg&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			AppendOrUpdateLeafMsg(const AppendOrUpdateLeafMsg&) = default;
			AppendOrUpdateLeafMsg& operator=(const AppendOrUpdateLeafMsg&) = default;
#endif
#endif
		};

		struct PublOnlineUpdateItem	// @no_thin_version
		{
			//! 1 <FIXME_COND_IF>  <FIXME>AttachedPublMsg</FIXME>  <FIXME_COND_ELSE> 2<2> <FIXME_COND_ELSE> 2<2>2 <FIXME_COND_ELSE> 2<2> <FIXME_COND_IF> M(482114ss4M()444) <FIXME_COND_ELSE> M(ss41111111ss1s44244s4s41bsssss44M(2< <FIXME>TableCommon::P_FppFactor </FIXME> >2< <FIXME>TableCommon::P_FppFactorEx </FIXME> >)4848 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m) <FIXME_COND_ELSE> M(84418s14442I8s4M()1 <FIXME>TableCommon::TableStakes</FIXME> ) <FIXME_COND_ELSE> M(141<4>1<4>41444144b21<M(11<M(82)>4)>) <FIXME_COND_ELSE> M(44111111424414bb48) <FIXME_COND_ELSE> M(ss44414ss14444M() <FIXME>BrandProt::BrandImageList</FIXME> 8s444888) <FIXME_COND_ELSE> M(1<M(1 <FIXME>TableCommon::P_Card</FIXME> 21<M(41)>)>11) <FIXME_COND_ELSE> M(1<1< <FIXME>TableCommon::P_Card </FIXME> >>) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M(111) <FIXME_COND_ELSE> M(4<M(44ss)>4444b) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M(1<M( <FIXME>TableCommon::P_Card</FIXME>  <FIXME>TableCommon::P_Card</FIXME> )>1<1>1<1>1<1>1<M(1<M(41)>1)>1<M(1<M(41)>1)>1) <FIXME_COND_ELSE> M(1414) <FIXME_COND_ELSE> M(b2) <FIXME_COND_ELSE> M(1<2>) <FIXME_COND_ELSE> M(1<1>1<1>) <FIXME_COND_ELSE> M(1<112>1<M( <FIXME>TableCommon::P_Card</FIXME> 21<M(41)>)>) <FIXME_COND_ELSE> M(4b1M()) <FIXME_COND_ELSE> M(1<M(441)>) <FIXME_COND_ELSE> M(44M()) <FIXME_COND_ELSE> M(1) <FIXME_COND_ENDIF>  <FIXME_COND_ENDIF>  - action <FIXME_COND_IF> , <FIXME>attchedMsg</FIXME>  <FIXME_COND_ELSE> ,numPath<path> <FIXME_COND_ELSE> ,numPath<path>,idx <FIXME_COND_ELSE> ,numPath<path> <FIXME_COND_IF> ,M(clentOrdinal,handId,eventCode,seat,action,amount,user,content,amount2,M(),timestamp,eventSeqId,brandMask) <FIXME_COND_ELSE> ,M(serverVersion,protocolVersion,tableId32Obsolete,handType,potStruct,tournamentType,isHiLo,isPlayMoney,isOneToOne,numOfSeats,tableName,nameSuffix,multiGameType,multiGameTypeDesc,stakeSmall,stakeBig,chatLang,minChipsLimit,maxBuyIn,currency,cap,itSessionId,clubId,dealOptions,isShowCity,createdBy,cancelledBy,voiceObjectAddress,voiceObjectUdpAddress,voiceObjectName,accessMask,scalePM,M(numFppFactors< <FIXME>TableCommon::P_FppFactor </FIXME> >,numFppFactorSiteMasks< <FIXME>TableCommon::P_FppFactorEx </FIXME> >),showObservFlags,tableId,noVppGainSiteId,tableFlags2, <FIXME>tableStakesObsolete</FIXME> ,numVariableAntes<variableAntes>,noVppGainSiteMask) <FIXME_COND_ELSE> ,M(handId,stakeSmall,stakeBig,dealer,lastHandId,adminMsg,round,ante,tableFlags,multiGameHands,clientMsgStrId,advertiseI18n,milestoneHandId,superstarShowdownResults,banner,M(),variableAnteIndex, <FIXME>tableStakes</FIXME> ) <FIXME_COND_ELSE> ,M(activePlayer,rake,numPots<pots>,numColumns<columns>,totalPot,activeTBstate,activeTimeBank,capX,capY,actionTimeType,totalActionTime,remainingActionTime,isActionTimerPaused,multiActivePlayersMask,numPotCats<M(potCategoryId,numPots<M(amount,playersMask)>,rake)>) <FIXME_COND_ELSE> ,M(chips,chipsBet,isSittingIn,isSeatedAndConnected,allInFlag,inHand,seatIndicator,connectQuality,timeBank,numOfAllInsLeft,capN,totalBet,playerState,remainingStacks,hasCard,hasFolded,totalBetInUnfoldPot,playerState2) <FIXME_COND_ELSE> ,M(user,city,imageId,siteId,vipStatus,publProp,bounty,promoImageCode,country,showCountry,headBounty,hallOfFame,mileStoneAward,clientDevice,M(), <FIXME>brandImages</FIXME> ,altBounty_tournId,altBounty_admission,altBounty_tChips,earlyBirdMultiplier,earlyBirdMins,amountToHeadIfEliminated,baseWinIfEliminated,maxBonusWinIfEliminated) <FIXME_COND_ELSE> ,M(numPlayerCards<M(showFlag, <FIXME>cardOrIndex</FIXME> ,visibilityMask,numPowers<M(powerId,powerPlayer)>)>,numSwapped,swapRound) <FIXME_COND_ELSE> ,M(numAllBoards<numActiveBoardCards< <FIXME>TableCommon::P_Card </FIXME> >>) <FIXME_COND_ELSE> ,M(numPublSubscribers) <FIXME_COND_ELSE> ,M(autoDealState,numInterested,numRemaining) <FIXME_COND_ELSE> ,M(numOldPowers<M(powerId,cost,powerName,desc)>,maxPowersPerPlayer,numDiscardedPowers,powersLimitPerStreet,powersLimitPerHand,isManaEnabled) <FIXME_COND_ELSE> ,M(carryOverAmount) <FIXME_COND_ELSE> ,M(numBoardCardChangesOld<M( <FIXME>newCard</FIXME> , <FIXME>oldCard</FIXME> )>,numBoard1CardsFlagsOld<board1CardsFlagsOld>,numBoard2CardsFlagsOld<board2CardsFlagsOld>,numBoardCardsStreet<boardCardsStreet>,numBoard1<M(numPowers<M(powerId,powerPlayer)>,flag)>,numBoard2<M(numPowers<M(powerId,powerPlayer)>,flag)>,maxBoardWidth) <FIXME_COND_ELSE> ,M(numPowers,currentMana,numOfPendingSecrets,manaRewards) <FIXME_COND_ELSE> ,M(silenceIsOn,nonSilencedSeatsMask) <FIXME_COND_ELSE> ,M(numTokensNum<tokensNum>) <FIXME_COND_ELSE> ,M(numCloakedSeatsNow<cloakedSeatsNow>,numCloakedSeatsPerHand<cloakedSeatsPerHand>) <FIXME_COND_ELSE> ,M(numVisInfo<seat,position,visibilityMask>,numSensedCards<M( <FIXME>cardOrIndex</FIXME> ,visibilityMask,numPowers<M(powerId,powerPlayer)>)>) <FIXME_COND_ELSE> ,M(powerId,isActive,playerSeat,M()) <FIXME_COND_ELSE> ,M(numPowers<M(powerId,powerCardUniqueId,powerPlayer)>) <FIXME_COND_ELSE> ,M(powerId,cost,M()) <FIXME_COND_ELSE> ,M(position) <FIXME_COND_ENDIF>  <FIXME_COND_ENDIF> 
			char action;	//alias a

			class AttachedPublMsg : public Atf::MsgIdBodyPair
			{
			public:
				Atf::MessageProtocol* createMessageObject() const
				{
					Atf::MessageProtocol* obj = ProtocolFactory::createMessageProtocolObject("publication", msgId);
					if(obj == NULL)
					{
						Atf::UnimplementedProtocol *_o = new Atf::UnimplementedProtocol();
						_o->msgId = msgId;
						obj = _o;
					}
					return obj;
				}
			};


			AttachedPublMsg attchedMsg;

			Atf::LAtfVector< UINT16, 2 > path;

			UINT16 idx;

			AppendOrUpdateLeafMsg leaf;

			PublOnlineUpdateItem();
			void clear();
			bool equals(const PublOnlineUpdateItem&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

			// @Override
			bool canBeSkippedInComparison() const;

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PublOnlineUpdateItem(PublOnlineUpdateItem&&);
			PublOnlineUpdateItem& operator=(PublOnlineUpdateItem&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PublOnlineUpdateItem(const PublOnlineUpdateItem&) = default;
			PublOnlineUpdateItem& operator=(const PublOnlineUpdateItem&) = default;
#endif
#endif
		};

		struct Protocol_MSG_PUBLICATION_UPDATE : public Atf::MessageProtocol	// @no_thin_version
		{
			//! 444 <FIXME>vector_30<PublOnlineUpdateItem></FIXME> 4 - thisid,peerid,rootRevBeforeUpdate, <FIXME>updates</FIXME> ,rootRevAfterUpdate
			UINT32 thisid;	// place holder just for underlying layer implementation
			UINT32 peerid;	// place holder just for underlying layer implementation
			UINT32 rootRevBeforeUpdate;
			Atf::AtfVectorWithSpecialTerminator< PublOnlineUpdateItem > updates;	// 0x30 is characher '0'
			UINT32 rootRevAfterUpdate;

			Protocol_MSG_PUBLICATION_UPDATE();
			void clear() override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_PUBLICATION_UPDATE; }
			const char *getMsgIdString() const override { return "MSG_PUBLICATION_UPDATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

			// @Override
			bool equals(const Protocol_MSG_PUBLICATION_UPDATE& _o) const;

			// @Override
			bool equals(Atf::MessageProtocol* _other) const override;

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_PUBLICATION_UPDATE(Protocol_MSG_PUBLICATION_UPDATE&&);
			Protocol_MSG_PUBLICATION_UPDATE& operator=(Protocol_MSG_PUBLICATION_UPDATE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_PUBLICATION_UPDATE(const Protocol_MSG_PUBLICATION_UPDATE&) = default;
			Protocol_MSG_PUBLICATION_UPDATE& operator=(const Protocol_MSG_PUBLICATION_UPDATE&) = default;
#endif
#endif
		};

		struct ClientMsg_TxtEx_TableHistory_AllInCashout
		{
			// 1 - code
			BYTE code;

			ClientMsg_TxtEx_TableHistory_AllInCashout();
			void clear();
			bool equals(const ClientMsg_TxtEx_TableHistory_AllInCashout&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct AllInCashout_PlayerCashedOut_Data
		{
			// 8 - cashoutAmount
			INT64 cashoutAmount;

			AllInCashout_PlayerCashedOut_Data();
			void clear();
			bool equals(const AllInCashout_PlayerCashedOut_Data&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct AllInCashout_ResumingHand_Data
		{
			//!  <FIXME>vector01<PString></FIXME>  -  <FIXME>activePlayers</FIXME> 
			Atf::AtfVector0< PString, 1 > activePlayers;

			AllInCashout_ResumingHand_Data();
			void clear();
			bool equals(const AllInCashout_ResumingHand_Data&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			AllInCashout_ResumingHand_Data(AllInCashout_ResumingHand_Data&&);
			AllInCashout_ResumingHand_Data& operator=(AllInCashout_ResumingHand_Data&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			AllInCashout_ResumingHand_Data(const AllInCashout_ResumingHand_Data&) = default;
			AllInCashout_ResumingHand_Data& operator=(const AllInCashout_ResumingHand_Data&) = default;
#endif
#endif
		};
	};

	namespace ihh
	{
		struct Protocol_MSG_TABLE_IHH_GET_HANDBLOB : public Atf::MessageProtocol
		{
			// 8 - handId
			UINT64 handId;

			Protocol_MSG_TABLE_IHH_GET_HANDBLOB();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_IHH_GET_HANDBLOB&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_IHH_GET_HANDBLOB; }
			const char *getMsgIdString() const override { return "MSG_TABLE_IHH_GET_HANDBLOB"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY : public Atf::MessageProtocol
		{
			// 1[s|8bv] - errcode[errstr|handId,zipped,blob]
			BYTE errcode;

			PString errstr;

			UINT64 handId;
			bool zipped;
			PBlock blob;

			Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_TABLE_IHH_GET_HANDBLOB_REPLY; }
			const char *getMsgIdString() const override { return "MSG_TABLE_IHH_GET_HANDBLOB_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY(Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY&&);
			Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY& operator=(Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY(const Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY&) = default;
			Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY& operator=(const Protocol_MSG_TABLE_IHH_GET_HANDBLOB_REPLY&) = default;
#endif
#endif
		};

	};
};

#endif
