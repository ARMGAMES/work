/**
 * TableCommonStructs.h
 *
 * This file was auto-generated from TableCommonStructs.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor TableCommonStructs.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_TABLECOMMONSTRUCTS_H
#define ATF_PROTOCOL_DEFFILE_TABLECOMMONSTRUCTS_H

#include "i18n.localedef.h"
#include "cards.h"
#include "PBitmask.h"
#include "sitemasks.h"
#include "licensemask.h"


#include "UserDefStructs.h"

namespace TableCommon
{
	// the following structs are shared by client and server side protocols

	// ===================================================
	// The following are struct definitions
	// Usually these structs are referenced in the message
	// protocols, so we are using the naming convention
	// P_xxxx.
	// ====================================================

	struct P_Card
	{
		// 11 - suit,rank
		char suit;
		BYTE rank;

		P_Card();
		void clear();
		bool equals(const P_Card&) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		// @Override
		P_Card(const Card& card);

		// @Override
		operator Card();

		// @Override
		operator const Card() const;

		// @Override
		const char *toTraceString(PString& buf) const;
	};

	// TODO: obsoleted please use P_FppFactorEx instead. To be removed once client moves to P_FppFactorEx
	struct P_FppFactor
	{
		// 24t - fppFactor,siteIds,happyHourEndTime
		UINT16 fppFactor;
		UINT32 siteIds;
		CommSrvTime happyHourEndTime;

		P_FppFactor();
		void clear();
		bool equals(const P_FppFactor&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct P_FppFactorEx
	{
		// M(2mt) - M(fppFactor,siteMasks,happyHourEndTime)
		UINT16 fppFactor;
		PSiteMask siteMasks;
		CommSrvTime happyHourEndTime;

		P_FppFactorEx();
		void clear();
		bool equals(const P_FppFactorEx&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		P_FppFactorEx(P_FppFactorEx&&);
		P_FppFactorEx& operator=(P_FppFactorEx&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		P_FppFactorEx(const P_FppFactorEx&) = default;
		P_FppFactorEx& operator=(const P_FppFactorEx&) = default;
#endif
#endif
	};

	// for PIniFile
	struct P_IniFile_Item
	{
		// ss - name,value
		PString name;
		PString value;

		P_IniFile_Item();
		void clear();
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		// @Override
		bool equals(const P_IniFile_Item& _o) const;

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		P_IniFile_Item(P_IniFile_Item&&);
		P_IniFile_Item& operator=(P_IniFile_Item&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		P_IniFile_Item(const P_IniFile_Item&) = default;
		P_IniFile_Item& operator=(const P_IniFile_Item&) = default;
#endif
#endif
	};

	struct P_IniFile_Section
	{
		// s4<ss> - name,numItems<name,value>
		PString name;
		Atf::LAtfVector< P_IniFile_Item, 4 > items;

		P_IniFile_Section();
		void clear();
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		// @Override
		bool equals(const P_IniFile_Section& _o) const;

		// @Override
		const char *getProperty(const char *name_) const;

		// @Override
		const char *getProperty(const char *name_, const char* defvalue) const;

		// @Override
		int getIntProperty(const char *name_, int defvalue) const;

		// @Override
		void setProperty(const char* name_, const char* value);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		P_IniFile_Section(P_IniFile_Section&&);
		P_IniFile_Section& operator=(P_IniFile_Section&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		P_IniFile_Section(const P_IniFile_Section&) = default;
		P_IniFile_Section& operator=(const P_IniFile_Section&) = default;
#endif
#endif
	};

	struct CardDictionaryItem
	{
		// M(1111) - M(suit,rank,suit,rank)
		P_Card index;	// dictionary index: two bytes, both bytes are in range [128, 255]
		P_Card card;	// real card

		CardDictionaryItem();
		void clear();
		bool equals(const CardDictionaryItem&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct P_IniFile
	{
		// 4<s4<ss>> - numSections<name,numItems<name,value>>
		Atf::LAtfVector< P_IniFile_Section, 4 > sections;

		P_IniFile();
		void clear();
		bool equals(const P_IniFile&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		// @Override
		const TableCommon::P_IniFile_Section* getSection( const char * name ) const;

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		P_IniFile(P_IniFile&&);
		P_IniFile& operator=(P_IniFile&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		P_IniFile(const P_IniFile&) = default;
		P_IniFile& operator=(const P_IniFile&) = default;
#endif
#endif
	};

	struct P_ScheduledTournament
	{
		// t4s4s1b4444b1sb44ss44 - startTime,clubId,clubName,tournId,tournName,gameType,isHiLo,buyin,rake,knockoutBounty,numPlayers,isRegistered,limit,currency,isPlayMoney,maxPlayers,tournState,server,serverObject,flags,scalePM
		CommSrvTime startTime;
		UINT32 clubId;
		PString clubName;
		UINT32 tournId;
		PString tournName;
		BYTE gameType;
		bool isHiLo;
		UINT32 buyin;
		UINT32 rake;
		UINT32 knockoutBounty;
		UINT32 numPlayers;
		bool isRegistered;
		BYTE limit;
		PString currency;
		bool isPlayMoney;
		UINT32 maxPlayers;
		UINT32 tournState;
		PString server;	// PYR-18302
		PString serverObject;	// PYR-18302
		UINT32 flags;
		INT32 scalePM;

		P_ScheduledTournament();
		void clear();
		bool equals(const P_ScheduledTournament&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		P_ScheduledTournament(P_ScheduledTournament&&);
		P_ScheduledTournament& operator=(P_ScheduledTournament&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		P_ScheduledTournament(const P_ScheduledTournament&) = default;
		P_ScheduledTournament& operator=(const P_ScheduledTournament&) = default;
#endif
#endif
	};

	struct TableStakes
	{
		// M(4<8>4<8>4<8>4<8>) - M(numAntes<antes>,numBlinds<blinds>,numStakes<stakes>,numBringIns<bringIns>)
		Atf::LAtfVector< INT64 , 4 > antes;	// When removing this optional parsing, also remove the obsolete TableStakes field from the table publication
		Atf::LAtfVector< INT64 , 4 > blinds;
		Atf::LAtfVector< INT64 , 4 > stakes;
		Atf::LAtfVector< INT64 , 4 > bringIns;

		TableStakes();
		void clear();
		bool equals(const TableStakes&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		TableStakes(TableStakes&&);
		TableStakes& operator=(TableStakes&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		TableStakes(const TableStakes&) = default;
		TableStakes& operator=(const TableStakes&) = default;
#endif
#endif
	};
};

#endif
