/**
 * protocols\PoolBetting\PB_Server_WAPI_thin.h
 *
 * This file was auto-generated from protocols\PoolBetting\PB_Server_WAPI.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin -genMoveConstructor -dontGenValidationFuncs protocols\PoolBetting\PB_Server_WAPI.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_PROTOCOLS_POOLBETTING_PB_SERVER_WAPI_THIN_H
#define ATF_PROTOCOL_DEFFILE_PROTOCOLS_POOLBETTING_PB_SERVER_WAPI_THIN_H

#include "PB_Server_WAPI_Msgs.h"


#include "ThinAtfUserDefStructs.h"

namespace PB
{
	struct Balance
	{
		// M(s4) - M(currency,amount)
		PString currency;
		INT32 amount;

		Balance();
		void clear();
		bool equals(const Balance&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Balance(Balance&&);
		Balance& operator=(Balance&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		Balance(const Balance&) = default;
		Balance& operator=(const Balance&) = default;
#endif
#endif
	};

	struct Warning
	{
		// M(2s) - M(code,description)
		INT16 code;
		PString description;

		Warning();
		void clear();
		bool equals(const Warning&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Warning(Warning&&);
		Warning& operator=(Warning&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		Warning(const Warning&) = default;
		Warning& operator=(const Warning&) = default;
#endif
#endif
	};

	struct StakeLimit
	{
		// M(s4) - M(currency,amount)
		PString currency;
		INT32 amount;

		StakeLimit();
		void clear();
		bool equals(const StakeLimit&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		StakeLimit(StakeLimit&&);
		StakeLimit& operator=(StakeLimit&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		StakeLimit(const StakeLimit&) = default;
		StakeLimit& operator=(const StakeLimit&) = default;
#endif
#endif
	};

	namespace PB_AuthWAPI	// from middle-tier to server object, authenticated (WebTokenGuard)
	{

		struct Protocol_Q_GET_USER_INFO
		{
			// intentionally left blank

			Protocol_Q_GET_USER_INFO();
			void clear();
			bool equals(const Protocol_Q_GET_USER_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return Q_GET_USER_INFO; }
			static const char *getMsgIdString() { return "Q_GET_USER_INFO"; }
		};

		struct Protocol_A_GET_USER_INFO
		{
			// ss4<M(s4)>sss4<M(2s)>4<M(s4)>s - webId,defaultCurrency,numBalances<M(currency,amount)>,timezone,site,language,numWarnings<M(code,description)>,numStakeLimits<M(currency,amount)>,country
			PString webId;
			PString defaultCurrency;
			ThinAtf::LAtfVector< Balance, 4 > balances;
			PString timezone;
			PString site;
			PString language;
			ThinAtf::LAtfVector< Warning, 4 > warnings;
			ThinAtf::LAtfVector< StakeLimit, 4 > stakeLimits;
			PString country;

			Protocol_A_GET_USER_INFO();
			void clear();
			bool equals(const Protocol_A_GET_USER_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return A_GET_USER_INFO; }
			static const char *getMsgIdString() { return "A_GET_USER_INFO"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_A_GET_USER_INFO(Protocol_A_GET_USER_INFO&&);
			Protocol_A_GET_USER_INFO& operator=(Protocol_A_GET_USER_INFO&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_A_GET_USER_INFO(const Protocol_A_GET_USER_INFO&) = default;
			Protocol_A_GET_USER_INFO& operator=(const Protocol_A_GET_USER_INFO&) = default;
#endif
#endif
		};

		struct Protocol_Q_PLACE_TICKET
		{
			// 88s4s - transactionId,ticketId,currency,cashAmount,description
			UINT64 transactionId;
			UINT64 ticketId;
			PString currency;
			INT32 cashAmount;
			PString description;

			Protocol_Q_PLACE_TICKET();
			void clear();
			bool equals(const Protocol_Q_PLACE_TICKET&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return Q_PLACE_TICKET; }
			static const char *getMsgIdString() { return "Q_PLACE_TICKET"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_Q_PLACE_TICKET(Protocol_Q_PLACE_TICKET&&);
			Protocol_Q_PLACE_TICKET& operator=(Protocol_Q_PLACE_TICKET&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_Q_PLACE_TICKET(const Protocol_Q_PLACE_TICKET&) = default;
			Protocol_Q_PLACE_TICKET& operator=(const Protocol_Q_PLACE_TICKET&) = default;
#endif
#endif
		};

		struct Protocol_A_PLACE_TICKET
		{
			// intentionally left blank

			Protocol_A_PLACE_TICKET();
			void clear();
			bool equals(const Protocol_A_PLACE_TICKET&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return A_PLACE_TICKET; }
			static const char *getMsgIdString() { return "A_PLACE_TICKET"; }
		};

		struct Protocol_Q_CASHOUT_TICKET
		{
			// 88s444s - transactionId,ticketId,currency,cashAmount,remainingStake,cashoutMargin,description
			UINT64 transactionId;
			UINT64 ticketId;
			PString currency;
			INT32 cashAmount;
			INT32 remainingStake;
			INT32 cashoutMargin;
			PString description;

			Protocol_Q_CASHOUT_TICKET();
			void clear();
			bool equals(const Protocol_Q_CASHOUT_TICKET&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return Q_CASHOUT_TICKET; }
			static const char *getMsgIdString() { return "Q_CASHOUT_TICKET"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_Q_CASHOUT_TICKET(Protocol_Q_CASHOUT_TICKET&&);
			Protocol_Q_CASHOUT_TICKET& operator=(Protocol_Q_CASHOUT_TICKET&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_Q_CASHOUT_TICKET(const Protocol_Q_CASHOUT_TICKET&) = default;
			Protocol_Q_CASHOUT_TICKET& operator=(const Protocol_Q_CASHOUT_TICKET&) = default;
#endif
#endif
		};

		struct Protocol_A_CASHOUT_TICKET
		{
			// intentionally left blank

			Protocol_A_CASHOUT_TICKET();
			void clear();
			bool equals(const Protocol_A_CASHOUT_TICKET&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return A_CASHOUT_TICKET; }
			static const char *getMsgIdString() { return "A_CASHOUT_TICKET"; }
		};
	};

	namespace PB_PlainWAPI	// from middle-tier to server object, non-authenticated (NullGuard)
	{
		struct Protocol_Q_SETTLE_TICKET
		{
			// s88s4s - webId,transactionId,ticketId,currency,cashAmount,description
			PString webId;
			UINT64 transactionId;
			UINT64 ticketId;
			PString currency;
			INT32 cashAmount;
			PString description;

			Protocol_Q_SETTLE_TICKET();
			void clear();
			bool equals(const Protocol_Q_SETTLE_TICKET&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return Q_SETTLE_TICKET; }
			static const char *getMsgIdString() { return "Q_SETTLE_TICKET"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_Q_SETTLE_TICKET(Protocol_Q_SETTLE_TICKET&&);
			Protocol_Q_SETTLE_TICKET& operator=(Protocol_Q_SETTLE_TICKET&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_Q_SETTLE_TICKET(const Protocol_Q_SETTLE_TICKET&) = default;
			Protocol_Q_SETTLE_TICKET& operator=(const Protocol_Q_SETTLE_TICKET&) = default;
#endif
#endif
		};

		struct Protocol_A_SETTLE_TICKET
		{
			// intentionally left blank

			Protocol_A_SETTLE_TICKET();
			void clear();
			bool equals(const Protocol_A_SETTLE_TICKET&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return A_SETTLE_TICKET; }
			static const char *getMsgIdString() { return "A_SETTLE_TICKET"; }
		};

		struct Protocol_Q_VOID_TICKET
		{
			// s88s4s - webId,transactionId,ticketId,currency,cashAmount,description
			PString webId;
			UINT64 transactionId;
			UINT64 ticketId;
			PString currency;
			INT32 cashAmount;
			PString description;

			Protocol_Q_VOID_TICKET();
			void clear();
			bool equals(const Protocol_Q_VOID_TICKET&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return Q_VOID_TICKET; }
			static const char *getMsgIdString() { return "Q_VOID_TICKET"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_Q_VOID_TICKET(Protocol_Q_VOID_TICKET&&);
			Protocol_Q_VOID_TICKET& operator=(Protocol_Q_VOID_TICKET&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_Q_VOID_TICKET(const Protocol_Q_VOID_TICKET&) = default;
			Protocol_Q_VOID_TICKET& operator=(const Protocol_Q_VOID_TICKET&) = default;
#endif
#endif
		};

		struct Protocol_A_VOID_TICKET
		{
			// intentionally left blank

			Protocol_A_VOID_TICKET();
			void clear();
			bool equals(const Protocol_A_VOID_TICKET&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return A_VOID_TICKET; }
			static const char *getMsgIdString() { return "A_VOID_TICKET"; }
		};

		struct Protocol_Q_CASHOUT_TICKET2
		{
			// s88s444s - webId,transactionId,ticketId,currency,cashAmount,remainingStake,cashoutMargin,description
			PString webId;
			UINT64 transactionId;
			UINT64 ticketId;
			PString currency;
			INT32 cashAmount;
			INT32 remainingStake;
			INT32 cashoutMargin;
			PString description;

			Protocol_Q_CASHOUT_TICKET2();
			void clear();
			bool equals(const Protocol_Q_CASHOUT_TICKET2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return Q_CASHOUT_TICKET2; }
			static const char *getMsgIdString() { return "Q_CASHOUT_TICKET2"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_Q_CASHOUT_TICKET2(Protocol_Q_CASHOUT_TICKET2&&);
			Protocol_Q_CASHOUT_TICKET2& operator=(Protocol_Q_CASHOUT_TICKET2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_Q_CASHOUT_TICKET2(const Protocol_Q_CASHOUT_TICKET2&) = default;
			Protocol_Q_CASHOUT_TICKET2& operator=(const Protocol_Q_CASHOUT_TICKET2&) = default;
#endif
#endif
		};

		struct Protocol_A_CASHOUT_TICKET2
		{
			// intentionally left blank

			Protocol_A_CASHOUT_TICKET2();
			void clear();
			bool equals(const Protocol_A_CASHOUT_TICKET2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return A_CASHOUT_TICKET2; }
			static const char *getMsgIdString() { return "A_CASHOUT_TICKET2"; }
		};

	};
};

#endif
