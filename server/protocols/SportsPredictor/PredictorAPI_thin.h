/**
 * protocols\SportsPredictor\PredictorAPI_thin.h
 *
 * This file was auto-generated from protocols\SportsPredictor\PredictorAPI.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin -genMoveConstructor -dontGenValidationFuncs protocols\SportsPredictor\PredictorAPI.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_PROTOCOLS_SPORTSPREDICTOR_PREDICTORAPI_THIN_H
#define ATF_PROTOCOL_DEFFILE_PROTOCOLS_SPORTSPREDICTOR_PREDICTORAPI_THIN_H

#include "PredictorAPI_Msgs.h"


#include "ThinAtfUserDefStructs.h"

namespace Predictor
{
	struct TicketDetail
	{
		// M(8s) - M(ticketId,status)
		UINT64 ticketId;	// ticket owner is the authenticated user
		PString status;	// 24 char; new, spent, void, expired (most recent status)

		TicketDetail();
		void clear();
		bool equals(const TicketDetail&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		TicketDetail(TicketDetail&&);
		TicketDetail& operator=(TicketDetail&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		TicketDetail(const TicketDetail&) = default;
		TicketDetail& operator=(const TicketDetail&) = default;
#endif
#endif
	};
	struct RecentTransact
	{
		// M(8s8ss) - M(transactionId,webId,ticketId,status,timeOfTransactUTC)
		UINT64 transactionId;
		PString webId;	// ? 8 character ; explicit owner of the ticket
		UINT64 ticketId;
		PString status;	// 24 char; new, spent, void, expired (2018-03-09 state after the transaction NOT current state)
		PString timeOfTransactUTC;	// Victiv may need to know the details of this transaction

		RecentTransact();
		void clear();
		bool equals(const RecentTransact&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		RecentTransact(RecentTransact&&);
		RecentTransact& operator=(RecentTransact&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		RecentTransact(const RecentTransact&) = default;
		RecentTransact& operator=(const RecentTransact&) = default;
#endif
#endif
	};

	struct Warning
	{
		// M(2s) - M(code,description)
		INT16 code;
		PString description;

		Warning();
		void clear();
		bool equals(const Warning&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Warning(Warning&&);
		Warning& operator=(Warning&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		Warning(const Warning&) = default;
		Warning& operator=(const Warning&) = default;
#endif
#endif
	};

	struct VoidItem
	{
		// M(s8) - M(webId,ticketId)
		PString webId;	// ? 8 character ; explicit owner of the ticket
		UINT64 ticketId;

		VoidItem();
		void clear();
		bool equals(const VoidItem&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		VoidItem(VoidItem&&);
		VoidItem& operator=(VoidItem&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		VoidItem(const VoidItem&) = default;
		VoidItem& operator=(const VoidItem&) = default;
#endif
#endif
	};
	struct VoidResult
	{
		// M(2s) - M(code,description)
		INT16 code;
		PString description;

		VoidResult();
		void clear();
		bool equals(const VoidResult&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		VoidResult(VoidResult&&);
		VoidResult& operator=(VoidResult&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		VoidResult(const VoidResult&) = default;
		VoidResult& operator=(const VoidResult&) = default;
#endif
#endif
	};

	namespace AuthAPI	// from middle-tier to server object, authenticated (WebTokenGuard)
	{

		struct Protocol_Q_GET_USER_INFO
		{
			// intentionally left blank

			Protocol_Q_GET_USER_INFO();
			void clear();
			bool equals(const Protocol_Q_GET_USER_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return Q_GET_USER_INFO; }
			static const char *getMsgIdString() { return "Q_GET_USER_INFO"; }
		};

		struct Protocol_A_GET_USER_INFO
		{
			// ssssb4<M(8s)>ss4<M(2s)> - eMail,firstName,lastName,country,extraValidation,numTickets<M(ticketId,status)>,site,language,numWarnings<M(code,description)>
			//	PString               webId;  // ? 8 character ; not needed, RAM provides it
			PString eMail;
			PString firstName;
			PString lastName;
			PString country;
			bool extraValidation;	// true = recent account creation and no spent ticket yet
			ThinAtf::LAtfVector< TicketDetail, 4 > tickets;	// all tickets that this user ever had
			PString site;
			PString language;
			ThinAtf::LAtfVector< Warning, 4 > warnings;

			// PString            more parseEndOptB4Me;
			Protocol_A_GET_USER_INFO();
			void clear();
			bool equals(const Protocol_A_GET_USER_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return A_GET_USER_INFO; }
			static const char *getMsgIdString() { return "A_GET_USER_INFO"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_A_GET_USER_INFO(Protocol_A_GET_USER_INFO&&);
			Protocol_A_GET_USER_INFO& operator=(Protocol_A_GET_USER_INFO&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_A_GET_USER_INFO(const Protocol_A_GET_USER_INFO&) = default;
			Protocol_A_GET_USER_INFO& operator=(const Protocol_A_GET_USER_INFO&) = default;
#endif
#endif
		};

		struct Protocol_Q_SPEND_TICKET
		{
			// s8 - requestId,ticketId
			PString requestId;	// changed to char[22] as requested by Victiv
			UINT64 ticketId;	// user

			Protocol_Q_SPEND_TICKET();
			void clear();
			bool equals(const Protocol_Q_SPEND_TICKET&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return Q_SPEND_TICKET; }
			static const char *getMsgIdString() { return "Q_SPEND_TICKET"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_Q_SPEND_TICKET(Protocol_Q_SPEND_TICKET&&);
			Protocol_Q_SPEND_TICKET& operator=(Protocol_Q_SPEND_TICKET&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_Q_SPEND_TICKET(const Protocol_Q_SPEND_TICKET&) = default;
			Protocol_Q_SPEND_TICKET& operator=(const Protocol_Q_SPEND_TICKET&) = default;
#endif
#endif
		};

		struct Protocol_A_SPEND_TICKET
		{
			// intentionally left blank

			Protocol_A_SPEND_TICKET();
			void clear();
			bool equals(const Protocol_A_SPEND_TICKET&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return A_SPEND_TICKET; }
			static const char *getMsgIdString() { return "A_SPEND_TICKET"; }
		};
	};

	namespace PlainAPI	// from middle-tier to server object, non-authenticated (NullGuard)
	{
		struct Protocol_Q_VOID_TICKETS
		{
			// s4<M(s8)> - requestId,numVoidItems<M(webId,ticketId)>
			PString requestId;	// changed to char[22] as requested by Victiv
			ThinAtf::LAtfVector< VoidItem, 4 > voidItems;

			Protocol_Q_VOID_TICKETS();
			void clear();
			bool equals(const Protocol_Q_VOID_TICKETS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return Q_VOID_TICKETS; }
			static const char *getMsgIdString() { return "Q_VOID_TICKETS"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_Q_VOID_TICKETS(Protocol_Q_VOID_TICKETS&&);
			Protocol_Q_VOID_TICKETS& operator=(Protocol_Q_VOID_TICKETS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_Q_VOID_TICKETS(const Protocol_Q_VOID_TICKETS&) = default;
			Protocol_Q_VOID_TICKETS& operator=(const Protocol_Q_VOID_TICKETS&) = default;
#endif
#endif
		};

		struct Protocol_A_VOID_TICKETS
		{
			// 4<M(2s)> - numVoidResults<M(code,description)>
			ThinAtf::LAtfVector< VoidResult, 4 > voidResults;

			Protocol_A_VOID_TICKETS();
			void clear();
			bool equals(const Protocol_A_VOID_TICKETS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return A_VOID_TICKETS; }
			static const char *getMsgIdString() { return "A_VOID_TICKETS"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_A_VOID_TICKETS(Protocol_A_VOID_TICKETS&&);
			Protocol_A_VOID_TICKETS& operator=(Protocol_A_VOID_TICKETS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_A_VOID_TICKETS(const Protocol_A_VOID_TICKETS&) = default;
			Protocol_A_VOID_TICKETS& operator=(const Protocol_A_VOID_TICKETS&) = default;
#endif
#endif
		};

		struct Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS
		{
			// 8 - lastReceivedTransactionId
			UINT64 lastReceivedTransactionId;

			Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS();
			void clear();
			bool equals(const Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return Q_GET_RECENT_TICKET_TRANSACTIONS; }
			static const char *getMsgIdString() { return "Q_GET_RECENT_TICKET_TRANSACTIONS"; }
		};

		struct Protocol_A_GET_RECENT_TICKET_TRANSACTIONS
		{
			// 4<M(8s8ss)> - numRecentTransacts<M(transactionId,webId,ticketId,status,timeOfTransactUTC)>
			ThinAtf::LAtfVector< RecentTransact, 4 > recentTransacts;	// not all at once, chunk of max about 1000, if empty Victiv should poll again later, if not empty Victiv should poll ASAP

			Protocol_A_GET_RECENT_TICKET_TRANSACTIONS();
			void clear();
			bool equals(const Protocol_A_GET_RECENT_TICKET_TRANSACTIONS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return A_GET_RECENT_TICKET_TRANSACTIONS; }
			static const char *getMsgIdString() { return "A_GET_RECENT_TICKET_TRANSACTIONS"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_A_GET_RECENT_TICKET_TRANSACTIONS(Protocol_A_GET_RECENT_TICKET_TRANSACTIONS&&);
			Protocol_A_GET_RECENT_TICKET_TRANSACTIONS& operator=(Protocol_A_GET_RECENT_TICKET_TRANSACTIONS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_A_GET_RECENT_TICKET_TRANSACTIONS(const Protocol_A_GET_RECENT_TICKET_TRANSACTIONS&) = default;
			Protocol_A_GET_RECENT_TICKET_TRANSACTIONS& operator=(const Protocol_A_GET_RECENT_TICKET_TRANSACTIONS&) = default;
#endif
#endif
		};
	};
};

#endif
