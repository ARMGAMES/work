/**
 * protocols\SportsPredictor\PredictorAPI_thin.cpp
 *
 * This file was auto-generated from protocols\SportsPredictor\PredictorAPI.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin -genMoveConstructor -dontGenValidationFuncs protocols\SportsPredictor\PredictorAPI.txt
 */
 
#include "PredictorAPI_thin.h"

//=================================================================
//                    TicketDetail
//=================================================================

Predictor::TicketDetail::TicketDetail()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Predictor::TicketDetail::TicketDetail(TicketDetail&& _o)
	: ticketId(std::move(_o.ticketId))
	, status(std::move(_o.status))
{
}

Predictor::TicketDetail& Predictor::TicketDetail::operator=(TicketDetail&& _o)
{
	if(this != &_o)
	{
		ticketId = std::move(_o.ticketId);
		status = std::move(_o.status);
	}
	return *this;
}

#endif

void Predictor::TicketDetail::clear()
{
	ticketId = 0;
	status.clear();
}

bool Predictor::TicketDetail::equals(const TicketDetail& _o) const
{
	return ticketId == _o.ticketId &&
		status.equals(_o.status);
}

const char *Predictor::TicketDetail::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("ticketId=");
	_buf.appendUint64(ticketId);
	_buf.append(',');
	_buf.append("status=");
	_buf.append(status);
	_buf.append('}');
	return _buf.c_str();
}

void Predictor::TicketDetail::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(TicketDetail())) // not empty
	{
		_body.composeUINT64(ticketId);
		_body.composeString(status);
	}

	_msg.composeMsgBody(_body);
}

void Predictor::TicketDetail::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(ticketId);
	_parser0.parseStringP(status);
}

//=================================================================
//                    RecentTransact
//=================================================================

Predictor::RecentTransact::RecentTransact()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Predictor::RecentTransact::RecentTransact(RecentTransact&& _o)
	: transactionId(std::move(_o.transactionId))
	, webId(std::move(_o.webId))
	, ticketId(std::move(_o.ticketId))
	, status(std::move(_o.status))
	, timeOfTransactUTC(std::move(_o.timeOfTransactUTC))
{
}

Predictor::RecentTransact& Predictor::RecentTransact::operator=(RecentTransact&& _o)
{
	if(this != &_o)
	{
		transactionId = std::move(_o.transactionId);
		webId = std::move(_o.webId);
		ticketId = std::move(_o.ticketId);
		status = std::move(_o.status);
		timeOfTransactUTC = std::move(_o.timeOfTransactUTC);
	}
	return *this;
}

#endif

void Predictor::RecentTransact::clear()
{
	transactionId = 0;
	webId.clear();
	ticketId = 0;
	status.clear();
	timeOfTransactUTC.clear();
}

bool Predictor::RecentTransact::equals(const RecentTransact& _o) const
{
	return transactionId == _o.transactionId &&
		webId.equals(_o.webId) &&
		ticketId == _o.ticketId &&
		status.equals(_o.status) &&
		timeOfTransactUTC.equals(_o.timeOfTransactUTC);
}

const char *Predictor::RecentTransact::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("transactionId=");
	_buf.appendUint64(transactionId);
	_buf.append(',');
	_buf.append("webId=");
	_buf.append(webId);
	_buf.append(',');
	_buf.append("ticketId=");
	_buf.appendUint64(ticketId);
	_buf.append(',');
	_buf.append("status=");
	_buf.append(status);
	_buf.append(',');
	_buf.append("timeOfTransactUTC=");
	_buf.append(timeOfTransactUTC);
	_buf.append('}');
	return _buf.c_str();
}

void Predictor::RecentTransact::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(RecentTransact())) // not empty
	{
		_body.composeUINT64(transactionId);
		_body.composeString(webId);
		_body.composeUINT64(ticketId);
		_body.composeString(status);
		_body.composeString(timeOfTransactUTC);
	}

	_msg.composeMsgBody(_body);
}

void Predictor::RecentTransact::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(transactionId);
	_parser0.parseStringP(webId);
	_parser0.parseUINT64(ticketId);
	_parser0.parseStringP(status);
	_parser0.parseStringP(timeOfTransactUTC);
}

//=================================================================
//                    Warning
//=================================================================

Predictor::Warning::Warning()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Predictor::Warning::Warning(Warning&& _o)
	: code(std::move(_o.code))
	, description(std::move(_o.description))
{
}

Predictor::Warning& Predictor::Warning::operator=(Warning&& _o)
{
	if(this != &_o)
	{
		code = std::move(_o.code);
		description = std::move(_o.description);
	}
	return *this;
}

#endif

void Predictor::Warning::clear()
{
	code = 0;
	description.clear();
}

bool Predictor::Warning::equals(const Warning& _o) const
{
	return code == _o.code &&
		description.equals(_o.description);
}

const char *Predictor::Warning::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("code=");
	_buf.appendInt(code);
	_buf.append(',');
	_buf.append("description=");
	_buf.append(description);
	_buf.append('}');
	return _buf.c_str();
}

void Predictor::Warning::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(Warning())) // not empty
	{
		_body.composeINT16(code);
		_body.composeString(description);
	}

	_msg.composeMsgBody(_body);
}

void Predictor::Warning::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT16(code);
	_parser0.parseStringP(description);
}

//=================================================================
//                    VoidItem
//=================================================================

Predictor::VoidItem::VoidItem()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Predictor::VoidItem::VoidItem(VoidItem&& _o)
	: webId(std::move(_o.webId))
	, ticketId(std::move(_o.ticketId))
{
}

Predictor::VoidItem& Predictor::VoidItem::operator=(VoidItem&& _o)
{
	if(this != &_o)
	{
		webId = std::move(_o.webId);
		ticketId = std::move(_o.ticketId);
	}
	return *this;
}

#endif

void Predictor::VoidItem::clear()
{
	webId.clear();
	ticketId = 0;
}

bool Predictor::VoidItem::equals(const VoidItem& _o) const
{
	return webId.equals(_o.webId) &&
		ticketId == _o.ticketId;
}

const char *Predictor::VoidItem::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("webId=");
	_buf.append(webId);
	_buf.append(',');
	_buf.append("ticketId=");
	_buf.appendUint64(ticketId);
	_buf.append('}');
	return _buf.c_str();
}

void Predictor::VoidItem::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(VoidItem())) // not empty
	{
		_body.composeString(webId);
		_body.composeUINT64(ticketId);
	}

	_msg.composeMsgBody(_body);
}

void Predictor::VoidItem::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(webId);
	_parser0.parseUINT64(ticketId);
}

//=================================================================
//                    VoidResult
//=================================================================

Predictor::VoidResult::VoidResult()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Predictor::VoidResult::VoidResult(VoidResult&& _o)
	: code(std::move(_o.code))
	, description(std::move(_o.description))
{
}

Predictor::VoidResult& Predictor::VoidResult::operator=(VoidResult&& _o)
{
	if(this != &_o)
	{
		code = std::move(_o.code);
		description = std::move(_o.description);
	}
	return *this;
}

#endif

void Predictor::VoidResult::clear()
{
	code = 0;
	description.clear();
}

bool Predictor::VoidResult::equals(const VoidResult& _o) const
{
	return code == _o.code &&
		description.equals(_o.description);
}

const char *Predictor::VoidResult::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("code=");
	_buf.appendInt(code);
	_buf.append(',');
	_buf.append("description=");
	_buf.append(description);
	_buf.append('}');
	return _buf.c_str();
}

void Predictor::VoidResult::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(VoidResult())) // not empty
	{
		_body.composeINT16(code);
		_body.composeString(description);
	}

	_msg.composeMsgBody(_body);
}

void Predictor::VoidResult::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT16(code);
	_parser0.parseStringP(description);
}

//=================================================================
//                Protocol_Q_GET_USER_INFO
//=================================================================

Predictor::AuthAPI::Protocol_Q_GET_USER_INFO::Protocol_Q_GET_USER_INFO()
{
	clear();
}

void Predictor::AuthAPI::Protocol_Q_GET_USER_INFO::clear()
{
}

bool Predictor::AuthAPI::Protocol_Q_GET_USER_INFO::equals(const Protocol_Q_GET_USER_INFO& _o) const
{
	return true;
}

const char *Predictor::AuthAPI::Protocol_Q_GET_USER_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(Q_GET_USER_INFO).append(")");
	return _buf.c_str();
}

void Predictor::AuthAPI::Protocol_Q_GET_USER_INFO::composeMsg(CommMsgBody& _msg) const
{
}

void Predictor::AuthAPI::Protocol_Q_GET_USER_INFO::parseMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_A_GET_USER_INFO
//=================================================================

Predictor::AuthAPI::Protocol_A_GET_USER_INFO::Protocol_A_GET_USER_INFO()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Predictor::AuthAPI::Protocol_A_GET_USER_INFO::Protocol_A_GET_USER_INFO(Protocol_A_GET_USER_INFO&& _o)
	: eMail(std::move(_o.eMail))
	, firstName(std::move(_o.firstName))
	, lastName(std::move(_o.lastName))
	, country(std::move(_o.country))
	, extraValidation(std::move(_o.extraValidation))
	, tickets(std::move(_o.tickets))
	, site(std::move(_o.site))
	, language(std::move(_o.language))
	, warnings(std::move(_o.warnings))
{
}

Predictor::AuthAPI::Protocol_A_GET_USER_INFO& Predictor::AuthAPI::Protocol_A_GET_USER_INFO::operator=(Protocol_A_GET_USER_INFO&& _o)
{
	if(this != &_o)
	{
		eMail = std::move(_o.eMail);
		firstName = std::move(_o.firstName);
		lastName = std::move(_o.lastName);
		country = std::move(_o.country);
		extraValidation = std::move(_o.extraValidation);
		tickets = std::move(_o.tickets);
		site = std::move(_o.site);
		language = std::move(_o.language);
		warnings = std::move(_o.warnings);
	}
	return *this;
}

#endif

void Predictor::AuthAPI::Protocol_A_GET_USER_INFO::clear()
{
	eMail.clear();
	firstName.clear();
	lastName.clear();
	country.clear();
	extraValidation = false;
	tickets.clear();
	site.clear();
	language.clear();
	warnings.clear();
}

bool Predictor::AuthAPI::Protocol_A_GET_USER_INFO::equals(const Protocol_A_GET_USER_INFO& _o) const
{
	return eMail.equals(_o.eMail) &&
		firstName.equals(_o.firstName) &&
		lastName.equals(_o.lastName) &&
		country.equals(_o.country) &&
		extraValidation == _o.extraValidation &&
		tickets.equals(_o.tickets) &&
		site.equals(_o.site) &&
		language.equals(_o.language) &&
		warnings.equals(_o.warnings);
}

const char *Predictor::AuthAPI::Protocol_A_GET_USER_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(A_GET_USER_INFO).append(")");
	_buf.append(',');
	_buf.append("eMail=");
	_buf.append(eMail);
	_buf.append(',');
	_buf.append("firstName=");
	_buf.append(firstName);
	_buf.append(',');
	_buf.append("lastName=");
	_buf.append(lastName);
	_buf.append(',');
	_buf.append("country=");
	_buf.append(country);
	_buf.append(',');
	_buf.append("extraValidation=");
	_buf.appendUint(extraValidation);
	_buf.append(',');
	_buf.append("tickets=");
	tickets.toTraceString(_buf);
	_buf.append(',');
	_buf.append("site=");
	_buf.append(site);
	_buf.append(',');
	_buf.append("language=");
	_buf.append(language);
	_buf.append(',');
	_buf.append("warnings=");
	warnings.toTraceString(_buf);
	return _buf.c_str();
}

void Predictor::AuthAPI::Protocol_A_GET_USER_INFO::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(eMail);
	_msg.composeString(firstName);
	_msg.composeString(lastName);
	_msg.composeString(country);
	_msg.composeBOOL(extraValidation);
	tickets.composeMsg(_msg);
	_msg.composeString(site);
	_msg.composeString(language);
	warnings.composeMsg(_msg);
}

void Predictor::AuthAPI::Protocol_A_GET_USER_INFO::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(eMail);
	_parser.parseStringP(firstName);
	_parser.parseStringP(lastName);
	_parser.parseStringP(country);
	_parser.parseBOOL(extraValidation);
	tickets.parseMsg(_parser);
	_parser.parseStringP(site);
	_parser.parseStringP(language);
	warnings.parseMsg(_parser);
}

//=================================================================
//                Protocol_Q_SPEND_TICKET
//=================================================================

Predictor::AuthAPI::Protocol_Q_SPEND_TICKET::Protocol_Q_SPEND_TICKET()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Predictor::AuthAPI::Protocol_Q_SPEND_TICKET::Protocol_Q_SPEND_TICKET(Protocol_Q_SPEND_TICKET&& _o)
	: requestId(std::move(_o.requestId))
	, ticketId(std::move(_o.ticketId))
{
}

Predictor::AuthAPI::Protocol_Q_SPEND_TICKET& Predictor::AuthAPI::Protocol_Q_SPEND_TICKET::operator=(Protocol_Q_SPEND_TICKET&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		ticketId = std::move(_o.ticketId);
	}
	return *this;
}

#endif

void Predictor::AuthAPI::Protocol_Q_SPEND_TICKET::clear()
{
	requestId.clear();
	ticketId = 0;
}

bool Predictor::AuthAPI::Protocol_Q_SPEND_TICKET::equals(const Protocol_Q_SPEND_TICKET& _o) const
{
	return requestId.equals(_o.requestId) &&
		ticketId == _o.ticketId;
}

const char *Predictor::AuthAPI::Protocol_Q_SPEND_TICKET::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(Q_SPEND_TICKET).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("ticketId=");
	_buf.appendUint64(ticketId);
	return _buf.c_str();
}

void Predictor::AuthAPI::Protocol_Q_SPEND_TICKET::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeUINT64(ticketId);
}

void Predictor::AuthAPI::Protocol_Q_SPEND_TICKET::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseUINT64(ticketId);
}

//=================================================================
//                Protocol_A_SPEND_TICKET
//=================================================================

Predictor::AuthAPI::Protocol_A_SPEND_TICKET::Protocol_A_SPEND_TICKET()
{
	clear();
}

void Predictor::AuthAPI::Protocol_A_SPEND_TICKET::clear()
{
}

bool Predictor::AuthAPI::Protocol_A_SPEND_TICKET::equals(const Protocol_A_SPEND_TICKET& _o) const
{
	return true;
}

const char *Predictor::AuthAPI::Protocol_A_SPEND_TICKET::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(A_SPEND_TICKET).append(")");
	return _buf.c_str();
}

void Predictor::AuthAPI::Protocol_A_SPEND_TICKET::composeMsg(CommMsgBody& _msg) const
{
}

void Predictor::AuthAPI::Protocol_A_SPEND_TICKET::parseMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_Q_VOID_TICKETS
//=================================================================

Predictor::PlainAPI::Protocol_Q_VOID_TICKETS::Protocol_Q_VOID_TICKETS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Predictor::PlainAPI::Protocol_Q_VOID_TICKETS::Protocol_Q_VOID_TICKETS(Protocol_Q_VOID_TICKETS&& _o)
	: requestId(std::move(_o.requestId))
	, voidItems(std::move(_o.voidItems))
{
}

Predictor::PlainAPI::Protocol_Q_VOID_TICKETS& Predictor::PlainAPI::Protocol_Q_VOID_TICKETS::operator=(Protocol_Q_VOID_TICKETS&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		voidItems = std::move(_o.voidItems);
	}
	return *this;
}

#endif

void Predictor::PlainAPI::Protocol_Q_VOID_TICKETS::clear()
{
	requestId.clear();
	voidItems.clear();
}

bool Predictor::PlainAPI::Protocol_Q_VOID_TICKETS::equals(const Protocol_Q_VOID_TICKETS& _o) const
{
	return requestId.equals(_o.requestId) &&
		voidItems.equals(_o.voidItems);
}

const char *Predictor::PlainAPI::Protocol_Q_VOID_TICKETS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(Q_VOID_TICKETS).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("voidItems=");
	voidItems.toTraceString(_buf);
	return _buf.c_str();
}

void Predictor::PlainAPI::Protocol_Q_VOID_TICKETS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	voidItems.composeMsg(_msg);
}

void Predictor::PlainAPI::Protocol_Q_VOID_TICKETS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	voidItems.parseMsg(_parser);
}

//=================================================================
//                Protocol_A_VOID_TICKETS
//=================================================================

Predictor::PlainAPI::Protocol_A_VOID_TICKETS::Protocol_A_VOID_TICKETS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Predictor::PlainAPI::Protocol_A_VOID_TICKETS::Protocol_A_VOID_TICKETS(Protocol_A_VOID_TICKETS&& _o)
	: voidResults(std::move(_o.voidResults))
{
}

Predictor::PlainAPI::Protocol_A_VOID_TICKETS& Predictor::PlainAPI::Protocol_A_VOID_TICKETS::operator=(Protocol_A_VOID_TICKETS&& _o)
{
	if(this != &_o)
	{
		voidResults = std::move(_o.voidResults);
	}
	return *this;
}

#endif

void Predictor::PlainAPI::Protocol_A_VOID_TICKETS::clear()
{
	voidResults.clear();
}

bool Predictor::PlainAPI::Protocol_A_VOID_TICKETS::equals(const Protocol_A_VOID_TICKETS& _o) const
{
	return voidResults.equals(_o.voidResults);
}

const char *Predictor::PlainAPI::Protocol_A_VOID_TICKETS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(A_VOID_TICKETS).append(")");
	_buf.append(',');
	_buf.append("voidResults=");
	voidResults.toTraceString(_buf);
	return _buf.c_str();
}

void Predictor::PlainAPI::Protocol_A_VOID_TICKETS::composeMsg(CommMsgBody& _msg) const
{
	voidResults.composeMsg(_msg);
}

void Predictor::PlainAPI::Protocol_A_VOID_TICKETS::parseMsg(CommMsgParser& _parser)
{
	voidResults.parseMsg(_parser);
}

//=================================================================
//                Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS
//=================================================================

Predictor::PlainAPI::Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS::Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS()
{
	clear();
}

void Predictor::PlainAPI::Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS::clear()
{
	lastReceivedTransactionId = 0;
}

bool Predictor::PlainAPI::Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS::equals(const Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS& _o) const
{
	return lastReceivedTransactionId == _o.lastReceivedTransactionId;
}

const char *Predictor::PlainAPI::Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(Q_GET_RECENT_TICKET_TRANSACTIONS).append(")");
	_buf.append(',');
	_buf.append("lastReceivedTransactionId=");
	_buf.appendUint64(lastReceivedTransactionId);
	return _buf.c_str();
}

void Predictor::PlainAPI::Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(lastReceivedTransactionId);
}

void Predictor::PlainAPI::Protocol_Q_GET_RECENT_TICKET_TRANSACTIONS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(lastReceivedTransactionId);
}

//=================================================================
//                Protocol_A_GET_RECENT_TICKET_TRANSACTIONS
//=================================================================

Predictor::PlainAPI::Protocol_A_GET_RECENT_TICKET_TRANSACTIONS::Protocol_A_GET_RECENT_TICKET_TRANSACTIONS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Predictor::PlainAPI::Protocol_A_GET_RECENT_TICKET_TRANSACTIONS::Protocol_A_GET_RECENT_TICKET_TRANSACTIONS(Protocol_A_GET_RECENT_TICKET_TRANSACTIONS&& _o)
	: recentTransacts(std::move(_o.recentTransacts))
{
}

Predictor::PlainAPI::Protocol_A_GET_RECENT_TICKET_TRANSACTIONS& Predictor::PlainAPI::Protocol_A_GET_RECENT_TICKET_TRANSACTIONS::operator=(Protocol_A_GET_RECENT_TICKET_TRANSACTIONS&& _o)
{
	if(this != &_o)
	{
		recentTransacts = std::move(_o.recentTransacts);
	}
	return *this;
}

#endif

void Predictor::PlainAPI::Protocol_A_GET_RECENT_TICKET_TRANSACTIONS::clear()
{
	recentTransacts.clear();
}

bool Predictor::PlainAPI::Protocol_A_GET_RECENT_TICKET_TRANSACTIONS::equals(const Protocol_A_GET_RECENT_TICKET_TRANSACTIONS& _o) const
{
	return recentTransacts.equals(_o.recentTransacts);
}

const char *Predictor::PlainAPI::Protocol_A_GET_RECENT_TICKET_TRANSACTIONS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(A_GET_RECENT_TICKET_TRANSACTIONS).append(")");
	_buf.append(',');
	_buf.append("recentTransacts=");
	recentTransacts.toTraceString(_buf);
	return _buf.c_str();
}

void Predictor::PlainAPI::Protocol_A_GET_RECENT_TICKET_TRANSACTIONS::composeMsg(CommMsgBody& _msg) const
{
	recentTransacts.composeMsg(_msg);
}

void Predictor::PlainAPI::Protocol_A_GET_RECENT_TICKET_TRANSACTIONS::parseMsg(CommMsgParser& _parser)
{
	recentTransacts.parseMsg(_parser);
}

