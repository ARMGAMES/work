/**
 * pokerlobbyprotocols_thin.cpp
 *
 * This file was auto-generated from pokerlobbyprotocols.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin pokerlobbyprotocols.txt
 */
 
#include "pokerlobbyprotocols_thin.h"

//=================================================================
//                    TableCaps
//=================================================================

PokerLobbyMsgs::PokerLobbyServerData::TableCaps::TableCaps()
{
	clear();
}

void PokerLobbyMsgs::PokerLobbyServerData::TableCaps::clear()
{
	tableCapTotal = 0;
	tableCapZoom = 0;
}

bool PokerLobbyMsgs::PokerLobbyServerData::TableCaps::equals(const TableCaps& _o) const
{
	return tableCapTotal == _o.tableCapTotal &&
		tableCapZoom == _o.tableCapZoom;
}

const char *PokerLobbyMsgs::PokerLobbyServerData::TableCaps::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("tableCapTotal=");
	_buf.appendInt(tableCapTotal);
	_buf.append(',');
	_buf.append("tableCapZoom=");
	_buf.appendInt(tableCapZoom);
	_buf.append('}');
	return _buf.c_str();
}

void PokerLobbyMsgs::PokerLobbyServerData::TableCaps::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(tableCapTotal);
	_msg.composeINT32(tableCapZoom);
}

void PokerLobbyMsgs::PokerLobbyServerData::TableCaps::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(tableCapTotal);
	_parser.parseINT32(tableCapZoom);
}

/*static*/ void PokerLobbyMsgs::PokerLobbyServerData::TableCaps::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT32 tableCapTotal; _parser.parseINT32(tableCapTotal);
	AtfValidator::validateInt(_descr, "tableCapTotal", tableCapTotal, _checker, __FILE__, __LINE__);
	INT32 tableCapZoom; _parser.parseINT32(tableCapZoom);
	AtfValidator::validateInt(_descr, "tableCapZoom", tableCapZoom, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    PlayerStats
//=================================================================

PokerLobbyMsgs::PokerLobbyServerData::PlayerStats::PlayerStats()
{
	clear();
}

void PokerLobbyMsgs::PokerLobbyServerData::PlayerStats::clear()
{
	numTables = 0;
	numPlayers = 0;
	numTourn = 0;
	numBlitz = 0;
}

bool PokerLobbyMsgs::PokerLobbyServerData::PlayerStats::equals(const PlayerStats& _o) const
{
	return numTables == _o.numTables &&
		numPlayers == _o.numPlayers &&
		numTourn == _o.numTourn &&
		numBlitz == _o.numBlitz;
}

const char *PokerLobbyMsgs::PokerLobbyServerData::PlayerStats::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("numTables=");
	_buf.appendUint(numTables);
	_buf.append(',');
	_buf.append("numPlayers=");
	_buf.appendUint(numPlayers);
	_buf.append(',');
	_buf.append("numTourn=");
	_buf.appendUint(numTourn);
	_buf.append(',');
	_buf.append("numBlitz=");
	_buf.appendUint(numBlitz);
	_buf.append('}');
	return _buf.c_str();
}

void PokerLobbyMsgs::PokerLobbyServerData::PlayerStats::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(numTables);
	_msg.composeUINT32(numPlayers);
	_msg.composeUINT32(numTourn);
	_msg.composeUINT32(numBlitz);
}

void PokerLobbyMsgs::PokerLobbyServerData::PlayerStats::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(numTables);
	_parser.parseUINT32(numPlayers);
	_parser.parseUINT32(numTourn);
	_parser.parseUINT32(numBlitz);
}

/*static*/ void PokerLobbyMsgs::PokerLobbyServerData::PlayerStats::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	UINT32 numTables; _parser.parseUINT32(numTables);
	AtfValidator::validateInt(_descr, "numTables", numTables, _checker, __FILE__, __LINE__);
	UINT32 numPlayers; _parser.parseUINT32(numPlayers);
	AtfValidator::validateInt(_descr, "numPlayers", numPlayers, _checker, __FILE__, __LINE__);
	UINT32 numTourn; _parser.parseUINT32(numTourn);
	AtfValidator::validateInt(_descr, "numTourn", numTourn, _checker, __FILE__, __LINE__);
	UINT32 numBlitz; _parser.parseUINT32(numBlitz);
	AtfValidator::validateInt(_descr, "numBlitz", numBlitz, _checker, __FILE__, __LINE__);
}

