/**
 * lobbyprotocols.h
 *
 * This file was auto-generated from lobbyprotocols.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: lobbyprotocols.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_LOBBYPROTOCOLS_H
#define ATF_PROTOCOL_DEFFILE_LOBBYPROTOCOLS_H

#include "UserDefStructs.h"
#include "lobby.h"
#include "admincommon.h"
#include "sites.h"
#include "aamsgateway.h"


namespace MainLobbyMsgs
{
	class ProtocolFactory
	{
	public:
		static Atf::MessageProtocol* createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId);
		static bool validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	namespace adminMsgs
	{
		//-------------------------------- MSG_LOBBY_ADMIN_APPROVE_USERS ------------------------------------------------------
		struct MsgApproveUserRequest
		{
			// s1s4 - userName,approval,comments,imageId
			PString userName;
			BYTE approval;
			PString comments;
			UINT32 imageId;

			MsgApproveUserRequest();
			void clear();
			bool equals(const MsgApproveUserRequest&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS : public Atf::MessageProtocol
		{
			// 4<s1s4> - numRequests<userName,approval,comments,imageId>
			Atf::LAtfVector< MsgApproveUserRequest, 4 > requests;

			Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_APPROVE_USERS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_APPROVE_USERS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<s>] - errCode[errDescr|numEmail<email>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< PString, 4 > email;

			Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//-------------------------------- MSG_LOBBY_ADMIN_SET_PRIVILEGES -------------------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES : public Atf::MessageProtocol
		{
			// s448888 - userId,privileges,prev_privs,priv2,prev_priv2,priv3,prev_priv3
			PString userId;
			UINT32 privileges;
			UINT32 prev_privs;
			UINT64 priv2;
			UINT64 prev_priv2;
			UINT64 priv3;
			UINT64 prev_priv3;

			Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_SET_PRIVILEGES; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_SET_PRIVILEGES"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s4488] - errCode[errDescr|userId,privileges,flags,privileges2,privileges3]
			INT16 errCode;

			PString errDescr;

			PString userId;
			UINT32 privileges;
			UINT32 flags;
			UINT64 privileges2;
			UINT64 privileges3;

			Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//-------------------------------- MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT -------------------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT : public Atf::MessageProtocol
		{
			// 41 - tournId,ryoOnly
			UINT32 tournId;
			BYTE ryoOnly;

			Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//------------------------------------ MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT ---------------------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT : public Atf::MessageProtocol
		{
			// 41 - id,ryoOnly
			UINT32 id;
			BYTE ryoOnly;

			Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//------------------------------------ MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT ---------------------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT : public Atf::MessageProtocol
		{
			// 44 - startId,stopId
			UINT32 startId;
			UINT32 stopId;

			Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS : public Atf::MessageProtocol
		{
			// 41 - tournId,ryoOnly
			UINT32 tournId;
			BYTE ryoOnly;

			Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN : public Atf::MessageProtocol
		{
			// 44s4 - type,formula,text,site
			UINT32 type;
			UINT32 formula;
			PString text;
			UINT32 site;

			Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_TOURN_ADDR ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR : public Atf::MessageProtocol
		{
			// 4 - tournId
			UINT32 tournId;

			Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_TOURN_ADDR; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_TOURN_ADDR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY : public Atf::MessageProtocol
		{
			// 2[s|ss] - errCode[errDescr|server,serverObj]
			INT16 errCode;

			PString errDescr;

			PString server;
			PString serverObj;

			Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_BLITZ_ADDR ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR : public Atf::MessageProtocol
		{
			//! 4 <FIXME_COND_IF> s <FIXME_COND_ENDIF>  - blitzId <FIXME_COND_IF> ,name <FIXME_COND_ENDIF> 
			UINT32 blitzId;

			PString name;

			Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_BLITZ_ADDR; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_BLITZ_ADDR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY : public Atf::MessageProtocol
		{
			// 2[s|ss4] - errCode[errDescr|serverAddr,serverInstance,id]
			INT16 errCode;

			PString errDescr;

			PString serverAddr;
			PString serverInstance;
			UINT32 id;

			Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_BROADCAST ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_BROADCAST : public Atf::MessageProtocol
		{
			// s41 - messageText,flags,dst
			PString messageText;
			UINT32 flags;
			BYTE dst;

			Protocol_MSG_LOBBY_ADMIN_BROADCAST();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_BROADCAST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_BROADCAST; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_BROADCAST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_BROADCAST_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_BROADCAST_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_I18N_BROADCAST ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST : public Atf::MessageProtocol
		{
			// I41 - messageText,flags,dst
			I18nPString messageText;
			UINT32 flags;
			BYTE dst;

			Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_I18N_BROADCAST; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_I18N_BROADCAST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_IMPROVED_BROADCAST ------------------------------------------
		//Message MSG_LOBBY_ADMIN_IMPROVED_BROADCAST
		//{
		//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_IMPROVED_BROADCAST_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_ALL_SCHED_BROADCAST_MSG ------------------------------------------
		//Message MSG_LOBBY_ADMIN_GET_ALL_SCHED_BROADCAST_MSG
		//{
		//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_GET_ALL_SCHED_BROADCAST_MSG_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_UPDATE_SCHED_BROADCAST_MSG ------------------------------------------
		//Message MSG_LOBBY_ADMIN_UPDATE_SCHED_BROADCAST_MSG
		//{
		//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_UPDATE_SCHED_BROADCAST_MSG_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_DELETE_SCHED_BROADCAST_MSG ------------------------------------------
		//Message MSG_LOBBY_ADMIN_DELETE_SCHED_BROADCAST_MSG
		//{
		//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_DELETE_SCHED_BROADCAST_MSG_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_TABLE_MESSAGE ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE : public Atf::MessageProtocol
		{
			// 8s4 - tableId,tableText,options
			UINT64 tableId;
			PString tableText;
			UINT32 options;

			Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_TABLE_MESSAGE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_TABLE_MESSAGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_STOP_DEALING ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_STOP_DEALING : public Atf::MessageProtocol
		{
			// s1s48 - messageText,broadcastFlags,tableName,site,tableId
			PString messageText;
			BYTE broadcastFlags;
			PString tableName;
			UINT32 site;
			UINT64 tableId;

			Protocol_MSG_LOBBY_ADMIN_STOP_DEALING();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_STOP_DEALING&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_STOP_DEALING; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_STOP_DEALING"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_STOP_DEALING_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_STOP_DEALING_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_RESUME_DEALING ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING : public Atf::MessageProtocol
		{
			// 1s48 - broadcastFlags,tableName,site,tableId
			BYTE broadcastFlags;
			PString tableName;
			UINT32 site;
			UINT64 tableId;

			Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_RESUME_DEALING; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_RESUME_DEALING"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_CREATE_TOURNAMENT ------------------------------------------
		//Message MSG_LOBBY_CREATE_TOURNAMENT
		//{
		//	TODO
		//};
		//Message MSG_LOBBY_CREATE_TOURNAMENT_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_SETUP_INFO ------------------------------------------
		struct Protocol_MSG_LOBBY_SETUP_INFO : public Atf::MessageProtocol
		{
			// ss - script,fileName
			PString script;
			PString fileName;

			Protocol_MSG_LOBBY_SETUP_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SETUP_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SETUP_INFO; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SETUP_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_SETUP_INFO_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_SETUP_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SETUP_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SETUP_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SETUP_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_SAY_TO_USER ------------------------------------------
		//Message MSG_LOBBY_ADMIN_SAY_TO_USER
		//{
		//	Message is being deprecated - don't do
		//};
		//Message MSG_LOBBY_ADMIN_SAY_TO_USER_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_FORCELOGOUT_USER ------------------------------------------
		//Message MSG_LOBBY_ADMIN_FORCELOGOUT_USER
		//{
		//	PString userId;
		//};
		//Message MSG_LOBBY_ADMIN_FORCELOGOUT_USER_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_RECREATE_TOURNAMENT ------------------------------------------
		//Message MSG_LOBBY_RECREATE_TOURNAMENT
		//{
		// TODO
		//};
		//Message MSG_LOBBY_RECREATE_TOURNAMENT_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_NEW_SITANDGO ------------------------------------------
		//Message MSG_LOBBY_ADMIN_NEW_SITANDGO
		//{
		//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_NEW_SITANDGO_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_UPDATE_SITANDGO ------------------------------------------
		//Message MSG_LOBBY_ADMIN_UPDATE_SITANDGO
		//{
		//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_UPDATE_SITANDGO_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_NEW_SITANDGO2 ------------------------------------------
		//Message MSG_LOBBY_ADMIN_NEW_SITANDGO2
		//{
		// TODO
		//};
		//Message MSG_LOBBY_ADMIN_NEW_SITANDGO2_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_UPDATE_SITANDGO2 ------------------------------------------
		//Message MSG_LOBBY_ADMIN_UPDATE_SITANDGO2
		//{
		// TODO
		//};
		//Message MSG_LOBBY_ADMIN_UPDATE_SITANDGO2_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_DELETE_SITANDGO ------------------------------------------
		//Message MSG_LOBBY_ADMIN_DELETE_SITANDGO
		//{
		//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_DELETE_SITANDGO_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_DELETE_SITANDGO2 ------------------------------------------
		//Message MSG_LOBBY_ADMIN_DELETE_SITANDGO2
		//{
		// TODO
		//};
		//Message MSG_LOBBY_ADMIN_DELETE_SITANDGO2_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_QUERY_SITANDGO ------------------------------------------
		//Message MSG_LOBBY_ADMIN_QUERY_SITANDGO
		//{
		//	empty
		//};
		//Message MSG_LOBBY_ADMIN_QUERY_SITANDGO_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	else
		//	{
		//		vector<PString> sitAndGoTitles;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_SET_DISCONN_STATE ------------------------------------------
		//Message MSG_LOBBY_ADMIN_SET_DISCONN_STATE
		//{
		//	BYTE state;
		//};
		//Message MSG_LOBBY_ADMIN_SET_DISCONN_STATE_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	else
		//	{
		//		BYTE tempState;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_STOP_ALLTOURNAMENTS ------------------------------------------
		//Message MSG_LOBBY_ADMIN_STOP_ALLTOURNAMENTS
		//{
		/*	TODO. Conditional parsing:
		   
		   if( parser.parseEnded() )
		   adminMessage.putPString( text );
		   else
		   adminMessage.parse( parser );
		 */

		//	PString  text;
		//	UINT32  flags;
		//	UINT32  site;
		//	I18nPString adminMessage parseEndOptB4Me;
		//};
		//Message MSG_LOBBY_ADMIN_STOP_ALLTOURNAMENTS_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS : public Atf::MessageProtocol
		{
			// 444<4>tt - flags,site,numTournsToExclude<tournsToExclude>,excludeScheduledTournamentsBefore,excludeNonScheduledTournamentsBefore
			UINT32 flags;
			UINT32 site;
			Atf::LAtfVector< UINT32, 4 > tournsToExclude;
			SrvTime excludeScheduledTournamentsBefore;	// compared to tourn start time
			SrvTime excludeNonScheduledTournamentsBefore;	// compared to tourn created time

			Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_STOP_TOURNREGEN ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN : public Atf::MessageProtocol
		{
			// 444 - flags,site,segment
			UINT32 flags;
			UINT32 site;
			UINT32 segment;

			Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_STOP_TOURNREGEN; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_STOP_TOURNREGEN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_RESUME_TOURNREGEN ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN : public Atf::MessageProtocol
		{
			// 444 - flags,site,segment
			UINT32 flags;
			UINT32 site;
			UINT32 segment;

			Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_RESUME_TOURNREGEN; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_RESUME_TOURNREGEN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_TABLES_STATE2 ------------------------------------------
		//Message MSG_LOBBY_ADMIN_GET_TABLES_STATE2
		//{
		//	// Empty
		//};
		//Message MSG_LOBBY_ADMIN_GET_TABLES_STATE2_REPLY
		//{
		//	TODO
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CREATE_REPLAY ------------------------------------------
		//Message MSG_LOBBY_ADMIN_CREATE_REPLAY
		//{
		// TODO
		// No reqId for this message
		//};
		//Message MSG_LOBBY_ADMIN_CREATE_REPLAY_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CANCEL_REPLAY ------------------------------------------
		//Message MSG_LOBBY_ADMIN_CANCEL_REPLAY
		//{
		//	TODO
		// No reqId for this message
		//};
		//Message MSG_LOBBY_ADMIN_CANCEL_REPLAY_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_RESTART_TOURN ------------------------------------------
		//Message MSG_LOBBY_ADMIN_RESTART_TOURN
		//{
		//	UINT32 tournId;
		//};
		//Message MSG_LOBBY_ADMIN_RESTART_TOURN_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	else
		//	{
		//		PString empty;
		//		vector<UINT64> tableIds;
		//	}
		//};

		//--------------------------------------------- MSG_TABLE_ADMIN_REINIT ------------------------------------------
		//Message MSG_TABLE_ADMIN_REINIT
		//{
		// Empty
		//};
		//Message MSG_TABLE_ADMIN_REINIT_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_NOIMAGES ------------------------------------------
		//Message MSG_LOBBY_ADMIN_NOIMAGES
		//{
		//	BYTE imagesOff;
		//};
		//Message MSG_LOBBY_ADMIN_NOIMAGES_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_REVOKE_CHAT ------------------------------------------
		struct RevokeChatRequest
		{
			// s1s1t - userId,bitFlags,comment,severity,srvUntil
			PString userId;
			BYTE bitFlags;
			PString comment;
			BYTE severity;
			SrvTime srvUntil;

			RevokeChatRequest();
			void clear();
			bool equals(const RevokeChatRequest&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT : public Atf::MessageProtocol
		{
			// ss4<s1s1t> - complainer,complainerComment,numRequest<userId,bitFlags,comment,severity,srvUntil>
			PString complainer;
			PString complainerComment;
			Atf::LAtfVector< RevokeChatRequest, 4 > request;

			Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_REVOKE_CHAT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_REVOKE_CHAT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct RevokeChatResponse
		{
			// ss - userId,email
			PString userId;
			PString email;

			RevokeChatResponse();
			void clear();
			bool equals(const RevokeChatResponse&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s4<ss>] - errCode[errDescr|complainerEmail,numUsers<userId,email>]
			INT16 errCode;

			PString errDescr;

			PString complainerEmail;
			Atf::LAtfVector< RevokeChatResponse, 4 > users;

			Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE : public Atf::MessageProtocol
		{
			// sss8 - userId,tableName,messageText,tableId
			PString userId;
			PString tableName;
			PString messageText;
			UINT64 tableId;

			Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_MODERATOR_SWITCH ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH : public Atf::MessageProtocol
		{
			// 1 - on
			BYTE on;

			Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MODERATOR_SWITCH; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MODERATOR_SWITCH"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CLIENT_DATA_MINING ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING : public Atf::MessageProtocol
		{
			// 44 - opt0,opt1
			UINT32 opt0;
			UINT32 opt1;

			Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CLIENT_DATA_MINING; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CLIENT_DATA_MINING"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_TEAM_PS_LIST ------------------------------------------
		//Message MSG_LOBBY_ADMIN_GET_TEAM_PS_LIST
		//{
		//	Empty
		//};
		//struct TeamPsInfo
		//{
		//	PString userId;
		//	PString name;
		//	PString displayCountry;
		//	UINT32 siteId;
		//};
		//Message MSG_LOBBY_ADMIN_GET_TEAM_PS_LIST_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	else
		//	{
		//		vector<TeamPsInfo> response;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_SET_TEAM_PS_LIST ------------------------------------------
		//Message MSG_LOBBY_ADMIN_SET_TEAM_PS_LIST
		//{
		//	vector<TeamPsInfo> request;
		//};
		//Message MSG_LOBBY_ADMIN_SET_TEAM_PS_LIST_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_REREAD_MSGS ------------------------------------------
		//Message MSG_LOBBY_REREAD_MSGS
		//{
		//	//	Empty
		//};
		//Message MSG_LOBBY_REREAD_MSGS_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_CHAT_STATUS ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS : public Atf::MessageProtocol
		{
			// s8 - tableName,tableId
			PString tableName;
			UINT64 tableId;

			Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_GET_CHAT_STATUS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_GET_CHAT_STATUS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s1] - errCode[errDescr|tableName,state]
			INT16 errCode;

			PString errDescr;

			PString tableName;
			BYTE state;

			Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_SET_CHAT_STATUS ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS : public Atf::MessageProtocol
		{
			// 1sb8 - status,tableName,teamBlocked,tableId
			BYTE status;
			PString tableName;
			bool teamBlocked;
			UINT64 tableId;

			Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_SET_CHAT_STATUS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_SET_CHAT_STATUS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_LOBBY_FLYER ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER : public Atf::MessageProtocol
		{
			// 1444s4 - action,attrib,flags,locale,text,siteId
			BYTE action;
			UINT32 attrib;
			UINT32 flags;
			UINT32 locale;
			PString text;
			UINT32 siteId;

			Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_LOBBY_FLYER; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_LOBBY_FLYER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE : public Atf::MessageProtocol
		{
			// 4 - templateId
			UINT32 templateId;

			Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE : public Atf::MessageProtocol
		{
			// 444<4>4<4>m - templateId,siteIdMask,numAttributes<attributes>,numFlags<flags>,siteIdMaskEx
			UINT32 templateId;
			UINT32 siteIdMask;
			Atf::LAtfVector< UINT32, 4 > attributes;
			Atf::LAtfVector< UINT32, 4 > flags;
			PSiteMask siteIdMaskEx;

			Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME : public Atf::MessageProtocol
		{
			// 4I - tournId,name
			UINT32 tournId;
			I18nPString name;

			Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS : public Atf::MessageProtocol
		{
			// 44 - tournId,newStatus
			UINT32 tournId;
			UINT32 newStatus;

			Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_TO_AAMS ------------------------------------------
		//Message MSG_LOBBY_ADMIN_TO_AAMS
		//{
		//	CommMsgBody msg;
		//	UINT32 gatewayType parseEndOptB4Me default eAGTTournament;
		//};
		//Message MSG_LOBBY_ADMIN_TO_AAMS_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_UPDATE_TABLE_NAMES ------------------------------------------
		//Message MSG_LOBBY_ADMIN_UPDATE_TABLE_NAMES
		//{
		//	Empty
		//};
		//Message MSG_LOBBY_ADMIN_UPDATE_TABLE_NAMES_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_REFRESH_TABLEDBM_SETTINGS ------------------------------------------
		//Message MSG_LOBBY_REFRESH_TABLEDBM_SETTINGS
		//{
		//	Empty
		//};
		//Message MSG_LOBBY_REFRESH_TABLEDBM_SETTINGS_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CLOSE_TABLE ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE : public Atf::MessageProtocol
		{
			// sI8b - tableName,messageText,tableId,forceKill
			PString tableName;
			I18nPString messageText;
			UINT64 tableId;
			bool forceKill;	//PYR-69670

			Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CLOSE_TABLE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CLOSE_TABLE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE : public Atf::MessageProtocol
		{
			// ss8 - tableName,messageText,tableId
			PString tableName;
			PString messageText;
			UINT64 tableId;

			Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_JUBILEE_PRIZES ------------------------------------------
		//Message MSG_LOBBY_ADMIN_JUBILEE_PRIZES
		//{
		//	//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_JUBILEE_PRIZES_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_SET_PUBL_PROPERTY ------------------------------------------
		//Message MSG_LOBBY_ADMIN_SET_PUBL_PROPERTY
		//{
		//	// TODO
		//};
		//Message MSG_LOBBY_ADMIN_SET_PUBL_PROPERTY_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY : public Atf::MessageProtocol
		{
			// 4 - siteId
			UINT32 siteId;

			Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct PropertyInfo
		{
			// ss - s1,s2
			PString s1;
			PString s2;

			PropertyInfo();
			void clear();
			bool equals(const PropertyInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<ss>] - errCode[errDescr|numPropertyInfo<s1,s2>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< PropertyInfo, 4 > propertyInfo;

			Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY : public Atf::MessageProtocol
		{
			// s4 - name,siteId
			PString name;
			UINT32 siteId;

			Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER : public Atf::MessageProtocol
		{
			// st4 - userId,until,reason
			PString userId;
			CommSrvTime until;
			UINT32 reason;

			Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_CHALLENGE_QA ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA : public Atf::MessageProtocol
		{
			// s - userId
			PString userId;

			Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_GET_CHALLENGE_QA; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_GET_CHALLENGE_QA"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY : public Atf::MessageProtocol
		{
			// 2[s|b24ss4ss] - errCode[errDescr|isRM,numOfQuestions,id1,question1,answer1,id2,question2,answer2]
			INT16 errCode;

			PString errDescr;

			bool isRM;
			UINT16 numOfQuestions;
			UINT32 id1;
			PString question1;
			PString answer1;
			UINT32 id2;
			PString question2;
			PString answer2;

			Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_UPDATE_LANG_PATTERNS ------------------------------------------
		//Message MSG_LOBBY_ADMIN_UPDATE_LANG_PATTERNS
		//{
		//	UINT32 locale;
		//	vector<PString> patterns;
		//	bool isWhiteList parseEndOptB4Me;
		//};
		//Message MSG_LOBBY_ADMIN_UPDATE_LANG_PATTERNS_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_TABLE_PAUSING_INFO ------------------------------------------
		//Message MSG_LOBBY_ADMIN_GET_TABLE_PAUSING_INFO
		//{
		//	Empty
		//};
		//struct PausedTableInfo
		//{
		//	UINT64 tableId;
		//	CommSrvTime pausingFrom;
		//	CommSrvTime pausingTo;
		//	UINT32 pausingAfterNumHands;
		//	UINT32 pausingStatus;
		//	UINT32 numHandsPlayed;
		//};
		//Message MSG_LOBBY_ADMIN_GET_TABLE_PAUSING_INFO_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	else
		//	{
		//		vector<PausedTableInfo> pausedTableInfo;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO : public Atf::MessageProtocol
		{
			// 8tt4 - tableId,pausingFrom,pausingTo,pausingAfterNumHands
			UINT64 tableId;
			CommSrvTime pausingFrom;
			CommSrvTime pausingTo;
			UINT32 pausingAfterNumHands;

			Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_SET_JUBILEE_HAND ------------------------------------------
		//Message MSG_LOBBY_ADMIN_SET_JUBILEE_HAND
		//{
		//	//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_SET_JUBILEE_HAND_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_TABLES_BY_NAME ------------------------------------------
		//Message MSG_LOBBY_ADMIN_GET_TABLES_BY_NAME
		//{
		//	PString tableName;
		//};
		//struct TablesByNameReply
		//{
		//	UINT64 tableId;
		//	BYTE game;
		//	BYTE structure;
		//	BYTE isHiLo;
		//	BYTE isPlayMoney;
		//	BYTE isOneOnOne;
		//	UINT32 smartLoBet;
		//	UINT32 loBet;
		//	UINT32 hiBet;
		//	PString currency;
		//	UINT32 clubId;
		//};
		//Message MSG_LOBBY_ADMIN_GET_TABLES_BY_NAME_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	else
		//	{
		//		PString tableName;
		//		vector<TablesByNameReply> tablesByNameReply;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_TABLE_ADDRESS ------------------------------------------
		//Message MSG_LOBBY_ADMIN_GET_TABLE_ADDRESS
		//{
		//	UINT32 tableId32;
		//	UINT64 tableId parseEndOptB4Me;

		/*	TODO: conditional parsing
		   parseUINT32(tableId32);
		   if(!parser.parseEnded())
		   {
		   parseUINT64(tableId);
		   }
		   else
		   {
		   tableId = tableId32;
		   }
		 */
		//};
		//Message MSG_LOBBY_ADMIN_GET_TABLE_ADDRESS_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	else
		//	{
		//		PString server;
		//		PString serverObject;
		//		PString tablePublicationName;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CREATE_RING_GAME_REPLAY ------------------------------------------
		//Message MSG_LOBBY_ADMIN_CREATE_RING_GAME_REPLAY
		//{
		//	//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_CREATE_RING_GAME_REPLAY_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CANCEL_RING_GAME_REPLAY ------------------------------------------
		//Message MSG_LOBBY_ADMIN_CANCEL_RING_GAME_REPLAY
		//{
		//	UINT32 id;
		//};
		//Message MSG_LOBBY_ADMIN_CANCEL_RING_GAME_REPLAY_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CANCEL_RING_GAME_REPLAY_BY_NAME ------------------------------------------
		//Message MSG_LOBBY_ADMIN_CANCEL_RING_GAME_REPLAY_BY_NAME
		//{
		//	PString  replayName;
		//};
		//Message MSG_LOBBY_ADMIN_CANCEL_RING_GAME_REPLAY_BY_NAME_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_RESEND_MOBILE_VALIDATION ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION : public Atf::MessageProtocol
		{
			// sb - user,newCode
			PString user;
			bool newCode;

			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RESEND_MOBILE_VALIDATION; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RESEND_MOBILE_VALIDATION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_RESET_STACKS_TABLE ------------------------------------------
		//Message MSG_LOBBY_ADMIN_RESET_STACKS_TABLE
		//{
		//	UINT64  tableId;
		//};
		//Message MSG_LOBBY_ADMIN_RESET_STACKS_TABLE_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CREATE_BLITZ ------------------------------------------
		//Message MSG_LOBBY_ADMIN_CREATE_BLITZ
		//{
		//	//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_CREATE_BLITZ_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_REGENERATE_BLITZ ------------------------------------------
		//Message MSG_LOBBY_ADMIN_REGENERATE_BLITZ
		//{
		//	//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_REGENERATE_BLITZ_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING : public Atf::MessageProtocol
		{
			// I414 - i18nMsg,msgFlags,flags,sites
			I18nPString i18nMsg;
			UINT32 msgFlags;
			BYTE flags;
			UINT32 sites;

			Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING : public Atf::MessageProtocol
		{
			// I414 - i18nMsg,msgFlags,flags,sites
			I18nPString i18nMsg;
			UINT32 msgFlags;
			BYTE flags;
			UINT32 sites;

			Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_REREAD_INIDATA ------------------------------------------
		//Message MSG_LOBBY_ADMIN_REREAD_INIDATA
		//{
		//	//	Empty
		//};
		//Message MSG_LOBBY_ADMIN_REREAD_INIDATA_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_ADMIN_REOPEN_LOG_FILE ------------------------------------------
		//Message MSG_ADMIN_REOPEN_LOG_FILE
		//{
		//	//	Empty
		//};
		//Message MSG_ADMIN_REOPEN_LOG_FILE_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_TOURN_SCRIPT ------------------------------------------
		//Message MSG_LOBBY_ADMIN_GET_TOURN_SCRIPT
		//{
		//	//	TODO
		//};
		//Message MSG_LOBBY_ADMIN_GET_TOURN_SCRIPT_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN : public Atf::MessageProtocol
		{
			// 4b - tournId,cleanupAllocated
			UINT32 tournId;
			bool cleanupAllocated;

			Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ : public Atf::MessageProtocol
		{
			// sb - blitzName,creditStuckUsers
			PString blitzName;
			bool creditStuckUsers;

			Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_MANAGE_INSTALLID ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID : public Atf::MessageProtocol
		{
			// ssb - userId,installId,validate
			PString userId;
			PString installId;
			bool validate;

			Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MANAGE_INSTALLID; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MANAGE_INSTALLID"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_ADMIN_LOBBY_SHUTDOWN_TGM ------------------------------------------
		struct Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM : public Atf::MessageProtocol
		{
			// s4bb - groupName,type,restart,force
			PString groupName;
			UINT32 type;
			bool restart;
			bool force;

			Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_SHUTDOWN_TGM; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_SHUTDOWN_TGM"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_ADMIN_LOBBY_RESTORE_TGM ------------------------------------------
		struct Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM : public Atf::MessageProtocol
		{
			// s4 - groupName,type
			PString groupName;
			UINT32 type;

			Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_RESTORE_TGM; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_RESTORE_TGM"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_ADMIN_LOBBY_GET_JH_SIMILAR_PLAYERS_VPP ------------------------------------------
		//Message MSG_ADMIN_LOBBY_GET_JH_SIMILAR_PLAYERS_VPP
		//{
		//	UINT64  tableId;
		//	bool test parseEndOptB4Me;
		//};
		//struct JHSimiliarPlayer
		//{
		//	PString userId;
		//	UINT32 vpp;
		//};
		//struct JHSimiliarData
		//{
		//	UINT64 tableId;
		//	CommSrvTime timestamp;
		//	vector<JHSimiliarPlayer> players;
		//};
		//Message MSG_ADMIN_LOBBY_GET_JH_SIMILAR_PLAYERS_VPP_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	else
		//	{
		//		vector<JHSimiliarData> jhSimiliarData;
		//	}
		//};

		//--------------------------------------------- MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY ------------------------------------------
		struct Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY : public Atf::MessageProtocol
		{
			// s4s4 - tableName,totalAmount,userId,amount
			PString tableName;
			UINT32 totalAmount;
			PString userId;
			UINT32 amount;

			Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY : public Atf::MessageProtocol
		{
			// s48 - tableName,totalAmount,tableId
			PString tableName;
			UINT32 totalAmount;
			UINT64 tableId;

			Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_ADMIN_LOBBY_REMOVE_FLIGHT_USER ------------------------------------------
		//Message MSG_ADMIN_LOBBY_REMOVE_FLIGHT_USER
		//{
		//	UINT32  tournId;
		//	PString  userId;
		//	PString  comment;
		//};
		//Message MSG_ADMIN_LOBBY_REMOVE_FLIGHT_USER_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_ADMIN_LOBBY_CLI_POPUP_TO_CONFIRM ------------------------------------------
		//Message MSG_ADMIN_LOBBY_CLI_POPUP_TO_CONFIRM
		//{
		//	vector<PString> users;
		//	UINT32 templateId;
		//	UINT64 tableId;
		//};
		//Message MSG_ADMIN_LOBBY_CLI_POPUP_TO_CONFIRM_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//	//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_ADMIN_LOBBY_GET_TGMS ------------------------------------------
		//Message MSG_ADMIN_LOBBY_GET_TGMS
		//{
		//	UINT32 type;
		//	bool activeOnly;
		//};
		//Message MSG_ADMIN_LOBBY_GET_TGMS_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//	//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_ADMIN_LOBBY_CREATE_TGM ------------------------------------------
		//Message MSG_ADMIN_LOBBY_CREATE_TGM
		//{
		//	UINT32 type;
		//	PString groupName;
		//	CommSrvTime startTime;
		//	CommSrvTime endTime;
		//	UINT32 maxEntry;
		//	UINT32 tgmFlags;
		//	INT32 periodMins;
		//	CommSrvTime periodStartTime;
		//};
		//Message MSG_ADMIN_LOBBY_CREATE_TGM_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//		//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_ADMIN_LOBBY_UPDATE_TGM ------------------------------------------
		//Message MSG_ADMIN_LOBBY_UPDATE_TGM
		//{
		//		UINT32 tgmId;
		//		UINT32 type;
		//		PString groupName;
		//		CommSrvTime startTime;
		//		CommSrvTime endTime;
		//		UINT32 maxEntry;
		//		UINT32 tgmFlags;
		//		INT32 periodInMins;
		//		CommSrvTime periodStartTime;
		//};
		//Message MSG_ADMIN_LOBBY_UPDATE_TGM_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//		//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_ADMIN_LOBBY_DELETE_TGM ------------------------------------------
		//Message MSG_ADMIN_LOBBY_DELETE_TGM
		//{
		//	UINT32 tgmId;
		//	UINT32 type;
		//};
		//Message MSG_ADMIN_LOBBY_DELETE_TGM_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//		//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_ADMIN_LOBBY_ALLOW_ONE_MORE_ENTRY ------------------------------------------
		//Message MSG_ADMIN_LOBBY_ALLOW_ONE_MORE_ENTRY
		//{
		//	UINT32 tgmId;
		//	UINT32 type;
		//};
		//Message MSG_ADMIN_LOBBY_ALLOW_ONE_MORE_ENTRY_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//		//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_ADMIN_LOBBY_REMOVE_TOURN_FROM_GROUP ------------------------------------------
		//Message MSG_ADMIN_LOBBY_REMOVE_TOURN_FROM_GROUP
		//{
		//	UINT32 tgmId;
		//	UINT32 type;
		//	UINT32 tournId;
		//};
		//Message MSG_ADMIN_LOBBY_REMOVE_TOURN_FROM_GROUP_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//		//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_FACTORY_DOWN ------------------------------------------
		//Message MSG_LOBBY_ADMIN_FACTORY_DOWN
		//{
		//	vector<UINT32> factoryIds;
		//};
		//struct FactoryReply
		//{
		//	UINT32 factoryId;
		//	INT16 errCode;
		//	PString errDsecr;
		//};
		//Message MSG_LOBBY_ADMIN_FACTORY_DOWN_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	else
		//	{
		//		vector<FactoryReply> replies;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_RESURRECT_FACTORY ------------------------------------------
		//Message MSG_LOBBY_ADMIN_RESURRECT_FACTORY
		//{
		//	UINT32 objMask;
		//	UINT32 tournFlags;
		//	UINT32 tableFlags;
		//	UINT32 siteId;
		//	vector<UINT32> factoryIds;
		//};
		//Message MSG_LOBBY_ADMIN_RESURRECT_FACTORY_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	else
		//	{
		//		vector<FactoryReply> replies;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS : public Atf::MessageProtocol
		{
			// 44bb4 - tournFlags,siteId,regular,guarateed,minutes
			UINT32 tournFlags;
			UINT32 siteId;
			bool regular;
			bool guarateed;
			INT32 minutes;

			Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4] - errCode[errDescr|counter]
			INT16 errCode;

			PString errDescr;

			UINT32 counter;

			Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS : public Atf::MessageProtocol
		{
			// 44bb4s - tournFlags,siteId,regular,guarateed,minutes,adminMsg
			UINT32 tournFlags;
			UINT32 siteId;
			bool regular;
			bool guarateed;
			INT32 minutes;
			PString adminMsg;

			Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4] - errCode[errDescr|counter]
			INT16 errCode;

			PString errDescr;

			UINT32 counter;

			Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS : public Atf::MessageProtocol
		{
			// 44bb44 - tournFlags,siteId,regular,guarateed,minutesMin,minutesMax
			UINT32 tournFlags;
			UINT32 siteId;
			bool regular;
			bool guarateed;
			INT32 minutesMin;
			INT32 minutesMax;

			Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct UnhandledResurrectedTourn
		{
			// 4stb44444s - tournamentId,name,whenStart,isPlayMoney,status,buyInPlusRake,guaranteedPrizePool,prizePoolToPublish,tournSites,currency
			UINT32 tournamentId;
			PString name;
			CommSrvTime whenStart;
			bool isPlayMoney;
			UINT32 status;
			UINT32 buyInPlusRake;
			UINT32 guaranteedPrizePool;
			UINT32 prizePoolToPublish;
			UINT32 tournSites;
			PString currency;

			UnhandledResurrectedTourn();
			void clear();
			bool equals(const UnhandledResurrectedTourn&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<4stb44444s>] - errCode[errDescr|numUnhandledResurrectedTourn<tournamentId,name,whenStart,isPlayMoney,status,buyInPlusRake,guaranteedPrizePool,prizePoolToPublish,tournSites,currency>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< UnhandledResurrectedTourn, 4 > unhandledResurrectedTourn;

			Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2 : public Atf::MessageProtocol
		{
			// 44bb44 - tournFlags,siteId,regular,guarateed,minutesMin,minutesMax
			UINT32 tournFlags;
			UINT32 siteId;
			bool regular;
			bool guarateed;
			INT32 minutesMin;
			INT32 minutesMax;

			Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct UnhandledResurrectedTourn2
		{
			// M(4stb4444ms) - M(tournamentId,name,whenStart,isPlayMoney,status,buyInPlusRake,guaranteedPrizePool,prizePoolToPublish,tournSites,currency)
			UINT32 tournamentId;
			PString name;
			CommSrvTime whenStart;
			bool isPlayMoney;
			UINT32 status;
			UINT32 buyInPlusRake;
			UINT32 guaranteedPrizePool;
			UINT32 prizePoolToPublish;
			PSiteMask tournSites;
			PString currency;

			UnhandledResurrectedTourn2();
			void clear();
			bool equals(const UnhandledResurrectedTourn2&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<M(4stb4444ms)>] - errCode[errDescr|numUnhandledResurrectedTourn<M(tournamentId,name,whenStart,isPlayMoney,status,buyInPlusRake,guaranteedPrizePool,prizePoolToPublish,tournSites,currency)>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< UnhandledResurrectedTourn2, 4 > unhandledResurrectedTourn;

			Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS : public Atf::MessageProtocol
		{
			// 4<4> - numTournIds<tournIds>
			Atf::LAtfVector< UINT32, 4 > tournIds;

			Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS : public Atf::MessageProtocol
		{
			// 4s4<4> - formula,text,numTournIds<tournIds>
			UINT32 formula;
			PString text;
			Atf::LAtfVector< UINT32, 4 > tournIds;

			Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS ------------------------------------------
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS : public Atf::MessageProtocol
		{
			// 4<4> - numTournIds<tournIds>
			Atf::LAtfVector< UINT32, 4 > tournIds;

			Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2 ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2 : public Atf::MessageProtocol
		{
			// sb - userId,setNotRemove
			PString userId;
			bool setNotRemove;

			Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_RESTORE_DEAD_TABLE ------------------------------------------
		//Message MSG_LOBBY_ADMIN_RESTORE_DEAD_TABLE
		//{
		//	UINT64  tableId;
		//};
		//Message MSG_LOBBY_ADMIN_RESTORE_DEAD_TABLE_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_OBJ_STATE ------------------------------------------
		//Message MSG_LOBBY_ADMIN_GET_OBJ_STATE
		//{
		//	INT8 objType;
		//	UINT32  statusFilterMask;
		//};
		//Message MSG_LOBBY_ADMIN_GET_OBJ_STATE_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//		//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_OBJ_SUMMARY ------------------------------------------
		//Message MSG_LOBBY_ADMIN_GET_OBJ_SUMMARY
		//{
		//	//	Empty
		//};
		//Message MSG_LOBBY_ADMIN_GET_OBJ_SUMMARY_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//		//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_TICKET_TOURNIDS ------------------------------------------
		//Message MSG_LOBBY_ADMIN_TICKET_TOURNIDS
		//{
		//	UINT32 clientLicenseId;
		//	PString userId;
		//	UINT32 ticketId;
		//};
		//Message MSG_LOBBY_ADMIN_TICKET_TOURNIDS_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//		//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY : public Atf::MessageProtocol
		{
			// 4s - clientLicenseId,country
			UINT32 clientLicenseId;
			PString country;

			Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<8>] - errCode[errDescr|numVisibilities<visibilities>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< UINT64, 4 > visibilities;

			Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_ADMIN_GET_SEATFINDERS_STATS ------------------------------------------
		//Message MSG_LOBBY_ADMIN_GET_SEATFINDERS_STATS
		//{
		//	UINT32  siteId;
		//	CommSrvTime  from;
		//	CommSrvTime  to;
		//};
		//Message MSG_LOBBY_ADMIN_GET_SEATFINDERS_STATS_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//		//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_LOBBY_GET_OBLIGATIONS_REPORT ------------------------------------------
		//Message MSG_LOBBY_GET_OBLIGATIONS_REPORT
		//{
		//	UINT32  userIntId;
		//	UINT32  tableTypeId;
		//};
		//Message MSG_LOBBY_GET_OBLIGATIONS_REPORT_REPLY
		//{
		//	INT16 errCode;
		//	if ( errCode != 0 )
		//	{
		//		PString errDescr;
		//	}
		//	//else
		//	//{
		//		//	TODO
		//	//}
		//};

		//--------------------------------------------- MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2 ------------------------------------------
		struct Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2 : public Atf::MessageProtocol
		{
			// 4<8> - numTournIds<tournIds>
			Atf::LAtfVector< UINT64, 4 > tournIds;

			Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY : public Atf::MessageProtocol
		{
			// 24<8>4<8> - errCode,numSuccessTournIds<successTournIds>,numFailedTournIds<failedTournIds>
			INT16 errCode;
			Atf::LAtfVector< UINT64, 4 > successTournIds;
			Atf::LAtfVector< UINT64, 4 > failedTournIds;

			Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		enum eMassRollEffectiveAddonFilterComparator
		{
			eEffectiveAddonFilterComparator_GreaterThan = 0,
			eEffectiveAddonFilterComparator_LessThan = 1,
		};

		struct MassRollEffectiveAddonFilter
		{
			// b24 - enabled,comparator,effectiveAddon
			bool enabled;
			INT16 comparator;	// eMassRollEffectiveAddonFilterComparator
			INT32 effectiveAddon;

			MassRollEffectiveAddonFilter();
			void clear();
			bool equals(const MassRollEffectiveAddonFilter&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct CurrencyAmount
		{
			// s8 - currency,amount
			PString currency;
			INT64 amount;

			CurrencyAmount();
			void clear();
			bool equals(const CurrencyAmount&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		enum eMassRollTournType
		{
			eMassRollTournType_NonRegenerating,
			eMassRollTournType_SAG,
			eMassRollTournType_SAGMAX,
			eMassRollTournType_SNG,
			eMassRollTournType_PowerUp,
			eMassRollTournType_HomeGameNonRegenerating,
			eMassRollTournType_HomeGameSNG,
			eMassRollTournType_ProgressivePlus
		};

		struct MassRollTournAndRollTypeTotals
		{
			// M(4b44884<s8>) - M(tournType,performRoll,formula,numTourns,pmRefunds,fppRefunds,numRmRefunds<currency,amount>)
			INT32 tournType;	// eMassRollTournType
			bool performRoll;
			INT32 formula;	// not valid if !performRoll
			INT32 numTourns;
			INT64 pmRefunds;
			INT64 fppRefunds;
			Atf::LAtfVector< CurrencyAmount, 4 > rmRefunds;

			MassRollTournAndRollTypeTotals();
			void clear();
			bool equals(const MassRollTournAndRollTypeTotals&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct MassRollProjectedTournRollPayouts
		{
			// M(4888) - M(formula,rmRefund,pmRefund,fppRefund)
			INT32 formula;
			INT64 rmRefund;
			INT64 pmRefund;
			INT64 fppRefund;

			MassRollProjectedTournRollPayouts();
			void clear();
			bool equals(const MassRollProjectedTournRollPayouts&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct MassRollTournDetails
		{
			// M(8stsb4884888bb4b44<M(4888)>sb484) - M(tournId,name,startTime,currency,isPlayMoney,tournType,buyIn,rake,fppBuyIn,amountGuaranteed,totalPrizePool,effectiveAddon,started,lateRegActive,playersRemaining,performRoll,selectedFormula,numAvailableRollTypes<M(formula,rmRefund,pmRefund,fppRefund)>,noRollReason,inTheMoney,rmAlreadyPaid,pmAlreadyPaid,fppAlreadyPaid)
			// populated by Lobby directly
			UINT64 tournId;
			PString name;
			CommSrvTime startTime;
			PString currency;
			bool isPlayMoney;
			INT32 tournType;	// eMassRollTournType
			INT64 buyIn;
			INT64 rake;
			INT32 fppBuyIn;
			INT64 amountGuaranteed;
			// populated by Lobby via MtLobby
			INT64 totalPrizePool;
			INT64 effectiveAddon;
			bool started;
			bool lateRegActive;
			INT32 playersRemaining;
			bool performRoll;
			INT32 selectedFormula;
			Atf::LAtfVector< MassRollProjectedTournRollPayouts, 4 > availableRollTypes;
			PString noRollReason;
			bool inTheMoney;
			INT32 rmAlreadyPaid;
			INT64 pmAlreadyPaid;
			INT32 fppAlreadyPaid;

			MassRollTournDetails();
			void clear();
			bool equals(const MassRollTournDetails&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct MassRollTournUpdate
		{
			// 8b4 - tournId,performRoll,formula
			UINT64 tournId;
			bool performRoll;
			INT32 formula;

			MassRollTournUpdate();
			void clear();
			bool equals(const MassRollTournUpdate&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct MassRollIncompleteRoll
		{
			// 8ss - tournId,name,reason
			UINT64 tournId;
			PString name;
			PString reason;

			MassRollIncompleteRoll();
			void clear();
			bool equals(const MassRollIncompleteRoll&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct MassRollRecentUser
		{
			// st - adminId,initTime
			PString adminId;
			CommSrvTime initTime;

			MassRollRecentUser();
			void clear();
			bool equals(const MassRollRecentUser&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT : public Atf::MessageProtocol
		{
			// s4<8>44b24m - cancellationText,numTournIds<tournIds>,flags,siteMask,enabled,comparator,effectiveAddon,siteMaskEx
			PString cancellationText;
			Atf::LAtfVector< UINT64, 4 > tournIds;	// if !empty, filters are ignored
			// filters
			UINT32 flags;
			UINT32 siteMask;
			MassRollEffectiveAddonFilter effectiveAddonFilter;
			PSiteMask siteMaskEx;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_INIT; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_INIT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4] - errCode[errDesc|token]
			INT16 errCode;

			PString errDesc;

			INT32 token;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS : public Atf::MessageProtocol
		{
			// 4 - token
			INT32 token;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<M(4b44884<s8>)>4<st>] - errCode[errDesc|numTournAndRollTypeTotals<M(tournType,performRoll,formula,numTourns,pmRefunds,fppRefunds,numRmRefunds<currency,amount>)>,numRecentUsers<adminId,initTime>]
			INT16 errCode;

			PString errDesc;

			Atf::LAtfVector< MassRollTournAndRollTypeTotals, 4 > tournAndRollTypeTotals;
			Atf::LAtfVector< MassRollRecentUser, 4 > recentUsers;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS : public Atf::MessageProtocol
		{
			// 4 - token
			INT32 token;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<M(8stsb4884888bb4b44<M(4888)>sb484)>] - errCode[errDesc|numTournDetails<M(tournId,name,startTime,currency,isPlayMoney,tournType,buyIn,rake,fppBuyIn,amountGuaranteed,totalPrizePool,effectiveAddon,started,lateRegActive,playersRemaining,performRoll,selectedFormula,numAvailableRollTypes<M(formula,rmRefund,pmRefund,fppRefund)>,noRollReason,inTheMoney,rmAlreadyPaid,pmAlreadyPaid,fppAlreadyPaid)>]
			INT16 errCode;

			PString errDesc;

			Atf::LAtfVector< MassRollTournDetails, 4 > tournDetails;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE : public Atf::MessageProtocol
		{
			// 44<8b4> - token,numUpdates<tournId,performRoll,formula>
			INT32 token;
			Atf::LAtfVector< MassRollTournUpdate, 4 > updates;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT : public Atf::MessageProtocol
		{
			// 4 - token
			INT32 token;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS : public Atf::MessageProtocol
		{
			// 4 - token
			INT32 token;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|44<8ss>] - errCode[errDesc|numSuccessfulRolls,numIncompleteRolls<tournId,name,reason>]
			INT16 errCode;

			PString errDesc;

			INT32 numSuccessfulRolls;
			Atf::LAtfVector< MassRollIncompleteRoll, 4 > incompleteRolls;

			Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS : public Atf::MessageProtocol
		{
			// 8 - tournId
			UINT64 tournId;

			Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s4<s>] - errCode[errDesc|address,numInstances<instances>]
			INT16 errCode;

			PString errDesc;

			PString address;
			Atf::LAtfVector< PString, 4 > instances;

			Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
	};
};

#endif
