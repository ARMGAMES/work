/**
 * lobbyprotocols.cpp
 *
 * This file was auto-generated from lobbyprotocols.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: lobbyprotocols.txt
 */
 
#include "lobbyprotocols.h"

//=================================================================
//                    MsgApproveUserRequest
//=================================================================

MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::MsgApproveUserRequest()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::clear()
{
	userName.clear();
	approval = 0;
	comments.clear();
	imageId = 0;
}

bool MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::equals(const MsgApproveUserRequest& _o) const
{
	return Atf::atfPStringEquals(userName, _o.userName) &&
		approval == _o.approval &&
		Atf::atfPStringEquals(comments, _o.comments) &&
		imageId == _o.imageId;
}

const char *MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userName=");
	_buf.append(userName);
	_buf.append(',');
	_buf.append("approval=");
	_buf.appendUint(approval);
	_buf.append(',');
	_buf.append("comments=");
	_buf.append(comments);
	_buf.append(',');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("userName", userName, _buf);
	Atf::XmlElement::encodeAsXmlElement("approval", approval, _buf);
	Atf::XmlElement::encodeAsXmlElement("comments", comments, _buf);
	Atf::XmlElement::encodeAsXmlElement("imageId", imageId, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("userName"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, userName)) return false;
		}
		else if (_element.equals("approval"))
		{
			approval = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("comments"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, comments)) return false;
		}
		else if (_element.equals("imageId"))
		{
			imageId = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userName);
	_msg.composeBYTE(approval);
	_msg.composeString(comments);
	_msg.composeUINT32(imageId);
}

void MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userName);
	_parser.parseBYTE(approval);
	_parser.parseStringP(comments);
	_parser.parseUINT32(imageId);
}

const char *MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userName", userName);
	_jsonstr.compose("approval", approval);
	_jsonstr.compose("comments", comments);
	_jsonstr.compose("imageId", imageId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userName", userName);
	_jparser.parseByNameThrow("approval", approval);
	_jparser.parseByNameThrow("comments", comments);
	_jparser.parseByNameThrow("imageId", imageId);
}

/* static */ void MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userName; _jparser.validateByNameThrow("userName", userName);
	AtfValidator::validateInt(_descr, "userName", userName.length(), _checker, __FILE__, __LINE__);
	BYTE approval; _jparser.validateByNameThrow("approval", approval);
	AtfValidator::validateInt(_descr, "approval", approval, _checker, __FILE__, __LINE__);
	PString comments; _jparser.validateByNameThrow("comments", comments);
	AtfValidator::validateInt(_descr, "comments", comments.length(), _checker, __FILE__, __LINE__);
	UINT32 imageId; _jparser.validateByNameThrow("imageId", imageId);
	AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::MsgApproveUserRequest::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userName"); size_t szUserName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userName", szUserName, _checker, __FILE__, __LINE__);
	BYTE approval; _parser.parseBYTE(approval);
	AtfValidator::validateInt(_descr, "approval", approval, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "comments"); size_t szComments = strlen(_dummy);
	AtfValidator::validateInt(_descr, "comments", szComments, _checker, __FILE__, __LINE__);
	UINT32 imageId; _parser.parseUINT32(imageId);
	AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::clear()
{
	requests.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::equals(const Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS& _o) const
{
	return requests.equals(_o.requests);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_APPROVE_USERS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_APPROVE_USERS).append(")");
	_buf.append(',');
	_buf.append("requests=");
	requests.toTraceString(_buf);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_APPROVE_USERS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	requests.toXmlString("requests", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("requests"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< MsgApproveUserRequest, 4 > >::FromXmlString(_value, requests)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	requests.composeMsg(_msg, _ignoreJSON);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::parseMsg(CommMsgParser& _parser)
{
	requests.parseMsg(_parser);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("requests", requests);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("requests", requests);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_APPROVE_USERS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	Atf::AtfVectorBase< MsgApproveUserRequest > requests; _jparser.validateByNameThrow("requests", requests);
	AtfValidator::validateInt(_descr, "requests", requests.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_APPROVE_USERS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szRequests = Atf::LAtfVector< MsgApproveUserRequest, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("requests"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "requests", szRequests, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	email.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		email.equals(_o.email);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("email=");
		email.toTraceString(_buf);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		email.toXmlString("email", _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("email"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< PString, 4 > >::FromXmlString(_value, email)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		email.composeMsg(_msg, _ignoreJSON);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		email.parseMsg(_parser);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("email", email);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("email", email);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		Atf::AtfVectorBase< PString > email; _jparser.validateByNameThrow("email", email);
		AtfValidator::validateInt(_descr, "email", email.size(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szEmail = Atf::LAtfVector< PString, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("email"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "email", szEmail, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::clear()
{
	userId.clear();
	privileges = 0;
	prev_privs = 0;
	priv2 = 0;
	prev_priv2 = 0;
	priv3 = 0;
	prev_priv3 = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::equals(const Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES& _o) const
{
	return Atf::atfPStringEquals(userId, _o.userId) &&
		privileges == _o.privileges &&
		prev_privs == _o.prev_privs &&
		priv2 == _o.priv2 &&
		prev_priv2 == _o.prev_priv2 &&
		priv3 == _o.priv3 &&
		prev_priv3 == _o.prev_priv3;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_SET_PRIVILEGES != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_SET_PRIVILEGES).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("privileges=");
	_buf.appendUint(privileges);
	_buf.append(',');
	_buf.append("prev_privs=");
	_buf.appendUint(prev_privs);
	_buf.append(',');
	_buf.append("priv2=");
	_buf.appendUint64(priv2);
	_buf.append(',');
	_buf.append("prev_priv2=");
	_buf.appendUint64(prev_priv2);
	_buf.append(',');
	_buf.append("priv3=");
	_buf.appendUint64(priv3);
	_buf.append(',');
	_buf.append("prev_priv3=");
	_buf.appendUint64(prev_priv3);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_SET_PRIVILEGES).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	Atf::XmlElement::encodeAsXmlElement("privileges", privileges, _buf);
	Atf::XmlElement::encodeAsXmlElement("prev_privs", prev_privs, _buf);
	Atf::XmlElement::encodeAsXmlElement("priv2", priv2, _buf);
	Atf::XmlElement::encodeAsXmlElement("prev_priv2", prev_priv2, _buf);
	Atf::XmlElement::encodeAsXmlElement("priv3", priv3, _buf);
	Atf::XmlElement::encodeAsXmlElement("prev_priv3", prev_priv3, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("userId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
			}
			else if (_element.equals("privileges"))
			{
				privileges = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("prev_privs"))
			{
				prev_privs = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("priv2"))
			{
				priv2 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("prev_priv2"))
			{
				prev_priv2 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("priv3"))
			{
				priv3 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("prev_priv3"))
			{
				prev_priv3 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userId);
	_msg.composeUINT32(privileges);
	_msg.composeUINT32(prev_privs);
	_msg.composeUINT64(priv2);
	_msg.composeUINT64(prev_priv2);
	_msg.composeUINT64(priv3);
	_msg.composeUINT64(prev_priv3);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseUINT32(privileges);
	_parser.parseUINT32(prev_privs);
	_parser.parseUINT64(priv2);
	_parser.parseUINT64(prev_priv2);
	_parser.parseUINT64(priv3);
	_parser.parseUINT64(prev_priv3);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("privileges", privileges);
	_jsonstr.compose("prev_privs", prev_privs);
	_jsonstr.compose("priv2", priv2);
	_jsonstr.compose("prev_priv2", prev_priv2);
	_jsonstr.compose("priv3", priv3);
	_jsonstr.compose("prev_priv3", prev_priv3);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("privileges", privileges);
	_jparser.parseByNameThrow("prev_privs", prev_privs);
	_jparser.parseByNameThrow("priv2", priv2);
	_jparser.parseByNameThrow("prev_priv2", prev_priv2);
	_jparser.parseByNameThrow("priv3", priv3);
	_jparser.parseByNameThrow("prev_priv3", prev_priv3);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_PRIVILEGES";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
	UINT32 privileges; _jparser.validateByNameThrow("privileges", privileges);
	AtfValidator::validateInt(_descr, "privileges", privileges, _checker, __FILE__, __LINE__);
	UINT32 prev_privs; _jparser.validateByNameThrow("prev_privs", prev_privs);
	AtfValidator::validateInt(_descr, "prev_privs", prev_privs, _checker, __FILE__, __LINE__);
	UINT64 priv2; _jparser.validateByNameThrow("priv2", priv2);
	AtfValidator::validateUint(_descr, "priv2", priv2, _checker, __FILE__, __LINE__);
	UINT64 prev_priv2; _jparser.validateByNameThrow("prev_priv2", prev_priv2);
	AtfValidator::validateUint(_descr, "prev_priv2", prev_priv2, _checker, __FILE__, __LINE__);
	UINT64 priv3; _jparser.validateByNameThrow("priv3", priv3);
	AtfValidator::validateUint(_descr, "priv3", priv3, _checker, __FILE__, __LINE__);
	UINT64 prev_priv3; _jparser.validateByNameThrow("prev_priv3", prev_priv3);
	AtfValidator::validateUint(_descr, "prev_priv3", prev_priv3, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_PRIVILEGES";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	UINT32 privileges; _parser.parseUINT32(privileges);
	AtfValidator::validateInt(_descr, "privileges", privileges, _checker, __FILE__, __LINE__);
	UINT32 prev_privs; _parser.parseUINT32(prev_privs);
	AtfValidator::validateInt(_descr, "prev_privs", prev_privs, _checker, __FILE__, __LINE__);
	UINT64 priv2; _parser.parseUINT64(priv2);
	AtfValidator::validateUint(_descr, "priv2", priv2, _checker, __FILE__, __LINE__);
	UINT64 prev_priv2; _parser.parseUINT64(prev_priv2);
	AtfValidator::validateUint(_descr, "prev_priv2", prev_priv2, _checker, __FILE__, __LINE__);
	UINT64 priv3; _parser.parseUINT64(priv3);
	AtfValidator::validateUint(_descr, "priv3", priv3, _checker, __FILE__, __LINE__);
	UINT64 prev_priv3; _parser.parseUINT64(prev_priv3);
	AtfValidator::validateUint(_descr, "prev_priv3", prev_priv3, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	userId.clear();
	privileges = 0;
	flags = 0;
	privileges2 = 0;
	privileges3 = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		Atf::atfPStringEquals(userId, _o.userId) &&
		privileges == _o.privileges &&
		flags == _o.flags &&
		privileges2 == _o.privileges2 &&
		privileges3 == _o.privileges3;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("userId=");
		_buf.append(userId);
		_buf.append(',');
		_buf.append("privileges=");
		_buf.appendUint(privileges);
		_buf.append(',');
		_buf.append("flags=");
		_buf.appendUint(flags);
		_buf.append(',');
		_buf.append("privileges2=");
		_buf.appendUint64(privileges2);
		_buf.append(',');
		_buf.append("privileges3=");
		_buf.appendUint64(privileges3);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
		Atf::XmlElement::encodeAsXmlElement("privileges", privileges, _buf);
		Atf::XmlElement::encodeAsXmlElement("flags", flags, _buf);
		Atf::XmlElement::encodeAsXmlElement("privileges2", privileges2, _buf);
		Atf::XmlElement::encodeAsXmlElement("privileges3", privileges3, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("userId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
			}
			else if (_element.equals("privileges"))
			{
				privileges = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("flags"))
			{
				flags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("privileges2"))
			{
				privileges2 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("privileges3"))
			{
				privileges3 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeString(userId);
		_msg.composeUINT32(privileges);
		_msg.composeUINT32(flags);
		_msg.composeUINT64(privileges2);
		_msg.composeUINT64(privileges3);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseStringP(userId);
		_parser.parseUINT32(privileges);
		_parser.parseUINT32(flags);
		_parser.parseUINT64(privileges2);
		_parser.parseUINT64(privileges3);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("userId", userId);
		_jsonstr.compose("privileges", privileges);
		_jsonstr.compose("flags", flags);
		_jsonstr.compose("privileges2", privileges2);
		_jsonstr.compose("privileges3", privileges3);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("userId", userId);
		_jparser.parseByNameThrow("privileges", privileges);
		_jparser.parseByNameThrow("flags", flags);
		_jparser.parseByNameThrow("privileges2", privileges2);
		_jparser.parseByNameThrow("privileges3", privileges3);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		PString userId; _jparser.validateByNameThrow("userId", userId);
		AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
		UINT32 privileges; _jparser.validateByNameThrow("privileges", privileges);
		AtfValidator::validateInt(_descr, "privileges", privileges, _checker, __FILE__, __LINE__);
		UINT32 flags; _jparser.validateByNameThrow("flags", flags);
		AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
		UINT64 privileges2; _jparser.validateByNameThrow("privileges2", privileges2);
		AtfValidator::validateUint(_descr, "privileges2", privileges2, _checker, __FILE__, __LINE__);
		UINT64 privileges3; _jparser.validateByNameThrow("privileges3", privileges3);
		AtfValidator::validateUint(_descr, "privileges3", privileges3, _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
		AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
		UINT32 privileges; _parser.parseUINT32(privileges);
		AtfValidator::validateInt(_descr, "privileges", privileges, _checker, __FILE__, __LINE__);
		UINT32 flags; _parser.parseUINT32(flags);
		AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
		UINT64 privileges2; _parser.parseUINT64(privileges2);
		AtfValidator::validateUint(_descr, "privileges2", privileges2, _checker, __FILE__, __LINE__);
		UINT64 privileges3; _parser.parseUINT64(privileges3);
		AtfValidator::validateUint(_descr, "privileges3", privileges3, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::clear()
{
	tournId = 0;
	ryoOnly = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT& _o) const
{
	return tournId == _o.tournId &&
		ryoOnly == _o.ryoOnly;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT).append(")");
	_buf.append(',');
	_buf.append("tournId=");
	_buf.appendUint(tournId);
	_buf.append(',');
	_buf.append("ryoOnly=");
	_buf.appendUint(ryoOnly);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tournId", tournId, _buf);
	Atf::XmlElement::encodeAsXmlElement("ryoOnly", ryoOnly, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournId"))
			{
				tournId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("ryoOnly"))
			{
				ryoOnly = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(tournId);
	_msg.composeBYTE(ryoOnly);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(tournId);
	_parser.parseBYTE(ryoOnly);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournId", tournId);
	_jsonstr.compose("ryoOnly", ryoOnly);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournId", tournId);
	_jparser.parseByNameThrow("ryoOnly", ryoOnly);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournId; _jparser.validateByNameThrow("tournId", tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	BYTE ryoOnly; _jparser.validateByNameThrow("ryoOnly", ryoOnly);
	AtfValidator::validateInt(_descr, "ryoOnly", ryoOnly, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 tournId; _parser.parseUINT32(tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	BYTE ryoOnly; _parser.parseBYTE(ryoOnly);
	AtfValidator::validateInt(_descr, "ryoOnly", ryoOnly, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::clear()
{
	id = 0;
	ryoOnly = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::equals(const Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT& _o) const
{
	return id == _o.id &&
		ryoOnly == _o.ryoOnly;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT).append(")");
	_buf.append(',');
	_buf.append("id=");
	_buf.appendUint(id);
	_buf.append(',');
	_buf.append("ryoOnly=");
	_buf.appendUint(ryoOnly);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("id", id, _buf);
	Atf::XmlElement::encodeAsXmlElement("ryoOnly", ryoOnly, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("id"))
			{
				id = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("ryoOnly"))
			{
				ryoOnly = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(id);
	_msg.composeBYTE(ryoOnly);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(id);
	if(_parser.parseEnded()) return;
	_parser.parseBYTE(ryoOnly);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("id", id);
	_jsonstr.compose("ryoOnly", ryoOnly);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("id", id);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("ryoOnly", ryoOnly);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 id; _jparser.validateByNameThrow("id", id);
	AtfValidator::validateInt(_descr, "id", id, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	BYTE ryoOnly; _jparser.validateByNameThrow("ryoOnly", ryoOnly);
	AtfValidator::validateInt(_descr, "ryoOnly", ryoOnly, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 id; _parser.parseUINT32(id);
	AtfValidator::validateInt(_descr, "id", id, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	BYTE ryoOnly; _parser.parseBYTE(ryoOnly);
	AtfValidator::validateInt(_descr, "ryoOnly", ryoOnly, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::clear()
{
	startId = 0;
	stopId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT& _o) const
{
	return startId == _o.startId &&
		stopId == _o.stopId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT).append(")");
	_buf.append(',');
	_buf.append("startId=");
	_buf.appendUint(startId);
	_buf.append(',');
	_buf.append("stopId=");
	_buf.appendUint(stopId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("startId", startId, _buf);
	Atf::XmlElement::encodeAsXmlElement("stopId", stopId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("startId"))
			{
				startId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("stopId"))
			{
				stopId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(startId);
	_msg.composeUINT32(stopId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(startId);
	_parser.parseUINT32(stopId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("startId", startId);
	_jsonstr.compose("stopId", stopId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("startId", startId);
	_jparser.parseByNameThrow("stopId", stopId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 startId; _jparser.validateByNameThrow("startId", startId);
	AtfValidator::validateInt(_descr, "startId", startId, _checker, __FILE__, __LINE__);
	UINT32 stopId; _jparser.validateByNameThrow("stopId", stopId);
	AtfValidator::validateInt(_descr, "stopId", stopId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 startId; _parser.parseUINT32(startId);
	AtfValidator::validateInt(_descr, "startId", startId, _checker, __FILE__, __LINE__);
	UINT32 stopId; _parser.parseUINT32(stopId);
	AtfValidator::validateInt(_descr, "stopId", stopId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::clear()
{
	tournId = 0;
	ryoOnly = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS& _o) const
{
	return tournId == _o.tournId &&
		ryoOnly == _o.ryoOnly;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS).append(")");
	_buf.append(',');
	_buf.append("tournId=");
	_buf.appendUint(tournId);
	_buf.append(',');
	_buf.append("ryoOnly=");
	_buf.appendUint(ryoOnly);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tournId", tournId, _buf);
	Atf::XmlElement::encodeAsXmlElement("ryoOnly", ryoOnly, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournId"))
			{
				tournId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("ryoOnly"))
			{
				ryoOnly = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(tournId);
	_msg.composeBYTE(ryoOnly);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(tournId);
	if(_parser.parseEnded()) return;
	_parser.parseBYTE(ryoOnly);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournId", tournId);
	_jsonstr.compose("ryoOnly", ryoOnly);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournId", tournId);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("ryoOnly", ryoOnly);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournId; _jparser.validateByNameThrow("tournId", tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	BYTE ryoOnly; _jparser.validateByNameThrow("ryoOnly", ryoOnly);
	AtfValidator::validateInt(_descr, "ryoOnly", ryoOnly, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 tournId; _parser.parseUINT32(tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	BYTE ryoOnly; _parser.parseBYTE(ryoOnly);
	AtfValidator::validateInt(_descr, "ryoOnly", ryoOnly, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::clear()
{
	type = 0;
	formula = 0;
	text.clear();
	site = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN& _o) const
{
	return type == _o.type &&
		formula == _o.formula &&
		Atf::atfPStringEquals(text, _o.text) &&
		site == _o.site;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN).append(")");
	_buf.append(',');
	_buf.append("type=");
	_buf.appendUint(type);
	_buf.append(',');
	_buf.append("formula=");
	_buf.appendUint(formula);
	_buf.append(',');
	_buf.append("text=");
	_buf.append(text);
	_buf.append(',');
	_buf.append("site=");
	_buf.appendUint(site);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("type", type, _buf);
	Atf::XmlElement::encodeAsXmlElement("formula", formula, _buf);
	Atf::XmlElement::encodeAsXmlElement("text", text, _buf);
	Atf::XmlElement::encodeAsXmlElement("site", site, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("type"))
			{
				type = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("formula"))
			{
				formula = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("text"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, text)) return false;
			}
			else if (_element.equals("site"))
			{
				site = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(type);
	_msg.composeUINT32(formula);
	_msg.composeString(text);
	_msg.composeUINT32(site);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(type);
	_parser.parseUINT32(formula);
	_parser.parseStringP(text);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(site);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("type", type);
	_jsonstr.compose("formula", formula);
	_jsonstr.compose("text", text);
	_jsonstr.compose("site", site);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("type", type);
	_jparser.parseByNameThrow("formula", formula);
	_jparser.parseByNameThrow("text", text);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("site", site);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 type; _jparser.validateByNameThrow("type", type);
	AtfValidator::validateInt(_descr, "type", type, _checker, __FILE__, __LINE__);
	UINT32 formula; _jparser.validateByNameThrow("formula", formula);
	AtfValidator::validateInt(_descr, "formula", formula, _checker, __FILE__, __LINE__);
	PString text; _jparser.validateByNameThrow("text", text);
	AtfValidator::validateInt(_descr, "text", text.length(), _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 site; _jparser.validateByNameThrow("site", site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 type; _parser.parseUINT32(type);
	AtfValidator::validateInt(_descr, "type", type, _checker, __FILE__, __LINE__);
	UINT32 formula; _parser.parseUINT32(formula);
	AtfValidator::validateInt(_descr, "formula", formula, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "text"); size_t szText = strlen(_dummy);
	AtfValidator::validateInt(_descr, "text", szText, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 site; _parser.parseUINT32(site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::clear()
{
	tournId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::equals(const Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR& _o) const
{
	return tournId == _o.tournId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_TOURN_ADDR != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_TOURN_ADDR).append(")");
	_buf.append(',');
	_buf.append("tournId=");
	_buf.appendUint(tournId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_TOURN_ADDR).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tournId", tournId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournId"))
			{
				tournId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(tournId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(tournId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournId", tournId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournId", tournId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_TOURN_ADDR";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournId; _jparser.validateByNameThrow("tournId", tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_TOURN_ADDR";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 tournId; _parser.parseUINT32(tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	server.clear();
	serverObj.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		Atf::atfPStringEquals(server, _o.server) &&
		Atf::atfPStringEquals(serverObj, _o.serverObj);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("server=");
		_buf.append(server);
		_buf.append(',');
		_buf.append("serverObj=");
		_buf.append(serverObj);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("server", server, _buf);
		Atf::XmlElement::encodeAsXmlElement("serverObj", serverObj, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("server"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, server)) return false;
			}
			else if (_element.equals("serverObj"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, serverObj)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeString(server);
		_msg.composeString(serverObj);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseStringP(server);
		_parser.parseStringP(serverObj);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("server", server);
		_jsonstr.compose("serverObj", serverObj);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("server", server);
		_jparser.parseByNameThrow("serverObj", serverObj);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		PString server; _jparser.validateByNameThrow("server", server);
		AtfValidator::validateInt(_descr, "server", server.length(), _checker, __FILE__, __LINE__);
		PString serverObj; _jparser.validateByNameThrow("serverObj", serverObj);
		AtfValidator::validateInt(_descr, "serverObj", serverObj.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		_parser.parseStringN(_dummy, 0, "server"); size_t szServer = strlen(_dummy);
		AtfValidator::validateInt(_descr, "server", szServer, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "serverObj"); size_t szServerObj = strlen(_dummy);
		AtfValidator::validateInt(_descr, "serverObj", szServerObj, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::clear()
{
	blitzId = 0;
	name.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::equals(const Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR& _o) const
{
	return blitzId == _o.blitzId &&
		Atf::atfPStringEquals(name, _o.name);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_BLITZ_ADDR != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_BLITZ_ADDR).append(")");
	_buf.append(',');
	_buf.append("blitzId=");
	_buf.appendUint(blitzId);
	if ( !blitzId )
	{
		_buf.append(',');
		_buf.append("name=");
		_buf.append(name);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_BLITZ_ADDR).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("blitzId", blitzId, _buf);
	if ( !blitzId )
	{
		Atf::XmlElement::encodeAsXmlElement("name", name, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("blitzId"))
			{
				blitzId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("name"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, name)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(blitzId);
	if ( !blitzId )
	{
		_msg.composeString(name);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(blitzId);
	if ( !blitzId )
	{
		_parser.parseStringP(name);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("blitzId", blitzId);
	if ( !blitzId )
	{
		_jsonstr.compose("name", name);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("blitzId", blitzId);
	if ( !blitzId )
	{
		_jparser.parseByNameThrow("name", name);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_BLITZ_ADDR";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 blitzId = 0;
	_jparser.validateByNameThrow("blitzId", blitzId);
	AtfValidator::validateInt(_descr, "blitzId", blitzId, _checker, __FILE__, __LINE__);
	if ( !blitzId )
	{
		PString name; _jparser.validateByNameThrow("name", name);
		AtfValidator::validateInt(_descr, "name", name.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_BLITZ_ADDR";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 blitzId = 0;
	_parser.parseUINT32(blitzId);
	AtfValidator::validateInt(_descr, "blitzId", blitzId, _checker, __FILE__, __LINE__);
	if ( !blitzId )
	{
		_parser.parseStringN(_dummy, 0, "name"); size_t szName = strlen(_dummy);
		AtfValidator::validateInt(_descr, "name", szName, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	serverAddr.clear();
	serverInstance.clear();
	id = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		Atf::atfPStringEquals(serverAddr, _o.serverAddr) &&
		Atf::atfPStringEquals(serverInstance, _o.serverInstance) &&
		id == _o.id;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("serverAddr=");
		_buf.append(serverAddr);
		_buf.append(',');
		_buf.append("serverInstance=");
		_buf.append(serverInstance);
		_buf.append(',');
		_buf.append("id=");
		_buf.appendUint(id);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("serverAddr", serverAddr, _buf);
		Atf::XmlElement::encodeAsXmlElement("serverInstance", serverInstance, _buf);
		Atf::XmlElement::encodeAsXmlElement("id", id, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("serverAddr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, serverAddr)) return false;
			}
			else if (_element.equals("serverInstance"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, serverInstance)) return false;
			}
			else if (_element.equals("id"))
			{
				id = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeString(serverAddr);
		_msg.composeString(serverInstance);
		_msg.composeUINT32(id);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseStringP(serverAddr);
		_parser.parseStringP(serverInstance);
		_parser.parseUINT32(id);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("serverAddr", serverAddr);
		_jsonstr.compose("serverInstance", serverInstance);
		_jsonstr.compose("id", id);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("serverAddr", serverAddr);
		_jparser.parseByNameThrow("serverInstance", serverInstance);
		_jparser.parseByNameThrow("id", id);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		PString serverAddr; _jparser.validateByNameThrow("serverAddr", serverAddr);
		AtfValidator::validateInt(_descr, "serverAddr", serverAddr.length(), _checker, __FILE__, __LINE__);
		PString serverInstance; _jparser.validateByNameThrow("serverInstance", serverInstance);
		AtfValidator::validateInt(_descr, "serverInstance", serverInstance.length(), _checker, __FILE__, __LINE__);
		UINT32 id; _jparser.validateByNameThrow("id", id);
		AtfValidator::validateInt(_descr, "id", id, _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		_parser.parseStringN(_dummy, 0, "serverAddr"); size_t szServerAddr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "serverAddr", szServerAddr, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "serverInstance"); size_t szServerInstance = strlen(_dummy);
		AtfValidator::validateInt(_descr, "serverInstance", szServerInstance, _checker, __FILE__, __LINE__);
		UINT32 id; _parser.parseUINT32(id);
		AtfValidator::validateInt(_descr, "id", id, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_BROADCAST
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::Protocol_MSG_LOBBY_ADMIN_BROADCAST()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::clear()
{
	messageText.clear();
	flags = 0;
	dst = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::equals(const Protocol_MSG_LOBBY_ADMIN_BROADCAST& _o) const
{
	return Atf::atfPStringEquals(messageText, _o.messageText) &&
		flags == _o.flags &&
		dst == _o.dst;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_BROADCAST != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_BROADCAST*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_BROADCAST).append(")");
	_buf.append(',');
	_buf.append("messageText=");
	_buf.append(messageText);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("dst=");
	_buf.appendUint(dst);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_BROADCAST).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("messageText", messageText, _buf);
	Atf::XmlElement::encodeAsXmlElement("flags", flags, _buf);
	Atf::XmlElement::encodeAsXmlElement("dst", dst, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("messageText"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, messageText)) return false;
			}
			else if (_element.equals("flags"))
			{
				flags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("dst"))
			{
				dst = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(messageText);
	_msg.composeUINT32(flags);
	_msg.composeBYTE(dst);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(messageText);
	_parser.parseUINT32(flags);
	_parser.parseBYTE(dst);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("messageText", messageText);
	_jsonstr.compose("flags", flags);
	_jsonstr.compose("dst", dst);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("messageText", messageText);
	_jparser.parseByNameThrow("flags", flags);
	_jparser.parseByNameThrow("dst", dst);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_BROADCAST";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString messageText; _jparser.validateByNameThrow("messageText", messageText);
	AtfValidator::validateInt(_descr, "messageText", messageText.length(), _checker, __FILE__, __LINE__);
	UINT32 flags; _jparser.validateByNameThrow("flags", flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	BYTE dst; _jparser.validateByNameThrow("dst", dst);
	AtfValidator::validateInt(_descr, "dst", dst, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_BROADCAST";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "messageText"); size_t szMessageText = strlen(_dummy);
	AtfValidator::validateInt(_descr, "messageText", szMessageText, _checker, __FILE__, __LINE__);
	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	BYTE dst; _parser.parseBYTE(dst);
	AtfValidator::validateInt(_descr, "dst", dst, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_BROADCAST_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_BROADCAST_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_BROADCAST_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_BROADCAST_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_BROADCAST_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::clear()
{
	messageText.clear();
	flags = 0;
	dst = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::equals(const Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST& _o) const
{
	return messageText.equals(_o.messageText) &&
		flags == _o.flags &&
		dst == _o.dst;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_I18N_BROADCAST != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_I18N_BROADCAST).append(")");
	_buf.append(',');
	_buf.append("messageText=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, messageText);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("dst=");
	_buf.appendUint(dst);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_I18N_BROADCAST).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "messageText", messageText);
	Atf::XmlElement::encodeAsXmlElement("flags", flags, _buf);
	Atf::XmlElement::encodeAsXmlElement("dst", dst, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("messageText"))
			{
				Atf::AtfTempl<I18nPString>::FromXmlString(_value, messageText);
			}
			else if (_element.equals("flags"))
			{
				flags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("dst"))
			{
				dst = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	messageText.compose(_msg);
	_msg.composeUINT32(flags);
	_msg.composeBYTE(dst);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::parseMsg(CommMsgParser& _parser)
{
	messageText.parse(_parser);
	_parser.parseUINT32(flags);
	_parser.parseBYTE(dst);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("messageText", messageText);
	_jsonstr.compose("flags", flags);
	_jsonstr.compose("dst", dst);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("messageText", messageText);
	_jparser.parseByNameThrow("flags", flags);
	_jparser.parseByNameThrow("dst", dst);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_I18N_BROADCAST";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	I18nPString messageText; _jparser.validateByNameThrow("messageText", messageText);
	UINT32 flags; _jparser.validateByNameThrow("flags", flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	BYTE dst; _jparser.validateByNameThrow("dst", dst);
	AtfValidator::validateInt(_descr, "dst", dst, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_I18N_BROADCAST";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	I18nPString messageText; messageText.parse(_parser);
	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	BYTE dst; _parser.parseBYTE(dst);
	AtfValidator::validateInt(_descr, "dst", dst, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::clear()
{
	tableId = 0;
	tableText.clear();
	options = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::equals(const Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE& _o) const
{
	return tableId == _o.tableId &&
		Atf::atfPStringEquals(tableText, _o.tableText) &&
		options == _o.options;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_TABLE_MESSAGE != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_TABLE_MESSAGE).append(")");
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	_buf.append(',');
	_buf.append("tableText=");
	_buf.append(tableText);
	_buf.append(',');
	_buf.append("options=");
	_buf.appendUint(options);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_TABLE_MESSAGE).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tableId", tableId, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableText", tableText, _buf);
	Atf::XmlElement::encodeAsXmlElement("options", options, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tableId"))
			{
				tableId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("tableText"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, tableText)) return false;
			}
			else if (_element.equals("options"))
			{
				options = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT64(tableId);
	_msg.composeString(tableText);
	_msg.composeUINT32(options);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(tableId);
	_parser.parseStringP(tableText);
	_parser.parseUINT32(options);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tableId", tableId);
	_jsonstr.compose("tableText", tableText);
	_jsonstr.compose("options", options);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tableId", tableId);
	_jparser.parseByNameThrow("tableText", tableText);
	_jparser.parseByNameThrow("options", options);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_TABLE_MESSAGE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT64 tableId; _jparser.validateByNameThrow("tableId", tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	PString tableText; _jparser.validateByNameThrow("tableText", tableText);
	AtfValidator::validateInt(_descr, "tableText", tableText.length(), _checker, __FILE__, __LINE__);
	UINT32 options; _jparser.validateByNameThrow("options", options);
	AtfValidator::validateInt(_descr, "options", options, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_TABLE_MESSAGE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT64 tableId; _parser.parseUINT64(tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "tableText"); size_t szTableText = strlen(_dummy);
	AtfValidator::validateInt(_descr, "tableText", szTableText, _checker, __FILE__, __LINE__);
	UINT32 options; _parser.parseUINT32(options);
	AtfValidator::validateInt(_descr, "options", options, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_STOP_DEALING
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::clear()
{
	messageText.clear();
	broadcastFlags = 0;
	tableName.clear();
	site = 0;
	tableId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::equals(const Protocol_MSG_LOBBY_ADMIN_STOP_DEALING& _o) const
{
	return Atf::atfPStringEquals(messageText, _o.messageText) &&
		broadcastFlags == _o.broadcastFlags &&
		Atf::atfPStringEquals(tableName, _o.tableName) &&
		site == _o.site &&
		tableId == _o.tableId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_STOP_DEALING != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_STOP_DEALING*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_STOP_DEALING).append(")");
	_buf.append(',');
	_buf.append("messageText=");
	_buf.append(messageText);
	_buf.append(',');
	_buf.append("broadcastFlags=");
	_buf.appendUint(broadcastFlags);
	_buf.append(',');
	_buf.append("tableName=");
	_buf.append(tableName);
	_buf.append(',');
	_buf.append("site=");
	_buf.appendUint(site);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_STOP_DEALING).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("messageText", messageText, _buf);
	Atf::XmlElement::encodeAsXmlElement("broadcastFlags", broadcastFlags, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableName", tableName, _buf);
	Atf::XmlElement::encodeAsXmlElement("site", site, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableId", tableId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("messageText"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, messageText)) return false;
			}
			else if (_element.equals("broadcastFlags"))
			{
				broadcastFlags = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("tableName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, tableName)) return false;
			}
			else if (_element.equals("site"))
			{
				site = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("tableId"))
			{
				tableId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(messageText);
	_msg.composeBYTE(broadcastFlags);
	_msg.composeString(tableName);
	_msg.composeUINT32(site);
	_msg.composeUINT64(tableId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(messageText);
	_parser.parseBYTE(broadcastFlags);
	_parser.parseStringP(tableName);
	_parser.parseUINT32(site);
	if(_parser.parseEnded()) return;
	_parser.parseUINT64(tableId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("messageText", messageText);
	_jsonstr.compose("broadcastFlags", broadcastFlags);
	_jsonstr.compose("tableName", tableName);
	_jsonstr.compose("site", site);
	_jsonstr.compose("tableId", tableId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("messageText", messageText);
	_jparser.parseByNameThrow("broadcastFlags", broadcastFlags);
	_jparser.parseByNameThrow("tableName", tableName);
	_jparser.parseByNameThrow("site", site);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("tableId", tableId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_DEALING";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString messageText; _jparser.validateByNameThrow("messageText", messageText);
	AtfValidator::validateInt(_descr, "messageText", messageText.length(), _checker, __FILE__, __LINE__);
	BYTE broadcastFlags; _jparser.validateByNameThrow("broadcastFlags", broadcastFlags);
	AtfValidator::validateInt(_descr, "broadcastFlags", broadcastFlags, _checker, __FILE__, __LINE__);
	PString tableName; _jparser.validateByNameThrow("tableName", tableName);
	AtfValidator::validateInt(_descr, "tableName", tableName.length(), _checker, __FILE__, __LINE__);
	UINT32 site; _jparser.validateByNameThrow("site", site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT64 tableId; _jparser.validateByNameThrow("tableId", tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_DEALING";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "messageText"); size_t szMessageText = strlen(_dummy);
	AtfValidator::validateInt(_descr, "messageText", szMessageText, _checker, __FILE__, __LINE__);
	BYTE broadcastFlags; _parser.parseBYTE(broadcastFlags);
	AtfValidator::validateInt(_descr, "broadcastFlags", broadcastFlags, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "tableName"); size_t szTableName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "tableName", szTableName, _checker, __FILE__, __LINE__);
	UINT32 site; _parser.parseUINT32(site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT64 tableId; _parser.parseUINT64(tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_STOP_DEALING_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_STOP_DEALING_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_STOP_DEALING_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_DEALING_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_DEALING_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::clear()
{
	broadcastFlags = 0;
	tableName.clear();
	site = 0;
	tableId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING& _o) const
{
	return broadcastFlags == _o.broadcastFlags &&
		Atf::atfPStringEquals(tableName, _o.tableName) &&
		site == _o.site &&
		tableId == _o.tableId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_RESUME_DEALING != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_RESUME_DEALING).append(")");
	_buf.append(',');
	_buf.append("broadcastFlags=");
	_buf.appendUint(broadcastFlags);
	_buf.append(',');
	_buf.append("tableName=");
	_buf.append(tableName);
	_buf.append(',');
	_buf.append("site=");
	_buf.appendUint(site);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_RESUME_DEALING).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("broadcastFlags", broadcastFlags, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableName", tableName, _buf);
	Atf::XmlElement::encodeAsXmlElement("site", site, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableId", tableId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("broadcastFlags"))
			{
				broadcastFlags = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("tableName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, tableName)) return false;
			}
			else if (_element.equals("site"))
			{
				site = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("tableId"))
			{
				tableId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeBYTE(broadcastFlags);
	_msg.composeString(tableName);
	_msg.composeUINT32(site);
	_msg.composeUINT64(tableId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(broadcastFlags);
	_parser.parseStringP(tableName);
	_parser.parseUINT32(site);
	if(_parser.parseEnded()) return;
	_parser.parseUINT64(tableId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("broadcastFlags", broadcastFlags);
	_jsonstr.compose("tableName", tableName);
	_jsonstr.compose("site", site);
	_jsonstr.compose("tableId", tableId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("broadcastFlags", broadcastFlags);
	_jparser.parseByNameThrow("tableName", tableName);
	_jparser.parseByNameThrow("site", site);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("tableId", tableId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_DEALING";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	BYTE broadcastFlags; _jparser.validateByNameThrow("broadcastFlags", broadcastFlags);
	AtfValidator::validateInt(_descr, "broadcastFlags", broadcastFlags, _checker, __FILE__, __LINE__);
	PString tableName; _jparser.validateByNameThrow("tableName", tableName);
	AtfValidator::validateInt(_descr, "tableName", tableName.length(), _checker, __FILE__, __LINE__);
	UINT32 site; _jparser.validateByNameThrow("site", site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT64 tableId; _jparser.validateByNameThrow("tableId", tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_DEALING";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE broadcastFlags; _parser.parseBYTE(broadcastFlags);
	AtfValidator::validateInt(_descr, "broadcastFlags", broadcastFlags, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "tableName"); size_t szTableName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "tableName", szTableName, _checker, __FILE__, __LINE__);
	UINT32 site; _parser.parseUINT32(site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT64 tableId; _parser.parseUINT64(tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_SETUP_INFO
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::Protocol_MSG_LOBBY_SETUP_INFO()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::clear()
{
	script.clear();
	fileName.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::equals(const Protocol_MSG_LOBBY_SETUP_INFO& _o) const
{
	return Atf::atfPStringEquals(script, _o.script) &&
		Atf::atfPStringEquals(fileName, _o.fileName);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_SETUP_INFO != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_SETUP_INFO*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_SETUP_INFO).append(")");
	_buf.append(',');
	_buf.append("script=");
	_buf.append(script);
	_buf.append(',');
	_buf.append("fileName=");
	_buf.append(fileName);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_SETUP_INFO).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("script", script, _buf);
	Atf::XmlElement::encodeAsXmlElement("fileName", fileName, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("script"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, script)) return false;
			}
			else if (_element.equals("fileName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, fileName)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(script);
	_msg.composeString(fileName);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(script);
	_parser.parseStringP(fileName);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("script", script);
	_jsonstr.compose("fileName", fileName);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("script", script);
	_jparser.parseByNameThrow("fileName", fileName);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_SETUP_INFO";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString script; _jparser.validateByNameThrow("script", script);
	AtfValidator::validateInt(_descr, "script", script.length(), _checker, __FILE__, __LINE__);
	PString fileName; _jparser.validateByNameThrow("fileName", fileName);
	AtfValidator::validateInt(_descr, "fileName", fileName.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_SETUP_INFO";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "script"); size_t szScript = strlen(_dummy);
	AtfValidator::validateInt(_descr, "script", szScript, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "fileName"); size_t szFileName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "fileName", szFileName, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_SETUP_INFO_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::Protocol_MSG_LOBBY_SETUP_INFO_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::equals(const Protocol_MSG_LOBBY_SETUP_INFO_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_SETUP_INFO_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_SETUP_INFO_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_SETUP_INFO_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_SETUP_INFO_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_SETUP_INFO_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_SETUP_INFO_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::clear()
{
	flags = 0;
	site = 0;
	tournsToExclude.clear();
	excludeScheduledTournamentsBefore.setNull();
	excludeNonScheduledTournamentsBefore.setNull();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS& _o) const
{
	return flags == _o.flags &&
		site == _o.site &&
		tournsToExclude.equals(_o.tournsToExclude) &&
		excludeScheduledTournamentsBefore.equals(_o.excludeScheduledTournamentsBefore) &&
		excludeNonScheduledTournamentsBefore.equals(_o.excludeNonScheduledTournamentsBefore);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS).append(")");
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("site=");
	_buf.appendUint(site);
	_buf.append(',');
	_buf.append("tournsToExclude=");
	tournsToExclude.toTraceString(_buf);
	_buf.append(',');
	_buf.append("excludeScheduledTournamentsBefore=");
	Atf::AtfTempl<SrvTime>::ToTraceString(_buf, excludeScheduledTournamentsBefore);
	_buf.append(',');
	_buf.append("excludeNonScheduledTournamentsBefore=");
	Atf::AtfTempl<SrvTime>::ToTraceString(_buf, excludeNonScheduledTournamentsBefore);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("flags", flags, _buf);
	Atf::XmlElement::encodeAsXmlElement("site", site, _buf);
	tournsToExclude.toXmlString("tournsToExclude", _buf);
	Atf::AtfTempl<SrvTime>::ToXmlString(_buf, "excludeScheduledTournamentsBefore", excludeScheduledTournamentsBefore);
	Atf::AtfTempl<SrvTime>::ToXmlString(_buf, "excludeNonScheduledTournamentsBefore", excludeNonScheduledTournamentsBefore);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("flags"))
			{
				flags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("site"))
			{
				site = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("tournsToExclude"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT32, 4 > >::FromXmlString(_value, tournsToExclude)) return false;
			}
			else if (_element.equals("excludeScheduledTournamentsBefore"))
			{
				Atf::AtfTempl<SrvTime>::FromXmlString(_value, excludeScheduledTournamentsBefore);
			}
			else if (_element.equals("excludeNonScheduledTournamentsBefore"))
			{
				Atf::AtfTempl<SrvTime>::FromXmlString(_value, excludeNonScheduledTournamentsBefore);
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(flags);
	_msg.composeUINT32(site);
	tournsToExclude.composeMsg(_msg, _ignoreJSON);
	_msg.composeSrvTime(excludeScheduledTournamentsBefore);
	_msg.composeSrvTime(excludeNonScheduledTournamentsBefore);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(flags);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(site);
	if(_parser.parseEnded()) return;
	tournsToExclude.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseSrvTime(excludeScheduledTournamentsBefore);
	_parser.parseSrvTime(excludeNonScheduledTournamentsBefore);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("flags", flags);
	_jsonstr.compose("site", site);
	_jsonstr.compose("tournsToExclude", tournsToExclude);
	_jsonstr.compose("excludeScheduledTournamentsBefore", excludeScheduledTournamentsBefore);
	_jsonstr.compose("excludeNonScheduledTournamentsBefore", excludeNonScheduledTournamentsBefore);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("flags", flags);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("site", site);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("tournsToExclude", tournsToExclude);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("excludeScheduledTournamentsBefore", excludeScheduledTournamentsBefore);
	_jparser.parseByNameThrow("excludeNonScheduledTournamentsBefore", excludeNonScheduledTournamentsBefore);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 flags; _jparser.validateByNameThrow("flags", flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 site; _jparser.validateByNameThrow("site", site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	Atf::AtfVectorBase< UINT32 > tournsToExclude; _jparser.validateByNameThrow("tournsToExclude", tournsToExclude);
	AtfValidator::validateInt(_descr, "tournsToExclude", tournsToExclude.size(), _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	SrvTime excludeScheduledTournamentsBefore; _jparser.validateByNameThrow("excludeScheduledTournamentsBefore", excludeScheduledTournamentsBefore);
	AtfValidator::validateSrvDateTime(_descr, "excludeScheduledTournamentsBefore", excludeScheduledTournamentsBefore, _checker, __FILE__, __LINE__);
	SrvTime excludeNonScheduledTournamentsBefore; _jparser.validateByNameThrow("excludeNonScheduledTournamentsBefore", excludeNonScheduledTournamentsBefore);
	AtfValidator::validateSrvDateTime(_descr, "excludeNonScheduledTournamentsBefore", excludeNonScheduledTournamentsBefore, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 site; _parser.parseUINT32(site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	PString _descbuf;
	int szTournsToExclude = Atf::LAtfVector< UINT32, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tournsToExclude"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "tournsToExclude", szTournsToExclude, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	SrvTime excludeScheduledTournamentsBefore; _parser.parseSrvTime(excludeScheduledTournamentsBefore);
	AtfValidator::validateSrvDateTime(_descr, "excludeScheduledTournamentsBefore", excludeScheduledTournamentsBefore, _checker, __FILE__, __LINE__);
	SrvTime excludeNonScheduledTournamentsBefore; _parser.parseSrvTime(excludeNonScheduledTournamentsBefore);
	AtfValidator::validateSrvDateTime(_descr, "excludeNonScheduledTournamentsBefore", excludeNonScheduledTournamentsBefore, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::clear()
{
	flags = 0;
	site = 0;
	segment = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::equals(const Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN& _o) const
{
	return flags == _o.flags &&
		site == _o.site &&
		segment == _o.segment;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_STOP_TOURNREGEN != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_STOP_TOURNREGEN).append(")");
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("site=");
	_buf.appendUint(site);
	_buf.append(',');
	_buf.append("segment=");
	_buf.appendUint(segment);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_STOP_TOURNREGEN).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("flags", flags, _buf);
	Atf::XmlElement::encodeAsXmlElement("site", site, _buf);
	Atf::XmlElement::encodeAsXmlElement("segment", segment, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("flags"))
			{
				flags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("site"))
			{
				site = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("segment"))
			{
				segment = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(flags);
	_msg.composeUINT32(site);
	_msg.composeUINT32(segment);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(flags);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(site);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(segment);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("flags", flags);
	_jsonstr.compose("site", site);
	_jsonstr.compose("segment", segment);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("flags", flags);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("site", site);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("segment", segment);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_TOURNREGEN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 flags; _jparser.validateByNameThrow("flags", flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 site; _jparser.validateByNameThrow("site", site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 segment; _jparser.validateByNameThrow("segment", segment);
	AtfValidator::validateInt(_descr, "segment", segment, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_TOURNREGEN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 site; _parser.parseUINT32(site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 segment; _parser.parseUINT32(segment);
	AtfValidator::validateInt(_descr, "segment", segment, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::clear()
{
	flags = 0;
	site = 0;
	segment = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN& _o) const
{
	return flags == _o.flags &&
		site == _o.site &&
		segment == _o.segment;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_RESUME_TOURNREGEN != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_RESUME_TOURNREGEN).append(")");
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("site=");
	_buf.appendUint(site);
	_buf.append(',');
	_buf.append("segment=");
	_buf.appendUint(segment);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_RESUME_TOURNREGEN).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("flags", flags, _buf);
	Atf::XmlElement::encodeAsXmlElement("site", site, _buf);
	Atf::XmlElement::encodeAsXmlElement("segment", segment, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("flags"))
			{
				flags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("site"))
			{
				site = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("segment"))
			{
				segment = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(flags);
	_msg.composeUINT32(site);
	_msg.composeUINT32(segment);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(flags);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(site);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(segment);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("flags", flags);
	_jsonstr.compose("site", site);
	_jsonstr.compose("segment", segment);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("flags", flags);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("site", site);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("segment", segment);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_TOURNREGEN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 flags; _jparser.validateByNameThrow("flags", flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 site; _jparser.validateByNameThrow("site", site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 segment; _jparser.validateByNameThrow("segment", segment);
	AtfValidator::validateInt(_descr, "segment", segment, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_TOURNREGEN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 site; _parser.parseUINT32(site);
	AtfValidator::validateInt(_descr, "site", site, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 segment; _parser.parseUINT32(segment);
	AtfValidator::validateInt(_descr, "segment", segment, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    RevokeChatRequest
//=================================================================

MainLobbyMsgs::adminMsgs::RevokeChatRequest::RevokeChatRequest()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::RevokeChatRequest::clear()
{
	userId.clear();
	bitFlags = 0;
	comment.clear();
	severity = 0;
	srvUntil.setNull();
}

bool MainLobbyMsgs::adminMsgs::RevokeChatRequest::equals(const RevokeChatRequest& _o) const
{
	return Atf::atfPStringEquals(userId, _o.userId) &&
		bitFlags == _o.bitFlags &&
		Atf::atfPStringEquals(comment, _o.comment) &&
		severity == _o.severity &&
		srvUntil.equals(_o.srvUntil);
}

const char *MainLobbyMsgs::adminMsgs::RevokeChatRequest::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("bitFlags=");
	_buf.appendUint(bitFlags);
	_buf.append(',');
	_buf.append("comment=");
	_buf.append(comment);
	_buf.append(',');
	_buf.append("severity=");
	_buf.appendUint(severity);
	_buf.append(',');
	_buf.append("srvUntil=");
	Atf::AtfTempl<SrvTime>::ToTraceString(_buf, srvUntil);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::RevokeChatRequest::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	Atf::XmlElement::encodeAsXmlElement("bitFlags", bitFlags, _buf);
	Atf::XmlElement::encodeAsXmlElement("comment", comment, _buf);
	Atf::XmlElement::encodeAsXmlElement("severity", severity, _buf);
	Atf::AtfTempl<SrvTime>::ToXmlString(_buf, "srvUntil", srvUntil);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::RevokeChatRequest::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("userId"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
		}
		else if (_element.equals("bitFlags"))
		{
			bitFlags = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("comment"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, comment)) return false;
		}
		else if (_element.equals("severity"))
		{
			severity = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("srvUntil"))
		{
			Atf::AtfTempl<SrvTime>::FromXmlString(_value, srvUntil);
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::RevokeChatRequest::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userId);
	_msg.composeBYTE(bitFlags);
	_msg.composeString(comment);
	_msg.composeBYTE(severity);
	_msg.composeSrvTime(srvUntil);
}

void MainLobbyMsgs::adminMsgs::RevokeChatRequest::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseBYTE(bitFlags);
	_parser.parseStringP(comment);
	_parser.parseBYTE(severity);
	_parser.parseSrvTime(srvUntil);
}

const char *MainLobbyMsgs::adminMsgs::RevokeChatRequest::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("bitFlags", bitFlags);
	_jsonstr.compose("comment", comment);
	_jsonstr.compose("severity", severity);
	_jsonstr.compose("srvUntil", srvUntil);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::RevokeChatRequest::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("bitFlags", bitFlags);
	_jparser.parseByNameThrow("comment", comment);
	_jparser.parseByNameThrow("severity", severity);
	_jparser.parseByNameThrow("srvUntil", srvUntil);
}

/* static */ void MainLobbyMsgs::adminMsgs::RevokeChatRequest::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
	BYTE bitFlags; _jparser.validateByNameThrow("bitFlags", bitFlags);
	AtfValidator::validateInt(_descr, "bitFlags", bitFlags, _checker, __FILE__, __LINE__);
	PString comment; _jparser.validateByNameThrow("comment", comment);
	AtfValidator::validateInt(_descr, "comment", comment.length(), _checker, __FILE__, __LINE__);
	BYTE severity; _jparser.validateByNameThrow("severity", severity);
	AtfValidator::validateInt(_descr, "severity", severity, _checker, __FILE__, __LINE__);
	SrvTime srvUntil; _jparser.validateByNameThrow("srvUntil", srvUntil);
	AtfValidator::validateSrvDateTime(_descr, "srvUntil", srvUntil, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::RevokeChatRequest::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	BYTE bitFlags; _parser.parseBYTE(bitFlags);
	AtfValidator::validateInt(_descr, "bitFlags", bitFlags, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "comment"); size_t szComment = strlen(_dummy);
	AtfValidator::validateInt(_descr, "comment", szComment, _checker, __FILE__, __LINE__);
	BYTE severity; _parser.parseBYTE(severity);
	AtfValidator::validateInt(_descr, "severity", severity, _checker, __FILE__, __LINE__);
	SrvTime srvUntil; _parser.parseSrvTime(srvUntil);
	AtfValidator::validateSrvDateTime(_descr, "srvUntil", srvUntil, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::clear()
{
	complainer.clear();
	complainerComment.clear();
	request.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::equals(const Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT& _o) const
{
	return Atf::atfPStringEquals(complainer, _o.complainer) &&
		Atf::atfPStringEquals(complainerComment, _o.complainerComment) &&
		request.equals(_o.request);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_REVOKE_CHAT != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_REVOKE_CHAT).append(")");
	_buf.append(',');
	_buf.append("complainer=");
	_buf.append(complainer);
	_buf.append(',');
	_buf.append("complainerComment=");
	_buf.append(complainerComment);
	_buf.append(',');
	_buf.append("request=");
	request.toTraceString(_buf);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_REVOKE_CHAT).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("complainer", complainer, _buf);
	Atf::XmlElement::encodeAsXmlElement("complainerComment", complainerComment, _buf);
	request.toXmlString("request", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("complainer"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, complainer)) return false;
			}
			else if (_element.equals("complainerComment"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, complainerComment)) return false;
			}
			else if (_element.equals("request"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< RevokeChatRequest, 4 > >::FromXmlString(_value, request)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(complainer);
	_msg.composeString(complainerComment);
	request.composeMsg(_msg, _ignoreJSON);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(complainer);
	_parser.parseStringP(complainerComment);
	request.parseMsg(_parser);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("complainer", complainer);
	_jsonstr.compose("complainerComment", complainerComment);
	_jsonstr.compose("request", request);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("complainer", complainer);
	_jparser.parseByNameThrow("complainerComment", complainerComment);
	_jparser.parseByNameThrow("request", request);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_REVOKE_CHAT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString complainer; _jparser.validateByNameThrow("complainer", complainer);
	AtfValidator::validateInt(_descr, "complainer", complainer.length(), _checker, __FILE__, __LINE__);
	PString complainerComment; _jparser.validateByNameThrow("complainerComment", complainerComment);
	AtfValidator::validateInt(_descr, "complainerComment", complainerComment.length(), _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< RevokeChatRequest > request; _jparser.validateByNameThrow("request", request);
	AtfValidator::validateInt(_descr, "request", request.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_REVOKE_CHAT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "complainer"); size_t szComplainer = strlen(_dummy);
	AtfValidator::validateInt(_descr, "complainer", szComplainer, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "complainerComment"); size_t szComplainerComment = strlen(_dummy);
	AtfValidator::validateInt(_descr, "complainerComment", szComplainerComment, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szRequest = Atf::LAtfVector< RevokeChatRequest, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("request"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "request", szRequest, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    RevokeChatResponse
//=================================================================

MainLobbyMsgs::adminMsgs::RevokeChatResponse::RevokeChatResponse()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::RevokeChatResponse::clear()
{
	userId.clear();
	email.clear();
}

bool MainLobbyMsgs::adminMsgs::RevokeChatResponse::equals(const RevokeChatResponse& _o) const
{
	return Atf::atfPStringEquals(userId, _o.userId) &&
		Atf::atfPStringEquals(email, _o.email);
}

const char *MainLobbyMsgs::adminMsgs::RevokeChatResponse::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("email=");
	_buf.append(email);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::RevokeChatResponse::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	Atf::XmlElement::encodeAsXmlElement("email", email, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::RevokeChatResponse::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("userId"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
		}
		else if (_element.equals("email"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, email)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::RevokeChatResponse::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userId);
	_msg.composeString(email);
}

void MainLobbyMsgs::adminMsgs::RevokeChatResponse::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseStringP(email);
}

const char *MainLobbyMsgs::adminMsgs::RevokeChatResponse::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("email", email);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::RevokeChatResponse::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("email", email);
}

/* static */ void MainLobbyMsgs::adminMsgs::RevokeChatResponse::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
	PString email; _jparser.validateByNameThrow("email", email);
	AtfValidator::validateInt(_descr, "email", email.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::RevokeChatResponse::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "email"); size_t szEmail = strlen(_dummy);
	AtfValidator::validateInt(_descr, "email", szEmail, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	complainerEmail.clear();
	users.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		Atf::atfPStringEquals(complainerEmail, _o.complainerEmail) &&
		users.equals(_o.users);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("complainerEmail=");
		_buf.append(complainerEmail);
		_buf.append(',');
		_buf.append("users=");
		users.toTraceString(_buf);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("complainerEmail", complainerEmail, _buf);
		users.toXmlString("users", _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("complainerEmail"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, complainerEmail)) return false;
			}
			else if (_element.equals("users"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< RevokeChatResponse, 4 > >::FromXmlString(_value, users)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeString(complainerEmail);
		users.composeMsg(_msg, _ignoreJSON);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseStringP(complainerEmail);
		users.parseMsg(_parser);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("complainerEmail", complainerEmail);
		_jsonstr.compose("users", users);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("complainerEmail", complainerEmail);
		_jparser.parseByNameThrow("users", users);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		PString complainerEmail; _jparser.validateByNameThrow("complainerEmail", complainerEmail);
		AtfValidator::validateInt(_descr, "complainerEmail", complainerEmail.length(), _checker, __FILE__, __LINE__);
		Atf::AtfVectorBase< RevokeChatResponse > users; _jparser.validateByNameThrow("users", users);
		AtfValidator::validateInt(_descr, "users", users.size(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		_parser.parseStringN(_dummy, 0, "complainerEmail"); size_t szComplainerEmail = strlen(_dummy);
		AtfValidator::validateInt(_descr, "complainerEmail", szComplainerEmail, _checker, __FILE__, __LINE__);
		PString _descbuf;
		int szUsers = Atf::LAtfVector< RevokeChatResponse, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("users"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "users", szUsers, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::clear()
{
	userId.clear();
	tableName.clear();
	messageText.clear();
	tableId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::equals(const Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE& _o) const
{
	return Atf::atfPStringEquals(userId, _o.userId) &&
		Atf::atfPStringEquals(tableName, _o.tableName) &&
		Atf::atfPStringEquals(messageText, _o.messageText) &&
		tableId == _o.tableId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("tableName=");
	_buf.append(tableName);
	_buf.append(',');
	_buf.append("messageText=");
	_buf.append(messageText);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableName", tableName, _buf);
	Atf::XmlElement::encodeAsXmlElement("messageText", messageText, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableId", tableId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("userId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
			}
			else if (_element.equals("tableName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, tableName)) return false;
			}
			else if (_element.equals("messageText"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, messageText)) return false;
			}
			else if (_element.equals("tableId"))
			{
				tableId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userId);
	_msg.composeString(tableName);
	_msg.composeString(messageText);
	_msg.composeUINT64(tableId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseStringP(tableName);
	_parser.parseStringP(messageText);
	if(_parser.parseEnded()) return;
	_parser.parseUINT64(tableId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("tableName", tableName);
	_jsonstr.compose("messageText", messageText);
	_jsonstr.compose("tableId", tableId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("tableName", tableName);
	_jparser.parseByNameThrow("messageText", messageText);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("tableId", tableId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
	PString tableName; _jparser.validateByNameThrow("tableName", tableName);
	AtfValidator::validateInt(_descr, "tableName", tableName.length(), _checker, __FILE__, __LINE__);
	PString messageText; _jparser.validateByNameThrow("messageText", messageText);
	AtfValidator::validateInt(_descr, "messageText", messageText.length(), _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT64 tableId; _jparser.validateByNameThrow("tableId", tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "tableName"); size_t szTableName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "tableName", szTableName, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "messageText"); size_t szMessageText = strlen(_dummy);
	AtfValidator::validateInt(_descr, "messageText", szMessageText, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT64 tableId; _parser.parseUINT64(tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::clear()
{
	on = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::equals(const Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH& _o) const
{
	return on == _o.on;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MODERATOR_SWITCH != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MODERATOR_SWITCH).append(")");
	_buf.append(',');
	_buf.append("on=");
	_buf.appendUint(on);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MODERATOR_SWITCH).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("on", on, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("on"))
			{
				on = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeBYTE(on);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(on);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("on", on);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("on", on);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MODERATOR_SWITCH";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	BYTE on; _jparser.validateByNameThrow("on", on);
	AtfValidator::validateInt(_descr, "on", on, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MODERATOR_SWITCH";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE on; _parser.parseBYTE(on);
	AtfValidator::validateInt(_descr, "on", on, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::clear()
{
	opt0 = 0;
	opt1 = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::equals(const Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING& _o) const
{
	return opt0 == _o.opt0 &&
		opt1 == _o.opt1;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CLIENT_DATA_MINING != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CLIENT_DATA_MINING).append(")");
	_buf.append(',');
	_buf.append("opt0=");
	_buf.appendUint(opt0);
	_buf.append(',');
	_buf.append("opt1=");
	_buf.appendUint(opt1);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CLIENT_DATA_MINING).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("opt0", opt0, _buf);
	Atf::XmlElement::encodeAsXmlElement("opt1", opt1, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("opt0"))
			{
				opt0 = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("opt1"))
			{
				opt1 = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(opt0);
	_msg.composeUINT32(opt1);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(opt0);
	_parser.parseUINT32(opt1);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("opt0", opt0);
	_jsonstr.compose("opt1", opt1);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("opt0", opt0);
	_jparser.parseByNameThrow("opt1", opt1);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLIENT_DATA_MINING";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 opt0; _jparser.validateByNameThrow("opt0", opt0);
	AtfValidator::validateInt(_descr, "opt0", opt0, _checker, __FILE__, __LINE__);
	UINT32 opt1; _jparser.validateByNameThrow("opt1", opt1);
	AtfValidator::validateInt(_descr, "opt1", opt1, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLIENT_DATA_MINING";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 opt0; _parser.parseUINT32(opt0);
	AtfValidator::validateInt(_descr, "opt0", opt0, _checker, __FILE__, __LINE__);
	UINT32 opt1; _parser.parseUINT32(opt1);
	AtfValidator::validateInt(_descr, "opt1", opt1, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::clear()
{
	tableName.clear();
	tableId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::equals(const Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS& _o) const
{
	return Atf::atfPStringEquals(tableName, _o.tableName) &&
		tableId == _o.tableId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_GET_CHAT_STATUS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_GET_CHAT_STATUS).append(")");
	_buf.append(',');
	_buf.append("tableName=");
	_buf.append(tableName);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_GET_CHAT_STATUS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tableName", tableName, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableId", tableId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tableName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, tableName)) return false;
			}
			else if (_element.equals("tableId"))
			{
				tableId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(tableName);
	_msg.composeUINT64(tableId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(tableName);
	if(_parser.parseEnded()) return;
	_parser.parseUINT64(tableId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tableName", tableName);
	_jsonstr.compose("tableId", tableId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tableName", tableName);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("tableId", tableId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CHAT_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString tableName; _jparser.validateByNameThrow("tableName", tableName);
	AtfValidator::validateInt(_descr, "tableName", tableName.length(), _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT64 tableId; _jparser.validateByNameThrow("tableId", tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CHAT_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "tableName"); size_t szTableName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "tableName", szTableName, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT64 tableId; _parser.parseUINT64(tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	tableName.clear();
	state = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		Atf::atfPStringEquals(tableName, _o.tableName) &&
		state == _o.state;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("tableName=");
		_buf.append(tableName);
		_buf.append(',');
		_buf.append("state=");
		_buf.appendUint(state);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("tableName", tableName, _buf);
		Atf::XmlElement::encodeAsXmlElement("state", state, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("tableName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, tableName)) return false;
			}
			else if (_element.equals("state"))
			{
				state = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeString(tableName);
		_msg.composeBYTE(state);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseStringP(tableName);
		_parser.parseBYTE(state);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("tableName", tableName);
		_jsonstr.compose("state", state);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("tableName", tableName);
		_jparser.parseByNameThrow("state", state);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		PString tableName; _jparser.validateByNameThrow("tableName", tableName);
		AtfValidator::validateInt(_descr, "tableName", tableName.length(), _checker, __FILE__, __LINE__);
		BYTE state; _jparser.validateByNameThrow("state", state);
		AtfValidator::validateInt(_descr, "state", state, _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		_parser.parseStringN(_dummy, 0, "tableName"); size_t szTableName = strlen(_dummy);
		AtfValidator::validateInt(_descr, "tableName", szTableName, _checker, __FILE__, __LINE__);
		BYTE state; _parser.parseBYTE(state);
		AtfValidator::validateInt(_descr, "state", state, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::clear()
{
	status = 0;
	tableName.clear();
	teamBlocked = false;
	tableId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::equals(const Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS& _o) const
{
	return status == _o.status &&
		Atf::atfPStringEquals(tableName, _o.tableName) &&
		teamBlocked == _o.teamBlocked &&
		tableId == _o.tableId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_SET_CHAT_STATUS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_SET_CHAT_STATUS).append(")");
	_buf.append(',');
	_buf.append("status=");
	_buf.appendUint(status);
	_buf.append(',');
	_buf.append("tableName=");
	_buf.append(tableName);
	_buf.append(',');
	_buf.append("teamBlocked=");
	_buf.appendUint(teamBlocked);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_SET_CHAT_STATUS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("status", status, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableName", tableName, _buf);
	Atf::XmlElement::encodeAsXmlElement("teamBlocked", teamBlocked, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableId", tableId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("status"))
			{
				status = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("tableName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, tableName)) return false;
			}
			else if (_element.equals("teamBlocked"))
			{
				teamBlocked = (*_value.ptr() == '1');
			}
			else if (_element.equals("tableId"))
			{
				tableId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeBYTE(status);
	_msg.composeString(tableName);
	_msg.composeBOOL(teamBlocked);
	_msg.composeUINT64(tableId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(status);
	_parser.parseStringP(tableName);
	_parser.parseBOOL(teamBlocked);
	if(_parser.parseEnded()) return;
	_parser.parseUINT64(tableId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("status", status);
	_jsonstr.compose("tableName", tableName);
	_jsonstr.compose("teamBlocked", teamBlocked);
	_jsonstr.compose("tableId", tableId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("status", status);
	_jparser.parseByNameThrow("tableName", tableName);
	_jparser.parseByNameThrow("teamBlocked", teamBlocked);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("tableId", tableId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_CHAT_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	BYTE status; _jparser.validateByNameThrow("status", status);
	AtfValidator::validateInt(_descr, "status", status, _checker, __FILE__, __LINE__);
	PString tableName; _jparser.validateByNameThrow("tableName", tableName);
	AtfValidator::validateInt(_descr, "tableName", tableName.length(), _checker, __FILE__, __LINE__);
	bool teamBlocked; _jparser.validateByNameThrow("teamBlocked", teamBlocked);
	AtfValidator::validateInt(_descr, "teamBlocked", teamBlocked, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT64 tableId; _jparser.validateByNameThrow("tableId", tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_CHAT_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE status; _parser.parseBYTE(status);
	AtfValidator::validateInt(_descr, "status", status, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "tableName"); size_t szTableName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "tableName", szTableName, _checker, __FILE__, __LINE__);
	bool teamBlocked; _parser.parseBOOL(teamBlocked);
	AtfValidator::validateInt(_descr, "teamBlocked", teamBlocked, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT64 tableId; _parser.parseUINT64(tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::clear()
{
	action = 0;
	attrib = 0;
	flags = 0;
	locale = 0;
	text.clear();
	siteId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER& _o) const
{
	return action == _o.action &&
		attrib == _o.attrib &&
		flags == _o.flags &&
		locale == _o.locale &&
		Atf::atfPStringEquals(text, _o.text) &&
		siteId == _o.siteId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_LOBBY_FLYER != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER).append(")");
	_buf.append(',');
	_buf.append("action=");
	_buf.appendUint(action);
	_buf.append(',');
	_buf.append("attrib=");
	_buf.appendUint(attrib);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("locale=");
	_buf.appendUint(locale);
	_buf.append(',');
	_buf.append("text=");
	_buf.append(text);
	_buf.append(',');
	_buf.append("siteId=");
	_buf.appendUint(siteId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("action", action, _buf);
	Atf::XmlElement::encodeAsXmlElement("attrib", attrib, _buf);
	Atf::XmlElement::encodeAsXmlElement("flags", flags, _buf);
	Atf::XmlElement::encodeAsXmlElement("locale", locale, _buf);
	Atf::XmlElement::encodeAsXmlElement("text", text, _buf);
	Atf::XmlElement::encodeAsXmlElement("siteId", siteId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("action"))
			{
				action = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("attrib"))
			{
				attrib = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("flags"))
			{
				flags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("locale"))
			{
				locale = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("text"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, text)) return false;
			}
			else if (_element.equals("siteId"))
			{
				siteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeBYTE(action);
	_msg.composeUINT32(attrib);
	_msg.composeUINT32(flags);
	_msg.composeUINT32(locale);
	_msg.composeString(text);
	_msg.composeUINT32(siteId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(action);
	_parser.parseUINT32(attrib);
	_parser.parseUINT32(flags);
	_parser.parseUINT32(locale);
	_parser.parseStringP(text);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(siteId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("action", action);
	_jsonstr.compose("attrib", attrib);
	_jsonstr.compose("flags", flags);
	_jsonstr.compose("locale", locale);
	_jsonstr.compose("text", text);
	_jsonstr.compose("siteId", siteId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("action", action);
	_jparser.parseByNameThrow("attrib", attrib);
	_jparser.parseByNameThrow("flags", flags);
	_jparser.parseByNameThrow("locale", locale);
	_jparser.parseByNameThrow("text", text);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("siteId", siteId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	BYTE action; _jparser.validateByNameThrow("action", action);
	AtfValidator::validateInt(_descr, "action", action, _checker, __FILE__, __LINE__);
	UINT32 attrib; _jparser.validateByNameThrow("attrib", attrib);
	AtfValidator::validateInt(_descr, "attrib", attrib, _checker, __FILE__, __LINE__);
	UINT32 flags; _jparser.validateByNameThrow("flags", flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT32 locale; _jparser.validateByNameThrow("locale", locale);
	AtfValidator::validateInt(_descr, "locale", locale, _checker, __FILE__, __LINE__);
	PString text; _jparser.validateByNameThrow("text", text);
	AtfValidator::validateInt(_descr, "text", text.length(), _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 siteId; _jparser.validateByNameThrow("siteId", siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE action; _parser.parseBYTE(action);
	AtfValidator::validateInt(_descr, "action", action, _checker, __FILE__, __LINE__);
	UINT32 attrib; _parser.parseUINT32(attrib);
	AtfValidator::validateInt(_descr, "attrib", attrib, _checker, __FILE__, __LINE__);
	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT32 locale; _parser.parseUINT32(locale);
	AtfValidator::validateInt(_descr, "locale", locale, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "text"); size_t szText = strlen(_dummy);
	AtfValidator::validateInt(_descr, "text", szText, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 siteId; _parser.parseUINT32(siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::clear()
{
	templateId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE& _o) const
{
	return templateId == _o.templateId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE).append(")");
	_buf.append(',');
	_buf.append("templateId=");
	_buf.appendUint(templateId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("templateId", templateId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("templateId"))
			{
				templateId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(templateId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(templateId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("templateId", templateId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("templateId", templateId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 templateId; _jparser.validateByNameThrow("templateId", templateId);
	AtfValidator::validateInt(_descr, "templateId", templateId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 templateId; _parser.parseUINT32(templateId);
	AtfValidator::validateInt(_descr, "templateId", templateId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::clear()
{
	templateId = 0;
	siteIdMask = 0;
	attributes.clear();
	flags.clear();
	siteIdMaskEx.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE& _o) const
{
	return templateId == _o.templateId &&
		siteIdMask == _o.siteIdMask &&
		attributes.equals(_o.attributes) &&
		flags.equals(_o.flags) &&
		siteIdMaskEx.equals(_o.siteIdMaskEx);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE).append(")");
	_buf.append(',');
	_buf.append("templateId=");
	_buf.appendUint(templateId);
	_buf.append(',');
	_buf.append("siteIdMask=");
	_buf.appendUint(siteIdMask);
	_buf.append(',');
	_buf.append("attributes=");
	attributes.toTraceString(_buf);
	_buf.append(',');
	_buf.append("flags=");
	flags.toTraceString(_buf);
	_buf.append(',');
	_buf.append("siteIdMaskEx=");
	siteIdMaskEx.toTraceString(_buf);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("templateId", templateId, _buf);
	Atf::XmlElement::encodeAsXmlElement("siteIdMask", siteIdMask, _buf);
	attributes.toXmlString("attributes", _buf);
	flags.toXmlString("flags", _buf);
	siteIdMaskEx.toXmlString("siteIdMaskEx", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("templateId"))
			{
				templateId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("siteIdMask"))
			{
				siteIdMask = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("attributes"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT32, 4 > >::FromXmlString(_value, attributes)) return false;
			}
			else if (_element.equals("flags"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT32, 4 > >::FromXmlString(_value, flags)) return false;
			}
			else if (_element.equals("siteIdMaskEx"))
			{
				if(!Atf::AtfTempl< PSiteMask >::FromXmlString(_value, siteIdMaskEx)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(templateId);
	_msg.composeUINT32(siteIdMask);
	attributes.composeMsg(_msg, _ignoreJSON);
	flags.composeMsg(_msg, _ignoreJSON);
	siteIdMaskEx.composeMsg(_msg, _ignoreJSON);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(templateId);
	_parser.parseUINT32(siteIdMask);
	attributes.parseMsg(_parser);
	flags.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	siteIdMaskEx.parseMsg(_parser);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("templateId", templateId);
	_jsonstr.compose("siteIdMask", siteIdMask);
	_jsonstr.compose("attributes", attributes);
	_jsonstr.compose("flags", flags);
	_jsonstr.compose("siteIdMaskEx", siteIdMaskEx);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("templateId", templateId);
	_jparser.parseByNameThrow("siteIdMask", siteIdMask);
	_jparser.parseByNameThrow("attributes", attributes);
	_jparser.parseByNameThrow("flags", flags);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("siteIdMaskEx", siteIdMaskEx);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 templateId; _jparser.validateByNameThrow("templateId", templateId);
	AtfValidator::validateInt(_descr, "templateId", templateId, _checker, __FILE__, __LINE__);
	UINT32 siteIdMask; _jparser.validateByNameThrow("siteIdMask", siteIdMask);
	AtfValidator::validateInt(_descr, "siteIdMask", siteIdMask, _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< UINT32 > attributes; _jparser.validateByNameThrow("attributes", attributes);
	AtfValidator::validateInt(_descr, "attributes", attributes.size(), _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< UINT32 > flags; _jparser.validateByNameThrow("flags", flags);
	AtfValidator::validateInt(_descr, "flags", flags.size(), _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	PSiteMask siteIdMaskEx; _jparser.validateByNameThrow("siteIdMaskEx", siteIdMaskEx);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 templateId; _parser.parseUINT32(templateId);
	AtfValidator::validateInt(_descr, "templateId", templateId, _checker, __FILE__, __LINE__);
	UINT32 siteIdMask; _parser.parseUINT32(siteIdMask);
	AtfValidator::validateInt(_descr, "siteIdMask", siteIdMask, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szAttributes = Atf::LAtfVector< UINT32, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("attributes"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "attributes", szAttributes, _checker, __FILE__, __LINE__);
	int szFlags = Atf::LAtfVector< UINT32, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("flags"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "flags", szFlags, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	PSiteMask::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("siteIdMaskEx"), _fieldsWithUnparsedContent);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::clear()
{
	tournId = 0;
	name.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::equals(const Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME& _o) const
{
	return tournId == _o.tournId &&
		name.equals(_o.name);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME).append(")");
	_buf.append(',');
	_buf.append("tournId=");
	_buf.appendUint(tournId);
	_buf.append(',');
	_buf.append("name=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, name);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tournId", tournId, _buf);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "name", name);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournId"))
			{
				tournId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("name"))
			{
				Atf::AtfTempl<I18nPString>::FromXmlString(_value, name);
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(tournId);
	name.compose(_msg);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(tournId);
	name.parse(_parser);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournId", tournId);
	_jsonstr.compose("name", name);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournId", tournId);
	_jparser.parseByNameThrow("name", name);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournId; _jparser.validateByNameThrow("tournId", tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	I18nPString name; _jparser.validateByNameThrow("name", name);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 tournId; _parser.parseUINT32(tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	I18nPString name; name.parse(_parser);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::clear()
{
	tournId = 0;
	newStatus = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::equals(const Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS& _o) const
{
	return tournId == _o.tournId &&
		newStatus == _o.newStatus;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS).append(")");
	_buf.append(',');
	_buf.append("tournId=");
	_buf.appendUint(tournId);
	_buf.append(',');
	_buf.append("newStatus=");
	_buf.appendUint(newStatus);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tournId", tournId, _buf);
	Atf::XmlElement::encodeAsXmlElement("newStatus", newStatus, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournId"))
			{
				tournId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("newStatus"))
			{
				newStatus = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(tournId);
	_msg.composeUINT32(newStatus);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(tournId);
	_parser.parseUINT32(newStatus);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournId", tournId);
	_jsonstr.compose("newStatus", newStatus);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournId", tournId);
	_jparser.parseByNameThrow("newStatus", newStatus);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournId; _jparser.validateByNameThrow("tournId", tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	UINT32 newStatus; _jparser.validateByNameThrow("newStatus", newStatus);
	AtfValidator::validateInt(_descr, "newStatus", newStatus, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 tournId; _parser.parseUINT32(tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	UINT32 newStatus; _parser.parseUINT32(newStatus);
	AtfValidator::validateInt(_descr, "newStatus", newStatus, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::clear()
{
	tableName.clear();
	messageText.clear();
	tableId = 0;
	forceKill = false;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::equals(const Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE& _o) const
{
	return Atf::atfPStringEquals(tableName, _o.tableName) &&
		messageText.equals(_o.messageText) &&
		tableId == _o.tableId &&
		forceKill == _o.forceKill;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CLOSE_TABLE != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CLOSE_TABLE).append(")");
	_buf.append(',');
	_buf.append("tableName=");
	_buf.append(tableName);
	_buf.append(',');
	_buf.append("messageText=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, messageText);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	_buf.append(',');
	_buf.append("forceKill=");
	_buf.appendUint(forceKill);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CLOSE_TABLE).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tableName", tableName, _buf);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "messageText", messageText);
	Atf::XmlElement::encodeAsXmlElement("tableId", tableId, _buf);
	Atf::XmlElement::encodeAsXmlElement("forceKill", forceKill, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tableName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, tableName)) return false;
			}
			else if (_element.equals("messageText"))
			{
				Atf::AtfTempl<I18nPString>::FromXmlString(_value, messageText);
			}
			else if (_element.equals("tableId"))
			{
				tableId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("forceKill"))
			{
				forceKill = (*_value.ptr() == '1');
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(tableName);
	messageText.compose(_msg);
	_msg.composeUINT64(tableId);
	_msg.composeBOOL(forceKill);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(tableName);
	messageText.parse(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseUINT64(tableId);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(forceKill);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tableName", tableName);
	_jsonstr.compose("messageText", messageText);
	_jsonstr.compose("tableId", tableId);
	_jsonstr.compose("forceKill", forceKill);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tableName", tableName);
	_jparser.parseByNameThrow("messageText", messageText);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("tableId", tableId);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("forceKill", forceKill);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLOSE_TABLE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString tableName; _jparser.validateByNameThrow("tableName", tableName);
	AtfValidator::validateInt(_descr, "tableName", tableName.length(), _checker, __FILE__, __LINE__);
	I18nPString messageText; _jparser.validateByNameThrow("messageText", messageText);
	if(_jparser.parseEnded()) return;
	UINT64 tableId; _jparser.validateByNameThrow("tableId", tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	bool forceKill; _jparser.validateByNameThrow("forceKill", forceKill);
	AtfValidator::validateInt(_descr, "forceKill", forceKill, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLOSE_TABLE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "tableName"); size_t szTableName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "tableName", szTableName, _checker, __FILE__, __LINE__);
	I18nPString messageText; messageText.parse(_parser);
	if(_parser.parseEnded()) return;
	UINT64 tableId; _parser.parseUINT64(tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool forceKill; _parser.parseBOOL(forceKill);
	AtfValidator::validateInt(_descr, "forceKill", forceKill, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::clear()
{
	tableName.clear();
	messageText.clear();
	tableId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE& _o) const
{
	return Atf::atfPStringEquals(tableName, _o.tableName) &&
		Atf::atfPStringEquals(messageText, _o.messageText) &&
		tableId == _o.tableId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE).append(")");
	_buf.append(',');
	_buf.append("tableName=");
	_buf.append(tableName);
	_buf.append(',');
	_buf.append("messageText=");
	_buf.append(messageText);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tableName", tableName, _buf);
	Atf::XmlElement::encodeAsXmlElement("messageText", messageText, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableId", tableId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tableName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, tableName)) return false;
			}
			else if (_element.equals("messageText"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, messageText)) return false;
			}
			else if (_element.equals("tableId"))
			{
				tableId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(tableName);
	_msg.composeString(messageText);
	_msg.composeUINT64(tableId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(tableName);
	_parser.parseStringP(messageText);
	if(_parser.parseEnded()) return;
	_parser.parseUINT64(tableId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tableName", tableName);
	_jsonstr.compose("messageText", messageText);
	_jsonstr.compose("tableId", tableId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tableName", tableName);
	_jparser.parseByNameThrow("messageText", messageText);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("tableId", tableId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString tableName; _jparser.validateByNameThrow("tableName", tableName);
	AtfValidator::validateInt(_descr, "tableName", tableName.length(), _checker, __FILE__, __LINE__);
	PString messageText; _jparser.validateByNameThrow("messageText", messageText);
	AtfValidator::validateInt(_descr, "messageText", messageText.length(), _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT64 tableId; _jparser.validateByNameThrow("tableId", tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "tableName"); size_t szTableName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "tableName", szTableName, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "messageText"); size_t szMessageText = strlen(_dummy);
	AtfValidator::validateInt(_descr, "messageText", szMessageText, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT64 tableId; _parser.parseUINT64(tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::clear()
{
	siteId = PokerStars_Com;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::equals(const Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY& _o) const
{
	return siteId == _o.siteId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY).append(")");
	_buf.append(',');
	_buf.append("siteId=");
	_buf.appendUint(siteId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("siteId", siteId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("siteId"))
			{
				siteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(siteId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::parseMsg(CommMsgParser& _parser)
{
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(siteId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("siteId", siteId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("siteId", siteId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	if(_jparser.parseEnded()) return;
	UINT32 siteId; _jparser.validateByNameThrow("siteId", siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(_parser.parseEnded()) return;
	UINT32 siteId; _parser.parseUINT32(siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    PropertyInfo
//=================================================================

MainLobbyMsgs::adminMsgs::PropertyInfo::PropertyInfo()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::PropertyInfo::clear()
{
	s1.clear();
	s2.clear();
}

bool MainLobbyMsgs::adminMsgs::PropertyInfo::equals(const PropertyInfo& _o) const
{
	return Atf::atfPStringEquals(s1, _o.s1) &&
		Atf::atfPStringEquals(s2, _o.s2);
}

const char *MainLobbyMsgs::adminMsgs::PropertyInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("s1=");
	_buf.append(s1);
	_buf.append(',');
	_buf.append("s2=");
	_buf.append(s2);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::PropertyInfo::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("s1", s1, _buf);
	Atf::XmlElement::encodeAsXmlElement("s2", s2, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::PropertyInfo::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("s1"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, s1)) return false;
		}
		else if (_element.equals("s2"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, s2)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::PropertyInfo::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(s1);
	_msg.composeString(s2);
}

void MainLobbyMsgs::adminMsgs::PropertyInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(s1);
	_parser.parseStringP(s2);
}

const char *MainLobbyMsgs::adminMsgs::PropertyInfo::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("s1", s1);
	_jsonstr.compose("s2", s2);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::PropertyInfo::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("s1", s1);
	_jparser.parseByNameThrow("s2", s2);
}

/* static */ void MainLobbyMsgs::adminMsgs::PropertyInfo::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString s1; _jparser.validateByNameThrow("s1", s1);
	AtfValidator::validateInt(_descr, "s1", s1.length(), _checker, __FILE__, __LINE__);
	PString s2; _jparser.validateByNameThrow("s2", s2);
	AtfValidator::validateInt(_descr, "s2", s2.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::PropertyInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "s1"); size_t szS1 = strlen(_dummy);
	AtfValidator::validateInt(_descr, "s1", szS1, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "s2"); size_t szS2 = strlen(_dummy);
	AtfValidator::validateInt(_descr, "s2", szS2, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	propertyInfo.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		propertyInfo.equals(_o.propertyInfo);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("propertyInfo=");
		propertyInfo.toTraceString(_buf);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		propertyInfo.toXmlString("propertyInfo", _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("propertyInfo"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< PropertyInfo, 4 > >::FromXmlString(_value, propertyInfo)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		propertyInfo.composeMsg(_msg, _ignoreJSON);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		propertyInfo.parseMsg(_parser);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("propertyInfo", propertyInfo);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("propertyInfo", propertyInfo);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		Atf::AtfVectorBase< PropertyInfo > propertyInfo; _jparser.validateByNameThrow("propertyInfo", propertyInfo);
		AtfValidator::validateInt(_descr, "propertyInfo", propertyInfo.size(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szPropertyInfo = Atf::LAtfVector< PropertyInfo, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("propertyInfo"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "propertyInfo", szPropertyInfo, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::clear()
{
	name.clear();
	siteId = PokerStars_Com;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::equals(const Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY& _o) const
{
	return Atf::atfPStringEquals(name, _o.name) &&
		siteId == _o.siteId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY).append(")");
	_buf.append(',');
	_buf.append("name=");
	_buf.append(name);
	_buf.append(',');
	_buf.append("siteId=");
	_buf.appendUint(siteId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("name", name, _buf);
	Atf::XmlElement::encodeAsXmlElement("siteId", siteId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("name"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, name)) return false;
			}
			else if (_element.equals("siteId"))
			{
				siteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(name);
	_msg.composeUINT32(siteId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(name);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(siteId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("name", name);
	_jsonstr.compose("siteId", siteId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("name", name);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("siteId", siteId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString name; _jparser.validateByNameThrow("name", name);
	AtfValidator::validateInt(_descr, "name", name.length(), _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 siteId; _jparser.validateByNameThrow("siteId", siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "name"); size_t szName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "name", szName, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 siteId; _parser.parseUINT32(siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::clear()
{
	userId.clear();
	until.setNull();
	reason = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::equals(const Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER& _o) const
{
	return Atf::atfPStringEquals(userId, _o.userId) &&
		until.equals(_o.until) &&
		reason == _o.reason;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("until=");
	Atf::AtfTempl<CommSrvTime>::ToTraceString(_buf, until);
	_buf.append(',');
	_buf.append("reason=");
	_buf.appendUint(reason);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	Atf::AtfTempl<CommSrvTime>::ToXmlString(_buf, "until", until);
	Atf::XmlElement::encodeAsXmlElement("reason", reason, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("userId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
			}
			else if (_element.equals("until"))
			{
				Atf::AtfTempl<CommSrvTime>::FromXmlString(_value, until);
			}
			else if (_element.equals("reason"))
			{
				reason = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userId);
	_msg.composeSrvTime(until);
	_msg.composeUINT32(reason);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseSrvTime(until);
	_parser.parseUINT32(reason);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("until", until);
	_jsonstr.compose("reason", reason);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("until", until);
	_jparser.parseByNameThrow("reason", reason);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
	CommSrvTime until; _jparser.validateByNameThrow("until", until);
	AtfValidator::validateSrvDateTime(_descr, "until", until, _checker, __FILE__, __LINE__);
	UINT32 reason; _jparser.validateByNameThrow("reason", reason);
	AtfValidator::validateInt(_descr, "reason", reason, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	CommSrvTime until; _parser.parseSrvTime(until);
	AtfValidator::validateSrvDateTime(_descr, "until", until, _checker, __FILE__, __LINE__);
	UINT32 reason; _parser.parseUINT32(reason);
	AtfValidator::validateInt(_descr, "reason", reason, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::clear()
{
	userId.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::equals(const Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA& _o) const
{
	return Atf::atfPStringEquals(userId, _o.userId);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_GET_CHALLENGE_QA != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_GET_CHALLENGE_QA).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_GET_CHALLENGE_QA).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("userId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CHALLENGE_QA";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CHALLENGE_QA";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	isRM = false;
	numOfQuestions = 0;
	id1 = 0;
	question1.clear();
	answer1.clear();
	id2 = 0;
	question2.clear();
	answer2.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		isRM == _o.isRM &&
		numOfQuestions == _o.numOfQuestions &&
		id1 == _o.id1 &&
		Atf::atfPStringEquals(question1, _o.question1) &&
		Atf::atfPStringEquals(answer1, _o.answer1) &&
		id2 == _o.id2 &&
		Atf::atfPStringEquals(question2, _o.question2) &&
		Atf::atfPStringEquals(answer2, _o.answer2);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("isRM=");
		_buf.appendUint(isRM);
		_buf.append(',');
		_buf.append("numOfQuestions=");
		_buf.appendUint(numOfQuestions);
		_buf.append(',');
		_buf.append("id1=");
		_buf.appendUint(id1);
		_buf.append(',');
		_buf.append("question1=");
		_buf.append(question1);
		_buf.append(',');
		_buf.append("answer1=");
		_buf.append(answer1);
		_buf.append(',');
		_buf.append("id2=");
		_buf.appendUint(id2);
		_buf.append(',');
		_buf.append("question2=");
		_buf.append(question2);
		_buf.append(',');
		_buf.append("answer2=");
		_buf.append(answer2);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("isRM", isRM, _buf);
		Atf::XmlElement::encodeAsXmlElement("numOfQuestions", numOfQuestions, _buf);
		Atf::XmlElement::encodeAsXmlElement("id1", id1, _buf);
		Atf::XmlElement::encodeAsXmlElement("question1", question1, _buf);
		Atf::XmlElement::encodeAsXmlElement("answer1", answer1, _buf);
		Atf::XmlElement::encodeAsXmlElement("id2", id2, _buf);
		Atf::XmlElement::encodeAsXmlElement("question2", question2, _buf);
		Atf::XmlElement::encodeAsXmlElement("answer2", answer2, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("isRM"))
			{
				isRM = (*_value.ptr() == '1');
			}
			else if (_element.equals("numOfQuestions"))
			{
				numOfQuestions = (UINT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("id1"))
			{
				id1 = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("question1"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, question1)) return false;
			}
			else if (_element.equals("answer1"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, answer1)) return false;
			}
			else if (_element.equals("id2"))
			{
				id2 = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("question2"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, question2)) return false;
			}
			else if (_element.equals("answer2"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, answer2)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeBOOL(isRM);
		_msg.composeUINT16(numOfQuestions);
		_msg.composeUINT32(id1);
		_msg.composeString(question1);
		_msg.composeString(answer1);
		_msg.composeUINT32(id2);
		_msg.composeString(question2);
		_msg.composeString(answer2);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseBOOL(isRM);
		_parser.parseUINT16(numOfQuestions);
		_parser.parseUINT32(id1);
		_parser.parseStringP(question1);
		_parser.parseStringP(answer1);
		_parser.parseUINT32(id2);
		_parser.parseStringP(question2);
		_parser.parseStringP(answer2);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("isRM", isRM);
		_jsonstr.compose("numOfQuestions", numOfQuestions);
		_jsonstr.compose("id1", id1);
		_jsonstr.compose("question1", question1);
		_jsonstr.compose("answer1", answer1);
		_jsonstr.compose("id2", id2);
		_jsonstr.compose("question2", question2);
		_jsonstr.compose("answer2", answer2);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("isRM", isRM);
		_jparser.parseByNameThrow("numOfQuestions", numOfQuestions);
		_jparser.parseByNameThrow("id1", id1);
		_jparser.parseByNameThrow("question1", question1);
		_jparser.parseByNameThrow("answer1", answer1);
		_jparser.parseByNameThrow("id2", id2);
		_jparser.parseByNameThrow("question2", question2);
		_jparser.parseByNameThrow("answer2", answer2);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		bool isRM; _jparser.validateByNameThrow("isRM", isRM);
		AtfValidator::validateInt(_descr, "isRM", isRM, _checker, __FILE__, __LINE__);
		UINT16 numOfQuestions; _jparser.validateByNameThrow("numOfQuestions", numOfQuestions);
		AtfValidator::validateInt(_descr, "numOfQuestions", numOfQuestions, _checker, __FILE__, __LINE__);
		UINT32 id1; _jparser.validateByNameThrow("id1", id1);
		AtfValidator::validateInt(_descr, "id1", id1, _checker, __FILE__, __LINE__);
		PString question1; _jparser.validateByNameThrow("question1", question1);
		AtfValidator::validateInt(_descr, "question1", question1.length(), _checker, __FILE__, __LINE__);
		PString answer1; _jparser.validateByNameThrow("answer1", answer1);
		AtfValidator::validateInt(_descr, "answer1", answer1.length(), _checker, __FILE__, __LINE__);
		UINT32 id2; _jparser.validateByNameThrow("id2", id2);
		AtfValidator::validateInt(_descr, "id2", id2, _checker, __FILE__, __LINE__);
		PString question2; _jparser.validateByNameThrow("question2", question2);
		AtfValidator::validateInt(_descr, "question2", question2.length(), _checker, __FILE__, __LINE__);
		PString answer2; _jparser.validateByNameThrow("answer2", answer2);
		AtfValidator::validateInt(_descr, "answer2", answer2.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		bool isRM; _parser.parseBOOL(isRM);
		AtfValidator::validateInt(_descr, "isRM", isRM, _checker, __FILE__, __LINE__);
		UINT16 numOfQuestions; _parser.parseUINT16(numOfQuestions);
		AtfValidator::validateInt(_descr, "numOfQuestions", numOfQuestions, _checker, __FILE__, __LINE__);
		UINT32 id1; _parser.parseUINT32(id1);
		AtfValidator::validateInt(_descr, "id1", id1, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "question1"); size_t szQuestion1 = strlen(_dummy);
		AtfValidator::validateInt(_descr, "question1", szQuestion1, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "answer1"); size_t szAnswer1 = strlen(_dummy);
		AtfValidator::validateInt(_descr, "answer1", szAnswer1, _checker, __FILE__, __LINE__);
		UINT32 id2; _parser.parseUINT32(id2);
		AtfValidator::validateInt(_descr, "id2", id2, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "question2"); size_t szQuestion2 = strlen(_dummy);
		AtfValidator::validateInt(_descr, "question2", szQuestion2, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "answer2"); size_t szAnswer2 = strlen(_dummy);
		AtfValidator::validateInt(_descr, "answer2", szAnswer2, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::clear()
{
	tableId = 0;
	pausingFrom.setNull();
	pausingTo.setNull();
	pausingAfterNumHands = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::equals(const Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO& _o) const
{
	return tableId == _o.tableId &&
		pausingFrom.equals(_o.pausingFrom) &&
		pausingTo.equals(_o.pausingTo) &&
		pausingAfterNumHands == _o.pausingAfterNumHands;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO).append(")");
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	_buf.append(',');
	_buf.append("pausingFrom=");
	Atf::AtfTempl<CommSrvTime>::ToTraceString(_buf, pausingFrom);
	_buf.append(',');
	_buf.append("pausingTo=");
	Atf::AtfTempl<CommSrvTime>::ToTraceString(_buf, pausingTo);
	_buf.append(',');
	_buf.append("pausingAfterNumHands=");
	_buf.appendUint(pausingAfterNumHands);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tableId", tableId, _buf);
	Atf::AtfTempl<CommSrvTime>::ToXmlString(_buf, "pausingFrom", pausingFrom);
	Atf::AtfTempl<CommSrvTime>::ToXmlString(_buf, "pausingTo", pausingTo);
	Atf::XmlElement::encodeAsXmlElement("pausingAfterNumHands", pausingAfterNumHands, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tableId"))
			{
				tableId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("pausingFrom"))
			{
				Atf::AtfTempl<CommSrvTime>::FromXmlString(_value, pausingFrom);
			}
			else if (_element.equals("pausingTo"))
			{
				Atf::AtfTempl<CommSrvTime>::FromXmlString(_value, pausingTo);
			}
			else if (_element.equals("pausingAfterNumHands"))
			{
				pausingAfterNumHands = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT64(tableId);
	_msg.composeSrvTime(pausingFrom);
	_msg.composeSrvTime(pausingTo);
	_msg.composeUINT32(pausingAfterNumHands);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(tableId);
	_parser.parseSrvTime(pausingFrom);
	_parser.parseSrvTime(pausingTo);
	_parser.parseUINT32(pausingAfterNumHands);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tableId", tableId);
	_jsonstr.compose("pausingFrom", pausingFrom);
	_jsonstr.compose("pausingTo", pausingTo);
	_jsonstr.compose("pausingAfterNumHands", pausingAfterNumHands);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tableId", tableId);
	_jparser.parseByNameThrow("pausingFrom", pausingFrom);
	_jparser.parseByNameThrow("pausingTo", pausingTo);
	_jparser.parseByNameThrow("pausingAfterNumHands", pausingAfterNumHands);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT64 tableId; _jparser.validateByNameThrow("tableId", tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	CommSrvTime pausingFrom; _jparser.validateByNameThrow("pausingFrom", pausingFrom);
	AtfValidator::validateSrvDateTime(_descr, "pausingFrom", pausingFrom, _checker, __FILE__, __LINE__);
	CommSrvTime pausingTo; _jparser.validateByNameThrow("pausingTo", pausingTo);
	AtfValidator::validateSrvDateTime(_descr, "pausingTo", pausingTo, _checker, __FILE__, __LINE__);
	UINT32 pausingAfterNumHands; _jparser.validateByNameThrow("pausingAfterNumHands", pausingAfterNumHands);
	AtfValidator::validateInt(_descr, "pausingAfterNumHands", pausingAfterNumHands, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT64 tableId; _parser.parseUINT64(tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	CommSrvTime pausingFrom; _parser.parseSrvTime(pausingFrom);
	AtfValidator::validateSrvDateTime(_descr, "pausingFrom", pausingFrom, _checker, __FILE__, __LINE__);
	CommSrvTime pausingTo; _parser.parseSrvTime(pausingTo);
	AtfValidator::validateSrvDateTime(_descr, "pausingTo", pausingTo, _checker, __FILE__, __LINE__);
	UINT32 pausingAfterNumHands; _parser.parseUINT32(pausingAfterNumHands);
	AtfValidator::validateInt(_descr, "pausingAfterNumHands", pausingAfterNumHands, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::clear()
{
	user.clear();
	newCode = true;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::equals(const Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION& _o) const
{
	return Atf::atfPStringEquals(user, _o.user) &&
		newCode == _o.newCode;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_RESEND_MOBILE_VALIDATION != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_RESEND_MOBILE_VALIDATION).append(")");
	_buf.append(',');
	_buf.append("user=");
	_buf.append(user);
	_buf.append(',');
	_buf.append("newCode=");
	_buf.appendUint(newCode);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_RESEND_MOBILE_VALIDATION).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("user", user, _buf);
	Atf::XmlElement::encodeAsXmlElement("newCode", newCode, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("user"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, user)) return false;
			}
			else if (_element.equals("newCode"))
			{
				newCode = (*_value.ptr() == '1');
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(user);
	_msg.composeBOOL(newCode);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(user);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(newCode);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("user", user);
	_jsonstr.compose("newCode", newCode);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("user", user);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("newCode", newCode);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_RESEND_MOBILE_VALIDATION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString user; _jparser.validateByNameThrow("user", user);
	AtfValidator::validateInt(_descr, "user", user.length(), _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	bool newCode; _jparser.validateByNameThrow("newCode", newCode);
	AtfValidator::validateInt(_descr, "newCode", newCode, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_RESEND_MOBILE_VALIDATION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "user"); size_t szUser = strlen(_dummy);
	AtfValidator::validateInt(_descr, "user", szUser, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool newCode; _parser.parseBOOL(newCode);
	AtfValidator::validateInt(_descr, "newCode", newCode, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::equals(const Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::clear()
{
	i18nMsg.clear();
	msgFlags = 0;
	flags = 0;
	sites = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::equals(const Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING& _o) const
{
	return i18nMsg.equals(_o.i18nMsg) &&
		msgFlags == _o.msgFlags &&
		flags == _o.flags &&
		sites == _o.sites;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING).append(")");
	_buf.append(',');
	_buf.append("i18nMsg=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, i18nMsg);
	_buf.append(',');
	_buf.append("msgFlags=");
	_buf.appendUint(msgFlags);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("sites=");
	_buf.appendUint(sites);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "i18nMsg", i18nMsg);
	Atf::XmlElement::encodeAsXmlElement("msgFlags", msgFlags, _buf);
	Atf::XmlElement::encodeAsXmlElement("flags", flags, _buf);
	Atf::XmlElement::encodeAsXmlElement("sites", sites, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("i18nMsg"))
			{
				Atf::AtfTempl<I18nPString>::FromXmlString(_value, i18nMsg);
			}
			else if (_element.equals("msgFlags"))
			{
				msgFlags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("flags"))
			{
				flags = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("sites"))
			{
				sites = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	i18nMsg.compose(_msg);
	_msg.composeUINT32(msgFlags);
	_msg.composeBYTE(flags);
	_msg.composeUINT32(sites);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::parseMsg(CommMsgParser& _parser)
{
	i18nMsg.parse(_parser);
	_parser.parseUINT32(msgFlags);
	_parser.parseBYTE(flags);
	_parser.parseUINT32(sites);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("i18nMsg", i18nMsg);
	_jsonstr.compose("msgFlags", msgFlags);
	_jsonstr.compose("flags", flags);
	_jsonstr.compose("sites", sites);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("i18nMsg", i18nMsg);
	_jparser.parseByNameThrow("msgFlags", msgFlags);
	_jparser.parseByNameThrow("flags", flags);
	_jparser.parseByNameThrow("sites", sites);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	I18nPString i18nMsg; _jparser.validateByNameThrow("i18nMsg", i18nMsg);
	UINT32 msgFlags; _jparser.validateByNameThrow("msgFlags", msgFlags);
	AtfValidator::validateInt(_descr, "msgFlags", msgFlags, _checker, __FILE__, __LINE__);
	BYTE flags; _jparser.validateByNameThrow("flags", flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT32 sites; _jparser.validateByNameThrow("sites", sites);
	AtfValidator::validateInt(_descr, "sites", sites, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	I18nPString i18nMsg; i18nMsg.parse(_parser);
	UINT32 msgFlags; _parser.parseUINT32(msgFlags);
	AtfValidator::validateInt(_descr, "msgFlags", msgFlags, _checker, __FILE__, __LINE__);
	BYTE flags; _parser.parseBYTE(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT32 sites; _parser.parseUINT32(sites);
	AtfValidator::validateInt(_descr, "sites", sites, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::clear()
{
	i18nMsg.clear();
	msgFlags = 0;
	flags = 0;
	sites = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING& _o) const
{
	return i18nMsg.equals(_o.i18nMsg) &&
		msgFlags == _o.msgFlags &&
		flags == _o.flags &&
		sites == _o.sites;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING).append(")");
	_buf.append(',');
	_buf.append("i18nMsg=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, i18nMsg);
	_buf.append(',');
	_buf.append("msgFlags=");
	_buf.appendUint(msgFlags);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("sites=");
	_buf.appendUint(sites);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "i18nMsg", i18nMsg);
	Atf::XmlElement::encodeAsXmlElement("msgFlags", msgFlags, _buf);
	Atf::XmlElement::encodeAsXmlElement("flags", flags, _buf);
	Atf::XmlElement::encodeAsXmlElement("sites", sites, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("i18nMsg"))
			{
				Atf::AtfTempl<I18nPString>::FromXmlString(_value, i18nMsg);
			}
			else if (_element.equals("msgFlags"))
			{
				msgFlags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("flags"))
			{
				flags = (BYTE)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("sites"))
			{
				sites = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	i18nMsg.compose(_msg);
	_msg.composeUINT32(msgFlags);
	_msg.composeBYTE(flags);
	_msg.composeUINT32(sites);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::parseMsg(CommMsgParser& _parser)
{
	i18nMsg.parse(_parser);
	_parser.parseUINT32(msgFlags);
	_parser.parseBYTE(flags);
	_parser.parseUINT32(sites);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("i18nMsg", i18nMsg);
	_jsonstr.compose("msgFlags", msgFlags);
	_jsonstr.compose("flags", flags);
	_jsonstr.compose("sites", sites);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("i18nMsg", i18nMsg);
	_jparser.parseByNameThrow("msgFlags", msgFlags);
	_jparser.parseByNameThrow("flags", flags);
	_jparser.parseByNameThrow("sites", sites);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	I18nPString i18nMsg; _jparser.validateByNameThrow("i18nMsg", i18nMsg);
	UINT32 msgFlags; _jparser.validateByNameThrow("msgFlags", msgFlags);
	AtfValidator::validateInt(_descr, "msgFlags", msgFlags, _checker, __FILE__, __LINE__);
	BYTE flags; _jparser.validateByNameThrow("flags", flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT32 sites; _jparser.validateByNameThrow("sites", sites);
	AtfValidator::validateInt(_descr, "sites", sites, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	I18nPString i18nMsg; i18nMsg.parse(_parser);
	UINT32 msgFlags; _parser.parseUINT32(msgFlags);
	AtfValidator::validateInt(_descr, "msgFlags", msgFlags, _checker, __FILE__, __LINE__);
	BYTE flags; _parser.parseBYTE(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT32 sites; _parser.parseUINT32(sites);
	AtfValidator::validateInt(_descr, "sites", sites, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::clear()
{
	tournId = 0;
	cleanupAllocated = false;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN& _o) const
{
	return tournId == _o.tournId &&
		cleanupAllocated == _o.cleanupAllocated;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN).append(")");
	_buf.append(',');
	_buf.append("tournId=");
	_buf.appendUint(tournId);
	_buf.append(',');
	_buf.append("cleanupAllocated=");
	_buf.appendUint(cleanupAllocated);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tournId", tournId, _buf);
	Atf::XmlElement::encodeAsXmlElement("cleanupAllocated", cleanupAllocated, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournId"))
			{
				tournId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("cleanupAllocated"))
			{
				cleanupAllocated = (*_value.ptr() == '1');
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(tournId);
	_msg.composeBOOL(cleanupAllocated);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(tournId);
	_parser.parseBOOL(cleanupAllocated);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournId", tournId);
	_jsonstr.compose("cleanupAllocated", cleanupAllocated);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournId", tournId);
	_jparser.parseByNameThrow("cleanupAllocated", cleanupAllocated);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournId; _jparser.validateByNameThrow("tournId", tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	bool cleanupAllocated; _jparser.validateByNameThrow("cleanupAllocated", cleanupAllocated);
	AtfValidator::validateInt(_descr, "cleanupAllocated", cleanupAllocated, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 tournId; _parser.parseUINT32(tournId);
	AtfValidator::validateInt(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	bool cleanupAllocated; _parser.parseBOOL(cleanupAllocated);
	AtfValidator::validateInt(_descr, "cleanupAllocated", cleanupAllocated, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::clear()
{
	blitzName.clear();
	creditStuckUsers = false;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ& _o) const
{
	return Atf::atfPStringEquals(blitzName, _o.blitzName) &&
		creditStuckUsers == _o.creditStuckUsers;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ).append(")");
	_buf.append(',');
	_buf.append("blitzName=");
	_buf.append(blitzName);
	_buf.append(',');
	_buf.append("creditStuckUsers=");
	_buf.appendUint(creditStuckUsers);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("blitzName", blitzName, _buf);
	Atf::XmlElement::encodeAsXmlElement("creditStuckUsers", creditStuckUsers, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("blitzName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, blitzName)) return false;
			}
			else if (_element.equals("creditStuckUsers"))
			{
				creditStuckUsers = (*_value.ptr() == '1');
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(blitzName);
	_msg.composeBOOL(creditStuckUsers);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(blitzName);
	_parser.parseBOOL(creditStuckUsers);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("blitzName", blitzName);
	_jsonstr.compose("creditStuckUsers", creditStuckUsers);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("blitzName", blitzName);
	_jparser.parseByNameThrow("creditStuckUsers", creditStuckUsers);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString blitzName; _jparser.validateByNameThrow("blitzName", blitzName);
	AtfValidator::validateInt(_descr, "blitzName", blitzName.length(), _checker, __FILE__, __LINE__);
	bool creditStuckUsers; _jparser.validateByNameThrow("creditStuckUsers", creditStuckUsers);
	AtfValidator::validateInt(_descr, "creditStuckUsers", creditStuckUsers, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "blitzName"); size_t szBlitzName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "blitzName", szBlitzName, _checker, __FILE__, __LINE__);
	bool creditStuckUsers; _parser.parseBOOL(creditStuckUsers);
	AtfValidator::validateInt(_descr, "creditStuckUsers", creditStuckUsers, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::clear()
{
	userId.clear();
	installId.clear();
	validate = false;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::equals(const Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID& _o) const
{
	return Atf::atfPStringEquals(userId, _o.userId) &&
		Atf::atfPStringEquals(installId, _o.installId) &&
		validate == _o.validate;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MANAGE_INSTALLID != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MANAGE_INSTALLID).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("installId=");
	_buf.append(installId);
	_buf.append(',');
	_buf.append("validate=");
	_buf.appendUint(validate);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MANAGE_INSTALLID).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	Atf::XmlElement::encodeAsXmlElement("installId", installId, _buf);
	Atf::XmlElement::encodeAsXmlElement("validate", validate, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("userId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
			}
			else if (_element.equals("installId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, installId)) return false;
			}
			else if (_element.equals("validate"))
			{
				validate = (*_value.ptr() == '1');
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userId);
	_msg.composeString(installId);
	_msg.composeBOOL(validate);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseStringP(installId);
	_parser.parseBOOL(validate);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("installId", installId);
	_jsonstr.compose("validate", validate);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("installId", installId);
	_jparser.parseByNameThrow("validate", validate);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MANAGE_INSTALLID";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
	PString installId; _jparser.validateByNameThrow("installId", installId);
	AtfValidator::validateInt(_descr, "installId", installId.length(), _checker, __FILE__, __LINE__);
	bool validate; _jparser.validateByNameThrow("validate", validate);
	AtfValidator::validateInt(_descr, "validate", validate, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MANAGE_INSTALLID";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "installId"); size_t szInstallId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "installId", szInstallId, _checker, __FILE__, __LINE__);
	bool validate; _parser.parseBOOL(validate);
	AtfValidator::validateInt(_descr, "validate", validate, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::clear()
{
	groupName.clear();
	type = 0;
	restart = false;
	force = false;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::equals(const Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM& _o) const
{
	return Atf::atfPStringEquals(groupName, _o.groupName) &&
		type == _o.type &&
		restart == _o.restart &&
		force == _o.force;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_SHUTDOWN_TGM != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_SHUTDOWN_TGM).append(")");
	_buf.append(',');
	_buf.append("groupName=");
	_buf.append(groupName);
	_buf.append(',');
	_buf.append("type=");
	_buf.appendUint(type);
	_buf.append(',');
	_buf.append("restart=");
	_buf.appendUint(restart);
	_buf.append(',');
	_buf.append("force=");
	_buf.appendUint(force);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_SHUTDOWN_TGM).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("groupName", groupName, _buf);
	Atf::XmlElement::encodeAsXmlElement("type", type, _buf);
	Atf::XmlElement::encodeAsXmlElement("restart", restart, _buf);
	Atf::XmlElement::encodeAsXmlElement("force", force, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("groupName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, groupName)) return false;
			}
			else if (_element.equals("type"))
			{
				type = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("restart"))
			{
				restart = (*_value.ptr() == '1');
			}
			else if (_element.equals("force"))
			{
				force = (*_value.ptr() == '1');
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(groupName);
	_msg.composeUINT32(type);
	_msg.composeBOOL(restart);
	_msg.composeBOOL(force);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(groupName);
	_parser.parseUINT32(type);
	_parser.parseBOOL(restart);
	_parser.parseBOOL(force);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("groupName", groupName);
	_jsonstr.compose("type", type);
	_jsonstr.compose("restart", restart);
	_jsonstr.compose("force", force);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("groupName", groupName);
	_jparser.parseByNameThrow("type", type);
	_jparser.parseByNameThrow("restart", restart);
	_jparser.parseByNameThrow("force", force);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHUTDOWN_TGM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString groupName; _jparser.validateByNameThrow("groupName", groupName);
	AtfValidator::validateInt(_descr, "groupName", groupName.length(), _checker, __FILE__, __LINE__);
	UINT32 type; _jparser.validateByNameThrow("type", type);
	AtfValidator::validateInt(_descr, "type", type, _checker, __FILE__, __LINE__);
	bool restart; _jparser.validateByNameThrow("restart", restart);
	AtfValidator::validateInt(_descr, "restart", restart, _checker, __FILE__, __LINE__);
	bool force; _jparser.validateByNameThrow("force", force);
	AtfValidator::validateInt(_descr, "force", force, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHUTDOWN_TGM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "groupName"); size_t szGroupName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "groupName", szGroupName, _checker, __FILE__, __LINE__);
	UINT32 type; _parser.parseUINT32(type);
	AtfValidator::validateInt(_descr, "type", type, _checker, __FILE__, __LINE__);
	bool restart; _parser.parseBOOL(restart);
	AtfValidator::validateInt(_descr, "restart", restart, _checker, __FILE__, __LINE__);
	bool force; _parser.parseBOOL(force);
	AtfValidator::validateInt(_descr, "force", force, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::equals(const Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::clear()
{
	groupName.clear();
	type = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::equals(const Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM& _o) const
{
	return Atf::atfPStringEquals(groupName, _o.groupName) &&
		type == _o.type;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_RESTORE_TGM != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_RESTORE_TGM).append(")");
	_buf.append(',');
	_buf.append("groupName=");
	_buf.append(groupName);
	_buf.append(',');
	_buf.append("type=");
	_buf.appendUint(type);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_RESTORE_TGM).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("groupName", groupName, _buf);
	Atf::XmlElement::encodeAsXmlElement("type", type, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("groupName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, groupName)) return false;
			}
			else if (_element.equals("type"))
			{
				type = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(groupName);
	_msg.composeUINT32(type);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(groupName);
	_parser.parseUINT32(type);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("groupName", groupName);
	_jsonstr.compose("type", type);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("groupName", groupName);
	_jparser.parseByNameThrow("type", type);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_RESTORE_TGM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString groupName; _jparser.validateByNameThrow("groupName", groupName);
	AtfValidator::validateInt(_descr, "groupName", groupName.length(), _checker, __FILE__, __LINE__);
	UINT32 type; _jparser.validateByNameThrow("type", type);
	AtfValidator::validateInt(_descr, "type", type, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_RESTORE_TGM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "groupName"); size_t szGroupName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "groupName", szGroupName, _checker, __FILE__, __LINE__);
	UINT32 type; _parser.parseUINT32(type);
	AtfValidator::validateInt(_descr, "type", type, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::equals(const Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::clear()
{
	tableName.clear();
	totalAmount = 0;
	userId.clear();
	amount = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::equals(const Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY& _o) const
{
	return Atf::atfPStringEquals(tableName, _o.tableName) &&
		totalAmount == _o.totalAmount &&
		Atf::atfPStringEquals(userId, _o.userId) &&
		amount == _o.amount;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY).append(")");
	_buf.append(',');
	_buf.append("tableName=");
	_buf.append(tableName);
	_buf.append(',');
	_buf.append("totalAmount=");
	_buf.appendUint(totalAmount);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("amount=");
	_buf.appendUint(amount);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tableName", tableName, _buf);
	Atf::XmlElement::encodeAsXmlElement("totalAmount", totalAmount, _buf);
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	Atf::XmlElement::encodeAsXmlElement("amount", amount, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tableName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, tableName)) return false;
			}
			else if (_element.equals("totalAmount"))
			{
				totalAmount = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("userId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
			}
			else if (_element.equals("amount"))
			{
				amount = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(tableName);
	_msg.composeUINT32(totalAmount);
	_msg.composeString(userId);
	_msg.composeUINT32(amount);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(tableName);
	_parser.parseUINT32(totalAmount);
	_parser.parseStringP(userId);
	_parser.parseUINT32(amount);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tableName", tableName);
	_jsonstr.compose("totalAmount", totalAmount);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("amount", amount);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tableName", tableName);
	_jparser.parseByNameThrow("totalAmount", totalAmount);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("amount", amount);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString tableName; _jparser.validateByNameThrow("tableName", tableName);
	AtfValidator::validateInt(_descr, "tableName", tableName.length(), _checker, __FILE__, __LINE__);
	UINT32 totalAmount; _jparser.validateByNameThrow("totalAmount", totalAmount);
	AtfValidator::validateInt(_descr, "totalAmount", totalAmount, _checker, __FILE__, __LINE__);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
	UINT32 amount; _jparser.validateByNameThrow("amount", amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "tableName"); size_t szTableName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "tableName", szTableName, _checker, __FILE__, __LINE__);
	UINT32 totalAmount; _parser.parseUINT32(totalAmount);
	AtfValidator::validateInt(_descr, "totalAmount", totalAmount, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	UINT32 amount; _parser.parseUINT32(amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::equals(const Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::clear()
{
	tableName.clear();
	totalAmount = 0;
	tableId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::equals(const Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY& _o) const
{
	return Atf::atfPStringEquals(tableName, _o.tableName) &&
		totalAmount == _o.totalAmount &&
		tableId == _o.tableId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY).append(")");
	_buf.append(',');
	_buf.append("tableName=");
	_buf.append(tableName);
	_buf.append(',');
	_buf.append("totalAmount=");
	_buf.appendUint(totalAmount);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tableName", tableName, _buf);
	Atf::XmlElement::encodeAsXmlElement("totalAmount", totalAmount, _buf);
	Atf::XmlElement::encodeAsXmlElement("tableId", tableId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tableName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, tableName)) return false;
			}
			else if (_element.equals("totalAmount"))
			{
				totalAmount = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("tableId"))
			{
				tableId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(tableName);
	_msg.composeUINT32(totalAmount);
	_msg.composeUINT64(tableId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(tableName);
	_parser.parseUINT32(totalAmount);
	_parser.parseUINT64(tableId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tableName", tableName);
	_jsonstr.compose("totalAmount", totalAmount);
	_jsonstr.compose("tableId", tableId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tableName", tableName);
	_jparser.parseByNameThrow("totalAmount", totalAmount);
	_jparser.parseByNameThrow("tableId", tableId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString tableName; _jparser.validateByNameThrow("tableName", tableName);
	AtfValidator::validateInt(_descr, "tableName", tableName.length(), _checker, __FILE__, __LINE__);
	UINT32 totalAmount; _jparser.validateByNameThrow("totalAmount", totalAmount);
	AtfValidator::validateInt(_descr, "totalAmount", totalAmount, _checker, __FILE__, __LINE__);
	UINT64 tableId; _jparser.validateByNameThrow("tableId", tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "tableName"); size_t szTableName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "tableName", szTableName, _checker, __FILE__, __LINE__);
	UINT32 totalAmount; _parser.parseUINT32(totalAmount);
	AtfValidator::validateInt(_descr, "totalAmount", totalAmount, _checker, __FILE__, __LINE__);
	UINT64 tableId; _parser.parseUINT64(tableId);
	AtfValidator::validateUint(_descr, "tableId", tableId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::equals(const Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::clear()
{
	tournFlags = 0;
	siteId = 0;
	regular = false;
	guarateed = false;
	minutes = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS& _o) const
{
	return tournFlags == _o.tournFlags &&
		siteId == _o.siteId &&
		regular == _o.regular &&
		guarateed == _o.guarateed &&
		minutes == _o.minutes;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS).append(")");
	_buf.append(',');
	_buf.append("tournFlags=");
	_buf.appendUint(tournFlags);
	_buf.append(',');
	_buf.append("siteId=");
	_buf.appendUint(siteId);
	_buf.append(',');
	_buf.append("regular=");
	_buf.appendUint(regular);
	_buf.append(',');
	_buf.append("guarateed=");
	_buf.appendUint(guarateed);
	_buf.append(',');
	_buf.append("minutes=");
	_buf.appendInt(minutes);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tournFlags", tournFlags, _buf);
	Atf::XmlElement::encodeAsXmlElement("siteId", siteId, _buf);
	Atf::XmlElement::encodeAsXmlElement("regular", regular, _buf);
	Atf::XmlElement::encodeAsXmlElement("guarateed", guarateed, _buf);
	Atf::XmlElement::encodeAsXmlElement("minutes", minutes, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournFlags"))
			{
				tournFlags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("siteId"))
			{
				siteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("regular"))
			{
				regular = (*_value.ptr() == '1');
			}
			else if (_element.equals("guarateed"))
			{
				guarateed = (*_value.ptr() == '1');
			}
			else if (_element.equals("minutes"))
			{
				minutes = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(tournFlags);
	_msg.composeUINT32(siteId);
	_msg.composeBOOL(regular);
	_msg.composeBOOL(guarateed);
	_msg.composeINT32(minutes);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(tournFlags);
	_parser.parseUINT32(siteId);
	_parser.parseBOOL(regular);
	_parser.parseBOOL(guarateed);
	_parser.parseINT32(minutes);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournFlags", tournFlags);
	_jsonstr.compose("siteId", siteId);
	_jsonstr.compose("regular", regular);
	_jsonstr.compose("guarateed", guarateed);
	_jsonstr.compose("minutes", minutes);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournFlags", tournFlags);
	_jparser.parseByNameThrow("siteId", siteId);
	_jparser.parseByNameThrow("regular", regular);
	_jparser.parseByNameThrow("guarateed", guarateed);
	_jparser.parseByNameThrow("minutes", minutes);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournFlags; _jparser.validateByNameThrow("tournFlags", tournFlags);
	AtfValidator::validateInt(_descr, "tournFlags", tournFlags, _checker, __FILE__, __LINE__);
	UINT32 siteId; _jparser.validateByNameThrow("siteId", siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	bool regular; _jparser.validateByNameThrow("regular", regular);
	AtfValidator::validateInt(_descr, "regular", regular, _checker, __FILE__, __LINE__);
	bool guarateed; _jparser.validateByNameThrow("guarateed", guarateed);
	AtfValidator::validateInt(_descr, "guarateed", guarateed, _checker, __FILE__, __LINE__);
	INT32 minutes; _jparser.validateByNameThrow("minutes", minutes);
	AtfValidator::validateInt(_descr, "minutes", minutes, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 tournFlags; _parser.parseUINT32(tournFlags);
	AtfValidator::validateInt(_descr, "tournFlags", tournFlags, _checker, __FILE__, __LINE__);
	UINT32 siteId; _parser.parseUINT32(siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	bool regular; _parser.parseBOOL(regular);
	AtfValidator::validateInt(_descr, "regular", regular, _checker, __FILE__, __LINE__);
	bool guarateed; _parser.parseBOOL(guarateed);
	AtfValidator::validateInt(_descr, "guarateed", guarateed, _checker, __FILE__, __LINE__);
	INT32 minutes; _parser.parseINT32(minutes);
	AtfValidator::validateInt(_descr, "minutes", minutes, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	counter = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		counter == _o.counter;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("counter=");
		_buf.appendUint(counter);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("counter", counter, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("counter"))
			{
				counter = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeUINT32(counter);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseUINT32(counter);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("counter", counter);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("counter", counter);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 counter; _jparser.validateByNameThrow("counter", counter);
		AtfValidator::validateInt(_descr, "counter", counter, _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 counter; _parser.parseUINT32(counter);
		AtfValidator::validateInt(_descr, "counter", counter, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::clear()
{
	tournFlags = 0;
	siteId = 0;
	regular = false;
	guarateed = false;
	minutes = 0;
	adminMsg.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::equals(const Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS& _o) const
{
	return tournFlags == _o.tournFlags &&
		siteId == _o.siteId &&
		regular == _o.regular &&
		guarateed == _o.guarateed &&
		minutes == _o.minutes &&
		Atf::atfPStringEquals(adminMsg, _o.adminMsg);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS).append(")");
	_buf.append(',');
	_buf.append("tournFlags=");
	_buf.appendUint(tournFlags);
	_buf.append(',');
	_buf.append("siteId=");
	_buf.appendUint(siteId);
	_buf.append(',');
	_buf.append("regular=");
	_buf.appendUint(regular);
	_buf.append(',');
	_buf.append("guarateed=");
	_buf.appendUint(guarateed);
	_buf.append(',');
	_buf.append("minutes=");
	_buf.appendInt(minutes);
	_buf.append(',');
	_buf.append("adminMsg=");
	_buf.append(adminMsg);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tournFlags", tournFlags, _buf);
	Atf::XmlElement::encodeAsXmlElement("siteId", siteId, _buf);
	Atf::XmlElement::encodeAsXmlElement("regular", regular, _buf);
	Atf::XmlElement::encodeAsXmlElement("guarateed", guarateed, _buf);
	Atf::XmlElement::encodeAsXmlElement("minutes", minutes, _buf);
	Atf::XmlElement::encodeAsXmlElement("adminMsg", adminMsg, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournFlags"))
			{
				tournFlags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("siteId"))
			{
				siteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("regular"))
			{
				regular = (*_value.ptr() == '1');
			}
			else if (_element.equals("guarateed"))
			{
				guarateed = (*_value.ptr() == '1');
			}
			else if (_element.equals("minutes"))
			{
				minutes = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("adminMsg"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, adminMsg)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(tournFlags);
	_msg.composeUINT32(siteId);
	_msg.composeBOOL(regular);
	_msg.composeBOOL(guarateed);
	_msg.composeINT32(minutes);
	_msg.composeString(adminMsg);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(tournFlags);
	_parser.parseUINT32(siteId);
	_parser.parseBOOL(regular);
	_parser.parseBOOL(guarateed);
	_parser.parseINT32(minutes);
	_parser.parseStringP(adminMsg);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournFlags", tournFlags);
	_jsonstr.compose("siteId", siteId);
	_jsonstr.compose("regular", regular);
	_jsonstr.compose("guarateed", guarateed);
	_jsonstr.compose("minutes", minutes);
	_jsonstr.compose("adminMsg", adminMsg);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournFlags", tournFlags);
	_jparser.parseByNameThrow("siteId", siteId);
	_jparser.parseByNameThrow("regular", regular);
	_jparser.parseByNameThrow("guarateed", guarateed);
	_jparser.parseByNameThrow("minutes", minutes);
	_jparser.parseByNameThrow("adminMsg", adminMsg);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournFlags; _jparser.validateByNameThrow("tournFlags", tournFlags);
	AtfValidator::validateInt(_descr, "tournFlags", tournFlags, _checker, __FILE__, __LINE__);
	UINT32 siteId; _jparser.validateByNameThrow("siteId", siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	bool regular; _jparser.validateByNameThrow("regular", regular);
	AtfValidator::validateInt(_descr, "regular", regular, _checker, __FILE__, __LINE__);
	bool guarateed; _jparser.validateByNameThrow("guarateed", guarateed);
	AtfValidator::validateInt(_descr, "guarateed", guarateed, _checker, __FILE__, __LINE__);
	INT32 minutes; _jparser.validateByNameThrow("minutes", minutes);
	AtfValidator::validateInt(_descr, "minutes", minutes, _checker, __FILE__, __LINE__);
	PString adminMsg; _jparser.validateByNameThrow("adminMsg", adminMsg);
	AtfValidator::validateInt(_descr, "adminMsg", adminMsg.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 tournFlags; _parser.parseUINT32(tournFlags);
	AtfValidator::validateInt(_descr, "tournFlags", tournFlags, _checker, __FILE__, __LINE__);
	UINT32 siteId; _parser.parseUINT32(siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	bool regular; _parser.parseBOOL(regular);
	AtfValidator::validateInt(_descr, "regular", regular, _checker, __FILE__, __LINE__);
	bool guarateed; _parser.parseBOOL(guarateed);
	AtfValidator::validateInt(_descr, "guarateed", guarateed, _checker, __FILE__, __LINE__);
	INT32 minutes; _parser.parseINT32(minutes);
	AtfValidator::validateInt(_descr, "minutes", minutes, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "adminMsg"); size_t szAdminMsg = strlen(_dummy);
	AtfValidator::validateInt(_descr, "adminMsg", szAdminMsg, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	counter = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		counter == _o.counter;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("counter=");
		_buf.appendUint(counter);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("counter", counter, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("counter"))
			{
				counter = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeUINT32(counter);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseUINT32(counter);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("counter", counter);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("counter", counter);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 counter; _jparser.validateByNameThrow("counter", counter);
		AtfValidator::validateInt(_descr, "counter", counter, _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 counter; _parser.parseUINT32(counter);
		AtfValidator::validateInt(_descr, "counter", counter, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::clear()
{
	tournFlags = 0;
	siteId = 0;
	regular = false;
	guarateed = false;
	minutesMin = 0;
	minutesMax = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::equals(const Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS& _o) const
{
	return tournFlags == _o.tournFlags &&
		siteId == _o.siteId &&
		regular == _o.regular &&
		guarateed == _o.guarateed &&
		minutesMin == _o.minutesMin &&
		minutesMax == _o.minutesMax;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS).append(")");
	_buf.append(',');
	_buf.append("tournFlags=");
	_buf.appendUint(tournFlags);
	_buf.append(',');
	_buf.append("siteId=");
	_buf.appendUint(siteId);
	_buf.append(',');
	_buf.append("regular=");
	_buf.appendUint(regular);
	_buf.append(',');
	_buf.append("guarateed=");
	_buf.appendUint(guarateed);
	_buf.append(',');
	_buf.append("minutesMin=");
	_buf.appendInt(minutesMin);
	_buf.append(',');
	_buf.append("minutesMax=");
	_buf.appendInt(minutesMax);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tournFlags", tournFlags, _buf);
	Atf::XmlElement::encodeAsXmlElement("siteId", siteId, _buf);
	Atf::XmlElement::encodeAsXmlElement("regular", regular, _buf);
	Atf::XmlElement::encodeAsXmlElement("guarateed", guarateed, _buf);
	Atf::XmlElement::encodeAsXmlElement("minutesMin", minutesMin, _buf);
	Atf::XmlElement::encodeAsXmlElement("minutesMax", minutesMax, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournFlags"))
			{
				tournFlags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("siteId"))
			{
				siteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("regular"))
			{
				regular = (*_value.ptr() == '1');
			}
			else if (_element.equals("guarateed"))
			{
				guarateed = (*_value.ptr() == '1');
			}
			else if (_element.equals("minutesMin"))
			{
				minutesMin = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("minutesMax"))
			{
				minutesMax = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(tournFlags);
	_msg.composeUINT32(siteId);
	_msg.composeBOOL(regular);
	_msg.composeBOOL(guarateed);
	_msg.composeINT32(minutesMin);
	_msg.composeINT32(minutesMax);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(tournFlags);
	_parser.parseUINT32(siteId);
	_parser.parseBOOL(regular);
	_parser.parseBOOL(guarateed);
	_parser.parseINT32(minutesMin);
	_parser.parseINT32(minutesMax);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournFlags", tournFlags);
	_jsonstr.compose("siteId", siteId);
	_jsonstr.compose("regular", regular);
	_jsonstr.compose("guarateed", guarateed);
	_jsonstr.compose("minutesMin", minutesMin);
	_jsonstr.compose("minutesMax", minutesMax);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournFlags", tournFlags);
	_jparser.parseByNameThrow("siteId", siteId);
	_jparser.parseByNameThrow("regular", regular);
	_jparser.parseByNameThrow("guarateed", guarateed);
	_jparser.parseByNameThrow("minutesMin", minutesMin);
	_jparser.parseByNameThrow("minutesMax", minutesMax);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournFlags; _jparser.validateByNameThrow("tournFlags", tournFlags);
	AtfValidator::validateInt(_descr, "tournFlags", tournFlags, _checker, __FILE__, __LINE__);
	UINT32 siteId; _jparser.validateByNameThrow("siteId", siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	bool regular; _jparser.validateByNameThrow("regular", regular);
	AtfValidator::validateInt(_descr, "regular", regular, _checker, __FILE__, __LINE__);
	bool guarateed; _jparser.validateByNameThrow("guarateed", guarateed);
	AtfValidator::validateInt(_descr, "guarateed", guarateed, _checker, __FILE__, __LINE__);
	INT32 minutesMin; _jparser.validateByNameThrow("minutesMin", minutesMin);
	AtfValidator::validateInt(_descr, "minutesMin", minutesMin, _checker, __FILE__, __LINE__);
	INT32 minutesMax; _jparser.validateByNameThrow("minutesMax", minutesMax);
	AtfValidator::validateInt(_descr, "minutesMax", minutesMax, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 tournFlags; _parser.parseUINT32(tournFlags);
	AtfValidator::validateInt(_descr, "tournFlags", tournFlags, _checker, __FILE__, __LINE__);
	UINT32 siteId; _parser.parseUINT32(siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	bool regular; _parser.parseBOOL(regular);
	AtfValidator::validateInt(_descr, "regular", regular, _checker, __FILE__, __LINE__);
	bool guarateed; _parser.parseBOOL(guarateed);
	AtfValidator::validateInt(_descr, "guarateed", guarateed, _checker, __FILE__, __LINE__);
	INT32 minutesMin; _parser.parseINT32(minutesMin);
	AtfValidator::validateInt(_descr, "minutesMin", minutesMin, _checker, __FILE__, __LINE__);
	INT32 minutesMax; _parser.parseINT32(minutesMax);
	AtfValidator::validateInt(_descr, "minutesMax", minutesMax, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    UnhandledResurrectedTourn
//=================================================================

MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::UnhandledResurrectedTourn()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::clear()
{
	tournamentId = 0;
	name.clear();
	whenStart.setNull();
	isPlayMoney = false;
	status = 0;
	buyInPlusRake = 0;
	guaranteedPrizePool = 0;
	prizePoolToPublish = 0;
	tournSites = 0;
	currency.clear();
}

bool MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::equals(const UnhandledResurrectedTourn& _o) const
{
	return tournamentId == _o.tournamentId &&
		Atf::atfPStringEquals(name, _o.name) &&
		whenStart.equals(_o.whenStart) &&
		isPlayMoney == _o.isPlayMoney &&
		status == _o.status &&
		buyInPlusRake == _o.buyInPlusRake &&
		guaranteedPrizePool == _o.guaranteedPrizePool &&
		prizePoolToPublish == _o.prizePoolToPublish &&
		tournSites == _o.tournSites &&
		Atf::atfPStringEquals(currency, _o.currency);
}

const char *MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("tournamentId=");
	_buf.appendUint(tournamentId);
	_buf.append(',');
	_buf.append("name=");
	_buf.append(name);
	_buf.append(',');
	_buf.append("whenStart=");
	Atf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenStart);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("status=");
	_buf.appendUint(status);
	_buf.append(',');
	_buf.append("buyInPlusRake=");
	_buf.appendUint(buyInPlusRake);
	_buf.append(',');
	_buf.append("guaranteedPrizePool=");
	_buf.appendUint(guaranteedPrizePool);
	_buf.append(',');
	_buf.append("prizePoolToPublish=");
	_buf.appendUint(prizePoolToPublish);
	_buf.append(',');
	_buf.append("tournSites=");
	_buf.appendUint(tournSites);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("tournamentId", tournamentId, _buf);
	Atf::XmlElement::encodeAsXmlElement("name", name, _buf);
	Atf::AtfTempl<CommSrvTime>::ToXmlString(_buf, "whenStart", whenStart);
	Atf::XmlElement::encodeAsXmlElement("isPlayMoney", isPlayMoney, _buf);
	Atf::XmlElement::encodeAsXmlElement("status", status, _buf);
	Atf::XmlElement::encodeAsXmlElement("buyInPlusRake", buyInPlusRake, _buf);
	Atf::XmlElement::encodeAsXmlElement("guaranteedPrizePool", guaranteedPrizePool, _buf);
	Atf::XmlElement::encodeAsXmlElement("prizePoolToPublish", prizePoolToPublish, _buf);
	Atf::XmlElement::encodeAsXmlElement("tournSites", tournSites, _buf);
	Atf::XmlElement::encodeAsXmlElement("currency", currency, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("tournamentId"))
		{
			tournamentId = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("name"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, name)) return false;
		}
		else if (_element.equals("whenStart"))
		{
			Atf::AtfTempl<CommSrvTime>::FromXmlString(_value, whenStart);
		}
		else if (_element.equals("isPlayMoney"))
		{
			isPlayMoney = (*_value.ptr() == '1');
		}
		else if (_element.equals("status"))
		{
			status = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("buyInPlusRake"))
		{
			buyInPlusRake = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("guaranteedPrizePool"))
		{
			guaranteedPrizePool = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("prizePoolToPublish"))
		{
			prizePoolToPublish = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("tournSites"))
		{
			tournSites = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("currency"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, currency)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(tournamentId);
	_msg.composeString(name);
	_msg.composeSrvTime(whenStart);
	_msg.composeBOOL(isPlayMoney);
	_msg.composeUINT32(status);
	_msg.composeUINT32(buyInPlusRake);
	_msg.composeUINT32(guaranteedPrizePool);
	_msg.composeUINT32(prizePoolToPublish);
	_msg.composeUINT32(tournSites);
	_msg.composeString(currency);
}

void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(tournamentId);
	_parser.parseStringP(name);
	_parser.parseSrvTime(whenStart);
	_parser.parseBOOL(isPlayMoney);
	_parser.parseUINT32(status);
	_parser.parseUINT32(buyInPlusRake);
	_parser.parseUINT32(guaranteedPrizePool);
	_parser.parseUINT32(prizePoolToPublish);
	_parser.parseUINT32(tournSites);
	_parser.parseStringP(currency);
}

const char *MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournamentId", tournamentId);
	_jsonstr.compose("name", name);
	_jsonstr.compose("whenStart", whenStart);
	_jsonstr.compose("isPlayMoney", isPlayMoney);
	_jsonstr.compose("status", status);
	_jsonstr.compose("buyInPlusRake", buyInPlusRake);
	_jsonstr.compose("guaranteedPrizePool", guaranteedPrizePool);
	_jsonstr.compose("prizePoolToPublish", prizePoolToPublish);
	_jsonstr.compose("tournSites", tournSites);
	_jsonstr.compose("currency", currency);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournamentId", tournamentId);
	_jparser.parseByNameThrow("name", name);
	_jparser.parseByNameThrow("whenStart", whenStart);
	_jparser.parseByNameThrow("isPlayMoney", isPlayMoney);
	_jparser.parseByNameThrow("status", status);
	_jparser.parseByNameThrow("buyInPlusRake", buyInPlusRake);
	_jparser.parseByNameThrow("guaranteedPrizePool", guaranteedPrizePool);
	_jparser.parseByNameThrow("prizePoolToPublish", prizePoolToPublish);
	_jparser.parseByNameThrow("tournSites", tournSites);
	_jparser.parseByNameThrow("currency", currency);
}

/* static */ void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournamentId; _jparser.validateByNameThrow("tournamentId", tournamentId);
	AtfValidator::validateInt(_descr, "tournamentId", tournamentId, _checker, __FILE__, __LINE__);
	PString name; _jparser.validateByNameThrow("name", name);
	AtfValidator::validateInt(_descr, "name", name.length(), _checker, __FILE__, __LINE__);
	CommSrvTime whenStart; _jparser.validateByNameThrow("whenStart", whenStart);
	AtfValidator::validateSrvDateTime(_descr, "whenStart", whenStart, _checker, __FILE__, __LINE__);
	bool isPlayMoney; _jparser.validateByNameThrow("isPlayMoney", isPlayMoney);
	AtfValidator::validateInt(_descr, "isPlayMoney", isPlayMoney, _checker, __FILE__, __LINE__);
	UINT32 status; _jparser.validateByNameThrow("status", status);
	AtfValidator::validateInt(_descr, "status", status, _checker, __FILE__, __LINE__);
	UINT32 buyInPlusRake; _jparser.validateByNameThrow("buyInPlusRake", buyInPlusRake);
	AtfValidator::validateInt(_descr, "buyInPlusRake", buyInPlusRake, _checker, __FILE__, __LINE__);
	UINT32 guaranteedPrizePool; _jparser.validateByNameThrow("guaranteedPrizePool", guaranteedPrizePool);
	AtfValidator::validateInt(_descr, "guaranteedPrizePool", guaranteedPrizePool, _checker, __FILE__, __LINE__);
	UINT32 prizePoolToPublish; _jparser.validateByNameThrow("prizePoolToPublish", prizePoolToPublish);
	AtfValidator::validateInt(_descr, "prizePoolToPublish", prizePoolToPublish, _checker, __FILE__, __LINE__);
	UINT32 tournSites; _jparser.validateByNameThrow("tournSites", tournSites);
	AtfValidator::validateInt(_descr, "tournSites", tournSites, _checker, __FILE__, __LINE__);
	PString currency; _jparser.validateByNameThrow("currency", currency);
	AtfValidator::validateInt(_descr, "currency", currency.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT32 tournamentId; _parser.parseUINT32(tournamentId);
	AtfValidator::validateInt(_descr, "tournamentId", tournamentId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "name"); size_t szName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "name", szName, _checker, __FILE__, __LINE__);
	CommSrvTime whenStart; _parser.parseSrvTime(whenStart);
	AtfValidator::validateSrvDateTime(_descr, "whenStart", whenStart, _checker, __FILE__, __LINE__);
	bool isPlayMoney; _parser.parseBOOL(isPlayMoney);
	AtfValidator::validateInt(_descr, "isPlayMoney", isPlayMoney, _checker, __FILE__, __LINE__);
	UINT32 status; _parser.parseUINT32(status);
	AtfValidator::validateInt(_descr, "status", status, _checker, __FILE__, __LINE__);
	UINT32 buyInPlusRake; _parser.parseUINT32(buyInPlusRake);
	AtfValidator::validateInt(_descr, "buyInPlusRake", buyInPlusRake, _checker, __FILE__, __LINE__);
	UINT32 guaranteedPrizePool; _parser.parseUINT32(guaranteedPrizePool);
	AtfValidator::validateInt(_descr, "guaranteedPrizePool", guaranteedPrizePool, _checker, __FILE__, __LINE__);
	UINT32 prizePoolToPublish; _parser.parseUINT32(prizePoolToPublish);
	AtfValidator::validateInt(_descr, "prizePoolToPublish", prizePoolToPublish, _checker, __FILE__, __LINE__);
	UINT32 tournSites; _parser.parseUINT32(tournSites);
	AtfValidator::validateInt(_descr, "tournSites", tournSites, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "currency"); size_t szCurrency = strlen(_dummy);
	AtfValidator::validateInt(_descr, "currency", szCurrency, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	unhandledResurrectedTourn.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		unhandledResurrectedTourn.equals(_o.unhandledResurrectedTourn);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("unhandledResurrectedTourn=");
		unhandledResurrectedTourn.toTraceString(_buf);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		unhandledResurrectedTourn.toXmlString("unhandledResurrectedTourn", _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("unhandledResurrectedTourn"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UnhandledResurrectedTourn, 4 > >::FromXmlString(_value, unhandledResurrectedTourn)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		unhandledResurrectedTourn.composeMsg(_msg, _ignoreJSON);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		unhandledResurrectedTourn.parseMsg(_parser);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("unhandledResurrectedTourn", unhandledResurrectedTourn);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("unhandledResurrectedTourn", unhandledResurrectedTourn);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		Atf::AtfVectorBase< UnhandledResurrectedTourn > unhandledResurrectedTourn; _jparser.validateByNameThrow("unhandledResurrectedTourn", unhandledResurrectedTourn);
		AtfValidator::validateInt(_descr, "unhandledResurrectedTourn", unhandledResurrectedTourn.size(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szUnhandledResurrectedTourn = Atf::LAtfVector< UnhandledResurrectedTourn, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("unhandledResurrectedTourn"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "unhandledResurrectedTourn", szUnhandledResurrectedTourn, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::clear()
{
	tournFlags = 0;
	siteId = 0;
	regular = false;
	guarateed = false;
	minutesMin = 0;
	minutesMax = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::equals(const Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2& _o) const
{
	return tournFlags == _o.tournFlags &&
		siteId == _o.siteId &&
		regular == _o.regular &&
		guarateed == _o.guarateed &&
		minutesMin == _o.minutesMin &&
		minutesMax == _o.minutesMax;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2 != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2).append(")");
	_buf.append(',');
	_buf.append("tournFlags=");
	_buf.appendUint(tournFlags);
	_buf.append(',');
	_buf.append("siteId=");
	_buf.appendUint(siteId);
	_buf.append(',');
	_buf.append("regular=");
	_buf.appendUint(regular);
	_buf.append(',');
	_buf.append("guarateed=");
	_buf.appendUint(guarateed);
	_buf.append(',');
	_buf.append("minutesMin=");
	_buf.appendInt(minutesMin);
	_buf.append(',');
	_buf.append("minutesMax=");
	_buf.appendInt(minutesMax);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tournFlags", tournFlags, _buf);
	Atf::XmlElement::encodeAsXmlElement("siteId", siteId, _buf);
	Atf::XmlElement::encodeAsXmlElement("regular", regular, _buf);
	Atf::XmlElement::encodeAsXmlElement("guarateed", guarateed, _buf);
	Atf::XmlElement::encodeAsXmlElement("minutesMin", minutesMin, _buf);
	Atf::XmlElement::encodeAsXmlElement("minutesMax", minutesMax, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournFlags"))
			{
				tournFlags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("siteId"))
			{
				siteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("regular"))
			{
				regular = (*_value.ptr() == '1');
			}
			else if (_element.equals("guarateed"))
			{
				guarateed = (*_value.ptr() == '1');
			}
			else if (_element.equals("minutesMin"))
			{
				minutesMin = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("minutesMax"))
			{
				minutesMax = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(tournFlags);
	_msg.composeUINT32(siteId);
	_msg.composeBOOL(regular);
	_msg.composeBOOL(guarateed);
	_msg.composeINT32(minutesMin);
	_msg.composeINT32(minutesMax);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(tournFlags);
	_parser.parseUINT32(siteId);
	_parser.parseBOOL(regular);
	_parser.parseBOOL(guarateed);
	_parser.parseINT32(minutesMin);
	_parser.parseINT32(minutesMax);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournFlags", tournFlags);
	_jsonstr.compose("siteId", siteId);
	_jsonstr.compose("regular", regular);
	_jsonstr.compose("guarateed", guarateed);
	_jsonstr.compose("minutesMin", minutesMin);
	_jsonstr.compose("minutesMax", minutesMax);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournFlags", tournFlags);
	_jparser.parseByNameThrow("siteId", siteId);
	_jparser.parseByNameThrow("regular", regular);
	_jparser.parseByNameThrow("guarateed", guarateed);
	_jparser.parseByNameThrow("minutesMin", minutesMin);
	_jparser.parseByNameThrow("minutesMax", minutesMax);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournFlags; _jparser.validateByNameThrow("tournFlags", tournFlags);
	AtfValidator::validateInt(_descr, "tournFlags", tournFlags, _checker, __FILE__, __LINE__);
	UINT32 siteId; _jparser.validateByNameThrow("siteId", siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	bool regular; _jparser.validateByNameThrow("regular", regular);
	AtfValidator::validateInt(_descr, "regular", regular, _checker, __FILE__, __LINE__);
	bool guarateed; _jparser.validateByNameThrow("guarateed", guarateed);
	AtfValidator::validateInt(_descr, "guarateed", guarateed, _checker, __FILE__, __LINE__);
	INT32 minutesMin; _jparser.validateByNameThrow("minutesMin", minutesMin);
	AtfValidator::validateInt(_descr, "minutesMin", minutesMin, _checker, __FILE__, __LINE__);
	INT32 minutesMax; _jparser.validateByNameThrow("minutesMax", minutesMax);
	AtfValidator::validateInt(_descr, "minutesMax", minutesMax, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 tournFlags; _parser.parseUINT32(tournFlags);
	AtfValidator::validateInt(_descr, "tournFlags", tournFlags, _checker, __FILE__, __LINE__);
	UINT32 siteId; _parser.parseUINT32(siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	bool regular; _parser.parseBOOL(regular);
	AtfValidator::validateInt(_descr, "regular", regular, _checker, __FILE__, __LINE__);
	bool guarateed; _parser.parseBOOL(guarateed);
	AtfValidator::validateInt(_descr, "guarateed", guarateed, _checker, __FILE__, __LINE__);
	INT32 minutesMin; _parser.parseINT32(minutesMin);
	AtfValidator::validateInt(_descr, "minutesMin", minutesMin, _checker, __FILE__, __LINE__);
	INT32 minutesMax; _parser.parseINT32(minutesMax);
	AtfValidator::validateInt(_descr, "minutesMax", minutesMax, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    UnhandledResurrectedTourn2
//=================================================================

MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::UnhandledResurrectedTourn2()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::clear()
{
	tournamentId = 0;
	name.clear();
	whenStart.setNull();
	isPlayMoney = false;
	status = 0;
	buyInPlusRake = 0;
	guaranteedPrizePool = 0;
	prizePoolToPublish = 0;
	tournSites.clear();
	currency.clear();
}

bool MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::equals(const UnhandledResurrectedTourn2& _o) const
{
	return tournamentId == _o.tournamentId &&
		Atf::atfPStringEquals(name, _o.name) &&
		whenStart.equals(_o.whenStart) &&
		isPlayMoney == _o.isPlayMoney &&
		status == _o.status &&
		buyInPlusRake == _o.buyInPlusRake &&
		guaranteedPrizePool == _o.guaranteedPrizePool &&
		prizePoolToPublish == _o.prizePoolToPublish &&
		tournSites.equals(_o.tournSites) &&
		Atf::atfPStringEquals(currency, _o.currency);
}

const char *MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("tournamentId=");
	_buf.appendUint(tournamentId);
	_buf.append(',');
	_buf.append("name=");
	_buf.append(name);
	_buf.append(',');
	_buf.append("whenStart=");
	Atf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenStart);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("status=");
	_buf.appendUint(status);
	_buf.append(',');
	_buf.append("buyInPlusRake=");
	_buf.appendUint(buyInPlusRake);
	_buf.append(',');
	_buf.append("guaranteedPrizePool=");
	_buf.appendUint(guaranteedPrizePool);
	_buf.append(',');
	_buf.append("prizePoolToPublish=");
	_buf.appendUint(prizePoolToPublish);
	_buf.append(',');
	_buf.append("tournSites=");
	tournSites.toTraceString(_buf);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("tournamentId", tournamentId, _buf);
	Atf::XmlElement::encodeAsXmlElement("name", name, _buf);
	Atf::AtfTempl<CommSrvTime>::ToXmlString(_buf, "whenStart", whenStart);
	Atf::XmlElement::encodeAsXmlElement("isPlayMoney", isPlayMoney, _buf);
	Atf::XmlElement::encodeAsXmlElement("status", status, _buf);
	Atf::XmlElement::encodeAsXmlElement("buyInPlusRake", buyInPlusRake, _buf);
	Atf::XmlElement::encodeAsXmlElement("guaranteedPrizePool", guaranteedPrizePool, _buf);
	Atf::XmlElement::encodeAsXmlElement("prizePoolToPublish", prizePoolToPublish, _buf);
	tournSites.toXmlString("tournSites", _buf);
	Atf::XmlElement::encodeAsXmlElement("currency", currency, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("tournamentId"))
		{
			tournamentId = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("name"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, name)) return false;
		}
		else if (_element.equals("whenStart"))
		{
			Atf::AtfTempl<CommSrvTime>::FromXmlString(_value, whenStart);
		}
		else if (_element.equals("isPlayMoney"))
		{
			isPlayMoney = (*_value.ptr() == '1');
		}
		else if (_element.equals("status"))
		{
			status = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("buyInPlusRake"))
		{
			buyInPlusRake = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("guaranteedPrizePool"))
		{
			guaranteedPrizePool = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("prizePoolToPublish"))
		{
			prizePoolToPublish = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("tournSites"))
		{
			if(!Atf::AtfTempl< PSiteMask >::FromXmlString(_value, tournSites)) return false;
		}
		else if (_element.equals("currency"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, currency)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(UnhandledResurrectedTourn2())) // not empty
	{
		_body.composeUINT32(tournamentId);
		_body.composeString(name);
		_body.composeSrvTime(whenStart);
		_body.composeBOOL(isPlayMoney);
		_body.composeUINT32(status);
		_body.composeUINT32(buyInPlusRake);
		_body.composeUINT32(guaranteedPrizePool);
		_body.composeUINT32(prizePoolToPublish);
		tournSites.composeMsg(_body, _ignoreJSON);
		_body.composeString(currency);
	}

	_msg.composeMsgBody(_body);
}

void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(tournamentId);
	_parser0.parseStringP(name);
	_parser0.parseSrvTime(whenStart);
	_parser0.parseBOOL(isPlayMoney);
	_parser0.parseUINT32(status);
	_parser0.parseUINT32(buyInPlusRake);
	_parser0.parseUINT32(guaranteedPrizePool);
	_parser0.parseUINT32(prizePoolToPublish);
	tournSites.parseMsg(_parser0);
	_parser0.parseStringP(currency);
}

const char *MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournamentId", tournamentId);
	_jsonstr.compose("name", name);
	_jsonstr.compose("whenStart", whenStart);
	_jsonstr.compose("isPlayMoney", isPlayMoney);
	_jsonstr.compose("status", status);
	_jsonstr.compose("buyInPlusRake", buyInPlusRake);
	_jsonstr.compose("guaranteedPrizePool", guaranteedPrizePool);
	_jsonstr.compose("prizePoolToPublish", prizePoolToPublish);
	_jsonstr.compose("tournSites", tournSites);
	_jsonstr.compose("currency", currency);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournamentId", tournamentId);
	_jparser.parseByNameThrow("name", name);
	_jparser.parseByNameThrow("whenStart", whenStart);
	_jparser.parseByNameThrow("isPlayMoney", isPlayMoney);
	_jparser.parseByNameThrow("status", status);
	_jparser.parseByNameThrow("buyInPlusRake", buyInPlusRake);
	_jparser.parseByNameThrow("guaranteedPrizePool", guaranteedPrizePool);
	_jparser.parseByNameThrow("prizePoolToPublish", prizePoolToPublish);
	_jparser.parseByNameThrow("tournSites", tournSites);
	_jparser.parseByNameThrow("currency", currency);
}

/* static */ void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 tournamentId; _jparser.validateByNameThrow("tournamentId", tournamentId);
	AtfValidator::validateInt(_descr, "tournamentId", tournamentId, _checker, __FILE__, __LINE__);
	PString name; _jparser.validateByNameThrow("name", name);
	AtfValidator::validateInt(_descr, "name", name.length(), _checker, __FILE__, __LINE__);
	CommSrvTime whenStart; _jparser.validateByNameThrow("whenStart", whenStart);
	AtfValidator::validateSrvDateTime(_descr, "whenStart", whenStart, _checker, __FILE__, __LINE__);
	bool isPlayMoney; _jparser.validateByNameThrow("isPlayMoney", isPlayMoney);
	AtfValidator::validateInt(_descr, "isPlayMoney", isPlayMoney, _checker, __FILE__, __LINE__);
	UINT32 status; _jparser.validateByNameThrow("status", status);
	AtfValidator::validateInt(_descr, "status", status, _checker, __FILE__, __LINE__);
	UINT32 buyInPlusRake; _jparser.validateByNameThrow("buyInPlusRake", buyInPlusRake);
	AtfValidator::validateInt(_descr, "buyInPlusRake", buyInPlusRake, _checker, __FILE__, __LINE__);
	UINT32 guaranteedPrizePool; _jparser.validateByNameThrow("guaranteedPrizePool", guaranteedPrizePool);
	AtfValidator::validateInt(_descr, "guaranteedPrizePool", guaranteedPrizePool, _checker, __FILE__, __LINE__);
	UINT32 prizePoolToPublish; _jparser.validateByNameThrow("prizePoolToPublish", prizePoolToPublish);
	AtfValidator::validateInt(_descr, "prizePoolToPublish", prizePoolToPublish, _checker, __FILE__, __LINE__);
	PSiteMask tournSites; _jparser.validateByNameThrow("tournSites", tournSites);
	PString currency; _jparser.validateByNameThrow("currency", currency);
	AtfValidator::validateInt(_descr, "currency", currency.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::UnhandledResurrectedTourn2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	UINT32 tournamentId; _parser0.parseUINT32(tournamentId);
	AtfValidator::validateInt(_descr, "tournamentId", tournamentId, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "name"); size_t szName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "name", szName, _checker, __FILE__, __LINE__);
	CommSrvTime whenStart; _parser0.parseSrvTime(whenStart);
	AtfValidator::validateSrvDateTime(_descr, "whenStart", whenStart, _checker, __FILE__, __LINE__);
	bool isPlayMoney; _parser0.parseBOOL(isPlayMoney);
	AtfValidator::validateInt(_descr, "isPlayMoney", isPlayMoney, _checker, __FILE__, __LINE__);
	UINT32 status; _parser0.parseUINT32(status);
	AtfValidator::validateInt(_descr, "status", status, _checker, __FILE__, __LINE__);
	UINT32 buyInPlusRake; _parser0.parseUINT32(buyInPlusRake);
	AtfValidator::validateInt(_descr, "buyInPlusRake", buyInPlusRake, _checker, __FILE__, __LINE__);
	UINT32 guaranteedPrizePool; _parser0.parseUINT32(guaranteedPrizePool);
	AtfValidator::validateInt(_descr, "guaranteedPrizePool", guaranteedPrizePool, _checker, __FILE__, __LINE__);
	UINT32 prizePoolToPublish; _parser0.parseUINT32(prizePoolToPublish);
	AtfValidator::validateInt(_descr, "prizePoolToPublish", prizePoolToPublish, _checker, __FILE__, __LINE__);
	PString _descbuf;
	PSiteMask::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("tournSites"), _fieldsWithUnparsedContent);
	_parser0.parseStringN(_dummy, 0, "currency"); size_t szCurrency = strlen(_dummy);
	AtfValidator::validateInt(_descr, "currency", szCurrency, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	unhandledResurrectedTourn.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		unhandledResurrectedTourn.equals(_o.unhandledResurrectedTourn);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("unhandledResurrectedTourn=");
		unhandledResurrectedTourn.toTraceString(_buf);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		unhandledResurrectedTourn.toXmlString("unhandledResurrectedTourn", _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("unhandledResurrectedTourn"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UnhandledResurrectedTourn2, 4 > >::FromXmlString(_value, unhandledResurrectedTourn)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		unhandledResurrectedTourn.composeMsg(_msg, _ignoreJSON);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		unhandledResurrectedTourn.parseMsg(_parser);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("unhandledResurrectedTourn", unhandledResurrectedTourn);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("unhandledResurrectedTourn", unhandledResurrectedTourn);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		Atf::AtfVectorBase< UnhandledResurrectedTourn2 > unhandledResurrectedTourn; _jparser.validateByNameThrow("unhandledResurrectedTourn", unhandledResurrectedTourn);
		AtfValidator::validateInt(_descr, "unhandledResurrectedTourn", unhandledResurrectedTourn.size(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szUnhandledResurrectedTourn = Atf::LAtfVector< UnhandledResurrectedTourn2, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("unhandledResurrectedTourn"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "unhandledResurrectedTourn", szUnhandledResurrectedTourn, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::clear()
{
	tournIds.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::equals(const Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS& _o) const
{
	return tournIds.equals(_o.tournIds);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS).append(")");
	_buf.append(',');
	_buf.append("tournIds=");
	tournIds.toTraceString(_buf);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	tournIds.toXmlString("tournIds", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournIds"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT32, 4 > >::FromXmlString(_value, tournIds)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	tournIds.composeMsg(_msg, _ignoreJSON);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::parseMsg(CommMsgParser& _parser)
{
	tournIds.parseMsg(_parser);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournIds", tournIds);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournIds", tournIds);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	Atf::AtfVectorBase< UINT32 > tournIds; _jparser.validateByNameThrow("tournIds", tournIds);
	AtfValidator::validateInt(_descr, "tournIds", tournIds.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szTournIds = Atf::LAtfVector< UINT32, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tournIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "tournIds", szTournIds, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::clear()
{
	formula = 0;
	text.clear();
	tournIds.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::equals(const Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS& _o) const
{
	return formula == _o.formula &&
		Atf::atfPStringEquals(text, _o.text) &&
		tournIds.equals(_o.tournIds);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS).append(")");
	_buf.append(',');
	_buf.append("formula=");
	_buf.appendUint(formula);
	_buf.append(',');
	_buf.append("text=");
	_buf.append(text);
	_buf.append(',');
	_buf.append("tournIds=");
	tournIds.toTraceString(_buf);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("formula", formula, _buf);
	Atf::XmlElement::encodeAsXmlElement("text", text, _buf);
	tournIds.toXmlString("tournIds", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("formula"))
			{
				formula = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("text"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, text)) return false;
			}
			else if (_element.equals("tournIds"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT32, 4 > >::FromXmlString(_value, tournIds)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(formula);
	_msg.composeString(text);
	tournIds.composeMsg(_msg, _ignoreJSON);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(formula);
	_parser.parseStringP(text);
	tournIds.parseMsg(_parser);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("formula", formula);
	_jsonstr.compose("text", text);
	_jsonstr.compose("tournIds", tournIds);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("formula", formula);
	_jparser.parseByNameThrow("text", text);
	_jparser.parseByNameThrow("tournIds", tournIds);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 formula; _jparser.validateByNameThrow("formula", formula);
	AtfValidator::validateInt(_descr, "formula", formula, _checker, __FILE__, __LINE__);
	PString text; _jparser.validateByNameThrow("text", text);
	AtfValidator::validateInt(_descr, "text", text.length(), _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< UINT32 > tournIds; _jparser.validateByNameThrow("tournIds", tournIds);
	AtfValidator::validateInt(_descr, "tournIds", tournIds.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 formula; _parser.parseUINT32(formula);
	AtfValidator::validateInt(_descr, "formula", formula, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "text"); size_t szText = strlen(_dummy);
	AtfValidator::validateInt(_descr, "text", szText, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szTournIds = Atf::LAtfVector< UINT32, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tournIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "tournIds", szTournIds, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::clear()
{
	tournIds.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::equals(const Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS& _o) const
{
	return tournIds.equals(_o.tournIds);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS).append(")");
	_buf.append(',');
	_buf.append("tournIds=");
	tournIds.toTraceString(_buf);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	tournIds.toXmlString("tournIds", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournIds"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT32, 4 > >::FromXmlString(_value, tournIds)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	tournIds.composeMsg(_msg, _ignoreJSON);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::parseMsg(CommMsgParser& _parser)
{
	tournIds.parseMsg(_parser);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournIds", tournIds);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournIds", tournIds);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	Atf::AtfVectorBase< UINT32 > tournIds; _jparser.validateByNameThrow("tournIds", tournIds);
	AtfValidator::validateInt(_descr, "tournIds", tournIds.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szTournIds = Atf::LAtfVector< UINT32, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tournIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "tournIds", szTournIds, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::clear()
{
	userId.clear();
	setNotRemove = false;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::equals(const Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2& _o) const
{
	return Atf::atfPStringEquals(userId, _o.userId) &&
		setNotRemove == _o.setNotRemove;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2 != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("setNotRemove=");
	_buf.appendUint(setNotRemove);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	Atf::XmlElement::encodeAsXmlElement("setNotRemove", setNotRemove, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("userId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
			}
			else if (_element.equals("setNotRemove"))
			{
				setNotRemove = (*_value.ptr() == '1');
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userId);
	_msg.composeBOOL(setNotRemove);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseBOOL(setNotRemove);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("setNotRemove", setNotRemove);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("setNotRemove", setNotRemove);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
	bool setNotRemove; _jparser.validateByNameThrow("setNotRemove", setNotRemove);
	AtfValidator::validateInt(_descr, "setNotRemove", setNotRemove, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	bool setNotRemove; _parser.parseBOOL(setNotRemove);
	AtfValidator::validateInt(_descr, "setNotRemove", setNotRemove, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::clear()
{
	clientLicenseId = 0;
	country.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::equals(const Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY& _o) const
{
	return clientLicenseId == _o.clientLicenseId &&
		Atf::atfPStringEquals(country, _o.country);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY).append(")");
	_buf.append(',');
	_buf.append("clientLicenseId=");
	_buf.appendUint(clientLicenseId);
	_buf.append(',');
	_buf.append("country=");
	_buf.append(country);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("clientLicenseId", clientLicenseId, _buf);
	Atf::XmlElement::encodeAsXmlElement("country", country, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("clientLicenseId"))
			{
				clientLicenseId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("country"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, country)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(clientLicenseId);
	_msg.composeString(country);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(clientLicenseId);
	_parser.parseStringP(country);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("clientLicenseId", clientLicenseId);
	_jsonstr.compose("country", country);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("clientLicenseId", clientLicenseId);
	_jparser.parseByNameThrow("country", country);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 clientLicenseId; _jparser.validateByNameThrow("clientLicenseId", clientLicenseId);
	AtfValidator::validateInt(_descr, "clientLicenseId", clientLicenseId, _checker, __FILE__, __LINE__);
	PString country; _jparser.validateByNameThrow("country", country);
	AtfValidator::validateInt(_descr, "country", country.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 clientLicenseId; _parser.parseUINT32(clientLicenseId);
	AtfValidator::validateInt(_descr, "clientLicenseId", clientLicenseId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "country"); size_t szCountry = strlen(_dummy);
	AtfValidator::validateInt(_descr, "country", szCountry, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	visibilities.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		visibilities.equals(_o.visibilities);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("visibilities=");
		visibilities.toTraceString(_buf);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if ( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		visibilities.toXmlString("visibilities", _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("visibilities"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT64, 4 > >::FromXmlString(_value, visibilities)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errDescr);
	}
	else
	{
		visibilities.composeMsg(_msg, _ignoreJSON);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		visibilities.parseMsg(_parser);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if ( errCode != 0 )
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("visibilities", visibilities);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if ( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("visibilities", visibilities);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		Atf::AtfVectorBase< UINT64 > visibilities; _jparser.validateByNameThrow("visibilities", visibilities);
		AtfValidator::validateInt(_descr, "visibilities", visibilities.size(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szVisibilities = Atf::LAtfVector< UINT64, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("visibilities"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "visibilities", szVisibilities, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::clear()
{
	tournIds.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2& _o) const
{
	return tournIds.equals(_o.tournIds);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2 != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2).append(")");
	_buf.append(',');
	_buf.append("tournIds=");
	tournIds.toTraceString(_buf);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	tournIds.toXmlString("tournIds", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournIds"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT64, 4 > >::FromXmlString(_value, tournIds)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	tournIds.composeMsg(_msg, _ignoreJSON);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::parseMsg(CommMsgParser& _parser)
{
	tournIds.parseMsg(_parser);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournIds", tournIds);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournIds", tournIds);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	Atf::AtfVectorBase< UINT64 > tournIds; _jparser.validateByNameThrow("tournIds", tournIds);
	AtfValidator::validateInt(_descr, "tournIds", tournIds.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szTournIds = Atf::LAtfVector< UINT64, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tournIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "tournIds", szTournIds, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::clear()
{
	errCode = 0;
	successTournIds.clear();
	failedTournIds.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::equals(const Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY& _o) const
{
	return errCode == _o.errCode &&
		successTournIds.equals(_o.successTournIds) &&
		failedTournIds.equals(_o.failedTournIds);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("successTournIds=");
	successTournIds.toTraceString(_buf);
	_buf.append(',');
	_buf.append("failedTournIds=");
	failedTournIds.toTraceString(_buf);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	successTournIds.toXmlString("successTournIds", _buf);
	failedTournIds.toXmlString("failedTournIds", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("successTournIds"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT64, 4 > >::FromXmlString(_value, successTournIds)) return false;
			}
			else if (_element.equals("failedTournIds"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT64, 4 > >::FromXmlString(_value, failedTournIds)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	successTournIds.composeMsg(_msg, _ignoreJSON);
	failedTournIds.composeMsg(_msg, _ignoreJSON);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	successTournIds.parseMsg(_parser);
	failedTournIds.parseMsg(_parser);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	_jsonstr.compose("successTournIds", successTournIds);
	_jsonstr.compose("failedTournIds", failedTournIds);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	_jparser.parseByNameThrow("successTournIds", successTournIds);
	_jparser.parseByNameThrow("failedTournIds", failedTournIds);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode; _jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< UINT64 > successTournIds; _jparser.validateByNameThrow("successTournIds", successTournIds);
	AtfValidator::validateInt(_descr, "successTournIds", successTournIds.size(), _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< UINT64 > failedTournIds; _jparser.validateByNameThrow("failedTournIds", failedTournIds);
	AtfValidator::validateInt(_descr, "failedTournIds", failedTournIds.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT16 errCode; _parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szSuccessTournIds = Atf::LAtfVector< UINT64, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("successTournIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "successTournIds", szSuccessTournIds, _checker, __FILE__, __LINE__);
	int szFailedTournIds = Atf::LAtfVector< UINT64, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("failedTournIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "failedTournIds", szFailedTournIds, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    MassRollEffectiveAddonFilter
//=================================================================

MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::MassRollEffectiveAddonFilter()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::clear()
{
	enabled = false;
	comparator = 0;
	effectiveAddon = 0;
}

bool MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::equals(const MassRollEffectiveAddonFilter& _o) const
{
	return enabled == _o.enabled &&
		comparator == _o.comparator &&
		effectiveAddon == _o.effectiveAddon;
}

const char *MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("enabled=");
	_buf.appendUint(enabled);
	_buf.append(',');
	_buf.append("comparator=");
	_buf.appendInt(comparator);
	_buf.append(',');
	_buf.append("effectiveAddon=");
	_buf.appendInt(effectiveAddon);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("enabled", enabled, _buf);
	Atf::XmlElement::encodeAsXmlElement("comparator", comparator, _buf);
	Atf::XmlElement::encodeAsXmlElement("effectiveAddon", effectiveAddon, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("enabled"))
		{
			enabled = (*_value.ptr() == '1');
		}
		else if (_element.equals("comparator"))
		{
			comparator = (INT16)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("effectiveAddon"))
		{
			effectiveAddon = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeBOOL(enabled);
	_msg.composeINT16(comparator);
	_msg.composeINT32(effectiveAddon);
}

void MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(enabled);
	_parser.parseINT16(comparator);
	_parser.parseINT32(effectiveAddon);
}

const char *MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("enabled", enabled);
	_jsonstr.compose("comparator", comparator);
	_jsonstr.compose("effectiveAddon", effectiveAddon);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("enabled", enabled);
	_jparser.parseByNameThrow("comparator", comparator);
	_jparser.parseByNameThrow("effectiveAddon", effectiveAddon);
}

/* static */ void MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	bool enabled; _jparser.validateByNameThrow("enabled", enabled);
	AtfValidator::validateInt(_descr, "enabled", enabled, _checker, __FILE__, __LINE__);
	INT16 comparator; _jparser.validateByNameThrow("comparator", comparator);
	AtfValidator::validateInt(_descr, "comparator", comparator, _checker, __FILE__, __LINE__);
	INT32 effectiveAddon; _jparser.validateByNameThrow("effectiveAddon", effectiveAddon);
	AtfValidator::validateInt(_descr, "effectiveAddon", effectiveAddon, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::MassRollEffectiveAddonFilter::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	bool enabled; _parser.parseBOOL(enabled);
	AtfValidator::validateInt(_descr, "enabled", enabled, _checker, __FILE__, __LINE__);
	INT16 comparator; _parser.parseINT16(comparator);
	AtfValidator::validateInt(_descr, "comparator", comparator, _checker, __FILE__, __LINE__);
	INT32 effectiveAddon; _parser.parseINT32(effectiveAddon);
	AtfValidator::validateInt(_descr, "effectiveAddon", effectiveAddon, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    CurrencyAmount
//=================================================================

MainLobbyMsgs::adminMsgs::CurrencyAmount::CurrencyAmount()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::CurrencyAmount::clear()
{
	currency.clear();
	amount = 0;
}

bool MainLobbyMsgs::adminMsgs::CurrencyAmount::equals(const CurrencyAmount& _o) const
{
	return Atf::atfPStringEquals(currency, _o.currency) &&
		amount == _o.amount;
}

const char *MainLobbyMsgs::adminMsgs::CurrencyAmount::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("amount=");
	_buf.appendInt64(amount);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::CurrencyAmount::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("currency", currency, _buf);
	Atf::XmlElement::encodeAsXmlElement("amount", amount, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::CurrencyAmount::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("currency"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, currency)) return false;
		}
		else if (_element.equals("amount"))
		{
			amount = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::CurrencyAmount::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(currency);
	_msg.composeINT64(amount);
}

void MainLobbyMsgs::adminMsgs::CurrencyAmount::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(currency);
	_parser.parseINT64(amount);
}

const char *MainLobbyMsgs::adminMsgs::CurrencyAmount::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("currency", currency);
	_jsonstr.compose("amount", amount);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::CurrencyAmount::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("currency", currency);
	_jparser.parseByNameThrow("amount", amount);
}

/* static */ void MainLobbyMsgs::adminMsgs::CurrencyAmount::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString currency; _jparser.validateByNameThrow("currency", currency);
	AtfValidator::validateInt(_descr, "currency", currency.length(), _checker, __FILE__, __LINE__);
	INT64 amount; _jparser.validateByNameThrow("amount", amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::CurrencyAmount::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "currency"); size_t szCurrency = strlen(_dummy);
	AtfValidator::validateInt(_descr, "currency", szCurrency, _checker, __FILE__, __LINE__);
	INT64 amount; _parser.parseINT64(amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    MassRollTournAndRollTypeTotals
//=================================================================

MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::MassRollTournAndRollTypeTotals()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::clear()
{
	tournType = 0;
	performRoll = false;
	formula = 0;
	numTourns = 0;
	pmRefunds = 0;
	fppRefunds = 0;
	rmRefunds.clear();
}

bool MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::equals(const MassRollTournAndRollTypeTotals& _o) const
{
	return tournType == _o.tournType &&
		performRoll == _o.performRoll &&
		formula == _o.formula &&
		numTourns == _o.numTourns &&
		pmRefunds == _o.pmRefunds &&
		fppRefunds == _o.fppRefunds &&
		rmRefunds.equals(_o.rmRefunds);
}

const char *MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("tournType=");
	_buf.appendInt(tournType);
	_buf.append(',');
	_buf.append("performRoll=");
	_buf.appendUint(performRoll);
	_buf.append(',');
	_buf.append("formula=");
	_buf.appendInt(formula);
	_buf.append(',');
	_buf.append("numTourns=");
	_buf.appendInt(numTourns);
	_buf.append(',');
	_buf.append("pmRefunds=");
	_buf.appendInt64(pmRefunds);
	_buf.append(',');
	_buf.append("fppRefunds=");
	_buf.appendInt64(fppRefunds);
	_buf.append(',');
	_buf.append("rmRefunds=");
	rmRefunds.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("tournType", tournType, _buf);
	Atf::XmlElement::encodeAsXmlElement("performRoll", performRoll, _buf);
	Atf::XmlElement::encodeAsXmlElement("formula", formula, _buf);
	Atf::XmlElement::encodeAsXmlElement("numTourns", numTourns, _buf);
	Atf::XmlElement::encodeAsXmlElement("pmRefunds", pmRefunds, _buf);
	Atf::XmlElement::encodeAsXmlElement("fppRefunds", fppRefunds, _buf);
	rmRefunds.toXmlString("rmRefunds", _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("tournType"))
		{
			tournType = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("performRoll"))
		{
			performRoll = (*_value.ptr() == '1');
		}
		else if (_element.equals("formula"))
		{
			formula = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("numTourns"))
		{
			numTourns = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("pmRefunds"))
		{
			pmRefunds = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("fppRefunds"))
		{
			fppRefunds = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("rmRefunds"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< CurrencyAmount, 4 > >::FromXmlString(_value, rmRefunds)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(MassRollTournAndRollTypeTotals())) // not empty
	{
		_body.composeINT32(tournType);
		_body.composeBOOL(performRoll);
		_body.composeINT32(formula);
		_body.composeINT32(numTourns);
		_body.composeINT64(pmRefunds);
		_body.composeINT64(fppRefunds);
		rmRefunds.composeMsg(_body, _ignoreJSON);
	}

	_msg.composeMsgBody(_body);
}

void MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(tournType);
	_parser0.parseBOOL(performRoll);
	_parser0.parseINT32(formula);
	_parser0.parseINT32(numTourns);
	_parser0.parseINT64(pmRefunds);
	_parser0.parseINT64(fppRefunds);
	rmRefunds.parseMsg(_parser0);
}

const char *MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournType", tournType);
	_jsonstr.compose("performRoll", performRoll);
	_jsonstr.compose("formula", formula);
	_jsonstr.compose("numTourns", numTourns);
	_jsonstr.compose("pmRefunds", pmRefunds);
	_jsonstr.compose("fppRefunds", fppRefunds);
	_jsonstr.compose("rmRefunds", rmRefunds);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournType", tournType);
	_jparser.parseByNameThrow("performRoll", performRoll);
	_jparser.parseByNameThrow("formula", formula);
	_jparser.parseByNameThrow("numTourns", numTourns);
	_jparser.parseByNameThrow("pmRefunds", pmRefunds);
	_jparser.parseByNameThrow("fppRefunds", fppRefunds);
	_jparser.parseByNameThrow("rmRefunds", rmRefunds);
}

/* static */ void MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 tournType; _jparser.validateByNameThrow("tournType", tournType);
	AtfValidator::validateInt(_descr, "tournType", tournType, _checker, __FILE__, __LINE__);
	bool performRoll; _jparser.validateByNameThrow("performRoll", performRoll);
	AtfValidator::validateInt(_descr, "performRoll", performRoll, _checker, __FILE__, __LINE__);
	INT32 formula; _jparser.validateByNameThrow("formula", formula);
	AtfValidator::validateInt(_descr, "formula", formula, _checker, __FILE__, __LINE__);
	INT32 numTourns; _jparser.validateByNameThrow("numTourns", numTourns);
	AtfValidator::validateInt(_descr, "numTourns", numTourns, _checker, __FILE__, __LINE__);
	INT64 pmRefunds; _jparser.validateByNameThrow("pmRefunds", pmRefunds);
	AtfValidator::validateInt(_descr, "pmRefunds", pmRefunds, _checker, __FILE__, __LINE__);
	INT64 fppRefunds; _jparser.validateByNameThrow("fppRefunds", fppRefunds);
	AtfValidator::validateInt(_descr, "fppRefunds", fppRefunds, _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< CurrencyAmount > rmRefunds; _jparser.validateByNameThrow("rmRefunds", rmRefunds);
	AtfValidator::validateInt(_descr, "rmRefunds", rmRefunds.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::MassRollTournAndRollTypeTotals::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT32 tournType; _parser0.parseINT32(tournType);
	AtfValidator::validateInt(_descr, "tournType", tournType, _checker, __FILE__, __LINE__);
	bool performRoll; _parser0.parseBOOL(performRoll);
	AtfValidator::validateInt(_descr, "performRoll", performRoll, _checker, __FILE__, __LINE__);
	INT32 formula; _parser0.parseINT32(formula);
	AtfValidator::validateInt(_descr, "formula", formula, _checker, __FILE__, __LINE__);
	INT32 numTourns; _parser0.parseINT32(numTourns);
	AtfValidator::validateInt(_descr, "numTourns", numTourns, _checker, __FILE__, __LINE__);
	INT64 pmRefunds; _parser0.parseINT64(pmRefunds);
	AtfValidator::validateInt(_descr, "pmRefunds", pmRefunds, _checker, __FILE__, __LINE__);
	INT64 fppRefunds; _parser0.parseINT64(fppRefunds);
	AtfValidator::validateInt(_descr, "fppRefunds", fppRefunds, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szRmRefunds = Atf::LAtfVector< CurrencyAmount, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("rmRefunds"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "rmRefunds", szRmRefunds, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    MassRollProjectedTournRollPayouts
//=================================================================

MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::MassRollProjectedTournRollPayouts()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::clear()
{
	formula = 0;
	rmRefund = 0;
	pmRefund = 0;
	fppRefund = 0;
}

bool MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::equals(const MassRollProjectedTournRollPayouts& _o) const
{
	return formula == _o.formula &&
		rmRefund == _o.rmRefund &&
		pmRefund == _o.pmRefund &&
		fppRefund == _o.fppRefund;
}

const char *MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("formula=");
	_buf.appendInt(formula);
	_buf.append(',');
	_buf.append("rmRefund=");
	_buf.appendInt64(rmRefund);
	_buf.append(',');
	_buf.append("pmRefund=");
	_buf.appendInt64(pmRefund);
	_buf.append(',');
	_buf.append("fppRefund=");
	_buf.appendInt64(fppRefund);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("formula", formula, _buf);
	Atf::XmlElement::encodeAsXmlElement("rmRefund", rmRefund, _buf);
	Atf::XmlElement::encodeAsXmlElement("pmRefund", pmRefund, _buf);
	Atf::XmlElement::encodeAsXmlElement("fppRefund", fppRefund, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("formula"))
		{
			formula = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("rmRefund"))
		{
			rmRefund = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("pmRefund"))
		{
			pmRefund = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("fppRefund"))
		{
			fppRefund = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(MassRollProjectedTournRollPayouts())) // not empty
	{
		_body.composeINT32(formula);
		_body.composeINT64(rmRefund);
		_body.composeINT64(pmRefund);
		_body.composeINT64(fppRefund);
	}

	_msg.composeMsgBody(_body);
}

void MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(formula);
	_parser0.parseINT64(rmRefund);
	_parser0.parseINT64(pmRefund);
	_parser0.parseINT64(fppRefund);
}

const char *MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("formula", formula);
	_jsonstr.compose("rmRefund", rmRefund);
	_jsonstr.compose("pmRefund", pmRefund);
	_jsonstr.compose("fppRefund", fppRefund);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("formula", formula);
	_jparser.parseByNameThrow("rmRefund", rmRefund);
	_jparser.parseByNameThrow("pmRefund", pmRefund);
	_jparser.parseByNameThrow("fppRefund", fppRefund);
}

/* static */ void MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 formula; _jparser.validateByNameThrow("formula", formula);
	AtfValidator::validateInt(_descr, "formula", formula, _checker, __FILE__, __LINE__);
	INT64 rmRefund; _jparser.validateByNameThrow("rmRefund", rmRefund);
	AtfValidator::validateInt(_descr, "rmRefund", rmRefund, _checker, __FILE__, __LINE__);
	INT64 pmRefund; _jparser.validateByNameThrow("pmRefund", pmRefund);
	AtfValidator::validateInt(_descr, "pmRefund", pmRefund, _checker, __FILE__, __LINE__);
	INT64 fppRefund; _jparser.validateByNameThrow("fppRefund", fppRefund);
	AtfValidator::validateInt(_descr, "fppRefund", fppRefund, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::MassRollProjectedTournRollPayouts::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT32 formula; _parser0.parseINT32(formula);
	AtfValidator::validateInt(_descr, "formula", formula, _checker, __FILE__, __LINE__);
	INT64 rmRefund; _parser0.parseINT64(rmRefund);
	AtfValidator::validateInt(_descr, "rmRefund", rmRefund, _checker, __FILE__, __LINE__);
	INT64 pmRefund; _parser0.parseINT64(pmRefund);
	AtfValidator::validateInt(_descr, "pmRefund", pmRefund, _checker, __FILE__, __LINE__);
	INT64 fppRefund; _parser0.parseINT64(fppRefund);
	AtfValidator::validateInt(_descr, "fppRefund", fppRefund, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    MassRollTournDetails
//=================================================================

MainLobbyMsgs::adminMsgs::MassRollTournDetails::MassRollTournDetails()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::MassRollTournDetails::clear()
{
	tournId = 0;
	name.clear();
	startTime.setNull();
	currency.clear();
	isPlayMoney = false;
	tournType = 0;
	buyIn = 0;
	rake = 0;
	fppBuyIn = 0;
	amountGuaranteed = 0;
	totalPrizePool = 0;
	effectiveAddon = 0;
	started = false;
	lateRegActive = false;
	playersRemaining = 0;
	performRoll = false;
	selectedFormula = 0;
	availableRollTypes.clear();
	noRollReason.clear();
	inTheMoney = false;
	rmAlreadyPaid = 0;
	pmAlreadyPaid = 0;
	fppAlreadyPaid = 0;
}

bool MainLobbyMsgs::adminMsgs::MassRollTournDetails::equals(const MassRollTournDetails& _o) const
{
	return tournId == _o.tournId &&
		Atf::atfPStringEquals(name, _o.name) &&
		startTime.equals(_o.startTime) &&
		Atf::atfPStringEquals(currency, _o.currency) &&
		isPlayMoney == _o.isPlayMoney &&
		tournType == _o.tournType &&
		buyIn == _o.buyIn &&
		rake == _o.rake &&
		fppBuyIn == _o.fppBuyIn &&
		amountGuaranteed == _o.amountGuaranteed &&
		totalPrizePool == _o.totalPrizePool &&
		effectiveAddon == _o.effectiveAddon &&
		started == _o.started &&
		lateRegActive == _o.lateRegActive &&
		playersRemaining == _o.playersRemaining &&
		performRoll == _o.performRoll &&
		selectedFormula == _o.selectedFormula &&
		availableRollTypes.equals(_o.availableRollTypes) &&
		Atf::atfPStringEquals(noRollReason, _o.noRollReason) &&
		inTheMoney == _o.inTheMoney &&
		rmAlreadyPaid == _o.rmAlreadyPaid &&
		pmAlreadyPaid == _o.pmAlreadyPaid &&
		fppAlreadyPaid == _o.fppAlreadyPaid;
}

const char *MainLobbyMsgs::adminMsgs::MassRollTournDetails::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("tournId=");
	_buf.appendUint64(tournId);
	_buf.append(',');
	_buf.append("name=");
	_buf.append(name);
	_buf.append(',');
	_buf.append("startTime=");
	Atf::AtfTempl<CommSrvTime>::ToTraceString(_buf, startTime);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("tournType=");
	_buf.appendInt(tournType);
	_buf.append(',');
	_buf.append("buyIn=");
	_buf.appendInt64(buyIn);
	_buf.append(',');
	_buf.append("rake=");
	_buf.appendInt64(rake);
	_buf.append(',');
	_buf.append("fppBuyIn=");
	_buf.appendInt(fppBuyIn);
	_buf.append(',');
	_buf.append("amountGuaranteed=");
	_buf.appendInt64(amountGuaranteed);
	_buf.append(',');
	_buf.append("totalPrizePool=");
	_buf.appendInt64(totalPrizePool);
	_buf.append(',');
	_buf.append("effectiveAddon=");
	_buf.appendInt64(effectiveAddon);
	_buf.append(',');
	_buf.append("started=");
	_buf.appendUint(started);
	_buf.append(',');
	_buf.append("lateRegActive=");
	_buf.appendUint(lateRegActive);
	_buf.append(',');
	_buf.append("playersRemaining=");
	_buf.appendInt(playersRemaining);
	_buf.append(',');
	_buf.append("performRoll=");
	_buf.appendUint(performRoll);
	_buf.append(',');
	_buf.append("selectedFormula=");
	_buf.appendInt(selectedFormula);
	_buf.append(',');
	_buf.append("availableRollTypes=");
	availableRollTypes.toTraceString(_buf);
	_buf.append(',');
	_buf.append("noRollReason=");
	_buf.append(noRollReason);
	_buf.append(',');
	_buf.append("inTheMoney=");
	_buf.appendUint(inTheMoney);
	_buf.append(',');
	_buf.append("rmAlreadyPaid=");
	_buf.appendInt(rmAlreadyPaid);
	_buf.append(',');
	_buf.append("pmAlreadyPaid=");
	_buf.appendInt64(pmAlreadyPaid);
	_buf.append(',');
	_buf.append("fppAlreadyPaid=");
	_buf.appendInt(fppAlreadyPaid);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::MassRollTournDetails::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("tournId", tournId, _buf);
	Atf::XmlElement::encodeAsXmlElement("name", name, _buf);
	Atf::AtfTempl<CommSrvTime>::ToXmlString(_buf, "startTime", startTime);
	Atf::XmlElement::encodeAsXmlElement("currency", currency, _buf);
	Atf::XmlElement::encodeAsXmlElement("isPlayMoney", isPlayMoney, _buf);
	Atf::XmlElement::encodeAsXmlElement("tournType", tournType, _buf);
	Atf::XmlElement::encodeAsXmlElement("buyIn", buyIn, _buf);
	Atf::XmlElement::encodeAsXmlElement("rake", rake, _buf);
	Atf::XmlElement::encodeAsXmlElement("fppBuyIn", fppBuyIn, _buf);
	Atf::XmlElement::encodeAsXmlElement("amountGuaranteed", amountGuaranteed, _buf);
	Atf::XmlElement::encodeAsXmlElement("totalPrizePool", totalPrizePool, _buf);
	Atf::XmlElement::encodeAsXmlElement("effectiveAddon", effectiveAddon, _buf);
	Atf::XmlElement::encodeAsXmlElement("started", started, _buf);
	Atf::XmlElement::encodeAsXmlElement("lateRegActive", lateRegActive, _buf);
	Atf::XmlElement::encodeAsXmlElement("playersRemaining", playersRemaining, _buf);
	Atf::XmlElement::encodeAsXmlElement("performRoll", performRoll, _buf);
	Atf::XmlElement::encodeAsXmlElement("selectedFormula", selectedFormula, _buf);
	availableRollTypes.toXmlString("availableRollTypes", _buf);
	Atf::XmlElement::encodeAsXmlElement("noRollReason", noRollReason, _buf);
	Atf::XmlElement::encodeAsXmlElement("inTheMoney", inTheMoney, _buf);
	Atf::XmlElement::encodeAsXmlElement("rmAlreadyPaid", rmAlreadyPaid, _buf);
	Atf::XmlElement::encodeAsXmlElement("pmAlreadyPaid", pmAlreadyPaid, _buf);
	Atf::XmlElement::encodeAsXmlElement("fppAlreadyPaid", fppAlreadyPaid, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::MassRollTournDetails::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("tournId"))
		{
			tournId = (UINT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("name"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, name)) return false;
		}
		else if (_element.equals("startTime"))
		{
			Atf::AtfTempl<CommSrvTime>::FromXmlString(_value, startTime);
		}
		else if (_element.equals("currency"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, currency)) return false;
		}
		else if (_element.equals("isPlayMoney"))
		{
			isPlayMoney = (*_value.ptr() == '1');
		}
		else if (_element.equals("tournType"))
		{
			tournType = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("buyIn"))
		{
			buyIn = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("rake"))
		{
			rake = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("fppBuyIn"))
		{
			fppBuyIn = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("amountGuaranteed"))
		{
			amountGuaranteed = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("totalPrizePool"))
		{
			totalPrizePool = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("effectiveAddon"))
		{
			effectiveAddon = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("started"))
		{
			started = (*_value.ptr() == '1');
		}
		else if (_element.equals("lateRegActive"))
		{
			lateRegActive = (*_value.ptr() == '1');
		}
		else if (_element.equals("playersRemaining"))
		{
			playersRemaining = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("performRoll"))
		{
			performRoll = (*_value.ptr() == '1');
		}
		else if (_element.equals("selectedFormula"))
		{
			selectedFormula = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("availableRollTypes"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< MassRollProjectedTournRollPayouts, 4 > >::FromXmlString(_value, availableRollTypes)) return false;
		}
		else if (_element.equals("noRollReason"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, noRollReason)) return false;
		}
		else if (_element.equals("inTheMoney"))
		{
			inTheMoney = (*_value.ptr() == '1');
		}
		else if (_element.equals("rmAlreadyPaid"))
		{
			rmAlreadyPaid = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("pmAlreadyPaid"))
		{
			pmAlreadyPaid = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("fppAlreadyPaid"))
		{
			fppAlreadyPaid = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::MassRollTournDetails::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(MassRollTournDetails())) // not empty
	{
		_body.composeUINT64(tournId);
		_body.composeString(name);
		_body.composeSrvTime(startTime);
		_body.composeString(currency);
		_body.composeBOOL(isPlayMoney);
		_body.composeINT32(tournType);
		_body.composeINT64(buyIn);
		_body.composeINT64(rake);
		_body.composeINT32(fppBuyIn);
		_body.composeINT64(amountGuaranteed);
		_body.composeINT64(totalPrizePool);
		_body.composeINT64(effectiveAddon);
		_body.composeBOOL(started);
		_body.composeBOOL(lateRegActive);
		_body.composeINT32(playersRemaining);
		_body.composeBOOL(performRoll);
		_body.composeINT32(selectedFormula);
		availableRollTypes.composeMsg(_body, _ignoreJSON);
		_body.composeString(noRollReason);
		_body.composeBOOL(inTheMoney);
		_body.composeINT32(rmAlreadyPaid);
		_body.composeINT64(pmAlreadyPaid);
		_body.composeINT32(fppAlreadyPaid);
	}

	_msg.composeMsgBody(_body);
}

void MainLobbyMsgs::adminMsgs::MassRollTournDetails::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(tournId);
	_parser0.parseStringP(name);
	_parser0.parseSrvTime(startTime);
	_parser0.parseStringP(currency);
	_parser0.parseBOOL(isPlayMoney);
	_parser0.parseINT32(tournType);
	_parser0.parseINT64(buyIn);
	_parser0.parseINT64(rake);
	_parser0.parseINT32(fppBuyIn);
	_parser0.parseINT64(amountGuaranteed);
	_parser0.parseINT64(totalPrizePool);
	_parser0.parseINT64(effectiveAddon);
	_parser0.parseBOOL(started);
	_parser0.parseBOOL(lateRegActive);
	_parser0.parseINT32(playersRemaining);
	_parser0.parseBOOL(performRoll);
	_parser0.parseINT32(selectedFormula);
	availableRollTypes.parseMsg(_parser0);
	_parser0.parseStringP(noRollReason);
	_parser0.parseBOOL(inTheMoney);
	_parser0.parseINT32(rmAlreadyPaid);
	_parser0.parseINT64(pmAlreadyPaid);
	_parser0.parseINT32(fppAlreadyPaid);
}

const char *MainLobbyMsgs::adminMsgs::MassRollTournDetails::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournId", tournId);
	_jsonstr.compose("name", name);
	_jsonstr.compose("startTime", startTime);
	_jsonstr.compose("currency", currency);
	_jsonstr.compose("isPlayMoney", isPlayMoney);
	_jsonstr.compose("tournType", tournType);
	_jsonstr.compose("buyIn", buyIn);
	_jsonstr.compose("rake", rake);
	_jsonstr.compose("fppBuyIn", fppBuyIn);
	_jsonstr.compose("amountGuaranteed", amountGuaranteed);
	_jsonstr.compose("totalPrizePool", totalPrizePool);
	_jsonstr.compose("effectiveAddon", effectiveAddon);
	_jsonstr.compose("started", started);
	_jsonstr.compose("lateRegActive", lateRegActive);
	_jsonstr.compose("playersRemaining", playersRemaining);
	_jsonstr.compose("performRoll", performRoll);
	_jsonstr.compose("selectedFormula", selectedFormula);
	_jsonstr.compose("availableRollTypes", availableRollTypes);
	_jsonstr.compose("noRollReason", noRollReason);
	_jsonstr.compose("inTheMoney", inTheMoney);
	_jsonstr.compose("rmAlreadyPaid", rmAlreadyPaid);
	_jsonstr.compose("pmAlreadyPaid", pmAlreadyPaid);
	_jsonstr.compose("fppAlreadyPaid", fppAlreadyPaid);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::MassRollTournDetails::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournId", tournId);
	_jparser.parseByNameThrow("name", name);
	_jparser.parseByNameThrow("startTime", startTime);
	_jparser.parseByNameThrow("currency", currency);
	_jparser.parseByNameThrow("isPlayMoney", isPlayMoney);
	_jparser.parseByNameThrow("tournType", tournType);
	_jparser.parseByNameThrow("buyIn", buyIn);
	_jparser.parseByNameThrow("rake", rake);
	_jparser.parseByNameThrow("fppBuyIn", fppBuyIn);
	_jparser.parseByNameThrow("amountGuaranteed", amountGuaranteed);
	_jparser.parseByNameThrow("totalPrizePool", totalPrizePool);
	_jparser.parseByNameThrow("effectiveAddon", effectiveAddon);
	_jparser.parseByNameThrow("started", started);
	_jparser.parseByNameThrow("lateRegActive", lateRegActive);
	_jparser.parseByNameThrow("playersRemaining", playersRemaining);
	_jparser.parseByNameThrow("performRoll", performRoll);
	_jparser.parseByNameThrow("selectedFormula", selectedFormula);
	_jparser.parseByNameThrow("availableRollTypes", availableRollTypes);
	_jparser.parseByNameThrow("noRollReason", noRollReason);
	_jparser.parseByNameThrow("inTheMoney", inTheMoney);
	_jparser.parseByNameThrow("rmAlreadyPaid", rmAlreadyPaid);
	_jparser.parseByNameThrow("pmAlreadyPaid", pmAlreadyPaid);
	_jparser.parseByNameThrow("fppAlreadyPaid", fppAlreadyPaid);
}

/* static */ void MainLobbyMsgs::adminMsgs::MassRollTournDetails::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT64 tournId; _jparser.validateByNameThrow("tournId", tournId);
	AtfValidator::validateUint(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	PString name; _jparser.validateByNameThrow("name", name);
	AtfValidator::validateInt(_descr, "name", name.length(), _checker, __FILE__, __LINE__);
	CommSrvTime startTime; _jparser.validateByNameThrow("startTime", startTime);
	AtfValidator::validateSrvDateTime(_descr, "startTime", startTime, _checker, __FILE__, __LINE__);
	PString currency; _jparser.validateByNameThrow("currency", currency);
	AtfValidator::validateInt(_descr, "currency", currency.length(), _checker, __FILE__, __LINE__);
	bool isPlayMoney; _jparser.validateByNameThrow("isPlayMoney", isPlayMoney);
	AtfValidator::validateInt(_descr, "isPlayMoney", isPlayMoney, _checker, __FILE__, __LINE__);
	INT32 tournType; _jparser.validateByNameThrow("tournType", tournType);
	AtfValidator::validateInt(_descr, "tournType", tournType, _checker, __FILE__, __LINE__);
	INT64 buyIn; _jparser.validateByNameThrow("buyIn", buyIn);
	AtfValidator::validateInt(_descr, "buyIn", buyIn, _checker, __FILE__, __LINE__);
	INT64 rake; _jparser.validateByNameThrow("rake", rake);
	AtfValidator::validateInt(_descr, "rake", rake, _checker, __FILE__, __LINE__);
	INT32 fppBuyIn; _jparser.validateByNameThrow("fppBuyIn", fppBuyIn);
	AtfValidator::validateInt(_descr, "fppBuyIn", fppBuyIn, _checker, __FILE__, __LINE__);
	INT64 amountGuaranteed; _jparser.validateByNameThrow("amountGuaranteed", amountGuaranteed);
	AtfValidator::validateInt(_descr, "amountGuaranteed", amountGuaranteed, _checker, __FILE__, __LINE__);
	INT64 totalPrizePool; _jparser.validateByNameThrow("totalPrizePool", totalPrizePool);
	AtfValidator::validateInt(_descr, "totalPrizePool", totalPrizePool, _checker, __FILE__, __LINE__);
	INT64 effectiveAddon; _jparser.validateByNameThrow("effectiveAddon", effectiveAddon);
	AtfValidator::validateInt(_descr, "effectiveAddon", effectiveAddon, _checker, __FILE__, __LINE__);
	bool started; _jparser.validateByNameThrow("started", started);
	AtfValidator::validateInt(_descr, "started", started, _checker, __FILE__, __LINE__);
	bool lateRegActive; _jparser.validateByNameThrow("lateRegActive", lateRegActive);
	AtfValidator::validateInt(_descr, "lateRegActive", lateRegActive, _checker, __FILE__, __LINE__);
	INT32 playersRemaining; _jparser.validateByNameThrow("playersRemaining", playersRemaining);
	AtfValidator::validateInt(_descr, "playersRemaining", playersRemaining, _checker, __FILE__, __LINE__);
	bool performRoll; _jparser.validateByNameThrow("performRoll", performRoll);
	AtfValidator::validateInt(_descr, "performRoll", performRoll, _checker, __FILE__, __LINE__);
	INT32 selectedFormula; _jparser.validateByNameThrow("selectedFormula", selectedFormula);
	AtfValidator::validateInt(_descr, "selectedFormula", selectedFormula, _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< MassRollProjectedTournRollPayouts > availableRollTypes; _jparser.validateByNameThrow("availableRollTypes", availableRollTypes);
	AtfValidator::validateInt(_descr, "availableRollTypes", availableRollTypes.size(), _checker, __FILE__, __LINE__);
	PString noRollReason; _jparser.validateByNameThrow("noRollReason", noRollReason);
	AtfValidator::validateInt(_descr, "noRollReason", noRollReason.length(), _checker, __FILE__, __LINE__);
	bool inTheMoney; _jparser.validateByNameThrow("inTheMoney", inTheMoney);
	AtfValidator::validateInt(_descr, "inTheMoney", inTheMoney, _checker, __FILE__, __LINE__);
	INT32 rmAlreadyPaid; _jparser.validateByNameThrow("rmAlreadyPaid", rmAlreadyPaid);
	AtfValidator::validateInt(_descr, "rmAlreadyPaid", rmAlreadyPaid, _checker, __FILE__, __LINE__);
	INT64 pmAlreadyPaid; _jparser.validateByNameThrow("pmAlreadyPaid", pmAlreadyPaid);
	AtfValidator::validateInt(_descr, "pmAlreadyPaid", pmAlreadyPaid, _checker, __FILE__, __LINE__);
	INT32 fppAlreadyPaid; _jparser.validateByNameThrow("fppAlreadyPaid", fppAlreadyPaid);
	AtfValidator::validateInt(_descr, "fppAlreadyPaid", fppAlreadyPaid, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::MassRollTournDetails::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	UINT64 tournId; _parser0.parseUINT64(tournId);
	AtfValidator::validateUint(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "name"); size_t szName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "name", szName, _checker, __FILE__, __LINE__);
	CommSrvTime startTime; _parser0.parseSrvTime(startTime);
	AtfValidator::validateSrvDateTime(_descr, "startTime", startTime, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "currency"); size_t szCurrency = strlen(_dummy);
	AtfValidator::validateInt(_descr, "currency", szCurrency, _checker, __FILE__, __LINE__);
	bool isPlayMoney; _parser0.parseBOOL(isPlayMoney);
	AtfValidator::validateInt(_descr, "isPlayMoney", isPlayMoney, _checker, __FILE__, __LINE__);
	INT32 tournType; _parser0.parseINT32(tournType);
	AtfValidator::validateInt(_descr, "tournType", tournType, _checker, __FILE__, __LINE__);
	INT64 buyIn; _parser0.parseINT64(buyIn);
	AtfValidator::validateInt(_descr, "buyIn", buyIn, _checker, __FILE__, __LINE__);
	INT64 rake; _parser0.parseINT64(rake);
	AtfValidator::validateInt(_descr, "rake", rake, _checker, __FILE__, __LINE__);
	INT32 fppBuyIn; _parser0.parseINT32(fppBuyIn);
	AtfValidator::validateInt(_descr, "fppBuyIn", fppBuyIn, _checker, __FILE__, __LINE__);
	INT64 amountGuaranteed; _parser0.parseINT64(amountGuaranteed);
	AtfValidator::validateInt(_descr, "amountGuaranteed", amountGuaranteed, _checker, __FILE__, __LINE__);
	INT64 totalPrizePool; _parser0.parseINT64(totalPrizePool);
	AtfValidator::validateInt(_descr, "totalPrizePool", totalPrizePool, _checker, __FILE__, __LINE__);
	INT64 effectiveAddon; _parser0.parseINT64(effectiveAddon);
	AtfValidator::validateInt(_descr, "effectiveAddon", effectiveAddon, _checker, __FILE__, __LINE__);
	bool started; _parser0.parseBOOL(started);
	AtfValidator::validateInt(_descr, "started", started, _checker, __FILE__, __LINE__);
	bool lateRegActive; _parser0.parseBOOL(lateRegActive);
	AtfValidator::validateInt(_descr, "lateRegActive", lateRegActive, _checker, __FILE__, __LINE__);
	INT32 playersRemaining; _parser0.parseINT32(playersRemaining);
	AtfValidator::validateInt(_descr, "playersRemaining", playersRemaining, _checker, __FILE__, __LINE__);
	bool performRoll; _parser0.parseBOOL(performRoll);
	AtfValidator::validateInt(_descr, "performRoll", performRoll, _checker, __FILE__, __LINE__);
	INT32 selectedFormula; _parser0.parseINT32(selectedFormula);
	AtfValidator::validateInt(_descr, "selectedFormula", selectedFormula, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szAvailableRollTypes = Atf::LAtfVector< MassRollProjectedTournRollPayouts, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("availableRollTypes"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "availableRollTypes", szAvailableRollTypes, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "noRollReason"); size_t szNoRollReason = strlen(_dummy);
	AtfValidator::validateInt(_descr, "noRollReason", szNoRollReason, _checker, __FILE__, __LINE__);
	bool inTheMoney; _parser0.parseBOOL(inTheMoney);
	AtfValidator::validateInt(_descr, "inTheMoney", inTheMoney, _checker, __FILE__, __LINE__);
	INT32 rmAlreadyPaid; _parser0.parseINT32(rmAlreadyPaid);
	AtfValidator::validateInt(_descr, "rmAlreadyPaid", rmAlreadyPaid, _checker, __FILE__, __LINE__);
	INT64 pmAlreadyPaid; _parser0.parseINT64(pmAlreadyPaid);
	AtfValidator::validateInt(_descr, "pmAlreadyPaid", pmAlreadyPaid, _checker, __FILE__, __LINE__);
	INT32 fppAlreadyPaid; _parser0.parseINT32(fppAlreadyPaid);
	AtfValidator::validateInt(_descr, "fppAlreadyPaid", fppAlreadyPaid, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    MassRollTournUpdate
//=================================================================

MainLobbyMsgs::adminMsgs::MassRollTournUpdate::MassRollTournUpdate()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::MassRollTournUpdate::clear()
{
	tournId = 0;
	performRoll = false;
	formula = 0;
}

bool MainLobbyMsgs::adminMsgs::MassRollTournUpdate::equals(const MassRollTournUpdate& _o) const
{
	return tournId == _o.tournId &&
		performRoll == _o.performRoll &&
		formula == _o.formula;
}

const char *MainLobbyMsgs::adminMsgs::MassRollTournUpdate::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("tournId=");
	_buf.appendUint64(tournId);
	_buf.append(',');
	_buf.append("performRoll=");
	_buf.appendUint(performRoll);
	_buf.append(',');
	_buf.append("formula=");
	_buf.appendInt(formula);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::MassRollTournUpdate::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("tournId", tournId, _buf);
	Atf::XmlElement::encodeAsXmlElement("performRoll", performRoll, _buf);
	Atf::XmlElement::encodeAsXmlElement("formula", formula, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::MassRollTournUpdate::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("tournId"))
		{
			tournId = (UINT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("performRoll"))
		{
			performRoll = (*_value.ptr() == '1');
		}
		else if (_element.equals("formula"))
		{
			formula = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::MassRollTournUpdate::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT64(tournId);
	_msg.composeBOOL(performRoll);
	_msg.composeINT32(formula);
}

void MainLobbyMsgs::adminMsgs::MassRollTournUpdate::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(tournId);
	_parser.parseBOOL(performRoll);
	_parser.parseINT32(formula);
}

const char *MainLobbyMsgs::adminMsgs::MassRollTournUpdate::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournId", tournId);
	_jsonstr.compose("performRoll", performRoll);
	_jsonstr.compose("formula", formula);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::MassRollTournUpdate::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournId", tournId);
	_jparser.parseByNameThrow("performRoll", performRoll);
	_jparser.parseByNameThrow("formula", formula);
}

/* static */ void MainLobbyMsgs::adminMsgs::MassRollTournUpdate::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT64 tournId; _jparser.validateByNameThrow("tournId", tournId);
	AtfValidator::validateUint(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	bool performRoll; _jparser.validateByNameThrow("performRoll", performRoll);
	AtfValidator::validateInt(_descr, "performRoll", performRoll, _checker, __FILE__, __LINE__);
	INT32 formula; _jparser.validateByNameThrow("formula", formula);
	AtfValidator::validateInt(_descr, "formula", formula, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::MassRollTournUpdate::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	UINT64 tournId; _parser.parseUINT64(tournId);
	AtfValidator::validateUint(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	bool performRoll; _parser.parseBOOL(performRoll);
	AtfValidator::validateInt(_descr, "performRoll", performRoll, _checker, __FILE__, __LINE__);
	INT32 formula; _parser.parseINT32(formula);
	AtfValidator::validateInt(_descr, "formula", formula, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    MassRollIncompleteRoll
//=================================================================

MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::MassRollIncompleteRoll()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::clear()
{
	tournId = 0;
	name.clear();
	reason.clear();
}

bool MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::equals(const MassRollIncompleteRoll& _o) const
{
	return tournId == _o.tournId &&
		Atf::atfPStringEquals(name, _o.name) &&
		Atf::atfPStringEquals(reason, _o.reason);
}

const char *MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("tournId=");
	_buf.appendUint64(tournId);
	_buf.append(',');
	_buf.append("name=");
	_buf.append(name);
	_buf.append(',');
	_buf.append("reason=");
	_buf.append(reason);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("tournId", tournId, _buf);
	Atf::XmlElement::encodeAsXmlElement("name", name, _buf);
	Atf::XmlElement::encodeAsXmlElement("reason", reason, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("tournId"))
		{
			tournId = (UINT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("name"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, name)) return false;
		}
		else if (_element.equals("reason"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, reason)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT64(tournId);
	_msg.composeString(name);
	_msg.composeString(reason);
}

void MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(tournId);
	_parser.parseStringP(name);
	_parser.parseStringP(reason);
}

const char *MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournId", tournId);
	_jsonstr.compose("name", name);
	_jsonstr.compose("reason", reason);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournId", tournId);
	_jparser.parseByNameThrow("name", name);
	_jparser.parseByNameThrow("reason", reason);
}

/* static */ void MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT64 tournId; _jparser.validateByNameThrow("tournId", tournId);
	AtfValidator::validateUint(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	PString name; _jparser.validateByNameThrow("name", name);
	AtfValidator::validateInt(_descr, "name", name.length(), _checker, __FILE__, __LINE__);
	PString reason; _jparser.validateByNameThrow("reason", reason);
	AtfValidator::validateInt(_descr, "reason", reason.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::MassRollIncompleteRoll::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT64 tournId; _parser.parseUINT64(tournId);
	AtfValidator::validateUint(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "name"); size_t szName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "name", szName, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "reason"); size_t szReason = strlen(_dummy);
	AtfValidator::validateInt(_descr, "reason", szReason, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    MassRollRecentUser
//=================================================================

MainLobbyMsgs::adminMsgs::MassRollRecentUser::MassRollRecentUser()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::MassRollRecentUser::clear()
{
	adminId.clear();
	initTime.setNull();
}

bool MainLobbyMsgs::adminMsgs::MassRollRecentUser::equals(const MassRollRecentUser& _o) const
{
	return Atf::atfPStringEquals(adminId, _o.adminId) &&
		initTime.equals(_o.initTime);
}

const char *MainLobbyMsgs::adminMsgs::MassRollRecentUser::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("adminId=");
	_buf.append(adminId);
	_buf.append(',');
	_buf.append("initTime=");
	Atf::AtfTempl<CommSrvTime>::ToTraceString(_buf, initTime);
	_buf.append('}');
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::MassRollRecentUser::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("adminId", adminId, _buf);
	Atf::AtfTempl<CommSrvTime>::ToXmlString(_buf, "initTime", initTime);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::MassRollRecentUser::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("adminId"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, adminId)) return false;
		}
		else if (_element.equals("initTime"))
		{
			Atf::AtfTempl<CommSrvTime>::FromXmlString(_value, initTime);
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void MainLobbyMsgs::adminMsgs::MassRollRecentUser::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(adminId);
	_msg.composeSrvTime(initTime);
}

void MainLobbyMsgs::adminMsgs::MassRollRecentUser::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(adminId);
	_parser.parseSrvTime(initTime);
}

const char *MainLobbyMsgs::adminMsgs::MassRollRecentUser::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("adminId", adminId);
	_jsonstr.compose("initTime", initTime);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::MassRollRecentUser::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("adminId", adminId);
	_jparser.parseByNameThrow("initTime", initTime);
}

/* static */ void MainLobbyMsgs::adminMsgs::MassRollRecentUser::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString adminId; _jparser.validateByNameThrow("adminId", adminId);
	AtfValidator::validateInt(_descr, "adminId", adminId.length(), _checker, __FILE__, __LINE__);
	CommSrvTime initTime; _jparser.validateByNameThrow("initTime", initTime);
	AtfValidator::validateSrvDateTime(_descr, "initTime", initTime, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::MassRollRecentUser::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "adminId"); size_t szAdminId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "adminId", szAdminId, _checker, __FILE__, __LINE__);
	CommSrvTime initTime; _parser.parseSrvTime(initTime);
	AtfValidator::validateSrvDateTime(_descr, "initTime", initTime, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::clear()
{
	cancellationText.clear();
	tournIds.clear();
	flags = 0;
	siteMask = 0;
	effectiveAddonFilter.clear();
	siteMaskEx.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT& _o) const
{
	return Atf::atfPStringEquals(cancellationText, _o.cancellationText) &&
		tournIds.equals(_o.tournIds) &&
		flags == _o.flags &&
		siteMask == _o.siteMask &&
		effectiveAddonFilter.equals(_o.effectiveAddonFilter) &&
		siteMaskEx.equals(_o.siteMaskEx);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_INIT != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_INIT).append(")");
	_buf.append(',');
	_buf.append("cancellationText=");
	_buf.append(cancellationText);
	_buf.append(',');
	_buf.append("tournIds=");
	tournIds.toTraceString(_buf);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("siteMask=");
	_buf.appendUint(siteMask);
	_buf.append(',');
	_buf.append("effectiveAddonFilter=");
	effectiveAddonFilter.toTraceString(_buf);
	_buf.append(',');
	_buf.append("siteMaskEx=");
	siteMaskEx.toTraceString(_buf);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_INIT).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("cancellationText", cancellationText, _buf);
	tournIds.toXmlString("tournIds", _buf);
	Atf::XmlElement::encodeAsXmlElement("flags", flags, _buf);
	Atf::XmlElement::encodeAsXmlElement("siteMask", siteMask, _buf);
	effectiveAddonFilter.toXmlString("effectiveAddonFilter", _buf);
	siteMaskEx.toXmlString("siteMaskEx", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("cancellationText"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, cancellationText)) return false;
			}
			else if (_element.equals("tournIds"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT64, 4 > >::FromXmlString(_value, tournIds)) return false;
			}
			else if (_element.equals("flags"))
			{
				flags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("siteMask"))
			{
				siteMask = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("effectiveAddonFilter"))
			{
				if(!Atf::AtfTempl< MassRollEffectiveAddonFilter >::FromXmlString(_value, effectiveAddonFilter)) return false;
			}
			else if (_element.equals("siteMaskEx"))
			{
				if(!Atf::AtfTempl< PSiteMask >::FromXmlString(_value, siteMaskEx)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(cancellationText);
	tournIds.composeMsg(_msg, _ignoreJSON);
	_msg.composeUINT32(flags);
	_msg.composeUINT32(siteMask);
	effectiveAddonFilter.composeMsg(_msg, _ignoreJSON);
	siteMaskEx.composeMsg(_msg, _ignoreJSON);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(cancellationText);
	tournIds.parseMsg(_parser);
	_parser.parseUINT32(flags);
	_parser.parseUINT32(siteMask);
	effectiveAddonFilter.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	siteMaskEx.parseMsg(_parser);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("cancellationText", cancellationText);
	_jsonstr.compose("tournIds", tournIds);
	_jsonstr.compose("flags", flags);
	_jsonstr.compose("siteMask", siteMask);
	_jsonstr.compose("effectiveAddonFilter", effectiveAddonFilter);
	_jsonstr.compose("siteMaskEx", siteMaskEx);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("cancellationText", cancellationText);
	_jparser.parseByNameThrow("tournIds", tournIds);
	_jparser.parseByNameThrow("flags", flags);
	_jparser.parseByNameThrow("siteMask", siteMask);
	_jparser.parseByNameThrow("effectiveAddonFilter", effectiveAddonFilter);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("siteMaskEx", siteMaskEx);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_INIT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString cancellationText; _jparser.validateByNameThrow("cancellationText", cancellationText);
	AtfValidator::validateInt(_descr, "cancellationText", cancellationText.length(), _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< UINT64 > tournIds; _jparser.validateByNameThrow("tournIds", tournIds);
	AtfValidator::validateInt(_descr, "tournIds", tournIds.size(), _checker, __FILE__, __LINE__);
	UINT32 flags; _jparser.validateByNameThrow("flags", flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT32 siteMask; _jparser.validateByNameThrow("siteMask", siteMask);
	AtfValidator::validateInt(_descr, "siteMask", siteMask, _checker, __FILE__, __LINE__);
	MassRollEffectiveAddonFilter effectiveAddonFilter; _jparser.validateByNameThrow("effectiveAddonFilter", effectiveAddonFilter);
	if(_jparser.parseEnded()) return;
	PSiteMask siteMaskEx; _jparser.validateByNameThrow("siteMaskEx", siteMaskEx);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_INIT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "cancellationText"); size_t szCancellationText = strlen(_dummy);
	AtfValidator::validateInt(_descr, "cancellationText", szCancellationText, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szTournIds = Atf::LAtfVector< UINT64, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tournIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "tournIds", szTournIds, _checker, __FILE__, __LINE__);
	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	UINT32 siteMask; _parser.parseUINT32(siteMask);
	AtfValidator::validateInt(_descr, "siteMask", siteMask, _checker, __FILE__, __LINE__);
	MassRollEffectiveAddonFilter::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("effectiveAddonFilter"), _fieldsWithUnparsedContent);
	if(_parser.parseEnded()) return;
	PSiteMask::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("siteMaskEx"), _fieldsWithUnparsedContent);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::clear()
{
	errCode = 0;
	errDesc.clear();
	token = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDesc, _o.errDesc) &&
		token == _o.token;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
	}
	else
	{
		_buf.append(',');
		_buf.append("token=");
		_buf.appendInt(token);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDesc", errDesc, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("token", token, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDesc"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDesc)) return false;
			}
			else if (_element.equals("token"))
			{
				token = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if( errCode != 0 )
	{
		_msg.composeString(errDesc);
	}
	else
	{
		_msg.composeINT32(token);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode != 0 )
	{
		_parser.parseStringP(errDesc);
	}
	else
	{
		_parser.parseINT32(token);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if( errCode != 0 )
	{
		_jsonstr.compose("errDesc", errDesc);
	}
	else
	{
		_jsonstr.compose("token", token);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDesc", errDesc);
	}
	else
	{
		_jparser.parseByNameThrow("token", token);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		PString errDesc; _jparser.validateByNameThrow("errDesc", errDesc);
		AtfValidator::validateInt(_descr, "errDesc", errDesc.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		INT32 token; _jparser.validateByNameThrow("token", token);
		AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
	}
	else
	{
		INT32 token; _parser.parseINT32(token);
		AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::clear()
{
	token = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS& _o) const
{
	return token == _o.token;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS).append(")");
	_buf.append(',');
	_buf.append("token=");
	_buf.appendInt(token);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("token", token, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("token"))
			{
				token = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT32(token);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(token);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("token", token);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("token", token);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 token; _jparser.validateByNameThrow("token", token);
	AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 token; _parser.parseINT32(token);
	AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::clear()
{
	errCode = 0;
	errDesc.clear();
	tournAndRollTypeTotals.clear();
	recentUsers.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDesc, _o.errDesc) &&
		tournAndRollTypeTotals.equals(_o.tournAndRollTypeTotals) &&
		recentUsers.equals(_o.recentUsers);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
	}
	else
	{
		_buf.append(',');
		_buf.append("tournAndRollTypeTotals=");
		tournAndRollTypeTotals.toTraceString(_buf);
		_buf.append(',');
		_buf.append("recentUsers=");
		recentUsers.toTraceString(_buf);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDesc", errDesc, _buf);
	}
	else
	{
		tournAndRollTypeTotals.toXmlString("tournAndRollTypeTotals", _buf);
		recentUsers.toXmlString("recentUsers", _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDesc"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDesc)) return false;
			}
			else if (_element.equals("tournAndRollTypeTotals"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< MassRollTournAndRollTypeTotals, 4 > >::FromXmlString(_value, tournAndRollTypeTotals)) return false;
			}
			else if (_element.equals("recentUsers"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< MassRollRecentUser, 4 > >::FromXmlString(_value, recentUsers)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if( errCode != 0 )
	{
		_msg.composeString(errDesc);
	}
	else
	{
		tournAndRollTypeTotals.composeMsg(_msg, _ignoreJSON);
		recentUsers.composeMsg(_msg, _ignoreJSON);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode != 0 )
	{
		_parser.parseStringP(errDesc);
	}
	else
	{
		tournAndRollTypeTotals.parseMsg(_parser);
		recentUsers.parseMsg(_parser);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if( errCode != 0 )
	{
		_jsonstr.compose("errDesc", errDesc);
	}
	else
	{
		_jsonstr.compose("tournAndRollTypeTotals", tournAndRollTypeTotals);
		_jsonstr.compose("recentUsers", recentUsers);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDesc", errDesc);
	}
	else
	{
		_jparser.parseByNameThrow("tournAndRollTypeTotals", tournAndRollTypeTotals);
		_jparser.parseByNameThrow("recentUsers", recentUsers);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		PString errDesc; _jparser.validateByNameThrow("errDesc", errDesc);
		AtfValidator::validateInt(_descr, "errDesc", errDesc.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		Atf::AtfVectorBase< MassRollTournAndRollTypeTotals > tournAndRollTypeTotals; _jparser.validateByNameThrow("tournAndRollTypeTotals", tournAndRollTypeTotals);
		AtfValidator::validateInt(_descr, "tournAndRollTypeTotals", tournAndRollTypeTotals.size(), _checker, __FILE__, __LINE__);
		Atf::AtfVectorBase< MassRollRecentUser > recentUsers; _jparser.validateByNameThrow("recentUsers", recentUsers);
		AtfValidator::validateInt(_descr, "recentUsers", recentUsers.size(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szTournAndRollTypeTotals = Atf::LAtfVector< MassRollTournAndRollTypeTotals, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tournAndRollTypeTotals"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "tournAndRollTypeTotals", szTournAndRollTypeTotals, _checker, __FILE__, __LINE__);
		int szRecentUsers = Atf::LAtfVector< MassRollRecentUser, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("recentUsers"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "recentUsers", szRecentUsers, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::clear()
{
	token = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS& _o) const
{
	return token == _o.token;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS).append(")");
	_buf.append(',');
	_buf.append("token=");
	_buf.appendInt(token);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("token", token, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("token"))
			{
				token = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT32(token);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(token);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("token", token);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("token", token);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 token; _jparser.validateByNameThrow("token", token);
	AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 token; _parser.parseINT32(token);
	AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::clear()
{
	errCode = 0;
	errDesc.clear();
	tournDetails.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDesc, _o.errDesc) &&
		tournDetails.equals(_o.tournDetails);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
	}
	else
	{
		_buf.append(',');
		_buf.append("tournDetails=");
		tournDetails.toTraceString(_buf);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDesc", errDesc, _buf);
	}
	else
	{
		tournDetails.toXmlString("tournDetails", _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDesc"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDesc)) return false;
			}
			else if (_element.equals("tournDetails"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< MassRollTournDetails, 4 > >::FromXmlString(_value, tournDetails)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if( errCode != 0 )
	{
		_msg.composeString(errDesc);
	}
	else
	{
		tournDetails.composeMsg(_msg, _ignoreJSON);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode != 0 )
	{
		_parser.parseStringP(errDesc);
	}
	else
	{
		tournDetails.parseMsg(_parser);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if( errCode != 0 )
	{
		_jsonstr.compose("errDesc", errDesc);
	}
	else
	{
		_jsonstr.compose("tournDetails", tournDetails);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDesc", errDesc);
	}
	else
	{
		_jparser.parseByNameThrow("tournDetails", tournDetails);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		PString errDesc; _jparser.validateByNameThrow("errDesc", errDesc);
		AtfValidator::validateInt(_descr, "errDesc", errDesc.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		Atf::AtfVectorBase< MassRollTournDetails > tournDetails; _jparser.validateByNameThrow("tournDetails", tournDetails);
		AtfValidator::validateInt(_descr, "tournDetails", tournDetails.size(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szTournDetails = Atf::LAtfVector< MassRollTournDetails, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("tournDetails"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "tournDetails", szTournDetails, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::clear()
{
	token = 0;
	updates.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE& _o) const
{
	return token == _o.token &&
		updates.equals(_o.updates);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE).append(")");
	_buf.append(',');
	_buf.append("token=");
	_buf.appendInt(token);
	_buf.append(',');
	_buf.append("updates=");
	updates.toTraceString(_buf);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("token", token, _buf);
	updates.toXmlString("updates", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("token"))
			{
				token = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("updates"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< MassRollTournUpdate, 4 > >::FromXmlString(_value, updates)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT32(token);
	updates.composeMsg(_msg, _ignoreJSON);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(token);
	updates.parseMsg(_parser);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("token", token);
	_jsonstr.compose("updates", updates);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("token", token);
	_jparser.parseByNameThrow("updates", updates);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 token; _jparser.validateByNameThrow("token", token);
	AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< MassRollTournUpdate > updates; _jparser.validateByNameThrow("updates", updates);
	AtfValidator::validateInt(_descr, "updates", updates.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 token; _parser.parseINT32(token);
	AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szUpdates = Atf::LAtfVector< MassRollTournUpdate, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("updates"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "updates", szUpdates, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::clear()
{
	errCode = 0;
	errDesc.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDesc, _o.errDesc);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDesc", errDesc, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDesc"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDesc)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if( errCode != 0 )
	{
		_msg.composeString(errDesc);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode != 0 )
	{
		_parser.parseStringP(errDesc);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if( errCode != 0 )
	{
		_jsonstr.compose("errDesc", errDesc);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDesc", errDesc);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		PString errDesc; _jparser.validateByNameThrow("errDesc", errDesc);
		AtfValidator::validateInt(_descr, "errDesc", errDesc.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::clear()
{
	token = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT& _o) const
{
	return token == _o.token;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT).append(")");
	_buf.append(',');
	_buf.append("token=");
	_buf.appendInt(token);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("token", token, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("token"))
			{
				token = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT32(token);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(token);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("token", token);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("token", token);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 token; _jparser.validateByNameThrow("token", token);
	AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 token; _parser.parseINT32(token);
	AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::clear()
{
	errCode = 0;
	errDesc.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDesc, _o.errDesc);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDesc", errDesc, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDesc"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDesc)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if( errCode != 0 )
	{
		_msg.composeString(errDesc);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode != 0 )
	{
		_parser.parseStringP(errDesc);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if( errCode != 0 )
	{
		_jsonstr.compose("errDesc", errDesc);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDesc", errDesc);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		PString errDesc; _jparser.validateByNameThrow("errDesc", errDesc);
		AtfValidator::validateInt(_descr, "errDesc", errDesc.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::clear()
{
	token = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS& _o) const
{
	return token == _o.token;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS).append(")");
	_buf.append(',');
	_buf.append("token=");
	_buf.appendInt(token);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("token", token, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("token"))
			{
				token = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT32(token);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(token);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("token", token);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("token", token);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 token; _jparser.validateByNameThrow("token", token);
	AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 token; _parser.parseINT32(token);
	AtfValidator::validateInt(_descr, "token", token, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::clear()
{
	errCode = 0;
	errDesc.clear();
	numSuccessfulRolls = 0;
	incompleteRolls.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::equals(const Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDesc, _o.errDesc) &&
		numSuccessfulRolls == _o.numSuccessfulRolls &&
		incompleteRolls.equals(_o.incompleteRolls);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
	}
	else
	{
		_buf.append(',');
		_buf.append("numSuccessfulRolls=");
		_buf.appendInt(numSuccessfulRolls);
		_buf.append(',');
		_buf.append("incompleteRolls=");
		incompleteRolls.toTraceString(_buf);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDesc", errDesc, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("numSuccessfulRolls", numSuccessfulRolls, _buf);
		incompleteRolls.toXmlString("incompleteRolls", _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDesc"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDesc)) return false;
			}
			else if (_element.equals("numSuccessfulRolls"))
			{
				numSuccessfulRolls = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("incompleteRolls"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< MassRollIncompleteRoll, 4 > >::FromXmlString(_value, incompleteRolls)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if( errCode != 0 )
	{
		_msg.composeString(errDesc);
	}
	else
	{
		_msg.composeINT32(numSuccessfulRolls);
		incompleteRolls.composeMsg(_msg, _ignoreJSON);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode != 0 )
	{
		_parser.parseStringP(errDesc);
	}
	else
	{
		_parser.parseINT32(numSuccessfulRolls);
		incompleteRolls.parseMsg(_parser);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if( errCode != 0 )
	{
		_jsonstr.compose("errDesc", errDesc);
	}
	else
	{
		_jsonstr.compose("numSuccessfulRolls", numSuccessfulRolls);
		_jsonstr.compose("incompleteRolls", incompleteRolls);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDesc", errDesc);
	}
	else
	{
		_jparser.parseByNameThrow("numSuccessfulRolls", numSuccessfulRolls);
		_jparser.parseByNameThrow("incompleteRolls", incompleteRolls);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		PString errDesc; _jparser.validateByNameThrow("errDesc", errDesc);
		AtfValidator::validateInt(_descr, "errDesc", errDesc.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		INT32 numSuccessfulRolls; _jparser.validateByNameThrow("numSuccessfulRolls", numSuccessfulRolls);
		AtfValidator::validateInt(_descr, "numSuccessfulRolls", numSuccessfulRolls, _checker, __FILE__, __LINE__);
		Atf::AtfVectorBase< MassRollIncompleteRoll > incompleteRolls; _jparser.validateByNameThrow("incompleteRolls", incompleteRolls);
		AtfValidator::validateInt(_descr, "incompleteRolls", incompleteRolls.size(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
	}
	else
	{
		INT32 numSuccessfulRolls; _parser.parseINT32(numSuccessfulRolls);
		AtfValidator::validateInt(_descr, "numSuccessfulRolls", numSuccessfulRolls, _checker, __FILE__, __LINE__);
		PString _descbuf;
		int szIncompleteRolls = Atf::LAtfVector< MassRollIncompleteRoll, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("incompleteRolls"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "incompleteRolls", szIncompleteRolls, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::clear()
{
	tournId = 0;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::equals(const Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS& _o) const
{
	return tournId == _o.tournId;
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS).append(")");
	_buf.append(',');
	_buf.append("tournId=");
	_buf.appendUint64(tournId);
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("tournId", tournId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("tournId"))
			{
				tournId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT64(tournId);
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(tournId);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("tournId", tournId);
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("tournId", tournId);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT64 tournId; _jparser.validateByNameThrow("tournId", tournId);
	AtfValidator::validateUint(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT64 tournId; _parser.parseUINT64(tournId);
	AtfValidator::validateUint(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY
//=================================================================

MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY()
{
	clear();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::clear()
{
	errCode = 0;
	errDesc.clear();
	address.clear();
	instances.clear();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::equals(const Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDesc, _o.errDesc) &&
		Atf::atfPStringEquals(address, _o.address) &&
		instances.equals(_o.instances);
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY*)_other));
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
	}
	else
	{
		_buf.append(',');
		_buf.append("address=");
		_buf.append(address);
		_buf.append(',');
		_buf.append("instances=");
		instances.toTraceString(_buf);
	}
	return _buf.c_str();
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if( errCode != 0 )
	{
		Atf::XmlElement::encodeAsXmlElement("errDesc", errDesc, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("address", address, _buf);
		instances.toXmlString("instances", _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDesc"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDesc)) return false;
			}
			else if (_element.equals("address"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, address)) return false;
			}
			else if (_element.equals("instances"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< PString, 4 > >::FromXmlString(_value, instances)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if( errCode != 0 )
	{
		_msg.composeString(errDesc);
	}
	else
	{
		_msg.composeString(address);
		instances.composeMsg(_msg, _ignoreJSON);
	}
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode != 0 )
	{
		_parser.parseStringP(errDesc);
	}
	else
	{
		_parser.parseStringP(address);
		instances.parseMsg(_parser);
	}
}

const char *MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if( errCode != 0 )
	{
		_jsonstr.compose("errDesc", errDesc);
	}
	else
	{
		_jsonstr.compose("address", address);
		_jsonstr.compose("instances", instances);
	}
	return _buf.c_str();
}

void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if( errCode != 0 )
	{
		_jparser.parseByNameThrow("errDesc", errDesc);
	}
	else
	{
		_jparser.parseByNameThrow("address", address);
		_jparser.parseByNameThrow("instances", instances);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		PString errDesc; _jparser.validateByNameThrow("errDesc", errDesc);
		AtfValidator::validateInt(_descr, "errDesc", errDesc.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		PString address; _jparser.validateByNameThrow("address", address);
		AtfValidator::validateInt(_descr, "address", address.length(), _checker, __FILE__, __LINE__);
		Atf::AtfVectorBase< PString > instances; _jparser.validateByNameThrow("instances", instances);
		AtfValidator::validateInt(_descr, "instances", instances.size(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void MainLobbyMsgs::adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
	}
	else
	{
		_parser.parseStringN(_dummy, 0, "address"); size_t szAddress = strlen(_dummy);
		AtfValidator::validateInt(_descr, "address", szAddress, _checker, __FILE__, __LINE__);
		PString _descbuf;
		int szInstances = Atf::LAtfVector< PString, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("instances"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "instances", szInstances, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ Atf::MessageProtocol* MainLobbyMsgs::ProtocolFactory::createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId)
{
	Atf::MessageProtocol *_obj = NULL;

	if(!strcmp(_nameSpace, "adminMsgs"))
	{
		switch(_msgId)
		{
			case MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS(); break;
			case MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_INIT: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE(); break;
			case MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY(); break;
			case MSG_ADMIN_LOBBY_RESTORE_TGM: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM(); break;
			case MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY(); break;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY(); break;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY(); break;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY(); break;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY(); break;
			case MSG_ADMIN_LOBBY_SHUTDOWN_TGM: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM(); break;
			case MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY: _obj = new adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY(); break;
			case MSG_LOBBY_ADMIN_APPROVE_USERS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS(); break;
			case MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY(); break;
			case MSG_LOBBY_ADMIN_BLITZ_ADDR: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR(); break;
			case MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY(); break;
			case MSG_LOBBY_ADMIN_BROADCAST: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST(); break;
			case MSG_LOBBY_ADMIN_BROADCAST_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY(); break;
			case MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT(); break;
			case MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY(); break;
			case MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN(); break;
			case MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY(); break;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT(); break;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY(); break;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS(); break;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2(); break;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY(); break;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY(); break;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME(); break;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY(); break;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS(); break;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY(); break;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ(); break;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY(); break;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE(); break;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY(); break;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN(); break;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY(); break;
			case MSG_LOBBY_ADMIN_CLIENT_DATA_MINING: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING(); break;
			case MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY(); break;
			case MSG_LOBBY_ADMIN_CLOSE_TABLE: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE(); break;
			case MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY(); break;
			case MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY(); break;
			case MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY(); break;
			case MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT(); break;
			case MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY(); break;
			case MSG_LOBBY_ADMIN_GET_CHALLENGE_QA: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA(); break;
			case MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY(); break;
			case MSG_LOBBY_ADMIN_GET_CHAT_STATUS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS(); break;
			case MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY(); break;
			case MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY(); break;
			case MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY(); break;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS(); break;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2(); break;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY(); break;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY(); break;
			case MSG_LOBBY_ADMIN_I18N_BROADCAST: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST(); break;
			case MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY(); break;
			case MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE(); break;
			case MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY(); break;
			case MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY(); break;
			case MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY(); break;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER(); break;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE(); break;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY(); break;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY(); break;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE(); break;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY(); break;
			case MSG_LOBBY_ADMIN_MANAGE_INSTALLID: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID(); break;
			case MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY(); break;
			case MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS(); break;
			case MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY(); break;
			case MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS(); break;
			case MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY(); break;
			case MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS(); break;
			case MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY(); break;
			case MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER(); break;
			case MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY(); break;
			case MSG_LOBBY_ADMIN_MODERATOR_SWITCH: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH(); break;
			case MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY(); break;
			case MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS(); break;
			case MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY(); break;
			case MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING(); break;
			case MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY(); break;
			case MSG_LOBBY_ADMIN_RESUME_DEALING: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING(); break;
			case MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY(); break;
			case MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS(); break;
			case MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY(); break;
			case MSG_LOBBY_ADMIN_RESUME_TOURNREGEN: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN(); break;
			case MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY(); break;
			case MSG_LOBBY_ADMIN_REVOKE_CHAT: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT(); break;
			case MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY(); break;
			case MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS(); break;
			case MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY(); break;
			case MSG_LOBBY_ADMIN_SET_CHAT_STATUS: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS(); break;
			case MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY(); break;
			case MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2(); break;
			case MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY(); break;
			case MSG_LOBBY_ADMIN_SET_PRIVILEGES: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES(); break;
			case MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY(); break;
			case MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO(); break;
			case MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY(); break;
			case MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING(); break;
			case MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY(); break;
			case MSG_LOBBY_ADMIN_STOP_DEALING: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING(); break;
			case MSG_LOBBY_ADMIN_STOP_DEALING_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY(); break;
			case MSG_LOBBY_ADMIN_STOP_TOURNREGEN: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN(); break;
			case MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY(); break;
			case MSG_LOBBY_ADMIN_TABLE_MESSAGE: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE(); break;
			case MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY(); break;
			case MSG_LOBBY_ADMIN_TOURN_ADDR: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR(); break;
			case MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY(); break;
			case MSG_LOBBY_RESEND_MOBILE_VALIDATION: _obj = new adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION(); break;
			case MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY(); break;
			case MSG_LOBBY_SETUP_INFO: _obj = new adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO(); break;
			case MSG_LOBBY_SETUP_INFO_REPLY: _obj = new adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY(); break;
		}
	}
	
	return _obj;
}

/* static */ bool MainLobbyMsgs::ProtocolFactory::validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "adminMsgs"))
	{
		switch(_msgId)
		{
			case MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS: adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_INIT: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_RESTORE_TGM: adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHUTDOWN_TGM: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_APPROVE_USERS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_BLITZ_ADDR: adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_BROADCAST: adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_BROADCAST_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLIENT_DATA_MINING: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLOSE_TABLE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT: adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CHALLENGE_QA: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CHAT_STATUS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_I18N_BROADCAST: adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MANAGE_INSTALLID: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MODERATOR_SWITCH: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_DEALING: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_TOURNREGEN: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_REVOKE_CHAT: adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_CHAT_STATUS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_PRIVILEGES: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_DEALING: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_DEALING_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_TOURNREGEN: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_TABLE_MESSAGE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_TOURN_ADDR: adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_RESEND_MOBILE_VALIDATION: adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY: adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_SETUP_INFO: adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_SETUP_INFO_REPLY: adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

/* static */ bool MainLobbyMsgs::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "adminMsgs"))
	{
		switch(_msgId)
		{
			case MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS: adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_GET_TOURN_TABLE_OBJECTS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_COMMIT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_DETAILED_STATUS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_INIT: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_INIT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_RESULTS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_SUMMARY_STATUS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_MASS_ROLL_UPDATE_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_RESTORE_TGM: adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_RESTORE_TGM_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_TABLE_NOTIFY_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHARED_STAKES_USER_NOTIFY_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHUTDOWN_TGM: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY: adminMsgs::Protocol_MSG_ADMIN_LOBBY_SHUTDOWN_TGM_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_APPROVE_USERS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_APPROVE_USERS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_BLITZ_ADDR: adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_BLITZ_ADDR_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_BROADCAST: adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_BROADCAST_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_BROADCAST_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RANGE_TOURNAMENT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_RUNNING_TOURN_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS2_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CANCEL_TOURNAMENT_WITHUSERS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_NAME_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CHANGE_TOURN_STATUS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_BLITZ_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TABLE_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLEANUP_DEAD_TOURN_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLIENT_DATA_MINING: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLIENT_DATA_MINING_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLOSE_TABLE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_CLOSE_TABLE_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_DELETE_PUBL_PROPERTY_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT: adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_DESTROY_TOURNAMENT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CHALLENGE_QA: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHALLENGE_QA_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CHAT_STATUS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CHAT_STATUS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_CLIENT_VISIBILITY_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS2_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_GET_UNHANDLED_RESURRECTED_TOURS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_I18N_BROADCAST: adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_I18N_BROADCAST_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_KICK_USER_FORM_TABLE_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LIST_PUBL_PROPERTY_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REMOVE_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_LOBBY_FLYER_UPDATE_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MANAGE_INSTALLID: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MANAGE_INSTALLID_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_CANCEL_RESURRECTED_TOURNS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_RESUME_RESURRECTED_TOURNS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_ROLLBACK_RESURRECTED_TOURNS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MASS_UNREGISTER_USER_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MODERATOR_SWITCH: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_MODERATOR_SWITCH_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_ALLTOURNAMENTS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_BLITZ_DEALING_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_DEALING: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_DEALING_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_RESURRECTED_TOURS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_TOURNREGEN: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_RESUME_TOURNREGEN_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_REVOKE_CHAT: adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_REVOKE_CHAT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_ROLLFORWARD_RESURRECTED_TOURS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_CHAT_STATUS: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_CHAT_STATUS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_HIDE_CASINO_GAMES_FLAGS2_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_PRIVILEGES: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_PRIVILEGES_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_SET_TABLE_PAUSING_INFO_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_BLITZ_DEALING_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_DEALING: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_DEALING_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_DEALING_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_TOURNREGEN: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_STOP_TOURNREGEN_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_TABLE_MESSAGE: adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_TABLE_MESSAGE_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_TOURN_ADDR: adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY: adminMsgs::Protocol_MSG_LOBBY_ADMIN_TOURN_ADDR_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_RESEND_MOBILE_VALIDATION: adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY: adminMsgs::Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_SETUP_INFO: adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBY_SETUP_INFO_REPLY: adminMsgs::Protocol_MSG_LOBBY_SETUP_INFO_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

