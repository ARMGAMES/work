/**
 * AsiaB2B_API_thin.cpp
 *
 * This file was auto-generated from AsiaB2B_API.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin -genMoveConstructor -dontGenValidationFuncs AsiaB2B_API.txt
 */
 
#include "AsiaB2B_API_thin.h"

//=================================================================
//                Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus
//=================================================================

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus::Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus::Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus(Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus&& _o)
	: requestId(std::move(_o.requestId))
	, operatorId(std::move(_o.operatorId))
	, agAccountId(std::move(_o.agAccountId))
{
}

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus& AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus::operator=(Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		operatorId = std::move(_o.operatorId);
		agAccountId = std::move(_o.agAccountId);
	}
	return *this;
}

#endif

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus::clear()
{
	requestId.clear();
	operatorId.clear();
	agAccountId.clear();
}

bool AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus::equals(const Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus& _o) const
{
	return requestId.equals(_o.requestId) &&
		operatorId.equals(_o.operatorId) &&
		agAccountId.equals(_o.agAccountId);
}

const char *AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ASIA_GAMING_Q_GetAccountStatus).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("operatorId=");
	_buf.append(operatorId);
	_buf.append(',');
	_buf.append("agAccountId=");
	_buf.append(agAccountId);
	return _buf.c_str();
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(operatorId);
	_msg.composeString(agAccountId);
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_GetAccountStatus::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(operatorId);
	_parser.parseStringP(agAccountId);
}

//=================================================================
//                Protocol_MSG_ASIA_GAMING_A_GetAccountStatus
//=================================================================

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_GetAccountStatus::Protocol_MSG_ASIA_GAMING_A_GetAccountStatus()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_GetAccountStatus::Protocol_MSG_ASIA_GAMING_A_GetAccountStatus(Protocol_MSG_ASIA_GAMING_A_GetAccountStatus&& _o)
	: requestId(std::move(_o.requestId))
	, operatorId(std::move(_o.operatorId))
	, agAccountId(std::move(_o.agAccountId))
	, psAccountStatus(std::move(_o.psAccountStatus))
	, psBalanceCurrency(std::move(_o.psBalanceCurrency))
	, psBalanceAmount(std::move(_o.psBalanceAmount))
	, agBalanceCurrency(std::move(_o.agBalanceCurrency))
	, agBalanceAmount(std::move(_o.agBalanceAmount))
	, psExchangeRate(std::move(_o.psExchangeRate))
{
}

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_GetAccountStatus& AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_GetAccountStatus::operator=(Protocol_MSG_ASIA_GAMING_A_GetAccountStatus&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		operatorId = std::move(_o.operatorId);
		agAccountId = std::move(_o.agAccountId);
		psAccountStatus = std::move(_o.psAccountStatus);
		psBalanceCurrency = std::move(_o.psBalanceCurrency);
		psBalanceAmount = std::move(_o.psBalanceAmount);
		agBalanceCurrency = std::move(_o.agBalanceCurrency);
		agBalanceAmount = std::move(_o.agBalanceAmount);
		psExchangeRate = std::move(_o.psExchangeRate);
	}
	return *this;
}

#endif

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_GetAccountStatus::clear()
{
	requestId.clear();
	operatorId.clear();
	agAccountId.clear();
	psAccountStatus = 0;
	psBalanceCurrency.clear();
	psBalanceAmount = 0;
	agBalanceCurrency.clear();
	agBalanceAmount = 0;
	psExchangeRate.clear();
}

bool AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_GetAccountStatus::equals(const Protocol_MSG_ASIA_GAMING_A_GetAccountStatus& _o) const
{
	return requestId.equals(_o.requestId) &&
		operatorId.equals(_o.operatorId) &&
		agAccountId.equals(_o.agAccountId) &&
		psAccountStatus == _o.psAccountStatus &&
		psBalanceCurrency.equals(_o.psBalanceCurrency) &&
		psBalanceAmount == _o.psBalanceAmount &&
		agBalanceCurrency.equals(_o.agBalanceCurrency) &&
		agBalanceAmount == _o.agBalanceAmount &&
		psExchangeRate.equals(_o.psExchangeRate);
}

const char *AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_GetAccountStatus::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ASIA_GAMING_A_GetAccountStatus).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("operatorId=");
	_buf.append(operatorId);
	_buf.append(',');
	_buf.append("agAccountId=");
	_buf.append(agAccountId);
	_buf.append(',');
	_buf.append("psAccountStatus=");
	_buf.appendUint(psAccountStatus);
	_buf.append(',');
	_buf.append("psBalanceCurrency=");
	_buf.append(psBalanceCurrency);
	_buf.append(',');
	_buf.append("psBalanceAmount=");
	_buf.appendInt64(psBalanceAmount);
	_buf.append(',');
	_buf.append("agBalanceCurrency=");
	_buf.append(agBalanceCurrency);
	_buf.append(',');
	_buf.append("agBalanceAmount=");
	_buf.appendInt64(agBalanceAmount);
	_buf.append(',');
	_buf.append("psExchangeRate=");
	_buf.append(psExchangeRate);
	return _buf.c_str();
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_GetAccountStatus::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(operatorId);
	_msg.composeString(agAccountId);
	_msg.composeUINT16(psAccountStatus);
	_msg.composeString(psBalanceCurrency);
	_msg.composeINT64(psBalanceAmount);
	_msg.composeString(agBalanceCurrency);
	_msg.composeINT64(agBalanceAmount);
	_msg.composeString(psExchangeRate);
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_GetAccountStatus::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(operatorId);
	_parser.parseStringP(agAccountId);
	_parser.parseUINT16(psAccountStatus);
	_parser.parseStringP(psBalanceCurrency);
	_parser.parseINT64(psBalanceAmount);
	_parser.parseStringP(agBalanceCurrency);
	_parser.parseINT64(agBalanceAmount);
	_parser.parseStringP(psExchangeRate);
}

//=================================================================
//                Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC
//=================================================================

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC::Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC::Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC(Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC&& _o)
	: requestId(std::move(_o.requestId))
	, operatorId(std::move(_o.operatorId))
	, agAccountId(std::move(_o.agAccountId))
	, agKYCStatus(std::move(_o.agKYCStatus))
{
}

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC& AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC::operator=(Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		operatorId = std::move(_o.operatorId);
		agAccountId = std::move(_o.agAccountId);
		agKYCStatus = std::move(_o.agKYCStatus);
	}
	return *this;
}

#endif

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC::clear()
{
	requestId.clear();
	operatorId.clear();
	agAccountId.clear();
	agKYCStatus = 0;
}

bool AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC::equals(const Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC& _o) const
{
	return requestId.equals(_o.requestId) &&
		operatorId.equals(_o.operatorId) &&
		agAccountId.equals(_o.agAccountId) &&
		agKYCStatus == _o.agKYCStatus;
}

const char *AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ASIA_GAMING_Q_DoUpdateKYC).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("operatorId=");
	_buf.append(operatorId);
	_buf.append(',');
	_buf.append("agAccountId=");
	_buf.append(agAccountId);
	_buf.append(',');
	_buf.append("agKYCStatus=");
	_buf.appendUint(agKYCStatus);
	return _buf.c_str();
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(operatorId);
	_msg.composeString(agAccountId);
	_msg.composeUINT16(agKYCStatus);
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_DoUpdateKYC::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(operatorId);
	_parser.parseStringP(agAccountId);
	_parser.parseUINT16(agKYCStatus);
}

//=================================================================
//                Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC
//=================================================================

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC::Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC::Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC(Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC&& _o)
	: requestId(std::move(_o.requestId))
{
}

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC& AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC::operator=(Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
	}
	return *this;
}

#endif

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC::clear()
{
	requestId.clear();
}

bool AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC::equals(const Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC& _o) const
{
	return requestId.equals(_o.requestId);
}

const char *AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ASIA_GAMING_A_DoUpdateKYC).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	return _buf.c_str();
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_DoUpdateKYC::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
}

//=================================================================
//                Protocol_MSG_ASIA_GAMING_Q_PushTransferIn
//=================================================================

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PushTransferIn::Protocol_MSG_ASIA_GAMING_Q_PushTransferIn()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PushTransferIn::Protocol_MSG_ASIA_GAMING_Q_PushTransferIn(Protocol_MSG_ASIA_GAMING_Q_PushTransferIn&& _o)
	: requestId(std::move(_o.requestId))
	, operatorId(std::move(_o.operatorId))
	, agAccountId(std::move(_o.agAccountId))
	, agTransactionId(std::move(_o.agTransactionId))
	, psTransactionCurrency(std::move(_o.psTransactionCurrency))
	, psTransactionAmount(std::move(_o.psTransactionAmount))
{
}

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PushTransferIn& AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PushTransferIn::operator=(Protocol_MSG_ASIA_GAMING_Q_PushTransferIn&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		operatorId = std::move(_o.operatorId);
		agAccountId = std::move(_o.agAccountId);
		agTransactionId = std::move(_o.agTransactionId);
		psTransactionCurrency = std::move(_o.psTransactionCurrency);
		psTransactionAmount = std::move(_o.psTransactionAmount);
	}
	return *this;
}

#endif

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PushTransferIn::clear()
{
	requestId.clear();
	operatorId.clear();
	agAccountId.clear();
	agTransactionId.clear();
	psTransactionCurrency.clear();
	psTransactionAmount = 0;
}

bool AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PushTransferIn::equals(const Protocol_MSG_ASIA_GAMING_Q_PushTransferIn& _o) const
{
	return requestId.equals(_o.requestId) &&
		operatorId.equals(_o.operatorId) &&
		agAccountId.equals(_o.agAccountId) &&
		agTransactionId.equals(_o.agTransactionId) &&
		psTransactionCurrency.equals(_o.psTransactionCurrency) &&
		psTransactionAmount == _o.psTransactionAmount;
}

const char *AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PushTransferIn::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ASIA_GAMING_Q_PushTransferIn).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("operatorId=");
	_buf.append(operatorId);
	_buf.append(',');
	_buf.append("agAccountId=");
	_buf.append(agAccountId);
	_buf.append(',');
	_buf.append("agTransactionId=");
	_buf.append(agTransactionId);
	_buf.append(',');
	_buf.append("psTransactionCurrency=");
	_buf.append(psTransactionCurrency);
	_buf.append(',');
	_buf.append("psTransactionAmount=");
	_buf.appendUint64(psTransactionAmount);
	return _buf.c_str();
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PushTransferIn::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(operatorId);
	_msg.composeString(agAccountId);
	_msg.composeString(agTransactionId);
	_msg.composeString(psTransactionCurrency);
	_msg.composeUINT64(psTransactionAmount);
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PushTransferIn::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(operatorId);
	_parser.parseStringP(agAccountId);
	_parser.parseStringP(agTransactionId);
	_parser.parseStringP(psTransactionCurrency);
	_parser.parseUINT64(psTransactionAmount);
}

//=================================================================
//                Protocol_MSG_ASIA_GAMING_A_PushTransferIn
//=================================================================

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PushTransferIn::Protocol_MSG_ASIA_GAMING_A_PushTransferIn()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PushTransferIn::Protocol_MSG_ASIA_GAMING_A_PushTransferIn(Protocol_MSG_ASIA_GAMING_A_PushTransferIn&& _o)
	: requestId(std::move(_o.requestId))
	, operatorId(std::move(_o.operatorId))
	, agAccountId(std::move(_o.agAccountId))
	, agTransactionId(std::move(_o.agTransactionId))
	, psTransactionId(std::move(_o.psTransactionId))
	, agTransactionCurrency(std::move(_o.agTransactionCurrency))
	, agTransactionAmount(std::move(_o.agTransactionAmount))
	, psTransactionCurrency(std::move(_o.psTransactionCurrency))
	, psTransactionAmount(std::move(_o.psTransactionAmount))
	, psExchangeRate(std::move(_o.psExchangeRate))
	, psTransactionTimestamp(std::move(_o.psTransactionTimestamp))
{
}

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PushTransferIn& AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PushTransferIn::operator=(Protocol_MSG_ASIA_GAMING_A_PushTransferIn&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		operatorId = std::move(_o.operatorId);
		agAccountId = std::move(_o.agAccountId);
		agTransactionId = std::move(_o.agTransactionId);
		psTransactionId = std::move(_o.psTransactionId);
		agTransactionCurrency = std::move(_o.agTransactionCurrency);
		agTransactionAmount = std::move(_o.agTransactionAmount);
		psTransactionCurrency = std::move(_o.psTransactionCurrency);
		psTransactionAmount = std::move(_o.psTransactionAmount);
		psExchangeRate = std::move(_o.psExchangeRate);
		psTransactionTimestamp = std::move(_o.psTransactionTimestamp);
	}
	return *this;
}

#endif

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PushTransferIn::clear()
{
	requestId.clear();
	operatorId.clear();
	agAccountId.clear();
	agTransactionId.clear();
	psTransactionId = 0;
	agTransactionCurrency.clear();
	agTransactionAmount = 0;
	psTransactionCurrency.clear();
	psTransactionAmount = 0;
	psExchangeRate.clear();
	psTransactionTimestamp.clear();
}

bool AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PushTransferIn::equals(const Protocol_MSG_ASIA_GAMING_A_PushTransferIn& _o) const
{
	return requestId.equals(_o.requestId) &&
		operatorId.equals(_o.operatorId) &&
		agAccountId.equals(_o.agAccountId) &&
		agTransactionId.equals(_o.agTransactionId) &&
		psTransactionId == _o.psTransactionId &&
		agTransactionCurrency.equals(_o.agTransactionCurrency) &&
		agTransactionAmount == _o.agTransactionAmount &&
		psTransactionCurrency.equals(_o.psTransactionCurrency) &&
		psTransactionAmount == _o.psTransactionAmount &&
		psExchangeRate.equals(_o.psExchangeRate) &&
		psTransactionTimestamp.equals(_o.psTransactionTimestamp);
}

const char *AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PushTransferIn::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ASIA_GAMING_A_PushTransferIn).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("operatorId=");
	_buf.append(operatorId);
	_buf.append(',');
	_buf.append("agAccountId=");
	_buf.append(agAccountId);
	_buf.append(',');
	_buf.append("agTransactionId=");
	_buf.append(agTransactionId);
	_buf.append(',');
	_buf.append("psTransactionId=");
	_buf.appendUint64(psTransactionId);
	_buf.append(',');
	_buf.append("agTransactionCurrency=");
	_buf.append(agTransactionCurrency);
	_buf.append(',');
	_buf.append("agTransactionAmount=");
	_buf.appendUint64(agTransactionAmount);
	_buf.append(',');
	_buf.append("psTransactionCurrency=");
	_buf.append(psTransactionCurrency);
	_buf.append(',');
	_buf.append("psTransactionAmount=");
	_buf.appendUint64(psTransactionAmount);
	_buf.append(',');
	_buf.append("psExchangeRate=");
	_buf.append(psExchangeRate);
	_buf.append(',');
	_buf.append("psTransactionTimestamp=");
	_buf.append(psTransactionTimestamp);
	return _buf.c_str();
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PushTransferIn::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(operatorId);
	_msg.composeString(agAccountId);
	_msg.composeString(agTransactionId);
	_msg.composeUINT64(psTransactionId);
	_msg.composeString(agTransactionCurrency);
	_msg.composeUINT64(agTransactionAmount);
	_msg.composeString(psTransactionCurrency);
	_msg.composeUINT64(psTransactionAmount);
	_msg.composeString(psExchangeRate);
	_msg.composeString(psTransactionTimestamp);
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PushTransferIn::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(operatorId);
	_parser.parseStringP(agAccountId);
	_parser.parseStringP(agTransactionId);
	_parser.parseUINT64(psTransactionId);
	_parser.parseStringP(agTransactionCurrency);
	_parser.parseUINT64(agTransactionAmount);
	_parser.parseStringP(psTransactionCurrency);
	_parser.parseUINT64(psTransactionAmount);
	_parser.parseStringP(psExchangeRate);
	_parser.parseStringP(psTransactionTimestamp);
}

//=================================================================
//                Protocol_MSG_ASIA_GAMING_Q_PullTransferOut
//=================================================================

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PullTransferOut::Protocol_MSG_ASIA_GAMING_Q_PullTransferOut()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PullTransferOut::Protocol_MSG_ASIA_GAMING_Q_PullTransferOut(Protocol_MSG_ASIA_GAMING_Q_PullTransferOut&& _o)
	: requestId(std::move(_o.requestId))
	, operatorId(std::move(_o.operatorId))
	, agAccountId(std::move(_o.agAccountId))
	, agTransactionId(std::move(_o.agTransactionId))
	, psTransactionCurrency(std::move(_o.psTransactionCurrency))
	, psTransactionAmount(std::move(_o.psTransactionAmount))
{
}

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PullTransferOut& AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PullTransferOut::operator=(Protocol_MSG_ASIA_GAMING_Q_PullTransferOut&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		operatorId = std::move(_o.operatorId);
		agAccountId = std::move(_o.agAccountId);
		agTransactionId = std::move(_o.agTransactionId);
		psTransactionCurrency = std::move(_o.psTransactionCurrency);
		psTransactionAmount = std::move(_o.psTransactionAmount);
	}
	return *this;
}

#endif

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PullTransferOut::clear()
{
	requestId.clear();
	operatorId.clear();
	agAccountId.clear();
	agTransactionId.clear();
	psTransactionCurrency.clear();
	psTransactionAmount = 0;
}

bool AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PullTransferOut::equals(const Protocol_MSG_ASIA_GAMING_Q_PullTransferOut& _o) const
{
	return requestId.equals(_o.requestId) &&
		operatorId.equals(_o.operatorId) &&
		agAccountId.equals(_o.agAccountId) &&
		agTransactionId.equals(_o.agTransactionId) &&
		psTransactionCurrency.equals(_o.psTransactionCurrency) &&
		psTransactionAmount == _o.psTransactionAmount;
}

const char *AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PullTransferOut::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ASIA_GAMING_Q_PullTransferOut).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("operatorId=");
	_buf.append(operatorId);
	_buf.append(',');
	_buf.append("agAccountId=");
	_buf.append(agAccountId);
	_buf.append(',');
	_buf.append("agTransactionId=");
	_buf.append(agTransactionId);
	_buf.append(',');
	_buf.append("psTransactionCurrency=");
	_buf.append(psTransactionCurrency);
	_buf.append(',');
	_buf.append("psTransactionAmount=");
	_buf.appendUint64(psTransactionAmount);
	return _buf.c_str();
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PullTransferOut::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(operatorId);
	_msg.composeString(agAccountId);
	_msg.composeString(agTransactionId);
	_msg.composeString(psTransactionCurrency);
	_msg.composeUINT64(psTransactionAmount);
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_Q_PullTransferOut::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(operatorId);
	_parser.parseStringP(agAccountId);
	_parser.parseStringP(agTransactionId);
	_parser.parseStringP(psTransactionCurrency);
	_parser.parseUINT64(psTransactionAmount);
}

//=================================================================
//                Protocol_MSG_ASIA_GAMING_A_PullTransferOut
//=================================================================

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PullTransferOut::Protocol_MSG_ASIA_GAMING_A_PullTransferOut()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PullTransferOut::Protocol_MSG_ASIA_GAMING_A_PullTransferOut(Protocol_MSG_ASIA_GAMING_A_PullTransferOut&& _o)
	: requestId(std::move(_o.requestId))
	, operatorId(std::move(_o.operatorId))
	, agAccountId(std::move(_o.agAccountId))
	, agTransactionId(std::move(_o.agTransactionId))
	, psTransactionId(std::move(_o.psTransactionId))
	, agTransactionCurrency(std::move(_o.agTransactionCurrency))
	, agTransactionAmount(std::move(_o.agTransactionAmount))
	, psTransactionCurrency(std::move(_o.psTransactionCurrency))
	, psTransactionAmount(std::move(_o.psTransactionAmount))
	, psExchangeRate(std::move(_o.psExchangeRate))
	, psTransactionTimestamp(std::move(_o.psTransactionTimestamp))
{
}

AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PullTransferOut& AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PullTransferOut::operator=(Protocol_MSG_ASIA_GAMING_A_PullTransferOut&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		operatorId = std::move(_o.operatorId);
		agAccountId = std::move(_o.agAccountId);
		agTransactionId = std::move(_o.agTransactionId);
		psTransactionId = std::move(_o.psTransactionId);
		agTransactionCurrency = std::move(_o.agTransactionCurrency);
		agTransactionAmount = std::move(_o.agTransactionAmount);
		psTransactionCurrency = std::move(_o.psTransactionCurrency);
		psTransactionAmount = std::move(_o.psTransactionAmount);
		psExchangeRate = std::move(_o.psExchangeRate);
		psTransactionTimestamp = std::move(_o.psTransactionTimestamp);
	}
	return *this;
}

#endif

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PullTransferOut::clear()
{
	requestId.clear();
	operatorId.clear();
	agAccountId.clear();
	agTransactionId.clear();
	psTransactionId = 0;
	agTransactionCurrency.clear();
	agTransactionAmount = 0;
	psTransactionCurrency.clear();
	psTransactionAmount = 0;
	psExchangeRate.clear();
	psTransactionTimestamp.clear();
}

bool AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PullTransferOut::equals(const Protocol_MSG_ASIA_GAMING_A_PullTransferOut& _o) const
{
	return requestId.equals(_o.requestId) &&
		operatorId.equals(_o.operatorId) &&
		agAccountId.equals(_o.agAccountId) &&
		agTransactionId.equals(_o.agTransactionId) &&
		psTransactionId == _o.psTransactionId &&
		agTransactionCurrency.equals(_o.agTransactionCurrency) &&
		agTransactionAmount == _o.agTransactionAmount &&
		psTransactionCurrency.equals(_o.psTransactionCurrency) &&
		psTransactionAmount == _o.psTransactionAmount &&
		psExchangeRate.equals(_o.psExchangeRate) &&
		psTransactionTimestamp.equals(_o.psTransactionTimestamp);
}

const char *AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PullTransferOut::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_ASIA_GAMING_A_PullTransferOut).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("operatorId=");
	_buf.append(operatorId);
	_buf.append(',');
	_buf.append("agAccountId=");
	_buf.append(agAccountId);
	_buf.append(',');
	_buf.append("agTransactionId=");
	_buf.append(agTransactionId);
	_buf.append(',');
	_buf.append("psTransactionId=");
	_buf.appendUint64(psTransactionId);
	_buf.append(',');
	_buf.append("agTransactionCurrency=");
	_buf.append(agTransactionCurrency);
	_buf.append(',');
	_buf.append("agTransactionAmount=");
	_buf.appendUint64(agTransactionAmount);
	_buf.append(',');
	_buf.append("psTransactionCurrency=");
	_buf.append(psTransactionCurrency);
	_buf.append(',');
	_buf.append("psTransactionAmount=");
	_buf.appendUint64(psTransactionAmount);
	_buf.append(',');
	_buf.append("psExchangeRate=");
	_buf.append(psExchangeRate);
	_buf.append(',');
	_buf.append("psTransactionTimestamp=");
	_buf.append(psTransactionTimestamp);
	return _buf.c_str();
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PullTransferOut::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(operatorId);
	_msg.composeString(agAccountId);
	_msg.composeString(agTransactionId);
	_msg.composeUINT64(psTransactionId);
	_msg.composeString(agTransactionCurrency);
	_msg.composeUINT64(agTransactionAmount);
	_msg.composeString(psTransactionCurrency);
	_msg.composeUINT64(psTransactionAmount);
	_msg.composeString(psExchangeRate);
	_msg.composeString(psTransactionTimestamp);
}

void AsiaB2B::PlainAPI::Protocol_MSG_ASIA_GAMING_A_PullTransferOut::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(operatorId);
	_parser.parseStringP(agAccountId);
	_parser.parseStringP(agTransactionId);
	_parser.parseUINT64(psTransactionId);
	_parser.parseStringP(agTransactionCurrency);
	_parser.parseUINT64(agTransactionAmount);
	_parser.parseStringP(psTransactionCurrency);
	_parser.parseUINT64(psTransactionAmount);
	_parser.parseStringP(psExchangeRate);
	_parser.parseStringP(psTransactionTimestamp);
}

