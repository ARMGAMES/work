/**
 * upserverprot.h
 *
 * This file was auto-generated from upserverprot.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor upserverprot.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_UPSERVERPROT_H
#define ATF_PROTOCOL_DEFFILE_UPSERVERPROT_H


#include "upserver/UPServer.h"

#include "upserver/upservercommonprot.h"					// @no_thin_version


//------------------------------------------------------------------------------
// Table subscribe for user updates; please note following 2 messages are identical
// they are separated intentionaly for possible future extensions
//------------------------------------------------------------------------------

#define UPS_Q_USERS_JOIN				1001 	// table or blitz lobby -> UPServer
#define UPS_A_USERS_JOIN				1002 	// UPServer -> table or blitz lobby

//------------------------------------------------------------------------------
// Table unsubscribe for user updates
//------------------------------------------------------------------------------

#define UPS_Q_USERS_LEFT				1003 	// table or blitz lobby -> UPServer
#define UPS_A_USERS_LEFT				1004 	// UPServer -> table or blitz lobby

//------------------------------------------------------------------------------
// Update user property
//------------------------------------------------------------------------------

#define UPS_Q_SET_PROPERTY					1005 	// MGLobby or other user property using component -> UPServer
#define UPS_A_SET_PROPERTY					1006 	// UPServer -> MGLobby or other user property using component

//------------------------------------------------------------------------------
// Subscription notificaiton
//------------------------------------------------------------------------------

// !!! WARNING !!! If you modify this message, please let testautomation team know.
#define UPS_NOTIFY_PROPERTY_UPDATED				1007 	// UPServer -> subscriber (table or blitz lobby)

#define UPS_NOTIFY_PROPERTY_UPDATED_SERVER		1008 	// UPServer -> subscriber (table or blitz lobby)

#define UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER 1009 	// UPServer -> subscriber (table or blitz lobby)

//------------------------------------------------------------------------------
// Table subscribe for observer updates; please note following 2 messages are identical
// they are separated intentionaly for possible future extensions
//------------------------------------------------------------------------------

#define UPS_Q_OBSERVERS_JOIN				1010 	// mglobbypoker -> UPServer
#define UPS_A_OBSERVERS_JOIN				1011 	// UPServer -> mglobbypoker

//------------------------------------------------------------------------------
// Table unsubscribe for observer updates
//------------------------------------------------------------------------------

#define UPS_Q_OBSERVERS_LEFT				1012 	// mglobbypoker  -> UPServer
#define UPS_A_OBSERVERS_LEFT				1013 	// UPServer -> mglobbypoker

#include "UserDefStructs.h"

namespace UPServer
{
	class ProtocolFactory
	{
	public:
		static Atf::MessageProtocol* createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId);
		static bool validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	//------------------------------------------------------------------------------

	struct UserPropertyNotification
	{
		// M(4M()) - M(userIntId,M())
		UINT32 userIntId;
		Atf::CopyableMsgBody userPropBody;

		UserPropertyNotification();
		void clear();
		bool equals(const UserPropertyNotification&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		UserPropertyNotification(UserPropertyNotification&&);
		UserPropertyNotification& operator=(UserPropertyNotification&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		UserPropertyNotification(const UserPropertyNotification&) = default;
		UserPropertyNotification& operator=(const UserPropertyNotification&) = default;
#endif
#endif
	};

	// PYR-44188
	struct SrvPropertyForCardMatch
	{
		// M(4ssb4848) - M(value,mgLobbyAddress,mgLobbyInstance,isExpired,blitzId,tournId,entryId,subGameId)
		INT32 value;	// so far this is a free format value
		PString mgLobbyAddress;
		PString mgLobbyInstance;
		bool isExpired;
		UINT32 blitzId;
		UINT64 tournId;
		UINT32 entryId;	// for blitz/tourn
		UINT64 subGameId;	// id of a child object of what ever is receiving this message, e.g., tableId of table in a tournament

		SrvPropertyForCardMatch();
		void clear();
		bool equals(const SrvPropertyForCardMatch&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		SrvPropertyForCardMatch(SrvPropertyForCardMatch&&);
		SrvPropertyForCardMatch& operator=(SrvPropertyForCardMatch&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		SrvPropertyForCardMatch(const SrvPropertyForCardMatch&) = default;
		SrvPropertyForCardMatch& operator=(const SrvPropertyForCardMatch&) = default;
#endif
#endif
	};

	struct PropertyForServer
	{
		// M(4M()) - M(propertyTypeId,M())
		INT32 propertyTypeId;	// please see UserPropertyType enum above; currently UserPropertyType_CardMatch is the only server property type
		Atf::CopyableMsgBody propertyBody;

		PropertyForServer();
		void clear();
		bool equals(const PropertyForServer&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		PropertyForServer(PropertyForServer&&);
		PropertyForServer& operator=(PropertyForServer&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		PropertyForServer(const PropertyForServer&) = default;
		PropertyForServer& operator=(const PropertyForServer&) = default;
#endif
#endif
	};

	struct UserPropertyNotificationForServer
	{
		// M(4b4<M(4M())>) - M(userIntId,isObserver,numProperties<M(propertyTypeId,M())>)
		UINT32 userIntId;
		bool isObserver;
		Atf::LAtfVector< PropertyForServer, 4 > properties;

		UserPropertyNotificationForServer();
		void clear();
		bool equals(const UserPropertyNotificationForServer&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		UserPropertyNotificationForServer(UserPropertyNotificationForServer&&);
		UserPropertyNotificationForServer& operator=(UserPropertyNotificationForServer&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		UserPropertyNotificationForServer(const UserPropertyNotificationForServer&) = default;
		UserPropertyNotificationForServer& operator=(const UserPropertyNotificationForServer&) = default;
#endif
#endif
	};

	struct TableSelfIdentity
	{
		// 8 - tableId
		UINT64 tableId;

		TableSelfIdentity();
		void clear();
		bool equals(const TableSelfIdentity&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct BlitzSelfIdentity
	{
		// 4 - blitzId
		UINT32 blitzId;

		BlitzSelfIdentity();
		void clear();
		bool equals(const BlitzSelfIdentity&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct MtlSelfIdentity
	{
		// 8 - tournId
		UINT64 tournId;

		MtlSelfIdentity();
		void clear();
		bool equals(const MtlSelfIdentity&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_UPS_Q_USERS_JOIN : public Atf::MessageProtocol
	{
		// 4<4> - numUserIntIds<userIntIds>
		Atf::LAtfVector< UINT32, 4 > userIntIds;

		Protocol_UPS_Q_USERS_JOIN();
		void clear() override;
		bool equals(const Protocol_UPS_Q_USERS_JOIN&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_Q_USERS_JOIN; }
		const char *getMsgIdString() const override { return "UPS_Q_USERS_JOIN"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_Q_USERS_JOIN(Protocol_UPS_Q_USERS_JOIN&&);
		Protocol_UPS_Q_USERS_JOIN& operator=(Protocol_UPS_Q_USERS_JOIN&&);
	private:
		Protocol_UPS_Q_USERS_JOIN(const Protocol_UPS_Q_USERS_JOIN&);  // prohibit
		Protocol_UPS_Q_USERS_JOIN& operator=(const Protocol_UPS_Q_USERS_JOIN&);  // prohibit
#endif
	};

	struct Protocol_UPS_A_USERS_JOIN : public Atf::MessageProtocol
	{
		// 2[s] - errCode[errStr]
		INT16 errCode;

		PString errStr;

		Protocol_UPS_A_USERS_JOIN();
		void clear() override;
		bool equals(const Protocol_UPS_A_USERS_JOIN&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_A_USERS_JOIN; }
		const char *getMsgIdString() const override { return "UPS_A_USERS_JOIN"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_A_USERS_JOIN(Protocol_UPS_A_USERS_JOIN&&);
		Protocol_UPS_A_USERS_JOIN& operator=(Protocol_UPS_A_USERS_JOIN&&);
	private:
		Protocol_UPS_A_USERS_JOIN(const Protocol_UPS_A_USERS_JOIN&);  // prohibit
		Protocol_UPS_A_USERS_JOIN& operator=(const Protocol_UPS_A_USERS_JOIN&);  // prohibit
#endif
	};

	struct Protocol_UPS_Q_USERS_LEFT : public Atf::MessageProtocol
	{
		// 4<4> - numUserIntIds<userIntIds>
		Atf::LAtfVector< UINT32, 4 > userIntIds;

		Protocol_UPS_Q_USERS_LEFT();
		void clear() override;
		bool equals(const Protocol_UPS_Q_USERS_LEFT&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_Q_USERS_LEFT; }
		const char *getMsgIdString() const override { return "UPS_Q_USERS_LEFT"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_Q_USERS_LEFT(Protocol_UPS_Q_USERS_LEFT&&);
		Protocol_UPS_Q_USERS_LEFT& operator=(Protocol_UPS_Q_USERS_LEFT&&);
	private:
		Protocol_UPS_Q_USERS_LEFT(const Protocol_UPS_Q_USERS_LEFT&);  // prohibit
		Protocol_UPS_Q_USERS_LEFT& operator=(const Protocol_UPS_Q_USERS_LEFT&);  // prohibit
#endif
	};

	struct Protocol_UPS_A_USERS_LEFT : public Atf::MessageProtocol
	{
		// 2[s] - errCode[errStr]
		INT16 errCode;

		PString errStr;

		Protocol_UPS_A_USERS_LEFT();
		void clear() override;
		bool equals(const Protocol_UPS_A_USERS_LEFT&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_A_USERS_LEFT; }
		const char *getMsgIdString() const override { return "UPS_A_USERS_LEFT"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_A_USERS_LEFT(Protocol_UPS_A_USERS_LEFT&&);
		Protocol_UPS_A_USERS_LEFT& operator=(Protocol_UPS_A_USERS_LEFT&&);
	private:
		Protocol_UPS_A_USERS_LEFT(const Protocol_UPS_A_USERS_LEFT&);  // prohibit
		Protocol_UPS_A_USERS_LEFT& operator=(const Protocol_UPS_A_USERS_LEFT&);  // prohibit
#endif
	};

	struct Protocol_UPS_Q_SET_PROPERTY : public Atf::MessageProtocol
	{
		//!  <FIXME>UPServerCommon::Property</FIXME> 4<4> -  <FIXME>property</FIXME> ,numUserIntIds<userIntIds>
		UPServerCommon::Property property;
		Atf::LAtfVector< UINT32, 4 > userIntIds;

		Protocol_UPS_Q_SET_PROPERTY();
		void clear() override;
		bool equals(const Protocol_UPS_Q_SET_PROPERTY&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_Q_SET_PROPERTY; }
		const char *getMsgIdString() const override { return "UPS_Q_SET_PROPERTY"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_Q_SET_PROPERTY(Protocol_UPS_Q_SET_PROPERTY&&);
		Protocol_UPS_Q_SET_PROPERTY& operator=(Protocol_UPS_Q_SET_PROPERTY&&);
	private:
		Protocol_UPS_Q_SET_PROPERTY(const Protocol_UPS_Q_SET_PROPERTY&);  // prohibit
		Protocol_UPS_Q_SET_PROPERTY& operator=(const Protocol_UPS_Q_SET_PROPERTY&);  // prohibit
#endif
	};

	struct Protocol_UPS_A_SET_PROPERTY : public Atf::MessageProtocol
	{
		// 2[s] - errCode[errStr]
		INT16 errCode;

		PString errStr;

		Protocol_UPS_A_SET_PROPERTY();
		void clear() override;
		bool equals(const Protocol_UPS_A_SET_PROPERTY&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_A_SET_PROPERTY; }
		const char *getMsgIdString() const override { return "UPS_A_SET_PROPERTY"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_A_SET_PROPERTY(Protocol_UPS_A_SET_PROPERTY&&);
		Protocol_UPS_A_SET_PROPERTY& operator=(Protocol_UPS_A_SET_PROPERTY&&);
	private:
		Protocol_UPS_A_SET_PROPERTY(const Protocol_UPS_A_SET_PROPERTY&);  // prohibit
		Protocol_UPS_A_SET_PROPERTY& operator=(const Protocol_UPS_A_SET_PROPERTY&);  // prohibit
#endif
	};

	// !!! WARNING !!! If you modify this message, please let testautomation team know.
	struct Protocol_UPS_NOTIFY_PROPERTY_UPDATED : public Atf::MessageProtocol
	{
		// 4<M(4M())> - numUserPropertyNotification<M(userIntId,M())>
		Atf::LAtfVector< UserPropertyNotification, 4 > userPropertyNotification;

		Protocol_UPS_NOTIFY_PROPERTY_UPDATED();
		void clear() override;
		bool equals(const Protocol_UPS_NOTIFY_PROPERTY_UPDATED&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_NOTIFY_PROPERTY_UPDATED; }
		const char *getMsgIdString() const override { return "UPS_NOTIFY_PROPERTY_UPDATED"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_NOTIFY_PROPERTY_UPDATED(Protocol_UPS_NOTIFY_PROPERTY_UPDATED&&);
		Protocol_UPS_NOTIFY_PROPERTY_UPDATED& operator=(Protocol_UPS_NOTIFY_PROPERTY_UPDATED&&);
	private:
		Protocol_UPS_NOTIFY_PROPERTY_UPDATED(const Protocol_UPS_NOTIFY_PROPERTY_UPDATED&);  // prohibit
		Protocol_UPS_NOTIFY_PROPERTY_UPDATED& operator=(const Protocol_UPS_NOTIFY_PROPERTY_UPDATED&);  // prohibit
#endif
	};

	struct Protocol_UPS_NOTIFY_PROPERTY_UPDATED_SERVER : public Atf::MessageProtocol
	{
		// 4<M(4b4<M(4M())>)> - numUserPropertyNotification<M(userIntId,isObserver,numProperties<M(propertyTypeId,M())>)>
		Atf::LAtfVector< UserPropertyNotificationForServer, 4 > userPropertyNotification;

		Protocol_UPS_NOTIFY_PROPERTY_UPDATED_SERVER();
		void clear() override;
		bool equals(const Protocol_UPS_NOTIFY_PROPERTY_UPDATED_SERVER&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_NOTIFY_PROPERTY_UPDATED_SERVER; }
		const char *getMsgIdString() const override { return "UPS_NOTIFY_PROPERTY_UPDATED_SERVER"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_NOTIFY_PROPERTY_UPDATED_SERVER(Protocol_UPS_NOTIFY_PROPERTY_UPDATED_SERVER&&);
		Protocol_UPS_NOTIFY_PROPERTY_UPDATED_SERVER& operator=(Protocol_UPS_NOTIFY_PROPERTY_UPDATED_SERVER&&);
	private:
		Protocol_UPS_NOTIFY_PROPERTY_UPDATED_SERVER(const Protocol_UPS_NOTIFY_PROPERTY_UPDATED_SERVER&);  // prohibit
		Protocol_UPS_NOTIFY_PROPERTY_UPDATED_SERVER& operator=(const Protocol_UPS_NOTIFY_PROPERTY_UPDATED_SERVER&);  // prohibit
#endif
	};

	struct Protocol_UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER : public Atf::MessageProtocol
	{
		// 484444M() - blitzId,tableId,userIntId,entryId,notifTypeId,notifSubTypeId,M()
		UINT32 blitzId;
		UINT64 tableId;
		UINT32 userIntId;
		UINT32 entryId;
		UINT32 notifTypeId;
		UINT32 notifSubTypeId;
		Atf::MoveableMsgBody notifMsg;

		Protocol_UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER();
		void clear() override;
		bool equals(const Protocol_UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER; }
		const char *getMsgIdString() const override { return "UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER(Protocol_UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER&&);
		Protocol_UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER& operator=(Protocol_UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER&&);
	private:
		Protocol_UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER(const Protocol_UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER&);  // prohibit
		Protocol_UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER& operator=(const Protocol_UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER&);  // prohibit
#endif
	};

	struct Protocol_UPS_Q_OBSERVERS_JOIN : public Atf::MessageProtocol
	{
		// 4<4>81 - numUserIntIds<userIntIds>,gameId,entryType
		Atf::LAtfVector< UINT32, 4 > userIntIds;
		UINT64 gameId;	// id of the game being joined, e.g., tableId, blitzId, tournId
		INT8 entryType;	// enum MiniGameCommon::EntryType to describe the type of entry

		Protocol_UPS_Q_OBSERVERS_JOIN();
		void clear() override;
		bool equals(const Protocol_UPS_Q_OBSERVERS_JOIN&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_Q_OBSERVERS_JOIN; }
		const char *getMsgIdString() const override { return "UPS_Q_OBSERVERS_JOIN"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_Q_OBSERVERS_JOIN(Protocol_UPS_Q_OBSERVERS_JOIN&&);
		Protocol_UPS_Q_OBSERVERS_JOIN& operator=(Protocol_UPS_Q_OBSERVERS_JOIN&&);
	private:
		Protocol_UPS_Q_OBSERVERS_JOIN(const Protocol_UPS_Q_OBSERVERS_JOIN&);  // prohibit
		Protocol_UPS_Q_OBSERVERS_JOIN& operator=(const Protocol_UPS_Q_OBSERVERS_JOIN&);  // prohibit
#endif
	};

	struct Protocol_UPS_A_OBSERVERS_JOIN : public Atf::MessageProtocol
	{
		// 2[s] - errCode[errStr]
		INT16 errCode;

		PString errStr;

		Protocol_UPS_A_OBSERVERS_JOIN();
		void clear() override;
		bool equals(const Protocol_UPS_A_OBSERVERS_JOIN&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_A_OBSERVERS_JOIN; }
		const char *getMsgIdString() const override { return "UPS_A_OBSERVERS_JOIN"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_A_OBSERVERS_JOIN(Protocol_UPS_A_OBSERVERS_JOIN&&);
		Protocol_UPS_A_OBSERVERS_JOIN& operator=(Protocol_UPS_A_OBSERVERS_JOIN&&);
	private:
		Protocol_UPS_A_OBSERVERS_JOIN(const Protocol_UPS_A_OBSERVERS_JOIN&);  // prohibit
		Protocol_UPS_A_OBSERVERS_JOIN& operator=(const Protocol_UPS_A_OBSERVERS_JOIN&);  // prohibit
#endif
	};

	struct Protocol_UPS_Q_OBSERVERS_LEFT : public Atf::MessageProtocol
	{
		// 4<4>81 - numUserIntIds<userIntIds>,gameId,entryType
		Atf::LAtfVector< UINT32, 4 > userIntIds;
		UINT64 gameId;	// id of the game being left, e.g., tableId, blitzId, tournId
		INT8 entryType;	// enum MiniGameCommon::EntryType to describe the type of entry

		Protocol_UPS_Q_OBSERVERS_LEFT();
		void clear() override;
		bool equals(const Protocol_UPS_Q_OBSERVERS_LEFT&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_Q_OBSERVERS_LEFT; }
		const char *getMsgIdString() const override { return "UPS_Q_OBSERVERS_LEFT"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_Q_OBSERVERS_LEFT(Protocol_UPS_Q_OBSERVERS_LEFT&&);
		Protocol_UPS_Q_OBSERVERS_LEFT& operator=(Protocol_UPS_Q_OBSERVERS_LEFT&&);
	private:
		Protocol_UPS_Q_OBSERVERS_LEFT(const Protocol_UPS_Q_OBSERVERS_LEFT&);  // prohibit
		Protocol_UPS_Q_OBSERVERS_LEFT& operator=(const Protocol_UPS_Q_OBSERVERS_LEFT&);  // prohibit
#endif
	};

	struct Protocol_UPS_A_OBSERVERS_LEFT : public Atf::MessageProtocol
	{
		// 2[s] - errCode[errStr]
		INT16 errCode;

		PString errStr;

		Protocol_UPS_A_OBSERVERS_LEFT();
		void clear() override;
		bool equals(const Protocol_UPS_A_OBSERVERS_LEFT&) const;
		bool equals(Atf::MessageProtocol* _other) const override;
		const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
		const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
		bool loadFromXmlString(const PString& _xmlString) override;
		const char *asTraceString(PString& _buf) const override;
		void parseMsg(CommMsgParser& _parser) override;
		void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
		UINT32 getMsgId() const override { return UPS_A_OBSERVERS_LEFT; }
		const char *getMsgIdString() const override { return "UPS_A_OBSERVERS_LEFT"; }
		const char *asJSONString(PString& _buf) const override;
		void loadFromJSONString(const PString& _jsonString) override;
		static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Protocol_UPS_A_OBSERVERS_LEFT(Protocol_UPS_A_OBSERVERS_LEFT&&);
		Protocol_UPS_A_OBSERVERS_LEFT& operator=(Protocol_UPS_A_OBSERVERS_LEFT&&);
	private:
		Protocol_UPS_A_OBSERVERS_LEFT(const Protocol_UPS_A_OBSERVERS_LEFT&);  // prohibit
		Protocol_UPS_A_OBSERVERS_LEFT& operator=(const Protocol_UPS_A_OBSERVERS_LEFT&);  // prohibit
#endif
	};
};

#endif
