
#include "upserver/UPServer.h"

#include "upserver/upservercommonprot.h"				// @no_thin_version
#include "upserver/upservercommonprot_thin.h"		// @only_thin_version


#define TOP_LEVEL_NAMESPACE UPServer // overwrite the default top level namespace

//------------------------------------------------------------------------------

MsgBodyStruct UserPropertyNotification 
{
	UINT32 userIntId;
	CommMsgBody userPropBody;
};

// PYR-44188
MsgBodyStruct SrvPropertyForCardMatch
{
	INT32 value; // so far this is a free format value
	PString mgLobbyAddress;
	PString mgLobbyInstance;
	bool isExpired;
	UINT32 blitzId;
	UINT64 tournId;
	UINT32 entryId; // for blitz/tourn
	UINT64 subGameId; // id of a child object of what ever is receiving this message, e.g., tableId of table in a tournament
};

MsgBodyStruct PropertyForServer
{
	INT32 propertyTypeId; // please see UserPropertyType enum above; currently UserPropertyType_CardMatch is the only server property type
	CommMsgBody propertyBody;
};

MsgBodyStruct UserPropertyNotificationForServer
{
	UINT32 userIntId;
	bool isObserver;
	vector<PropertyForServer> properties;
};

struct TableSelfIdentity
{
	UINT64 tableId;
};

struct BlitzSelfIdentity
{
	UINT32 blitzId;
};

struct MtlSelfIdentity
{
	UINT64 tournId;
};

//------------------------------------------------------------------------------
// Table subscribe for user updates; please note following 2 messages are identical
// they are separated intentionaly for possible future extensions
//------------------------------------------------------------------------------

#define UPS_Q_USERS_JOIN				1001 // table or blitz lobby -> UPServer
#define UPS_A_USERS_JOIN				1002 // UPServer -> table or blitz lobby

Message UPS_Q_USERS_JOIN @move_only_no_copy
{
	vector<UINT32> userIntIds;
};

Message UPS_A_USERS_JOIN @move_only_no_copy
{
	INT16 errCode;
	if( errCode )
	{
		PString errStr;
	}
};

//------------------------------------------------------------------------------
// Table unsubscribe for user updates
//------------------------------------------------------------------------------

#define UPS_Q_USERS_LEFT				1003 // table or blitz lobby -> UPServer
#define UPS_A_USERS_LEFT				1004 // UPServer -> table or blitz lobby

Message UPS_Q_USERS_LEFT @move_only_no_copy
{
	vector<UINT32> userIntIds;
};

Message UPS_A_USERS_LEFT @move_only_no_copy
{
	INT16 errCode;
	if( errCode )
	{
		PString errStr;
	}
};

//------------------------------------------------------------------------------
// Update user property
//------------------------------------------------------------------------------

#define UPS_Q_SET_PROPERTY					1005 // MGLobby or other user property using component -> UPServer
#define UPS_A_SET_PROPERTY					1006 // UPServer -> MGLobby or other user property using component

Message UPS_Q_SET_PROPERTY @move_only_no_copy
{
	UPServerCommon::Property property;
	vector<UINT32> userIntIds;
};

Message UPS_A_SET_PROPERTY @move_only_no_copy
{
	INT16 errCode;
	if( errCode )
	{
		PString errStr;
	}
};

//------------------------------------------------------------------------------
// Subscription notificaiton
//------------------------------------------------------------------------------

// !!! WARNING !!! If you modify this message, please let testautomation team know.
#define UPS_NOTIFY_PROPERTY_UPDATED				1007 // UPServer -> subscriber (table or blitz lobby)

// !!! WARNING !!! If you modify this message, please let testautomation team know.
Message UPS_NOTIFY_PROPERTY_UPDATED @move_only_no_copy
{
	vector<UserPropertyNotification> userPropertyNotification;
};

#define UPS_NOTIFY_PROPERTY_UPDATED_SERVER		1008 // UPServer -> subscriber (table or blitz lobby)

Message UPS_NOTIFY_PROPERTY_UPDATED_SERVER @move_only_no_copy
{
	vector<UserPropertyNotificationForServer> userPropertyNotification;
};

#define UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER 1009 // UPServer -> subscriber (table or blitz lobby)

Message UPS_NOTIFY_PROPERTY_ONE_TIME_NOTIFICATION_SERVER @move_only_no_copy
{
	UINT32 blitzId;
	UINT64 tableId;
	UINT32 userIntId;
	UINT32 entryId;
	UINT32 notifTypeId;
	UINT32 notifSubTypeId;
	CommMsgBody notifMsg;
};

//------------------------------------------------------------------------------
// Table subscribe for observer updates; please note following 2 messages are identical
// they are separated intentionaly for possible future extensions
//------------------------------------------------------------------------------

#define UPS_Q_OBSERVERS_JOIN				1010 // mglobbypoker -> UPServer
#define UPS_A_OBSERVERS_JOIN				1011 // UPServer -> mglobbypoker 

Message UPS_Q_OBSERVERS_JOIN @move_only_no_copy
{
	vector<UINT32> userIntIds;
	UINT64 gameId;	// id of the game being joined, e.g., tableId, blitzId, tournId
	INT8 entryType; // enum MiniGameCommon::EntryType to describe the type of entry
};

Message UPS_A_OBSERVERS_JOIN @move_only_no_copy
{
	INT16 errCode;
	if( errCode )
	{
		PString errStr;
	}
};

//------------------------------------------------------------------------------
// Table unsubscribe for observer updates
//------------------------------------------------------------------------------

#define UPS_Q_OBSERVERS_LEFT				1012 // mglobbypoker  -> UPServer
#define UPS_A_OBSERVERS_LEFT				1013 // UPServer -> mglobbypoker 

Message UPS_Q_OBSERVERS_LEFT @move_only_no_copy
{
	vector<UINT32> userIntIds;
	UINT64 gameId;	// id of the game being left, e.g., tableId, blitzId, tournId
	INT8 entryType; // enum MiniGameCommon::EntryType to describe the type of entry
};

Message UPS_A_OBSERVERS_LEFT @move_only_no_copy
{
	INT16 errCode;
	if( errCode )
	{
		PString errStr;
	}
};