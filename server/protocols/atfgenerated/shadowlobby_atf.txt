#include "UserDefStructs.h"
#include "AtfCountryVisibilityFilter.h"
#include "../storm/TableClientProtocols${ATF_THIN_FILENAME_SUFFIX}.h"

#define TOP_LEVEL_NAMESPACE ShadowLobby

namespace publication
{
	struct TableType2
	{
		UINT32 tableTypeId;
		UINT32 siteVisibilityMask;
		UINT32 brandVisibilityMask;
		bool invertCountryFilter;
		vector< PString > countryFilter;
		bool quickLobbyVisible;
		BYTE game;
		BYTE structure;
		BYTE isHiLo;
		BYTE isPlayMoney;
		PString currency;
		UINT32 loBet;
		UINT32 hiBet;
		UINT32 cap;
		UINT32 ante;
		UINT32 minChipsLimit;
		UINT32 maxBuyIn;
		BYTE playerPerTable;
		UINT32 scalePM;
		UINT32 defaultBuyIn;
		UINT32 seatFinderId;
		INT32 poolBlockMinHands;
		vector< INT32 > poolBlockTimePenalty;
		bool passwordProtected;
		bool morphLobby;
		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes parseEndOptB4Me;
		vector< INT64 > variableAntes parseEndOptB4Me;
		bool isHybridSingle parseEndOptB4Me;
		PSiteMask siteVisibilityMaskEx parseEndOptB4Me;
		UINT64 tableFlags2 parseEndOptB4Me;
	};

	struct TableSubscr_Static // Path { 0, n, 0 }
	{
		UINT32 _obsolete_1;
		PString name;
		PString server;
		PString serverObject;
		UINT32 tableFlags;
		BYTE isOneOnOne;
		BYTE isPlayMoney;
		BYTE playerPerTable;
		BYTE game;
		BYTE isHiLo;
		UINT32 _obsolete_2;
		UINT32 _obsolete_3;
		BYTE structure;
		PString typeName;
		UINT32 _obsolete_4;
		UINT16 chatLang;
		PString currency;
		UINT32 minChipsLimit;
		UINT32 maxBuyIn;
		UINT32 _obsolete_5;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LegacyCountryVisibilityFilter countryFilter;
		UINT32 cap;
		BYTE iconIndex;
		BYTE filterIndex;
		UINT32 tableInstanceFlag;
		bool _obsolete_6;
		UINT64 tableFlags2;
		UINT32 tableTypeId;
		UINT32 scalePM;
		UINT32 defaultBuyIn;
		UINT64 tableId;
		UINT32 brandVisibilityMask;
		INT32 _obsolete_7;
		PString criteria;
		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes;
		vector< INT64 > varAnte;
		PSiteMask siteVisibilityMask;
	};

	struct TableSubscr_Status // Path { 0, n, 1 }
	{
		BYTE players;
		BYTE waitingList;
		BYTE playersPerFlop;
		UINT32 averagePot;
		UINT16 handsPerHour;
		BYTE publPropFlag;
		UINT32 averageStack;
		BYTE vpip;
		TableClient${ATF_THIN_NAMESPACE_SUFFIX}::publication::TableSubscr_Static::_HappyHourInfoPublMsgType fppFactor;
		bool active;
	};

	MsgBodyStruct ReplaySubscr_Winner
	{
		INT64 award;
		INT64 bounty;
		bool wasDealMode;
	};

	struct ReplaySubscr_Static // Path { 0, n, 0 }
	{
		UINT32 tournamentId;
		PString server;
		PString serverObj;
		SrvTime whenStart;
		PString name;
		BYTE game;
		BYTE isHiLo;
		BYTE structure;
		UINT32 tournMask;
		PString info;
		UINT32 siteVisibilityMask;
		UINT32 whenStart_t;
		UINT32 tournMask2;
		UINT32 tournMask3;
		UINT32 tournMask4;
		PString currency;
		UINT32 tournMask5;
		UINT32 tournMask6;
		UINT32 brandVisibilityMask;
		CommMsgBody
		{
			SrvDate origTournDate;
			INT64 finalPrizePool;
			I18nPString origTournName;
			vector<ReplaySubscr_Winner> winners;
		};
		PString criteria;
		bool isPlayMoney parseEndOptB4Me;
		INT64 buyIn;
		INT64 rake;
		INT64 bounty;
		INT32 maxPlayers;
		UINT32 tournFlags;
		UINT64 tournFlags2;
		UINT32 tournFlagsServInt;
		PString groupReference;
		PString pokerNgGroup;
		PSiteMask siteVisibilityMaskEx;
	};

	struct ReplaySubscr_Status // Path { 0, n, 1 }
	{
		UINT32 status;
	};
};
