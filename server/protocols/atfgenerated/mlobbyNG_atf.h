/**
 * mlobbyNG_atf.h
 *
 * This file was auto-generated from mlobbyNG_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor mlobbyNG_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_MLOBBYNG_ATF_H
#define ATF_PROTOCOL_DEFFILE_MLOBBYNG_ATF_H

// ===========================================================
// Copyright (C) 2018 Stars Technologies Services  All rights reserved.
// ===========================================================

#include "Common_atf.h"
#include "mlobbyNG.h"
#include "personalization.h"
#include "tournGroups.h"
#include "../storm/TableCommonStructs.h"
#include "../mtlobby/NStackTournInfo.h"
#include "sitemasks.h"
#include "../ppp/pppclientprot.h"


#include "UserDefStructs.h"

namespace MLobbyNG
{
	class ProtocolFactory
	{
	public:
		static Atf::MessageProtocol* createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId);
		static bool validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	namespace cli
	{
		struct TournSelectionFilter
		{
			// M(484884444444sb4<4>4444) - M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask)
			UINT32 locale;
			UINT64 gameMask;	// NGGameTypes
			UINT32 buyInMask;	// NGBuyInTypes
			UINT64 minBuyIn;	// can be PM chips so its unbounded
			UINT64 maxBuyIn;	// can be PM chips so its unbounded
			UINT32 speedMask;	// NGTournSpeedTypes
			UINT32 tournTypeMask;	// NGTournTypeTypes
			UINT32 currencyMask;	// NGCurrencyTypes
			UINT32 tableSizeMask;	// NGMaxTableSizeTypes
			UINT32 tournVariantMask;	// NGTournVariantTypes
			UINT32 tournStateMask;	// NGTournStateTypes
			UINT32 startingWithin;	// starting soon in minutes, or 0 if not used
			PString country;
			bool isPM;
			Atf::LAtfVector< UINT32, 4 > tournGroups;	// enum TournGroupTypes
			INT32 lateRegCutoff;
			UINT32 genderRestrictMask;	// NGTournRestrictedToTypes
			UINT32 tournDisplayMask;	// NGTournDisplayTypes
			UINT32 negateTournVariantMask;	// NGTournVariantTypes

			TournSelectionFilter();
			void clear();
			bool equals(const TournSelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSelectionFilter(TournSelectionFilter&&);
			TournSelectionFilter& operator=(TournSelectionFilter&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSelectionFilter(const TournSelectionFilter&) = default;
			TournSelectionFilter& operator=(const TournSelectionFilter&) = default;
#endif
#endif
		};

		struct TournResultCriteria
		{
			// M(44) - M(sortOrder,maxItems)
			UINT32 sortOrder;	// sorting order
			UINT32 maxItems;

			TournResultCriteria();
			void clear();
			bool equals(const TournResultCriteria&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ClientMarkers
		{
			// M(4) - M(context)
			UINT32 context;

			ClientMarkers();
			void clear();
			bool equals(const ClientMarkers&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct FppFactorStruct
		{
			// M(2444tm) - M(fppFactor,sites,gameCategory,number,endT,sitesEx)
			UINT16 fppFactor;
			UINT32 sites;
			UINT32 gameCategory;	// #22626
			UINT32 number;	// PYR-23500
			SrvTime endT;	// PYR-24398
			PSiteMask sitesEx;

			FppFactorStruct();
			void clear();
			bool equals(const FppFactorStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			FppFactorStruct(FppFactorStruct&&);
			FppFactorStruct& operator=(FppFactorStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			FppFactorStruct(const FppFactorStruct&) = default;
			FppFactorStruct& operator=(const FppFactorStruct&) = default;
#endif
#endif
		};

		struct TournStaticData
		{
			//! M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m) - M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx)
			UINT64 tournamentId;
			PString server;
			PString targetServer;
			PString hasSatellite;
			SrvTime whenStart;
			UINT32 buyIn;
			UINT32 rake;
			UINT32 fppBuyIn;
			BYTE isRestricted;
			BYTE isPwdProtected;
			PString name;
			PString admissionId;
			BYTE isPlayMoney;
			UINT32 satelliteTarget;
			UINT32 minPlayers;
			UINT32 tournFlags;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			UINT32 tournMask;
			UINT32 tournSites;
			UINT32 whenStartInt;
			UINT32 tournMask2;
			SrvTime targetWhenStart;
			UINT32 tournMask3;
			UINT32 tournMask4;
			UINT32 maxPerTable;
			bool countryRestrictionInverted;
			Atf::LAtfVector< PString , 4 > restrictedCountries;
			BYTE hasDayTwoStart;
			UINT32 dayTwoStartSec;
			SrvTime dayTwoStart;
			PString shortText;
			UINT16 chatLang;
			PString currency;
			UINT32 tournFlagsServInt;
			UINT32 knockout;
			PString satelliteTargetReference;
			UINT16 satelliteTargetReferenceLock;
			UINT32 maxPlayers;
			BYTE speedDisplay;
			PString nameSnG;
			BYTE step;
			BYTE timedTournType;
			UINT16 timedTournTime;
			BYTE timedTournPayout;
			bool isFlightTourn;
			PString tournBrand;
			UINT32 scalePM;
			BYTE progressiveKnockout;
			BYTE awardScheme;
			UINT16 numReentries;
			PString internalReference;
			PString favReference;
			PString satelliteTargetName;
			INT64 admissionPrice;
			UINT64 tournFlags2;
			SrvTime regEndAbs;
			UINT32 regEndAbsInt;
			bool doNotAllowToUnreg;

			TournClient::NStackTournInfoStruct nStackInfo;

			UINT32 tournMask5;
			UINT32 tournMask6;
			PString satelliteTargetNameMTT;
			UINT32 liveEventMask;
			BYTE timedTournPlayersPercent;
			UINT32 dummy1;
			BYTE rmPmLobby;
			UINT32 brandAccessMask;
			UINT32 activeFlags;
			UINT32 sngScriptId;
			PString customSpeedDisplayName;
			PString mobileName;	// PYR-66779
			UINT32 tournGroup;	// PYR-66779
			INT32 guaranteedPrizePool;	// PYR-61693
			Atf::LAtfVector< PString, 4 > admissions;	// PYR-73971
			PString serverObj;
			PString tournGroupRef;	// PYR-87937
			INT32 maxPayoutSag;	// PYR-98177
			PSiteMask tournSitesEx;

			TournStaticData();
			void clear();
			bool equals(const TournStaticData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournStaticData(TournStaticData&&);
			TournStaticData& operator=(TournStaticData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournStaticData(const TournStaticData&) = default;
			TournStaticData& operator=(const TournStaticData&) = default;
#endif
#endif

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournDynaData
		{
			// M(441414<M(2444tm)>44b4441) - M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite)
			UINT32 fakeStatus;
			UINT32 entrants;
			BYTE publProp;
			UINT32 prizePoolToPublish;
			BYTE prizePoolUnit;

			Atf::LAtfVector< FppFactorStruct, 4 > happyHoursMultipliers;

			UINT32 goldenSnGMilestoneAwardStub;	//obsolete
			UINT32 dummy1;
			bool goldenSnGEligibleStub;	//obsolete
			UINT32 goldenSnGTotalAddonStub;	//obsolete
			UINT32 prizePoolMoneyToPublish;
			UINT32 timedTournPlayersThreshold;
			INT8 mixTournSatellite;

			TournDynaData();
			void clear();
			bool equals(const TournDynaData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournDynaData(TournDynaData&&);
			TournDynaData& operator=(TournDynaData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournDynaData(const TournDynaData&) = default;
			TournDynaData& operator=(const TournDynaData&) = default;
#endif
#endif
		};

		struct TournDataStruct
		{
			//! M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb) - M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)
			TournStaticData staticData;
			TournDynaData dynamicData;
			SrvTime lastEntry;
			bool userHasTicket;

			TournDataStruct();
			void clear();
			bool equals(const TournDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournDataStruct(TournDataStruct&&);
			TournDataStruct& operator=(TournDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournDataStruct(const TournDataStruct&) = default;
			TournDataStruct& operator=(const TournDataStruct&) = default;
#endif
#endif
		};

		struct SpinnerPrizeStruct
		{
			// M(114s) - M(level,type,value,targetRef)
			BYTE level;
			BYTE type;
			UINT32 value;	//for money it's total prize pool, for custom prizes it's ticket type ID for 1st place award
			PString targetRef;

			SpinnerPrizeStruct();
			void clear();
			bool equals(const SpinnerPrizeStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SpinnerPrizeStruct(SpinnerPrizeStruct&&);
			SpinnerPrizeStruct& operator=(SpinnerPrizeStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SpinnerPrizeStruct(const SpinnerPrizeStruct&) = default;
			SpinnerPrizeStruct& operator=(const SpinnerPrizeStruct&) = default;
#endif
#endif
		};

		struct SagMaxMods
		{
			// M(14<M(114s)>) - M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)
			BYTE numUsers;
			Atf::LAtfVector< SpinnerPrizeStruct, 4 > spinnerPrizes;

			SagMaxMods();
			void clear();
			bool equals(const SagMaxMods&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SagMaxMods(SagMaxMods&&);
			SagMaxMods& operator=(SagMaxMods&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SagMaxMods(const SagMaxMods&) = default;
			SagMaxMods& operator=(const SagMaxMods&) = default;
#endif
#endif
		};

		struct StatesByCountryStruct
		{
			// sb4<s> - country,stateInversion,numStates<states>
			PString country;
			bool stateInversion;
			Atf::LAtfVector< PString, 4 > states;

			StatesByCountryStruct();
			void clear();
			bool equals(const StatesByCountryStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			StatesByCountryStruct(StatesByCountryStruct&&);
			StatesByCountryStruct& operator=(StatesByCountryStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			StatesByCountryStruct(const StatesByCountryStruct&) = default;
			StatesByCountryStruct& operator=(const StatesByCountryStruct&) = default;
#endif
#endif
		};

		struct MLobbyNGSagStaticDataStruct
		{
			// b[444444441111444s444<M(14<M(114s)>)>4<4>Ib4<sb4<s>>sI44<s>4ssm4<4>] - active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,tournFlags,tournGroupName,tournGroupRef,tournSites,numEligibleGroups<eligibleGroups>]
			//static data
			bool active;

			UINT32 scriptId;
			UINT32 flags;
			UINT32 brandMask;
			UINT32 siteMask;	// replaced by "PSiteMask tournSites"
			INT32 buyin;
			INT32 rake;
			INT32 currency;
			INT32 scalePM;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			BYTE speedDisplay;
			INT32 minPrizePool;
			INT32 maxPrizePool;
			INT32 maxPayout;
			PString promoRef;
			INT32 minClientVersion;
			INT32 maxClientVersion;
			Atf::LAtfVector< SagMaxMods, 4 > mods;
			Atf::LAtfVector< UINT32, 4 > tickets;
			I18nPString customSpeedDisplayName;
			bool restrictCountryInversion;
			Atf::LAtfVector< StatesByCountryStruct, 4 > statesByCountry;
			PString visibilityCriteria;
			I18nPString mobileName;
			UINT32 tournGroup;
			Atf::LAtfVector< PString, 4 > admissions;	// PYR-73971
			UINT32 tournFlags;	// PYR-84484
			PString tournGroupName;	// PYR-66845
			PString tournGroupRef;	// PYR-87937
			PSiteMask tournSites;
			Atf::LAtfVector< UINT32, 4 > eligibleGroups;	// PYR-109262
			// remember to add new members to MLobbyNGSagStaticDataStructEx::operator=

			MLobbyNGSagStaticDataStruct();
			void clear();
			bool equals(const MLobbyNGSagStaticDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			MLobbyNGSagStaticDataStruct(MLobbyNGSagStaticDataStruct&&);
			MLobbyNGSagStaticDataStruct& operator=(MLobbyNGSagStaticDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			MLobbyNGSagStaticDataStruct(const MLobbyNGSagStaticDataStruct&) = default;
			MLobbyNGSagStaticDataStruct& operator=(const MLobbyNGSagStaticDataStruct&) = default;
#endif
#endif
		};

		struct MLobbyNGSagLocalStaticDataStruct
		{
			// M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm]) - M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites])
			//static data
			bool active;

			UINT32 scriptId;
			UINT32 flags;
			UINT32 brandMask;
			UINT32 siteMask;	// replaced by "PSiteMask tournSites"
			INT32 buyin;
			INT32 rake;
			INT32 currency;
			INT32 scalePM;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			BYTE speedDisplay;
			INT32 minPrizePool;
			INT32 maxPrizePool;
			INT32 maxPayout;
			PString promoRef;
			INT32 minClientVersion;
			INT32 maxClientVersion;
			Atf::LAtfVector< SagMaxMods, 4 > mods;
			Atf::LAtfVector< UINT32, 4 > tickets;
			PString customSpeedDisplayName;
			bool restrictCountryInversion;
			Atf::LAtfVector< StatesByCountryStruct, 4 > statesByCountry;
			PString visibilityCriteria;
			PString mobileName;
			UINT32 tournGroup;
			Atf::LAtfVector< PString, 4 > admissions;	// PYR-73971
			bool isPlayMoney;
			UINT32 tournFlags;	// PYR-84484
			PString tournGroupName;	// PYR-66845
			PString tournGroupRef;	// PYR-87937
			PSiteMask tournSites;	// PYR-117157

			MLobbyNGSagLocalStaticDataStruct();
			void clear();
			bool equals(const MLobbyNGSagLocalStaticDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			MLobbyNGSagLocalStaticDataStruct(MLobbyNGSagLocalStaticDataStruct&&);
			MLobbyNGSagLocalStaticDataStruct& operator=(MLobbyNGSagLocalStaticDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			MLobbyNGSagLocalStaticDataStruct(const MLobbyNGSagLocalStaticDataStruct&) = default;
			MLobbyNGSagLocalStaticDataStruct& operator=(const MLobbyNGSagLocalStaticDataStruct&) = default;
#endif
#endif
		};

		struct SagDataStruct
		{
			// M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4) - M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)
			MLobbyNGSagLocalStaticDataStruct staticData;
			SrvTime lastEntry;
			bool userHasTicket;	// PYR-98946
			UINT32 ngSagFlags;	// PYR-112646

			SagDataStruct();
			void clear();
			bool equals(const SagDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SagDataStruct(SagDataStruct&&);
			SagDataStruct& operator=(SagDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SagDataStruct(const SagDataStruct&) = default;
			SagDataStruct& operator=(const SagDataStruct&) = default;
#endif
#endif
		};

		struct PPPDataStruct
		{
			//! M( <FIXME>PPPClient::publication::PppStaticLeaf</FIXME> 8t) - M( <FIXME>staticData</FIXME> ,buyIn,lastEntry)
			PPPClient::publication::PppStaticLeaf staticData;
			INT64 buyIn;	// buyIn + rake
			SrvTime lastEntry;

			PPPDataStruct();
			void clear();
			bool equals(const PPPDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PPPDataStruct(PPPDataStruct&&);
			PPPDataStruct& operator=(PPPDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PPPDataStruct(const PPPDataStruct&) = default;
			PPPDataStruct& operator=(const PPPDataStruct&) = default;
#endif
#endif
		};

		struct TableSelectionFilter
		{
			// M(48b8844s44444884) - M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask)
			UINT32 locale;
			UINT64 gameMask;	// NGGameTypes
			bool isPlayMoney;
			INT64 minStake;
			INT64 maxStake;
			UINT32 currencyMask;	// NGCurrencyTypes
			UINT32 tableSizeMask;	// NGMaxTableSizeTypes
			PString country;
			UINT32 gameCategoryMask;	// enum GameCategoryTypes
			UINT32 capMask;	// NGTableHasCapTypes
			UINT32 anteMask;	// NGTableHasAnteTypes
			INT32 minDeepRatio;
			INT32 maxDeepRatio;
			INT64 minBuyIn;	// can be PM chips so its unbounded
			INT64 maxBuyIn;	// can be PM chips so its unbounded
			UINT32 variantMask;	// NGTableVariantTypes

			TableSelectionFilter();
			void clear();
			bool equals(const TableSelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSelectionFilter(TableSelectionFilter&&);
			TableSelectionFilter& operator=(TableSelectionFilter&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSelectionFilter(const TableSelectionFilter&) = default;
			TableSelectionFilter& operator=(const TableSelectionFilter&) = default;
#endif
#endif
		};

		struct TableResultCriteria
		{
			// M(44) - M(sortOrder,maxItems)
			UINT32 sortOrder;	// sorting order
			UINT32 maxItems;

			TableResultCriteria();
			void clear();
			bool equals(const TableResultCriteria&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TableDataStruct
		{
			//! M(41111414444s44b4<s>b444444<4>bbt <FIXME>TableCommon::TableStakes</FIXME> 4<8>48m) - M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby,lastEntry, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,tableFlags,tableFlags2,visibilityMaskEx)
			UINT32 id;
			BYTE isPlayMoney;
			BYTE game;
			BYTE isHiLo;
			BYTE maxPlayers;
			UINT32 visibilityMask;
			BYTE structure;
			UINT32 loBet;
			UINT32 hiBet;
			UINT32 ante;
			UINT32 cap;
			PString currency;
			UINT32 minChipsLimit;
			UINT32 maxBuyIn;
			bool countryRestrictionInverted;
			Atf::LAtfVector< PString, 4 > restrictedCountries;
			bool visible;
			UINT32 scalePM;
			UINT32 defaultBuyIn;
			UINT32 brandMask;
			UINT32 seatFinderId;
			INT32 poolBlockMinHands;
			Atf::LAtfVector< INT32, 4 > poolBlockTimePenalty;
			bool isPasswordProtected;
			bool isMorphLobby;
			SrvTime lastEntry;
			TableCommon::TableStakes tableStakes;
			Atf::LAtfVector< INT64, 4 > variableAntes;
			UINT32 tableFlags;
			UINT64 tableFlags2;
			PSiteMask visibilityMaskEx;

			TableDataStruct();
			void clear();
			bool equals(const TableDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableDataStruct(TableDataStruct&&);
			TableDataStruct& operator=(TableDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableDataStruct(const TableDataStruct&) = default;
			TableDataStruct& operator=(const TableDataStruct&) = default;
#endif
#endif
		};

		struct ZoomStaticDataStruct
		{
			//! M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommon::TableStakes</FIXME> m8) - M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2)
			// static data
			UINT32 id;
			BYTE game;
			BYTE structure;
			BYTE isHiLo;
			BYTE maxPlayersPerTable;
			INT32 loBet;
			INT32 hiBet;
			INT32 ante;
			INT32 cap;
			PString currency;
			INT32 minChipsLimit;
			INT32 maxBuyIn;
			UINT32 visibilityMask;
			INT32 defaultBuyIn;
			PString specialName;
			bool countryRestrictionInverted;
			Atf::LAtfVector< PString, 4 > restrictedCountries;
			BYTE isPlayMoney;
			bool isMorphLobby;
			UINT32 scalePM;
			PString server;
			PString name;
			PString replayerInstance;
			BYTE isOneOnOne;
			UINT32 tableFlags;
			UINT16 chatLang;
			bool quickLobbyVisible;	// #22042
			UINT32 blitzFlags;
			UINT32 brandMask;	// PYR-40190
			PString serverObj;
			TableCommon::TableStakes tableStakes;
			PSiteMask visibilityMaskEx;
			UINT64 tableFlags2;

			ZoomStaticDataStruct();
			void clear();
			bool equals(const ZoomStaticDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ZoomStaticDataStruct(ZoomStaticDataStruct&&);
			ZoomStaticDataStruct& operator=(ZoomStaticDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ZoomStaticDataStruct(const ZoomStaticDataStruct&) = default;
			ZoomStaticDataStruct& operator=(const ZoomStaticDataStruct&) = default;
#endif
#endif
		};

		struct EarlyBirdMultiplier
		{
			// M(44) - M(licenseId,multiplier)
			UINT32 licenseId;
			UINT32 multiplier;

			EarlyBirdMultiplier();
			void clear();
			bool equals(const EarlyBirdMultiplier&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ZoomDynaDataStruct
		{
			// M(444411144<M(44)>4) - M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>,licenseEarlyBirdMultiplier)
			// dynamic data
			INT32 handsPerHour;
			INT32 avgPotSize;
			INT32 avgStackSize;
			INT32 numPlayers;
			BYTE publProp;
			BYTE avgPlayers;
			BYTE avgVpip;
			INT32 earlyBirdMins;
			Atf::LAtfVector< EarlyBirdMultiplier, 4 > earlyBirdMultipliers;	// deprecated, use licenseEarlyBirdMultiplier instead
			UINT32 licenseEarlyBirdMultiplier;	// PYR-123835

			ZoomDynaDataStruct();
			void clear();
			bool equals(const ZoomDynaDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ZoomDynaDataStruct(ZoomDynaDataStruct&&);
			ZoomDynaDataStruct& operator=(ZoomDynaDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ZoomDynaDataStruct(const ZoomDynaDataStruct&) = default;
			ZoomDynaDataStruct& operator=(const ZoomDynaDataStruct&) = default;
#endif
#endif
		};

		struct ZoomDataStruct
		{
			//! M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommon::TableStakes</FIXME> m8)M(444411144<M(44)>4)t) - M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>,licenseEarlyBirdMultiplier),lastEntry)
			ZoomStaticDataStruct staticData;
			ZoomDynaDataStruct dynamicData;
			SrvTime lastEntry;

			ZoomDataStruct();
			void clear();
			bool equals(const ZoomDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ZoomDataStruct(ZoomDataStruct&&);
			ZoomDataStruct& operator=(ZoomDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ZoomDataStruct(const ZoomDataStruct&) = default;
			ZoomDataStruct& operator=(const ZoomDataStruct&) = default;
#endif
#endif
		};

		struct SeatFinderStaticDataStruct
		{
			//! M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m) - M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx)
			// static data
			UINT32 id;
			BYTE game;
			BYTE structure;
			BYTE isHiLo;
			BYTE maxPlayersPerTable;
			INT32 loBet;
			INT32 hiBet;
			INT32 ante;
			INT32 cap;
			PString currency;
			INT32 minChipsLimit;
			INT32 maxBuyIn;
			UINT32 visibilityMask;
			INT32 defaultBuyIn;
			PString specialName;
			bool countryRestrictionInverted;
			Atf::LAtfVector< PString, 4 > restrictedCountries;
			PString replayerAddress;
			PString replayerInstance;
			INT8 minPlayersPerTable;
			bool isPasswordProtected;
			INT32 poolBlockMinHands;
			Atf::LAtfVector< INT32, 4 > poolBlockTimePenalty;
			UINT32 flags;
			UINT64 flags2;
			bool isPM;
			UINT32 scalePM;
			TableCommon::TableStakes tableStakes;
			Atf::LAtfVector< INT64, 4 > variableAntes;
			PSiteMask visibilityMaskEx;

			SeatFinderStaticDataStruct();
			void clear();
			bool equals(const SeatFinderStaticDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SeatFinderStaticDataStruct(SeatFinderStaticDataStruct&&);
			SeatFinderStaticDataStruct& operator=(SeatFinderStaticDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SeatFinderStaticDataStruct(const SeatFinderStaticDataStruct&) = default;
			SeatFinderStaticDataStruct& operator=(const SeatFinderStaticDataStruct&) = default;
#endif
#endif
		};

		struct SeatFinderDynaDataStruct
		{
			// M(444444) - M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables)
			// dynamic data
			INT32 handsPerHour;
			INT32 avgPotSize;
			INT32 avgStackSize;
			INT32 numPlayers;
			INT32 numTables;
			INT32 numFullTables;

			SeatFinderDynaDataStruct();
			void clear();
			bool equals(const SeatFinderDynaDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct SeatFinderDataStruct
		{
			//! M(M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m)M(444444)t) - M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables),lastEntry)
			SeatFinderStaticDataStruct staticData;
			SeatFinderDynaDataStruct dynamicData;
			SrvTime lastEntry;

			SeatFinderDataStruct();
			void clear();
			bool equals(const SeatFinderDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SeatFinderDataStruct(SeatFinderDataStruct&&);
			SeatFinderDataStruct& operator=(SeatFinderDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SeatFinderDataStruct(const SeatFinderDataStruct&) = default;
			SeatFinderDataStruct& operator=(const SeatFinderDataStruct&) = default;
#endif
#endif
		};

		struct SngSelectionFilter
		{
			// M(484884444sb444<4>444) - M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers)
			UINT32 locale;
			UINT64 gameMask;	// NGGameTypes
			UINT32 buyInMask;	// NGBuyInTypes
			INT64 minBuyIn;	// can be PM chips so its unbounded
			INT64 maxBuyIn;	// can be PM chips so its unbounded
			UINT32 speedMask;	// NGTournSpeedTypes
			UINT32 currencyMask;	// NGCurrencyTypes
			UINT32 tableSizeMask;	// NGMaxTableSizeTypes
			UINT32 tournVariantMask;	// NGTournVariantTypes
			PString country;
			bool isPM;
			UINT32 tableNumMask;	// NGTableNumTypes
			UINT32 gameCategoryMask;	// enum GameCategoryTypes
			Atf::LAtfVector< UINT32, 4 > tournGroups;	// enum TournGroupTypes
			UINT32 tournStateMask;	// NGTournStateTypes - only NGTournState_AllReg and NGTournState_LateReg are checked
			UINT32 negateTournVariantMask;	// NGTournVariantTypes
			INT32 numPlayers;

			SngSelectionFilter();
			void clear();
			bool equals(const SngSelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SngSelectionFilter(SngSelectionFilter&&);
			SngSelectionFilter& operator=(SngSelectionFilter&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SngSelectionFilter(const SngSelectionFilter&) = default;
			SngSelectionFilter& operator=(const SngSelectionFilter&) = default;
#endif
#endif
		};

		// PYR-82008
		struct WinnerAmountData
		{
			// M(41) - M(amount,flags)
			INT32 amount;
			BYTE flags;

			WinnerAmountData();
			void clear();
			bool equals(const WinnerAmountData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		// PYR-82008
		struct PrizeData
		{
			// M(4444<M(41)>) - M(min,max,numTickets,numWinners<M(amount,flags)>)
			INT32 min;
			INT32 max;
			INT32 numTickets;
			Atf::LAtfVector< WinnerAmountData, 4 > winners;

			PrizeData();
			void clear();
			bool equals(const PrizeData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PrizeData(PrizeData&&);
			PrizeData& operator=(PrizeData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PrizeData(const PrizeData&) = default;
			PrizeData& operator=(const PrizeData&) = default;
#endif
#endif
		};

		struct TicketData
		{
			// M(2s) - M(ticketId,admission)
			UINT16 ticketId;
			PString admission;

			TicketData();
			void clear();
			bool equals(const TicketData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TicketData(TicketData&&);
			TicketData& operator=(TicketData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TicketData(const TicketData&) = default;
			TicketData& operator=(const TicketData&) = default;
#endif
#endif
		};

		struct SngDataStruct
		{
			// M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb) - M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)
			UINT32 id;
			UINT32 tournSites;
			bool visible;	// Quick Lobby visible
			BYTE game;
			BYTE structure;
			BYTE isHiLo;
			BYTE isPlayMoney;
			PString currency;
			INT32 buyIn;
			INT32 rake;
			INT32 knockout;
			BYTE speedDisplay;
			UINT32 minPlayers;
			bool countryRestrictionInverted;
			Atf::LAtfVector< PString, 4 > restrictedCountries;
			UINT32 scalePM;
			UINT32 brandAccessMask;
			BYTE timedTournType;
			UINT16 timedTournTime;
			PString visibilityCriteria;
			UINT32 maxPerTable;	// PYR-61693
			BYTE timedTournPlayersPercent;	// PYR-61693
			UINT32 tournFlags;	// PYR-61693
			UINT64 tournFlags2;	// PYR-61693
			UINT32 satelliteTarget;	// PYR-61693
			PString satelliteTargetReference;	//PYR-61693
			UINT32 tournFlagsServInt;	// PYR-61693
			UINT64 regTournId;
			PString mobileName;	// PYR-66779
			UINT32 tournGroup;	// PYR-66779
			UINT32 maxPlayers;	// PYR-66899
			SrvTime lastEntry;
			Atf::LAtfVector< PString, 4 > admissions;	// PYR-73971
			INT32 fppBuyIn;	// PYR-61693
			Atf::LAtfVector< PrizeData, 4 > prizes;	// PYR-82008
			Atf::LAtfVector< TicketData, 4 > tickets;
			INT32 awardScheme;
			PString tournGroupName;	// PYR-66845
			PString tournGroupRef;	// PYR-87937
			PSiteMask tournSitesEx;
			bool userHasTicket;	// PYR-98946

			SngDataStruct();
			void clear();
			bool equals(const SngDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SngDataStruct(SngDataStruct&&);
			SngDataStruct& operator=(SngDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SngDataStruct(const SngDataStruct&) = default;
			SngDataStruct& operator=(const SngDataStruct&) = default;
#endif
#endif
		};

		struct ActivityStruct
		{
			// M(t41144244824s4s) - M(eventTime,gameCategory,handType,limit,minPlayers,maxPlayers,playersPerTable,loBet,hiBet,buyIn,speed,tournVariant,strRef,flags,currency)
			SrvTime eventTime;
			UINT32 gameCategory;	// all
			BYTE handType;	// all
			BYTE limit;	// all
			UINT32 minPlayers;	// SNG
			UINT32 maxPlayers;	// MTT, SAG, SNG
			UINT16 playersPerTable;	// all
			UINT32 loBet;	// no limit - all, low bet for stud etc, small blind for holdem, omaha etc
			UINT32 hiBet;	// no limit - all, high bet for stud etc, big blind for holdem, omaha etc
			INT64 buyIn;	// no limit - MTT, SAG, SNG
			UINT16 speed;	// MTT, SAG, SNG
			UINT32 tournVariant;	// MTT, SAG, SNG
			PString strRef;	// MTT, SAG (promoName), SNG(targetRef)
			UINT32 flags;	// no limit - all, see enum  ActivityFlagTypes in personalization.h
			PString currency;	// all

			ActivityStruct();
			void clear();
			bool equals(const ActivityStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ActivityStruct(ActivityStruct&&);
			ActivityStruct& operator=(ActivityStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ActivityStruct(const ActivityStruct&) = default;
			ActivityStruct& operator=(const ActivityStruct&) = default;
#endif
#endif
		};

		struct GameListFilter
		{
			// M(444ssb) - M(locale,siteId,brandId,country,state,isPM)
			UINT32 locale;
			UINT32 siteId;
			UINT32 brandId;
			PString country;
			PString state;
			bool isPM;

			GameListFilter();
			void clear();
			bool equals(const GameListFilter&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			GameListFilter(GameListFilter&&);
			GameListFilter& operator=(GameListFilter&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			GameListFilter(const GameListFilter&) = default;
			GameListFilter& operator=(const GameListFilter&) = default;
#endif
#endif
		};

		struct SuggestedGamesSelectionFilter
		{
			// M(4sb888M(484884444444sb4<4>4444)M(48b8844s44444884)M(484884444sb444<4>444)) - M(locale,country,isPM,tournMedianValue,sngMedianValue,ringMedianValue,M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask),M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask),M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers))
			UINT32 locale;
			PString country;
			bool isPM;
			INT64 tournMedianValue;	// no limit
			INT64 sngMedianValue;	// no limit
			INT64 ringMedianValue;	// no limit
			TournSelectionFilter tournFilter;
			TableSelectionFilter tableFilter;
			SngSelectionFilter sngFilter;

			SuggestedGamesSelectionFilter();
			void clear();
			bool equals(const SuggestedGamesSelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SuggestedGamesSelectionFilter(SuggestedGamesSelectionFilter&&);
			SuggestedGamesSelectionFilter& operator=(SuggestedGamesSelectionFilter&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SuggestedGamesSelectionFilter(const SuggestedGamesSelectionFilter&) = default;
			SuggestedGamesSelectionFilter& operator=(const SuggestedGamesSelectionFilter&) = default;
#endif
#endif
		};

		struct FilterCountKey
		{
			// M(888) - M(intVal1,intVal2,intVal3)
			INT64 intVal1;	// NGFilter_GameType -> NGGameTypes, NGFilter_TableSize -> NGMaxTableSizeTypes, NGFilter_Speed -> NGTournSpeedTypes, NGFilter_TableNum -> NGTableNumTypes
			INT64 intVal2;	// unused
			INT64 intVal3;	// unused

			FilterCountKey();
			void clear();
			bool equals(const FilterCountKey&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

			// @Override
			bool operator<(const FilterCountKey& rhs) const;
		};

		struct FilterCountInfo
		{
			// M(M(888)8) - M(M(intVal1,intVal2,intVal3),value)
			FilterCountKey key;
			INT64 value;

			FilterCountInfo();
			void clear();
			bool equals(const FilterCountInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct GameConnInfoReqStruct
		{
			// M(844) - M(gameId,category,ngSagFlags)
			UINT64 gameId;
			UINT32 category;
			UINT32 ngSagFlags;

			GameConnInfoReqStruct();
			void clear();
			bool equals(const GameConnInfoReqStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct GameConnectInfo
		{
			// M(8ss44b) - M(gameId,server,serverObject,scriptId,category,shouldOpen)
			UINT64 gameId;
			PString server;
			PString serverObject;
			UINT32 scriptId;
			UINT32 category;	// enum GameCategoryTypes
			bool shouldOpen;

			GameConnectInfo();
			void clear();
			bool equals(const GameConnectInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			GameConnectInfo(GameConnectInfo&&);
			GameConnectInfo& operator=(GameConnectInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			GameConnectInfo(const GameConnectInfo&) = default;
			GameConnectInfo& operator=(const GameConnectInfo&) = default;
#endif
#endif
		};

		struct TicketTournInfo
		{
			//! M(s4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb)>4<M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4)>) - M(ticketName,numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numSngTypes<M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)>,numSagTypes<M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)>)
			PString ticketName;
			Atf::LAtfVector< TournDataStruct, 4 > tourns;
			Atf::LAtfVector< SngDataStruct, 4 > sngTypes;
			Atf::LAtfVector< SagDataStruct, 4 > sagTypes;

			TicketTournInfo();
			void clear();
			bool equals(const TicketTournInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TicketTournInfo(TicketTournInfo&&);
			TicketTournInfo& operator=(TicketTournInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TicketTournInfo(const TicketTournInfo&) = default;
			TicketTournInfo& operator=(const TicketTournInfo&) = default;
#endif
#endif
		};

		struct TableStaticDataStruct
		{
			//! M(8sss411111444214444ss4411b4<s>448b444 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m4) - M(tableId,name,server,serverObject,clubId,isOneOnOne,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,tableFlags,tableInstanceFlags,chatLang,structure,loBet,hiBet,ante,cap,specialName,currency,minChipsLimit,maxBuyIn,icon,filter,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,defaultBuyIn,tableFlags2,isTableStarter,brandMask,poolBlockMinHands,tableTypeId, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx,seatFinderId)
			UINT64 tableId;
			PString name;
			PString server;
			PString serverObject;
			UINT32 clubId;
			BYTE isOneOnOne;
			BYTE isPlayMoney;
			BYTE game;
			BYTE isHiLo;
			BYTE maxPlayers;
			UINT32 visibilityMask;
			UINT32 tableFlags;
			UINT32 tableInstanceFlags;
			UINT16 chatLang;

			BYTE structure;
			UINT32 loBet;
			UINT32 hiBet;
			UINT32 ante;
			UINT32 cap;
			PString specialName;
			PString currency;
			UINT32 minChipsLimit;
			UINT32 maxBuyIn;

			//	The next four vars are used in shadow table only,
			//		not used in Hg (dummy values are published for Hg)
			BYTE icon;	//PYR-16988
			BYTE filter;	//PYR-16988
			bool countryRestrictionInverted;
			Atf::LAtfVector< PString , 4 > restrictedCountries;

			UINT32 scalePM;
			UINT32 defaultBuyIn;	//PYR-24823
			UINT64 tableFlags2;
			bool isTableStarter;
			UINT32 brandMask;	// PYR-40975
			INT32 poolBlockMinHands;
			UINT32 tableTypeId;
			TableCommon::TableStakes tableStakes;
			Atf::LAtfVector< INT64, 4 > variableAntes;
			PSiteMask visibilityMaskEx;
			UINT32 seatFinderId;

			TableStaticDataStruct();
			void clear();
			bool equals(const TableStaticDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableStaticDataStruct(TableStaticDataStruct&&);
			TableStaticDataStruct& operator=(TableStaticDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableStaticDataStruct(const TableStaticDataStruct&) = default;
			TableStaticDataStruct& operator=(const TableStaticDataStruct&) = default;
#endif
#endif
		};

		struct TableData
		{
			//! M(M(8sss411111444214444ss4411b4<s>448b444 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m4)) - M(M(tableId,name,server,serverObject,clubId,isOneOnOne,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,tableFlags,tableInstanceFlags,chatLang,structure,loBet,hiBet,ante,cap,specialName,currency,minChipsLimit,maxBuyIn,icon,filter,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,defaultBuyIn,tableFlags2,isTableStarter,brandMask,poolBlockMinHands,tableTypeId, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx,seatFinderId))
			TableStaticDataStruct staticData;

			TableData();
			void clear();
			bool equals(const TableData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableData(TableData&&);
			TableData& operator=(TableData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableData(const TableData&) = default;
			TableData& operator=(const TableData&) = default;
#endif
#endif
		};

		struct SuggestedGames2SelectionFilter
		{
			// M(48884<M(484884444444sb4<4>4444)>4<M(48b8844s44444884)>4<M(484884444sb444<4>444)>) - M(locale,tournMedianValue,sngMedianValue,ringMedianValue,numTournFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask)>,numTableFilters<M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask)>,numSngFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers)>)
			UINT32 locale;
			INT64 tournMedianValue;	// no limit
			INT64 sngMedianValue;	// no limit
			INT64 ringMedianValue;	// no limit
			Atf::LAtfVector< TournSelectionFilter, 4 > tournFilters;
			Atf::LAtfVector< TableSelectionFilter, 4 > tableFilters;
			Atf::LAtfVector< SngSelectionFilter, 4 > sngFilters;

			SuggestedGames2SelectionFilter();
			void clear();
			bool equals(const SuggestedGames2SelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SuggestedGames2SelectionFilter(SuggestedGames2SelectionFilter&&);
			SuggestedGames2SelectionFilter& operator=(SuggestedGames2SelectionFilter&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SuggestedGames2SelectionFilter(const SuggestedGames2SelectionFilter&) = default;
			SuggestedGames2SelectionFilter& operator=(const SuggestedGames2SelectionFilter&) = default;
#endif
#endif
		};

		struct FilterGamesSelectionFilter
		{
			// M(44<M(484884444444sb4<4>4444)>4<M(48b8844s44444884)>4<M(484884444sb444<4>444)>) - M(locale,numTournFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask)>,numTableFilters<M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask)>,numSngFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers)>)
			UINT32 locale;
			Atf::LAtfVector< TournSelectionFilter, 4 > tournFilters;
			Atf::LAtfVector< TableSelectionFilter, 4 > tableFilters;
			Atf::LAtfVector< SngSelectionFilter, 4 > sngFilters;

			FilterGamesSelectionFilter();
			void clear();
			bool equals(const FilterGamesSelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			FilterGamesSelectionFilter(FilterGamesSelectionFilter&&);
			FilterGamesSelectionFilter& operator=(FilterGamesSelectionFilter&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			FilterGamesSelectionFilter(const FilterGamesSelectionFilter&) = default;
			FilterGamesSelectionFilter& operator=(const FilterGamesSelectionFilter&) = default;
#endif
#endif
		};

		struct FilterGamesResultCriteria
		{
			// M(4) - M(maxItems)
			UINT32 maxItems;

			FilterGamesResultCriteria();
			void clear();
			bool equals(const FilterGamesResultCriteria&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct NameSearchSelectionFilter
		{
			// M(4ssb) - M(locale,name,country,isPM)
			UINT32 locale;
			PString name;
			PString country;
			bool isPM;

			NameSearchSelectionFilter();
			void clear();
			bool equals(const NameSearchSelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			NameSearchSelectionFilter(NameSearchSelectionFilter&&);
			NameSearchSelectionFilter& operator=(NameSearchSelectionFilter&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			NameSearchSelectionFilter(const NameSearchSelectionFilter&) = default;
			NameSearchSelectionFilter& operator=(const NameSearchSelectionFilter&) = default;
#endif
#endif
		};

		struct OrderedTicketTournInfo
		{
			//! M(s4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb)>4<M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4)>4<4>) - M(ticketName,numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numSngTypes<M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)>,numSagTypes<M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)>,numGameOrder<gameOrder>)
			PString ticketName;
			Atf::LAtfVector< TournDataStruct, 4 > tourns;
			Atf::LAtfVector< SngDataStruct, 4 > sngTypes;
			Atf::LAtfVector< SagDataStruct, 4 > sagTypes;
			Atf::LAtfVector< UINT32, 4 > gameOrder;	// GameCategoryTypes

			OrderedTicketTournInfo();
			void clear();
			bool equals(const OrderedTicketTournInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			OrderedTicketTournInfo(OrderedTicketTournInfo&&);
			OrderedTicketTournInfo& operator=(OrderedTicketTournInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			OrderedTicketTournInfo(const OrderedTicketTournInfo&) = default;
			OrderedTicketTournInfo& operator=(const OrderedTicketTournInfo&) = default;
#endif
#endif
		};

		struct TicketTournRequestData
		{
			// M(4<s>44M(444ssb)4<M(t41144244824s4s)>8) - M(numTicketNames<ticketNames>,gameCategoryMask,ticketTournRequestMask,M(locale,siteId,brandId,country,state,isPM),numActivities<M(eventTime,gameCategory,handType,limit,minPlayers,maxPlayers,playersPerTable,loBet,hiBet,buyIn,speed,tournVariant,strRef,flags,currency)>,gameMask)
			Atf::LAtfVector< PString, 4 > ticketNames;
			UINT32 gameCategoryMask;	// enum GameCategoryTypes
			UINT32 ticketTournRequestMask;	// enum TicketTournRequestTypes
			GameListFilter filter;
			Atf::LAtfVector< ActivityStruct, 4 > activities;
			UINT64 gameMask;	// NGGameTypes

			TicketTournRequestData();
			void clear();
			bool equals(const TicketTournRequestData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TicketTournRequestData(TicketTournRequestData&&);
			TicketTournRequestData& operator=(TicketTournRequestData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TicketTournRequestData(const TicketTournRequestData&) = default;
			TicketTournRequestData& operator=(const TicketTournRequestData&) = default;
#endif
#endif
		};

		struct BrandedLobbyInfo
		{
			// M(ss4<M(484884444444sb4<4>4444)>4<M(48b8844s44444884)>4<M(484884444sb444<4>444)>44) - M(lobbyName,displayName,numTournFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask)>,numTableFilters<M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask)>,numSngFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers)>,gameCount,playerCount)
			PString lobbyName;
			PString displayName;
			Atf::LAtfVector< TournSelectionFilter, 4 > tournFilters;
			Atf::LAtfVector< TableSelectionFilter, 4 > tableFilters;
			Atf::LAtfVector< SngSelectionFilter, 4 > sngFilters;
			INT32 gameCount;
			INT32 playerCount;

			BrandedLobbyInfo();
			void clear();
			bool equals(const BrandedLobbyInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			BrandedLobbyInfo(BrandedLobbyInfo&&);
			BrandedLobbyInfo& operator=(BrandedLobbyInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			BrandedLobbyInfo(const BrandedLobbyInfo&) = default;
			BrandedLobbyInfo& operator=(const BrandedLobbyInfo&) = default;
#endif
#endif
		};

		struct FullBrandedLobbyInfo
		{
			// M(sIm4<M(484884444444sb4<4>4444)>4<M(48b8844s44444884)>4<M(484884444sb444<4>444)>) - M(lobbyName,displayName,sites,numTournFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask)>,numTableFilters<M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask)>,numSngFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers)>)
			PString lobbyName;
			I18nPString displayName;
			PSiteMask sites;
			Atf::LAtfVector< TournSelectionFilter, 4 > tournFilters;
			Atf::LAtfVector< TableSelectionFilter, 4 > tableFilters;
			Atf::LAtfVector< SngSelectionFilter, 4 > sngFilters;

			FullBrandedLobbyInfo();
			void clear();
			bool equals(const FullBrandedLobbyInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			FullBrandedLobbyInfo(FullBrandedLobbyInfo&&);
			FullBrandedLobbyInfo& operator=(FullBrandedLobbyInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			FullBrandedLobbyInfo(const FullBrandedLobbyInfo&) = default;
			FullBrandedLobbyInfo& operator=(const FullBrandedLobbyInfo&) = default;
#endif
#endif
		};

		struct ResultRanges
		{
			// M(8444448844) - M(gameMask,tableSizeMask,speedMask,tournVariantMask,minNumPlayers,maxNumPlayers,minBuyIn,maxBuyIn,tournStateMask,gameCategoryMask)
			UINT64 gameMask;	// NGGameTypes
			UINT32 tableSizeMask;	// NGMaxTableSizeTypes
			UINT32 speedMask;	// NGTournSpeedTypes
			UINT32 tournVariantMask;	// NGTournVariantTypes
			INT32 minNumPlayers;
			INT32 maxNumPlayers;
			INT64 minBuyIn;	// can be PM chips so its unbounded
			INT64 maxBuyIn;	// can be PM chips so its unbounded
			UINT32 tournStateMask;	// NGTournStateTypes
			UINT32 gameCategoryMask;	// GameCategoryTypes

			ResultRanges();
			void clear();
			bool equals(const ResultRanges&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct FindTournsByRefFilter
		{
			// M(s44sbb4) - M(internalRef,siteId,brandId,country,usePMFlag,isPM,locale)
			PString internalRef;
			UINT32 siteId;
			UINT32 brandId;
			PString country;
			bool usePMFlag;
			bool isPM;
			UINT32 locale;

			FindTournsByRefFilter();
			void clear();
			bool equals(const FindTournsByRefFilter&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			FindTournsByRefFilter(FindTournsByRefFilter&&);
			FindTournsByRefFilter& operator=(FindTournsByRefFilter&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			FindTournsByRefFilter(const FindTournsByRefFilter&) = default;
			FindTournsByRefFilter& operator=(const FindTournsByRefFilter&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_GET_GAME_LIST : public Atf::MessageProtocol
		{
			// M(444ssb)4<M(t41144244824s4s)>4 - M(locale,siteId,brandId,country,state,isPM),numActivities<M(eventTime,gameCategory,handType,limit,minPlayers,maxPlayers,playersPerTable,loBet,hiBet,buyIn,speed,tournVariant,strRef,flags,currency)>,licenseId
			GameListFilter filter;
			Atf::LAtfVector< ActivityStruct, 4 > activities;
			UINT32 licenseId;

			Protocol_MSG_MLOBBYNG_GET_GAME_LIST();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_GAME_LIST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_GAME_LIST; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_GAME_LIST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_GET_GAME_LIST(Protocol_MSG_MLOBBYNG_GET_GAME_LIST&&);
			Protocol_MSG_MLOBBYNG_GET_GAME_LIST& operator=(Protocol_MSG_MLOBBYNG_GET_GAME_LIST&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_GET_GAME_LIST(const Protocol_MSG_MLOBBYNG_GET_GAME_LIST&) = default;
			Protocol_MSG_MLOBBYNG_GET_GAME_LIST& operator=(const Protocol_MSG_MLOBBYNG_GET_GAME_LIST&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_GET_GAME_LIST_REPLY : public Atf::MessageProtocol
		{
			//! 4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(41111414444s44b4<s>b444444<4>bbt <FIXME>TableCommon::TableStakes</FIXME> 4<8>48m)>4<M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb)>4<M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4)>4<M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommon::TableStakes</FIXME> m8)M(444411144<M(44)>4)t)>4<M(M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m)M(444444)t)>4<4>4<M( <FIXME>PPPClient::publication::PppStaticLeaf</FIXME> 8t)> - numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numTableTypes<M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby,lastEntry, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,tableFlags,tableFlags2,visibilityMaskEx)>,numSngTypes<M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)>,numSagTypes<M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)>,numZoomTypes<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>,licenseEarlyBirdMultiplier),lastEntry)>,numSeatFinders<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables),lastEntry)>,numGameOrder<gameOrder>,numPppTypes<M( <FIXME>staticData</FIXME> ,buyIn,lastEntry)>
			Atf::LAtfVector< TournDataStruct, 4 > tourns;
			Atf::LAtfVector< TableDataStruct, 4 > tableTypes;
			Atf::LAtfVector< SngDataStruct, 4 > sngTypes;
			Atf::LAtfVector< SagDataStruct, 4 > sagTypes;
			Atf::LAtfVector< ZoomDataStruct, 4 > zoomTypes;
			Atf::LAtfVector< SeatFinderDataStruct, 4 > seatFinders;
			Atf::LAtfVector< UINT32, 4 > gameOrder;	// GameCategoryTypes
			Atf::LAtfVector< PPPDataStruct, 4 > pppTypes;	// PYR-123925

			Protocol_MSG_MLOBBYNG_GET_GAME_LIST_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_GAME_LIST_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_GAME_LIST_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_GAME_LIST_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_GET_GAME_LIST_REPLY(Protocol_MSG_MLOBBYNG_GET_GAME_LIST_REPLY&&);
			Protocol_MSG_MLOBBYNG_GET_GAME_LIST_REPLY& operator=(Protocol_MSG_MLOBBYNG_GET_GAME_LIST_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_GET_GAME_LIST_REPLY(const Protocol_MSG_MLOBBYNG_GET_GAME_LIST_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_GET_GAME_LIST_REPLY& operator=(const Protocol_MSG_MLOBBYNG_GET_GAME_LIST_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS : public Atf::MessageProtocol
		{
			//! M(48b8844s44444884) <FIXME>Common::AtfShared::LoginExtra</FIXME> M(4)4 - M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask), <FIXME>loginExtraData</FIXME> ,M(context),filterTypeToCount
			TableSelectionFilter filter;
			Common::AtfShared::LoginExtra loginExtraData;
			ClientMarkers clientMarkers;
			INT32 filterTypeToCount;	// NGFilterTypes

			Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_TABLE_TYPE_COUNTS; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_TABLE_TYPE_COUNTS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS(Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS&&);
			Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS& operator=(Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS(const Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS&) = default;
			Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS& operator=(const Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY : public Atf::MessageProtocol
		{
			// 44<M(M(888)8)> - filterTypeToCount,numCounts<M(M(intVal1,intVal2,intVal3),value)>
			INT32 filterTypeToCount;	// NGFilterTypes
			Atf::LAtfVector< FilterCountInfo, 4 > counts;

			Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY(Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY&&);
			Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY& operator=(Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY(const Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY& operator=(const Protocol_MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS : public Atf::MessageProtocol
		{
			//! M(484884444444sb4<4>4444) <FIXME>Common::AtfShared::LoginExtra</FIXME> M(4)4 - M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask), <FIXME>loginExtraData</FIXME> ,M(context),filterTypeToCount
			TournSelectionFilter filter;
			Common::AtfShared::LoginExtra loginExtraData;
			ClientMarkers clientMarkers;
			INT32 filterTypeToCount;	// NGFilterTypes

			Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_TOURNAMENT_COUNTS; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_TOURNAMENT_COUNTS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS(Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS&&);
			Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS& operator=(Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS(const Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS&) = default;
			Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS& operator=(const Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY : public Atf::MessageProtocol
		{
			// 44<M(M(888)8)> - filterTypeToCount,numCounts<M(M(intVal1,intVal2,intVal3),value)>
			INT32 filterTypeToCount;	// NGFilterTypes
			Atf::LAtfVector< FilterCountInfo, 4 > counts;

			Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY(Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY&&);
			Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY& operator=(Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY(const Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY& operator=(const Protocol_MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_SNG_COUNTS : public Atf::MessageProtocol
		{
			//! M(484884444sb444<4>444) <FIXME>Common::AtfShared::LoginExtra</FIXME> M(4)4 - M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers), <FIXME>loginExtraData</FIXME> ,M(context),filterTypeToCount
			SngSelectionFilter filter;
			Common::AtfShared::LoginExtra loginExtraData;
			ClientMarkers clientMarkers;
			INT32 filterTypeToCount;	// NGFilterTypes

			Protocol_MSG_MLOBBYNG_SNG_COUNTS();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_SNG_COUNTS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_SNG_COUNTS; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_SNG_COUNTS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_SNG_COUNTS(Protocol_MSG_MLOBBYNG_SNG_COUNTS&&);
			Protocol_MSG_MLOBBYNG_SNG_COUNTS& operator=(Protocol_MSG_MLOBBYNG_SNG_COUNTS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_SNG_COUNTS(const Protocol_MSG_MLOBBYNG_SNG_COUNTS&) = default;
			Protocol_MSG_MLOBBYNG_SNG_COUNTS& operator=(const Protocol_MSG_MLOBBYNG_SNG_COUNTS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_SNG_COUNTS_REPLY : public Atf::MessageProtocol
		{
			// 44<M(M(888)8)> - filterTypeToCount,numCounts<M(M(intVal1,intVal2,intVal3),value)>
			INT32 filterTypeToCount;	// NGFilterTypes
			Atf::LAtfVector< FilterCountInfo, 4 > counts;

			Protocol_MSG_MLOBBYNG_SNG_COUNTS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_SNG_COUNTS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_SNG_COUNTS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_SNG_COUNTS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_SNG_COUNTS_REPLY(Protocol_MSG_MLOBBYNG_SNG_COUNTS_REPLY&&);
			Protocol_MSG_MLOBBYNG_SNG_COUNTS_REPLY& operator=(Protocol_MSG_MLOBBYNG_SNG_COUNTS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_SNG_COUNTS_REPLY(const Protocol_MSG_MLOBBYNG_SNG_COUNTS_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_SNG_COUNTS_REPLY& operator=(const Protocol_MSG_MLOBBYNG_SNG_COUNTS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO : public Atf::MessageProtocol
		{
			// 4<M(844)>44 - numGame<M(gameId,category,ngSagFlags)>,locale,licenseId
			Atf::LAtfVector< GameConnInfoReqStruct, 4 > game;
			UINT32 locale;
			UINT32 licenseId;

			Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_GAME_CONN_INFO; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_GAME_CONN_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO(Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO&&);
			Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO& operator=(Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO(const Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO&) = default;
			Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO& operator=(const Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY : public Atf::MessageProtocol
		{
			//! 4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(M(8sss411111444214444ss4411b4<s>448b444 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m4))>4<M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommon::TableStakes</FIXME> m8)M(444411144<M(44)>4)t)> - numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numTables<M(M(tableId,name,server,serverObject,clubId,isOneOnOne,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,tableFlags,tableInstanceFlags,chatLang,structure,loBet,hiBet,ante,cap,specialName,currency,minChipsLimit,maxBuyIn,icon,filter,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,defaultBuyIn,tableFlags2,isTableStarter,brandMask,poolBlockMinHands,tableTypeId, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx,seatFinderId))>,numZoomTypes<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>,licenseEarlyBirdMultiplier),lastEntry)>
			Atf::LAtfVector< TournDataStruct, 4 > tourns;
			Atf::LAtfVector< TableData, 4 > tables;
			Atf::LAtfVector< ZoomDataStruct, 4 > zoomTypes;

			Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY(Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY&&);
			Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY& operator=(Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY(const Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY& operator=(const Protocol_MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_TICKET_TOURNS : public Atf::MessageProtocol
		{
			//! 4<s>4 <FIXME>Common::AtfShared::LoginExtra</FIXME> M(4) - numTicketNames<ticketNames>,locale, <FIXME>loginExtraData</FIXME> ,M(context)
			Atf::LAtfVector< PString, 4 > ticketNames;
			UINT32 locale;
			Common::AtfShared::LoginExtra loginExtraData;
			ClientMarkers clientMarkers;

			Protocol_MSG_MLOBBYNG_TICKET_TOURNS();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_TICKET_TOURNS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_TICKET_TOURNS; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_TICKET_TOURNS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_TICKET_TOURNS(Protocol_MSG_MLOBBYNG_TICKET_TOURNS&&);
			Protocol_MSG_MLOBBYNG_TICKET_TOURNS& operator=(Protocol_MSG_MLOBBYNG_TICKET_TOURNS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_TICKET_TOURNS(const Protocol_MSG_MLOBBYNG_TICKET_TOURNS&) = default;
			Protocol_MSG_MLOBBYNG_TICKET_TOURNS& operator=(const Protocol_MSG_MLOBBYNG_TICKET_TOURNS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_TICKET_TOURNS_REPLY : public Atf::MessageProtocol
		{
			//! 4<M(s4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb)>4<M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4)>)> - numTicketInfos<M(ticketName,numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numSngTypes<M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)>,numSagTypes<M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)>)>
			Atf::LAtfVector< TicketTournInfo, 4 > ticketInfos;

			Protocol_MSG_MLOBBYNG_TICKET_TOURNS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_TICKET_TOURNS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_TICKET_TOURNS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_TICKET_TOURNS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_TICKET_TOURNS_REPLY(Protocol_MSG_MLOBBYNG_TICKET_TOURNS_REPLY&&);
			Protocol_MSG_MLOBBYNG_TICKET_TOURNS_REPLY& operator=(Protocol_MSG_MLOBBYNG_TICKET_TOURNS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_TICKET_TOURNS_REPLY(const Protocol_MSG_MLOBBYNG_TICKET_TOURNS_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_TICKET_TOURNS_REPLY& operator=(const Protocol_MSG_MLOBBYNG_TICKET_TOURNS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_GET_GAME_INFO : public Atf::MessageProtocol
		{
			// M(844)b4M(4) - M(gameId,category,ngSagFlags),isPM,locale,M(context)
			GameConnInfoReqStruct gameToFind;
			bool isPM;
			UINT32 locale;
			ClientMarkers clientMarkers;

			Protocol_MSG_MLOBBYNG_GET_GAME_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_GAME_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_GAME_INFO; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_GAME_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBYNG_GET_GAME_INFO_REPLY : public Atf::MessageProtocol
		{
			//! 4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(41111414444s44b4<s>b444444<4>bbt <FIXME>TableCommon::TableStakes</FIXME> 4<8>48m)>4<M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb)>4<M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4)>4<M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommon::TableStakes</FIXME> m8)M(444411144<M(44)>4)t)>4<M(M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m)M(444444)t)>4<M(M(8sss411111444214444ss4411b4<s>448b444 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m4))> - numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numTableTypes<M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby,lastEntry, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,tableFlags,tableFlags2,visibilityMaskEx)>,numSngTypes<M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)>,numSagTypes<M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)>,numZoomTypes<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>,licenseEarlyBirdMultiplier),lastEntry)>,numSeatFinders<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables),lastEntry)>,numTables<M(M(tableId,name,server,serverObject,clubId,isOneOnOne,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,tableFlags,tableInstanceFlags,chatLang,structure,loBet,hiBet,ante,cap,specialName,currency,minChipsLimit,maxBuyIn,icon,filter,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,defaultBuyIn,tableFlags2,isTableStarter,brandMask,poolBlockMinHands,tableTypeId, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx,seatFinderId))>
			Atf::LAtfVector< TournDataStruct, 4 > tourns;
			Atf::LAtfVector< TableDataStruct, 4 > tableTypes;
			Atf::LAtfVector< SngDataStruct, 4 > sngTypes;
			Atf::LAtfVector< SagDataStruct, 4 > sagTypes;
			Atf::LAtfVector< ZoomDataStruct, 4 > zoomTypes;
			Atf::LAtfVector< SeatFinderDataStruct, 4 > seatFinders;
			Atf::LAtfVector< TableData, 4 > tables;

			Protocol_MSG_MLOBBYNG_GET_GAME_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_GAME_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_GAME_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_GAME_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_GET_GAME_INFO_REPLY(Protocol_MSG_MLOBBYNG_GET_GAME_INFO_REPLY&&);
			Protocol_MSG_MLOBBYNG_GET_GAME_INFO_REPLY& operator=(Protocol_MSG_MLOBBYNG_GET_GAME_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_GET_GAME_INFO_REPLY(const Protocol_MSG_MLOBBYNG_GET_GAME_INFO_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_GET_GAME_INFO_REPLY& operator=(const Protocol_MSG_MLOBBYNG_GET_GAME_INFO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_FILTER_GAMES : public Atf::MessageProtocol
		{
			//! M(44<M(484884444444sb4<4>4444)>4<M(48b8844s44444884)>4<M(484884444sb444<4>444)>)M(4) <FIXME>Common::AtfShared::LoginExtra</FIXME> M(4)4 - M(locale,numTournFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask)>,numTableFilters<M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask)>,numSngFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers)>),M(maxItems), <FIXME>loginExtraData</FIXME> ,M(context),licenseId
			FilterGamesSelectionFilter filter;
			FilterGamesResultCriteria criteria;
			Common::AtfShared::LoginExtra loginExtraData;
			ClientMarkers clientMarkers;
			UINT32 licenseId;

			Protocol_MSG_MLOBBYNG_FILTER_GAMES();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_FILTER_GAMES&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_FILTER_GAMES; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_FILTER_GAMES"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_FILTER_GAMES(Protocol_MSG_MLOBBYNG_FILTER_GAMES&&);
			Protocol_MSG_MLOBBYNG_FILTER_GAMES& operator=(Protocol_MSG_MLOBBYNG_FILTER_GAMES&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_FILTER_GAMES(const Protocol_MSG_MLOBBYNG_FILTER_GAMES&) = default;
			Protocol_MSG_MLOBBYNG_FILTER_GAMES& operator=(const Protocol_MSG_MLOBBYNG_FILTER_GAMES&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_FILTER_GAMES_REPLY : public Atf::MessageProtocol
		{
			//! 4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(41111414444s44b4<s>b444444<4>bbt <FIXME>TableCommon::TableStakes</FIXME> 4<8>48m)>4<M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb)>4<M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4)>4<M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommon::TableStakes</FIXME> m8)M(444411144<M(44)>4)t)>4<M(M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m)M(444444)t)>4<4>488M(8444448844) - numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numTableTypes<M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby,lastEntry, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,tableFlags,tableFlags2,visibilityMaskEx)>,numSngTypes<M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)>,numSagTypes<M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)>,numZoomTypes<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>,licenseEarlyBirdMultiplier),lastEntry)>,numSeatFinders<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables),lastEntry)>,numGameOrder<gameOrder>,totalItems,minBuyIn,maxBuyIn,M(gameMask,tableSizeMask,speedMask,tournVariantMask,minNumPlayers,maxNumPlayers,minBuyIn,maxBuyIn,tournStateMask,gameCategoryMask)
			Atf::LAtfVector< TournDataStruct, 4 > tourns;
			Atf::LAtfVector< TableDataStruct, 4 > tableTypes;
			Atf::LAtfVector< SngDataStruct, 4 > sngTypes;
			Atf::LAtfVector< SagDataStruct, 4 > sagTypes;
			Atf::LAtfVector< ZoomDataStruct, 4 > zoomTypes;
			Atf::LAtfVector< SeatFinderDataStruct, 4 > seatFinders;
			Atf::LAtfVector< UINT32, 4 > gameOrder;	// GameCategoryTypes
			INT32 totalItems;
			INT64 minBuyIn;
			INT64 maxBuyIn;
			ResultRanges resultRanges;

			Protocol_MSG_MLOBBYNG_FILTER_GAMES_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_FILTER_GAMES_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_FILTER_GAMES_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_FILTER_GAMES_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_REPLY(Protocol_MSG_MLOBBYNG_FILTER_GAMES_REPLY&&);
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_REPLY& operator=(Protocol_MSG_MLOBBYNG_FILTER_GAMES_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_REPLY(const Protocol_MSG_MLOBBYNG_FILTER_GAMES_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_REPLY& operator=(const Protocol_MSG_MLOBBYNG_FILTER_GAMES_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS : public Atf::MessageProtocol
		{
			//! M(44<M(484884444444sb4<4>4444)>4<M(48b8844s44444884)>4<M(484884444sb444<4>444)>)M(4) <FIXME>Common::AtfShared::LoginExtra</FIXME> M(4)4 - M(locale,numTournFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask)>,numTableFilters<M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask)>,numSngFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers)>),M(maxItems), <FIXME>loginExtraData</FIXME> ,M(context),licenseId
			FilterGamesSelectionFilter filter;
			FilterGamesResultCriteria criteria;
			Common::AtfShared::LoginExtra loginExtraData;
			ClientMarkers clientMarkers;
			UINT32 licenseId;

			Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_FILTER_GAMES_PS; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_FILTER_GAMES_PS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS(Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS&&);
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS& operator=(Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS(const Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS&) = default;
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS& operator=(const Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY : public Atf::MessageProtocol
		{
			//! 4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(41111414444s44b4<s>b444444<4>bbt <FIXME>TableCommon::TableStakes</FIXME> 4<8>48m)>4<M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb)>4<M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4)>4<M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommon::TableStakes</FIXME> m8)M(444411144<M(44)>4)t)>4<M(M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m)M(444444)t)>4<4>488M(8444448844) - numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numTableTypes<M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby,lastEntry, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,tableFlags,tableFlags2,visibilityMaskEx)>,numSngTypes<M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)>,numSagTypes<M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)>,numZoomTypes<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>,licenseEarlyBirdMultiplier),lastEntry)>,numSeatFinders<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables),lastEntry)>,numGameOrder<gameOrder>,totalItems,minBuyIn,maxBuyIn,M(gameMask,tableSizeMask,speedMask,tournVariantMask,minNumPlayers,maxNumPlayers,minBuyIn,maxBuyIn,tournStateMask,gameCategoryMask)
			Atf::LAtfVector< TournDataStruct, 4 > tourns;
			Atf::LAtfVector< TableDataStruct, 4 > tableTypes;
			Atf::LAtfVector< SngDataStruct, 4 > sngTypes;
			Atf::LAtfVector< SagDataStruct, 4 > sagTypes;
			Atf::LAtfVector< ZoomDataStruct, 4 > zoomTypes;
			Atf::LAtfVector< SeatFinderDataStruct, 4 > seatFinders;
			Atf::LAtfVector< UINT32, 4 > gameOrder;	// GameCategoryTypes
			INT32 totalItems;
			INT64 minBuyIn;
			INT64 maxBuyIn;
			ResultRanges resultRanges;

			Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY(Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY&&);
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY& operator=(Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY(const Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY& operator=(const Protocol_MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2 : public Atf::MessageProtocol
		{
			//! M(48884<M(484884444444sb4<4>4444)>4<M(48b8844s44444884)>4<M(484884444sb444<4>444)>) <FIXME>Common::AtfShared::LoginExtra</FIXME> M(4)4 - M(locale,tournMedianValue,sngMedianValue,ringMedianValue,numTournFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask)>,numTableFilters<M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask)>,numSngFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers)>), <FIXME>loginExtraData</FIXME> ,M(context),licenseId
			SuggestedGames2SelectionFilter filter;
			Common::AtfShared::LoginExtra loginExtraData;
			ClientMarkers clientMarkers;
			UINT32 licenseId;

			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_SUGGESTED_GAMES2; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_SUGGESTED_GAMES2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2(Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2&&);
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2& operator=(Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2&) = default;
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2& operator=(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY : public Atf::MessageProtocol
		{
			//! 4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(41111414444s44b4<s>b444444<4>bbt <FIXME>TableCommon::TableStakes</FIXME> 4<8>48m)>4<M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb)>4<M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4)>4<M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommon::TableStakes</FIXME> m8)M(444411144<M(44)>4)t)>4<M(M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m)M(444444)t)>4<4> - numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numTableTypes<M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby,lastEntry, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,tableFlags,tableFlags2,visibilityMaskEx)>,numSngTypes<M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)>,numSagTypes<M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)>,numZoomTypes<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>,licenseEarlyBirdMultiplier),lastEntry)>,numSeatFinders<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables),lastEntry)>,numGameOrder<gameOrder>
			Atf::LAtfVector< TournDataStruct, 4 > tourns;
			Atf::LAtfVector< TableDataStruct, 4 > tableTypes;
			Atf::LAtfVector< SngDataStruct, 4 > sngTypes;
			Atf::LAtfVector< SagDataStruct, 4 > sagTypes;
			Atf::LAtfVector< ZoomDataStruct, 4 > zoomTypes;
			Atf::LAtfVector< SeatFinderDataStruct, 4 > seatFinders;
			Atf::LAtfVector< UINT32, 4 > gameOrder;	// GameCategoryTypes

			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY(Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY&&);
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY& operator=(Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY& operator=(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS : public Atf::MessageProtocol
		{
			//! M(48884<M(484884444444sb4<4>4444)>4<M(48b8844s44444884)>4<M(484884444sb444<4>444)>) <FIXME>Common::AtfShared::LoginExtra</FIXME> M(4)4 - M(locale,tournMedianValue,sngMedianValue,ringMedianValue,numTournFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask)>,numTableFilters<M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask)>,numSngFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers)>), <FIXME>loginExtraData</FIXME> ,M(context),licenseId
			SuggestedGames2SelectionFilter filter;
			Common::AtfShared::LoginExtra loginExtraData;
			ClientMarkers clientMarkers;
			UINT32 licenseId;

			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS(Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS&&);
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS& operator=(Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS&) = default;
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS& operator=(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY : public Atf::MessageProtocol
		{
			//! 4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(41111414444s44b4<s>b444444<4>bbt <FIXME>TableCommon::TableStakes</FIXME> 4<8>48m)>4<M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb)>4<M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4)>4<M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommon::TableStakes</FIXME> m8)M(444411144<M(44)>4)t)>4<M(M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m)M(444444)t)>4<4> - numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numTableTypes<M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby,lastEntry, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,tableFlags,tableFlags2,visibilityMaskEx)>,numSngTypes<M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)>,numSagTypes<M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)>,numZoomTypes<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>,licenseEarlyBirdMultiplier),lastEntry)>,numSeatFinders<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables),lastEntry)>,numGameOrder<gameOrder>
			Atf::LAtfVector< TournDataStruct, 4 > tourns;
			Atf::LAtfVector< TableDataStruct, 4 > tableTypes;
			Atf::LAtfVector< SngDataStruct, 4 > sngTypes;
			Atf::LAtfVector< SagDataStruct, 4 > sagTypes;
			Atf::LAtfVector< ZoomDataStruct, 4 > zoomTypes;
			Atf::LAtfVector< SeatFinderDataStruct, 4 > seatFinders;
			Atf::LAtfVector< UINT32, 4 > gameOrder;	// GameCategoryTypes

			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY(Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY&&);
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY& operator=(Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY& operator=(const Protocol_MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME : public Atf::MessageProtocol
		{
			//! M(4ssb)M(4) <FIXME>Common::AtfShared::LoginExtra</FIXME> M(4) - M(locale,name,country,isPM),M(maxItems), <FIXME>loginExtraData</FIXME> ,M(context)
			NameSearchSelectionFilter filter;
			FilterGamesResultCriteria criteria;
			Common::AtfShared::LoginExtra loginExtraData;
			ClientMarkers clientMarkers;

			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_SEARCH_BY_NAME; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_SEARCH_BY_NAME"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME(Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME&&);
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME& operator=(Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME&) = default;
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME& operator=(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY : public Atf::MessageProtocol
		{
			//! 4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(41111414444s44b4<s>b444444<4>bbt <FIXME>TableCommon::TableStakes</FIXME> 4<8>48m)>4<M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb)>4<M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4)>4<M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommon::TableStakes</FIXME> m8)M(444411144<M(44)>4)t)>4<M(M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m)M(444444)t)>4<4> - numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numTableTypes<M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby,lastEntry, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,tableFlags,tableFlags2,visibilityMaskEx)>,numSngTypes<M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)>,numSagTypes<M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)>,numZoomTypes<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>,licenseEarlyBirdMultiplier),lastEntry)>,numSeatFinders<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables),lastEntry)>,numGameOrder<gameOrder>
			Atf::LAtfVector< TournDataStruct, 4 > tourns;
			Atf::LAtfVector< TableDataStruct, 4 > tableTypes;
			Atf::LAtfVector< SngDataStruct, 4 > sngTypes;
			Atf::LAtfVector< SagDataStruct, 4 > sagTypes;
			Atf::LAtfVector< ZoomDataStruct, 4 > zoomTypes;
			Atf::LAtfVector< SeatFinderDataStruct, 4 > seatFinders;
			Atf::LAtfVector< UINT32, 4 > gameOrder;	// GameCategoryTypes

			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY(Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY&&);
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY& operator=(Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY& operator=(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS : public Atf::MessageProtocol
		{
			//! M(4ssb)M(4) <FIXME>Common::AtfShared::LoginExtra</FIXME> M(4) - M(locale,name,country,isPM),M(maxItems), <FIXME>loginExtraData</FIXME> ,M(context)
			NameSearchSelectionFilter filter;
			FilterGamesResultCriteria criteria;
			Common::AtfShared::LoginExtra loginExtraData;
			ClientMarkers clientMarkers;

			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_SEARCH_BY_NAME_PS; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_SEARCH_BY_NAME_PS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS(Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS&&);
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS& operator=(Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS&) = default;
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS& operator=(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY : public Atf::MessageProtocol
		{
			//! 4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)>4<M(41111414444s44b4<s>b444444<4>bbt <FIXME>TableCommon::TableStakes</FIXME> 4<8>48m)>4<M(44b1111s44414b4<s>4412s41484s48s44t4<s>44<M(4444<M(41)>)>4<M(2s)>4ssmb)>4<M(M(b[444444441111444s444<M(14<M(114s)>)>4<4>sb4<sb4<s>>ss44<s>b4ssm])tb4)>4<M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommon::TableStakes</FIXME> m8)M(444411144<M(44)>4)t)>4<M(M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m)M(444444)t)>4<4> - numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>,numTableTypes<M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby,lastEntry, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,tableFlags,tableFlags2,visibilityMaskEx)>,numSngTypes<M(id,tournSites,visible,game,structure,isHiLo,isPlayMoney,currency,buyIn,rake,knockout,speedDisplay,minPlayers,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,brandAccessMask,timedTournType,timedTournTime,visibilityCriteria,maxPerTable,timedTournPlayersPercent,tournFlags,tournFlags2,satelliteTarget,satelliteTargetReference,tournFlagsServInt,regTournId,mobileName,tournGroup,maxPlayers,lastEntry,numAdmissions<admissions>,fppBuyIn,numPrizes<M(min,max,numTickets,numWinners<M(amount,flags)>)>,numTickets<M(ticketId,admission)>,awardScheme,tournGroupName,tournGroupRef,tournSitesEx,userHasTicket)>,numSagTypes<M(M(active[scriptId,flags,brandMask,siteMask,buyin,rake,currency,scalePM,game,isHiLo,structure,speedDisplay,minPrizePool,maxPrizePool,maxPayout,promoRef,minClientVersion,maxClientVersion,numMods<M(numUsers,numSpinnerPrizes<M(level,type,value,targetRef)>)>,numTickets<tickets>,customSpeedDisplayName,restrictCountryInversion,numStatesByCountry<country,stateInversion,numStates<states>>,visibilityCriteria,mobileName,tournGroup,numAdmissions<admissions>,isPlayMoney,tournFlags,tournGroupName,tournGroupRef,tournSites]),lastEntry,userHasTicket,ngSagFlags)>,numZoomTypes<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>,licenseEarlyBirdMultiplier),lastEntry)>,numSeatFinders<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables),lastEntry)>,numGameOrder<gameOrder>
			Atf::LAtfVector< TournDataStruct, 4 > tourns;
			Atf::LAtfVector< TableDataStruct, 4 > tableTypes;
			Atf::LAtfVector< SngDataStruct, 4 > sngTypes;
			Atf::LAtfVector< SagDataStruct, 4 > sagTypes;
			Atf::LAtfVector< ZoomDataStruct, 4 > zoomTypes;
			Atf::LAtfVector< SeatFinderDataStruct, 4 > seatFinders;
			Atf::LAtfVector< UINT32, 4 > gameOrder;	// GameCategoryTypes

			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY(Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY&&);
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY& operator=(Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY& operator=(const Protocol_MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS : public Atf::MessageProtocol
		{
			// M(4<s>44M(444ssb)4<M(t41144244824s4s)>8) - M(numTicketNames<ticketNames>,gameCategoryMask,ticketTournRequestMask,M(locale,siteId,brandId,country,state,isPM),numActivities<M(eventTime,gameCategory,handType,limit,minPlayers,maxPlayers,playersPerTable,loBet,hiBet,buyIn,speed,tournVariant,strRef,flags,currency)>,gameMask)
			TicketTournRequestData input;

			Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_FILTER_TICKET_TOURNS; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_FILTER_TICKET_TOURNS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS(Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS&&);
			Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS& operator=(Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS(const Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS&) = default;
			Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS& operator=(const Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY : public Atf::MessageProtocol
		{
			//! 4< <FIXME>MLobbyNG::cli::OrderedTicketTournInfo</FIXME> > - numTicketInfos< <FIXME>MLobbyNG::cli::OrderedTicketTournInfo</FIXME> >
			Atf::LAtfVector< MLobbyNG::cli::OrderedTicketTournInfo, 4 > ticketInfos;

			Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY(Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY&&);
			Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY& operator=(Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY(const Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY& operator=(const Protocol_MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES : public Atf::MessageProtocol
		{
			//! 4 <FIXME>Common::AtfShared::LoginExtra</FIXME> M(4)4sb - locale, <FIXME>loginExtraData</FIXME> ,M(context),currencyMask,country,isPM
			UINT32 locale;
			Common::AtfShared::LoginExtra loginExtraData;
			ClientMarkers clientMarkers;
			UINT32 currencyMask;
			PString country;
			bool isPM;

			Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_BRANDED_LOBBIES; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_BRANDED_LOBBIES"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES(Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES&&);
			Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES& operator=(Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES(const Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES&) = default;
			Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES& operator=(const Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY : public Atf::MessageProtocol
		{
			// 4<M(ss4<M(484884444444sb4<4>4444)>4<M(48b8844s44444884)>4<M(484884444sb444<4>444)>44)> - numLobbies<M(lobbyName,displayName,numTournFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,tournTypeMask,currencyMask,tableSizeMask,tournVariantMask,tournStateMask,startingWithin,country,isPM,numTournGroups<tournGroups>,lateRegCutoff,genderRestrictMask,tournDisplayMask,negateTournVariantMask)>,numTableFilters<M(locale,gameMask,isPlayMoney,minStake,maxStake,currencyMask,tableSizeMask,country,gameCategoryMask,capMask,anteMask,minDeepRatio,maxDeepRatio,minBuyIn,maxBuyIn,variantMask)>,numSngFilters<M(locale,gameMask,buyInMask,minBuyIn,maxBuyIn,speedMask,currencyMask,tableSizeMask,tournVariantMask,country,isPM,tableNumMask,gameCategoryMask,numTournGroups<tournGroups>,tournStateMask,negateTournVariantMask,numPlayers)>,gameCount,playerCount)>
			Atf::LAtfVector< BrandedLobbyInfo, 4 > lobbies;

			Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY(Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY&&);
			Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY& operator=(Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY(const Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY& operator=(const Protocol_MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF : public Atf::MessageProtocol
		{
			// M(s44sbb4) - M(internalRef,siteId,brandId,country,usePMFlag,isPM,locale)
			FindTournsByRefFilter input;

			Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_FIND_TOURNS_BY_REF; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_FIND_TOURNS_BY_REF"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF(Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF&&);
			Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF& operator=(Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF(const Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF&) = default;
			Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF& operator=(const Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY : public Atf::MessageProtocol
		{
			//! 4<M(M(8ssst44411ss14441114444t444b4<s>14ts2s44s241s1121bs4112sss88t4bM( <FIXME>TournClient::NStackTournInfoStruct</FIXME> )44s4141444ss444<s>ss4m)M(441414<M(2444tm)>44b4441)tb)> - numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg,M( <FIXME>nStackInfo</FIXME> ),tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,mobileName,tournGroup,guaranteedPrizePool,numAdmissions<admissions>,serverObj,tournGroupRef,maxPayoutSag,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite),lastEntry,userHasTicket)>
			Atf::LAtfVector< TournDataStruct, 4 > tourns;

			Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY; }
			const char *getMsgIdString() const override { return "MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY(Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY&&);
			Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY& operator=(Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY(const Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY&) = default;
			Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY& operator=(const Protocol_MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY&) = default;
#endif
#endif
		};
	};
};

#endif
