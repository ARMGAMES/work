/**
 * lobby_atf.h
 *
 * This file was auto-generated from lobby_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor lobby_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_LOBBY_ATF_H
#define ATF_PROTOCOL_DEFFILE_LOBBY_ATF_H

#include "dbm.h"
#include "seatmanstruct_cli.h"
#include "lobby.h"
#include "UserDefStructs.h"
#include "Common_atf.h"
#include "sites.h"
#include "clientplatforms.h"
#include "newsmessages.h"
#include "table.h"
#include "timezone.h"
#include "tlbbop.h"
#include "brandimgs.h"
#include "../storm/TableCommonStructs.h"


namespace Lobby
{
	class ProtocolFactory
	{
	public:
		static Atf::MessageProtocol* createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId);
		static bool validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	namespace cli
	{
		struct Protocol_MSG_LOBBY_SUBMIT_STARCODE : public Atf::MessageProtocol
		{
			// s - starCode
			PString starCode;

			Protocol_MSG_LOBBY_SUBMIT_STARCODE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SUBMIT_STARCODE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SUBMIT_STARCODE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SUBMIT_STARCODE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SUBMIT_STARCODE(Protocol_MSG_LOBBY_SUBMIT_STARCODE&&);
			Protocol_MSG_LOBBY_SUBMIT_STARCODE& operator=(Protocol_MSG_LOBBY_SUBMIT_STARCODE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SUBMIT_STARCODE(const Protocol_MSG_LOBBY_SUBMIT_STARCODE&) = default;
			Protocol_MSG_LOBBY_SUBMIT_STARCODE& operator=(const Protocol_MSG_LOBBY_SUBMIT_STARCODE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SUBMIT_STARCODE_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s] - errCode[errDescr|successDescr]
			INT16 errCode;

			PString errDescr;

			PString successDescr;

			Protocol_MSG_LOBBY_SUBMIT_STARCODE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SUBMIT_STARCODE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SUBMIT_STARCODE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SUBMIT_STARCODE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SUBMIT_STARCODE_REPLY(Protocol_MSG_LOBBY_SUBMIT_STARCODE_REPLY&&);
			Protocol_MSG_LOBBY_SUBMIT_STARCODE_REPLY& operator=(Protocol_MSG_LOBBY_SUBMIT_STARCODE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SUBMIT_STARCODE_REPLY(const Protocol_MSG_LOBBY_SUBMIT_STARCODE_REPLY&) = default;
			Protocol_MSG_LOBBY_SUBMIT_STARCODE_REPLY& operator=(const Protocol_MSG_LOBBY_SUBMIT_STARCODE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT : public Atf::MessageProtocol
		{
			// sbb - notUsedStr,doConvertBuyIn,doConvertWinnings
			PString notUsedStr;
			bool doConvertBuyIn;
			bool doConvertWinnings;

			Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLIENT_CURR_CONV_OPT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLIENT_CURR_CONV_OPT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT(Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT&&);
			Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT& operator=(Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT(const Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT&) = default;
			Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT& operator=(const Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY : public Atf::MessageProtocol
		{
			// 2[s|8] - errCode[errDescr|flags2]
			INT16 errCode;

			PString errDescr;

			UINT64 flags2;

			Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY(Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY&&);
			Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY& operator=(Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY(const Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY&) = default;
			Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY& operator=(const Protocol_MSG_LOBBY_CLIENT_CURR_CONV_OPT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION : public Atf::MessageProtocol
		{
			// s - redirectorUrl
			PString redirectorUrl;

			Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_INIT_NETVERIFY_SESSION; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_INIT_NETVERIFY_SESSION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION(Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION&&);
			Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION& operator=(Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION(const Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION&) = default;
			Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION& operator=(const Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s] - errCode[errDescr|url]
			INT16 errCode;

			PString errDescr;

			PString url;

			Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY(Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY&&);
			Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY& operator=(Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY(const Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY&) = default;
			Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY& operator=(const Protocol_MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT : public Atf::MessageProtocol
		{
			// sddsb4b4 - notUsedStr,startDate,endDate,password,includeFPP,reportFormat,isHtmlForClient,reportFlags
			PString notUsedStr;
			SrvDate startDate;
			SrvDate endDate;
			PString password;
			bool includeFPP;
			UINT32 reportFormat;	// defined as eReportFormat under srvshared/crmserver.h
			bool isHtmlForClient;
			UINT32 reportFlags;	// no limit

			Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_PLAYING_HISTORY_AUDIT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_PLAYING_HISTORY_AUDIT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT(Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT&&);
			Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT& operator=(Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT(const Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT&) = default;
			Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT& operator=(const Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY(Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY&&);
			Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY& operator=(Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY(const Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY&) = default;
			Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY& operator=(const Protocol_MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT : public Atf::MessageProtocol
		{
			// sdds4 - notUsedStr,startDate,endDate,password,reportFormat
			PString notUsedStr;
			SrvDate startDate;
			SrvDate endDate;
			PString password;
			UINT32 reportFormat;

			Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT(Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT&&);
			Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT& operator=(Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT(const Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT&) = default;
			Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT& operator=(const Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY(Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY&&);
			Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY& operator=(Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY(const Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY&) = default;
			Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY& operator=(const Protocol_MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT_REPLY&) = default;
#endif
#endif
		};

		// same as in unauth connection
		struct Protocol_MSG_LOBBY_CHALLENGE_QUESTION : public Atf::MessageProtocol
		{
			// 4 - locale
			UINT32 locale;

			Protocol_MSG_LOBBY_CHALLENGE_QUESTION();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CHALLENGE_QUESTION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CHALLENGE_QUESTION; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CHALLENGE_QUESTION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct ChallengeQuestion
		{
			// 4s - id,txt
			UINT32 id;
			PString txt;

			ChallengeQuestion();
			void clear();
			bool equals(const ChallengeQuestion&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ChallengeQuestion(ChallengeQuestion&&);
			ChallengeQuestion& operator=(ChallengeQuestion&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ChallengeQuestion(const ChallengeQuestion&) = default;
			ChallengeQuestion& operator=(const ChallengeQuestion&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY : public Atf::MessageProtocol
		{
			// 2[s|2<4s>] - errCode[errDesc|numChallenges<id,txt>]
			INT16 errCode;

			PString errDesc;

			Atf::LAtfVector< ChallengeQuestion, 2 > challenges;

			Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CHALLENGE_QUESTION_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CHALLENGE_QUESTION_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY(Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY&&);
			Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY& operator=(Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY(const Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY&) = default;
			Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY& operator=(const Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT : public Atf::MessageProtocol	// see alse lobbyetc
		{

			Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_PLAYING_TIME_LIMIT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_PLAYING_TIME_LIMIT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY : public Atf::MessageProtocol
		{
			// 2[s|44] - errCode[errDesc|limit,autoLimiHour]
			INT16 errCode;

			PString errDesc;

			INT32 limit;
			UINT32 autoLimiHour;

			Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY(Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY&&);
			Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY& operator=(Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY(const Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY& operator=(const Protocol_MSG_LOBBY_GET_PLAYING_TIME_LIMIT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT : public Atf::MessageProtocol	// see also lobbyetc
		{
			// 4 - limit
			INT32 limit;	// -1 means no limit

			Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_PLAYING_TIME_LIMIT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_PLAYING_TIME_LIMIT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY : public Atf::MessageProtocol
		{
			// 2[s|b] - errCode[errDesc|effectiveNow]
			INT16 errCode;

			PString errDesc;

			bool effectiveNow;

			Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY(Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY&&);
			Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY& operator=(Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY(const Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY&) = default;
			Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY& operator=(const Protocol_MSG_LOBBY_SET_PLAYING_TIME_LIMIT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL : public Atf::MessageProtocol
		{

			Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RESEND_ACTIVATION_EMAIL; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RESEND_ACTIVATION_EMAIL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY(Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY&&);
			Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY& operator=(Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY(const Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY&) = default;
			Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY& operator=(const Protocol_MSG_LOBBY_RESEND_ACTIVATION_EMAIL_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION : public Atf::MessageProtocol	// see alse lobbyprotocols_thin.h
		{
			// sb - unusedStr,newCode
			PString unusedStr;
			bool newCode;

			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RESEND_MOBILE_VALIDATION; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RESEND_MOBILE_VALIDATION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION(Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION&&);
			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION& operator=(Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION(const Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION&) = default;
			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION& operator=(const Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY : public Atf::MessageProtocol
		{
			// 2s - errCode,errDesc
			INT16 errCode;
			PString errDesc;

			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY(Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY&&);
			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY& operator=(Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY(const Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY&) = default;
			Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY& operator=(const Protocol_MSG_LOBBY_RESEND_MOBILE_VALIDATION_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS : public Atf::MessageProtocol	// see alse lobbyetc
		{
			// 4 - optionType
			UINT32 optionType;

			Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_CLIENT_OPTIONS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_CLIENT_OPTIONS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|M(v)] - errCode[errDesc|M(encodedPropStr)]
			INT16 errCode;

			PString errDesc;

			PBlock encodedPropStr;

			Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY(Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY&&);
			Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY& operator=(Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY(const Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY& operator=(const Protocol_MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY&) = default;
#endif
#endif

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS : public Atf::MessageProtocol	// see alse lobbyetc
		{
			// M()4 - M(),propType
			Atf::CopyableMsgBody body;	// server does not know the format and saves it to DB directly
			UINT32 propType;

			Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_CLIENT_OPTIONS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_CLIENT_OPTIONS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS(Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS&&);
			Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS& operator=(Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS(const Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS&) = default;
			Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS& operator=(const Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY(Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY&&);
			Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY& operator=(Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY(const Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY&) = default;
			Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY& operator=(const Protocol_MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY&) = default;
#endif
#endif
		};

		struct WaitOnTable
		{
			// M(44ssss11bs44b44b4448) - M(tableId32,clubId,server,serverObject,tableName,specialName,game,limit,isHiLo,currency,stakeLo,stakeHi,isPlayMoney,numPlayers,maxPlayers,isOneOnOne,waitListSize,waitListPos,scalePM,tableId)
			UINT32 tableId32;
			UINT32 clubId;
			PString server;
			PString serverObject;
			PString tableName;
			PString specialName;
			BYTE game;
			BYTE limit;
			bool isHiLo;
			PString currency;
			UINT32 stakeLo;
			UINT32 stakeHi;
			bool isPlayMoney;
			UINT32 numPlayers;
			UINT32 maxPlayers;
			bool isOneOnOne;
			UINT32 waitListSize;
			UINT32 waitListPos;
			UINT32 scalePM;
			UINT64 tableId;

			WaitOnTable();
			void clear();
			bool equals(const WaitOnTable&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			WaitOnTable(WaitOnTable&&);
			WaitOnTable& operator=(WaitOnTable&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			WaitOnTable(const WaitOnTable&) = default;
			WaitOnTable& operator=(const WaitOnTable&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_WAIT_ON_TABLES : public Atf::MessageProtocol
		{

			Protocol_MSG_LOBBY_WAIT_ON_TABLES();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_WAIT_ON_TABLES&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_WAIT_ON_TABLES; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_WAIT_ON_TABLES"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_WAIT_ON_TABLES_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<M(44ssss11bs44b44b4448)>] - errCode[errDesc|numWaitOnTables<M(tableId32,clubId,server,serverObject,tableName,specialName,game,limit,isHiLo,currency,stakeLo,stakeHi,isPlayMoney,numPlayers,maxPlayers,isOneOnOne,waitListSize,waitListPos,scalePM,tableId)>]
			INT16 errCode;

			PString errDesc;

			Atf::LAtfVector< WaitOnTable, 4 > waitOnTables;

			Protocol_MSG_LOBBY_WAIT_ON_TABLES_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_WAIT_ON_TABLES_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_WAIT_ON_TABLES_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_WAIT_ON_TABLES_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_WAIT_ON_TABLES_REPLY(Protocol_MSG_LOBBY_WAIT_ON_TABLES_REPLY&&);
			Protocol_MSG_LOBBY_WAIT_ON_TABLES_REPLY& operator=(Protocol_MSG_LOBBY_WAIT_ON_TABLES_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_WAIT_ON_TABLES_REPLY(const Protocol_MSG_LOBBY_WAIT_ON_TABLES_REPLY&) = default;
			Protocol_MSG_LOBBY_WAIT_ON_TABLES_REPLY& operator=(const Protocol_MSG_LOBBY_WAIT_ON_TABLES_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND : public Atf::MessageProtocol
		{
			// ssssssssbbbbbbssss - tournamentName,tableName,nick,handText,heroTheme,opponentTheme,longText,shortText,showHoleCards,showRealTableName,showAmountInBB,showRealNicks,showHandId,showHeroNick,typeOfShow,language,methodOfShare,client
			PString tournamentName;
			PString tableName;
			PString nick;
			PString handText;	// hand history, can be long
			PString heroTheme;
			PString opponentTheme;
			PString longText;
			PString shortText;
			bool showHoleCards;
			bool showRealTableName;
			bool showAmountInBB;
			bool showRealNicks;
			bool showHandId;
			bool showHeroNick;
			PString typeOfShow;
			PString language;
			PString methodOfShare;
			PString client;

			Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SOCIAL_SHARE_HAND; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SOCIAL_SHARE_HAND"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND(Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND&&);
			Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND& operator=(Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND(const Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND&) = default;
			Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND& operator=(const Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY : public Atf::MessageProtocol
		{
			// 2[s|ss] - errCode[errDesc|encUrl,psapiUrl]
			INT16 errCode;

			PString errDesc;

			PString encUrl;
			PString psapiUrl;

			Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY(Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY&&);
			Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY& operator=(Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY(const Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY&) = default;
			Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY& operator=(const Protocol_MSG_LOBBY_SOCIAL_SHARE_HAND_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_BE_AVC_VALIDATE : public Atf::MessageProtocol
		{
			// 4 - avc
			UINT32 avc;	// no limit

			Protocol_MSG_LOBBY_BE_AVC_VALIDATE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_BE_AVC_VALIDATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_BE_AVC_VALIDATE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_BE_AVC_VALIDATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_BE_AVC_VALIDATE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_MSG_LOBBY_BE_AVC_VALIDATE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_BE_AVC_VALIDATE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_BE_AVC_VALIDATE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_BE_AVC_VALIDATE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_BE_AVC_VALIDATE_REPLY(Protocol_MSG_LOBBY_BE_AVC_VALIDATE_REPLY&&);
			Protocol_MSG_LOBBY_BE_AVC_VALIDATE_REPLY& operator=(Protocol_MSG_LOBBY_BE_AVC_VALIDATE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_BE_AVC_VALIDATE_REPLY(const Protocol_MSG_LOBBY_BE_AVC_VALIDATE_REPLY&) = default;
			Protocol_MSG_LOBBY_BE_AVC_VALIDATE_REPLY& operator=(const Protocol_MSG_LOBBY_BE_AVC_VALIDATE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_BE_AVC_RESEND : public Atf::MessageProtocol
		{

			Protocol_MSG_LOBBY_BE_AVC_RESEND();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_BE_AVC_RESEND&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_BE_AVC_RESEND; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_BE_AVC_RESEND"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_BE_AVC_RESEND_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_MSG_LOBBY_BE_AVC_RESEND_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_BE_AVC_RESEND_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_BE_AVC_RESEND_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_BE_AVC_RESEND_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_BE_AVC_RESEND_REPLY(Protocol_MSG_LOBBY_BE_AVC_RESEND_REPLY&&);
			Protocol_MSG_LOBBY_BE_AVC_RESEND_REPLY& operator=(Protocol_MSG_LOBBY_BE_AVC_RESEND_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_BE_AVC_RESEND_REPLY(const Protocol_MSG_LOBBY_BE_AVC_RESEND_REPLY&) = default;
			Protocol_MSG_LOBBY_BE_AVC_RESEND_REPLY& operator=(const Protocol_MSG_LOBBY_BE_AVC_RESEND_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_REPORT_FIRST_LOGIN : public Atf::MessageProtocol
		{
			//! s44 <FIXME>Common::AtfShared::LoginExtra</FIXME>  - installIdDeprecated,siteId,platformId, <FIXME>extraData</FIXME> 
			PString installIdDeprecated;
			UINT32 siteId;
			UINT32 platformId;
			Common::AtfShared::LoginExtra extraData;

			Protocol_MSG_LOBBY_REPORT_FIRST_LOGIN();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_REPORT_FIRST_LOGIN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_REPORT_FIRST_LOGIN; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_REPORT_FIRST_LOGIN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_REPORT_FIRST_LOGIN(Protocol_MSG_LOBBY_REPORT_FIRST_LOGIN&&);
			Protocol_MSG_LOBBY_REPORT_FIRST_LOGIN& operator=(Protocol_MSG_LOBBY_REPORT_FIRST_LOGIN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_REPORT_FIRST_LOGIN(const Protocol_MSG_LOBBY_REPORT_FIRST_LOGIN&) = default;
			Protocol_MSG_LOBBY_REPORT_FIRST_LOGIN& operator=(const Protocol_MSG_LOBBY_REPORT_FIRST_LOGIN&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_IP_CHECK : public Atf::MessageProtocol
		{
			//! 1 <FIXME_COND_IF> 44 <FIXME_COND_ELSE> 44 <FIXME_COND_ENDIF>  - code <FIXME_COND_IF> ,lobbyIp,pingIp <FIXME_COND_ELSE> ,errCode,myIpi <FIXME_COND_ENDIF> 
			BYTE code;	// hard-coded in client/server

			UINT32 lobbyIp;
			UINT32 pingIp;

			UINT32 errCode;
			UINT32 myIpi;	// server does not use the information

			Protocol_MSG_LOBBY_IP_CHECK();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_IP_CHECK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_IP_CHECK; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_IP_CHECK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct TableSize
		{
			// 11 - min,max
			BYTE min;	// no limit
			BYTE max;	// no limit

			TableSize();
			void clear();
			bool equals(const TableSize&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		// NO LONGER SENT BY NATIVE CLIENT
		struct Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG : public Atf::MessageProtocol
		{
			// 41111bs444444<11> - sngId,game,hiLo,structure,speed,isPlayMoney,currency,minPlayersFrom,minPlayersTo,minBuyIn,maxBuyIn,flags,numTableSizes<min,max>
			UINT32 sngId;
			BYTE game;
			BYTE hiLo;
			BYTE structure;
			BYTE speed;
			bool isPlayMoney;
			PString currency;	// old client still sends it
			UINT32 minPlayersFrom;
			UINT32 minPlayersTo;
			UINT32 minBuyIn;
			UINT32 maxBuyIn;
			UINT32 flags;	// no limit
			Atf::LAtfVector< TableSize, 4 > tableSizes;

			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG();
			void clear() override;
			bool equals(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CLI_LOBBY_FIND_QUICKSTART_SNG; }
			const char *getMsgIdString() const override { return "MSG_CLI_LOBBY_FIND_QUICKSTART_SNG"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG&&);
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG& operator=(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG&) = default;
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG& operator=(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG&) = default;
#endif
#endif
		};
		struct Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY : public Atf::MessageProtocol
		{
			// 42[s|4s44b] - sngId,errCode[errDesc|tournId,server,tournFlags,tournFlagsServInt,isStarted]
			UINT32 sngId;
			INT16 errCode;

			PString errDesc;

			UINT32 tournId;
			PString server;
			UINT32 tournFlags;
			UINT32 tournFlagsServInt;
			bool isStarted;

			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY; }
			const char *getMsgIdString() const override { return "MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY&&);
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY& operator=(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY&) = default;
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY& operator=(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG_REPLY&) = default;
#endif
#endif
		};

		struct DurationSize
		{
			// 22 - minD,maxD
			UINT16 minD;	// no limit
			UINT16 maxD;	// no limit

			DurationSize();
			void clear();
			bool equals(const DurationSize&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		// NO LONGER SENT BY NATIVE CLIENT
		struct Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2 : public Atf::MessageProtocol
		{
			// 4111448844<11>4<22> - sngId,game,hiLo,structure,minPlayersFrom,minPlayersTo,minBuyIn,maxBuyIn,flags,numTableSizes<min,max>,numDurationSizes<minD,maxD>
			UINT32 sngId;
			BYTE game;
			BYTE hiLo;
			BYTE structure;
			UINT32 minPlayersFrom;
			UINT32 minPlayersTo;
			UINT64 minBuyIn;	// 1 trillion should be enough
			UINT64 maxBuyIn;	// 1 trillion should be enough
			UINT32 flags;
			Atf::LAtfVector< TableSize, 4 > tableSizes;
			Atf::LAtfVector< DurationSize, 4 > durationSizes;

			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2();
			void clear() override;
			bool equals(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2; }
			const char *getMsgIdString() const override { return "MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2&&);
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2& operator=(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2&) = default;
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2& operator=(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2&) = default;
#endif
#endif
		};
		struct Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY : public Atf::MessageProtocol
		{
			// 42[s|4s444b] - sngId,errCode[errDesc|tournId,server,tournFlags,tournFlagsServInt,sngScriptId,isStarted]
			UINT32 sngId;
			INT16 errCode;

			PString errDesc;

			UINT32 tournId;
			PString server;
			UINT32 tournFlags;
			UINT32 tournFlagsServInt;
			UINT32 sngScriptId;
			bool isStarted;

			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY&&);
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY& operator=(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY&) = default;
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY& operator=(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG2_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3 : public Atf::MessageProtocol
		{
			// 4111448844<11>4<22> - sngId,game,hiLo,structure,minPlayersFrom,minPlayersTo,minBuyIn,maxBuyIn,flags,numTableSizes<min,max>,numDurationSizes<minD,maxD>
			UINT32 sngId;
			BYTE game;
			BYTE hiLo;
			BYTE structure;	// remove min StructLimit as client sometiems sends 0
			UINT32 minPlayersFrom;
			UINT32 minPlayersTo;
			UINT64 minBuyIn;	// 1 trillion should be enough
			UINT64 maxBuyIn;	// 1 trillion should be enough
			UINT32 flags;
			Atf::LAtfVector< TableSize, 4 > tableSizes;
			Atf::LAtfVector< DurationSize, 4 > durationSizes;

			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3();
			void clear() override;
			bool equals(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3; }
			const char *getMsgIdString() const override { return "MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3&&);
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3& operator=(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3&) = default;
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3& operator=(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3&) = default;
#endif
#endif
		};
		struct Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY : public Atf::MessageProtocol
		{
			// 42[s|4s444b] - sngId,errCode[errDesc|tournId,server,tournFlags,tournFlagsServInt,sngScriptId,isStarted]
			UINT32 sngId;
			INT16 errCode;

			PString errDesc;

			UINT32 tournId;
			PString server;
			UINT32 tournFlags;
			UINT32 tournFlagsServInt;
			UINT32 sngScriptId;
			bool isStarted;

			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY; }
			const char *getMsgIdString() const override { return "MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY&&);
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY& operator=(Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY&) = default;
			Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY& operator=(const Protocol_MSG_CLI_LOBBY_FIND_QUICKSTART_SNG3_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT : public Atf::MessageProtocol
		{
			// 14<4>4<8> - tournStatType,numTournIds<tournIds>,numHandIds<handIds>
			BYTE tournStatType;	// not used on the server side
			Atf::LAtfVector< UINT32, 4 > tournIds;
			Atf::LAtfVector< UINT64, 4 > handIds;

			Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT(Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT&&);
			Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT& operator=(Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT(const Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT&) = default;
			Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT& operator=(const Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY(Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY&&);
			Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY& operator=(Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY(const Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY& operator=(const Protocol_MSG_LOBBY_GET_ES_LAST_LOGIN_REPORT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_USER_CAPS : public Atf::MessageProtocol
		{

			Protocol_MSG_LOBBY_GET_USER_CAPS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_USER_CAPS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_USER_CAPS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_USER_CAPS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_GET_USER_CAPS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|44] - errCode[errDesc|maxTablesLimitPM,maxTablesLimitRM]
			INT16 errCode;

			PString errDesc;

			UINT32 maxTablesLimitPM;
			UINT32 maxTablesLimitRM;

			Protocol_MSG_LOBBY_GET_USER_CAPS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_USER_CAPS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_USER_CAPS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_USER_CAPS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_USER_CAPS_REPLY(Protocol_MSG_LOBBY_GET_USER_CAPS_REPLY&&);
			Protocol_MSG_LOBBY_GET_USER_CAPS_REPLY& operator=(Protocol_MSG_LOBBY_GET_USER_CAPS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_USER_CAPS_REPLY(const Protocol_MSG_LOBBY_GET_USER_CAPS_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_USER_CAPS_REPLY& operator=(const Protocol_MSG_LOBBY_GET_USER_CAPS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_DISABLE_SNG_AUTO_UNREG : public Atf::MessageProtocol
		{
			// b - setPriv
			bool setPriv;

			Protocol_MSG_LOBBY_DISABLE_SNG_AUTO_UNREG();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_DISABLE_SNG_AUTO_UNREG&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_DISABLE_SNG_AUTO_UNREG; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_DISABLE_SNG_AUTO_UNREG"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_TARGET_NEWS_DESKTOP : public Atf::MessageProtocol
		{
			// b4 - onlyTargetBanner,newsTypeMask
			bool onlyTargetBanner;
			UINT32 newsTypeMask;

			Protocol_MSG_LOBBY_TARGET_NEWS_DESKTOP();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_TARGET_NEWS_DESKTOP&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_TARGET_NEWS_DESKTOP; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_TARGET_NEWS_DESKTOP"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_TARGET_NEWS_MOBILE : public Atf::MessageProtocol
		{
			// 44 - clientDownloadSource,newsProductMask
			UINT32 clientDownloadSource;	// flag, no limit on it
			UINT32 newsProductMask;

			Protocol_MSG_LOBBY_TARGET_NEWS_MOBILE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_TARGET_NEWS_MOBILE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_TARGET_NEWS_MOBILE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_TARGET_NEWS_MOBILE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_CLI_LOBBY_CONFIRM_POPUP : public Atf::MessageProtocol
		{
			// 4b - confirmId,understood
			UINT32 confirmId;	// no limit
			bool understood;

			Protocol_MSG_CLI_LOBBY_CONFIRM_POPUP();
			void clear() override;
			bool equals(const Protocol_MSG_CLI_LOBBY_CONFIRM_POPUP&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CLI_LOBBY_CONFIRM_POPUP; }
			const char *getMsgIdString() const override { return "MSG_CLI_LOBBY_CONFIRM_POPUP"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF : public Atf::MessageProtocol
		{
			// s - internalRef
			PString internalRef;

			Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF(Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF&&);
			Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF& operator=(Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF(const Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF&) = default;
			Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF& operator=(const Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4s] - errCode[errDesc|tournamentId,server]
			INT16 errCode;

			PString errDesc;

			UINT32 tournamentId;
			PString server;

			Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY(Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY&&);
			Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY& operator=(Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY(const Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_REGISTERING_TOURN_BYREF_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES : public Atf::MessageProtocol
		{
			// 4 - tournId
			UINT32 tournId;	// no limit

			Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_SIMILAR_SATELLITES; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_SIMILAR_SATELLITES"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct SatelliteTourn
		{
			// M(4t1111s444448s4448444ss) - M(tournamentId,whenStart,game,structure,isHiLo,isPlayMoney,currency,scalePM,buyIn,rake,knockout,fppBuyIn,admissionPrice,admissionId,status,statusBits,tournFlags,tournFlags2,servIntFlags,maxPlayers,players,server,serverObj)
			UINT32 tournamentId;
			SrvTime whenStart;
			BYTE game;
			BYTE structure;
			BYTE isHiLo;
			BYTE isPlayMoney;
			PString currency;
			UINT32 scalePM;
			UINT32 buyIn;
			UINT32 rake;
			UINT32 knockout;
			UINT32 fppBuyIn;
			UINT64 admissionPrice;
			PString admissionId;
			UINT32 status;
			UINT32 statusBits;
			UINT32 tournFlags;
			UINT64 tournFlags2;
			UINT32 servIntFlags;
			UINT32 maxPlayers;
			UINT32 players;
			PString server;
			PString serverObj;

			SatelliteTourn();
			void clear();
			bool equals(const SatelliteTourn&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SatelliteTourn(SatelliteTourn&&);
			SatelliteTourn& operator=(SatelliteTourn&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SatelliteTourn(const SatelliteTourn&) = default;
			SatelliteTourn& operator=(const SatelliteTourn&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<M(4t1111s444448s4448444ss)>] - errCode[errDesc|numSatelliteTourns<M(tournamentId,whenStart,game,structure,isHiLo,isPlayMoney,currency,scalePM,buyIn,rake,knockout,fppBuyIn,admissionPrice,admissionId,status,statusBits,tournFlags,tournFlags2,servIntFlags,maxPlayers,players,server,serverObj)>]
			INT16 errCode;

			PString errDesc;

			Atf::LAtfVector< SatelliteTourn, 4 > satelliteTourns;

			Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY(Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY&&);
			Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY& operator=(Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY(const Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY& operator=(const Protocol_MSG_LOBBY_GET_SIMILAR_SATELLITES_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_JOIN_SEATFINDER : public Atf::MessageProtocol
		{
			// 44s1222 - seatFinderId,buyIn,password,autoRebuyOpt,autoRebuyBigBets,fallUnderBigBets,fallUnderPercents
			UINT32 seatFinderId;	// no limit
			INT32 buyIn;
			PString password;
			INT8 autoRebuyOpt;
			INT16 autoRebuyBigBets;
			INT16 fallUnderBigBets;
			INT16 fallUnderPercents;

			Protocol_MSG_LOBBY_JOIN_SEATFINDER();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_JOIN_SEATFINDER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_JOIN_SEATFINDER; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_JOIN_SEATFINDER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_JOIN_SEATFINDER(Protocol_MSG_LOBBY_JOIN_SEATFINDER&&);
			Protocol_MSG_LOBBY_JOIN_SEATFINDER& operator=(Protocol_MSG_LOBBY_JOIN_SEATFINDER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_JOIN_SEATFINDER(const Protocol_MSG_LOBBY_JOIN_SEATFINDER&) = default;
			Protocol_MSG_LOBBY_JOIN_SEATFINDER& operator=(const Protocol_MSG_LOBBY_JOIN_SEATFINDER&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_JOIN_SEATFINDER_REPLY : public Atf::MessageProtocol
		{
			// 2[s4|44] - errCode[errDesc,seatFinderId|seatFinderId,placeInList]
			INT16 errCode;

			PString errDesc;
			UINT32 seatFinderId;

			INT32 placeInList;

			Protocol_MSG_LOBBY_JOIN_SEATFINDER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_JOIN_SEATFINDER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_JOIN_SEATFINDER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_JOIN_SEATFINDER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_JOIN_SEATFINDER_REPLY(Protocol_MSG_LOBBY_JOIN_SEATFINDER_REPLY&&);
			Protocol_MSG_LOBBY_JOIN_SEATFINDER_REPLY& operator=(Protocol_MSG_LOBBY_JOIN_SEATFINDER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_JOIN_SEATFINDER_REPLY(const Protocol_MSG_LOBBY_JOIN_SEATFINDER_REPLY&) = default;
			Protocol_MSG_LOBBY_JOIN_SEATFINDER_REPLY& operator=(const Protocol_MSG_LOBBY_JOIN_SEATFINDER_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_UNJOIN_SEATFINDER : public Atf::MessageProtocol
		{
			// 4 - seatFinderId
			UINT32 seatFinderId;	// no limit

			Protocol_MSG_LOBBY_UNJOIN_SEATFINDER();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_UNJOIN_SEATFINDER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_UNJOIN_SEATFINDER; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_UNJOIN_SEATFINDER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_UNJOIN_SEATFINDER_REPLY : public Atf::MessageProtocol
		{
			// 2[s4|4] - errCode[errDesc,seatFinderId|seatFinderId]
			INT16 errCode;

			PString errDesc;
			UINT32 seatFinderId;

			Protocol_MSG_LOBBY_UNJOIN_SEATFINDER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_UNJOIN_SEATFINDER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_UNJOIN_SEATFINDER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_UNJOIN_SEATFINDER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_UNJOIN_SEATFINDER_REPLY(Protocol_MSG_LOBBY_UNJOIN_SEATFINDER_REPLY&&);
			Protocol_MSG_LOBBY_UNJOIN_SEATFINDER_REPLY& operator=(Protocol_MSG_LOBBY_UNJOIN_SEATFINDER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_UNJOIN_SEATFINDER_REPLY(const Protocol_MSG_LOBBY_UNJOIN_SEATFINDER_REPLY&) = default;
			Protocol_MSG_LOBBY_UNJOIN_SEATFINDER_REPLY& operator=(const Protocol_MSG_LOBBY_UNJOIN_SEATFINDER_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_JOINED_SEATFINDERS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_JOINED_SEATFINDERS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct SeatFinder
		{
			// 441111s44 - seatFinderId,placeInList,game,structure,isHiLo,isRealMoney,currency,loBet,hiBet
			UINT32 seatFinderId;
			INT32 placeInList;
			BYTE game;
			BYTE structure;
			BYTE isHiLo;
			BYTE isRealMoney;
			PString currency;
			INT32 loBet;
			INT32 hiBet;

			SeatFinder();
			void clear();
			bool equals(const SeatFinder&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SeatFinder(SeatFinder&&);
			SeatFinder& operator=(SeatFinder&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SeatFinder(const SeatFinder&) = default;
			SeatFinder& operator=(const SeatFinder&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY : public Atf::MessageProtocol
		{
			// 4<441111s44> - numSeatFinders<seatFinderId,placeInList,game,structure,isHiLo,isRealMoney,currency,loBet,hiBet>
			Atf::LAtfVector< SeatFinder, 4 > seatFinders;

			Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY(Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY&&);
			Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY& operator=(Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY(const Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY& operator=(const Protocol_MSG_LOBBY_GET_JOINED_SEATFINDERS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS : public Atf::MessageProtocol
		{
			// 4 - seatFinderId
			UINT32 seatFinderId;	// no limit

			Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SEATFINDER_CHECK_CHIPS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SEATFINDER_CHECK_CHIPS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct SeatFinderCli_MsgBodyStruct
		{
			//! M(4s144411444b144 <FIXME>TableCommon::TableStakes</FIXME> 4<8>) - M(id,currency,isHiLo,loBet,hiBet,cap,game,limit,minBuyIn,maxBuyIn,ante,isFast,maxPlayers,chipsQuantum,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>)
			UINT32 id;
			PString currency;
			INT8 isHiLo;
			INT32 loBet;
			INT32 hiBet;
			INT32 cap;
			INT8 game;
			INT8 limit;
			INT32 minBuyIn;
			INT32 maxBuyIn;
			INT32 ante;
			bool isFast;
			INT8 maxPlayers;
			INT32 chipsQuantum;
			INT32 scalePM;
			TableCommon::TableStakes tableStakes;
			Atf::LAtfVector< INT64, 4 > variableAntes;

			SeatFinderCli_MsgBodyStruct();
			void clear();
			bool equals(const SeatFinderCli_MsgBodyStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SeatFinderCli_MsgBodyStruct(SeatFinderCli_MsgBodyStruct&&);
			SeatFinderCli_MsgBodyStruct& operator=(SeatFinderCli_MsgBodyStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SeatFinderCli_MsgBodyStruct(const SeatFinderCli_MsgBodyStruct&) = default;
			SeatFinderCli_MsgBodyStruct& operator=(const SeatFinderCli_MsgBodyStruct&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY : public Atf::MessageProtocol
		{
			//! 2[s|44M(4s144411444b144 <FIXME>TableCommon::TableStakes</FIXME> 4<8>)418] - errCode[errDescr|availChips,defaultBuyIn,M(id,currency,isHiLo,loBet,hiBet,cap,game,limit,minBuyIn,maxBuyIn,ante,isFast,maxPlayers,chipsQuantum,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>),userRollId,clientServiceFlag,playChips]
			INT16 errCode;

			PString errDescr;
			// what is after is specific to the error

			INT32 availChips;
			INT32 defaultBuyIn;
			SeatFinderCli_MsgBodyStruct seatFinderCli;
			INT32 userRollId;
			BYTE clientServiceFlag;
			INT64 playChips;

			Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY(Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY&&);
			Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY& operator=(Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY(const Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY&) = default;
			Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY& operator=(const Protocol_MSG_LOBBY_SEATFINDER_CHECK_CHIPS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_UPDATE_DOB : public Atf::MessageProtocol
		{
			// sd - notUsedStr,dob
			PString notUsedStr;
			SrvDate dob;

			Protocol_MSG_LOBBY_UPDATE_DOB();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_UPDATE_DOB&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_UPDATE_DOB; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_UPDATE_DOB"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_UPDATE_DOB(Protocol_MSG_LOBBY_UPDATE_DOB&&);
			Protocol_MSG_LOBBY_UPDATE_DOB& operator=(Protocol_MSG_LOBBY_UPDATE_DOB&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_UPDATE_DOB(const Protocol_MSG_LOBBY_UPDATE_DOB&) = default;
			Protocol_MSG_LOBBY_UPDATE_DOB& operator=(const Protocol_MSG_LOBBY_UPDATE_DOB&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_UPDATE_DOB_REPLY : public Atf::MessageProtocol
		{
			// 2s - errCode,errDesc
			INT16 errCode;
			PString errDesc;

			Protocol_MSG_LOBBY_UPDATE_DOB_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_UPDATE_DOB_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_UPDATE_DOB_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_UPDATE_DOB_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_UPDATE_DOB_REPLY(Protocol_MSG_LOBBY_UPDATE_DOB_REPLY&&);
			Protocol_MSG_LOBBY_UPDATE_DOB_REPLY& operator=(Protocol_MSG_LOBBY_UPDATE_DOB_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_UPDATE_DOB_REPLY(const Protocol_MSG_LOBBY_UPDATE_DOB_REPLY&) = default;
			Protocol_MSG_LOBBY_UPDATE_DOB_REPLY& operator=(const Protocol_MSG_LOBBY_UPDATE_DOB_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_TOURN : public Atf::MessageProtocol
		{
			// 4 - id
			UINT32 id;	// no limit

			Protocol_MSG_LOBBY_FIND_TOURN();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TOURN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TOURN; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TOURN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_FIND_TOURN_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4s48] - errCode[errDescr|tournamentId,server,tournFlags,tournFlags2]
			INT16 errCode;

			PString errDescr;

			UINT32 tournamentId;
			PString server;
			UINT32 tournFlags;
			UINT64 tournFlags2;

			Protocol_MSG_LOBBY_FIND_TOURN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TOURN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TOURN_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TOURN_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_TOURN_REPLY(Protocol_MSG_LOBBY_FIND_TOURN_REPLY&&);
			Protocol_MSG_LOBBY_FIND_TOURN_REPLY& operator=(Protocol_MSG_LOBBY_FIND_TOURN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_TOURN_REPLY(const Protocol_MSG_LOBBY_FIND_TOURN_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_TOURN_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_TOURN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_WEB_FIND_TOURN : public Atf::MessageProtocol
		{
			// 4 - id
			UINT32 id;	// no limit

			Protocol_MSG_WEB_FIND_TOURN();
			void clear() override;
			bool equals(const Protocol_MSG_WEB_FIND_TOURN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_WEB_FIND_TOURN; }
			const char *getMsgIdString() const override { return "MSG_WEB_FIND_TOURN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_WEB_FIND_TOURN_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4s48] - errCode[errDescr|tournamentId,server,tournFlags,tournFlags2]
			INT16 errCode;

			PString errDescr;

			UINT32 tournamentId;
			PString server;
			UINT32 tournFlags;
			UINT64 tournFlags2;

			Protocol_MSG_WEB_FIND_TOURN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_WEB_FIND_TOURN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_WEB_FIND_TOURN_REPLY; }
			const char *getMsgIdString() const override { return "MSG_WEB_FIND_TOURN_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_WEB_FIND_TOURN_REPLY(Protocol_MSG_WEB_FIND_TOURN_REPLY&&);
			Protocol_MSG_WEB_FIND_TOURN_REPLY& operator=(Protocol_MSG_WEB_FIND_TOURN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_WEB_FIND_TOURN_REPLY(const Protocol_MSG_WEB_FIND_TOURN_REPLY&) = default;
			Protocol_MSG_WEB_FIND_TOURN_REPLY& operator=(const Protocol_MSG_WEB_FIND_TOURN_REPLY&) = default;
#endif
#endif
		};

		struct Text
		{
			// ss - text1,text2
			PString text1;
			PString text2;

			Text();
			void clear();
			bool equals(const Text&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Text(Text&&);
			Text& operator=(Text&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Text(const Text&) = default;
			Text& operator=(const Text&) = default;
#endif
#endif
		};
		struct Name
		{
			// s - name
			PString name;

			Name();
			void clear();
			bool equals(const Name&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Name(Name&&);
			Name& operator=(Name&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Name(const Name&) = default;
			Name& operator=(const Name&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_CHAT_COMPL : public Atf::MessageProtocol
		{
			// 8ss44<ss>4<s>4s48 - handId,tableName,comment,tableId32,numTexts<text1,text2>,numNames<name>,tournId,finalTableText,zoomReplayId,tableId
			UINT64 handId;	// no limit
			PString tableName;
			PString comment;
			UINT32 tableId32;	// no limit
			Atf::LAtfVector< Text, 4 > texts;
			Atf::LAtfVector< Name, 4 > names;
			UINT32 tournId;	// no limit
			PString finalTableText;
			UINT32 zoomReplayId;	// no limit
			UINT64 tableId;	// no limit

			Protocol_MSG_LOBBY_CHAT_COMPL();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CHAT_COMPL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CHAT_COMPL; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CHAT_COMPL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CHAT_COMPL(Protocol_MSG_LOBBY_CHAT_COMPL&&);
			Protocol_MSG_LOBBY_CHAT_COMPL& operator=(Protocol_MSG_LOBBY_CHAT_COMPL&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CHAT_COMPL(const Protocol_MSG_LOBBY_CHAT_COMPL&) = default;
			Protocol_MSG_LOBBY_CHAT_COMPL& operator=(const Protocol_MSG_LOBBY_CHAT_COMPL&) = default;
#endif
#endif
		};

		// Sent by server to client
		struct Protocol_MSG_LOBBY_CLI_BOUNCED : public Atf::MessageProtocol
		{
			// s - email
			PString email;

			Protocol_MSG_LOBBY_CLI_BOUNCED();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLI_BOUNCED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLI_BOUNCED; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLI_BOUNCED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CLI_BOUNCED(Protocol_MSG_LOBBY_CLI_BOUNCED&&);
			Protocol_MSG_LOBBY_CLI_BOUNCED& operator=(Protocol_MSG_LOBBY_CLI_BOUNCED&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CLI_BOUNCED(const Protocol_MSG_LOBBY_CLI_BOUNCED&) = default;
			Protocol_MSG_LOBBY_CLI_BOUNCED& operator=(const Protocol_MSG_LOBBY_CLI_BOUNCED&) = default;
#endif
#endif
		};

		//Replied to server by client
		struct Protocol_MSG_LOBBY_CLI_BOUNCED_REPLY : public Atf::MessageProtocol
		{
			// s1b - notUsedStr,reset,sendValidationCode
			PString notUsedStr;
			BYTE reset;	// Actually behaves as boolean.
			bool sendValidationCode;

			Protocol_MSG_LOBBY_CLI_BOUNCED_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLI_BOUNCED_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLI_BOUNCED_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLI_BOUNCED_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CLI_BOUNCED_REPLY(Protocol_MSG_LOBBY_CLI_BOUNCED_REPLY&&);
			Protocol_MSG_LOBBY_CLI_BOUNCED_REPLY& operator=(Protocol_MSG_LOBBY_CLI_BOUNCED_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CLI_BOUNCED_REPLY(const Protocol_MSG_LOBBY_CLI_BOUNCED_REPLY&) = default;
			Protocol_MSG_LOBBY_CLI_BOUNCED_REPLY& operator=(const Protocol_MSG_LOBBY_CLI_BOUNCED_REPLY&) = default;
#endif
#endif
		};

		// Replied with MSG_LOBBY_CREATE_TOURNAMENT_REPLY
		struct Protocol_MSG_LOBBY_CREATE_USERTOURN : public Atf::MessageProtocol
		{
			// ss111111144ss1 - notUsedStr,password,game,isHL,limit,mon,day,hour,minute,buyIn,rake,message,name,olymp
			PString notUsedStr;
			PString password;
			BYTE game;
			BYTE isHL;	// Behaves as boolean.
			BYTE limit;
			BYTE mon;
			BYTE day;
			BYTE hour;
			BYTE minute;
			INT32 buyIn;
			INT32 rake;
			PString message;
			PString name;
			BYTE olymp;	// Behaves as boolean

			Protocol_MSG_LOBBY_CREATE_USERTOURN();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CREATE_USERTOURN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CREATE_USERTOURN; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CREATE_USERTOURN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CREATE_USERTOURN(Protocol_MSG_LOBBY_CREATE_USERTOURN&&);
			Protocol_MSG_LOBBY_CREATE_USERTOURN& operator=(Protocol_MSG_LOBBY_CREATE_USERTOURN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CREATE_USERTOURN(const Protocol_MSG_LOBBY_CREATE_USERTOURN&) = default;
			Protocol_MSG_LOBBY_CREATE_USERTOURN& operator=(const Protocol_MSG_LOBBY_CREATE_USERTOURN&) = default;
#endif
#endif
		};

		struct TournamentCreationError
		{
			// s4s - userId,error_code,errDescr
			PString userId;
			UINT32 error_code;
			PString errDescr;

			TournamentCreationError();
			void clear();
			bool equals(const TournamentCreationError&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournamentCreationError(TournamentCreationError&&);
			TournamentCreationError& operator=(TournamentCreationError&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournamentCreationError(const TournamentCreationError&) = default;
			TournamentCreationError& operator=(const TournamentCreationError&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_CREATE_TOURNAMENT_REPLY : public Atf::MessageProtocol
		{
			// 2[s|444<s4s>ss] - errCode[errDescr|tournId,timeLeft,numErrors<userId,error_code,errDescr>,warning,restartWarning]
			INT16 errCode;

			PString errDescr;

			UINT32 tournId;
			UINT32 timeLeft;
			Atf::LAtfVector< TournamentCreationError, 4 > errors;
			PString warning;
			PString restartWarning;

			Protocol_MSG_LOBBY_CREATE_TOURNAMENT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CREATE_TOURNAMENT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CREATE_TOURNAMENT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CREATE_TOURNAMENT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CREATE_TOURNAMENT_REPLY(Protocol_MSG_LOBBY_CREATE_TOURNAMENT_REPLY&&);
			Protocol_MSG_LOBBY_CREATE_TOURNAMENT_REPLY& operator=(Protocol_MSG_LOBBY_CREATE_TOURNAMENT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CREATE_TOURNAMENT_REPLY(const Protocol_MSG_LOBBY_CREATE_TOURNAMENT_REPLY&) = default;
			Protocol_MSG_LOBBY_CREATE_TOURNAMENT_REPLY& operator=(const Protocol_MSG_LOBBY_CREATE_TOURNAMENT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_REGISTER_TOURN_USER : public Atf::MessageProtocol
		{
			// 4s444s144M()s111tbb - tournId,notUsedStr,buyInRM,buyInPlay,buyInFpp,tournPwd,useTicket,buyInT,buyInW,M(),isoCode,game,highLo,structure,startTime,allowLateRegistration,preferRegistrationIntoLateTarget
			UINT32 tournId;	// no limits for id
			PString notUsedStr;
			UINT32 buyInRM;
			UINT32 buyInPlay;	// no limits
			UINT32 buyInFpp;
			PString tournPwd;
			BYTE useTicket;
			UINT32 buyInT;
			UINT32 buyInW;	// not used any more
			Atf::CopyableMsgBody currencyContext;	// not used
			PString isoCode;	// not used
			BYTE game;	// not used
			BYTE highLo;	// not used
			BYTE structure;	// not used
			SrvTime startTime;	// not used
			bool allowLateRegistration;
			bool preferRegistrationIntoLateTarget;

			Protocol_MSG_LOBBY_REGISTER_TOURN_USER();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_REGISTER_TOURN_USER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_REGISTER_TOURN_USER; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_REGISTER_TOURN_USER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_REGISTER_TOURN_USER(Protocol_MSG_LOBBY_REGISTER_TOURN_USER&&);
			Protocol_MSG_LOBBY_REGISTER_TOURN_USER& operator=(Protocol_MSG_LOBBY_REGISTER_TOURN_USER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_REGISTER_TOURN_USER(const Protocol_MSG_LOBBY_REGISTER_TOURN_USER&) = default;
			Protocol_MSG_LOBBY_REGISTER_TOURN_USER& operator=(const Protocol_MSG_LOBBY_REGISTER_TOURN_USER&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_REGISTER_TOURN_USER_REPLY : public Atf::MessageProtocol
		{
			//! 2s <FIXME_COND_IF> 2s4 <FIXME_COND_ELSE> bsss <FIXME_COND_ENDIF>  - errCode,errDesc <FIXME_COND_IF> ,allIn,text,tournId <FIXME_COND_ELSE> ,seatAvail,srv,socialToken,clientNotification <FIXME_COND_ENDIF> 
			INT16 errCode;
			PString errDesc;

			INT16 allIn;
			PString text;
			UINT32 tournId;

			bool seatAvail;
			PString srv;
			PString socialToken;
			PString clientNotification;

			Protocol_MSG_LOBBY_REGISTER_TOURN_USER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_REGISTER_TOURN_USER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_REGISTER_TOURN_USER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_REGISTER_TOURN_USER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_REGISTER_TOURN_USER_REPLY(Protocol_MSG_LOBBY_REGISTER_TOURN_USER_REPLY&&);
			Protocol_MSG_LOBBY_REGISTER_TOURN_USER_REPLY& operator=(Protocol_MSG_LOBBY_REGISTER_TOURN_USER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_REGISTER_TOURN_USER_REPLY(const Protocol_MSG_LOBBY_REGISTER_TOURN_USER_REPLY&) = default;
			Protocol_MSG_LOBBY_REGISTER_TOURN_USER_REPLY& operator=(const Protocol_MSG_LOBBY_REGISTER_TOURN_USER_REPLY&) = default;
#endif
#endif
		};

		// this message has no reply message
		struct Protocol_MSG_LOBBY_PUBLISH_VIP_STATUS : public Atf::MessageProtocol
		{
			// sb - notUsedStr,setPriv
			PString notUsedStr;
			bool setPriv;

			Protocol_MSG_LOBBY_PUBLISH_VIP_STATUS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_PUBLISH_VIP_STATUS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_PUBLISH_VIP_STATUS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_PUBLISH_VIP_STATUS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_PUBLISH_VIP_STATUS(Protocol_MSG_LOBBY_PUBLISH_VIP_STATUS&&);
			Protocol_MSG_LOBBY_PUBLISH_VIP_STATUS& operator=(Protocol_MSG_LOBBY_PUBLISH_VIP_STATUS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_PUBLISH_VIP_STATUS(const Protocol_MSG_LOBBY_PUBLISH_VIP_STATUS&) = default;
			Protocol_MSG_LOBBY_PUBLISH_VIP_STATUS& operator=(const Protocol_MSG_LOBBY_PUBLISH_VIP_STATUS&) = default;
#endif
#endif
		};

		// NO LONGER SENT BY NATIVE CLIENT
		// this message has no reply message
		struct Protocol_MSG_LOBBY_HIDE_MOBILE_ICON : public Atf::MessageProtocol
		{
			// b - setPriv
			bool setPriv;

			Protocol_MSG_LOBBY_HIDE_MOBILE_ICON();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_HIDE_MOBILE_ICON&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_HIDE_MOBILE_ICON; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_HIDE_MOBILE_ICON"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_SET_TABLE_LIMITS2 : public Atf::MessageProtocol
		{
			// ss4141 - notUsedStr,currency,limit1,limitType1,limit2,limitType2
			PString notUsedStr;
			PString currency;
			INT32 limit1;	// -1 means no limit, no max limit
			BYTE limitType1;
			INT32 limit2;	// -1 means no limit, no max limit
			BYTE limitType2;

			Protocol_MSG_LOBBY_SET_TABLE_LIMITS2();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_TABLE_LIMITS2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_TABLE_LIMITS2; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_TABLE_LIMITS2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_TABLE_LIMITS2(Protocol_MSG_LOBBY_SET_TABLE_LIMITS2&&);
			Protocol_MSG_LOBBY_SET_TABLE_LIMITS2& operator=(Protocol_MSG_LOBBY_SET_TABLE_LIMITS2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_TABLE_LIMITS2(const Protocol_MSG_LOBBY_SET_TABLE_LIMITS2&) = default;
			Protocol_MSG_LOBBY_SET_TABLE_LIMITS2& operator=(const Protocol_MSG_LOBBY_SET_TABLE_LIMITS2&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SET_TABLE_LIMITS2_REPLY : public Atf::MessageProtocol
		{
			// 212[s|b]12[s|b]444 - errCode,limitType1,errorCode1[errDescr1|effectiveNow1],limitType2,errorCode2[errDescr2|effectiveNow2],limit,waitingIncreaseLimitDays1,waitingIncreaseLimitDays2
			INT16 errCode;
			BYTE limitType1;
			INT16 errorCode1;

			PString errDescr1;

			bool effectiveNow1;

			BYTE limitType2;
			INT16 errorCode2;

			PString errDescr2;

			bool effectiveNow2;

			UINT32 limit;
			UINT32 waitingIncreaseLimitDays1;
			UINT32 waitingIncreaseLimitDays2;

			Protocol_MSG_LOBBY_SET_TABLE_LIMITS2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_TABLE_LIMITS2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_TABLE_LIMITS2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_TABLE_LIMITS2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_TABLE_LIMITS2_REPLY(Protocol_MSG_LOBBY_SET_TABLE_LIMITS2_REPLY&&);
			Protocol_MSG_LOBBY_SET_TABLE_LIMITS2_REPLY& operator=(Protocol_MSG_LOBBY_SET_TABLE_LIMITS2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_TABLE_LIMITS2_REPLY(const Protocol_MSG_LOBBY_SET_TABLE_LIMITS2_REPLY&) = default;
			Protocol_MSG_LOBBY_SET_TABLE_LIMITS2_REPLY& operator=(const Protocol_MSG_LOBBY_SET_TABLE_LIMITS2_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SET_TOURN_LIMITS : public Atf::MessageProtocol
		{
			// ss4141 - notUsedStr,currency,limit1,limitType1,limit2,limitType2
			PString notUsedStr;
			PString currency;
			INT32 limit1;	// // -1 means no limit, no max limit
			BYTE limitType1;
			INT32 limit2;	// // -1 means no limit, no max limit
			BYTE limitType2;

			Protocol_MSG_LOBBY_SET_TOURN_LIMITS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_TOURN_LIMITS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_TOURN_LIMITS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_TOURN_LIMITS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_TOURN_LIMITS(Protocol_MSG_LOBBY_SET_TOURN_LIMITS&&);
			Protocol_MSG_LOBBY_SET_TOURN_LIMITS& operator=(Protocol_MSG_LOBBY_SET_TOURN_LIMITS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_TOURN_LIMITS(const Protocol_MSG_LOBBY_SET_TOURN_LIMITS&) = default;
			Protocol_MSG_LOBBY_SET_TOURN_LIMITS& operator=(const Protocol_MSG_LOBBY_SET_TOURN_LIMITS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SET_TOURN_LIMITS_REPLY : public Atf::MessageProtocol
		{
			// 212[s|b]12[s|b]444 - errCode,limitType1,errorCode1[errDescr1|effectiveNow1],limitType2,errorCode2[errDescr2|effectiveNow2],limit,waitingIncreaseLimitDays1,waitingIncreaseLimitDays2
			INT16 errCode;
			BYTE limitType1;
			INT16 errorCode1;

			PString errDescr1;

			bool effectiveNow1;

			BYTE limitType2;
			INT16 errorCode2;

			PString errDescr2;

			bool effectiveNow2;

			UINT32 limit;
			UINT32 waitingIncreaseLimitDays1;
			UINT32 waitingIncreaseLimitDays2;

			Protocol_MSG_LOBBY_SET_TOURN_LIMITS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_TOURN_LIMITS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_TOURN_LIMITS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_TOURN_LIMITS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_TOURN_LIMITS_REPLY(Protocol_MSG_LOBBY_SET_TOURN_LIMITS_REPLY&&);
			Protocol_MSG_LOBBY_SET_TOURN_LIMITS_REPLY& operator=(Protocol_MSG_LOBBY_SET_TOURN_LIMITS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_TOURN_LIMITS_REPLY(const Protocol_MSG_LOBBY_SET_TOURN_LIMITS_REPLY&) = default;
			Protocol_MSG_LOBBY_SET_TOURN_LIMITS_REPLY& operator=(const Protocol_MSG_LOBBY_SET_TOURN_LIMITS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_IT_DOCUMENT : public Atf::MessageProtocol
		{
			// empty message

			Protocol_MSG_LOBBY_IT_DOCUMENT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_IT_DOCUMENT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_IT_DOCUMENT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_IT_DOCUMENT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_IT_DOCUMENT_REPLY : public Atf::MessageProtocol
		{
			// 2s - errCode,sqlErr
			INT16 errCode;
			PString sqlErr;

			Protocol_MSG_LOBBY_IT_DOCUMENT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_IT_DOCUMENT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_IT_DOCUMENT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_IT_DOCUMENT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_IT_DOCUMENT_REPLY(Protocol_MSG_LOBBY_IT_DOCUMENT_REPLY&&);
			Protocol_MSG_LOBBY_IT_DOCUMENT_REPLY& operator=(Protocol_MSG_LOBBY_IT_DOCUMENT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_IT_DOCUMENT_REPLY(const Protocol_MSG_LOBBY_IT_DOCUMENT_REPLY&) = default;
			Protocol_MSG_LOBBY_IT_DOCUMENT_REPLY& operator=(const Protocol_MSG_LOBBY_IT_DOCUMENT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_CLI_REMATCH_ACCEPT : public Atf::MessageProtocol
		{
			// 444444M()481 - tournId,buyInRM,buyInPlay,buyInFpp,buyInT,buyInW,M(),dummy32,dummy64,useTicket
			UINT32 tournId;	// id is not limited
			UINT32 buyInRM;
			UINT32 buyInPlay;	// no limit
			UINT32 buyInFpp;
			UINT32 buyInT;
			UINT32 buyInW;
			Atf::CopyableMsgBody currencyContext;	// not used
			UINT32 dummy32;	// not used - no limit
			UINT64 dummy64;	// not used - no limit
			BYTE useTicket;

			Protocol_MSG_LOBBY_CLI_REMATCH_ACCEPT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLI_REMATCH_ACCEPT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLI_REMATCH_ACCEPT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLI_REMATCH_ACCEPT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CLI_REMATCH_ACCEPT(Protocol_MSG_LOBBY_CLI_REMATCH_ACCEPT&&);
			Protocol_MSG_LOBBY_CLI_REMATCH_ACCEPT& operator=(Protocol_MSG_LOBBY_CLI_REMATCH_ACCEPT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CLI_REMATCH_ACCEPT(const Protocol_MSG_LOBBY_CLI_REMATCH_ACCEPT&) = default;
			Protocol_MSG_LOBBY_CLI_REMATCH_ACCEPT& operator=(const Protocol_MSG_LOBBY_CLI_REMATCH_ACCEPT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_CLI_REMATCH_DECLINE : public Atf::MessageProtocol
		{
			// 4 - tournId
			UINT32 tournId;	// no limit

			Protocol_MSG_LOBBY_CLI_REMATCH_DECLINE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLI_REMATCH_DECLINE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLI_REMATCH_DECLINE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLI_REMATCH_DECLINE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		// no reply

		struct Protocol_MSG_LOBBY_MIGRATION_GET_INFO : public Atf::MessageProtocol
		{
			// s4 - notUsedStr,type
			PString notUsedStr;
			UINT32 type;

			Protocol_MSG_LOBBY_MIGRATION_GET_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_MIGRATION_GET_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_MIGRATION_GET_INFO; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_MIGRATION_GET_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_MIGRATION_GET_INFO(Protocol_MSG_LOBBY_MIGRATION_GET_INFO&&);
			Protocol_MSG_LOBBY_MIGRATION_GET_INFO& operator=(Protocol_MSG_LOBBY_MIGRATION_GET_INFO&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_MIGRATION_GET_INFO(const Protocol_MSG_LOBBY_MIGRATION_GET_INFO&) = default;
			Protocol_MSG_LOBBY_MIGRATION_GET_INFO& operator=(const Protocol_MSG_LOBBY_MIGRATION_GET_INFO&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_MIGRATION_GET_INFO_REPLY : public Atf::MessageProtocol
		{
			// 2[s|ss4444444444bd] - errCode[errDescr|linkedUserId,linkedUserCity,cashBalance,tBalance,wBalance,fppBalance,monthlyVpp,yearlyVpp,tickets,bonuses,exchangeRate,migrationType,bonusEligible,birthDate]
			INT16 errCode;

			PString errDescr;

			PString linkedUserId;
			PString linkedUserCity;
			INT32 cashBalance;
			INT32 tBalance;
			INT32 wBalance;
			INT32 fppBalance;
			INT32 monthlyVpp;
			INT32 yearlyVpp;
			INT32 tickets;
			INT32 bonuses;
			INT32 exchangeRate;
			INT32 migrationType;
			bool bonusEligible;
			SrvDate birthDate;

			Protocol_MSG_LOBBY_MIGRATION_GET_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_MIGRATION_GET_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_MIGRATION_GET_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_MIGRATION_GET_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_MIGRATION_GET_INFO_REPLY(Protocol_MSG_LOBBY_MIGRATION_GET_INFO_REPLY&&);
			Protocol_MSG_LOBBY_MIGRATION_GET_INFO_REPLY& operator=(Protocol_MSG_LOBBY_MIGRATION_GET_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_MIGRATION_GET_INFO_REPLY(const Protocol_MSG_LOBBY_MIGRATION_GET_INFO_REPLY&) = default;
			Protocol_MSG_LOBBY_MIGRATION_GET_INFO_REPLY& operator=(const Protocol_MSG_LOBBY_MIGRATION_GET_INFO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_MIGRATION_LINK : public Atf::MessageProtocol
		{
			// s4sd - notUsedStr,type,linkedUser,dob
			PString notUsedStr;
			UINT32 type;
			PString linkedUser;
			SrvDate dob;

			Protocol_MSG_LOBBY_MIGRATION_LINK();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_MIGRATION_LINK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_MIGRATION_LINK; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_MIGRATION_LINK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_MIGRATION_LINK(Protocol_MSG_LOBBY_MIGRATION_LINK&&);
			Protocol_MSG_LOBBY_MIGRATION_LINK& operator=(Protocol_MSG_LOBBY_MIGRATION_LINK&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_MIGRATION_LINK(const Protocol_MSG_LOBBY_MIGRATION_LINK&) = default;
			Protocol_MSG_LOBBY_MIGRATION_LINK& operator=(const Protocol_MSG_LOBBY_MIGRATION_LINK&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_MIGRATION_LINK_REPLY : public Atf::MessageProtocol
		{
			// 2[s|ss4444444444bd] - errCode[errDescr|linkedUserId,linkedUserCity,cashBalance,tBalance,wBalance,fppBalance,monthlyVpp,yearlyVpp,tickets,bonuses,exchangeRate,migrationType,bonusEligible,birthDate]
			INT16 errCode;

			PString errDescr;

			PString linkedUserId;
			PString linkedUserCity;
			INT32 cashBalance;
			INT32 tBalance;
			INT32 wBalance;
			INT32 fppBalance;
			INT32 monthlyVpp;
			INT32 yearlyVpp;
			INT32 tickets;
			INT32 bonuses;
			INT32 exchangeRate;
			INT32 migrationType;
			bool bonusEligible;
			SrvDate birthDate;

			Protocol_MSG_LOBBY_MIGRATION_LINK_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_MIGRATION_LINK_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_MIGRATION_LINK_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_MIGRATION_LINK_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_MIGRATION_LINK_REPLY(Protocol_MSG_LOBBY_MIGRATION_LINK_REPLY&&);
			Protocol_MSG_LOBBY_MIGRATION_LINK_REPLY& operator=(Protocol_MSG_LOBBY_MIGRATION_LINK_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_MIGRATION_LINK_REPLY(const Protocol_MSG_LOBBY_MIGRATION_LINK_REPLY&) = default;
			Protocol_MSG_LOBBY_MIGRATION_LINK_REPLY& operator=(const Protocol_MSG_LOBBY_MIGRATION_LINK_REPLY&) = default;
#endif
#endif
		};

		// NO LONGER SENT BY NATIVE CLIENT
		struct Protocol_MSG_LOBBY_MIGRATION_TRANSFER : public Atf::MessageProtocol
		{
			// s44444 - notUsedStr,cashBalance,tBalance,wBalance,fppBalance,exchangeRate
			// TODO: Ask payments group to put the limits for this message
			PString notUsedStr;
			UINT32 cashBalance;
			UINT32 tBalance;
			UINT32 wBalance;	// no longer used
			UINT32 fppBalance;
			UINT32 exchangeRate;	// no limit

			Protocol_MSG_LOBBY_MIGRATION_TRANSFER();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_MIGRATION_TRANSFER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_MIGRATION_TRANSFER; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_MIGRATION_TRANSFER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_MIGRATION_TRANSFER(Protocol_MSG_LOBBY_MIGRATION_TRANSFER&&);
			Protocol_MSG_LOBBY_MIGRATION_TRANSFER& operator=(Protocol_MSG_LOBBY_MIGRATION_TRANSFER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_MIGRATION_TRANSFER(const Protocol_MSG_LOBBY_MIGRATION_TRANSFER&) = default;
			Protocol_MSG_LOBBY_MIGRATION_TRANSFER& operator=(const Protocol_MSG_LOBBY_MIGRATION_TRANSFER&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_MIGRATION_TRANSFER_REPLY : public Atf::MessageProtocol
		{
			// 2[s|44ss] - errCode[errDescr|cashAmtEuro,fppAmt,linkedUserId,city]
			INT16 errCode;

			PString errDescr;

			INT32 cashAmtEuro;
			UINT32 fppAmt;
			PString linkedUserId;
			PString city;

			Protocol_MSG_LOBBY_MIGRATION_TRANSFER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_MIGRATION_TRANSFER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_MIGRATION_TRANSFER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_MIGRATION_TRANSFER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_MIGRATION_TRANSFER_REPLY(Protocol_MSG_LOBBY_MIGRATION_TRANSFER_REPLY&&);
			Protocol_MSG_LOBBY_MIGRATION_TRANSFER_REPLY& operator=(Protocol_MSG_LOBBY_MIGRATION_TRANSFER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_MIGRATION_TRANSFER_REPLY(const Protocol_MSG_LOBBY_MIGRATION_TRANSFER_REPLY&) = default;
			Protocol_MSG_LOBBY_MIGRATION_TRANSFER_REPLY& operator=(const Protocol_MSG_LOBBY_MIGRATION_TRANSFER_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_MIGRATION_CONVERT : public Atf::MessageProtocol
		{
			// s4 - notUsedStr,exchangeRate
			PString notUsedStr;
			UINT32 exchangeRate;	// no limit

			Protocol_MSG_LOBBY_MIGRATION_CONVERT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_MIGRATION_CONVERT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_MIGRATION_CONVERT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_MIGRATION_CONVERT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_MIGRATION_CONVERT(Protocol_MSG_LOBBY_MIGRATION_CONVERT&&);
			Protocol_MSG_LOBBY_MIGRATION_CONVERT& operator=(Protocol_MSG_LOBBY_MIGRATION_CONVERT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_MIGRATION_CONVERT(const Protocol_MSG_LOBBY_MIGRATION_CONVERT&) = default;
			Protocol_MSG_LOBBY_MIGRATION_CONVERT& operator=(const Protocol_MSG_LOBBY_MIGRATION_CONVERT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_MIGRATION_CONVERT_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_MIGRATION_CONVERT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_MIGRATION_CONVERT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_MIGRATION_CONVERT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_MIGRATION_CONVERT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_MIGRATION_CONVERT_REPLY(Protocol_MSG_LOBBY_MIGRATION_CONVERT_REPLY&&);
			Protocol_MSG_LOBBY_MIGRATION_CONVERT_REPLY& operator=(Protocol_MSG_LOBBY_MIGRATION_CONVERT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_MIGRATION_CONVERT_REPLY(const Protocol_MSG_LOBBY_MIGRATION_CONVERT_REPLY&) = default;
			Protocol_MSG_LOBBY_MIGRATION_CONVERT_REPLY& operator=(const Protocol_MSG_LOBBY_MIGRATION_CONVERT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SET_PROMO_IMAGE : public Atf::MessageProtocol
		{
			// bs - doSet,promoImageCode
			bool doSet;
			PString promoImageCode;

			Protocol_MSG_LOBBY_SET_PROMO_IMAGE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_PROMO_IMAGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_PROMO_IMAGE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_PROMO_IMAGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_PROMO_IMAGE(Protocol_MSG_LOBBY_SET_PROMO_IMAGE&&);
			Protocol_MSG_LOBBY_SET_PROMO_IMAGE& operator=(Protocol_MSG_LOBBY_SET_PROMO_IMAGE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_PROMO_IMAGE(const Protocol_MSG_LOBBY_SET_PROMO_IMAGE&) = default;
			Protocol_MSG_LOBBY_SET_PROMO_IMAGE& operator=(const Protocol_MSG_LOBBY_SET_PROMO_IMAGE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SET_PROMO_IMAGE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_SET_PROMO_IMAGE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_PROMO_IMAGE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_PROMO_IMAGE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_PROMO_IMAGE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_PROMO_IMAGE_REPLY(Protocol_MSG_LOBBY_SET_PROMO_IMAGE_REPLY&&);
			Protocol_MSG_LOBBY_SET_PROMO_IMAGE_REPLY& operator=(Protocol_MSG_LOBBY_SET_PROMO_IMAGE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_PROMO_IMAGE_REPLY(const Protocol_MSG_LOBBY_SET_PROMO_IMAGE_REPLY&) = default;
			Protocol_MSG_LOBBY_SET_PROMO_IMAGE_REPLY& operator=(const Protocol_MSG_LOBBY_SET_PROMO_IMAGE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_PROMO_IMAGE : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_LOBBY_GET_PROMO_IMAGE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_PROMO_IMAGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_PROMO_IMAGE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_PROMO_IMAGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_GET_PROMO_IMAGE_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s] - errCode[errDescr|promoImageCode]
			INT16 errCode;

			PString errDescr;

			PString promoImageCode;

			Protocol_MSG_LOBBY_GET_PROMO_IMAGE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_PROMO_IMAGE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_PROMO_IMAGE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_PROMO_IMAGE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_PROMO_IMAGE_REPLY(Protocol_MSG_LOBBY_GET_PROMO_IMAGE_REPLY&&);
			Protocol_MSG_LOBBY_GET_PROMO_IMAGE_REPLY& operator=(Protocol_MSG_LOBBY_GET_PROMO_IMAGE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_PROMO_IMAGE_REPLY(const Protocol_MSG_LOBBY_GET_PROMO_IMAGE_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_PROMO_IMAGE_REPLY& operator=(const Protocol_MSG_LOBBY_GET_PROMO_IMAGE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FR_AVC_VALIDATE : public Atf::MessageProtocol
		{
			// 4 - avc
			UINT32 avc;	// no limit

			Protocol_MSG_LOBBY_FR_AVC_VALIDATE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FR_AVC_VALIDATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FR_AVC_VALIDATE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FR_AVC_VALIDATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_FR_AVC_VALIDATE_REPLY : public Atf::MessageProtocol
		{
			// 2[s|bb] - errCode[errDescr|fullyValidated,is1stTime]
			INT16 errCode;

			PString errDescr;

			bool fullyValidated;
			bool is1stTime;

			Protocol_MSG_LOBBY_FR_AVC_VALIDATE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FR_AVC_VALIDATE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FR_AVC_VALIDATE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FR_AVC_VALIDATE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FR_AVC_VALIDATE_REPLY(Protocol_MSG_LOBBY_FR_AVC_VALIDATE_REPLY&&);
			Protocol_MSG_LOBBY_FR_AVC_VALIDATE_REPLY& operator=(Protocol_MSG_LOBBY_FR_AVC_VALIDATE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FR_AVC_VALIDATE_REPLY(const Protocol_MSG_LOBBY_FR_AVC_VALIDATE_REPLY&) = default;
			Protocol_MSG_LOBBY_FR_AVC_VALIDATE_REPLY& operator=(const Protocol_MSG_LOBBY_FR_AVC_VALIDATE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FR_AVC_RESEND : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_LOBBY_FR_AVC_RESEND();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FR_AVC_RESEND&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FR_AVC_RESEND; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FR_AVC_RESEND"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_FR_AVC_RESEND_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_FR_AVC_RESEND_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FR_AVC_RESEND_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FR_AVC_RESEND_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FR_AVC_RESEND_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FR_AVC_RESEND_REPLY(Protocol_MSG_LOBBY_FR_AVC_RESEND_REPLY&&);
			Protocol_MSG_LOBBY_FR_AVC_RESEND_REPLY& operator=(Protocol_MSG_LOBBY_FR_AVC_RESEND_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FR_AVC_RESEND_REPLY(const Protocol_MSG_LOBBY_FR_AVC_RESEND_REPLY&) = default;
			Protocol_MSG_LOBBY_FR_AVC_RESEND_REPLY& operator=(const Protocol_MSG_LOBBY_FR_AVC_RESEND_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP : public Atf::MessageProtocol
		{
			// sb - notUsedStr,setPriv
			PString notUsedStr;
			bool setPriv;

			Protocol_MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP(Protocol_MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP&&);
			Protocol_MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP& operator=(Protocol_MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP(const Protocol_MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP&) = default;
			Protocol_MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP& operator=(const Protocol_MSG_LOBBY_SHOW_NO_CHAT_TOOLTIP&) = default;
#endif
#endif
		};
		// no reply

		struct Protocol_MSG_LOBBY_CANCEL_RESERVED_SEAT : public Atf::MessageProtocol
		{
			// 418 - tableId32,seat,tableId
			UINT32 tableId32;	// no limit
			BYTE seat;
			UINT64 tableId;	// no limit

			Protocol_MSG_LOBBY_CANCEL_RESERVED_SEAT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CANCEL_RESERVED_SEAT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CANCEL_RESERVED_SEAT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CANCEL_RESERVED_SEAT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE : public Atf::MessageProtocol
		{
			// 41448 - tableId32,minPlayers,clientReqId,searchFlags,currTableId
			UINT32 tableId32;	// no limit
			BYTE minPlayers;
			UINT32 clientReqId;	// no limit
			UINT32 searchFlags;
			UINT64 currTableId;	// no limit

			Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_SIMILAR_TABLE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_SIMILAR_TABLE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY : public Atf::MessageProtocol
		{
			// 2[s44|s414412b8s] - errCode[errDescr,clientReqId,searchFlags|server,tableId,seat,clientReqId,useDecrSearch,numOfPlayersInDecrSearchTable,waitingForSeatReservationTimeout,isThereDealing,tableId64,serverObject]
			INT16 errCode;

			PString errDescr;
			UINT32 clientReqId;
			UINT32 searchFlags;

			PString server;
			UINT32 tableId;
			BYTE seat;

			UINT32 useDecrSearch;
			BYTE numOfPlayersInDecrSearchTable;
			UINT16 waitingForSeatReservationTimeout;
			bool isThereDealing;
			UINT64 tableId64;
			PString serverObject;

			Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY(Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY&&);
			Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY& operator=(Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY(const Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_REPLY&) = default;
#endif
#endif
		};

		// NO LONGER SENT BY NATIVE CLIENT
		struct Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_STOP : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_STOP();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_STOP&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_SIMILAR_TABLE_STOP; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_SIMILAR_TABLE_STOP"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_BY_TYPE : public Atf::MessageProtocol
		{
			// 4144 - typeId,minPlayers,clientReqId,searchFlags
			UINT32 typeId;	// no limit
			BYTE minPlayers;
			UINT32 clientReqId;	// no limit
			UINT32 searchFlags;

			Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_BY_TYPE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_SIMILAR_TABLE_BY_TYPE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_SIMILAR_TABLE_BY_TYPE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_SIMILAR_TABLE_BY_TYPE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		// same as in unauth connection
		struct Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE : public Atf::MessageProtocol
		{
			// 44 - typeId,clientReqId
			UINT32 typeId;	// id has no limits
			UINT32 clientReqId;	// id has no limits

			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TABLE_TO_OBSERVE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TABLE_TO_OBSERVE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY : public Atf::MessageProtocol
		{
			// 2[s4|s448s] - errCode[errDescr,clientReqId|server,tableId,clientReqId,tableId64,serverObject]
			INT16 errCode;

			PString errDescr;
			UINT32 clientReqId;

			PString server;
			UINT32 tableId;

			UINT64 tableId64;
			PString serverObject;

			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY(Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY&&);
			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY& operator=(Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY(const Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY&) = default;
#endif
#endif
		};

		struct BuyInRange
		{
			// 2222 - bottomMin,topMin,bottomMax,topMax
			UINT16 bottomMin;	// no limit
			UINT16 topMin;	// no limit
			UINT16 bottomMax;	// no limit
			UINT16 topMax;	// no limit

			BuyInRange();
			void clear();
			bool equals(const BuyInRange&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct BuyInRanges
		{
			// b4<2222> - isRevert,numBuyInRanges<bottomMin,topMin,bottomMax,topMax>
			bool isRevert;
			Atf::LAtfVector< BuyInRange, 4 > buyInRanges;

			BuyInRanges();
			void clear();
			bool equals(const BuyInRanges&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			BuyInRanges(BuyInRanges&&);
			BuyInRanges& operator=(BuyInRanges&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			BuyInRanges(const BuyInRanges&) = default;
			BuyInRanges& operator=(const BuyInRanges&) = default;
#endif
#endif
		};

		struct SeatManAdvSearchCriteria
		{
			// 44112 - minAvgPot,minAvgStack,minPlayersFlop,minVpip,minHandsHour
			UINT32 minAvgPot;
			UINT32 minAvgStack;
			BYTE minPlayersFlop;
			BYTE minVpip;
			UINT16 minHandsHour;

			SeatManAdvSearchCriteria();
			void clear();
			bool equals(const SeatManAdvSearchCriteria&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		// NO LONGER SENT BY NATIVE CLIENT
		struct Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE : public Atf::MessageProtocol
		{
			// 1111114444b14b4<2222>4411244 - minPlayers,game,hiLo,structure,maxPlayersMin,maxPlayersMax,minLoBet32,minHiBet32,maxLoBet32,maxHiBet32,capOn,speedBM,currencyBM,isRevert,numBuyInRanges<bottomMin,topMin,bottomMax,topMax>,minAvgPot,minAvgStack,minPlayersFlop,minVpip,minHandsHour,clientReqId,searchFlags
			BYTE minPlayers;
			BYTE game;
			BYTE hiLo;
			BYTE structure;
			BYTE maxPlayersMin;
			BYTE maxPlayersMax;
			UINT32 minLoBet32;
			UINT32 minHiBet32;
			UINT32 maxLoBet32;
			UINT32 maxHiBet32;
			bool capOn;
			BYTE speedBM;
			UINT32 currencyBM;
			BuyInRanges buyInRanges;
			SeatManAdvSearchCriteria seatManAdvSearchCriteria;
			UINT32 clientReqId;	// no limit
			UINT32 searchFlags;

			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_SEAT_MANAGER_TABLE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_SEAT_MANAGER_TABLE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE(Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE&&);
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE& operator=(Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE(const Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE&) = default;
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE& operator=(const Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY : public Atf::MessageProtocol
		{
			// 2[s44|s414412b8s] - errCode[errDescr,clientReqId,searchFlags|server,tableId,seat,clientReqId,useDecrSearch,numOfPlayersInDecrSearchTable,waitingForSeatReservationTimeout,isThereDealing,tableId64,serverObject]
			INT16 errCode;

			PString errDescr;
			UINT32 clientReqId;
			UINT32 searchFlags;

			PString server;
			UINT32 tableId;
			BYTE seat;

			UINT32 useDecrSearch;
			BYTE numOfPlayersInDecrSearchTable;
			UINT16 waitingForSeatReservationTimeout;
			bool isThereDealing;
			UINT64 tableId64;
			PString serverObject;

			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY(Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY&&);
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY& operator=(Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY(const Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2 : public Atf::MessageProtocol
		{
			// 1111118888b14b4<2222>4411244 - minPlayers,game,hiLo,structure,maxPlayersMin,maxPlayersMax,minLoBet,minHiBet,maxLoBet,maxHiBet,capOn,speedBM,currencyBM,isRevert,numBuyInRanges<bottomMin,topMin,bottomMax,topMax>,minAvgPot,minAvgStack,minPlayersFlop,minVpip,minHandsHour,clientReqId,searchFlags
			BYTE minPlayers;
			BYTE game;
			BYTE hiLo;
			BYTE structure;	// mobile client sometimes sends 0
			BYTE maxPlayersMin;
			BYTE maxPlayersMax;
			INT64 minLoBet;
			INT64 minHiBet;
			INT64 maxLoBet;
			INT64 maxHiBet;
			bool capOn;
			BYTE speedBM;	// can be a mask
			UINT32 currencyBM;
			BuyInRanges buyInRanges;
			SeatManAdvSearchCriteria seatManAdvSearchCriteria;
			UINT32 clientReqId;	// no limit
			UINT32 searchFlags;

			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2(Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2&&);
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2& operator=(Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2(const Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2&) = default;
			Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2& operator=(const Protocol_MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2&) = default;
#endif
#endif
		};

		// Message MSG_LOBBY_FIND_SEAT_MANAGER_TABLE2_REPLY same as MSG_LOBBY_FIND_SEAT_MANAGER_TABLE_REPLY

		struct Protocol_MSG_LOBBY_GET_BUYIN_LIMIT : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_BUYIN_LIMIT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_BUYIN_LIMIT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_BUYIN_LIMIT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_REPLY : public Atf::MessageProtocol
		{
			// 2[s|44] - errCode[errDescr|limit,autoLimitHour]
			INT16 errCode;

			PString errDescr;

			INT32 limit;
			UINT32 autoLimitHour;

			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_BUYIN_LIMIT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_BUYIN_LIMIT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_REPLY(Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_REPLY&&);
			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_REPLY& operator=(Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_REPLY(const Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_REPLY& operator=(const Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SET_BUYIN_LIMIT : public Atf::MessageProtocol
		{
			// 448 - limit,flags,flagsEx
			INT32 limit;	// max is not limited
			UINT32 flags;	// this param is sent by client, but not used by server
			UINT64 flagsEx;	// this param is sent by client, but not used by server

			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_BUYIN_LIMIT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_BUYIN_LIMIT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_BUYIN_LIMIT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_REPLY : public Atf::MessageProtocol
		{
			// 2[s|b] - errCode[errDescr|effectiveNow]
			INT16 errCode;

			PString errDescr;

			bool effectiveNow;

			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_BUYIN_LIMIT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_BUYIN_LIMIT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_REPLY(Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_REPLY&&);
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_REPLY& operator=(Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_REPLY(const Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_REPLY&) = default;
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_REPLY& operator=(const Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_BUYIN_LIMIT_EX; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_BUYIN_LIMIT_EX"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct LimitEx
		{
			// M(44) - M(limitType,amount)
			INT32 limitType;
			INT32 amount;

			LimitEx();
			void clear();
			bool equals(const LimitEx&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY : public Atf::MessageProtocol
		{
			// 2[s|2<M(44)>] - errCode[errDescr|numLimitEx<M(limitType,amount)>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< LimitEx, 2 > limitEx;

			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY(Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY&&);
			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY& operator=(Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY(const Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY& operator=(const Protocol_MSG_LOBBY_GET_BUYIN_LIMIT_EX_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX : public Atf::MessageProtocol
		{
			// 2<M(44)> - numLimitEx<M(limitType,amount)>
			Atf::LAtfVector< LimitEx, 2 > limitEx;

			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_BUYIN_LIMIT_EX; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_BUYIN_LIMIT_EX"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX(Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX&&);
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX& operator=(Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX(const Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX&) = default;
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX& operator=(const Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX&) = default;
#endif
#endif
		};

		struct LimitExReply
		{
			// M(42[s|4b]) - M(limitType,errCodeLimit[errMsg|amount,effectiveNow])
			INT32 limitType;
			INT16 errCodeLimit;

			PString errMsg;

			INT32 amount;
			bool effectiveNow;

			LimitExReply();
			void clear();
			bool equals(const LimitExReply&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			LimitExReply(LimitExReply&&);
			LimitExReply& operator=(LimitExReply&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			LimitExReply(const LimitExReply&) = default;
			LimitExReply& operator=(const LimitExReply&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<M(42[s|4b])>] - errCode[errDescr|numLimitExReply<M(limitType,errCodeLimit[errMsg|amount,effectiveNow])>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< LimitExReply, 4 > limitExReply;

			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY(Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY&&);
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY& operator=(Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY(const Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY&) = default;
			Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY& operator=(const Protocol_MSG_LOBBY_SET_BUYIN_LIMIT_EX_REPLY&) = default;
#endif
#endif
		};

		// NO LONGER SENT BY NATIVE CLIENT
		struct Protocol_MSG_LOBBY_HISTORY_REQUEST : public Atf::MessageProtocol
		{
			//! s1 <FIXME_COND_IF> 4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 448 <FIXME_COND_ENDIF> 4 - notUsed,type <FIXME_COND_IF> ,numRequested <FIXME_COND_ELSE> ,numRequested <FIXME_COND_ELSE> ,numRequested <FIXME_COND_ELSE> ,numRequested,handId,handId64 <FIXME_COND_ENDIF> ,locale
			PString notUsed;
			INT8 type;	//see: HAND_HISTORY_* defines in dbm.h  These values could be changed to an enum.

			UINT32 numRequested;	//see: dbm.h

			// 1 week

			// no limit for tournid

			//1 only valid value
			UINT32 handId;	// no limit
			UINT64 handId64;	// no limit

			UINT32 locale;	//see: i18n.localedef.h

			Protocol_MSG_LOBBY_HISTORY_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_HISTORY_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_HISTORY_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_HISTORY_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_HISTORY_REQUEST(Protocol_MSG_LOBBY_HISTORY_REQUEST&&);
			Protocol_MSG_LOBBY_HISTORY_REQUEST& operator=(Protocol_MSG_LOBBY_HISTORY_REQUEST&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_HISTORY_REQUEST(const Protocol_MSG_LOBBY_HISTORY_REQUEST&) = default;
			Protocol_MSG_LOBBY_HISTORY_REQUEST& operator=(const Protocol_MSG_LOBBY_HISTORY_REQUEST&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_HISTORY_REQUEST_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s] - errCode[errDescr|email]
			INT16 errCode;

			PString errDescr;

			PString email;

			Protocol_MSG_LOBBY_HISTORY_REQUEST_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_HISTORY_REQUEST_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_HISTORY_REQUEST_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_HISTORY_REQUEST_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_HISTORY_REQUEST_REPLY(Protocol_MSG_LOBBY_HISTORY_REQUEST_REPLY&&);
			Protocol_MSG_LOBBY_HISTORY_REQUEST_REPLY& operator=(Protocol_MSG_LOBBY_HISTORY_REQUEST_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_HISTORY_REQUEST_REPLY(const Protocol_MSG_LOBBY_HISTORY_REQUEST_REPLY&) = default;
			Protocol_MSG_LOBBY_HISTORY_REQUEST_REPLY& operator=(const Protocol_MSG_LOBBY_HISTORY_REQUEST_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT : public Atf::MessageProtocol
		{
			// s4 - notUsed,unique
			PString notUsed;	//Not used
			UINT32 unique;	// no limit

			Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ACTIVATE_ACCOUNT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ACTIVATE_ACCOUNT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT(Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT&&);
			Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT& operator=(Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT(const Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT&) = default;
			Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT& operator=(const Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY : public Atf::MessageProtocol
		{
			// 2[s|b4sbss4] - errCode[errDescr|firstTimeActivation,siteId,promoName,usePromoDeposit,email,country,locale]
			INT16 errCode;

			PString errDescr;

			bool firstTimeActivation;
			UINT32 siteId;
			PString promoName;
			bool usePromoDeposit;
			PString email;
			PString country;
			UINT32 locale;

			Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY(Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY&&);
			Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY& operator=(Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY(const Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY&) = default;
			Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY& operator=(const Protocol_MSG_LOBBY_ACTIVATE_ACCOUNT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_CANCEL_USERTOURN : public Atf::MessageProtocol
		{
			// s4 - notUsedStr,tournId
			PString notUsedStr;
			UINT32 tournId;	// id has no limits

			Protocol_MSG_LOBBY_CANCEL_USERTOURN();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CANCEL_USERTOURN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CANCEL_USERTOURN; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CANCEL_USERTOURN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CANCEL_USERTOURN(Protocol_MSG_LOBBY_CANCEL_USERTOURN&&);
			Protocol_MSG_LOBBY_CANCEL_USERTOURN& operator=(Protocol_MSG_LOBBY_CANCEL_USERTOURN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CANCEL_USERTOURN(const Protocol_MSG_LOBBY_CANCEL_USERTOURN&) = default;
			Protocol_MSG_LOBBY_CANCEL_USERTOURN& operator=(const Protocol_MSG_LOBBY_CANCEL_USERTOURN&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_CANCEL_USERTOURN_REPLY : public Atf::MessageProtocol
		{
			// 2s - errCode,errDescr
			INT16 errCode;
			PString errDescr;

			Protocol_MSG_LOBBY_CANCEL_USERTOURN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CANCEL_USERTOURN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CANCEL_USERTOURN_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CANCEL_USERTOURN_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CANCEL_USERTOURN_REPLY(Protocol_MSG_LOBBY_CANCEL_USERTOURN_REPLY&&);
			Protocol_MSG_LOBBY_CANCEL_USERTOURN_REPLY& operator=(Protocol_MSG_LOBBY_CANCEL_USERTOURN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CANCEL_USERTOURN_REPLY(const Protocol_MSG_LOBBY_CANCEL_USERTOURN_REPLY&) = default;
			Protocol_MSG_LOBBY_CANCEL_USERTOURN_REPLY& operator=(const Protocol_MSG_LOBBY_CANCEL_USERTOURN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_CLIENT_QUEST : public Atf::MessageProtocol	// reply message MSG_LOBBY_CLIENT_QUEST_REPLY is not used
		{
			// 4s4 - type,descr,fpp
			UINT32 type;
			PString descr;	// UserProp str value in DB
			UINT32 fpp;

			Protocol_MSG_LOBBY_CLIENT_QUEST();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLIENT_QUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLIENT_QUEST; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLIENT_QUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CLIENT_QUEST(Protocol_MSG_LOBBY_CLIENT_QUEST&&);
			Protocol_MSG_LOBBY_CLIENT_QUEST& operator=(Protocol_MSG_LOBBY_CLIENT_QUEST&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CLIENT_QUEST(const Protocol_MSG_LOBBY_CLIENT_QUEST&) = default;
			Protocol_MSG_LOBBY_CLIENT_QUEST& operator=(const Protocol_MSG_LOBBY_CLIENT_QUEST&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_DONT_SHOW_WHERE : public Atf::MessageProtocol
		{
			// sb - notUsedStr,b
			PString notUsedStr;
			bool b;

			Protocol_MSG_LOBBY_DONT_SHOW_WHERE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_DONT_SHOW_WHERE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_DONT_SHOW_WHERE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_DONT_SHOW_WHERE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_DONT_SHOW_WHERE(Protocol_MSG_LOBBY_DONT_SHOW_WHERE&&);
			Protocol_MSG_LOBBY_DONT_SHOW_WHERE& operator=(Protocol_MSG_LOBBY_DONT_SHOW_WHERE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_DONT_SHOW_WHERE(const Protocol_MSG_LOBBY_DONT_SHOW_WHERE&) = default;
			Protocol_MSG_LOBBY_DONT_SHOW_WHERE& operator=(const Protocol_MSG_LOBBY_DONT_SHOW_WHERE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_DONT_SHOW_WHERE_REPLY : public Atf::MessageProtocol
		{
			// 2sb - err_code,errDescr,dontShowWhere
			INT16 err_code;
			PString errDescr;
			bool dontShowWhere;

			Protocol_MSG_LOBBY_DONT_SHOW_WHERE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_DONT_SHOW_WHERE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_DONT_SHOW_WHERE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_DONT_SHOW_WHERE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_DONT_SHOW_WHERE_REPLY(Protocol_MSG_LOBBY_DONT_SHOW_WHERE_REPLY&&);
			Protocol_MSG_LOBBY_DONT_SHOW_WHERE_REPLY& operator=(Protocol_MSG_LOBBY_DONT_SHOW_WHERE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_DONT_SHOW_WHERE_REPLY(const Protocol_MSG_LOBBY_DONT_SHOW_WHERE_REPLY&) = default;
			Protocol_MSG_LOBBY_DONT_SHOW_WHERE_REPLY& operator=(const Protocol_MSG_LOBBY_DONT_SHOW_WHERE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_DONT_SHOW_PERSONAL_INFO : public Atf::MessageProtocol
		{
			// sb - notUsedStr,setPriv
			PString notUsedStr;
			bool setPriv;

			Protocol_MSG_LOBBY_DONT_SHOW_PERSONAL_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_DONT_SHOW_PERSONAL_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_DONT_SHOW_PERSONAL_INFO; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_DONT_SHOW_PERSONAL_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_DONT_SHOW_PERSONAL_INFO(Protocol_MSG_LOBBY_DONT_SHOW_PERSONAL_INFO&&);
			Protocol_MSG_LOBBY_DONT_SHOW_PERSONAL_INFO& operator=(Protocol_MSG_LOBBY_DONT_SHOW_PERSONAL_INFO&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_DONT_SHOW_PERSONAL_INFO(const Protocol_MSG_LOBBY_DONT_SHOW_PERSONAL_INFO&) = default;
			Protocol_MSG_LOBBY_DONT_SHOW_PERSONAL_INFO& operator=(const Protocol_MSG_LOBBY_DONT_SHOW_PERSONAL_INFO&) = default;
#endif
#endif
		};
		// no reply

		struct Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS : public Atf::MessageProtocol
		{
			// sb - notUsedStr,b
			PString notUsedStr;
			bool b;

			Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_TOURN_EMAIL_FLAGS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_TOURN_EMAIL_FLAGS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS(Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS&&);
			Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS& operator=(Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS(const Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS&) = default;
			Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS& operator=(const Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY : public Atf::MessageProtocol
		{
			// 2sb - err_code,errDescr,dontShowWhere
			INT16 err_code;
			PString errDescr;
			bool dontShowWhere;

			Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY(Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY&&);
			Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY& operator=(Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY(const Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY&) = default;
			Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY& operator=(const Protocol_MSG_LOBBY_SET_TOURN_EMAIL_FLAGS_REPLY&) = default;
#endif
#endif
		};

		//--------------------------------------------- MSG_LOBBY_USER_TOURNTICKETS2 ------------------------------------------
		struct TournTicketInfoBody	// reply only
		{
			// M(4sb4tts44) - M(ticketId,admissionCode,isMulti,ticketTypeValue,issued,expDate,currency,numTourns,ticketTypeFlags)
			UINT32 ticketId;
			PString admissionCode;
			bool isMulti;
			UINT32 ticketTypeValue;
			CommSrvTime issued;
			CommSrvTime expDate;
			PString currency;
			INT32 numTourns;
			UINT32 ticketTypeFlags;

			TournTicketInfoBody();
			void clear();
			bool equals(const TournTicketInfoBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournTicketInfoBody(TournTicketInfoBody&&);
			TournTicketInfoBody& operator=(TournTicketInfoBody&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournTicketInfoBody(const TournTicketInfoBody&) = default;
			TournTicketInfoBody& operator=(const TournTicketInfoBody&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_USER_TOURNTICKETS2 : public Atf::MessageProtocol	// 472, PYR-14750
		{
			// s - unusedStr
			PString unusedStr;

			Protocol_MSG_LOBBY_USER_TOURNTICKETS2();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_USER_TOURNTICKETS2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_USER_TOURNTICKETS2; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_USER_TOURNTICKETS2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_USER_TOURNTICKETS2(Protocol_MSG_LOBBY_USER_TOURNTICKETS2&&);
			Protocol_MSG_LOBBY_USER_TOURNTICKETS2& operator=(Protocol_MSG_LOBBY_USER_TOURNTICKETS2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_USER_TOURNTICKETS2(const Protocol_MSG_LOBBY_USER_TOURNTICKETS2&) = default;
			Protocol_MSG_LOBBY_USER_TOURNTICKETS2& operator=(const Protocol_MSG_LOBBY_USER_TOURNTICKETS2&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_USER_TOURNTICKETS2_REPLY : public Atf::MessageProtocol	// 473
		{
			// 2[s|4<M(4sb4tts44)>] - errCode[errDescr|numTickets<M(ticketId,admissionCode,isMulti,ticketTypeValue,issued,expDate,currency,numTourns,ticketTypeFlags)>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< TournTicketInfoBody, 4 > tickets;

			Protocol_MSG_LOBBY_USER_TOURNTICKETS2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_USER_TOURNTICKETS2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_USER_TOURNTICKETS2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_USER_TOURNTICKETS2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_USER_TOURNTICKETS2_REPLY(Protocol_MSG_LOBBY_USER_TOURNTICKETS2_REPLY&&);
			Protocol_MSG_LOBBY_USER_TOURNTICKETS2_REPLY& operator=(Protocol_MSG_LOBBY_USER_TOURNTICKETS2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_USER_TOURNTICKETS2_REPLY(const Protocol_MSG_LOBBY_USER_TOURNTICKETS2_REPLY&) = default;
			Protocol_MSG_LOBBY_USER_TOURNTICKETS2_REPLY& operator=(const Protocol_MSG_LOBBY_USER_TOURNTICKETS2_REPLY&) = default;
#endif
#endif
		};

		//--------------------------------------------- MSG_LOBBY_TICKET_TOURNTIDS ------------------------------------------
		struct SingleTournamentBody	// reply only
		{
			// M(444t4441111s4441s4I8) - M(tournamentId,status,tournFlags,whenStart,entrants,minPlayers,buyIn,game,isHiLo,structure,isPlayMoney,server,rake,knockout,fppBuyIn,isRestricted,currency,statusBits,name,tournFlags2)
			UINT32 tournamentId;
			UINT32 status;
			UINT32 tournFlags;
			CommSrvTime whenStart;
			UINT32 entrants;
			UINT32 minPlayers;
			UINT32 buyIn;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			BYTE isPlayMoney;
			PString server;
			UINT32 rake;
			UINT32 knockout;
			UINT32 fppBuyIn;
			BYTE isRestricted;
			PString currency;
			UINT32 statusBits;
			I18nPString name;
			UINT64 tournFlags2;	// PYR-28752

			SingleTournamentBody();
			void clear();
			bool equals(const SingleTournamentBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SingleTournamentBody(SingleTournamentBody&&);
			SingleTournamentBody& operator=(SingleTournamentBody&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SingleTournamentBody(const SingleTournamentBody&) = default;
			SingleTournamentBody& operator=(const SingleTournamentBody&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_TICKET_TOURNTIDS : public Atf::MessageProtocol	// 474, PYR-14750
		{
			// s4 - unusedStr,ticketId
			PString unusedStr;
			UINT32 ticketId;	// no limit

			Protocol_MSG_LOBBY_TICKET_TOURNTIDS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_TICKET_TOURNTIDS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_TICKET_TOURNTIDS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_TICKET_TOURNTIDS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_TICKET_TOURNTIDS(Protocol_MSG_LOBBY_TICKET_TOURNTIDS&&);
			Protocol_MSG_LOBBY_TICKET_TOURNTIDS& operator=(Protocol_MSG_LOBBY_TICKET_TOURNTIDS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_TICKET_TOURNTIDS(const Protocol_MSG_LOBBY_TICKET_TOURNTIDS&) = default;
			Protocol_MSG_LOBBY_TICKET_TOURNTIDS& operator=(const Protocol_MSG_LOBBY_TICKET_TOURNTIDS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_TICKET_TOURNTIDS_REPLY : public Atf::MessageProtocol	// 475
		{
			// 2[s|44<M(444t4441111s4441s4I8)>] - errCode[errDescr|ticketId,numTournaments<M(tournamentId,status,tournFlags,whenStart,entrants,minPlayers,buyIn,game,isHiLo,structure,isPlayMoney,server,rake,knockout,fppBuyIn,isRestricted,currency,statusBits,name,tournFlags2)>]
			INT16 errCode;

			PString errDescr;

			UINT32 ticketId;
			Atf::LAtfVector< SingleTournamentBody, 4 > tournaments;

			Protocol_MSG_LOBBY_TICKET_TOURNTIDS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_TICKET_TOURNTIDS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_TICKET_TOURNTIDS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_TICKET_TOURNTIDS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_TICKET_TOURNTIDS_REPLY(Protocol_MSG_LOBBY_TICKET_TOURNTIDS_REPLY&&);
			Protocol_MSG_LOBBY_TICKET_TOURNTIDS_REPLY& operator=(Protocol_MSG_LOBBY_TICKET_TOURNTIDS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_TICKET_TOURNTIDS_REPLY(const Protocol_MSG_LOBBY_TICKET_TOURNTIDS_REPLY&) = default;
			Protocol_MSG_LOBBY_TICKET_TOURNTIDS_REPLY& operator=(const Protocol_MSG_LOBBY_TICKET_TOURNTIDS_REPLY&) = default;
#endif
#endif
		};

		//--------------------------------------------- MSG_LOBBY_CLI_TEAM_PS_ONLINE ------------------------------------------
		struct TeamOnlineBody	// reply only
		{
			// M(bssss) - M(isPlay,userId,name,country,displayCountry)
			bool isPlay;
			PString userId;
			PString name;
			PString country;
			PString displayCountry;

			TeamOnlineBody();
			void clear();
			bool equals(const TeamOnlineBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TeamOnlineBody(TeamOnlineBody&&);
			TeamOnlineBody& operator=(TeamOnlineBody&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TeamOnlineBody(const TeamOnlineBody&) = default;
			TeamOnlineBody& operator=(const TeamOnlineBody&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE : public Atf::MessageProtocol	// 332
		{
			// empty

			Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLI_TEAM_PS_ONLINE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLI_TEAM_PS_ONLINE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY : public Atf::MessageProtocol	// 333
		{
			// 2[s|4<M(bssss)>] - errCode[errDescr|numTeams<M(isPlay,userId,name,country,displayCountry)>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< TeamOnlineBody, 4 > teams;

			Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY(Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY&&);
			Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY& operator=(Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY(const Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY&) = default;
			Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY& operator=(const Protocol_MSG_LOBBY_CLI_TEAM_PS_ONLINE_REPLY&) = default;
#endif
#endif
		};

		//--------------------------------------------- MSG_LOBBY_TIMEZONE_SET ------------------------------------------
		struct Protocol_MSG_LOBBY_TIMEZONE_SET : public Atf::MessageProtocol	// 383
		{
			// s4s - unusedStr,timezone,tzName
			PString unusedStr;
			// change max from eTzCUSTOM_end to 65537 as old client still sends it
			UINT32 timezone;	// FIXME (tz&0xFFFF) is used in code for checking
			PString tzName;

			Protocol_MSG_LOBBY_TIMEZONE_SET();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_TIMEZONE_SET&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_TIMEZONE_SET; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_TIMEZONE_SET"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_TIMEZONE_SET(Protocol_MSG_LOBBY_TIMEZONE_SET&&);
			Protocol_MSG_LOBBY_TIMEZONE_SET& operator=(Protocol_MSG_LOBBY_TIMEZONE_SET&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_TIMEZONE_SET(const Protocol_MSG_LOBBY_TIMEZONE_SET&) = default;
			Protocol_MSG_LOBBY_TIMEZONE_SET& operator=(const Protocol_MSG_LOBBY_TIMEZONE_SET&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_TIMEZONE_SET_REPLY : public Atf::MessageProtocol	// 384
		{
			// 2[s|4] - errCode[errDescr|timeZone]
			INT16 errCode;

			PString errDescr;

			UINT32 timeZone;

			Protocol_MSG_LOBBY_TIMEZONE_SET_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_TIMEZONE_SET_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_TIMEZONE_SET_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_TIMEZONE_SET_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_TIMEZONE_SET_REPLY(Protocol_MSG_LOBBY_TIMEZONE_SET_REPLY&&);
			Protocol_MSG_LOBBY_TIMEZONE_SET_REPLY& operator=(Protocol_MSG_LOBBY_TIMEZONE_SET_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_TIMEZONE_SET_REPLY(const Protocol_MSG_LOBBY_TIMEZONE_SET_REPLY&) = default;
			Protocol_MSG_LOBBY_TIMEZONE_SET_REPLY& operator=(const Protocol_MSG_LOBBY_TIMEZONE_SET_REPLY&) = default;
#endif
#endif
		};

		//--------------------------------------------- MSG_LOBBY_EXCLUDE_PLAYER ------------------------------------------
		struct Protocol_MSG_LOBBY_EXCLUDE_PLAYER : public Atf::MessageProtocol	// 335
		{
			// s448b1 - unusedStr,days,dummyFlags,dummyFlags2,groupSelfExclusion,version
			PString unusedStr;
			INT32 days;	// ~100 years //#10979 if the value is negative, it means hours, not days
			UINT32 dummyFlags;	// no limit, not used by server
			UINT64 dummyFlags2;	// no limit, not used by server
			bool groupSelfExclusion;
			BYTE version;

			Protocol_MSG_LOBBY_EXCLUDE_PLAYER();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_EXCLUDE_PLAYER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_EXCLUDE_PLAYER; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_EXCLUDE_PLAYER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_EXCLUDE_PLAYER(Protocol_MSG_LOBBY_EXCLUDE_PLAYER&&);
			Protocol_MSG_LOBBY_EXCLUDE_PLAYER& operator=(Protocol_MSG_LOBBY_EXCLUDE_PLAYER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_EXCLUDE_PLAYER(const Protocol_MSG_LOBBY_EXCLUDE_PLAYER&) = default;
			Protocol_MSG_LOBBY_EXCLUDE_PLAYER& operator=(const Protocol_MSG_LOBBY_EXCLUDE_PLAYER&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_EXCLUDE_PLAYER_REPLY : public Atf::MessageProtocol	// 336
		{
			// 2[s|4t44] - errCode[errDescr|days,until,requestedDays,seFlags]
			INT16 errCode;

			PString errDescr;

			INT32 days;
			CommSrvTime until;
			INT32 requestedDays;
			UINT32 seFlags;

			Protocol_MSG_LOBBY_EXCLUDE_PLAYER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_EXCLUDE_PLAYER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_EXCLUDE_PLAYER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_EXCLUDE_PLAYER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_EXCLUDE_PLAYER_REPLY(Protocol_MSG_LOBBY_EXCLUDE_PLAYER_REPLY&&);
			Protocol_MSG_LOBBY_EXCLUDE_PLAYER_REPLY& operator=(Protocol_MSG_LOBBY_EXCLUDE_PLAYER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_EXCLUDE_PLAYER_REPLY(const Protocol_MSG_LOBBY_EXCLUDE_PLAYER_REPLY&) = default;
			Protocol_MSG_LOBBY_EXCLUDE_PLAYER_REPLY& operator=(const Protocol_MSG_LOBBY_EXCLUDE_PLAYER_REPLY&) = default;
#endif
#endif
		};

		//--------------------------------------------- MSG_LOBBY_INTELLIPOKER_SIGNUP ------------------------------------------
		struct Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP : public Atf::MessageProtocol	// 357
		{
			// sss - unusedStr,pwd,language
			PString unusedStr;
			PString pwd;
			PString language;

			Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_INTELLIPOKER_SIGNUP; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_INTELLIPOKER_SIGNUP"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP(Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP&&);
			Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP& operator=(Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP(const Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP&) = default;
			Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP& operator=(const Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY : public Atf::MessageProtocol	// 358
		{
			// 2[s|4sss] - errCode[errDescr|code,info,url,urlCaption]
			INT16 errCode;

			PString errDescr;

			UINT32 code;
			PString info;
			PString url;
			PString urlCaption;

			Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY(Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY&&);
			Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY& operator=(Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY(const Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY&) = default;
			Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY& operator=(const Protocol_MSG_LOBBY_INTELLIPOKER_SIGNUP_REPLY&) = default;
#endif
#endif
		};

		//--------------------------------------------- MSG_LOBBY_INTELLIPOKER_PWD ------------------------------------------
		struct Protocol_MSG_LOBBY_INTELLIPOKER_PWD : public Atf::MessageProtocol	// 359
		{
			// ss - unusedStr,pwd
			PString unusedStr;
			PString pwd;

			Protocol_MSG_LOBBY_INTELLIPOKER_PWD();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_INTELLIPOKER_PWD&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_INTELLIPOKER_PWD; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_INTELLIPOKER_PWD"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_INTELLIPOKER_PWD(Protocol_MSG_LOBBY_INTELLIPOKER_PWD&&);
			Protocol_MSG_LOBBY_INTELLIPOKER_PWD& operator=(Protocol_MSG_LOBBY_INTELLIPOKER_PWD&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_INTELLIPOKER_PWD(const Protocol_MSG_LOBBY_INTELLIPOKER_PWD&) = default;
			Protocol_MSG_LOBBY_INTELLIPOKER_PWD& operator=(const Protocol_MSG_LOBBY_INTELLIPOKER_PWD&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_INTELLIPOKER_PWD_REPLY : public Atf::MessageProtocol	// 360
		{
			// 2[s|4sss] - errCode[errDescr|code,info,url,urlCaption]
			INT16 errCode;

			PString errDescr;

			UINT32 code;
			PString info;
			PString url;
			PString urlCaption;

			Protocol_MSG_LOBBY_INTELLIPOKER_PWD_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_INTELLIPOKER_PWD_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_INTELLIPOKER_PWD_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_INTELLIPOKER_PWD_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_INTELLIPOKER_PWD_REPLY(Protocol_MSG_LOBBY_INTELLIPOKER_PWD_REPLY&&);
			Protocol_MSG_LOBBY_INTELLIPOKER_PWD_REPLY& operator=(Protocol_MSG_LOBBY_INTELLIPOKER_PWD_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_INTELLIPOKER_PWD_REPLY(const Protocol_MSG_LOBBY_INTELLIPOKER_PWD_REPLY&) = default;
			Protocol_MSG_LOBBY_INTELLIPOKER_PWD_REPLY& operator=(const Protocol_MSG_LOBBY_INTELLIPOKER_PWD_REPLY&) = default;
#endif
#endif
		};

		//--------------------------------------------- MSG_LOBBY_GET_CONSENTS ------------------------------------------
		struct ConsentBody	// reply only
		{
			// M(44ss) - M(id,status,empty,empty2)
			UINT32 id;
			UINT32 status;
			PString empty;
			PString empty2;

			ConsentBody();
			void clear();
			bool equals(const ConsentBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ConsentBody(ConsentBody&&);
			ConsentBody& operator=(ConsentBody&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ConsentBody(const ConsentBody&) = default;
			ConsentBody& operator=(const ConsentBody&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_CONSENTS : public Atf::MessageProtocol	// 1107
		{
			// s - unusedStr
			PString unusedStr;

			Protocol_MSG_LOBBY_GET_CONSENTS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_CONSENTS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_CONSENTS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_CONSENTS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_CONSENTS(Protocol_MSG_LOBBY_GET_CONSENTS&&);
			Protocol_MSG_LOBBY_GET_CONSENTS& operator=(Protocol_MSG_LOBBY_GET_CONSENTS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_CONSENTS(const Protocol_MSG_LOBBY_GET_CONSENTS&) = default;
			Protocol_MSG_LOBBY_GET_CONSENTS& operator=(const Protocol_MSG_LOBBY_GET_CONSENTS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_CONSENTS_REPLY : public Atf::MessageProtocol	// 1108
		{
			// 2[s|4<M(44ss)>] - errCode[errDescr|numConsents<M(id,status,empty,empty2)>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< ConsentBody, 4 > consents;

			Protocol_MSG_LOBBY_GET_CONSENTS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_CONSENTS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_CONSENTS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_CONSENTS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_CONSENTS_REPLY(Protocol_MSG_LOBBY_GET_CONSENTS_REPLY&&);
			Protocol_MSG_LOBBY_GET_CONSENTS_REPLY& operator=(Protocol_MSG_LOBBY_GET_CONSENTS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_CONSENTS_REPLY(const Protocol_MSG_LOBBY_GET_CONSENTS_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_CONSENTS_REPLY& operator=(const Protocol_MSG_LOBBY_GET_CONSENTS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_USER_STATS : public Atf::MessageProtocol
		{
			// s4 - notUsedStr,numHands
			PString notUsedStr;
			INT32 numHands;

			Protocol_MSG_LOBBY_USER_STATS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_USER_STATS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_USER_STATS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_USER_STATS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_USER_STATS(Protocol_MSG_LOBBY_USER_STATS&&);
			Protocol_MSG_LOBBY_USER_STATS& operator=(Protocol_MSG_LOBBY_USER_STATS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_USER_STATS(const Protocol_MSG_LOBBY_USER_STATS&) = default;
			Protocol_MSG_LOBBY_USER_STATS& operator=(const Protocol_MSG_LOBBY_USER_STATS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_USER_STATS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s] - errCode[errDescr|email]
			INT16 errCode;

			PString errDescr;

			PString email;

			Protocol_MSG_LOBBY_USER_STATS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_USER_STATS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_USER_STATS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_USER_STATS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_USER_STATS_REPLY(Protocol_MSG_LOBBY_USER_STATS_REPLY&&);
			Protocol_MSG_LOBBY_USER_STATS_REPLY& operator=(Protocol_MSG_LOBBY_USER_STATS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_USER_STATS_REPLY(const Protocol_MSG_LOBBY_USER_STATS_REPLY&) = default;
			Protocol_MSG_LOBBY_USER_STATS_REPLY& operator=(const Protocol_MSG_LOBBY_USER_STATS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_TOURN_STATS : public Atf::MessageProtocol
		{
			// 1s4 - requestType,notUsedStr,tournIdOrCount
			BYTE requestType;
			PString notUsedStr;
			UINT32 tournIdOrCount;	// no limit (application logic checks the limit)

			Protocol_MSG_LOBBY_TOURN_STATS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_TOURN_STATS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_TOURN_STATS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_TOURN_STATS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_TOURN_STATS(Protocol_MSG_LOBBY_TOURN_STATS&&);
			Protocol_MSG_LOBBY_TOURN_STATS& operator=(Protocol_MSG_LOBBY_TOURN_STATS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_TOURN_STATS(const Protocol_MSG_LOBBY_TOURN_STATS&) = default;
			Protocol_MSG_LOBBY_TOURN_STATS& operator=(const Protocol_MSG_LOBBY_TOURN_STATS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_TOURN_STATS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s] - errCode[errDescr|email]
			INT16 errCode;

			PString errDescr;

			PString email;

			Protocol_MSG_LOBBY_TOURN_STATS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_TOURN_STATS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_TOURN_STATS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_TOURN_STATS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_TOURN_STATS_REPLY(Protocol_MSG_LOBBY_TOURN_STATS_REPLY&&);
			Protocol_MSG_LOBBY_TOURN_STATS_REPLY& operator=(Protocol_MSG_LOBBY_TOURN_STATS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_TOURN_STATS_REPLY(const Protocol_MSG_LOBBY_TOURN_STATS_REPLY&) = default;
			Protocol_MSG_LOBBY_TOURN_STATS_REPLY& operator=(const Protocol_MSG_LOBBY_TOURN_STATS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_LOGOUT : public Atf::MessageProtocol
		{
			// 4 - flags
			UINT32 flags;

			Protocol_MSG_LOBBY_LOGOUT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_LOGOUT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_LOGOUT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_LOGOUT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_LOGOUT_CONFIRM : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_LOBBY_LOGOUT_CONFIRM();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_LOGOUT_CONFIRM&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_LOGOUT_CONFIRM; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_LOGOUT_CONFIRM"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_ADMIN_INFO : public Atf::MessageProtocol
		{
			// s - message
			PString message;	//Outbound message from Lobby to Client

			Protocol_MSG_LOBBY_ADMIN_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_INFO; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_ADMIN_INFO(Protocol_MSG_LOBBY_ADMIN_INFO&&);
			Protocol_MSG_LOBBY_ADMIN_INFO& operator=(Protocol_MSG_LOBBY_ADMIN_INFO&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_ADMIN_INFO(const Protocol_MSG_LOBBY_ADMIN_INFO&) = default;
			Protocol_MSG_LOBBY_ADMIN_INFO& operator=(const Protocol_MSG_LOBBY_ADMIN_INFO&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_ADMIN_INFO_REPLY : public Atf::MessageProtocol
		{
			// Inbound message from Client to Lobby

			Protocol_MSG_LOBBY_ADMIN_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_ADMIN_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_ADMIN_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_ADMIN_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_GET_TLB : public Atf::MessageProtocol
		{
			// sdd - notUsed,dateFrom,dateTo
			PString notUsed;
			SrvDate dateFrom;
			SrvDate dateTo;

			Protocol_MSG_LOBBY_GET_TLB();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_TLB&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_TLB; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_TLB"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_TLB(Protocol_MSG_LOBBY_GET_TLB&&);
			Protocol_MSG_LOBBY_GET_TLB& operator=(Protocol_MSG_LOBBY_GET_TLB&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_TLB(const Protocol_MSG_LOBBY_GET_TLB&) = default;
			Protocol_MSG_LOBBY_GET_TLB& operator=(const Protocol_MSG_LOBBY_GET_TLB&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_TLB_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s] - errCode[errDescr|email]
			INT16 errCode;

			PString errDescr;

			PString email;

			Protocol_MSG_LOBBY_GET_TLB_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_TLB_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_TLB_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_TLB_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_TLB_REPLY(Protocol_MSG_LOBBY_GET_TLB_REPLY&&);
			Protocol_MSG_LOBBY_GET_TLB_REPLY& operator=(Protocol_MSG_LOBBY_GET_TLB_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_TLB_REPLY(const Protocol_MSG_LOBBY_GET_TLB_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_TLB_REPLY& operator=(const Protocol_MSG_LOBBY_GET_TLB_REPLY&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_USER_PROPS : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_LOBBY_USER_PROPS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_USER_PROPS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_USER_PROPS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_USER_PROPS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct StellarBonus
		{
			// 44 - vppThreshold,amount
			UINT32 vppThreshold;
			UINT32 amount;

			StellarBonus();
			void clear();
			bool equals(const StellarBonus&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct MilestoneBonusOld
		{
			// 4 - vppThreshold
			UINT32 vppThreshold;

			MilestoneBonusOld();
			void clear();
			bool equals(const MilestoneBonusOld&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct MilestoneBonusNew
		{
			// M(M(444)) - M(M(license,vppThreshold,amount))

			UINT32 license;
			UINT32 vppThreshold;
			UINT32 amount;

			MilestoneBonusNew();
			void clear();
			bool equals(const MilestoneBonusNew&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct VIPLevel
		{
			// 4444 - statusId,minFpp,fppBonusRate,vipToKeepYearlyStatus
			UINT32 statusId;
			UINT32 minFpp;
			UINT32 fppBonusRate;
			UINT32 vipToKeepYearlyStatus;

			VIPLevel();
			void clear();
			bool equals(const VIPLevel&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct RawVIPLevel
		{
			// M(4444444) - M(statusId,type,minFpp,fppBonusRate,vipToKeepYearlyStatus,lastMonthForYearly,missableMonthsYearly)

			UINT32 statusId;
			UINT32 type;
			UINT32 minFpp;
			UINT32 fppBonusRate;
			UINT32 vipToKeepYearlyStatus;
			UINT32 lastMonthForYearly;
			UINT32 missableMonthsYearly;

			RawVIPLevel();
			void clear();
			bool equals(const RawVIPLevel&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct CountryData
		{
			// s4<s> - country,numPrefixes<prefixes>
			PString country;
			Atf::LAtfVector< PString, 4 > prefixes;

			CountryData();
			void clear();
			bool equals(const CountryData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			CountryData(CountryData&&);
			CountryData& operator=(CountryData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			CountryData(const CountryData&) = default;
			CountryData& operator=(const CountryData&) = default;
#endif
#endif
		};

		struct CountriesMsgBody
		{
			// M(4<s4<s>>) - M(numCountries<country,numPrefixes<prefixes>>)
			Atf::LAtfVector< CountryData, 4 > countries;

			CountriesMsgBody();
			void clear();
			bool equals(const CountriesMsgBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			CountriesMsgBody(CountriesMsgBody&&);
			CountriesMsgBody& operator=(CountriesMsgBody&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			CountriesMsgBody(const CountriesMsgBody&) = default;
			CountriesMsgBody& operator=(const CountriesMsgBody&) = default;
#endif
#endif
		};

		struct ClientFeatureVisibility
		{
			// M(8888) - M(clientFeatureVisibilityOnMask,clientFeatureVisibilityOffMask,clientFeatureVisibilityOnMask2,clientFeatureVisibilityOffMask2)
			UINT64 clientFeatureVisibilityOnMask;
			UINT64 clientFeatureVisibilityOffMask;
			UINT64 clientFeatureVisibilityOnMask2;
			UINT64 clientFeatureVisibilityOffMask2;

			ClientFeatureVisibility();
			void clear();
			bool equals(const ClientFeatureVisibility&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct HallOfFameLevel
		{
			// 441 - levelId,ltVppThreshold,flags
			UINT32 levelId;
			UINT32 ltVppThreshold;
			BYTE flags;

			HallOfFameLevel();
			void clear();
			bool equals(const HallOfFameLevel&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct HallOfFameLevels
		{
			// M(4<441>) - M(numLevels<levelId,ltVppThreshold,flags>)
			Atf::LAtfVector< HallOfFameLevel, 4 > levels;

			HallOfFameLevels();
			void clear();
			bool equals(const HallOfFameLevels&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			HallOfFameLevels(HallOfFameLevels&&);
			HallOfFameLevels& operator=(HallOfFameLevels&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			HallOfFameLevels(const HallOfFameLevels&) = default;
			HallOfFameLevels& operator=(const HallOfFameLevels&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_USER_PROPS_REPLY : public Atf::MessageProtocol
		{
			// 444s4844448444<44>bb414<4>4<4444>b4bM(4<s4<s>>)bbbs4<M(4444444)>44<M(M(444))>bM(4<441>)44M(8888)8ts4 - privs,flags,locale,country,emLocale,privs2,vipStatus,timeZone,origUserIntId,userIntId,flags2,vppCounter1,vppCounter2,numStellarBonuses<vppThreshold,amount>,uiStatsAllowed,rmTransersAllowed,obsolete,findSimilarTableFlag,numMilestoneBonusesOld<vppThreshold>,numVipLevels<statusId,minFpp,fppBonusRate,vipToKeepYearlyStatus>,hgEnabled,cppCountr3,fastDepositEnabled,M(numCountries<country,numPrefixes<prefixes>>),handSharingEnabledForSiteAndBrand,itAccVerificationOpen,allowSmsValidationForNewInstallId,userWebId,numRawVIPLevels<M(statusId,type,minFpp,fppBonusRate,vipToKeepYearlyStatus,lastMonthForYearly,missableMonthsYearly)>,chatModeratorRestrictions,numMilestoneBonusesNew<M(M(license,vppThreshold,amount))>,allowSmsPwdReset,M(numLevels<levelId,ltVppThreshold,flags>),lifetimeFpp,otherFlags,M(clientFeatureVisibilityOnMask,clientFeatureVisibilityOffMask,clientFeatureVisibilityOnMask2,clientFeatureVisibilityOffMask2),privs3,registered,state,licenseId
			UINT32 privs;
			UINT32 flags;
			UINT32 locale;
			PString country;
			UINT32 emLocale;
			UINT64 privs2;
			UINT32 vipStatus;
			UINT32 timeZone;
			UINT32 origUserIntId;
			UINT32 userIntId;
			UINT64 flags2;
			UINT32 vppCounter1;
			UINT32 vppCounter2;
			Atf::LAtfVector< StellarBonus, 4 > stellarBonuses;
			bool uiStatsAllowed;
			bool rmTransersAllowed;
			UINT32 obsolete;	//Always zero
			BYTE findSimilarTableFlag;
			Atf::LAtfVector< MilestoneBonusOld, 4 > milestoneBonusesOld;
			Atf::LAtfVector< VIPLevel, 4 > vipLevels;
			bool hgEnabled;
			UINT32 cppCountr3;
			bool fastDepositEnabled;
			CountriesMsgBody countries;
			bool handSharingEnabledForSiteAndBrand;
			bool itAccVerificationOpen;	//Always true
			bool allowSmsValidationForNewInstallId;
			PString userWebId;
			Atf::LAtfVector< RawVIPLevel, 4 > rawVIPLevels;
			UINT32 chatModeratorRestrictions;
			Atf::LAtfVector< MilestoneBonusNew, 4 > milestoneBonusesNew;
			bool allowSmsPwdReset;
			HallOfFameLevels hallOfFameLevels;
			UINT32 lifetimeFpp;
			UINT32 otherFlags;
			ClientFeatureVisibility clientFeatureVisibility;
			UINT64 privs3;
			SrvTime registered;
			PString state;
			UINT32 licenseId;

			Protocol_MSG_LOBBY_USER_PROPS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_USER_PROPS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_USER_PROPS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_USER_PROPS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_USER_PROPS_REPLY(Protocol_MSG_LOBBY_USER_PROPS_REPLY&&);
			Protocol_MSG_LOBBY_USER_PROPS_REPLY& operator=(Protocol_MSG_LOBBY_USER_PROPS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_USER_PROPS_REPLY(const Protocol_MSG_LOBBY_USER_PROPS_REPLY&) = default;
			Protocol_MSG_LOBBY_USER_PROPS_REPLY& operator=(const Protocol_MSG_LOBBY_USER_PROPS_REPLY&) = default;
#endif
#endif
		};

		struct TournInfo
		{
			// t4444111111 - startTime,tournId,buyIn,fppBuyIn,rake,game,isHiLo,structure,isPlayMoney,isSitAndGo,isRunning
			SrvTime startTime;
			UINT32 tournId;
			UINT32 buyIn;
			UINT32 fppBuyIn;
			UINT32 rake;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			BYTE isPlayMoney;
			BYTE isSitAndGo;
			BYTE isRunning;

			TournInfo();
			void clear();
			bool equals(const TournInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_FIND_TOURN_REG : public Atf::MessageProtocol
		{
			// s - notUsed
			PString notUsed;

			Protocol_MSG_LOBBY_FIND_TOURN_REG();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TOURN_REG&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TOURN_REG; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TOURN_REG"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_TOURN_REG(Protocol_MSG_LOBBY_FIND_TOURN_REG&&);
			Protocol_MSG_LOBBY_FIND_TOURN_REG& operator=(Protocol_MSG_LOBBY_FIND_TOURN_REG&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_TOURN_REG(const Protocol_MSG_LOBBY_FIND_TOURN_REG&) = default;
			Protocol_MSG_LOBBY_FIND_TOURN_REG& operator=(const Protocol_MSG_LOBBY_FIND_TOURN_REG&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_TOURN_REG_REPLY : public Atf::MessageProtocol
		{
			// 24<t4444111111>4<s>4<s> - errCode,numTournInfo<startTime,tournId,buyIn,fppBuyIn,rake,game,isHiLo,structure,isPlayMoney,isSitAndGo,isRunning>,numServerName<serverName>,numCurrency<currency>
			INT16 errCode;
			Atf::LAtfVector< TournInfo, 4 > tournInfo;
			Atf::LAtfVector< PString, 4 > serverName;
			Atf::LAtfVector< PString, 4 > currency;

			Protocol_MSG_LOBBY_FIND_TOURN_REG_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TOURN_REG_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TOURN_REG_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TOURN_REG_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_TOURN_REG_REPLY(Protocol_MSG_LOBBY_FIND_TOURN_REG_REPLY&&);
			Protocol_MSG_LOBBY_FIND_TOURN_REG_REPLY& operator=(Protocol_MSG_LOBBY_FIND_TOURN_REG_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_TOURN_REG_REPLY(const Protocol_MSG_LOBBY_FIND_TOURN_REG_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_TOURN_REG_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_TOURN_REG_REPLY&) = default;
#endif
#endif
		};

		struct TournInfo2
		{
			// M(M(t4444111111ss4)48) - M(M(startTime,tournId,buyIn,fppBuyIn,rake,game,isHiLo,structure,isPlayMoney,isSitAndGo,isRunning,serverAddress,currency,clubId),scalePm,flags2)

			TournInfo tournInfo;
			PString serverAddress;
			PString currency;
			UINT32 clubId;

			UINT32 scalePm;
			UINT64 flags2;

			TournInfo2();
			void clear();
			bool equals(const TournInfo2&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournInfo2(TournInfo2&&);
			TournInfo2& operator=(TournInfo2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournInfo2(const TournInfo2&) = default;
			TournInfo2& operator=(const TournInfo2&) = default;
#endif
#endif

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_FIND_TOURN_REG2 : public Atf::MessageProtocol
		{
			// s - notUsed
			PString notUsed;

			Protocol_MSG_LOBBY_FIND_TOURN_REG2();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TOURN_REG2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TOURN_REG2; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TOURN_REG2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_TOURN_REG2(Protocol_MSG_LOBBY_FIND_TOURN_REG2&&);
			Protocol_MSG_LOBBY_FIND_TOURN_REG2& operator=(Protocol_MSG_LOBBY_FIND_TOURN_REG2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_TOURN_REG2(const Protocol_MSG_LOBBY_FIND_TOURN_REG2&) = default;
			Protocol_MSG_LOBBY_FIND_TOURN_REG2& operator=(const Protocol_MSG_LOBBY_FIND_TOURN_REG2&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_TOURN_REG2_REPLY : public Atf::MessageProtocol
		{
			// 24<M(M(t4444111111ss4)48)> - errCode,numTournInfo<M(M(startTime,tournId,buyIn,fppBuyIn,rake,game,isHiLo,structure,isPlayMoney,isSitAndGo,isRunning,serverAddress,currency,clubId),scalePm,flags2)>
			INT16 errCode;
			Atf::LAtfVector< TournInfo2, 4 > tournInfo;

			Protocol_MSG_LOBBY_FIND_TOURN_REG2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TOURN_REG2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TOURN_REG2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TOURN_REG2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_TOURN_REG2_REPLY(Protocol_MSG_LOBBY_FIND_TOURN_REG2_REPLY&&);
			Protocol_MSG_LOBBY_FIND_TOURN_REG2_REPLY& operator=(Protocol_MSG_LOBBY_FIND_TOURN_REG2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_TOURN_REG2_REPLY(const Protocol_MSG_LOBBY_FIND_TOURN_REG2_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_TOURN_REG2_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_TOURN_REG2_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_WAIT : public Atf::MessageProtocol
		{
			// s - notUsed
			PString notUsed;

			Protocol_MSG_LOBBY_FIND_WAIT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_WAIT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_WAIT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_WAIT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_WAIT(Protocol_MSG_LOBBY_FIND_WAIT&&);
			Protocol_MSG_LOBBY_FIND_WAIT& operator=(Protocol_MSG_LOBBY_FIND_WAIT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_WAIT(const Protocol_MSG_LOBBY_FIND_WAIT&) = default;
			Protocol_MSG_LOBBY_FIND_WAIT& operator=(const Protocol_MSG_LOBBY_FIND_WAIT&) = default;
#endif
#endif
		};

		struct TableInfo
		{
			// 44 - tableId,order
			UINT32 tableId;
			UINT32 order;

			TableInfo();
			void clear();
			bool equals(const TableInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ServerInfo
		{
			// ss - serverName,serverObject
			PString serverName;
			PString serverObject;

			ServerInfo();
			void clear();
			bool equals(const ServerInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ServerInfo(ServerInfo&&);
			ServerInfo& operator=(ServerInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ServerInfo(const ServerInfo&) = default;
			ServerInfo& operator=(const ServerInfo&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_WAIT_REPLY : public Atf::MessageProtocol
		{
			// 24<44>4<ss>4<4> - errCode,numTables<tableId,order>,numServers<serverName,serverObject>,numTotals<totals>
			INT16 errCode;
			Atf::LAtfVector< TableInfo, 4 > tables;
			Atf::LAtfVector< ServerInfo, 4 > servers;
			Atf::LAtfVector< UINT32, 4 > totals;

			Protocol_MSG_LOBBY_FIND_WAIT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_WAIT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_WAIT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_WAIT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_WAIT_REPLY(Protocol_MSG_LOBBY_FIND_WAIT_REPLY&&);
			Protocol_MSG_LOBBY_FIND_WAIT_REPLY& operator=(Protocol_MSG_LOBBY_FIND_WAIT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_WAIT_REPLY(const Protocol_MSG_LOBBY_FIND_WAIT_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_WAIT_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_WAIT_REPLY&) = default;
#endif
#endif
		};

		struct LeaderPoints
		{
			// s4 - player,points
			PString player;
			UINT32 points;

			LeaderPoints();
			void clear();
			bool equals(const LeaderPoints&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			LeaderPoints(LeaderPoints&&);
			LeaderPoints& operator=(LeaderPoints&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			LeaderPoints(const LeaderPoints&) = default;
			LeaderPoints& operator=(const LeaderPoints&) = default;
#endif
#endif
		};

		struct TlbVector
		{
			// s1tt4<s4>44 - lastTimestamp,tlbType,timeFrom,timeTo,numLeaderPoints<player,points>,userPlace,userPoints
			PString lastTimestamp;
			BYTE tlbType;
			SrvTime timeFrom;
			SrvTime timeTo;
			Atf::LAtfVector< LeaderPoints, 4 > leaderPoints;
			UINT32 userPlace;
			UINT32 userPoints;

			TlbVector();
			void clear();
			bool equals(const TlbVector&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TlbVector(TlbVector&&);
			TlbVector& operator=(TlbVector&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TlbVector(const TlbVector&) = default;
			TlbVector& operator=(const TlbVector&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2 : public Atf::MessageProtocol
		{
			// s1s - notUsed,tlbListType,uniqueIdStr
			PString notUsed;
			BYTE tlbListType;
			PString uniqueIdStr;

			Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLI_GET_TLB_STANDIDNS2; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLI_GET_TLB_STANDIDNS2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2(Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2&&);
			Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2& operator=(Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2(const Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2&) = default;
			Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2& operator=(const Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s1tt4<s4>44t] - errCode[errDescr|lastTimestamp,tlbType,timeFrom,timeTo,numLeaderPoints<player,points>,userPlace,userPoints,lastUpdated]
			INT16 errCode;

			PString errDescr;

			TlbVector tableVector;
			SrvTime lastUpdated;

			Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY(Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY&&);
			Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY& operator=(Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY(const Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY&) = default;
			Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY& operator=(const Protocol_MSG_LOBBY_CLI_GET_TLB_STANDIDNS2_REPLY&) = default;
#endif
#endif
		};

		struct PlayerTableData
		{
			// ss4ssb4411bs481 - serverAddress,serverInstance,tableIdOld,tableName,tableSpecialSuffix,isPlayMoney,loBet,hiBet,game,structure,isHiLo,currency,scalePm,tableId,maxPlayers
			PString serverAddress;
			PString serverInstance;
			UINT32 tableIdOld;
			PString tableName;
			PString tableSpecialSuffix;
			bool isPlayMoney;
			UINT32 loBet;
			UINT32 hiBet;
			BYTE game;
			BYTE structure;
			bool isHiLo;
			PString currency;
			UINT32 scalePm;
			UINT64 tableId;
			BYTE maxPlayers;

			PlayerTableData();
			void clear();
			bool equals(const PlayerTableData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PlayerTableData(PlayerTableData&&);
			PlayerTableData& operator=(PlayerTableData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PlayerTableData(const PlayerTableData&) = default;
			PlayerTableData& operator=(const PlayerTableData&) = default;
#endif
#endif
		};

		struct PlayerTournData
		{
			// s4bb44411b4s4b8b - serverAddress,tournId,isSitAndGo,isPlayMoney,buyIn,rake,fppBuyIn,game,structure,isHiLo,status,currency,scalePm,needAdmission,admissionPrice,isPrivate
			PString serverAddress;
			UINT32 tournId;
			bool isSitAndGo;
			bool isPlayMoney;
			UINT32 buyIn;
			UINT32 rake;
			UINT32 fppBuyIn;
			BYTE game;
			BYTE structure;
			bool isHiLo;
			UINT32 status;
			PString currency;
			UINT32 scalePm;
			bool needAdmission;
			INT64 admissionPrice;
			bool isPrivate;

			PlayerTournData();
			void clear();
			bool equals(const PlayerTournData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PlayerTournData(PlayerTournData&&);
			PlayerTournData& operator=(PlayerTournData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PlayerTournData(const PlayerTournData&) = default;
			PlayerTournData& operator=(const PlayerTournData&) = default;
#endif
#endif
		};

		struct PlayerBlitzData
		{
			// ss4ssb4411bs4 - serverAddress,serverInstance,blitzId,blitzName,blitzSpecialSuffix,isPlayMoney,loBet,hiBet,game,structure,isHiLo,currency,scalePm
			PString serverAddress;
			PString serverInstance;
			UINT32 blitzId;
			PString blitzName;
			PString blitzSpecialSuffix;
			bool isPlayMoney;
			UINT32 loBet;
			UINT32 hiBet;
			BYTE game;
			BYTE structure;
			bool isHiLo;
			PString currency;
			UINT32 scalePm;

			PlayerBlitzData();
			void clear();
			bool equals(const PlayerBlitzData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PlayerBlitzData(PlayerBlitzData&&);
			PlayerBlitzData& operator=(PlayerBlitzData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PlayerBlitzData(const PlayerBlitzData&) = default;
			PlayerBlitzData& operator=(const PlayerBlitzData&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_PLAYER2 : public Atf::MessageProtocol
		{
			// ss - notUsed,playerName
			PString notUsed;
			PString playerName;

			Protocol_MSG_LOBBY_FIND_PLAYER2();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_PLAYER2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_PLAYER2; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_PLAYER2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_PLAYER2(Protocol_MSG_LOBBY_FIND_PLAYER2&&);
			Protocol_MSG_LOBBY_FIND_PLAYER2& operator=(Protocol_MSG_LOBBY_FIND_PLAYER2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_PLAYER2(const Protocol_MSG_LOBBY_FIND_PLAYER2&) = default;
			Protocol_MSG_LOBBY_FIND_PLAYER2& operator=(const Protocol_MSG_LOBBY_FIND_PLAYER2&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_PLAYER2_REPLY : public Atf::MessageProtocol
		{
			// s4<ss4ssb4411bs481>4<s4bb44411b4s4b8b>4<ss4ssb4411bs4> - playerName,numPlayerTables<serverAddress,serverInstance,tableIdOld,tableName,tableSpecialSuffix,isPlayMoney,loBet,hiBet,game,structure,isHiLo,currency,scalePm,tableId,maxPlayers>,numPlayerTourns<serverAddress,tournId,isSitAndGo,isPlayMoney,buyIn,rake,fppBuyIn,game,structure,isHiLo,status,currency,scalePm,needAdmission,admissionPrice,isPrivate>,numPlayerBlitz<serverAddress,serverInstance,blitzId,blitzName,blitzSpecialSuffix,isPlayMoney,loBet,hiBet,game,structure,isHiLo,currency,scalePm>
			PString playerName;
			Atf::LAtfVector< PlayerTableData, 4 > playerTables;
			Atf::LAtfVector< PlayerTournData, 4 > playerTourns;
			Atf::LAtfVector< PlayerBlitzData, 4 > playerBlitz;

			Protocol_MSG_LOBBY_FIND_PLAYER2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_PLAYER2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_PLAYER2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_PLAYER2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_PLAYER2_REPLY(Protocol_MSG_LOBBY_FIND_PLAYER2_REPLY&&);
			Protocol_MSG_LOBBY_FIND_PLAYER2_REPLY& operator=(Protocol_MSG_LOBBY_FIND_PLAYER2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_PLAYER2_REPLY(const Protocol_MSG_LOBBY_FIND_PLAYER2_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_PLAYER2_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_PLAYER2_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_PLAYER3 : public Atf::MessageProtocol
		{
			// s - playerName
			PString playerName;	// client does not limit the userId properly

			Protocol_MSG_LOBBY_FIND_PLAYER3();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_PLAYER3&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_PLAYER3; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_PLAYER3"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_PLAYER3(Protocol_MSG_LOBBY_FIND_PLAYER3&&);
			Protocol_MSG_LOBBY_FIND_PLAYER3& operator=(Protocol_MSG_LOBBY_FIND_PLAYER3&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_PLAYER3(const Protocol_MSG_LOBBY_FIND_PLAYER3&) = default;
			Protocol_MSG_LOBBY_FIND_PLAYER3& operator=(const Protocol_MSG_LOBBY_FIND_PLAYER3&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_PLAYER3_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s4<ss4ssb4411bs481>4<s4bb44411b4s4b8b>4<ss4ssb4411bs4>] - errCode[errDescr|playerName,numPlayerTables<serverAddress,serverInstance,tableIdOld,tableName,tableSpecialSuffix,isPlayMoney,loBet,hiBet,game,structure,isHiLo,currency,scalePm,tableId,maxPlayers>,numPlayerTourns<serverAddress,tournId,isSitAndGo,isPlayMoney,buyIn,rake,fppBuyIn,game,structure,isHiLo,status,currency,scalePm,needAdmission,admissionPrice,isPrivate>,numPlayerBlitz<serverAddress,serverInstance,blitzId,blitzName,blitzSpecialSuffix,isPlayMoney,loBet,hiBet,game,structure,isHiLo,currency,scalePm>]
			INT16 errCode;

			PString errDescr;

			PString playerName;
			Atf::LAtfVector< PlayerTableData, 4 > playerTables;
			Atf::LAtfVector< PlayerTournData, 4 > playerTourns;
			Atf::LAtfVector< PlayerBlitzData, 4 > playerBlitz;

			Protocol_MSG_LOBBY_FIND_PLAYER3_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_PLAYER3_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_PLAYER3_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_PLAYER3_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_PLAYER3_REPLY(Protocol_MSG_LOBBY_FIND_PLAYER3_REPLY&&);
			Protocol_MSG_LOBBY_FIND_PLAYER3_REPLY& operator=(Protocol_MSG_LOBBY_FIND_PLAYER3_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_PLAYER3_REPLY(const Protocol_MSG_LOBBY_FIND_PLAYER3_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_PLAYER3_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_PLAYER3_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_WEB_FIND_PLAYER2 : public Atf::MessageProtocol
		{
			// ss - notUsed,playerName
			PString notUsed;
			PString playerName;

			Protocol_MSG_WEB_FIND_PLAYER2();
			void clear() override;
			bool equals(const Protocol_MSG_WEB_FIND_PLAYER2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_WEB_FIND_PLAYER2; }
			const char *getMsgIdString() const override { return "MSG_WEB_FIND_PLAYER2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_WEB_FIND_PLAYER2(Protocol_MSG_WEB_FIND_PLAYER2&&);
			Protocol_MSG_WEB_FIND_PLAYER2& operator=(Protocol_MSG_WEB_FIND_PLAYER2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_WEB_FIND_PLAYER2(const Protocol_MSG_WEB_FIND_PLAYER2&) = default;
			Protocol_MSG_WEB_FIND_PLAYER2& operator=(const Protocol_MSG_WEB_FIND_PLAYER2&) = default;
#endif
#endif
		};

		struct Protocol_MSG_WEB_FIND_PLAYER2_REPLY : public Atf::MessageProtocol
		{
			// s4<ss4ssb4411bs481>4<s4bb44411b4s4b8b>4<ss4ssb4411bs4> - playerName,numPlayerTables<serverAddress,serverInstance,tableIdOld,tableName,tableSpecialSuffix,isPlayMoney,loBet,hiBet,game,structure,isHiLo,currency,scalePm,tableId,maxPlayers>,numPlayerTourns<serverAddress,tournId,isSitAndGo,isPlayMoney,buyIn,rake,fppBuyIn,game,structure,isHiLo,status,currency,scalePm,needAdmission,admissionPrice,isPrivate>,numPlayerBlitz<serverAddress,serverInstance,blitzId,blitzName,blitzSpecialSuffix,isPlayMoney,loBet,hiBet,game,structure,isHiLo,currency,scalePm>
			PString playerName;
			Atf::LAtfVector< PlayerTableData, 4 > playerTables;
			Atf::LAtfVector< PlayerTournData, 4 > playerTourns;
			Atf::LAtfVector< PlayerBlitzData, 4 > playerBlitz;

			Protocol_MSG_WEB_FIND_PLAYER2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_WEB_FIND_PLAYER2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_WEB_FIND_PLAYER2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_WEB_FIND_PLAYER2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_WEB_FIND_PLAYER2_REPLY(Protocol_MSG_WEB_FIND_PLAYER2_REPLY&&);
			Protocol_MSG_WEB_FIND_PLAYER2_REPLY& operator=(Protocol_MSG_WEB_FIND_PLAYER2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_WEB_FIND_PLAYER2_REPLY(const Protocol_MSG_WEB_FIND_PLAYER2_REPLY&) = default;
			Protocol_MSG_WEB_FIND_PLAYER2_REPLY& operator=(const Protocol_MSG_WEB_FIND_PLAYER2_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_WEB_FIND_PLAYER3 : public Atf::MessageProtocol
		{
			// s - playerName
			PString playerName;

			Protocol_MSG_WEB_FIND_PLAYER3();
			void clear() override;
			bool equals(const Protocol_MSG_WEB_FIND_PLAYER3&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_WEB_FIND_PLAYER3; }
			const char *getMsgIdString() const override { return "MSG_WEB_FIND_PLAYER3"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_WEB_FIND_PLAYER3(Protocol_MSG_WEB_FIND_PLAYER3&&);
			Protocol_MSG_WEB_FIND_PLAYER3& operator=(Protocol_MSG_WEB_FIND_PLAYER3&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_WEB_FIND_PLAYER3(const Protocol_MSG_WEB_FIND_PLAYER3&) = default;
			Protocol_MSG_WEB_FIND_PLAYER3& operator=(const Protocol_MSG_WEB_FIND_PLAYER3&) = default;
#endif
#endif
		};

		struct Protocol_MSG_WEB_FIND_PLAYER3_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s4<ss4ssb4411bs481>4<s4bb44411b4s4b8b>4<ss4ssb4411bs4>] - errCode[errDescr|playerName,numPlayerTables<serverAddress,serverInstance,tableIdOld,tableName,tableSpecialSuffix,isPlayMoney,loBet,hiBet,game,structure,isHiLo,currency,scalePm,tableId,maxPlayers>,numPlayerTourns<serverAddress,tournId,isSitAndGo,isPlayMoney,buyIn,rake,fppBuyIn,game,structure,isHiLo,status,currency,scalePm,needAdmission,admissionPrice,isPrivate>,numPlayerBlitz<serverAddress,serverInstance,blitzId,blitzName,blitzSpecialSuffix,isPlayMoney,loBet,hiBet,game,structure,isHiLo,currency,scalePm>]
			INT16 errCode;

			PString errDescr;

			PString playerName;
			Atf::LAtfVector< PlayerTableData, 4 > playerTables;
			Atf::LAtfVector< PlayerTournData, 4 > playerTourns;
			Atf::LAtfVector< PlayerBlitzData, 4 > playerBlitz;

			Protocol_MSG_WEB_FIND_PLAYER3_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_WEB_FIND_PLAYER3_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_WEB_FIND_PLAYER3_REPLY; }
			const char *getMsgIdString() const override { return "MSG_WEB_FIND_PLAYER3_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_WEB_FIND_PLAYER3_REPLY(Protocol_MSG_WEB_FIND_PLAYER3_REPLY&&);
			Protocol_MSG_WEB_FIND_PLAYER3_REPLY& operator=(Protocol_MSG_WEB_FIND_PLAYER3_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_WEB_FIND_PLAYER3_REPLY(const Protocol_MSG_WEB_FIND_PLAYER3_REPLY&) = default;
			Protocol_MSG_WEB_FIND_PLAYER3_REPLY& operator=(const Protocol_MSG_WEB_FIND_PLAYER3_REPLY&) = default;
#endif
#endif
		};

		struct Reacquisition
		{
			// M(st44) - M(ticketId,when,reacquisition,cost)
			PString ticketId;
			SrvTime when;
			UINT32 reacquisition;
			UINT32 cost;

			Reacquisition();
			void clear();
			bool equals(const Reacquisition&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Reacquisition(Reacquisition&&);
			Reacquisition& operator=(Reacquisition&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Reacquisition(const Reacquisition&) = default;
			Reacquisition& operator=(const Reacquisition&) = default;
#endif
#endif
		};

		struct ITTournData
		{
			// M(ss444<M(st44)>) - M(itId,ticketId,cost,status,numReacquisitions<M(ticketId,when,reacquisition,cost)>)
			PString itId;
			PString ticketId;
			UINT32 cost;
			UINT32 status;
			Atf::LAtfVector< Reacquisition, 4 > reacquisitions;

			ITTournData();
			void clear();
			bool equals(const ITTournData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ITTournData(ITTournData&&);
			ITTournData& operator=(ITTournData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ITTournData(const ITTournData&) = default;
			ITTournData& operator=(const ITTournData&) = default;
#endif
#endif
		};

		struct ITTournVectorData
		{
			// 4M(ss444<M(st44)>) - tournId,M(itId,ticketId,cost,status,numReacquisitions<M(ticketId,when,reacquisition,cost)>)
			UINT32 tournId;
			ITTournData tournData;

			ITTournVectorData();
			void clear();
			bool equals(const ITTournVectorData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ITTournVectorData(ITTournVectorData&&);
			ITTournVectorData& operator=(ITTournVectorData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ITTournVectorData(const ITTournVectorData&) = default;
			ITTournVectorData& operator=(const ITTournVectorData&) = default;
#endif
#endif
		};

		struct ITAddOn
		{
			// M(st44) - M(ticketId,when,reacquisition,addOn)
			PString ticketId;
			SrvTime when;
			UINT32 reacquisition;
			UINT32 addOn;

			ITAddOn();
			void clear();
			bool equals(const ITAddOn&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ITAddOn(ITAddOn&&);
			ITAddOn& operator=(ITAddOn&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ITAddOn(const ITAddOn&) = default;
			ITAddOn& operator=(const ITAddOn&) = default;
#endif
#endif
		};

		struct ITTableData
		{
			// M(4<M(st44)>8) - M(numAddOns<M(ticketId,when,reacquisition,addOn)>,tableId)
			Atf::LAtfVector< ITAddOn, 4 > addOns;
			UINT64 tableId;

			ITTableData();
			void clear();
			bool equals(const ITTableData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ITTableData(ITTableData&&);
			ITTableData& operator=(ITTableData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ITTableData(const ITTableData&) = default;
			ITTableData& operator=(const ITTableData&) = default;
#endif
#endif
		};

		struct ITTableVectorData
		{
			// 4M(4<M(st44)>8) - tableId,M(numAddOns<M(ticketId,when,reacquisition,addOn)>,tableId)
			UINT32 tableId;
			ITTableData tableData;

			ITTableVectorData();
			void clear();
			bool equals(const ITTableVectorData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ITTableVectorData(ITTableVectorData&&);
			ITTableVectorData& operator=(ITTableVectorData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ITTableVectorData(const ITTableVectorData&) = default;
			ITTableVectorData& operator=(const ITTableVectorData&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_TOURN_REG_IT : public Atf::MessageProtocol
		{
			// s - notUsed
			PString notUsed;

			Protocol_MSG_LOBBY_FIND_TOURN_REG_IT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TOURN_REG_IT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TOURN_REG_IT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TOURN_REG_IT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_TOURN_REG_IT(Protocol_MSG_LOBBY_FIND_TOURN_REG_IT&&);
			Protocol_MSG_LOBBY_FIND_TOURN_REG_IT& operator=(Protocol_MSG_LOBBY_FIND_TOURN_REG_IT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_TOURN_REG_IT(const Protocol_MSG_LOBBY_FIND_TOURN_REG_IT&) = default;
			Protocol_MSG_LOBBY_FIND_TOURN_REG_IT& operator=(const Protocol_MSG_LOBBY_FIND_TOURN_REG_IT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_TOURN_REG_IT_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<4M(ss444<M(st44)>)>4<4M(4<M(st44)>8)>] - errCode[errDesc|numTournVectorData<tournId,M(itId,ticketId,cost,status,numReacquisitions<M(ticketId,when,reacquisition,cost)>)>,numTableVectorData<tableId,M(numAddOns<M(ticketId,when,reacquisition,addOn)>,tableId)>]
			INT16 errCode;

			PString errDesc;

			Atf::LAtfVector< ITTournVectorData, 4 > tournVectorData;
			Atf::LAtfVector< ITTableVectorData, 4 > tableVectorData;

			Protocol_MSG_LOBBY_FIND_TOURN_REG_IT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TOURN_REG_IT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TOURN_REG_IT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TOURN_REG_IT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_TOURN_REG_IT_REPLY(Protocol_MSG_LOBBY_FIND_TOURN_REG_IT_REPLY&&);
			Protocol_MSG_LOBBY_FIND_TOURN_REG_IT_REPLY& operator=(Protocol_MSG_LOBBY_FIND_TOURN_REG_IT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_TOURN_REG_IT_REPLY(const Protocol_MSG_LOBBY_FIND_TOURN_REG_IT_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_TOURN_REG_IT_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_TOURN_REG_IT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_TOURN_IT : public Atf::MessageProtocol
		{
			// s - notUsed
			PString notUsed;

			Protocol_MSG_LOBBY_FIND_TOURN_IT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TOURN_IT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TOURN_IT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TOURN_IT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_TOURN_IT(Protocol_MSG_LOBBY_FIND_TOURN_IT&&);
			Protocol_MSG_LOBBY_FIND_TOURN_IT& operator=(Protocol_MSG_LOBBY_FIND_TOURN_IT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_TOURN_IT(const Protocol_MSG_LOBBY_FIND_TOURN_IT&) = default;
			Protocol_MSG_LOBBY_FIND_TOURN_IT& operator=(const Protocol_MSG_LOBBY_FIND_TOURN_IT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_FIND_TOURN_IT_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<4M(ss444<M(st44)>)>4<4M(4<M(st44)>8)>] - errCode[errDesc|numTournVectorData<tournId,M(itId,ticketId,cost,status,numReacquisitions<M(ticketId,when,reacquisition,cost)>)>,numTableVectorData<tableId,M(numAddOns<M(ticketId,when,reacquisition,addOn)>,tableId)>]
			INT16 errCode;

			PString errDesc;

			Atf::LAtfVector< ITTournVectorData, 4 > tournVectorData;
			Atf::LAtfVector< ITTableVectorData, 4 > tableVectorData;

			Protocol_MSG_LOBBY_FIND_TOURN_IT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TOURN_IT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TOURN_IT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TOURN_IT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_TOURN_IT_REPLY(Protocol_MSG_LOBBY_FIND_TOURN_IT_REPLY&&);
			Protocol_MSG_LOBBY_FIND_TOURN_IT_REPLY& operator=(Protocol_MSG_LOBBY_FIND_TOURN_IT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_TOURN_IT_REPLY(const Protocol_MSG_LOBBY_FIND_TOURN_IT_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_TOURN_IT_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_TOURN_IT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_VALIDATE_MOBILE : public Atf::MessageProtocol
		{
			// s4 - notUsedStr,unique
			PString notUsedStr;
			UINT32 unique;	// no limit

			Protocol_MSG_LOBBY_VALIDATE_MOBILE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_VALIDATE_MOBILE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_VALIDATE_MOBILE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_VALIDATE_MOBILE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_VALIDATE_MOBILE(Protocol_MSG_LOBBY_VALIDATE_MOBILE&&);
			Protocol_MSG_LOBBY_VALIDATE_MOBILE& operator=(Protocol_MSG_LOBBY_VALIDATE_MOBILE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_VALIDATE_MOBILE(const Protocol_MSG_LOBBY_VALIDATE_MOBILE&) = default;
			Protocol_MSG_LOBBY_VALIDATE_MOBILE& operator=(const Protocol_MSG_LOBBY_VALIDATE_MOBILE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_VALIDATE_MOBILE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_VALIDATE_MOBILE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_VALIDATE_MOBILE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_VALIDATE_MOBILE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_VALIDATE_MOBILE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_VALIDATE_MOBILE_REPLY(Protocol_MSG_LOBBY_VALIDATE_MOBILE_REPLY&&);
			Protocol_MSG_LOBBY_VALIDATE_MOBILE_REPLY& operator=(Protocol_MSG_LOBBY_VALIDATE_MOBILE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_VALIDATE_MOBILE_REPLY(const Protocol_MSG_LOBBY_VALIDATE_MOBILE_REPLY&) = default;
			Protocol_MSG_LOBBY_VALIDATE_MOBILE_REPLY& operator=(const Protocol_MSG_LOBBY_VALIDATE_MOBILE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR : public Atf::MessageProtocol
		{
			// s - originalError
			PString originalError;

			Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_SELFEXCLUDED_STR; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_SELFEXCLUDED_STR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR(Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR&&);
			Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR& operator=(Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR(const Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR&) = default;
			Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR& operator=(const Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY : public Atf::MessageProtocol
		{
			// 2s - errCode,errDesc
			INT16 errCode;
			PString errDesc;

			Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY(Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY&&);
			Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY& operator=(Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY(const Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY& operator=(const Protocol_MSG_LOBBY_GET_SELFEXCLUDED_STR_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL : public Atf::MessageProtocol
		{
			// 4 - validationCode
			UINT32 validationCode;	// no limit

			Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_VALIDATE_NEWINSTALL; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_VALIDATE_NEWINSTALL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY(Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY&&);
			Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY& operator=(Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY(const Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY&) = default;
			Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY& operator=(const Protocol_MSG_LOBBY_VALIDATE_NEWINSTALL_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE : public Atf::MessageProtocol
		{
			//

			Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY(Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY&&);
			Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY& operator=(Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY(const Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY&) = default;
			Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY& operator=(const Protocol_MSG_LOBBY_RESEND_NEWINSTALL_VALIDATIONCODE_REPLY&) = default;
#endif
#endif
		};

		struct UserProperties
		{
			// 44st - propType,propInt,propStr,when
			INT32 propType;
			INT32 propInt;
			PString propStr;
			SrvTime when;

			UserProperties();
			void clear();
			bool equals(const UserProperties&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UserProperties(UserProperties&&);
			UserProperties& operator=(UserProperties&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UserProperties(const UserProperties&) = default;
			UserProperties& operator=(const UserProperties&) = default;
#endif
#endif
		};

		struct PhoneValidationInfo
		{
			// M(1ssss) - M(validation,countryCode,verifiedNumber,dialingInfo,phone)
			BYTE validation;
			PString countryCode;
			PString verifiedNumber;
			PString dialingInfo;
			PString phone;

			PhoneValidationInfo();
			void clear();
			bool equals(const PhoneValidationInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PhoneValidationInfo(PhoneValidationInfo&&);
			PhoneValidationInfo& operator=(PhoneValidationInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PhoneValidationInfo(const PhoneValidationInfo&) = default;
			PhoneValidationInfo& operator=(const PhoneValidationInfo&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_USER_INFO : public Atf::MessageProtocol
		{
			// sbb - notUsedStr,needImage,needPwdUpdate
			PString notUsedStr;
			bool needImage;
			bool needPwdUpdate;

			Protocol_MSG_LOBBY_GET_USER_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_USER_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_USER_INFO; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_USER_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_USER_INFO(Protocol_MSG_LOBBY_GET_USER_INFO&&);
			Protocol_MSG_LOBBY_GET_USER_INFO& operator=(Protocol_MSG_LOBBY_GET_USER_INFO&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_USER_INFO(const Protocol_MSG_LOBBY_GET_USER_INFO&) = default;
			Protocol_MSG_LOBBY_GET_USER_INFO& operator=(const Protocol_MSG_LOBBY_GET_USER_INFO&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_USER_INFO_REPLY : public Atf::MessageProtocol
		{
			//! 2[s|ssssssssv4444444dsM(1ssss)sss4<44st>84ssbtM(1ssss)s481d14< <FIXME>BrandProt::AvatarImg</FIXME> >] - errCode[errDescr|fullName1,fullName2,fullName3,fullName4,fullName5,fullName6,fullName7,fullName8,imgData,priv1,priv2,priv3,priv4,priv5,priv6,priv7,dob,phoneNum,M(validation,countryCode,verifiedNumber,dialingInfo,phone),firstName,onlyLastName,fiscalCode,numUserProps<propType,propInt,propStr,when>,flags2,imgId,sex,mobile,addressStateLocked,registered,M(validation,countryCode,verifiedNumber,dialingInfo,phone),promoImgCode,pwdUpdateTime,privileges3,missedMonths,vipStatusUntil,missableMonthsYearly,numGameAvatars< <FIXME>BrandProt::AvatarImg</FIXME> >]
			INT16 errCode;

			PString errDescr;

			PString fullName1;
			PString fullName2;
			PString fullName3;
			PString fullName4;
			PString fullName5;
			PString fullName6;
			PString fullName7;
			PString fullName8;
			PBlock imgData;
			UINT32 priv1;
			UINT32 priv2;
			UINT32 priv3;
			UINT32 priv4;
			UINT32 priv5;
			UINT32 priv6;
			UINT32 priv7;
			SrvDate dob;
			PString phoneNum;
			PhoneValidationInfo phoneValidation;
			PString firstName;
			PString onlyLastName;
			PString fiscalCode;
			Atf::LAtfVector< UserProperties, 4 > userProps;
			UINT64 flags2;
			UINT32 imgId;
			PString sex;
			PString mobile;
			bool addressStateLocked;
			SrvTime registered;
			PhoneValidationInfo mobilePhoneValidation;
			PString promoImgCode;
			UINT32 pwdUpdateTime;
			UINT64 privileges3;
			INT8 missedMonths;
			SrvDate vipStatusUntil;
			INT8 missableMonthsYearly;
			Atf::LAtfVector< BrandProt::AvatarImg, 4 > gameAvatars;	// PYR-54689

			Protocol_MSG_LOBBY_GET_USER_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_USER_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_USER_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_USER_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_USER_INFO_REPLY(Protocol_MSG_LOBBY_GET_USER_INFO_REPLY&&);
			Protocol_MSG_LOBBY_GET_USER_INFO_REPLY& operator=(Protocol_MSG_LOBBY_GET_USER_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_USER_INFO_REPLY(const Protocol_MSG_LOBBY_GET_USER_INFO_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_USER_INFO_REPLY& operator=(const Protocol_MSG_LOBBY_GET_USER_INFO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_WAITING_LIST : public Atf::MessageProtocol
		{
			// s148 - notUsedStr,listType,tableId32,tableId64
			PString notUsedStr;
			BYTE listType;	// no limit
			UINT32 tableId32;	// no limit
			UINT64 tableId64;	// no limit

			Protocol_MSG_LOBBY_WAITING_LIST();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_WAITING_LIST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_WAITING_LIST; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_WAITING_LIST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_WAITING_LIST(Protocol_MSG_LOBBY_WAITING_LIST&&);
			Protocol_MSG_LOBBY_WAITING_LIST& operator=(Protocol_MSG_LOBBY_WAITING_LIST&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_WAITING_LIST(const Protocol_MSG_LOBBY_WAITING_LIST&) = default;
			Protocol_MSG_LOBBY_WAITING_LIST& operator=(const Protocol_MSG_LOBBY_WAITING_LIST&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_WAITING_LIST_REPLY : public Atf::MessageProtocol
		{
			// 2[s|48] - errCode[errDescr|tableId32,tableId64]
			INT16 errCode;

			//CLIENT FIX NEEDED: The format here depends on information not available in the message. Mainly whether or not the table is play money.
			PString errDescr;

			UINT32 tableId32;
			UINT64 tableId64;

			Protocol_MSG_LOBBY_WAITING_LIST_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_WAITING_LIST_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_WAITING_LIST_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_WAITING_LIST_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_WAITING_LIST_REPLY(Protocol_MSG_LOBBY_WAITING_LIST_REPLY&&);
			Protocol_MSG_LOBBY_WAITING_LIST_REPLY& operator=(Protocol_MSG_LOBBY_WAITING_LIST_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_WAITING_LIST_REPLY(const Protocol_MSG_LOBBY_WAITING_LIST_REPLY&) = default;
			Protocol_MSG_LOBBY_WAITING_LIST_REPLY& operator=(const Protocol_MSG_LOBBY_WAITING_LIST_REPLY&) = default;
#endif
#endif
		};

		// server does absolutely nothing, even no reply, should be removed
		struct Protocol_MSG_LOBBY_LIST_REMOVE : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_LOBBY_LIST_REMOVE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_LIST_REMOVE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_LIST_REMOVE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_LIST_REMOVE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_LEAVE_WAITING_LIST : public Atf::MessageProtocol
		{
			// s148 - notUsedStr,listType,tableId32,tableId64
			PString notUsedStr;
			BYTE listType;	// no limit
			UINT32 tableId32;	// no limit
			UINT64 tableId64;	// no limit

			Protocol_MSG_LOBBY_LEAVE_WAITING_LIST();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_LEAVE_WAITING_LIST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_LEAVE_WAITING_LIST; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_LEAVE_WAITING_LIST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_LEAVE_WAITING_LIST(Protocol_MSG_LOBBY_LEAVE_WAITING_LIST&&);
			Protocol_MSG_LOBBY_LEAVE_WAITING_LIST& operator=(Protocol_MSG_LOBBY_LEAVE_WAITING_LIST&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_LEAVE_WAITING_LIST(const Protocol_MSG_LOBBY_LEAVE_WAITING_LIST&) = default;
			Protocol_MSG_LOBBY_LEAVE_WAITING_LIST& operator=(const Protocol_MSG_LOBBY_LEAVE_WAITING_LIST&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_LEAVE_WAITING_LIST_REPLY : public Atf::MessageProtocol
		{
			// 2[s|48] - errCode[errDescr|tableId32,tableId]
			INT16 errCode;

			PString errDescr;

			UINT32 tableId32;
			UINT64 tableId;

			Protocol_MSG_LOBBY_LEAVE_WAITING_LIST_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_LEAVE_WAITING_LIST_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_LEAVE_WAITING_LIST_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_LEAVE_WAITING_LIST_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_LEAVE_WAITING_LIST_REPLY(Protocol_MSG_LOBBY_LEAVE_WAITING_LIST_REPLY&&);
			Protocol_MSG_LOBBY_LEAVE_WAITING_LIST_REPLY& operator=(Protocol_MSG_LOBBY_LEAVE_WAITING_LIST_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_LEAVE_WAITING_LIST_REPLY(const Protocol_MSG_LOBBY_LEAVE_WAITING_LIST_REPLY&) = default;
			Protocol_MSG_LOBBY_LEAVE_WAITING_LIST_REPLY& operator=(const Protocol_MSG_LOBBY_LEAVE_WAITING_LIST_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS : public Atf::MessageProtocol
		{
			// 4 - flags
			INT32 flags;	// no limit

			Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_LEAVE_ALL_WAITING_LISTS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_LEAVE_ALL_WAITING_LISTS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|44] - errCode[errDescr|numTables,flags]
			INT16 errCode;

			PString errDescr;

			UINT32 numTables;
			UINT32 flags;

			Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY(Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY&&);
			Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY& operator=(Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY(const Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY&) = default;
			Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY& operator=(const Protocol_MSG_LOBBY_LEAVE_ALL_WAITING_LISTS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_WAITING_INVITED_REPLY : public Atf::MessageProtocol
		{
			// s41b8 - notUsedStr,tableId32,answer,leaveLists,tableId64
			PString notUsedStr;
			UINT32 tableId32;	// no limit
			BYTE answer;
			bool leaveLists;
			UINT64 tableId64;	// no limit

			Protocol_MSG_WAITING_INVITED_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_WAITING_INVITED_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_WAITING_INVITED_REPLY; }
			const char *getMsgIdString() const override { return "MSG_WAITING_INVITED_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_WAITING_INVITED_REPLY(Protocol_MSG_WAITING_INVITED_REPLY&&);
			Protocol_MSG_WAITING_INVITED_REPLY& operator=(Protocol_MSG_WAITING_INVITED_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_WAITING_INVITED_REPLY(const Protocol_MSG_WAITING_INVITED_REPLY&) = default;
			Protocol_MSG_WAITING_INVITED_REPLY& operator=(const Protocol_MSG_WAITING_INVITED_REPLY&) = default;
#endif
#endif
		};
	};

	namespace lobby_unauth
	{
		// NO LONGER SENT BY NATIVE CLIENT (old client still sends it)
		struct Protocol_MSG_LOBBY_CLIENT_ERROR : public Atf::MessageProtocol
		{
			// ss - userId,info
			PString userId;
			PString info;

			Protocol_MSG_LOBBY_CLIENT_ERROR();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLIENT_ERROR&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLIENT_ERROR; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLIENT_ERROR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CLIENT_ERROR(Protocol_MSG_LOBBY_CLIENT_ERROR&&);
			Protocol_MSG_LOBBY_CLIENT_ERROR& operator=(Protocol_MSG_LOBBY_CLIENT_ERROR&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CLIENT_ERROR(const Protocol_MSG_LOBBY_CLIENT_ERROR&) = default;
			Protocol_MSG_LOBBY_CLIENT_ERROR& operator=(const Protocol_MSG_LOBBY_CLIENT_ERROR&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_CLIENT_ERROR_REPLY : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_LOBBY_CLIENT_ERROR_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLIENT_ERROR_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLIENT_ERROR_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLIENT_ERROR_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_REPORT_INSTALL : public Atf::MessageProtocol
		{
			//! ssss44 <FIXME>Common::AtfShared::LoginExtra</FIXME>  - installId,wuid,promo,whenStr,siteId,platformId, <FIXME>extraData</FIXME> 
			PString installId;
			PString wuid;
			PString promo;
			PString whenStr;
			UINT32 siteId;
			UINT32 platformId;
			Common::AtfShared::LoginExtra extraData;

			Protocol_MSG_LOBBY_REPORT_INSTALL();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_REPORT_INSTALL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_REPORT_INSTALL; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_REPORT_INSTALL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_REPORT_INSTALL(Protocol_MSG_LOBBY_REPORT_INSTALL&&);
			Protocol_MSG_LOBBY_REPORT_INSTALL& operator=(Protocol_MSG_LOBBY_REPORT_INSTALL&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_REPORT_INSTALL(const Protocol_MSG_LOBBY_REPORT_INSTALL&) = default;
			Protocol_MSG_LOBBY_REPORT_INSTALL& operator=(const Protocol_MSG_LOBBY_REPORT_INSTALL&) = default;
#endif
#endif
		};
		// no reply

		// NO LONGER SENT BY NATIVE CLIENT (definitely useless)
		struct Protocol_MSG_LOBBY_PROMO_COUNTRY : public Atf::MessageProtocol
		{
			// empty

			Protocol_MSG_LOBBY_PROMO_COUNTRY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_PROMO_COUNTRY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_PROMO_COUNTRY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_PROMO_COUNTRY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_PROMO_COUNTRY_REPLY : public Atf::MessageProtocol
		{
			// 4 - uint32Val
			UINT32 uint32Val;	// always 0

			Protocol_MSG_LOBBY_PROMO_COUNTRY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_PROMO_COUNTRY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_PROMO_COUNTRY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_PROMO_COUNTRY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN : public Atf::MessageProtocol
		{
			// 44 - id,locale
			UINT32 id;	// no limit
			UINT32 locale;

			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_SATELLITES_TO_TOURN; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_SATELLITES_TO_TOURN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct SatelliteStruct
		{
			// 4ssst44411ss1444111444444 - tournamentId,server,serverObj,publisherName,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,localeStr,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartEncode,tournMask2,status,entrants
			UINT32 tournamentId;
			PString server;
			PString serverObj;	// always empty
			PString publisherName;	// always empty
			CommSrvTime whenStart;
			UINT32 buyIn;
			UINT32 rake;
			UINT32 fppBuyIn;
			BYTE isRestricted;
			BYTE isPwdProtected;
			PString localeStr;
			PString admissionId;
			BYTE isPlayMoney;
			UINT32 satelliteTarget;
			UINT32 minPlayers;
			UINT32 tournFlags;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			UINT32 tournMask;
			UINT32 tournSites;
			UINT32 whenStartEncode;
			UINT32 tournMask2;
			UINT32 status;
			UINT32 entrants;

			SatelliteStruct();
			void clear();
			bool equals(const SatelliteStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SatelliteStruct(SatelliteStruct&&);
			SatelliteStruct& operator=(SatelliteStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SatelliteStruct(const SatelliteStruct&) = default;
			SatelliteStruct& operator=(const SatelliteStruct&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY : public Atf::MessageProtocol
		{
			// 44<4ssst44411ss1444111444444> - id,numSatellites<tournamentId,server,serverObj,publisherName,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,localeStr,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartEncode,tournMask2,status,entrants>
			UINT32 id;
			Atf::LAtfVector< SatelliteStruct, 4 > satellites;

			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY(Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY&&);
			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY& operator=(Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY(const Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY& operator=(const Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX : public Atf::MessageProtocol
		{
			// 44 - id,locale
			UINT32 id;	// no limit
			UINT32 locale;

			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct SatelliteStructEx
		{
			// M(4ssst44411ss14441114m4444) - M(tournamentId,server,serverObj,publisherName,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,localeStr,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartEncode,tournMask2,status,entrants)
			UINT32 tournamentId;
			PString server;
			PString serverObj;	// always empty
			PString publisherName;	// always empty
			CommSrvTime whenStart;
			UINT32 buyIn;
			UINT32 rake;
			UINT32 fppBuyIn;
			BYTE isRestricted;
			BYTE isPwdProtected;
			PString localeStr;
			PString admissionId;
			BYTE isPlayMoney;
			UINT32 satelliteTarget;
			UINT32 minPlayers;
			UINT32 tournFlags;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			UINT32 tournMask;
			PSiteMask tournSites;
			UINT32 whenStartEncode;
			UINT32 tournMask2;
			UINT32 status;
			UINT32 entrants;

			SatelliteStructEx();
			void clear();
			bool equals(const SatelliteStructEx&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SatelliteStructEx(SatelliteStructEx&&);
			SatelliteStructEx& operator=(SatelliteStructEx&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SatelliteStructEx(const SatelliteStructEx&) = default;
			SatelliteStructEx& operator=(const SatelliteStructEx&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY : public Atf::MessageProtocol
		{
			// 44<M(4ssst44411ss14441114m4444)> - id,numSatellites<M(tournamentId,server,serverObj,publisherName,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,localeStr,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartEncode,tournMask2,status,entrants)>
			UINT32 id;
			Atf::LAtfVector< SatelliteStructEx, 4 > satellites;

			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY(Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY&&);
			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY& operator=(Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY(const Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY& operator=(const Protocol_MSG_LOBBY_GET_SATELLITES_TO_TOURN_EX_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_TABLE_BY_ID : public Atf::MessageProtocol
		{
			// 448 - tableId32,tournId,tableId
			UINT32 tableId32;	// no limit
			UINT32 tournId;	// no limit
			UINT64 tableId;

			Protocol_MSG_LOBBY_GET_TABLE_BY_ID();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_TABLE_BY_ID&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_TABLE_BY_ID; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_TABLE_BY_ID"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_GET_TABLE_BY_ID_REPLY : public Atf::MessageProtocol
		{
			// 2[s|ss] - errCode[errDescr|server,serverObj]
			INT16 errCode;

			PString errDescr;

			PString server;
			PString serverObj;

			Protocol_MSG_LOBBY_GET_TABLE_BY_ID_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_TABLE_BY_ID_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_TABLE_BY_ID_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_TABLE_BY_ID_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_TABLE_BY_ID_REPLY(Protocol_MSG_LOBBY_GET_TABLE_BY_ID_REPLY&&);
			Protocol_MSG_LOBBY_GET_TABLE_BY_ID_REPLY& operator=(Protocol_MSG_LOBBY_GET_TABLE_BY_ID_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_TABLE_BY_ID_REPLY(const Protocol_MSG_LOBBY_GET_TABLE_BY_ID_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_TABLE_BY_ID_REPLY& operator=(const Protocol_MSG_LOBBY_GET_TABLE_BY_ID_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_GET_CAPTCHA : public Atf::MessageProtocol
		{
			// s - userId
			PString userId;

			Protocol_MSG_LOBBY_GET_CAPTCHA();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_CAPTCHA&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_CAPTCHA; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_CAPTCHA"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_CAPTCHA(Protocol_MSG_LOBBY_GET_CAPTCHA&&);
			Protocol_MSG_LOBBY_GET_CAPTCHA& operator=(Protocol_MSG_LOBBY_GET_CAPTCHA&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_CAPTCHA(const Protocol_MSG_LOBBY_GET_CAPTCHA&) = default;
			Protocol_MSG_LOBBY_GET_CAPTCHA& operator=(const Protocol_MSG_LOBBY_GET_CAPTCHA&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_GET_CAPTCHA_REPLY : public Atf::MessageProtocol
		{
			// 2[s|vv] - errCode[errDescr|image,checksum]
			INT16 errCode;

			PString errDescr;

			PBlock image;
			PBlock checksum;

			Protocol_MSG_LOBBY_GET_CAPTCHA_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_GET_CAPTCHA_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_GET_CAPTCHA_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_GET_CAPTCHA_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_GET_CAPTCHA_REPLY(Protocol_MSG_LOBBY_GET_CAPTCHA_REPLY&&);
			Protocol_MSG_LOBBY_GET_CAPTCHA_REPLY& operator=(Protocol_MSG_LOBBY_GET_CAPTCHA_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_GET_CAPTCHA_REPLY(const Protocol_MSG_LOBBY_GET_CAPTCHA_REPLY&) = default;
			Protocol_MSG_LOBBY_GET_CAPTCHA_REPLY& operator=(const Protocol_MSG_LOBBY_GET_CAPTCHA_REPLY&) = default;
#endif
#endif
		};

		// no check on monet message as it will be obsoleted soon and it is not using async-call to internal server modules
		// Message MSG_LOBBY_REPORT_UN_AUTH_MONET

		// same as in auth connection
		struct Protocol_MSG_LOBBY_CHALLENGE_QUESTION : public Atf::MessageProtocol
		{
			// 4 - locale
			UINT32 locale;

			Protocol_MSG_LOBBY_CHALLENGE_QUESTION();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CHALLENGE_QUESTION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CHALLENGE_QUESTION; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CHALLENGE_QUESTION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct ChallengeQuestion
		{
			// 4s - id,txt
			UINT32 id;
			PString txt;

			ChallengeQuestion();
			void clear();
			bool equals(const ChallengeQuestion&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ChallengeQuestion(ChallengeQuestion&&);
			ChallengeQuestion& operator=(ChallengeQuestion&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ChallengeQuestion(const ChallengeQuestion&) = default;
			ChallengeQuestion& operator=(const ChallengeQuestion&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY : public Atf::MessageProtocol
		{
			// 2[s|2<4s>] - errCode[errDesc|numChallenges<id,txt>]
			INT16 errCode;

			PString errDesc;

			Atf::LAtfVector< ChallengeQuestion, 2 > challenges;

			Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CHALLENGE_QUESTION_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CHALLENGE_QUESTION_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY(Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY&&);
			Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY& operator=(Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY(const Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY&) = default;
			Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY& operator=(const Protocol_MSG_LOBBY_CHALLENGE_QUESTION_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_UPDATE_BY_LICENSE : public Atf::MessageProtocol
		{
			// 444 - platform,license,site
			UINT32 platform;
			UINT32 license;
			UINT32 site;

			Protocol_MSG_LOBBY_UPDATE_BY_LICENSE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_UPDATE_BY_LICENSE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_UPDATE_BY_LICENSE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_UPDATE_BY_LICENSE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_UPDATE_BY_LICENSE_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s] - errCode[errDesc|updateFolder]
			INT16 errCode;

			PString errDesc;

			PString updateFolder;

			Protocol_MSG_LOBBY_UPDATE_BY_LICENSE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_UPDATE_BY_LICENSE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_UPDATE_BY_LICENSE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_UPDATE_BY_LICENSE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_UPDATE_BY_LICENSE_REPLY(Protocol_MSG_LOBBY_UPDATE_BY_LICENSE_REPLY&&);
			Protocol_MSG_LOBBY_UPDATE_BY_LICENSE_REPLY& operator=(Protocol_MSG_LOBBY_UPDATE_BY_LICENSE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_UPDATE_BY_LICENSE_REPLY(const Protocol_MSG_LOBBY_UPDATE_BY_LICENSE_REPLY&) = default;
			Protocol_MSG_LOBBY_UPDATE_BY_LICENSE_REPLY& operator=(const Protocol_MSG_LOBBY_UPDATE_BY_LICENSE_REPLY&) = default;
#endif
#endif
		};

		// same as in auth connection
		struct Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE : public Atf::MessageProtocol
		{
			// 44 - typeId,clientReqId
			UINT32 typeId;	// no limit
			UINT32 clientReqId;	// no limit

			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TABLE_TO_OBSERVE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TABLE_TO_OBSERVE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY : public Atf::MessageProtocol
		{
			// 2[s4|s448s] - errCode[errDescr,clientReqId|server,tableId,clientReqId,tableId64,serverObject]
			INT16 errCode;

			PString errDescr;
			UINT32 clientReqId;

			PString server;
			UINT32 tableId;

			UINT64 tableId64;
			PString serverObject;

			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY(Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY&&);
			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY& operator=(Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY(const Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY&) = default;
			Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY& operator=(const Protocol_MSG_LOBBY_FIND_TABLE_TO_OBSERVE_REPLY&) = default;
#endif
#endif
		};

		struct Publication
		{
			// s - name
			PString name;

			Publication();
			void clear();
			bool equals(const Publication&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Publication(Publication&&);
			Publication& operator=(Publication&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Publication(const Publication&) = default;
			Publication& operator=(const Publication&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_CHECK_PUBLICATIONS : public Atf::MessageProtocol
		{
			// 4<s> - numPublications<name>
			Atf::LAtfVector< Publication, 4 > publications;

			Protocol_MSG_LOBBY_CHECK_PUBLICATIONS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CHECK_PUBLICATIONS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CHECK_PUBLICATIONS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CHECK_PUBLICATIONS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CHECK_PUBLICATIONS(Protocol_MSG_LOBBY_CHECK_PUBLICATIONS&&);
			Protocol_MSG_LOBBY_CHECK_PUBLICATIONS& operator=(Protocol_MSG_LOBBY_CHECK_PUBLICATIONS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CHECK_PUBLICATIONS(const Protocol_MSG_LOBBY_CHECK_PUBLICATIONS&) = default;
			Protocol_MSG_LOBBY_CHECK_PUBLICATIONS& operator=(const Protocol_MSG_LOBBY_CHECK_PUBLICATIONS&) = default;
#endif
#endif
		};
		struct Protocol_MSG_LOBBY_CHECK_PUBLICATIONS_REPLY : public Atf::MessageProtocol
		{
			// 4<b> - numPublicationExist<publicationExist>
			Atf::LAtfVector< bool, 4 > publicationExist;

			Protocol_MSG_LOBBY_CHECK_PUBLICATIONS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CHECK_PUBLICATIONS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CHECK_PUBLICATIONS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CHECK_PUBLICATIONS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_CHECK_PUBLICATIONS_REPLY(Protocol_MSG_LOBBY_CHECK_PUBLICATIONS_REPLY&&);
			Protocol_MSG_LOBBY_CHECK_PUBLICATIONS_REPLY& operator=(Protocol_MSG_LOBBY_CHECK_PUBLICATIONS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_CHECK_PUBLICATIONS_REPLY(const Protocol_MSG_LOBBY_CHECK_PUBLICATIONS_REPLY&) = default;
			Protocol_MSG_LOBBY_CHECK_PUBLICATIONS_REPLY& operator=(const Protocol_MSG_LOBBY_CHECK_PUBLICATIONS_REPLY&) = default;
#endif
#endif
		};
	};

	namespace Personalization
	{
		struct GameConnectInfo
		{
			// M(8ss44b) - M(gameId,server,serverObject,scriptId,category,shouldOpen)
			UINT64 gameId;
			PString server;
			PString serverObject;
			UINT32 scriptId;
			UINT32 category;	// enum GameCategoryTypes
			bool shouldOpen;

			GameConnectInfo();
			void clear();
			bool equals(const GameConnectInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			GameConnectInfo(GameConnectInfo&&);
			GameConnectInfo& operator=(GameConnectInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			GameConnectInfo(const GameConnectInfo&) = default;
			GameConnectInfo& operator=(const GameConnectInfo&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_PS_USER_AT : public Atf::MessageProtocol
		{
			// s - userId
			PString userId;

			Protocol_MSG_LOBBY_PS_USER_AT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_PS_USER_AT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_PS_USER_AT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_PS_USER_AT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_PS_USER_AT(Protocol_MSG_LOBBY_PS_USER_AT&&);
			Protocol_MSG_LOBBY_PS_USER_AT& operator=(Protocol_MSG_LOBBY_PS_USER_AT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_PS_USER_AT(const Protocol_MSG_LOBBY_PS_USER_AT&) = default;
			Protocol_MSG_LOBBY_PS_USER_AT& operator=(const Protocol_MSG_LOBBY_PS_USER_AT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_PS_USER_AT_REPLY : public Atf::MessageProtocol
		{
			// 4<M(8ss44b)>4<M(8ss44b)>4<M(8ss44b)>4<M(8ss44b)> - numTableConnInfo<M(gameId,server,serverObject,scriptId,category,shouldOpen)>,numTournConnInfo<M(gameId,server,serverObject,scriptId,category,shouldOpen)>,numBlitzTournConnInfo<M(gameId,server,serverObject,scriptId,category,shouldOpen)>,numBlitzConnInfo<M(gameId,server,serverObject,scriptId,category,shouldOpen)>
			Atf::LAtfVector< GameConnectInfo, 4 > tableConnInfo;
			Atf::LAtfVector< GameConnectInfo, 4 > tournConnInfo;
			Atf::LAtfVector< GameConnectInfo, 4 > blitzTournConnInfo;
			Atf::LAtfVector< GameConnectInfo, 4 > blitzConnInfo;

			Protocol_MSG_LOBBY_PS_USER_AT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_PS_USER_AT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_PS_USER_AT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_PS_USER_AT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_PS_USER_AT_REPLY(Protocol_MSG_LOBBY_PS_USER_AT_REPLY&&);
			Protocol_MSG_LOBBY_PS_USER_AT_REPLY& operator=(Protocol_MSG_LOBBY_PS_USER_AT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_PS_USER_AT_REPLY(const Protocol_MSG_LOBBY_PS_USER_AT_REPLY&) = default;
			Protocol_MSG_LOBBY_PS_USER_AT_REPLY& operator=(const Protocol_MSG_LOBBY_PS_USER_AT_REPLY&) = default;
#endif
#endif
		};

		struct TableStaticDataStruct
		{
			//! 8sss111144214444ss4411b4<s>448444 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m - tableId,name,serverAddress,serverInstance,isPlayMoney,game,isHiLo,maxPlayers,tableFlags,tableInstanceFlags,chatLang,structure,loBet,hiBet,ante,cap,specialName,currency,minChipsLimit,maxBuyIn,icon,filter,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,defaultBuyIn,tableFlags2,brandMask,poolBlockMinHands,tableTypeId, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx
			UINT64 tableId;
			PString name;
			PString serverAddress;
			PString serverInstance;
			BYTE isPlayMoney;
			BYTE game;
			BYTE isHiLo;
			BYTE maxPlayers;
			UINT32 tableFlags;
			UINT32 tableInstanceFlags;
			UINT16 chatLang;
			BYTE structure;
			UINT32 loBet;
			UINT32 hiBet;
			UINT32 ante;
			UINT32 cap;
			PString specialName;
			PString currency;
			UINT32 minChipsLimit;
			UINT32 maxBuyIn;
			BYTE icon;
			BYTE filter;
			bool countryRestrictionInverted;
			Atf::LAtfVector< PString, 4 > restrictedCountries;
			UINT32 scalePM;
			UINT32 defaultBuyIn;
			UINT64 tableFlags2;
			UINT32 brandMask;
			INT32 poolBlockMinHands;
			UINT32 tableTypeId;
			TableCommon::TableStakes tableStakes;
			Atf::LAtfVector< INT64, 4 > variableAntes;
			PSiteMask visibilityMaskEx;

			TableStaticDataStruct();
			void clear();
			bool equals(const TableStaticDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableStaticDataStruct(TableStaticDataStruct&&);
			TableStaticDataStruct& operator=(TableStaticDataStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableStaticDataStruct(const TableStaticDataStruct&) = default;
			TableStaticDataStruct& operator=(const TableStaticDataStruct&) = default;
#endif
#endif
		};

		struct TableData
		{
			//! M(8sss111144214444ss4411b4<s>448444 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m) - M(tableId,name,serverAddress,serverInstance,isPlayMoney,game,isHiLo,maxPlayers,tableFlags,tableInstanceFlags,chatLang,structure,loBet,hiBet,ante,cap,specialName,currency,minChipsLimit,maxBuyIn,icon,filter,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,defaultBuyIn,tableFlags2,brandMask,poolBlockMinHands,tableTypeId, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx)
			TableStaticDataStruct staticData;

			TableData();
			void clear();
			bool equals(const TableData&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableData(TableData&&);
			TableData& operator=(TableData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableData(const TableData&) = default;
			TableData& operator=(const TableData&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS : public Atf::MessageProtocol
		{
			// 4<8> - numTableIds<tableIds>
			Atf::LAtfVector< UINT64, 4 > tableIds;

			Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS(Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS&&);
			Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS& operator=(Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS(const Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS&) = default;
			Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS& operator=(const Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY : public Atf::MessageProtocol
		{
			//! 2[s|4<M(8sss111144214444ss4411b4<s>448444 <FIXME>TableCommon::TableStakes</FIXME> 4<8>m)>] - errCode[errDescr|numTables<M(tableId,name,serverAddress,serverInstance,isPlayMoney,game,isHiLo,maxPlayers,tableFlags,tableInstanceFlags,chatLang,structure,loBet,hiBet,ante,cap,specialName,currency,minChipsLimit,maxBuyIn,icon,filter,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,scalePM,defaultBuyIn,tableFlags2,brandMask,poolBlockMinHands,tableTypeId, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx)>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< TableData, 4 > tables;

			Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY(Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY&&);
			Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY& operator=(Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY(const Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY&) = default;
			Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY& operator=(const Protocol_MSG_LOBBY_PS_GET_TABLES_INFO_BY_TABLE_IDS_REPLY&) = default;
#endif
#endif
		};
	};
};

#endif
