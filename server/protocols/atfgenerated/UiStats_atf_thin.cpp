/**
 * UiStats_atf_thin.cpp
 *
 * This file was auto-generated from UiStats_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin UiStats_atf.txt
 */
 
#include "UiStats_atf_thin.h"

//=================================================================
//                    DeviceToken
//=================================================================

UiStats::DeviceToken::DeviceToken()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

UiStats::DeviceToken::DeviceToken(DeviceToken&& _o)
	: mobileToken(std::move(_o.mobileToken))
{
}

UiStats::DeviceToken& UiStats::DeviceToken::operator=(DeviceToken&& _o)
{
	if(this != &_o)
	{
		mobileToken = std::move(_o.mobileToken);
	}
	return *this;
}

#endif

void UiStats::DeviceToken::clear()
{
	mobileToken.clear();
}

bool UiStats::DeviceToken::equals(const DeviceToken& _o) const
{
	return mobileToken.size() == _o.mobileToken.size() && memcmp(mobileToken.ptr(), _o.mobileToken.ptr(), mobileToken.size()) == 0;
}

const char *UiStats::DeviceToken::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("mobileToken=");
	ThinAtf::AtfTempl<PBlock>::ToTraceString(_buf, mobileToken);
	_buf.append('}');
	return _buf.c_str();
}

void UiStats::DeviceToken::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(DeviceToken())) // not empty
	{
		_body._composeVarBlock(mobileToken.ptr(), mobileToken.size());
	}

	_msg.composeMsgBody(_body);
}

void UiStats::DeviceToken::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parsePBlock(mobileToken);
}

/*static*/ void UiStats::DeviceToken::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const BYTE* mobileToken; size_t szMobileToken; _parser0._parseVarBlock(mobileToken, szMobileToken);  /*mobileToken*/
	AtfValidator::validateIntMax(_descr, "mobileToken", szMobileToken, 10000, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_UISTATS_SAVE_USER_STATS
//=================================================================

UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::Protocol_MSG_UISTATS_SAVE_USER_STATS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::Protocol_MSG_UISTATS_SAVE_USER_STATS(Protocol_MSG_UISTATS_SAVE_USER_STATS&& _o)
	: eventData(std::move(_o.eventData))
{
}

UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS& UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::operator=(Protocol_MSG_UISTATS_SAVE_USER_STATS&& _o)
{
	if(this != &_o)
	{
		eventData = std::move(_o.eventData);
	}
	return *this;
}

#endif

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::clear()
{
	eventData.clear();
}

bool UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::equals(const Protocol_MSG_UISTATS_SAVE_USER_STATS& _o) const
{
	return eventData.equals(_o.eventData);
}

const char *UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_SAVE_USER_STATS).append(")");
	_buf.append(',');
	_buf.append("eventData=");
	_buf.append(eventData);
	return _buf.c_str();
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(eventData);
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(eventData);
}

/*static*/ void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_SAVE_USER_STATS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "eventData"); size_t szEventData = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "eventData", szEventData, 100000, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY
//=================================================================

UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY(Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errDescr(std::move(_o.errDescr))
{
}

UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY& UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::operator=(Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDescr = std::move(_o.errDescr);
	}
	return *this;
}

#endif

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::equals(const Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errDescr.equals(_o.errDescr);
}

const char *UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_SAVE_USER_STATS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
}

/*static*/ void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_SAVE_USER_STATS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP(Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP&& _o)
	: deviceId(std::move(_o.deviceId))
	, deviceToken(std::move(_o.deviceToken))
	, oldDeviceId(std::move(_o.oldDeviceId))
	, notificationType(std::move(_o.notificationType))
	, deviceLocale(std::move(_o.deviceLocale))
{
}

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP& UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::operator=(Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP&& _o)
{
	if(this != &_o)
	{
		deviceId = std::move(_o.deviceId);
		deviceToken = std::move(_o.deviceToken);
		oldDeviceId = std::move(_o.oldDeviceId);
		notificationType = std::move(_o.notificationType);
		deviceLocale = std::move(_o.deviceLocale);
	}
	return *this;
}

#endif

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::clear()
{
	deviceId = 0;
	deviceToken.clear();
	oldDeviceId = 0;
	notificationType = 0;
	deviceLocale = 0;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP& _o) const
{
	return deviceId == _o.deviceId &&
		deviceToken.equals(_o.deviceToken) &&
		oldDeviceId == _o.oldDeviceId &&
		notificationType == _o.notificationType &&
		deviceLocale == _o.deviceLocale;
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP).append(")");
	_buf.append(',');
	_buf.append("deviceId=");
	_buf.appendUint(deviceId);
	_buf.append(',');
	_buf.append("deviceToken=");
	deviceToken.toTraceString(_buf);
	_buf.append(',');
	_buf.append("oldDeviceId=");
	_buf.appendUint(oldDeviceId);
	_buf.append(',');
	_buf.append("notificationType=");
	_buf.appendUint(notificationType);
	_buf.append(',');
	_buf.append("deviceLocale=");
	_buf.appendUint(deviceLocale);
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(deviceId);
	deviceToken.composeMsg(_msg);
	_msg.composeUINT32(oldDeviceId);
	_msg.composeUINT32(notificationType);
	_msg.composeUINT32(deviceLocale);
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(deviceId);
	deviceToken.parseMsg(_parser);
	_parser.parseUINT32(oldDeviceId);
	_parser.parseUINT32(notificationType);
	_parser.parseUINT32(deviceLocale);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 deviceId; _parser.parseUINT32(deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	DeviceToken::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("deviceToken"), _fieldsWithUnparsedContent);
	UINT32 oldDeviceId; _parser.parseUINT32(oldDeviceId);
	AtfValidator::validateInt(_descr, "oldDeviceId", oldDeviceId, _checker, __FILE__, __LINE__);
	UINT32 notificationType; _parser.parseUINT32(notificationType);
	AtfValidator::validateIntMax(_descr, "notificationType", notificationType, 65535, _checker, __FILE__, __LINE__);
	UINT32 deviceLocale; _parser.parseUINT32(deviceLocale);
	AtfValidator::validateIntMax(_descr, "deviceLocale", deviceLocale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY(Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errDescr(std::move(_o.errDescr))
{
}

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY& UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::operator=(Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDescr = std::move(_o.errDescr);
	}
	return *this;
}

#endif

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errDescr.equals(_o.errDescr);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2(Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2&& _o)
	: deviceId(std::move(_o.deviceId))
	, deviceToken(std::move(_o.deviceToken))
	, oldDeviceId(std::move(_o.oldDeviceId))
	, notificationType(std::move(_o.notificationType))
	, deviceLocale(std::move(_o.deviceLocale))
	, platformId(std::move(_o.platformId))
{
}

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2& UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::operator=(Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2&& _o)
{
	if(this != &_o)
	{
		deviceId = std::move(_o.deviceId);
		deviceToken = std::move(_o.deviceToken);
		oldDeviceId = std::move(_o.oldDeviceId);
		notificationType = std::move(_o.notificationType);
		deviceLocale = std::move(_o.deviceLocale);
		platformId = std::move(_o.platformId);
	}
	return *this;
}

#endif

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::clear()
{
	deviceId = 0;
	deviceToken.clear();
	oldDeviceId = 0;
	notificationType = 0;
	deviceLocale = 0;
	platformId = 0;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2& _o) const
{
	return deviceId == _o.deviceId &&
		deviceToken.equals(_o.deviceToken) &&
		oldDeviceId == _o.oldDeviceId &&
		notificationType == _o.notificationType &&
		deviceLocale == _o.deviceLocale &&
		platformId == _o.platformId;
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2).append(")");
	_buf.append(',');
	_buf.append("deviceId=");
	_buf.appendUint(deviceId);
	_buf.append(',');
	_buf.append("deviceToken=");
	deviceToken.toTraceString(_buf);
	_buf.append(',');
	_buf.append("oldDeviceId=");
	_buf.appendUint(oldDeviceId);
	_buf.append(',');
	_buf.append("notificationType=");
	_buf.appendUint(notificationType);
	_buf.append(',');
	_buf.append("deviceLocale=");
	_buf.appendUint(deviceLocale);
	_buf.append(',');
	_buf.append("platformId=");
	_buf.appendUint(platformId);
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(deviceId);
	deviceToken.composeMsg(_msg);
	_msg.composeUINT32(oldDeviceId);
	_msg.composeUINT32(notificationType);
	_msg.composeUINT32(deviceLocale);
	_msg.composeUINT32(platformId);
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(deviceId);
	deviceToken.parseMsg(_parser);
	_parser.parseUINT32(oldDeviceId);
	_parser.parseUINT32(notificationType);
	_parser.parseUINT32(deviceLocale);
	_parser.parseUINT32(platformId);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 deviceId; _parser.parseUINT32(deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	DeviceToken::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("deviceToken"), _fieldsWithUnparsedContent);
	UINT32 oldDeviceId; _parser.parseUINT32(oldDeviceId);
	AtfValidator::validateInt(_descr, "oldDeviceId", oldDeviceId, _checker, __FILE__, __LINE__);
	UINT32 notificationType; _parser.parseUINT32(notificationType);
	AtfValidator::validateIntMax(_descr, "notificationType", notificationType, 65535, _checker, __FILE__, __LINE__);
	UINT32 deviceLocale; _parser.parseUINT32(deviceLocale);
	AtfValidator::validateIntMax(_descr, "deviceLocale", deviceLocale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	UINT32 platformId; _parser.parseUINT32(platformId);
	AtfValidator::validateIntMax(_descr, "platformId", platformId, Client_Last, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY(Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errDescr(std::move(_o.errDescr))
{
}

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY& UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::operator=(Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDescr = std::move(_o.errDescr);
	}
	return *this;
}

#endif

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errDescr.equals(_o.errDescr);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED()
{
	clear();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::clear()
{
	deviceId = 0;
	platformId = 0;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED& _o) const
{
	return deviceId == _o.deviceId &&
		platformId == _o.platformId;
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED).append(")");
	_buf.append(',');
	_buf.append("deviceId=");
	_buf.appendUint(deviceId);
	_buf.append(',');
	_buf.append("platformId=");
	_buf.appendUint(platformId);
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(deviceId);
	_msg.composeUINT32(platformId);
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(deviceId);
	_parser.parseUINT32(platformId);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 deviceId; _parser.parseUINT32(deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	UINT32 platformId; _parser.parseUINT32(platformId);
	AtfValidator::validateIntMax(_descr, "platformId", platformId, Client_Last, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY(Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errDescr(std::move(_o.errDescr))
{
}

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY& UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::operator=(Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDescr = std::move(_o.errDescr);
	}
	return *this;
}

#endif

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errDescr.equals(_o.errDescr);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_RATE_ME
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::Protocol_MSG_UISTATS_MOBILE_RATE_ME()
{
	clear();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::clear()
{
	rating = 0;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::equals(const Protocol_MSG_UISTATS_MOBILE_RATE_ME& _o) const
{
	return rating == _o.rating;
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_RATE_ME).append(")");
	_buf.append(',');
	_buf.append("rating=");
	_buf.appendInt(rating);
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(rating);
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(rating);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_RATE_ME";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 rating; _parser.parseINT32(rating);
	AtfValidator::validateIntRange(_descr, "rating", rating, 0, 5, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY(Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errDescr(std::move(_o.errDescr))
{
}

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY& UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::operator=(Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDescr = std::move(_o.errDescr);
	}
	return *this;
}

#endif

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::equals(const Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errDescr.equals(_o.errDescr);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_RATE_ME_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_RATE_ME_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION
//=================================================================

UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION(Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION&& _o)
	: deviceId(std::move(_o.deviceId))
	, deviceToken(std::move(_o.deviceToken))
	, installId(std::move(_o.installId))
	, platformId(std::move(_o.platformId))
	, siteId(std::move(_o.siteId))
	, notificationType(std::move(_o.notificationType))
	, deviceLocale(std::move(_o.deviceLocale))
	, brandId(std::move(_o.brandId))
	, appKey(std::move(_o.appKey))
{
}

UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION& UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::operator=(Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION&& _o)
{
	if(this != &_o)
	{
		deviceId = std::move(_o.deviceId);
		deviceToken = std::move(_o.deviceToken);
		installId = std::move(_o.installId);
		platformId = std::move(_o.platformId);
		siteId = std::move(_o.siteId);
		notificationType = std::move(_o.notificationType);
		deviceLocale = std::move(_o.deviceLocale);
		brandId = std::move(_o.brandId);
		appKey = std::move(_o.appKey);
	}
	return *this;
}

#endif

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::clear()
{
	deviceId = 0;
	deviceToken.clear();
	installId.clear();
	platformId = 0;
	siteId = 0;
	notificationType = 0;
	deviceLocale = 0;
	brandId = 0;
	appKey.clear();
}

bool UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION& _o) const
{
	return deviceId == _o.deviceId &&
		deviceToken.equals(_o.deviceToken) &&
		installId.equals(_o.installId) &&
		platformId == _o.platformId &&
		siteId == _o.siteId &&
		notificationType == _o.notificationType &&
		deviceLocale == _o.deviceLocale &&
		brandId == _o.brandId &&
		appKey.equals(_o.appKey);
}

const char *UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_REGISTRATION).append(")");
	_buf.append(',');
	_buf.append("deviceId=");
	_buf.appendUint(deviceId);
	_buf.append(',');
	_buf.append("deviceToken=");
	deviceToken.toTraceString(_buf);
	_buf.append(',');
	_buf.append("installId=");
	_buf.append(installId);
	_buf.append(',');
	_buf.append("platformId=");
	_buf.appendUint(platformId);
	_buf.append(',');
	_buf.append("siteId=");
	_buf.appendUint(siteId);
	_buf.append(',');
	_buf.append("notificationType=");
	_buf.appendUint(notificationType);
	_buf.append(',');
	_buf.append("deviceLocale=");
	_buf.appendUint(deviceLocale);
	_buf.append(',');
	_buf.append("brandId=");
	_buf.appendUint(brandId);
	_buf.append(',');
	_buf.append("appKey=");
	_buf.append(appKey);
	return _buf.c_str();
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(deviceId);
	deviceToken.composeMsg(_msg);
	_msg.composeString(installId);
	_msg.composeUINT32(platformId);
	_msg.composeUINT32(siteId);
	_msg.composeUINT32(notificationType);
	_msg.composeUINT32(deviceLocale);
	_msg.composeUINT32(brandId);
	_msg.composeString(appKey);
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(deviceId);
	deviceToken.parseMsg(_parser);
	_parser.parseStringP(installId);
	_parser.parseUINT32(platformId);
	_parser.parseUINT32(siteId);
	_parser.parseUINT32(notificationType);
	_parser.parseUINT32(deviceLocale);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(brandId);
	if(_parser.parseEnded()) return;
	_parser.parseStringP(appKey);
}

/*static*/ void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_REGISTRATION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 deviceId; _parser.parseUINT32(deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	DeviceToken::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("deviceToken"), _fieldsWithUnparsedContent);
	_parser.parseStringN(_dummy, 0, "installId"); size_t szInstallId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "installId", szInstallId, 10000, _checker, __FILE__, __LINE__);
	UINT32 platformId; _parser.parseUINT32(platformId);
	AtfValidator::validateIntMax(_descr, "platformId", platformId, Client_Last, _checker, __FILE__, __LINE__);
	UINT32 siteId; _parser.parseUINT32(siteId);
	AtfValidator::validateIntRange(_descr, "siteId", siteId, PokerStars_SiteUnknown, PokerStars_Last, _checker, __FILE__, __LINE__);
	UINT32 notificationType; _parser.parseUINT32(notificationType);
	AtfValidator::validateIntMax(_descr, "notificationType", notificationType, 65535, _checker, __FILE__, __LINE__);
	UINT32 deviceLocale; _parser.parseUINT32(deviceLocale);
	AtfValidator::validateIntMax(_descr, "deviceLocale", deviceLocale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 brandId; _parser.parseUINT32(brandId);
	AtfValidator::validateIntRange(_descr, "brandId", brandId, BrandType_None, BrandType_Last, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	_parser.parseStringN(_dummy, 0, "appKey"); size_t szAppKey = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "appKey", szAppKey, 65, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY
//=================================================================

UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY(Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errDescr(std::move(_o.errDescr))
	, deviceId(std::move(_o.deviceId))
{
}

UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY& UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::operator=(Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDescr = std::move(_o.errDescr);
		deviceId = std::move(_o.deviceId);
	}
	return *this;
}

#endif

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	deviceId = 0;
}

bool UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errDescr.equals(_o.errDescr) &&
		deviceId == _o.deviceId;
}

const char *UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("deviceId=");
		_buf.appendUint(deviceId);
	}
	return _buf.c_str();
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeUINT32(deviceId);
	}
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseUINT32(deviceId);
	}
}

/*static*/ void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 deviceId; _parser.parseUINT32(deviceId);
		AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool UiStats::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "cli"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_SAVE_USER_STATS: cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_SAVE_USER_STATS_REPLY: cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "cli_mobile"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_RATE_ME: cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_RATE_ME_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "cli_mobileUnauth"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_MOBILE_DEVICE_REGISTRATION: cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY: cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

