/**
 * SagStarterCommon_atf_thin.h
 *
 * This file was auto-generated from SagStarterCommon_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin SagStarterCommon_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_SAGSTARTERCOMMON_ATF_THIN_H
#define ATF_PROTOCOL_DEFFILE_SAGSTARTERCOMMON_ATF_THIN_H

#include "ThinAtfUserDefStructs.h"
#include "Common_atf_thin.h"
#include "lobby.h"
#include "spinandgo.h"


#define ATF_SAG_MAX_BUYIN_REAL      (5000*100)                 	// $5000
#define ATF_SAG_MAX_BUYIN_PM        (PINT32_MAX / 2)
#define ATF_SAG_MAX_BUYIN_FPP        0                         	// no FPP for SAG

#define ATF_SAG_MAX_BUYIN_ANY       ATF_SAG_MAX_BUYIN_PM

#define ATF_SAG_MAX_REG_GAMES        10
#define ATF_SAG_MAX_ADMISSIONS       100
#define ATF_SAG_MAX_ADMISSION_PRICE (ATF_SAG_MAX_BUYIN_ANY * ATF_MAX_PM_SCALE_LL)

#define ATF_SAG_MAX_PASSWORD_LEN     0                         	// no passwords for SAG

namespace SagStarterThin
{
	namespace common
	{

		struct RegisterWithScriptId
		{
			//! s444s144M()4184< <FIXME>CommonThin::AtfShared::UserTicketDataBase</FIXME> >b - userId,buyInRM,buyInPlay,buyInFpp,tournPwd,useTicket,buyInT,buyInW,M(),sagScriptId,numOfGames,admissionPrice,numAdmissions< <FIXME>CommonThin::AtfShared::UserTicketDataBase</FIXME> >,sportsBookVisible
			PString userId;
			INT32 buyInRM;
			INT32 buyInPlay;
			INT32 buyInFpp;
			PString tournPwd;
			BYTE useTicket;
			INT32 buyInT;
			INT32 buyInW;	// only 0
			ThinAtf::CopyableMsgBody currencyContext;	// we switched to an empty msgbody because trying to buy into a tournament with a user that does not have auto convert currency set and sending a non-empty currencyContext will return an error

			UINT32 sagScriptId;

			BYTE numOfGames;
			INT64 admissionPrice;
			ThinAtf::LAtfVector< CommonThin::AtfShared::UserTicketDataBase, 4 > admissions;
			bool sportsBookVisible;	// PYR-59874

			RegisterWithScriptId();
			void clear();
			bool equals(const RegisterWithScriptId&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			RegisterWithScriptId(RegisterWithScriptId&&);
			RegisterWithScriptId& operator=(RegisterWithScriptId&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			RegisterWithScriptId(const RegisterWithScriptId&) = default;
			RegisterWithScriptId& operator=(const RegisterWithScriptId&) = default;
#endif
#endif
		};

	};
};

#endif
