/**
 * UiStats_atf.cpp
 *
 * This file was auto-generated from UiStats_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: UiStats_atf.txt
 */
 
#include "UiStats_atf.h"

//=================================================================
//                    DeviceToken
//=================================================================

UiStats::DeviceToken::DeviceToken()
{
	clear();
}

void UiStats::DeviceToken::clear()
{
	mobileToken.clear();
}

bool UiStats::DeviceToken::equals(const DeviceToken& _o) const
{
	return mobileToken.size() == _o.mobileToken.size() && memcmp(mobileToken.ptr(), _o.mobileToken.ptr(), mobileToken.size()) == 0;
}

const char *UiStats::DeviceToken::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("mobileToken=");
	Atf::AtfTempl<PBlock>::ToTraceString(_buf, mobileToken);
	_buf.append('}');
	return _buf.c_str();
}

const char *UiStats::DeviceToken::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("mobileToken", mobileToken, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool UiStats::DeviceToken::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("mobileToken"))
		{
			Atf::XmlElement::_movePBlockWithNullStrip(_value, mobileToken);
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void UiStats::DeviceToken::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(DeviceToken())) // not empty
	{
		_body._composeVarBlock(mobileToken.ptr(), mobileToken.size());
	}

	_msg.composeMsgBody(_body);
}

void UiStats::DeviceToken::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parsePBlock(mobileToken);
}

const char *UiStats::DeviceToken::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("mobileToken", mobileToken);
	return _buf.c_str();
}

void UiStats::DeviceToken::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("mobileToken", mobileToken);
}

/* static */ void UiStats::DeviceToken::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PBlock mobileToken; _jparser.validateByNameThrow("mobileToken", mobileToken);
	AtfValidator::validateIntMax(_descr, "mobileToken", mobileToken.size(), 10000, _checker, __FILE__, __LINE__);
}

/*static*/ void UiStats::DeviceToken::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const BYTE* mobileToken; size_t szMobileToken; _parser0._parseVarBlock(mobileToken, szMobileToken);  /*mobileToken*/
	AtfValidator::validateIntMax(_descr, "mobileToken", szMobileToken, 10000, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_UISTATS_SAVE_USER_STATS
//=================================================================

UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::Protocol_MSG_UISTATS_SAVE_USER_STATS()
{
	clear();
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::clear()
{
	eventData.clear();
}

bool UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::equals(const Protocol_MSG_UISTATS_SAVE_USER_STATS& _o) const
{
	return Atf::atfPStringEquals(eventData, _o.eventData);
}

bool UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_SAVE_USER_STATS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_SAVE_USER_STATS*)_other));
}

const char *UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_SAVE_USER_STATS).append(")");
	_buf.append(',');
	_buf.append("eventData=");
	_buf.append(eventData);
	return _buf.c_str();
}

const char *UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_SAVE_USER_STATS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("eventData", eventData, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("eventData"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, eventData)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(eventData);
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(eventData);
}

const char *UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("eventData", eventData);
	return _buf.c_str();
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("eventData", eventData);
}

/*static*/ void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_SAVE_USER_STATS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString eventData; _jparser.validateByNameThrow("eventData", eventData);
	AtfValidator::validateIntMax(_descr, "eventData", eventData.length(), 100000, _checker, __FILE__, __LINE__);
}

/*static*/ void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_SAVE_USER_STATS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "eventData"); size_t szEventData = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "eventData", szEventData, 100000, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY
//=================================================================

UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY()
{
	clear();
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::equals(const Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_SAVE_USER_STATS_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY*)_other));
}

const char *UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_SAVE_USER_STATS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_SAVE_USER_STATS_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if (errCode)
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
}

const char *UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if (errCode)
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if (errCode)
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_SAVE_USER_STATS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void UiStats::cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_SAVE_USER_STATS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP()
{
	clear();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::clear()
{
	deviceId = 0;
	deviceToken.clear();
	oldDeviceId = 0;
	notificationType = 0;
	deviceLocale = 0;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP& _o) const
{
	return deviceId == _o.deviceId &&
		deviceToken.equals(_o.deviceToken) &&
		oldDeviceId == _o.oldDeviceId &&
		notificationType == _o.notificationType &&
		deviceLocale == _o.deviceLocale;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP*)_other));
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP).append(")");
	_buf.append(',');
	_buf.append("deviceId=");
	_buf.appendUint(deviceId);
	_buf.append(',');
	_buf.append("deviceToken=");
	deviceToken.toTraceString(_buf);
	_buf.append(',');
	_buf.append("oldDeviceId=");
	_buf.appendUint(oldDeviceId);
	_buf.append(',');
	_buf.append("notificationType=");
	_buf.appendUint(notificationType);
	_buf.append(',');
	_buf.append("deviceLocale=");
	_buf.appendUint(deviceLocale);
	return _buf.c_str();
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("deviceId", deviceId, _buf);
	deviceToken.toXmlString("deviceToken", _buf);
	Atf::XmlElement::encodeAsXmlElement("oldDeviceId", oldDeviceId, _buf);
	Atf::XmlElement::encodeAsXmlElement("notificationType", notificationType, _buf);
	Atf::XmlElement::encodeAsXmlElement("deviceLocale", deviceLocale, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("deviceId"))
			{
				deviceId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("deviceToken"))
			{
				if(!Atf::AtfTempl< DeviceToken >::FromXmlString(_value, deviceToken)) return false;
			}
			else if (_element.equals("oldDeviceId"))
			{
				oldDeviceId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("notificationType"))
			{
				notificationType = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("deviceLocale"))
			{
				deviceLocale = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(deviceId);
	deviceToken.composeMsg(_msg, _ignoreJSON);
	_msg.composeUINT32(oldDeviceId);
	_msg.composeUINT32(notificationType);
	_msg.composeUINT32(deviceLocale);
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(deviceId);
	deviceToken.parseMsg(_parser);
	_parser.parseUINT32(oldDeviceId);
	_parser.parseUINT32(notificationType);
	_parser.parseUINT32(deviceLocale);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("deviceId", deviceId);
	_jsonstr.compose("deviceToken", deviceToken);
	_jsonstr.compose("oldDeviceId", oldDeviceId);
	_jsonstr.compose("notificationType", notificationType);
	_jsonstr.compose("deviceLocale", deviceLocale);
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("deviceId", deviceId);
	_jparser.parseByNameThrow("deviceToken", deviceToken);
	_jparser.parseByNameThrow("oldDeviceId", oldDeviceId);
	_jparser.parseByNameThrow("notificationType", notificationType);
	_jparser.parseByNameThrow("deviceLocale", deviceLocale);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 deviceId; _jparser.validateByNameThrow("deviceId", deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	DeviceToken deviceToken; _jparser.validateByNameThrow("deviceToken", deviceToken);
	UINT32 oldDeviceId; _jparser.validateByNameThrow("oldDeviceId", oldDeviceId);
	AtfValidator::validateInt(_descr, "oldDeviceId", oldDeviceId, _checker, __FILE__, __LINE__);
	UINT32 notificationType; _jparser.validateByNameThrow("notificationType", notificationType);
	AtfValidator::validateIntMax(_descr, "notificationType", notificationType, 65535, _checker, __FILE__, __LINE__);
	UINT32 deviceLocale; _jparser.validateByNameThrow("deviceLocale", deviceLocale);
	AtfValidator::validateIntMax(_descr, "deviceLocale", deviceLocale, MAX_LOCALES, _checker, __FILE__, __LINE__);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 deviceId; _parser.parseUINT32(deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	DeviceToken::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("deviceToken"), _fieldsWithUnparsedContent);
	UINT32 oldDeviceId; _parser.parseUINT32(oldDeviceId);
	AtfValidator::validateInt(_descr, "oldDeviceId", oldDeviceId, _checker, __FILE__, __LINE__);
	UINT32 notificationType; _parser.parseUINT32(notificationType);
	AtfValidator::validateIntMax(_descr, "notificationType", notificationType, 65535, _checker, __FILE__, __LINE__);
	UINT32 deviceLocale; _parser.parseUINT32(deviceLocale);
	AtfValidator::validateIntMax(_descr, "deviceLocale", deviceLocale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY()
{
	clear();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY*)_other));
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if (errCode)
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if (errCode)
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if (errCode)
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2()
{
	clear();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::clear()
{
	deviceId = 0;
	deviceToken.clear();
	oldDeviceId = 0;
	notificationType = 0;
	deviceLocale = 0;
	platformId = 0;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2& _o) const
{
	return deviceId == _o.deviceId &&
		deviceToken.equals(_o.deviceToken) &&
		oldDeviceId == _o.oldDeviceId &&
		notificationType == _o.notificationType &&
		deviceLocale == _o.deviceLocale &&
		platformId == _o.platformId;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2 != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2*)_other));
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2).append(")");
	_buf.append(',');
	_buf.append("deviceId=");
	_buf.appendUint(deviceId);
	_buf.append(',');
	_buf.append("deviceToken=");
	deviceToken.toTraceString(_buf);
	_buf.append(',');
	_buf.append("oldDeviceId=");
	_buf.appendUint(oldDeviceId);
	_buf.append(',');
	_buf.append("notificationType=");
	_buf.appendUint(notificationType);
	_buf.append(',');
	_buf.append("deviceLocale=");
	_buf.appendUint(deviceLocale);
	_buf.append(',');
	_buf.append("platformId=");
	_buf.appendUint(platformId);
	return _buf.c_str();
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("deviceId", deviceId, _buf);
	deviceToken.toXmlString("deviceToken", _buf);
	Atf::XmlElement::encodeAsXmlElement("oldDeviceId", oldDeviceId, _buf);
	Atf::XmlElement::encodeAsXmlElement("notificationType", notificationType, _buf);
	Atf::XmlElement::encodeAsXmlElement("deviceLocale", deviceLocale, _buf);
	Atf::XmlElement::encodeAsXmlElement("platformId", platformId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("deviceId"))
			{
				deviceId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("deviceToken"))
			{
				if(!Atf::AtfTempl< DeviceToken >::FromXmlString(_value, deviceToken)) return false;
			}
			else if (_element.equals("oldDeviceId"))
			{
				oldDeviceId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("notificationType"))
			{
				notificationType = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("deviceLocale"))
			{
				deviceLocale = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("platformId"))
			{
				platformId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(deviceId);
	deviceToken.composeMsg(_msg, _ignoreJSON);
	_msg.composeUINT32(oldDeviceId);
	_msg.composeUINT32(notificationType);
	_msg.composeUINT32(deviceLocale);
	_msg.composeUINT32(platformId);
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(deviceId);
	deviceToken.parseMsg(_parser);
	_parser.parseUINT32(oldDeviceId);
	_parser.parseUINT32(notificationType);
	_parser.parseUINT32(deviceLocale);
	_parser.parseUINT32(platformId);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("deviceId", deviceId);
	_jsonstr.compose("deviceToken", deviceToken);
	_jsonstr.compose("oldDeviceId", oldDeviceId);
	_jsonstr.compose("notificationType", notificationType);
	_jsonstr.compose("deviceLocale", deviceLocale);
	_jsonstr.compose("platformId", platformId);
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("deviceId", deviceId);
	_jparser.parseByNameThrow("deviceToken", deviceToken);
	_jparser.parseByNameThrow("oldDeviceId", oldDeviceId);
	_jparser.parseByNameThrow("notificationType", notificationType);
	_jparser.parseByNameThrow("deviceLocale", deviceLocale);
	_jparser.parseByNameThrow("platformId", platformId);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 deviceId; _jparser.validateByNameThrow("deviceId", deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	DeviceToken deviceToken; _jparser.validateByNameThrow("deviceToken", deviceToken);
	UINT32 oldDeviceId; _jparser.validateByNameThrow("oldDeviceId", oldDeviceId);
	AtfValidator::validateInt(_descr, "oldDeviceId", oldDeviceId, _checker, __FILE__, __LINE__);
	UINT32 notificationType; _jparser.validateByNameThrow("notificationType", notificationType);
	AtfValidator::validateIntMax(_descr, "notificationType", notificationType, 65535, _checker, __FILE__, __LINE__);
	UINT32 deviceLocale; _jparser.validateByNameThrow("deviceLocale", deviceLocale);
	AtfValidator::validateIntMax(_descr, "deviceLocale", deviceLocale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	UINT32 platformId; _jparser.validateByNameThrow("platformId", platformId);
	AtfValidator::validateIntMax(_descr, "platformId", platformId, Client_Last, _checker, __FILE__, __LINE__);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 deviceId; _parser.parseUINT32(deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	DeviceToken::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("deviceToken"), _fieldsWithUnparsedContent);
	UINT32 oldDeviceId; _parser.parseUINT32(oldDeviceId);
	AtfValidator::validateInt(_descr, "oldDeviceId", oldDeviceId, _checker, __FILE__, __LINE__);
	UINT32 notificationType; _parser.parseUINT32(notificationType);
	AtfValidator::validateIntMax(_descr, "notificationType", notificationType, 65535, _checker, __FILE__, __LINE__);
	UINT32 deviceLocale; _parser.parseUINT32(deviceLocale);
	AtfValidator::validateIntMax(_descr, "deviceLocale", deviceLocale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	UINT32 platformId; _parser.parseUINT32(platformId);
	AtfValidator::validateIntMax(_descr, "platformId", platformId, Client_Last, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY()
{
	clear();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY*)_other));
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if (errCode)
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if (errCode)
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if (errCode)
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED()
{
	clear();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::clear()
{
	deviceId = 0;
	platformId = 0;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED& _o) const
{
	return deviceId == _o.deviceId &&
		platformId == _o.platformId;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED*)_other));
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED).append(")");
	_buf.append(',');
	_buf.append("deviceId=");
	_buf.appendUint(deviceId);
	_buf.append(',');
	_buf.append("platformId=");
	_buf.appendUint(platformId);
	return _buf.c_str();
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("deviceId", deviceId, _buf);
	Atf::XmlElement::encodeAsXmlElement("platformId", platformId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("deviceId"))
			{
				deviceId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("platformId"))
			{
				platformId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(deviceId);
	_msg.composeUINT32(platformId);
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(deviceId);
	_parser.parseUINT32(platformId);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("deviceId", deviceId);
	_jsonstr.compose("platformId", platformId);
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("deviceId", deviceId);
	_jparser.parseByNameThrow("platformId", platformId);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 deviceId; _jparser.validateByNameThrow("deviceId", deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	UINT32 platformId; _jparser.validateByNameThrow("platformId", platformId);
	AtfValidator::validateIntMax(_descr, "platformId", platformId, Client_Last, _checker, __FILE__, __LINE__);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 deviceId; _parser.parseUINT32(deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	UINT32 platformId; _parser.parseUINT32(platformId);
	AtfValidator::validateIntMax(_descr, "platformId", platformId, Client_Last, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY()
{
	clear();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY*)_other));
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if (errCode)
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if (errCode)
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if (errCode)
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_RATE_ME
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::Protocol_MSG_UISTATS_MOBILE_RATE_ME()
{
	clear();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::clear()
{
	rating = 0;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::equals(const Protocol_MSG_UISTATS_MOBILE_RATE_ME& _o) const
{
	return rating == _o.rating;
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_MOBILE_RATE_ME != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_MOBILE_RATE_ME*)_other));
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_RATE_ME).append(")");
	_buf.append(',');
	_buf.append("rating=");
	_buf.appendInt(rating);
	return _buf.c_str();
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_MOBILE_RATE_ME).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("rating", rating, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("rating"))
			{
				rating = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT32(rating);
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(rating);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("rating", rating);
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("rating", rating);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_RATE_ME";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 rating; _jparser.validateByNameThrow("rating", rating);
	AtfValidator::validateIntRange(_descr, "rating", rating, 0, 5, _checker, __FILE__, __LINE__);
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_RATE_ME";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 rating; _parser.parseINT32(rating);
	AtfValidator::validateIntRange(_descr, "rating", rating, 0, 5, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY
//=================================================================

UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY()
{
	clear();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::equals(const Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr);
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_MOBILE_RATE_ME_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY*)_other));
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_RATE_ME_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	return _buf.c_str();
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_MOBILE_RATE_ME_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if (errCode)
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
}

const char *UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if (errCode)
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	return _buf.c_str();
}

void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if (errCode)
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_RATE_ME_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
}

/*static*/ void UiStats::cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_RATE_ME_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION
//=================================================================

UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION()
{
	clear();
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::clear()
{
	deviceId = 0;
	deviceToken.clear();
	installId.clear();
	platformId = 0;
	siteId = 0;
	notificationType = 0;
	deviceLocale = 0;
	brandId = 0;
	appKey.clear();
}

bool UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION& _o) const
{
	return deviceId == _o.deviceId &&
		deviceToken.equals(_o.deviceToken) &&
		Atf::atfPStringEquals(installId, _o.installId) &&
		platformId == _o.platformId &&
		siteId == _o.siteId &&
		notificationType == _o.notificationType &&
		deviceLocale == _o.deviceLocale &&
		brandId == _o.brandId &&
		Atf::atfPStringEquals(appKey, _o.appKey);
}

bool UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_MOBILE_DEVICE_REGISTRATION != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION*)_other));
}

const char *UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_REGISTRATION).append(")");
	_buf.append(',');
	_buf.append("deviceId=");
	_buf.appendUint(deviceId);
	_buf.append(',');
	_buf.append("deviceToken=");
	deviceToken.toTraceString(_buf);
	_buf.append(',');
	_buf.append("installId=");
	_buf.append(installId);
	_buf.append(',');
	_buf.append("platformId=");
	_buf.appendUint(platformId);
	_buf.append(',');
	_buf.append("siteId=");
	_buf.appendUint(siteId);
	_buf.append(',');
	_buf.append("notificationType=");
	_buf.appendUint(notificationType);
	_buf.append(',');
	_buf.append("deviceLocale=");
	_buf.appendUint(deviceLocale);
	_buf.append(',');
	_buf.append("brandId=");
	_buf.appendUint(brandId);
	_buf.append(',');
	_buf.append("appKey=");
	_buf.append(appKey);
	return _buf.c_str();
}

const char *UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_MOBILE_DEVICE_REGISTRATION).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("deviceId", deviceId, _buf);
	deviceToken.toXmlString("deviceToken", _buf);
	Atf::XmlElement::encodeAsXmlElement("installId", installId, _buf);
	Atf::XmlElement::encodeAsXmlElement("platformId", platformId, _buf);
	Atf::XmlElement::encodeAsXmlElement("siteId", siteId, _buf);
	Atf::XmlElement::encodeAsXmlElement("notificationType", notificationType, _buf);
	Atf::XmlElement::encodeAsXmlElement("deviceLocale", deviceLocale, _buf);
	Atf::XmlElement::encodeAsXmlElement("brandId", brandId, _buf);
	Atf::XmlElement::encodeAsXmlElement("appKey", appKey, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("deviceId"))
			{
				deviceId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("deviceToken"))
			{
				if(!Atf::AtfTempl< DeviceToken >::FromXmlString(_value, deviceToken)) return false;
			}
			else if (_element.equals("installId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, installId)) return false;
			}
			else if (_element.equals("platformId"))
			{
				platformId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("siteId"))
			{
				siteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("notificationType"))
			{
				notificationType = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("deviceLocale"))
			{
				deviceLocale = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("brandId"))
			{
				brandId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("appKey"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, appKey)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(deviceId);
	deviceToken.composeMsg(_msg, _ignoreJSON);
	_msg.composeString(installId);
	_msg.composeUINT32(platformId);
	_msg.composeUINT32(siteId);
	_msg.composeUINT32(notificationType);
	_msg.composeUINT32(deviceLocale);
	_msg.composeUINT32(brandId);
	_msg.composeString(appKey);
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(deviceId);
	deviceToken.parseMsg(_parser);
	_parser.parseStringP(installId);
	_parser.parseUINT32(platformId);
	_parser.parseUINT32(siteId);
	_parser.parseUINT32(notificationType);
	_parser.parseUINT32(deviceLocale);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(brandId);
	if(_parser.parseEnded()) return;
	_parser.parseStringP(appKey);
}

const char *UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("deviceId", deviceId);
	_jsonstr.compose("deviceToken", deviceToken);
	_jsonstr.compose("installId", installId);
	_jsonstr.compose("platformId", platformId);
	_jsonstr.compose("siteId", siteId);
	_jsonstr.compose("notificationType", notificationType);
	_jsonstr.compose("deviceLocale", deviceLocale);
	_jsonstr.compose("brandId", brandId);
	_jsonstr.compose("appKey", appKey);
	return _buf.c_str();
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("deviceId", deviceId);
	_jparser.parseByNameThrow("deviceToken", deviceToken);
	_jparser.parseByNameThrow("installId", installId);
	_jparser.parseByNameThrow("platformId", platformId);
	_jparser.parseByNameThrow("siteId", siteId);
	_jparser.parseByNameThrow("notificationType", notificationType);
	_jparser.parseByNameThrow("deviceLocale", deviceLocale);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("brandId", brandId);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("appKey", appKey);
}

/*static*/ void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_REGISTRATION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 deviceId; _jparser.validateByNameThrow("deviceId", deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	DeviceToken deviceToken; _jparser.validateByNameThrow("deviceToken", deviceToken);
	PString installId; _jparser.validateByNameThrow("installId", installId);
	AtfValidator::validateIntMax(_descr, "installId", installId.length(), 10000, _checker, __FILE__, __LINE__);
	UINT32 platformId; _jparser.validateByNameThrow("platformId", platformId);
	AtfValidator::validateIntMax(_descr, "platformId", platformId, Client_Last, _checker, __FILE__, __LINE__);
	UINT32 siteId; _jparser.validateByNameThrow("siteId", siteId);
	AtfValidator::validateIntRange(_descr, "siteId", siteId, PokerStars_SiteUnknown, PokerStars_Last, _checker, __FILE__, __LINE__);
	UINT32 notificationType; _jparser.validateByNameThrow("notificationType", notificationType);
	AtfValidator::validateIntMax(_descr, "notificationType", notificationType, 65535, _checker, __FILE__, __LINE__);
	UINT32 deviceLocale; _jparser.validateByNameThrow("deviceLocale", deviceLocale);
	AtfValidator::validateIntMax(_descr, "deviceLocale", deviceLocale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 brandId; _jparser.validateByNameThrow("brandId", brandId);
	AtfValidator::validateIntRange(_descr, "brandId", brandId, BrandType_None, BrandType_Last, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	PString appKey; _jparser.validateByNameThrow("appKey", appKey);
	AtfValidator::validateIntMax(_descr, "appKey", appKey.length(), 65, _checker, __FILE__, __LINE__);
}

/*static*/ void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_REGISTRATION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 deviceId; _parser.parseUINT32(deviceId);
	AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	DeviceToken::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("deviceToken"), _fieldsWithUnparsedContent);
	_parser.parseStringN(_dummy, 0, "installId"); size_t szInstallId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "installId", szInstallId, 10000, _checker, __FILE__, __LINE__);
	UINT32 platformId; _parser.parseUINT32(platformId);
	AtfValidator::validateIntMax(_descr, "platformId", platformId, Client_Last, _checker, __FILE__, __LINE__);
	UINT32 siteId; _parser.parseUINT32(siteId);
	AtfValidator::validateIntRange(_descr, "siteId", siteId, PokerStars_SiteUnknown, PokerStars_Last, _checker, __FILE__, __LINE__);
	UINT32 notificationType; _parser.parseUINT32(notificationType);
	AtfValidator::validateIntMax(_descr, "notificationType", notificationType, 65535, _checker, __FILE__, __LINE__);
	UINT32 deviceLocale; _parser.parseUINT32(deviceLocale);
	AtfValidator::validateIntMax(_descr, "deviceLocale", deviceLocale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT32 brandId; _parser.parseUINT32(brandId);
	AtfValidator::validateIntRange(_descr, "brandId", brandId, BrandType_None, BrandType_Last, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	_parser.parseStringN(_dummy, 0, "appKey"); size_t szAppKey = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "appKey", szAppKey, 65, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY
//=================================================================

UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY()
{
	clear();
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::clear()
{
	errCode = 0;
	errDescr.clear();
	deviceId = 0;
}

bool UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::equals(const Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(errDescr, _o.errDescr) &&
		deviceId == _o.deviceId;
}

bool UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY*)_other));
}

const char *UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("deviceId=");
		_buf.appendUint(deviceId);
	}
	return _buf.c_str();
}

const char *UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if (errCode)
	{
		Atf::XmlElement::encodeAsXmlElement("errDescr", errDescr, _buf);
	}
	else
	{
		Atf::XmlElement::encodeAsXmlElement("deviceId", deviceId, _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errDescr)) return false;
			}
			else if (_element.equals("deviceId"))
			{
				deviceId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeUINT32(deviceId);
	}
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseUINT32(deviceId);
	}
}

const char *UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if (errCode)
	{
		_jsonstr.compose("errDescr", errDescr);
	}
	else
	{
		_jsonstr.compose("deviceId", deviceId);
	}
	return _buf.c_str();
}

void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if (errCode)
	{
		_jparser.parseByNameThrow("errDescr", errDescr);
	}
	else
	{
		_jparser.parseByNameThrow("deviceId", deviceId);
	}
}

/*static*/ void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode = 0;
	_jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		PString errDescr; _jparser.validateByNameThrow("errDescr", errDescr);
		AtfValidator::validateInt(_descr, "errDescr", errDescr.length(), _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 deviceId; _jparser.validateByNameThrow("deviceId", deviceId);
		AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	}
}

/*static*/ void UiStats::cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 deviceId; _parser.parseUINT32(deviceId);
		AtfValidator::validateInt(_descr, "deviceId", deviceId, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ Atf::MessageProtocol* UiStats::ProtocolFactory::createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId)
{
	Atf::MessageProtocol *_obj = NULL;

	if(!strcmp(_nameSpace, "cli"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_SAVE_USER_STATS: _obj = new cli::Protocol_MSG_UISTATS_SAVE_USER_STATS(); break;
			case MSG_UISTATS_SAVE_USER_STATS_REPLY: _obj = new cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY(); break;
		}
	}
	else if(!strcmp(_nameSpace, "cli_mobile"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED: _obj = new cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED(); break;
			case MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY: _obj = new cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY(); break;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP: _obj = new cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP(); break;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2: _obj = new cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2(); break;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY: _obj = new cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY(); break;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY: _obj = new cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY(); break;
			case MSG_UISTATS_MOBILE_RATE_ME: _obj = new cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME(); break;
			case MSG_UISTATS_MOBILE_RATE_ME_REPLY: _obj = new cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY(); break;
		}
	}
	else if(!strcmp(_nameSpace, "cli_mobileUnauth"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_MOBILE_DEVICE_REGISTRATION: _obj = new cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION(); break;
			case MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY: _obj = new cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY(); break;
		}
	}
	
	return _obj;
}

/* static */ bool UiStats::ProtocolFactory::validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "cli"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_SAVE_USER_STATS: cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_SAVE_USER_STATS_REPLY: cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "cli_mobile"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_RATE_ME: cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_RATE_ME_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "cli_mobileUnauth"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_MOBILE_DEVICE_REGISTRATION: cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY: cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

/* static */ bool UiStats::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "cli"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_SAVE_USER_STATS: cli::Protocol_MSG_UISTATS_SAVE_USER_STATS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_SAVE_USER_STATS_REPLY: cli::Protocol_MSG_UISTATS_SAVE_USER_STATS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "cli_mobile"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_LAST_ACCESSED_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_2_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_DEVICE_OWNERSHIP_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_RATE_ME: cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_RATE_ME_REPLY: cli_mobile::Protocol_MSG_UISTATS_MOBILE_RATE_ME_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "cli_mobileUnauth"))
	{
		switch(_msgId)
		{
			case MSG_UISTATS_MOBILE_DEVICE_REGISTRATION: cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY: cli_mobileUnauth::Protocol_MSG_UISTATS_MOBILE_DEVICE_REGISTRATION_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

