/**
 * tablehh_thin.cpp
 *
 * This file was auto-generated from tablehh.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin tablehh.txt
 */
 
#include "tablehh_thin.h"

//=================================================================
//                    PlayerAndBounty
//=================================================================

HandHist::content::PlayerAndBounty::PlayerAndBounty()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

HandHist::content::PlayerAndBounty::PlayerAndBounty(PlayerAndBounty&& _o)
	: userId(std::move(_o.userId))
	, bounty(std::move(_o.bounty))
	, tournId(std::move(_o.tournId))
	, ticketAdmission(std::move(_o.ticketAdmission))
	, tchips(std::move(_o.tchips))
{
}

HandHist::content::PlayerAndBounty& HandHist::content::PlayerAndBounty::operator=(PlayerAndBounty&& _o)
{
	if(this != &_o)
	{
		userId = std::move(_o.userId);
		bounty = std::move(_o.bounty);
		tournId = std::move(_o.tournId);
		ticketAdmission = std::move(_o.ticketAdmission);
		tchips = std::move(_o.tchips);
	}
	return *this;
}

#endif

void HandHist::content::PlayerAndBounty::clear()
{
	userId.clear();
	bounty = 0;
	tournId = 0;
	ticketAdmission.clear();
	tchips = 0;
}

bool HandHist::content::PlayerAndBounty::equals(const PlayerAndBounty& _o) const
{
	return userId.equals(_o.userId) &&
		bounty == _o.bounty &&
		tournId == _o.tournId &&
		ticketAdmission.equals(_o.ticketAdmission) &&
		tchips == _o.tchips;
}

const char *HandHist::content::PlayerAndBounty::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("bounty=");
	_buf.appendInt64(bounty);
	_buf.append(',');
	_buf.append("tournId=");
	_buf.appendUint64(tournId);
	_buf.append(',');
	_buf.append("ticketAdmission=");
	_buf.append(ticketAdmission);
	_buf.append(',');
	_buf.append("tchips=");
	_buf.appendUint(tchips);
	_buf.append('}');
	return _buf.c_str();
}

void HandHist::content::PlayerAndBounty::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PlayerAndBounty())) // not empty
	{
		_body.composeString(userId);
		_body.composeINT64(bounty);
		_body.composeUINT64(tournId);
		_body.composeString(ticketAdmission);
		_body.composeUINT32(tchips);
	}

	_msg.composeMsgBody(_body);
}

void HandHist::content::PlayerAndBounty::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(userId);
	_parser0.parseINT64(bounty);
	_parser0.parseUINT64(tournId);
	_parser0.parseStringP(ticketAdmission);
	_parser0.parseUINT32(tchips);
}

/*static*/ void HandHist::content::PlayerAndBounty::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	INT64 bounty; _parser0.parseINT64(bounty);
	AtfValidator::validateInt(_descr, "bounty", bounty, _checker, __FILE__, __LINE__);
	UINT64 tournId; _parser0.parseUINT64(tournId);
	AtfValidator::validateUint(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "ticketAdmission"); size_t szTicketAdmission = strlen(_dummy);
	AtfValidator::validateInt(_descr, "ticketAdmission", szTicketAdmission, _checker, __FILE__, __LINE__);
	UINT32 tchips; _parser0.parseUINT32(tchips);
	AtfValidator::validateInt(_descr, "tchips", tchips, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    BountyWon
//=================================================================

HandHist::content::BountyWon::BountyWon()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

HandHist::content::BountyWon::BountyWon(BountyWon&& _o)
	: bountyWinners(std::move(_o.bountyWinners))
{
}

HandHist::content::BountyWon& HandHist::content::BountyWon::operator=(BountyWon&& _o)
{
	if(this != &_o)
	{
		bountyWinners = std::move(_o.bountyWinners);
	}
	return *this;
}

#endif

void HandHist::content::BountyWon::clear()
{
	bountyWinners.clear();
}

bool HandHist::content::BountyWon::equals(const BountyWon& _o) const
{
	return bountyWinners.equals(_o.bountyWinners);
}

const char *HandHist::content::BountyWon::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("bountyWinners=");
	bountyWinners.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void HandHist::content::BountyWon::composeMsg(CommMsgBody& _msg) const
{
	bountyWinners.composeMsg(_msg);
}

void HandHist::content::BountyWon::parseMsg(CommMsgParser& _parser)
{
	bountyWinners.parseMsg(_parser);
}

/*static*/ void HandHist::content::BountyWon::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szBountyWinners = ThinAtf::LAtfVector< PlayerAndBounty , 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("bountyWinners"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "bountyWinners", szBountyWinners, _checker, __FILE__, __LINE__);
}

