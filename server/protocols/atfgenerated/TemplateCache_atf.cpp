/**
 * TemplateCache_atf.cpp
 *
 * This file was auto-generated from TemplateCache_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: TemplateCache_atf.txt
 */
 
#include "TemplateCache_atf.h"

//=================================================================
//                Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE()
{
	clear();
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::clear()
{
	category = 0;
	subCategory = 0;
	clientPlatformId = 0;
	clientType = 0;
	clientDevice = 0;
	clientSiteId = 0;
	locale = 0;
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::equals(const Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE& _o) const
{
	return category == _o.category &&
		subCategory == _o.subCategory &&
		clientPlatformId == _o.clientPlatformId &&
		clientType == _o.clientType &&
		clientDevice == _o.clientDevice &&
		clientSiteId == _o.clientSiteId &&
		locale == _o.locale;
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::equals(Atf::MessageProtocol* _other) const
{
	if (TS_Q_I18N_GET_TRANSLATED_MESSAGE != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE*)_other));
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_Q_I18N_GET_TRANSLATED_MESSAGE).append(")");
	_buf.append(',');
	_buf.append("category=");
	_buf.appendUint(category);
	_buf.append(',');
	_buf.append("subCategory=");
	_buf.appendUint(subCategory);
	_buf.append(',');
	_buf.append("clientPlatformId=");
	_buf.appendUint(clientPlatformId);
	_buf.append(',');
	_buf.append("clientType=");
	_buf.appendUint(clientType);
	_buf.append(',');
	_buf.append("clientDevice=");
	_buf.appendUint(clientDevice);
	_buf.append(',');
	_buf.append("clientSiteId=");
	_buf.appendUint(clientSiteId);
	_buf.append(',');
	_buf.append("locale=");
	_buf.appendUint(locale);
	return _buf.c_str();
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(TS_Q_I18N_GET_TRANSLATED_MESSAGE).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("category", category, _buf);
	Atf::XmlElement::encodeAsXmlElement("subCategory", subCategory, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientPlatformId", clientPlatformId, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientType", clientType, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientDevice", clientDevice, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientSiteId", clientSiteId, _buf);
	Atf::XmlElement::encodeAsXmlElement("locale", locale, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("category"))
			{
				category = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("subCategory"))
			{
				subCategory = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("clientPlatformId"))
			{
				clientPlatformId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("clientType"))
			{
				clientType = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("clientDevice"))
			{
				clientDevice = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("clientSiteId"))
			{
				clientSiteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("locale"))
			{
				locale = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(category);
	_msg.composeUINT32(subCategory);
	_msg.composeUINT32(clientPlatformId);
	_msg.composeUINT32(clientType);
	_msg.composeUINT32(clientDevice);
	_msg.composeUINT32(clientSiteId);
	_msg.composeUINT32(locale);
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(category);
	_parser.parseUINT32(subCategory);
	_parser.parseUINT32(clientPlatformId);
	_parser.parseUINT32(clientType);
	_parser.parseUINT32(clientDevice);
	_parser.parseUINT32(clientSiteId);
	_parser.parseUINT32(locale);
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("category", category);
	_jsonstr.compose("subCategory", subCategory);
	_jsonstr.compose("clientPlatformId", clientPlatformId);
	_jsonstr.compose("clientType", clientType);
	_jsonstr.compose("clientDevice", clientDevice);
	_jsonstr.compose("clientSiteId", clientSiteId);
	_jsonstr.compose("locale", locale);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("category", category);
	_jparser.parseByNameThrow("subCategory", subCategory);
	_jparser.parseByNameThrow("clientPlatformId", clientPlatformId);
	_jparser.parseByNameThrow("clientType", clientType);
	_jparser.parseByNameThrow("clientDevice", clientDevice);
	_jparser.parseByNameThrow("clientSiteId", clientSiteId);
	_jparser.parseByNameThrow("locale", locale);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_Q_I18N_GET_TRANSLATED_MESSAGE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 category; _jparser.validateByNameThrow("category", category);
	AtfValidator::validateIntRange(_descr, "category", category, eUserBlocking, eTemplateCacheMessageCategory_Last, _checker, __FILE__, __LINE__);
	UINT32 subCategory; _jparser.validateByNameThrow("subCategory", subCategory);
	AtfValidator::validateIntMax(_descr, "subCategory", subCategory, 2000000000, _checker, __FILE__, __LINE__);
	UINT32 clientPlatformId; _jparser.validateByNameThrow("clientPlatformId", clientPlatformId);
	AtfValidator::validateIntRange(_descr, "clientPlatformId", clientPlatformId, Client_UnknownPlatform, Client_Last, _checker, __FILE__, __LINE__);
	UINT32 clientType; _jparser.validateByNameThrow("clientType", clientType);
	AtfValidator::validateIntRange(_descr, "clientType", clientType, ClientType_Unknown, ClientType_Last, _checker, __FILE__, __LINE__);
	UINT32 clientDevice; _jparser.validateByNameThrow("clientDevice", clientDevice);
	AtfValidator::validateIntRange(_descr, "clientDevice", clientDevice, ClientDevice_Unknown, ClientDevice_Last, _checker, __FILE__, __LINE__);
	UINT32 clientSiteId; _jparser.validateByNameThrow("clientSiteId", clientSiteId);
	AtfValidator::validateIntRange(_descr, "clientSiteId", clientSiteId, PokerStars_SiteUnknown, PokerStars_Last, _checker, __FILE__, __LINE__);
	UINT32 locale; _jparser.validateByNameThrow("locale", locale);
	AtfValidator::validateIntMax(_descr, "locale", locale, MAX_LOCALES, _checker, __FILE__, __LINE__);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_Q_I18N_GET_TRANSLATED_MESSAGE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 category; _parser.parseUINT32(category);
	AtfValidator::validateIntRange(_descr, "category", category, eUserBlocking, eTemplateCacheMessageCategory_Last, _checker, __FILE__, __LINE__);
	UINT32 subCategory; _parser.parseUINT32(subCategory);
	AtfValidator::validateIntMax(_descr, "subCategory", subCategory, 2000000000, _checker, __FILE__, __LINE__);
	UINT32 clientPlatformId; _parser.parseUINT32(clientPlatformId);
	AtfValidator::validateIntRange(_descr, "clientPlatformId", clientPlatformId, Client_UnknownPlatform, Client_Last, _checker, __FILE__, __LINE__);
	UINT32 clientType; _parser.parseUINT32(clientType);
	AtfValidator::validateIntRange(_descr, "clientType", clientType, ClientType_Unknown, ClientType_Last, _checker, __FILE__, __LINE__);
	UINT32 clientDevice; _parser.parseUINT32(clientDevice);
	AtfValidator::validateIntRange(_descr, "clientDevice", clientDevice, ClientDevice_Unknown, ClientDevice_Last, _checker, __FILE__, __LINE__);
	UINT32 clientSiteId; _parser.parseUINT32(clientSiteId);
	AtfValidator::validateIntRange(_descr, "clientSiteId", clientSiteId, PokerStars_SiteUnknown, PokerStars_Last, _checker, __FILE__, __LINE__);
	UINT32 locale; _parser.parseUINT32(locale);
	AtfValidator::validateIntMax(_descr, "locale", locale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE()
{
	clear();
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::clear()
{
	errCode = 0;
	msg.clear();
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::equals(const Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(msg, _o.msg);
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::equals(Atf::MessageProtocol* _other) const
{
	if (TS_A_I18N_GET_TRANSLATED_MESSAGE != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE*)_other));
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_A_I18N_GET_TRANSLATED_MESSAGE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("msg=");
	_buf.append(msg);
	return _buf.c_str();
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(TS_A_I18N_GET_TRANSLATED_MESSAGE).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	Atf::XmlElement::encodeAsXmlElement("msg", msg, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("msg"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, msg)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(msg);
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringP(msg);
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	_jsonstr.compose("msg", msg);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	_jparser.parseByNameThrow("msg", msg);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_A_I18N_GET_TRANSLATED_MESSAGE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode; _jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	PString msg; _jparser.validateByNameThrow("msg", msg);
	AtfValidator::validateInt(_descr, "msg", msg.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_A_I18N_GET_TRANSLATED_MESSAGE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode; _parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "msg"); size_t szMsg = strlen(_dummy);
	AtfValidator::validateInt(_descr, "msg", szMsg, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR()
{
	clear();
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::clear()
{
	errorDescr.clear();
	clientPlatformId = 0;
	clientType = 0;
	clientDevice = 0;
	clientSiteId = 0;
	locale = 0;
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::equals(const Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR& _o) const
{
	return Atf::atfPStringEquals(errorDescr, _o.errorDescr) &&
		clientPlatformId == _o.clientPlatformId &&
		clientType == _o.clientType &&
		clientDevice == _o.clientDevice &&
		clientSiteId == _o.clientSiteId &&
		locale == _o.locale;
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::equals(Atf::MessageProtocol* _other) const
{
	if (TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR*)_other));
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR).append(")");
	_buf.append(',');
	_buf.append("errorDescr=");
	_buf.append(errorDescr);
	_buf.append(',');
	_buf.append("clientPlatformId=");
	_buf.appendUint(clientPlatformId);
	_buf.append(',');
	_buf.append("clientType=");
	_buf.appendUint(clientType);
	_buf.append(',');
	_buf.append("clientDevice=");
	_buf.appendUint(clientDevice);
	_buf.append(',');
	_buf.append("clientSiteId=");
	_buf.appendUint(clientSiteId);
	_buf.append(',');
	_buf.append("locale=");
	_buf.appendUint(locale);
	return _buf.c_str();
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errorDescr", errorDescr, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientPlatformId", clientPlatformId, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientType", clientType, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientDevice", clientDevice, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientSiteId", clientSiteId, _buf);
	Atf::XmlElement::encodeAsXmlElement("locale", locale, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errorDescr"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errorDescr)) return false;
			}
			else if (_element.equals("clientPlatformId"))
			{
				clientPlatformId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("clientType"))
			{
				clientType = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("clientDevice"))
			{
				clientDevice = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("clientSiteId"))
			{
				clientSiteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("locale"))
			{
				locale = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(errorDescr);
	_msg.composeUINT32(clientPlatformId);
	_msg.composeUINT32(clientType);
	_msg.composeUINT32(clientDevice);
	_msg.composeUINT32(clientSiteId);
	_msg.composeUINT32(locale);
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(errorDescr);
	_parser.parseUINT32(clientPlatformId);
	_parser.parseUINT32(clientType);
	_parser.parseUINT32(clientDevice);
	_parser.parseUINT32(clientSiteId);
	_parser.parseUINT32(locale);
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errorDescr", errorDescr);
	_jsonstr.compose("clientPlatformId", clientPlatformId);
	_jsonstr.compose("clientType", clientType);
	_jsonstr.compose("clientDevice", clientDevice);
	_jsonstr.compose("clientSiteId", clientSiteId);
	_jsonstr.compose("locale", locale);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errorDescr", errorDescr);
	_jparser.parseByNameThrow("clientPlatformId", clientPlatformId);
	_jparser.parseByNameThrow("clientType", clientType);
	_jparser.parseByNameThrow("clientDevice", clientDevice);
	_jparser.parseByNameThrow("clientSiteId", clientSiteId);
	_jparser.parseByNameThrow("locale", locale);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString errorDescr; _jparser.validateByNameThrow("errorDescr", errorDescr);
	AtfValidator::validateIntMax(_descr, "errorDescr", errorDescr.length(), 10000, _checker, __FILE__, __LINE__);
	UINT32 clientPlatformId; _jparser.validateByNameThrow("clientPlatformId", clientPlatformId);
	AtfValidator::validateIntRange(_descr, "clientPlatformId", clientPlatformId, Client_UnknownPlatform, Client_Last, _checker, __FILE__, __LINE__);
	UINT32 clientType; _jparser.validateByNameThrow("clientType", clientType);
	AtfValidator::validateIntRange(_descr, "clientType", clientType, ClientType_Unknown, ClientType_Last, _checker, __FILE__, __LINE__);
	UINT32 clientDevice; _jparser.validateByNameThrow("clientDevice", clientDevice);
	AtfValidator::validateIntRange(_descr, "clientDevice", clientDevice, ClientDevice_Unknown, ClientDevice_Last, _checker, __FILE__, __LINE__);
	UINT32 clientSiteId; _jparser.validateByNameThrow("clientSiteId", clientSiteId);
	AtfValidator::validateIntRange(_descr, "clientSiteId", clientSiteId, PokerStars_SiteUnknown, PokerStars_Last, _checker, __FILE__, __LINE__);
	UINT32 locale; _jparser.validateByNameThrow("locale", locale);
	AtfValidator::validateIntMax(_descr, "locale", locale, MAX_LOCALES, _checker, __FILE__, __LINE__);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "errorDescr"); size_t szErrorDescr = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "errorDescr", szErrorDescr, 10000, _checker, __FILE__, __LINE__);
	UINT32 clientPlatformId; _parser.parseUINT32(clientPlatformId);
	AtfValidator::validateIntRange(_descr, "clientPlatformId", clientPlatformId, Client_UnknownPlatform, Client_Last, _checker, __FILE__, __LINE__);
	UINT32 clientType; _parser.parseUINT32(clientType);
	AtfValidator::validateIntRange(_descr, "clientType", clientType, ClientType_Unknown, ClientType_Last, _checker, __FILE__, __LINE__);
	UINT32 clientDevice; _parser.parseUINT32(clientDevice);
	AtfValidator::validateIntRange(_descr, "clientDevice", clientDevice, ClientDevice_Unknown, ClientDevice_Last, _checker, __FILE__, __LINE__);
	UINT32 clientSiteId; _parser.parseUINT32(clientSiteId);
	AtfValidator::validateIntRange(_descr, "clientSiteId", clientSiteId, PokerStars_SiteUnknown, PokerStars_Last, _checker, __FILE__, __LINE__);
	UINT32 locale; _parser.parseUINT32(locale);
	AtfValidator::validateIntMax(_descr, "locale", locale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR()
{
	clear();
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::clear()
{
	errCode = 0;
	msg.clear();
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::equals(const Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR& _o) const
{
	return errCode == _o.errCode &&
		Atf::atfPStringEquals(msg, _o.msg);
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::equals(Atf::MessageProtocol* _other) const
{
	if (TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR*)_other));
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("msg=");
	_buf.append(msg);
	return _buf.c_str();
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	Atf::XmlElement::encodeAsXmlElement("msg", msg, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("msg"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, msg)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(msg);
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringP(msg);
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	_jsonstr.compose("msg", msg);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	_jparser.parseByNameThrow("msg", msg);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 errCode; _jparser.validateByNameThrow("errCode", errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	PString msg; _jparser.validateByNameThrow("msg", msg);
	AtfValidator::validateInt(_descr, "msg", msg.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode; _parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "msg"); size_t szMsg = strlen(_dummy);
	AtfValidator::validateInt(_descr, "msg", szMsg, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS()
{
	clear();
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::clear()
{
	locale = 0;
	bonusIds.clear();
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::equals(const Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS& _o) const
{
	return locale == _o.locale &&
		bonusIds.equals(_o.bonusIds);
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::equals(Atf::MessageProtocol* _other) const
{
	if (TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS*)_other));
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS).append(")");
	_buf.append(',');
	_buf.append("locale=");
	_buf.appendUint(locale);
	_buf.append(',');
	_buf.append("bonusIds=");
	bonusIds.toTraceString(_buf);
	return _buf.c_str();
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("locale", locale, _buf);
	bonusIds.toXmlString("bonusIds", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("locale"))
			{
				locale = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("bonusIds"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< UINT32, 4 > >::FromXmlString(_value, bonusIds)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(locale);
	bonusIds.composeMsg(_msg, _ignoreJSON);
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(locale);
	bonusIds.parseMsg(_parser);
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("locale", locale);
	_jsonstr.compose("bonusIds", bonusIds);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("locale", locale);
	_jparser.parseByNameThrow("bonusIds", bonusIds);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 locale; _jparser.validateByNameThrow("locale", locale);
	AtfValidator::validateIntMax(_descr, "locale", locale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< UINT32 > bonusIds; _jparser.validateByNameThrow("bonusIds", bonusIds);
	AtfValidator::validateIntMax(_descr, "bonusIds", bonusIds.size(), 10240, _checker, __FILE__, __LINE__);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 locale; _parser.parseUINT32(locale);
	AtfValidator::validateIntMax(_descr, "locale", locale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szBonusIds = Atf::LAtfVector< UINT32, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("bonusIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateIntMax(_descr, "bonusIds", szBonusIds, 10240, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    BonusStrings
//=================================================================

TemplateCache::cli_unauth::BonusStrings::BonusStrings()
{
	clear();
}

void TemplateCache::cli_unauth::BonusStrings::clear()
{
	bonusId = 0;
	bonusName.clear();
	bonusDescription.clear();
	bonusUrl.clear();
}

bool TemplateCache::cli_unauth::BonusStrings::equals(const BonusStrings& _o) const
{
	return bonusId == _o.bonusId &&
		Atf::atfPStringEquals(bonusName, _o.bonusName) &&
		Atf::atfPStringEquals(bonusDescription, _o.bonusDescription) &&
		Atf::atfPStringEquals(bonusUrl, _o.bonusUrl);
}

const char *TemplateCache::cli_unauth::BonusStrings::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("bonusId=");
	_buf.appendUint(bonusId);
	_buf.append(',');
	_buf.append("bonusName=");
	_buf.append(bonusName);
	_buf.append(',');
	_buf.append("bonusDescription=");
	_buf.append(bonusDescription);
	_buf.append(',');
	_buf.append("bonusUrl=");
	_buf.append(bonusUrl);
	_buf.append('}');
	return _buf.c_str();
}

const char *TemplateCache::cli_unauth::BonusStrings::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("bonusId", bonusId, _buf);
	Atf::XmlElement::encodeAsXmlElement("bonusName", bonusName, _buf);
	Atf::XmlElement::encodeAsXmlElement("bonusDescription", bonusDescription, _buf);
	Atf::XmlElement::encodeAsXmlElement("bonusUrl", bonusUrl, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool TemplateCache::cli_unauth::BonusStrings::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("bonusId"))
		{
			bonusId = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("bonusName"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, bonusName)) return false;
		}
		else if (_element.equals("bonusDescription"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, bonusDescription)) return false;
		}
		else if (_element.equals("bonusUrl"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, bonusUrl)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void TemplateCache::cli_unauth::BonusStrings::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(BonusStrings())) // not empty
	{
		_body.composeUINT32(bonusId);
		_body.composeString(bonusName);
		_body.composeString(bonusDescription);
		_body.composeString(bonusUrl);
	}

	_msg.composeMsgBody(_body);
}

void TemplateCache::cli_unauth::BonusStrings::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(bonusId);
	_parser0.parseStringP(bonusName);
	_parser0.parseStringP(bonusDescription);
	_parser0.parseStringP(bonusUrl);
}

const char *TemplateCache::cli_unauth::BonusStrings::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("bonusId", bonusId);
	_jsonstr.compose("bonusName", bonusName);
	_jsonstr.compose("bonusDescription", bonusDescription);
	_jsonstr.compose("bonusUrl", bonusUrl);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::BonusStrings::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("bonusId", bonusId);
	_jparser.parseByNameThrow("bonusName", bonusName);
	_jparser.parseByNameThrow("bonusDescription", bonusDescription);
	_jparser.parseByNameThrow("bonusUrl", bonusUrl);
}

/* static */ void TemplateCache::cli_unauth::BonusStrings::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 bonusId; _jparser.validateByNameThrow("bonusId", bonusId);
	AtfValidator::validateInt(_descr, "bonusId", bonusId, _checker, __FILE__, __LINE__);
	PString bonusName; _jparser.validateByNameThrow("bonusName", bonusName);
	AtfValidator::validateInt(_descr, "bonusName", bonusName.length(), _checker, __FILE__, __LINE__);
	PString bonusDescription; _jparser.validateByNameThrow("bonusDescription", bonusDescription);
	AtfValidator::validateInt(_descr, "bonusDescription", bonusDescription.length(), _checker, __FILE__, __LINE__);
	PString bonusUrl; _jparser.validateByNameThrow("bonusUrl", bonusUrl);
	AtfValidator::validateInt(_descr, "bonusUrl", bonusUrl.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void TemplateCache::cli_unauth::BonusStrings::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	UINT32 bonusId; _parser0.parseUINT32(bonusId);
	AtfValidator::validateInt(_descr, "bonusId", bonusId, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "bonusName"); size_t szBonusName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "bonusName", szBonusName, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "bonusDescription"); size_t szBonusDescription = strlen(_dummy);
	AtfValidator::validateInt(_descr, "bonusDescription", szBonusDescription, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "bonusUrl"); size_t szBonusUrl = strlen(_dummy);
	AtfValidator::validateInt(_descr, "bonusUrl", szBonusUrl, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS()
{
	clear();
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::clear()
{
	bonusStrings.clear();
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::equals(const Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS& _o) const
{
	return bonusStrings.equals(_o.bonusStrings);
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::equals(Atf::MessageProtocol* _other) const
{
	if (TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS*)_other));
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS).append(")");
	_buf.append(',');
	_buf.append("bonusStrings=");
	bonusStrings.toTraceString(_buf);
	return _buf.c_str();
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	bonusStrings.toXmlString("bonusStrings", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("bonusStrings"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< BonusStrings, 4 > >::FromXmlString(_value, bonusStrings)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	bonusStrings.composeMsg(_msg, _ignoreJSON);
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::parseMsg(CommMsgParser& _parser)
{
	bonusStrings.parseMsg(_parser);
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("bonusStrings", bonusStrings);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("bonusStrings", bonusStrings);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	Atf::AtfVectorBase< BonusStrings > bonusStrings; _jparser.validateByNameThrow("bonusStrings", bonusStrings);
	AtfValidator::validateInt(_descr, "bonusStrings", bonusStrings.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szBonusStrings = Atf::LAtfVector< BonusStrings, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("bonusStrings"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "bonusStrings", szBonusStrings, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ Atf::MessageProtocol* TemplateCache::ProtocolFactory::createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId)
{
	Atf::MessageProtocol *_obj = NULL;

	if(!strcmp(_nameSpace, "cli_unauth"))
	{
		switch(_msgId)
		{
			case TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS: _obj = new cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS(); break;
			case TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR: _obj = new cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR(); break;
			case TS_A_I18N_GET_TRANSLATED_MESSAGE: _obj = new cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE(); break;
			case TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS: _obj = new cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS(); break;
			case TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR: _obj = new cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR(); break;
			case TS_Q_I18N_GET_TRANSLATED_MESSAGE: _obj = new cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE(); break;
		}
	}
	
	return _obj;
}

/* static */ bool TemplateCache::ProtocolFactory::validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "cli_unauth"))
	{
		switch(_msgId)
		{
			case TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS: cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR: cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case TS_A_I18N_GET_TRANSLATED_MESSAGE: cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS: cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR: cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case TS_Q_I18N_GET_TRANSLATED_MESSAGE: cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

/* static */ bool TemplateCache::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "cli_unauth"))
	{
		switch(_msgId)
		{
			case TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS: cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR: cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case TS_A_I18N_GET_TRANSLATED_MESSAGE: cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS: cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR: cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case TS_Q_I18N_GET_TRANSLATED_MESSAGE: cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

