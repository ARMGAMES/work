/**
 * ip2country_atf_thin.h
 *
 * This file was auto-generated from ip2country_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin ip2country_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_IP2COUNTRY_ATF_THIN_H
#define ATF_PROTOCOL_DEFFILE_IP2COUNTRY_ATF_THIN_H

#include "lobby.h"
#include "i18n.localedef.h"
#include "Common_atf_thin.h"
#include "sites.h"
#include "licenseid.h"


#include "ThinAtfUserDefStructs.h"

namespace ip2country
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	namespace cli_unauth
	{
		struct Protocol_MSG_REDIRECTOR_URL
		{
			//! 4 <FIXME>CommonThin::AtfShared::LoginExtra</FIXME> s4 - siteId, <FIXME>clientExtra</FIXME> ,userId,licenseId
			UINT32 siteId;
			CommonThin::AtfShared::LoginExtra clientExtra;
			PString userId;
			UINT32 licenseId;

			Protocol_MSG_REDIRECTOR_URL();
			void clear();
			bool equals(const Protocol_MSG_REDIRECTOR_URL&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_REDIRECTOR_URL; }
			static const char *getMsgIdString() { return "MSG_REDIRECTOR_URL"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_REDIRECTOR_URL(Protocol_MSG_REDIRECTOR_URL&&);
			Protocol_MSG_REDIRECTOR_URL& operator=(Protocol_MSG_REDIRECTOR_URL&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_REDIRECTOR_URL(const Protocol_MSG_REDIRECTOR_URL&) = default;
			Protocol_MSG_REDIRECTOR_URL& operator=(const Protocol_MSG_REDIRECTOR_URL&) = default;
#endif
#endif
		};

		struct Protocol_MSG_REDIRECTOR_URL_ERROR_REPLY
		{
			// 2 - errCode
			UINT16 errCode;

			Protocol_MSG_REDIRECTOR_URL_ERROR_REPLY();
			void clear();
			bool equals(const Protocol_MSG_REDIRECTOR_URL_ERROR_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_REDIRECTOR_URL_ERROR_REPLY; }
			static const char *getMsgIdString() { return "MSG_REDIRECTOR_URL_ERROR_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REDIRECTOR_URL_REPLY
		{
			// ssssM(s) - url,country,ipAddr,region,M(redirectorTemplate)
			PString url;
			PString country;
			PString ipAddr;
			PString region;

			PString redirectorTemplate;

			Protocol_MSG_REDIRECTOR_URL_REPLY();
			void clear();
			bool equals(const Protocol_MSG_REDIRECTOR_URL_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_REDIRECTOR_URL_REPLY; }
			static const char *getMsgIdString() { return "MSG_REDIRECTOR_URL_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_REDIRECTOR_URL_REPLY(Protocol_MSG_REDIRECTOR_URL_REPLY&&);
			Protocol_MSG_REDIRECTOR_URL_REPLY& operator=(Protocol_MSG_REDIRECTOR_URL_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_REDIRECTOR_URL_REPLY(const Protocol_MSG_REDIRECTOR_URL_REPLY&) = default;
			Protocol_MSG_REDIRECTOR_URL_REPLY& operator=(const Protocol_MSG_REDIRECTOR_URL_REPLY&) = default;
#endif
#endif

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct NameValuePair
		{
			// M(ss) - M(name,value)
			PString name;
			PString value;

			NameValuePair();
			void clear();
			bool equals(const NameValuePair&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			NameValuePair(NameValuePair&&);
			NameValuePair& operator=(NameValuePair&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			NameValuePair(const NameValuePair&) = default;
			NameValuePair& operator=(const NameValuePair&) = default;
#endif
#endif
		};

		struct Params
		{
			// M(4<M(ss)>) - M(numPairs<M(name,value)>)
			ThinAtf::LAtfVector< NameValuePair, 4 > pairs;

			Params();
			void clear();
			bool equals(const Params&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Params(Params&&);
			Params& operator=(Params&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Params(const Params&) = default;
			Params& operator=(const Params&) = default;
#endif
#endif
		};

		struct Protocol_MSG_RESOLVER_TAG
		{
			//! s4s4 <FIXME>CommonThin::AtfShared::LoginExtra</FIXME> sb4tM(4<M(ss)>)s4 - tag,siteId,country,localeId, <FIXME>clientExtra</FIXME> ,urlParamStr,isForceTest,appUserIntId,appTimeUtc,M(numPairs<M(name,value)>),state,licenseId
			PString tag;	// In DB field name is 'RESOLVERLOG.LINK'
			UINT32 siteId;
			PString country;
			UINT32 localeId;
			CommonThin::AtfShared::LoginExtra clientExtra;
			PString urlParamStr;
			bool isForceTest;
			UINT32 appUserIntId;	// no limit
			SrvTime appTimeUtc;
			Params params;
			PString state;
			UINT32 licenseId;

			Protocol_MSG_RESOLVER_TAG();
			void clear();
			bool equals(const Protocol_MSG_RESOLVER_TAG&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_RESOLVER_TAG; }
			static const char *getMsgIdString() { return "MSG_RESOLVER_TAG"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_RESOLVER_TAG(Protocol_MSG_RESOLVER_TAG&&);
			Protocol_MSG_RESOLVER_TAG& operator=(Protocol_MSG_RESOLVER_TAG&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_RESOLVER_TAG(const Protocol_MSG_RESOLVER_TAG&) = default;
			Protocol_MSG_RESOLVER_TAG& operator=(const Protocol_MSG_RESOLVER_TAG&) = default;
#endif
#endif
		};

		struct Protocol_MSG_RESOLVER_TAG_REPLY
		{
			//! 2 <FIXME_COND_IF> s <FIXME_COND_ELSE> s <FIXME_COND_ENDIF>  - errCode <FIXME_COND_IF> ,url <FIXME_COND_ELSE> ,errDescr <FIXME_COND_ENDIF> 
			INT16 errCode;

			PString url;

			PString errDescr;

			Protocol_MSG_RESOLVER_TAG_REPLY();
			void clear();
			bool equals(const Protocol_MSG_RESOLVER_TAG_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_RESOLVER_TAG_REPLY; }
			static const char *getMsgIdString() { return "MSG_RESOLVER_TAG_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_RESOLVER_TAG_REPLY(Protocol_MSG_RESOLVER_TAG_REPLY&&);
			Protocol_MSG_RESOLVER_TAG_REPLY& operator=(Protocol_MSG_RESOLVER_TAG_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_RESOLVER_TAG_REPLY(const Protocol_MSG_RESOLVER_TAG_REPLY&) = default;
			Protocol_MSG_RESOLVER_TAG_REPLY& operator=(const Protocol_MSG_RESOLVER_TAG_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_RESOLVER_GET_VERSION
		{
			// Empty message body

			Protocol_MSG_RESOLVER_GET_VERSION();
			void clear();
			bool equals(const Protocol_MSG_RESOLVER_GET_VERSION&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_RESOLVER_GET_VERSION; }
			static const char *getMsgIdString() { return "MSG_RESOLVER_GET_VERSION"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_RESOLVER_GET_VERSION_REPLY
		{
			//! 2 <FIXME_COND_IF> s <FIXME_COND_ELSE> s <FIXME_COND_ENDIF>  - errCode <FIXME_COND_IF> ,version <FIXME_COND_ELSE> ,errDescr <FIXME_COND_ENDIF> 
			INT16 errCode;

			PString version;

			PString errDescr;

			Protocol_MSG_RESOLVER_GET_VERSION_REPLY();
			void clear();
			bool equals(const Protocol_MSG_RESOLVER_GET_VERSION_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_RESOLVER_GET_VERSION_REPLY; }
			static const char *getMsgIdString() { return "MSG_RESOLVER_GET_VERSION_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_RESOLVER_GET_VERSION_REPLY(Protocol_MSG_RESOLVER_GET_VERSION_REPLY&&);
			Protocol_MSG_RESOLVER_GET_VERSION_REPLY& operator=(Protocol_MSG_RESOLVER_GET_VERSION_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_RESOLVER_GET_VERSION_REPLY(const Protocol_MSG_RESOLVER_GET_VERSION_REPLY&) = default;
			Protocol_MSG_RESOLVER_GET_VERSION_REPLY& operator=(const Protocol_MSG_RESOLVER_GET_VERSION_REPLY&) = default;
#endif
#endif
		};
	};
};

#endif
