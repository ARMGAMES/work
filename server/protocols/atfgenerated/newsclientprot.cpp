/**
 * newsclientprot.cpp
 *
 * This file was auto-generated from newsclientprot.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: newsclientprot.txt
 */
 
#include "newsclientprot.h"

//=================================================================
//                    MorphLobbyGame
//=================================================================

NewsServerClient::MorphLobbyGame::MorphLobbyGame()
{
	clear();
}

void NewsServerClient::MorphLobbyGame::clear()
{
	gameType = 0;
	structure = 0;
	hiLo = 0;
	numPlayers = 0;
}

bool NewsServerClient::MorphLobbyGame::equals(const MorphLobbyGame& _o) const
{
	return gameType == _o.gameType &&
		structure == _o.structure &&
		hiLo == _o.hiLo &&
		numPlayers == _o.numPlayers;
}

const char *NewsServerClient::MorphLobbyGame::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("gameType=");
	_buf.appendUint(gameType);
	_buf.append(',');
	_buf.append("structure=");
	_buf.appendUint(structure);
	_buf.append(',');
	_buf.append("hiLo=");
	_buf.appendUint(hiLo);
	_buf.append(',');
	_buf.append("numPlayers=");
	_buf.appendUint(numPlayers);
	_buf.append('}');
	return _buf.c_str();
}

const char *NewsServerClient::MorphLobbyGame::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("gameType", gameType, _buf);
	Atf::XmlElement::encodeAsXmlElement("structure", structure, _buf);
	Atf::XmlElement::encodeAsXmlElement("hiLo", hiLo, _buf);
	Atf::XmlElement::encodeAsXmlElement("numPlayers", numPlayers, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool NewsServerClient::MorphLobbyGame::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("gameType"))
		{
			gameType = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("structure"))
		{
			structure = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("hiLo"))
		{
			hiLo = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("numPlayers"))
		{
			numPlayers = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void NewsServerClient::MorphLobbyGame::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(MorphLobbyGame())) // not empty
	{
		_body.composeBYTE(gameType);
		_body.composeBYTE(structure);
		_body.composeBYTE(hiLo);
		_body.composeBYTE(numPlayers);
	}

	_msg.composeMsgBody(_body);
}

void NewsServerClient::MorphLobbyGame::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseBYTE(gameType);
	_parser0.parseBYTE(structure);
	_parser0.parseBYTE(hiLo);
	_parser0.parseBYTE(numPlayers);
}

const char *NewsServerClient::MorphLobbyGame::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("gameType", gameType);
	_jsonstr.compose("structure", structure);
	_jsonstr.compose("hiLo", hiLo);
	_jsonstr.compose("numPlayers", numPlayers);
	return _buf.c_str();
}

void NewsServerClient::MorphLobbyGame::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("gameType", gameType);
	_jparser.parseByNameThrow("structure", structure);
	_jparser.parseByNameThrow("hiLo", hiLo);
	_jparser.parseByNameThrow("numPlayers", numPlayers);
}

/* static */ void NewsServerClient::MorphLobbyGame::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	BYTE gameType; _jparser.validateByNameThrow("gameType", gameType);
	AtfValidator::validateInt(_descr, "gameType", gameType, _checker, __FILE__, __LINE__);
	BYTE structure; _jparser.validateByNameThrow("structure", structure);
	AtfValidator::validateInt(_descr, "structure", structure, _checker, __FILE__, __LINE__);
	BYTE hiLo; _jparser.validateByNameThrow("hiLo", hiLo);
	AtfValidator::validateInt(_descr, "hiLo", hiLo, _checker, __FILE__, __LINE__);
	BYTE numPlayers; _jparser.validateByNameThrow("numPlayers", numPlayers);
	AtfValidator::validateInt(_descr, "numPlayers", numPlayers, _checker, __FILE__, __LINE__);
}

/*static*/ void NewsServerClient::MorphLobbyGame::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	BYTE gameType; _parser0.parseBYTE(gameType);
	AtfValidator::validateInt(_descr, "gameType", gameType, _checker, __FILE__, __LINE__);
	BYTE structure; _parser0.parseBYTE(structure);
	AtfValidator::validateInt(_descr, "structure", structure, _checker, __FILE__, __LINE__);
	BYTE hiLo; _parser0.parseBYTE(hiLo);
	AtfValidator::validateInt(_descr, "hiLo", hiLo, _checker, __FILE__, __LINE__);
	BYTE numPlayers; _parser0.parseBYTE(numPlayers);
	AtfValidator::validateInt(_descr, "numPlayers", numPlayers, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    MorphLobbyPublData
//=================================================================

NewsServerClient::MorphLobbyPublData::MorphLobbyPublData()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

NewsServerClient::MorphLobbyPublData::MorphLobbyPublData(MorphLobbyPublData&& _o)
	: templateId(std::move(_o.templateId))
	, version(std::move(_o.version))
	, helpSupportPortalName(std::move(_o.helpSupportPortalName))
	, gameType(std::move(_o.gameType))
	, structure(std::move(_o.structure))
	, hiLo(std::move(_o.hiLo))
	, tabName(std::move(_o.tabName))
	, mobileNVP(std::move(_o.mobileNVP))
	, mobileImage(std::move(_o.mobileImage))
	, desktopLobbyMhtml(std::move(_o.desktopLobbyMhtml))
	, desktopSidecarMhtml(std::move(_o.desktopSidecarMhtml))
	, defaultWeighting(std::move(_o.defaultWeighting))
	, helpSupportPortalShowAsNewName(std::move(_o.helpSupportPortalShowAsNewName))
	, helpSupportPortalShowAsDefaultName(std::move(_o.helpSupportPortalShowAsDefaultName))
	, games(std::move(_o.games))
{
}

NewsServerClient::MorphLobbyPublData& NewsServerClient::MorphLobbyPublData::operator=(MorphLobbyPublData&& _o)
{
	if(this != &_o)
	{
		templateId = std::move(_o.templateId);
		version = std::move(_o.version);
		helpSupportPortalName = std::move(_o.helpSupportPortalName);
		gameType = std::move(_o.gameType);
		structure = std::move(_o.structure);
		hiLo = std::move(_o.hiLo);
		tabName = std::move(_o.tabName);
		mobileNVP = std::move(_o.mobileNVP);
		mobileImage = std::move(_o.mobileImage);
		desktopLobbyMhtml = std::move(_o.desktopLobbyMhtml);
		desktopSidecarMhtml = std::move(_o.desktopSidecarMhtml);
		defaultWeighting = std::move(_o.defaultWeighting);
		helpSupportPortalShowAsNewName = std::move(_o.helpSupportPortalShowAsNewName);
		helpSupportPortalShowAsDefaultName = std::move(_o.helpSupportPortalShowAsDefaultName);
		games = std::move(_o.games);
	}
	return *this;
}

#endif

void NewsServerClient::MorphLobbyPublData::clear()
{
	templateId = 0;
	version = 0;
	helpSupportPortalName.clear();
	gameType = 0;
	structure = 0;
	hiLo = 0;
	tabName.clear();
	mobileNVP.clear();
	mobileImage.clear();
	desktopLobbyMhtml.clear();
	desktopSidecarMhtml.clear();
	defaultWeighting = 0;
	helpSupportPortalShowAsNewName.clear();
	helpSupportPortalShowAsDefaultName.clear();
	games.clear();
}

bool NewsServerClient::MorphLobbyPublData::equals(const MorphLobbyPublData& _o) const
{
	return templateId == _o.templateId &&
		version == _o.version &&
		Atf::atfPStringEquals(helpSupportPortalName, _o.helpSupportPortalName) &&
		gameType == _o.gameType &&
		structure == _o.structure &&
		hiLo == _o.hiLo &&
		tabName.equals(_o.tabName) &&
		mobileNVP.equals(_o.mobileNVP) &&
		mobileImage.equals(_o.mobileImage) &&
		desktopLobbyMhtml.equals(_o.desktopLobbyMhtml) &&
		desktopSidecarMhtml.equals(_o.desktopSidecarMhtml) &&
		defaultWeighting == _o.defaultWeighting &&
		Atf::atfPStringEquals(helpSupportPortalShowAsNewName, _o.helpSupportPortalShowAsNewName) &&
		Atf::atfPStringEquals(helpSupportPortalShowAsDefaultName, _o.helpSupportPortalShowAsDefaultName) &&
		games.equals(_o.games);
}

const char *NewsServerClient::MorphLobbyPublData::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("templateId=");
	_buf.appendUint(templateId);
	_buf.append(',');
	_buf.append("version=");
	_buf.appendUint(version);
	_buf.append(',');
	_buf.append("helpSupportPortalName=");
	_buf.append(helpSupportPortalName);
	_buf.append(',');
	_buf.append("gameType=");
	_buf.appendUint(gameType);
	_buf.append(',');
	_buf.append("structure=");
	_buf.appendUint(structure);
	_buf.append(',');
	_buf.append("hiLo=");
	_buf.appendUint(hiLo);
	_buf.append(',');
	_buf.append("tabName=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, tabName);
	_buf.append(',');
	_buf.append("mobileNVP=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, mobileNVP);
	_buf.append(',');
	_buf.append("mobileImage=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, mobileImage);
	_buf.append(',');
	_buf.append("desktopLobbyMhtml=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, desktopLobbyMhtml);
	_buf.append(',');
	_buf.append("desktopSidecarMhtml=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, desktopSidecarMhtml);
	_buf.append(',');
	_buf.append("defaultWeighting=");
	_buf.appendUint(defaultWeighting);
	_buf.append(',');
	_buf.append("helpSupportPortalShowAsNewName=");
	_buf.append(helpSupportPortalShowAsNewName);
	_buf.append(',');
	_buf.append("helpSupportPortalShowAsDefaultName=");
	_buf.append(helpSupportPortalShowAsDefaultName);
	_buf.append(',');
	_buf.append("games=");
	games.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

const char *NewsServerClient::MorphLobbyPublData::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("templateId", templateId, _buf);
	Atf::XmlElement::encodeAsXmlElement("version", version, _buf);
	Atf::XmlElement::encodeAsXmlElement("helpSupportPortalName", helpSupportPortalName, _buf);
	Atf::XmlElement::encodeAsXmlElement("gameType", gameType, _buf);
	Atf::XmlElement::encodeAsXmlElement("structure", structure, _buf);
	Atf::XmlElement::encodeAsXmlElement("hiLo", hiLo, _buf);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "tabName", tabName);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "mobileNVP", mobileNVP);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "mobileImage", mobileImage);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "desktopLobbyMhtml", desktopLobbyMhtml);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "desktopSidecarMhtml", desktopSidecarMhtml);
	Atf::XmlElement::encodeAsXmlElement("defaultWeighting", defaultWeighting, _buf);
	Atf::XmlElement::encodeAsXmlElement("helpSupportPortalShowAsNewName", helpSupportPortalShowAsNewName, _buf);
	Atf::XmlElement::encodeAsXmlElement("helpSupportPortalShowAsDefaultName", helpSupportPortalShowAsDefaultName, _buf);
	games.toXmlString("games", _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool NewsServerClient::MorphLobbyPublData::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("templateId"))
		{
			templateId = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("version"))
		{
			version = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("helpSupportPortalName"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, helpSupportPortalName)) return false;
		}
		else if (_element.equals("gameType"))
		{
			gameType = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("structure"))
		{
			structure = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("hiLo"))
		{
			hiLo = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("tabName"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, tabName);
		}
		else if (_element.equals("mobileNVP"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, mobileNVP);
		}
		else if (_element.equals("mobileImage"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, mobileImage);
		}
		else if (_element.equals("desktopLobbyMhtml"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, desktopLobbyMhtml);
		}
		else if (_element.equals("desktopSidecarMhtml"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, desktopSidecarMhtml);
		}
		else if (_element.equals("defaultWeighting"))
		{
			defaultWeighting = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("helpSupportPortalShowAsNewName"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, helpSupportPortalShowAsNewName)) return false;
		}
		else if (_element.equals("helpSupportPortalShowAsDefaultName"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, helpSupportPortalShowAsDefaultName)) return false;
		}
		else if (_element.equals("games"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< MorphLobbyGame, 4 > >::FromXmlString(_value, games)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void NewsServerClient::MorphLobbyPublData::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(templateId);
	_msg.composeUINT32(version);
	_msg.composeString(helpSupportPortalName);
	_msg.composeBYTE(gameType);
	_msg.composeBYTE(structure);
	_msg.composeBYTE(hiLo);
	tabName.compose(_msg);
	mobileNVP.compose(_msg);
	mobileImage.compose(_msg);
	desktopLobbyMhtml.compose(_msg);
	desktopSidecarMhtml.compose(_msg);
	_msg.composeBYTE(defaultWeighting);
	_msg.composeString(helpSupportPortalShowAsNewName);
	_msg.composeString(helpSupportPortalShowAsDefaultName);
	games.composeMsg(_msg, _ignoreJSON);
}

void NewsServerClient::MorphLobbyPublData::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(templateId);
	_parser.parseUINT32(version);
	_parser.parseStringP(helpSupportPortalName);
	_parser.parseBYTE(gameType);
	_parser.parseBYTE(structure);
	_parser.parseBYTE(hiLo);
	tabName.parse(_parser);
	mobileNVP.parse(_parser);
	mobileImage.parse(_parser);
	desktopLobbyMhtml.parse(_parser);
	desktopSidecarMhtml.parse(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseBYTE(defaultWeighting);
	_parser.parseStringP(helpSupportPortalShowAsNewName);
	_parser.parseStringP(helpSupportPortalShowAsDefaultName);
	games.parseMsg(_parser);
}

const char *NewsServerClient::MorphLobbyPublData::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("templateId", templateId);
	_jsonstr.compose("version", version);
	_jsonstr.compose("helpSupportPortalName", helpSupportPortalName);
	_jsonstr.compose("gameType", gameType);
	_jsonstr.compose("structure", structure);
	_jsonstr.compose("hiLo", hiLo);
	_jsonstr.compose("tabName", tabName);
	_jsonstr.compose("mobileNVP", mobileNVP);
	_jsonstr.compose("mobileImage", mobileImage);
	_jsonstr.compose("desktopLobbyMhtml", desktopLobbyMhtml);
	_jsonstr.compose("desktopSidecarMhtml", desktopSidecarMhtml);
	_jsonstr.compose("defaultWeighting", defaultWeighting);
	_jsonstr.compose("helpSupportPortalShowAsNewName", helpSupportPortalShowAsNewName);
	_jsonstr.compose("helpSupportPortalShowAsDefaultName", helpSupportPortalShowAsDefaultName);
	_jsonstr.compose("games", games);
	return _buf.c_str();
}

void NewsServerClient::MorphLobbyPublData::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("templateId", templateId);
	_jparser.parseByNameThrow("version", version);
	_jparser.parseByNameThrow("helpSupportPortalName", helpSupportPortalName);
	_jparser.parseByNameThrow("gameType", gameType);
	_jparser.parseByNameThrow("structure", structure);
	_jparser.parseByNameThrow("hiLo", hiLo);
	_jparser.parseByNameThrow("tabName", tabName);
	_jparser.parseByNameThrow("mobileNVP", mobileNVP);
	_jparser.parseByNameThrow("mobileImage", mobileImage);
	_jparser.parseByNameThrow("desktopLobbyMhtml", desktopLobbyMhtml);
	_jparser.parseByNameThrow("desktopSidecarMhtml", desktopSidecarMhtml);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("defaultWeighting", defaultWeighting);
	_jparser.parseByNameThrow("helpSupportPortalShowAsNewName", helpSupportPortalShowAsNewName);
	_jparser.parseByNameThrow("helpSupportPortalShowAsDefaultName", helpSupportPortalShowAsDefaultName);
	_jparser.parseByNameThrow("games", games);
}

/* static */ void NewsServerClient::MorphLobbyPublData::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 templateId; _jparser.validateByNameThrow("templateId", templateId);
	AtfValidator::validateInt(_descr, "templateId", templateId, _checker, __FILE__, __LINE__);
	UINT32 version; _jparser.validateByNameThrow("version", version);
	AtfValidator::validateInt(_descr, "version", version, _checker, __FILE__, __LINE__);
	PString helpSupportPortalName; _jparser.validateByNameThrow("helpSupportPortalName", helpSupportPortalName);
	AtfValidator::validateInt(_descr, "helpSupportPortalName", helpSupportPortalName.length(), _checker, __FILE__, __LINE__);
	BYTE gameType; _jparser.validateByNameThrow("gameType", gameType);
	AtfValidator::validateInt(_descr, "gameType", gameType, _checker, __FILE__, __LINE__);
	BYTE structure; _jparser.validateByNameThrow("structure", structure);
	AtfValidator::validateInt(_descr, "structure", structure, _checker, __FILE__, __LINE__);
	BYTE hiLo; _jparser.validateByNameThrow("hiLo", hiLo);
	AtfValidator::validateInt(_descr, "hiLo", hiLo, _checker, __FILE__, __LINE__);
	I18nPString tabName; _jparser.validateByNameThrow("tabName", tabName);
	I18nPString mobileNVP; _jparser.validateByNameThrow("mobileNVP", mobileNVP);
	I18nPString mobileImage; _jparser.validateByNameThrow("mobileImage", mobileImage);
	I18nPString desktopLobbyMhtml; _jparser.validateByNameThrow("desktopLobbyMhtml", desktopLobbyMhtml);
	I18nPString desktopSidecarMhtml; _jparser.validateByNameThrow("desktopSidecarMhtml", desktopSidecarMhtml);
	if(_jparser.parseEnded()) return;
	BYTE defaultWeighting; _jparser.validateByNameThrow("defaultWeighting", defaultWeighting);
	AtfValidator::validateInt(_descr, "defaultWeighting", defaultWeighting, _checker, __FILE__, __LINE__);
	PString helpSupportPortalShowAsNewName; _jparser.validateByNameThrow("helpSupportPortalShowAsNewName", helpSupportPortalShowAsNewName);
	AtfValidator::validateInt(_descr, "helpSupportPortalShowAsNewName", helpSupportPortalShowAsNewName.length(), _checker, __FILE__, __LINE__);
	PString helpSupportPortalShowAsDefaultName; _jparser.validateByNameThrow("helpSupportPortalShowAsDefaultName", helpSupportPortalShowAsDefaultName);
	AtfValidator::validateInt(_descr, "helpSupportPortalShowAsDefaultName", helpSupportPortalShowAsDefaultName.length(), _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< MorphLobbyGame > games; _jparser.validateByNameThrow("games", games);
	AtfValidator::validateInt(_descr, "games", games.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void NewsServerClient::MorphLobbyPublData::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT32 templateId; _parser.parseUINT32(templateId);
	AtfValidator::validateInt(_descr, "templateId", templateId, _checker, __FILE__, __LINE__);
	UINT32 version; _parser.parseUINT32(version);
	AtfValidator::validateInt(_descr, "version", version, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "helpSupportPortalName"); size_t szHelpSupportPortalName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "helpSupportPortalName", szHelpSupportPortalName, _checker, __FILE__, __LINE__);
	BYTE gameType; _parser.parseBYTE(gameType);
	AtfValidator::validateInt(_descr, "gameType", gameType, _checker, __FILE__, __LINE__);
	BYTE structure; _parser.parseBYTE(structure);
	AtfValidator::validateInt(_descr, "structure", structure, _checker, __FILE__, __LINE__);
	BYTE hiLo; _parser.parseBYTE(hiLo);
	AtfValidator::validateInt(_descr, "hiLo", hiLo, _checker, __FILE__, __LINE__);
	I18nPString tabName; tabName.parse(_parser);
	I18nPString mobileNVP; mobileNVP.parse(_parser);
	I18nPString mobileImage; mobileImage.parse(_parser);
	I18nPString desktopLobbyMhtml; desktopLobbyMhtml.parse(_parser);
	I18nPString desktopSidecarMhtml; desktopSidecarMhtml.parse(_parser);
	if(_parser.parseEnded()) return;
	BYTE defaultWeighting; _parser.parseBYTE(defaultWeighting);
	AtfValidator::validateInt(_descr, "defaultWeighting", defaultWeighting, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "helpSupportPortalShowAsNewName"); size_t szHelpSupportPortalShowAsNewName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "helpSupportPortalShowAsNewName", szHelpSupportPortalShowAsNewName, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "helpSupportPortalShowAsDefaultName"); size_t szHelpSupportPortalShowAsDefaultName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "helpSupportPortalShowAsDefaultName", szHelpSupportPortalShowAsDefaultName, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szGames = Atf::LAtfVector< MorphLobbyGame, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("games"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "games", szGames, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    BrandedTournWidget
//=================================================================

NewsServerClient::BrandedTournWidget::BrandedTournWidget()
{
	clear();
}

void NewsServerClient::BrandedTournWidget::clear()
{
	mhtml.clear();
	branding.clear();
}

bool NewsServerClient::BrandedTournWidget::equals(const BrandedTournWidget& _o) const
{
	return mhtml.equals(_o.mhtml) &&
		Atf::atfPStringEquals(branding, _o.branding);
}

const char *NewsServerClient::BrandedTournWidget::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("mhtml=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, mhtml);
	_buf.append(',');
	_buf.append("branding=");
	_buf.append(branding);
	_buf.append('}');
	return _buf.c_str();
}

const char *NewsServerClient::BrandedTournWidget::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "mhtml", mhtml);
	Atf::XmlElement::encodeAsXmlElement("branding", branding, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool NewsServerClient::BrandedTournWidget::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("mhtml"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, mhtml);
		}
		else if (_element.equals("branding"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, branding)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void NewsServerClient::BrandedTournWidget::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(BrandedTournWidget())) // not empty
	{
		mhtml.compose(_body);
		_body.composeString(branding);
	}

	_msg.composeMsgBody(_body);
}

void NewsServerClient::BrandedTournWidget::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	mhtml.parse(_parser0);
	_parser0.parseStringP(branding);
}

const char *NewsServerClient::BrandedTournWidget::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("mhtml", mhtml);
	_jsonstr.compose("branding", branding);
	return _buf.c_str();
}

void NewsServerClient::BrandedTournWidget::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("mhtml", mhtml);
	_jparser.parseByNameThrow("branding", branding);
}

/* static */ void NewsServerClient::BrandedTournWidget::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	I18nPString mhtml; _jparser.validateByNameThrow("mhtml", mhtml);
	PString branding; _jparser.validateByNameThrow("branding", branding);
	AtfValidator::validateInt(_descr, "branding", branding.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void NewsServerClient::BrandedTournWidget::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	I18nPString mhtml; mhtml.parse(_parser0);
	_parser0.parseStringN(_dummy, 0, "branding"); size_t szBranding = strlen(_dummy);
	AtfValidator::validateInt(_descr, "branding", szBranding, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    KnockoutLobbyPublData
//=================================================================

NewsServerClient::KnockoutLobbyPublData::KnockoutLobbyPublData()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

NewsServerClient::KnockoutLobbyPublData::KnockoutLobbyPublData(KnockoutLobbyPublData&& _o)
	: version(std::move(_o.version))
	, helpSupportPortalName(std::move(_o.helpSupportPortalName))
	, tabName(std::move(_o.tabName))
	, lobbyMhtml(std::move(_o.lobbyMhtml))
	, mobileImage(std::move(_o.mobileImage))
{
}

NewsServerClient::KnockoutLobbyPublData& NewsServerClient::KnockoutLobbyPublData::operator=(KnockoutLobbyPublData&& _o)
{
	if(this != &_o)
	{
		version = std::move(_o.version);
		helpSupportPortalName = std::move(_o.helpSupportPortalName);
		tabName = std::move(_o.tabName);
		lobbyMhtml = std::move(_o.lobbyMhtml);
		mobileImage = std::move(_o.mobileImage);
	}
	return *this;
}

#endif

void NewsServerClient::KnockoutLobbyPublData::clear()
{
	version = 0;
	helpSupportPortalName.clear();
	tabName.clear();
	lobbyMhtml.clear();
	mobileImage.clear();
}

bool NewsServerClient::KnockoutLobbyPublData::equals(const KnockoutLobbyPublData& _o) const
{
	return version == _o.version &&
		Atf::atfPStringEquals(helpSupportPortalName, _o.helpSupportPortalName) &&
		tabName.equals(_o.tabName) &&
		lobbyMhtml.equals(_o.lobbyMhtml) &&
		mobileImage.equals(_o.mobileImage);
}

const char *NewsServerClient::KnockoutLobbyPublData::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("version=");
	_buf.appendUint(version);
	_buf.append(',');
	_buf.append("helpSupportPortalName=");
	_buf.append(helpSupportPortalName);
	_buf.append(',');
	_buf.append("tabName=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, tabName);
	_buf.append(',');
	_buf.append("lobbyMhtml=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, lobbyMhtml);
	_buf.append(',');
	_buf.append("mobileImage=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, mobileImage);
	_buf.append('}');
	return _buf.c_str();
}

const char *NewsServerClient::KnockoutLobbyPublData::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("version", version, _buf);
	Atf::XmlElement::encodeAsXmlElement("helpSupportPortalName", helpSupportPortalName, _buf);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "tabName", tabName);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "lobbyMhtml", lobbyMhtml);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "mobileImage", mobileImage);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool NewsServerClient::KnockoutLobbyPublData::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("version"))
		{
			version = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("helpSupportPortalName"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, helpSupportPortalName)) return false;
		}
		else if (_element.equals("tabName"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, tabName);
		}
		else if (_element.equals("lobbyMhtml"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, lobbyMhtml);
		}
		else if (_element.equals("mobileImage"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, mobileImage);
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void NewsServerClient::KnockoutLobbyPublData::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(version);
	_msg.composeString(helpSupportPortalName);
	tabName.compose(_msg);
	lobbyMhtml.compose(_msg);
	mobileImage.compose(_msg);
}

void NewsServerClient::KnockoutLobbyPublData::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(version);
	_parser.parseStringP(helpSupportPortalName);
	tabName.parse(_parser);
	lobbyMhtml.parse(_parser);
	mobileImage.parse(_parser);
}

const char *NewsServerClient::KnockoutLobbyPublData::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("version", version);
	_jsonstr.compose("helpSupportPortalName", helpSupportPortalName);
	_jsonstr.compose("tabName", tabName);
	_jsonstr.compose("lobbyMhtml", lobbyMhtml);
	_jsonstr.compose("mobileImage", mobileImage);
	return _buf.c_str();
}

void NewsServerClient::KnockoutLobbyPublData::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("version", version);
	_jparser.parseByNameThrow("helpSupportPortalName", helpSupportPortalName);
	_jparser.parseByNameThrow("tabName", tabName);
	_jparser.parseByNameThrow("lobbyMhtml", lobbyMhtml);
	_jparser.parseByNameThrow("mobileImage", mobileImage);
}

/* static */ void NewsServerClient::KnockoutLobbyPublData::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 version; _jparser.validateByNameThrow("version", version);
	AtfValidator::validateInt(_descr, "version", version, _checker, __FILE__, __LINE__);
	PString helpSupportPortalName; _jparser.validateByNameThrow("helpSupportPortalName", helpSupportPortalName);
	AtfValidator::validateInt(_descr, "helpSupportPortalName", helpSupportPortalName.length(), _checker, __FILE__, __LINE__);
	I18nPString tabName; _jparser.validateByNameThrow("tabName", tabName);
	I18nPString lobbyMhtml; _jparser.validateByNameThrow("lobbyMhtml", lobbyMhtml);
	I18nPString mobileImage; _jparser.validateByNameThrow("mobileImage", mobileImage);
}

/*static*/ void NewsServerClient::KnockoutLobbyPublData::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT32 version; _parser.parseUINT32(version);
	AtfValidator::validateInt(_descr, "version", version, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "helpSupportPortalName"); size_t szHelpSupportPortalName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "helpSupportPortalName", szHelpSupportPortalName, _checker, __FILE__, __LINE__);
	I18nPString tabName; tabName.parse(_parser);
	I18nPString lobbyMhtml; lobbyMhtml.parse(_parser);
	I18nPString mobileImage; mobileImage.parse(_parser);
}

//=================================================================
//                    KnockoutLobbyWidgetPublData
//=================================================================

NewsServerClient::KnockoutLobbyWidgetPublData::KnockoutLobbyWidgetPublData()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

NewsServerClient::KnockoutLobbyWidgetPublData::KnockoutLobbyWidgetPublData(KnockoutLobbyWidgetPublData&& _o)
	: sngWidgetMhtml(std::move(_o.sngWidgetMhtml))
	, regularTournWidgetMhtml(std::move(_o.regularTournWidgetMhtml))
	, brandedWidgets(std::move(_o.brandedWidgets))
{
}

NewsServerClient::KnockoutLobbyWidgetPublData& NewsServerClient::KnockoutLobbyWidgetPublData::operator=(KnockoutLobbyWidgetPublData&& _o)
{
	if(this != &_o)
	{
		sngWidgetMhtml = std::move(_o.sngWidgetMhtml);
		regularTournWidgetMhtml = std::move(_o.regularTournWidgetMhtml);
		brandedWidgets = std::move(_o.brandedWidgets);
	}
	return *this;
}

#endif

void NewsServerClient::KnockoutLobbyWidgetPublData::clear()
{
	sngWidgetMhtml.clear();
	regularTournWidgetMhtml.clear();
	brandedWidgets.clear();
}

bool NewsServerClient::KnockoutLobbyWidgetPublData::equals(const KnockoutLobbyWidgetPublData& _o) const
{
	return sngWidgetMhtml.equals(_o.sngWidgetMhtml) &&
		regularTournWidgetMhtml.equals(_o.regularTournWidgetMhtml) &&
		brandedWidgets.equals(_o.brandedWidgets);
}

const char *NewsServerClient::KnockoutLobbyWidgetPublData::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("sngWidgetMhtml=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, sngWidgetMhtml);
	_buf.append(',');
	_buf.append("regularTournWidgetMhtml=");
	Atf::AtfTempl<I18nPString>::ToTraceString(_buf, regularTournWidgetMhtml);
	_buf.append(',');
	_buf.append("brandedWidgets=");
	brandedWidgets.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

const char *NewsServerClient::KnockoutLobbyWidgetPublData::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "sngWidgetMhtml", sngWidgetMhtml);
	Atf::AtfTempl<I18nPString>::ToXmlString(_buf, "regularTournWidgetMhtml", regularTournWidgetMhtml);
	brandedWidgets.toXmlString("brandedWidgets", _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool NewsServerClient::KnockoutLobbyWidgetPublData::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("sngWidgetMhtml"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, sngWidgetMhtml);
		}
		else if (_element.equals("regularTournWidgetMhtml"))
		{
			Atf::AtfTempl<I18nPString>::FromXmlString(_value, regularTournWidgetMhtml);
		}
		else if (_element.equals("brandedWidgets"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< BrandedTournWidget, 4 > >::FromXmlString(_value, brandedWidgets)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void NewsServerClient::KnockoutLobbyWidgetPublData::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	sngWidgetMhtml.compose(_msg);
	regularTournWidgetMhtml.compose(_msg);
	brandedWidgets.composeMsg(_msg, _ignoreJSON);
}

void NewsServerClient::KnockoutLobbyWidgetPublData::parseMsg(CommMsgParser& _parser)
{
	sngWidgetMhtml.parse(_parser);
	regularTournWidgetMhtml.parse(_parser);
	brandedWidgets.parseMsg(_parser);
}

const char *NewsServerClient::KnockoutLobbyWidgetPublData::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("sngWidgetMhtml", sngWidgetMhtml);
	_jsonstr.compose("regularTournWidgetMhtml", regularTournWidgetMhtml);
	_jsonstr.compose("brandedWidgets", brandedWidgets);
	return _buf.c_str();
}

void NewsServerClient::KnockoutLobbyWidgetPublData::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("sngWidgetMhtml", sngWidgetMhtml);
	_jparser.parseByNameThrow("regularTournWidgetMhtml", regularTournWidgetMhtml);
	_jparser.parseByNameThrow("brandedWidgets", brandedWidgets);
}

/* static */ void NewsServerClient::KnockoutLobbyWidgetPublData::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	I18nPString sngWidgetMhtml; _jparser.validateByNameThrow("sngWidgetMhtml", sngWidgetMhtml);
	I18nPString regularTournWidgetMhtml; _jparser.validateByNameThrow("regularTournWidgetMhtml", regularTournWidgetMhtml);
	Atf::AtfVectorBase< BrandedTournWidget > brandedWidgets; _jparser.validateByNameThrow("brandedWidgets", brandedWidgets);
	AtfValidator::validateInt(_descr, "brandedWidgets", brandedWidgets.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void NewsServerClient::KnockoutLobbyWidgetPublData::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	I18nPString sngWidgetMhtml; sngWidgetMhtml.parse(_parser);
	I18nPString regularTournWidgetMhtml; regularTournWidgetMhtml.parse(_parser);
	PString _descbuf;
	int szBrandedWidgets = Atf::LAtfVector< BrandedTournWidget, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("brandedWidgets"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "brandedWidgets", szBrandedWidgets, _checker, __FILE__, __LINE__);
}

