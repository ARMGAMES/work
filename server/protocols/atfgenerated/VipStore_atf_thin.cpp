/**
 * VipStore_atf_thin.cpp
 *
 * This file was auto-generated from VipStore_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin VipStore_atf.txt
 */
 
#include "VipStore_atf_thin.h"

//=================================================================
//                    VipStoreAlternateClientAddress
//=================================================================

VipStore::cli::VipStoreAlternateClientAddress::VipStoreAlternateClientAddress()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::VipStoreAlternateClientAddress::VipStoreAlternateClientAddress(VipStoreAlternateClientAddress&& _o)
	: addrId(std::move(_o.addrId))
	, userId(std::move(_o.userId))
	, fullName(std::move(_o.fullName))
	, addr1(std::move(_o.addr1))
	, addr2(std::move(_o.addr2))
	, city(std::move(_o.city))
	, state(std::move(_o.state))
	, country(std::move(_o.country))
	, code(std::move(_o.code))
	, phone(std::move(_o.phone))
	, fiscalCode(std::move(_o.fiscalCode))
{
}

VipStore::cli::VipStoreAlternateClientAddress& VipStore::cli::VipStoreAlternateClientAddress::operator=(VipStoreAlternateClientAddress&& _o)
{
	if(this != &_o)
	{
		addrId = std::move(_o.addrId);
		userId = std::move(_o.userId);
		fullName = std::move(_o.fullName);
		addr1 = std::move(_o.addr1);
		addr2 = std::move(_o.addr2);
		city = std::move(_o.city);
		state = std::move(_o.state);
		country = std::move(_o.country);
		code = std::move(_o.code);
		phone = std::move(_o.phone);
		fiscalCode = std::move(_o.fiscalCode);
	}
	return *this;
}

#endif

void VipStore::cli::VipStoreAlternateClientAddress::clear()
{
	addrId = 0;
	userId.clear();
	fullName.clear();
	addr1.clear();
	addr2.clear();
	city.clear();
	state.clear();
	country.clear();
	code.clear();
	phone.clear();
	fiscalCode.clear();
}

bool VipStore::cli::VipStoreAlternateClientAddress::equals(const VipStoreAlternateClientAddress& _o) const
{
	return addrId == _o.addrId &&
		userId.equals(_o.userId) &&
		fullName.equals(_o.fullName) &&
		addr1.equals(_o.addr1) &&
		addr2.equals(_o.addr2) &&
		city.equals(_o.city) &&
		state.equals(_o.state) &&
		country.equals(_o.country) &&
		code.equals(_o.code) &&
		phone.equals(_o.phone) &&
		fiscalCode.equals(_o.fiscalCode);
}

const char *VipStore::cli::VipStoreAlternateClientAddress::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("addrId=");
	_buf.appendUint(addrId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("fullName=");
	_buf.append(fullName);
	_buf.append(',');
	_buf.append("addr1=");
	_buf.append(addr1);
	_buf.append(',');
	_buf.append("addr2=");
	_buf.append(addr2);
	_buf.append(',');
	_buf.append("city=");
	_buf.append(city);
	_buf.append(',');
	_buf.append("state=");
	_buf.append(state);
	_buf.append(',');
	_buf.append("country=");
	_buf.append(country);
	_buf.append(',');
	_buf.append("code=");
	_buf.append(code);
	_buf.append(',');
	_buf.append("phone=");
	_buf.append(phone);
	_buf.append(',');
	_buf.append("fiscalCode=");
	_buf.append(fiscalCode);
	_buf.append('}');
	return _buf.c_str();
}

void VipStore::cli::VipStoreAlternateClientAddress::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(addrId);
	_msg.composeString(userId);
	_msg.composeString(fullName);
	_msg.composeString(addr1);
	_msg.composeString(addr2);
	_msg.composeString(city);
	_msg.composeString(state);
	_msg.composeString(country);
	_msg.composeString(code);
	_msg.composeString(phone);
	_msg.composeString(fiscalCode);
}

void VipStore::cli::VipStoreAlternateClientAddress::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(addrId);
	_parser.parseStringP(userId);
	_parser.parseStringP(fullName);
	_parser.parseStringP(addr1);
	_parser.parseStringP(addr2);
	_parser.parseStringP(city);
	_parser.parseStringP(state);
	_parser.parseStringP(country);
	_parser.parseStringP(code);
	_parser.parseStringP(phone);
	if(_parser.parseEnded()) return;
	_parser.parseStringP(fiscalCode);
}

/*static*/ void VipStore::cli::VipStoreAlternateClientAddress::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT32 addrId; _parser.parseUINT32(addrId);
	AtfValidator::validateInt(_descr, "addrId", addrId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "userId", szUserId, 20, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "fullName"); size_t szFullName = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "fullName", szFullName, 321, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "addr1"); size_t szAddr1 = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "addr1", szAddr1, 321, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "addr2"); size_t szAddr2 = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "addr2", szAddr2, 80, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "city"); size_t szCity = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "city", szCity, 81, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "state"); size_t szState = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "state", szState, 20, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "country"); size_t szCountry = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "country", szCountry, 20, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "code"); size_t szCode = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "code", szCode, 10, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "phone"); size_t szPhone = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "phone", szPhone, 100, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	_parser.parseStringN(_dummy, 0, "fiscalCode"); size_t szFiscalCode = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "fiscalCode", szFiscalCode, 100, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    FppStoreOrder
//=================================================================

VipStore::cli::FppStoreOrder::FppStoreOrder()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::FppStoreOrder::FppStoreOrder(FppStoreOrder&& _o)
	: orderId(std::move(_o.orderId))
	, price(std::move(_o.price))
	, userId(std::move(_o.userId))
	, itemDescr(std::move(_o.itemDescr))
	, status(std::move(_o.status))
	, trackingId(std::move(_o.trackingId))
	, comment(std::move(_o.comment))
	, when(std::move(_o.when))
	, specs(std::move(_o.specs))
	, itemId(std::move(_o.itemId))
	, shipper(std::move(_o.shipper))
	, trackingUrl(std::move(_o.trackingUrl))
	, itemQuantity(std::move(_o.itemQuantity))
	, cartId(std::move(_o.cartId))
	, fulfillmentId(std::move(_o.fulfillmentId))
	, altAddr(std::move(_o.altAddr))
	, flags(std::move(_o.flags))
{
}

VipStore::cli::FppStoreOrder& VipStore::cli::FppStoreOrder::operator=(FppStoreOrder&& _o)
{
	if(this != &_o)
	{
		orderId = std::move(_o.orderId);
		price = std::move(_o.price);
		userId = std::move(_o.userId);
		itemDescr = std::move(_o.itemDescr);
		status = std::move(_o.status);
		trackingId = std::move(_o.trackingId);
		comment = std::move(_o.comment);
		when = std::move(_o.when);
		specs = std::move(_o.specs);
		itemId = std::move(_o.itemId);
		shipper = std::move(_o.shipper);
		trackingUrl = std::move(_o.trackingUrl);
		itemQuantity = std::move(_o.itemQuantity);
		cartId = std::move(_o.cartId);
		fulfillmentId = std::move(_o.fulfillmentId);
		altAddr = std::move(_o.altAddr);
		flags = std::move(_o.flags);
	}
	return *this;
}

#endif

void VipStore::cli::FppStoreOrder::clear()
{
	orderId = 0;
	price = 0;
	userId.clear();
	itemDescr.clear();
	status.clear();
	trackingId.clear();
	comment.clear();
	when.setNull();
	specs.clear();
	itemId = 0;
	shipper.clear();
	trackingUrl.clear();
	itemQuantity = 0;
	cartId = 0;
	fulfillmentId = 0;
	altAddr.clear();
	flags = 0;
}

bool VipStore::cli::FppStoreOrder::equals(const FppStoreOrder& _o) const
{
	return orderId == _o.orderId &&
		price == _o.price &&
		userId.equals(_o.userId) &&
		itemDescr.equals(_o.itemDescr) &&
		status.equals(_o.status) &&
		trackingId.equals(_o.trackingId) &&
		comment.equals(_o.comment) &&
		when.equals(_o.when) &&
		specs.equals(_o.specs) &&
		itemId == _o.itemId &&
		shipper.equals(_o.shipper) &&
		trackingUrl.equals(_o.trackingUrl) &&
		itemQuantity == _o.itemQuantity &&
		cartId == _o.cartId &&
		fulfillmentId == _o.fulfillmentId &&
		altAddr.equals(_o.altAddr) &&
		flags == _o.flags;
}

const char *VipStore::cli::FppStoreOrder::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("orderId=");
	_buf.appendUint(orderId);
	_buf.append(',');
	_buf.append("price=");
	_buf.appendUint(price);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("itemDescr=");
	_buf.append(itemDescr);
	_buf.append(',');
	_buf.append("status=");
	_buf.append(status);
	_buf.append(',');
	_buf.append("trackingId=");
	_buf.append(trackingId);
	_buf.append(',');
	_buf.append("comment=");
	_buf.append(comment);
	_buf.append(',');
	_buf.append("when=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, when);
	_buf.append(',');
	_buf.append("specs=");
	specs.toTraceString(_buf);
	_buf.append(',');
	_buf.append("itemId=");
	_buf.appendUint(itemId);
	_buf.append(',');
	_buf.append("shipper=");
	_buf.append(shipper);
	_buf.append(',');
	_buf.append("trackingUrl=");
	_buf.append(trackingUrl);
	_buf.append(',');
	_buf.append("itemQuantity=");
	_buf.appendUint(itemQuantity);
	_buf.append(',');
	_buf.append("cartId=");
	_buf.appendUint(cartId);
	_buf.append(',');
	_buf.append("fulfillmentId=");
	_buf.appendUint(fulfillmentId);
	_buf.append(',');
	_buf.append("altAddr=");
	altAddr.toTraceString(_buf);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append('}');
	return _buf.c_str();
}

void VipStore::cli::FppStoreOrder::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(orderId);
	_msg.composeUINT32(price);
	_msg.composeString(userId);
	_msg.composeString(itemDescr);
	_msg.composeString(status);
	_msg.composeString(trackingId);
	_msg.composeString(comment);
	_msg.composeSrvTime(when);
	specs.composeMsg(_msg);
	_msg.composeUINT32(itemId);
	_msg.composeString(shipper);
	_msg.composeString(trackingUrl);
	_msg.composeUINT32(itemQuantity);
	_msg.composeUINT32(cartId);
	_msg.composeUINT32(fulfillmentId);
	altAddr.composeMsg(_msg);
	_msg.composeUINT32(flags);
}

void VipStore::cli::FppStoreOrder::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(orderId);
	_parser.parseUINT32(price);
	_parser.parseStringP(userId);
	_parser.parseStringP(itemDescr);
	_parser.parseStringP(status);
	_parser.parseStringP(trackingId);
	_parser.parseStringP(comment);
	_parser.parseSrvTime(when);
	specs.parseMsg(_parser);
	_parser.parseUINT32(itemId);
	_parser.parseStringP(shipper);
	_parser.parseStringP(trackingUrl);
	_parser.parseUINT32(itemQuantity);
	_parser.parseUINT32(cartId);
	_parser.parseUINT32(fulfillmentId);
	altAddr.parseMsg(_parser);
	_parser.parseUINT32(flags);
}

/*static*/ void VipStore::cli::FppStoreOrder::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT32 orderId; _parser.parseUINT32(orderId);
	AtfValidator::validateInt(_descr, "orderId", orderId, _checker, __FILE__, __LINE__);
	UINT32 price; _parser.parseUINT32(price);
	AtfValidator::validateInt(_descr, "price", price, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "itemDescr"); size_t szItemDescr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "itemDescr", szItemDescr, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "status"); size_t szStatus = strlen(_dummy);
	AtfValidator::validateInt(_descr, "status", szStatus, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "trackingId"); size_t szTrackingId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "trackingId", szTrackingId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "comment"); size_t szComment = strlen(_dummy);
	AtfValidator::validateInt(_descr, "comment", szComment, _checker, __FILE__, __LINE__);
	CommSrvTime when; _parser.parseSrvTime(when);
	AtfValidator::validateSrvDateTime(_descr, "when", when, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szSpecs = ThinAtf::LAtfVector< PString, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("specs"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "specs", szSpecs, _checker, __FILE__, __LINE__);
	UINT32 itemId; _parser.parseUINT32(itemId);
	AtfValidator::validateInt(_descr, "itemId", itemId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "shipper"); size_t szShipper = strlen(_dummy);
	AtfValidator::validateInt(_descr, "shipper", szShipper, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "trackingUrl"); size_t szTrackingUrl = strlen(_dummy);
	AtfValidator::validateInt(_descr, "trackingUrl", szTrackingUrl, _checker, __FILE__, __LINE__);
	UINT32 itemQuantity; _parser.parseUINT32(itemQuantity);
	AtfValidator::validateInt(_descr, "itemQuantity", itemQuantity, _checker, __FILE__, __LINE__);
	UINT32 cartId; _parser.parseUINT32(cartId);
	AtfValidator::validateInt(_descr, "cartId", cartId, _checker, __FILE__, __LINE__);
	UINT32 fulfillmentId; _parser.parseUINT32(fulfillmentId);
	AtfValidator::validateInt(_descr, "fulfillmentId", fulfillmentId, _checker, __FILE__, __LINE__);
	VipStoreAlternateClientAddress::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("altAddr"), _fieldsWithUnparsedContent);
	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    OrderHistoryDigestData
//=================================================================

VipStore::cli::OrderHistoryDigestData::OrderHistoryDigestData()
{
	clear();
}

void VipStore::cli::OrderHistoryDigestData::clear()
{
	itemId = 0;
	numPurchased = 0;
}

bool VipStore::cli::OrderHistoryDigestData::equals(const OrderHistoryDigestData& _o) const
{
	return itemId == _o.itemId &&
		numPurchased == _o.numPurchased;
}

const char *VipStore::cli::OrderHistoryDigestData::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("itemId=");
	_buf.appendUint(itemId);
	_buf.append(',');
	_buf.append("numPurchased=");
	_buf.appendUint(numPurchased);
	_buf.append('}');
	return _buf.c_str();
}

void VipStore::cli::OrderHistoryDigestData::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(itemId);
	_msg.composeUINT32(numPurchased);
}

void VipStore::cli::OrderHistoryDigestData::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(itemId);
	_parser.parseUINT32(numPurchased);
}

/*static*/ void VipStore::cli::OrderHistoryDigestData::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	UINT32 itemId; _parser.parseUINT32(itemId);
	AtfValidator::validateInt(_descr, "itemId", itemId, _checker, __FILE__, __LINE__);
	UINT32 numPurchased; _parser.parseUINT32(numPurchased);
	AtfValidator::validateInt(_descr, "numPurchased", numPurchased, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2(Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2&& _o)
	: notUsedStr(std::move(_o.notUsedStr))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2& VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2::operator=(Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2&& _o)
{
	if(this != &_o)
	{
		notUsedStr = std::move(_o.notUsedStr);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2::clear()
{
	notUsedStr.clear();
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2::equals(const Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2& _o) const
{
	return notUsedStr.equals(_o.notUsedStr);
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_USER_ORDER_HISTORY2).append(")");
	_buf.append(',');
	_buf.append("notUsedStr=");
	_buf.append(notUsedStr);
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(notUsedStr);
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(notUsedStr);
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_USER_ORDER_HISTORY2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "notUsedStr"); size_t szNotUsedStr = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "notUsedStr", szNotUsedStr, 20, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY(Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, orders(std::move(_o.orders))
	, preMidgrationOrders(std::move(_o.preMidgrationOrders))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY& VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY::operator=(Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		orders = std::move(_o.orders);
		preMidgrationOrders = std::move(_o.preMidgrationOrders);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
	orders.clear();
	preMidgrationOrders.clear();
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY::equals(const Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		orders.equals(_o.orders) &&
		preMidgrationOrders.equals(_o.preMidgrationOrders);
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
	}
	else
	{
		_buf.append(',');
		_buf.append("orders=");
		orders.toTraceString(_buf);
		_buf.append(',');
		_buf.append("preMidgrationOrders=");
		preMidgrationOrders.toTraceString(_buf);
	}
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errStr);
	}
	else
	{
		orders.composeMsg(_msg);
		preMidgrationOrders.composeMsg(_msg);
	}
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errStr);
	}
	else
	{
		orders.parseMsg(_parser);
		preMidgrationOrders.parseMsg(_parser);
	}
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szOrders = ThinAtf::LAtfVector< FppStoreOrder, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("orders"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "orders", szOrders, _checker, __FILE__, __LINE__);
		int szPreMidgrationOrders = ThinAtf::LAtfVector< FppStoreOrder, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("preMidgrationOrders"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "preMidgrationOrders", szPreMidgrationOrders, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST(Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST&& _o)
	: userid(std::move(_o.userid))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST& VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST::operator=(Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST&& _o)
{
	if(this != &_o)
	{
		userid = std::move(_o.userid);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST::clear()
{
	userid.clear();
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST::equals(const Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST& _o) const
{
	return userid.equals(_o.userid);
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST).append(")");
	_buf.append(',');
	_buf.append("userid=");
	_buf.append(userid);
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userid);
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userid);
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userid"); size_t szUserid = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "userid", szUserid, 20, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY(Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, data(std::move(_o.data))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY& VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY::operator=(Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		data = std::move(_o.data);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
	data.clear();
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY::equals(const Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		data.equals(_o.data);
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
	}
	else
	{
		_buf.append(',');
		_buf.append("data=");
		data.toTraceString(_buf);
	}
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errStr);
	}
	else
	{
		data.composeMsg(_msg);
	}
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errStr);
	}
	else
	{
		data.parseMsg(_parser);
	}
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szData = ThinAtf::LAtfVector< OrderHistoryDigestData, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("data"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "data", szData, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM(Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM&& _o)
	: notUsedStr(std::move(_o.notUsedStr))
	, itemId(std::move(_o.itemId))
	, couponCode(std::move(_o.couponCode))
	, itemQuantity(std::move(_o.itemQuantity))
	, alternateAddress(std::move(_o.alternateAddress))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM& VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM::operator=(Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM&& _o)
{
	if(this != &_o)
	{
		notUsedStr = std::move(_o.notUsedStr);
		itemId = std::move(_o.itemId);
		couponCode = std::move(_o.couponCode);
		itemQuantity = std::move(_o.itemQuantity);
		alternateAddress = std::move(_o.alternateAddress);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM::clear()
{
	notUsedStr.clear();
	itemId = 0;
	couponCode.clear();
	itemQuantity = 0;
	alternateAddress.clear();
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM::equals(const Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM& _o) const
{
	return notUsedStr.equals(_o.notUsedStr) &&
		itemId == _o.itemId &&
		couponCode.equals(_o.couponCode) &&
		itemQuantity == _o.itemQuantity &&
		alternateAddress.equals(_o.alternateAddress);
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_PREPURCHASE_ITEM).append(")");
	_buf.append(',');
	_buf.append("notUsedStr=");
	_buf.append(notUsedStr);
	_buf.append(',');
	_buf.append("itemId=");
	_buf.appendUint(itemId);
	_buf.append(',');
	_buf.append("couponCode=");
	_buf.append(couponCode);
	_buf.append(',');
	_buf.append("itemQuantity=");
	_buf.appendUint(itemQuantity);
	_buf.append(',');
	_buf.append("alternateAddress=");
	alternateAddress.toTraceString(_buf);
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(notUsedStr);
	_msg.composeUINT32(itemId);
	_msg.composeString(couponCode);
	_msg.composeUINT32(itemQuantity);
	alternateAddress.composeMsg(_msg);
}

void VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(notUsedStr);
	_parser.parseUINT32(itemId);
	_parser.parseStringP(couponCode);
	_parser.parseUINT32(itemQuantity);
	if(_parser.parseEnded()) return;
	alternateAddress.parseMsg(_parser);
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_PREPURCHASE_ITEM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "notUsedStr"); size_t szNotUsedStr = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "notUsedStr", szNotUsedStr, 20, _checker, __FILE__, __LINE__);
	UINT32 itemId; _parser.parseUINT32(itemId);
	AtfValidator::validateInt(_descr, "itemId", itemId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "couponCode"); size_t szCouponCode = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "couponCode", szCouponCode, 40, _checker, __FILE__, __LINE__);
	UINT32 itemQuantity; _parser.parseUINT32(itemQuantity);
	AtfValidator::validateIntRange(_descr, "itemQuantity", itemQuantity, 1, 2000, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	PString _descbuf;
	VipStoreAlternateClientAddress::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("alternateAddress"), _fieldsWithUnparsedContent);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY(Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, itemCost(std::move(_o.itemCost))
	, couponDiscount(std::move(_o.couponDiscount))
	, refund(std::move(_o.refund))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY& VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY::operator=(Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		itemCost = std::move(_o.itemCost);
		couponDiscount = std::move(_o.couponDiscount);
		refund = std::move(_o.refund);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
	itemCost = 0;
	couponDiscount = 0;
	refund = 0;
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY::equals(const Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		itemCost == _o.itemCost &&
		couponDiscount == _o.couponDiscount &&
		refund == _o.refund;
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
	}
	else
	{
		_buf.append(',');
		_buf.append("itemCost=");
		_buf.appendUint(itemCost);
		_buf.append(',');
		_buf.append("couponDiscount=");
		_buf.appendUint(couponDiscount);
		_buf.append(',');
		_buf.append("refund=");
		_buf.appendUint(refund);
	}
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errStr);
	}
	else
	{
		_msg.composeUINT32(itemCost);
		_msg.composeUINT32(couponDiscount);
		_msg.composeUINT32(refund);
	}
}

void VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errStr);
	}
	else
	{
		_parser.parseUINT32(itemCost);
		_parser.parseUINT32(couponDiscount);
		_parser.parseUINT32(refund);
	}
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 itemCost; _parser.parseUINT32(itemCost);
		AtfValidator::validateInt(_descr, "itemCost", itemCost, _checker, __FILE__, __LINE__);
		UINT32 couponDiscount; _parser.parseUINT32(couponDiscount);
		AtfValidator::validateInt(_descr, "couponDiscount", couponDiscount, _checker, __FILE__, __LINE__);
		UINT32 refund; _parser.parseUINT32(refund);
		AtfValidator::validateInt(_descr, "refund", refund, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_PURCHASE_ITEM
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM::Protocol_MSG_VIPSTORE_PURCHASE_ITEM()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM::Protocol_MSG_VIPSTORE_PURCHASE_ITEM(Protocol_MSG_VIPSTORE_PURCHASE_ITEM&& _o)
	: parsedUserId(std::move(_o.parsedUserId))
	, itemId(std::move(_o.itemId))
	, specs(std::move(_o.specs))
	, userPhone(std::move(_o.userPhone))
	, couponCode(std::move(_o.couponCode))
	, itemQuantity(std::move(_o.itemQuantity))
	, alternateAddress(std::move(_o.alternateAddress))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM& VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM::operator=(Protocol_MSG_VIPSTORE_PURCHASE_ITEM&& _o)
{
	if(this != &_o)
	{
		parsedUserId = std::move(_o.parsedUserId);
		itemId = std::move(_o.itemId);
		specs = std::move(_o.specs);
		userPhone = std::move(_o.userPhone);
		couponCode = std::move(_o.couponCode);
		itemQuantity = std::move(_o.itemQuantity);
		alternateAddress = std::move(_o.alternateAddress);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM::clear()
{
	parsedUserId.clear();
	itemId = 0;
	specs.clear();
	userPhone.clear();
	couponCode.clear();
	itemQuantity = 0;
	alternateAddress.clear();
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM::equals(const Protocol_MSG_VIPSTORE_PURCHASE_ITEM& _o) const
{
	return parsedUserId.equals(_o.parsedUserId) &&
		itemId == _o.itemId &&
		specs.equals(_o.specs) &&
		userPhone.equals(_o.userPhone) &&
		couponCode.equals(_o.couponCode) &&
		itemQuantity == _o.itemQuantity &&
		alternateAddress.equals(_o.alternateAddress);
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_PURCHASE_ITEM).append(")");
	_buf.append(',');
	_buf.append("parsedUserId=");
	_buf.append(parsedUserId);
	_buf.append(',');
	_buf.append("itemId=");
	_buf.appendUint(itemId);
	_buf.append(',');
	_buf.append("specs=");
	specs.toTraceString(_buf);
	_buf.append(',');
	_buf.append("userPhone=");
	_buf.append(userPhone);
	_buf.append(',');
	_buf.append("couponCode=");
	_buf.append(couponCode);
	_buf.append(',');
	_buf.append("itemQuantity=");
	_buf.appendUint(itemQuantity);
	_buf.append(',');
	_buf.append("alternateAddress=");
	alternateAddress.toTraceString(_buf);
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(parsedUserId);
	_msg.composeUINT32(itemId);
	specs.composeMsg(_msg);
	_msg.composeString(userPhone);
	_msg.composeString(couponCode);
	_msg.composeUINT32(itemQuantity);
	alternateAddress.composeMsg(_msg);
}

void VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(parsedUserId);
	_parser.parseUINT32(itemId);
	specs.parseMsg(_parser);
	_parser.parseStringP(userPhone);
	_parser.parseStringP(couponCode);
	_parser.parseUINT32(itemQuantity);
	if(_parser.parseEnded()) return;
	alternateAddress.parseMsg(_parser);
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_PURCHASE_ITEM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "parsedUserId"); size_t szParsedUserId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "parsedUserId", szParsedUserId, 20, _checker, __FILE__, __LINE__);
	UINT32 itemId; _parser.parseUINT32(itemId);
	AtfValidator::validateInt(_descr, "itemId", itemId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szSpecs = ThinAtf::LAtfVector< PString, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("specs"), _fieldsWithUnparsedContent);
	AtfValidator::validateIntMax(_descr, "specs", szSpecs, 1024, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "userPhone"); size_t szUserPhone = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "userPhone", szUserPhone, 100, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "couponCode"); size_t szCouponCode = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "couponCode", szCouponCode, 40, _checker, __FILE__, __LINE__);
	UINT32 itemQuantity; _parser.parseUINT32(itemQuantity);
	AtfValidator::validateIntRange(_descr, "itemQuantity", itemQuantity, 1, 2000, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	VipStoreAlternateClientAddress::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("alternateAddress"), _fieldsWithUnparsedContent);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY(Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, fppBalance(std::move(_o.fppBalance))
	, totalCost(std::move(_o.totalCost))
	, discount(std::move(_o.discount))
	, couponRemainder(std::move(_o.couponRemainder))
	, giftCardSpecialType(std::move(_o.giftCardSpecialType))
	, isInstantBonus(std::move(_o.isInstantBonus))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY& VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY::operator=(Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		fppBalance = std::move(_o.fppBalance);
		totalCost = std::move(_o.totalCost);
		discount = std::move(_o.discount);
		couponRemainder = std::move(_o.couponRemainder);
		giftCardSpecialType = std::move(_o.giftCardSpecialType);
		isInstantBonus = std::move(_o.isInstantBonus);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
	fppBalance = 0;
	totalCost = 0;
	discount = 0;
	couponRemainder = 0;
	giftCardSpecialType = 0;
	isInstantBonus = false;
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY::equals(const Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		fppBalance == _o.fppBalance &&
		totalCost == _o.totalCost &&
		discount == _o.discount &&
		couponRemainder == _o.couponRemainder &&
		giftCardSpecialType == _o.giftCardSpecialType &&
		isInstantBonus == _o.isInstantBonus;
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_PURCHASE_ITEM_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
	}
	else
	{
		_buf.append(',');
		_buf.append("fppBalance=");
		_buf.appendUint64(fppBalance);
		_buf.append(',');
		_buf.append("totalCost=");
		_buf.appendUint(totalCost);
		_buf.append(',');
		_buf.append("discount=");
		_buf.appendUint(discount);
		_buf.append(',');
		_buf.append("couponRemainder=");
		_buf.appendUint(couponRemainder);
		_buf.append(',');
		_buf.append("giftCardSpecialType=");
		_buf.appendUint(giftCardSpecialType);
		_buf.append(',');
		_buf.append("isInstantBonus=");
		_buf.appendUint(isInstantBonus);
	}
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errStr);
	}
	else
	{
		_msg.composeUINT64(fppBalance);
		_msg.composeUINT32(totalCost);
		_msg.composeUINT32(discount);
		_msg.composeUINT32(couponRemainder);
		_msg.composeUINT32(giftCardSpecialType);
		_msg.composeBOOL(isInstantBonus);
	}
}

void VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errStr);
	}
	else
	{
		_parser.parseUINT64(fppBalance);
		_parser.parseUINT32(totalCost);
		_parser.parseUINT32(discount);
		_parser.parseUINT32(couponRemainder);
		_parser.parseUINT32(giftCardSpecialType);
		_parser.parseBOOL(isInstantBonus);
	}
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_PURCHASE_ITEM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT64 fppBalance; _parser.parseUINT64(fppBalance);
		AtfValidator::validateUint(_descr, "fppBalance", fppBalance, _checker, __FILE__, __LINE__);
		UINT32 totalCost; _parser.parseUINT32(totalCost);
		AtfValidator::validateInt(_descr, "totalCost", totalCost, _checker, __FILE__, __LINE__);
		UINT32 discount; _parser.parseUINT32(discount);
		AtfValidator::validateInt(_descr, "discount", discount, _checker, __FILE__, __LINE__);
		UINT32 couponRemainder; _parser.parseUINT32(couponRemainder);
		AtfValidator::validateInt(_descr, "couponRemainder", couponRemainder, _checker, __FILE__, __LINE__);
		UINT32 giftCardSpecialType; _parser.parseUINT32(giftCardSpecialType);
		AtfValidator::validateInt(_descr, "giftCardSpecialType", giftCardSpecialType, _checker, __FILE__, __LINE__);
		bool isInstantBonus; _parser.parseBOOL(isInstantBonus);
		AtfValidator::validateInt(_descr, "isInstantBonus", isInstantBonus, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    InvItemStockCli2
//=================================================================

VipStore::cli::InvItemStockCli2::InvItemStockCli2()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::InvItemStockCli2::InvItemStockCli2(InvItemStockCli2&& _o)
	: available(std::move(_o.available))
	, stockCount(std::move(_o.stockCount))
	, unlimitedStock(std::move(_o.unlimitedStock))
	, specs(std::move(_o.specs))
{
}

VipStore::cli::InvItemStockCli2& VipStore::cli::InvItemStockCli2::operator=(InvItemStockCli2&& _o)
{
	if(this != &_o)
	{
		available = std::move(_o.available);
		stockCount = std::move(_o.stockCount);
		unlimitedStock = std::move(_o.unlimitedStock);
		specs = std::move(_o.specs);
	}
	return *this;
}

#endif

void VipStore::cli::InvItemStockCli2::clear()
{
	available = false;
	stockCount = 0;
	unlimitedStock = false;
	specs.clear();
}

bool VipStore::cli::InvItemStockCli2::equals(const InvItemStockCli2& _o) const
{
	return available == _o.available &&
		stockCount == _o.stockCount &&
		unlimitedStock == _o.unlimitedStock &&
		specs.equals(_o.specs);
}

const char *VipStore::cli::InvItemStockCli2::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("available=");
	_buf.appendUint(available);
	_buf.append(',');
	_buf.append("stockCount=");
	_buf.appendInt(stockCount);
	_buf.append(',');
	_buf.append("unlimitedStock=");
	_buf.appendUint(unlimitedStock);
	_buf.append(',');
	_buf.append("specs=");
	specs.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void VipStore::cli::InvItemStockCli2::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(InvItemStockCli2())) // not empty
	{
		_body.composeBOOL(available);
		_body.composeINT32(stockCount);
		_body.composeBOOL(unlimitedStock);
		specs.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void VipStore::cli::InvItemStockCli2::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseBOOL(available);
	_parser0.parseINT32(stockCount);
	_parser0.parseBOOL(unlimitedStock);
	specs.parseMsg(_parser0);
}

/*static*/ void VipStore::cli::InvItemStockCli2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	bool available; _parser0.parseBOOL(available);
	AtfValidator::validateInt(_descr, "available", available, _checker, __FILE__, __LINE__);
	INT32 stockCount; _parser0.parseINT32(stockCount);
	AtfValidator::validateInt(_descr, "stockCount", stockCount, _checker, __FILE__, __LINE__);
	bool unlimitedStock; _parser0.parseBOOL(unlimitedStock);
	AtfValidator::validateInt(_descr, "unlimitedStock", unlimitedStock, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szSpecs = ThinAtf::LAtfVector< PString, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("specs"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "specs", szSpecs, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2(Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2&& _o)
	: itemId(std::move(_o.itemId))
	, specialType(std::move(_o.specialType))
	, unusedCouponCode(std::move(_o.unusedCouponCode))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2& VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2::operator=(Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2&& _o)
{
	if(this != &_o)
	{
		itemId = std::move(_o.itemId);
		specialType = std::move(_o.specialType);
		unusedCouponCode = std::move(_o.unusedCouponCode);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2::clear()
{
	itemId = 0;
	specialType = 0;
	unusedCouponCode.clear();
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2::equals(const Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2& _o) const
{
	return itemId == _o.itemId &&
		specialType == _o.specialType &&
		unusedCouponCode.equals(_o.unusedCouponCode);
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_INV_GET_ITEM_STOCK2).append(")");
	_buf.append(',');
	_buf.append("itemId=");
	_buf.appendUint(itemId);
	_buf.append(',');
	_buf.append("specialType=");
	_buf.appendUint(specialType);
	_buf.append(',');
	_buf.append("unusedCouponCode=");
	_buf.append(unusedCouponCode);
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(itemId);
	_msg.composeUINT32(specialType);
	_msg.composeString(unusedCouponCode);
}

void VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(itemId);
	_parser.parseUINT32(specialType);
	if(_parser.parseEnded()) return;
	_parser.parseStringP(unusedCouponCode);
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_INV_GET_ITEM_STOCK2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 itemId; _parser.parseUINT32(itemId);
	AtfValidator::validateInt(_descr, "itemId", itemId, _checker, __FILE__, __LINE__);
	UINT32 specialType; _parser.parseUINT32(specialType);
	AtfValidator::validateIntRange(_descr, "specialType", specialType, eFppStoreRegular, eFppStoreRegular, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	_parser.parseStringN(_dummy, 0, "unusedCouponCode"); size_t szUnusedCouponCode = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "unusedCouponCode", szUnusedCouponCode, 21, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY(Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, stocks(std::move(_o.stocks))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY& VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY::operator=(Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		stocks = std::move(_o.stocks);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
	stocks.clear();
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY::equals(const Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		stocks.equals(_o.stocks);
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
	}
	else
	{
		_buf.append(',');
		_buf.append("stocks=");
		stocks.toTraceString(_buf);
	}
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errStr);
	}
	else
	{
		stocks.composeMsg(_msg);
	}
}

void VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errStr);
	}
	else
	{
		stocks.parseMsg(_parser);
	}
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szStocks = ThinAtf::LAtfVector< InvItemStockCli2, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("stocks"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "stocks", szStocks, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER(Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER&& _o)
	: parsedUserId(std::move(_o.parsedUserId))
	, orderId(std::move(_o.orderId))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER& VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER::operator=(Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER&& _o)
{
	if(this != &_o)
	{
		parsedUserId = std::move(_o.parsedUserId);
		orderId = std::move(_o.orderId);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER::clear()
{
	parsedUserId.clear();
	orderId = 0;
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER::equals(const Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER& _o) const
{
	return parsedUserId.equals(_o.parsedUserId) &&
		orderId == _o.orderId;
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_USER_CANCEL_ORDER).append(")");
	_buf.append(',');
	_buf.append("parsedUserId=");
	_buf.append(parsedUserId);
	_buf.append(',');
	_buf.append("orderId=");
	_buf.appendUint(orderId);
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(parsedUserId);
	_msg.composeUINT32(orderId);
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(parsedUserId);
	_parser.parseUINT32(orderId);
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_USER_CANCEL_ORDER";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "parsedUserId"); size_t szParsedUserId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "parsedUserId", szParsedUserId, 20, _checker, __FILE__, __LINE__);
	UINT32 orderId; _parser.parseUINT32(orderId);
	AtfValidator::validateInt(_descr, "orderId", orderId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY(Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, userIntId(std::move(_o.userIntId))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY& VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY::operator=(Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		userIntId = std::move(_o.userIntId);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
	userIntId = 0;
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY::equals(const Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		userIntId == _o.userIntId;
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
	}
	else
	{
		_buf.append(',');
		_buf.append("userIntId=");
		_buf.appendUint(userIntId);
	}
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errStr);
	}
	else
	{
		_msg.composeUINT32(userIntId);
	}
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errStr);
	}
	else
	{
		_parser.parseUINT32(userIntId);
	}
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 userIntId; _parser.parseUINT32(userIntId);
		AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS(Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS&& _o)
	: parsedUserId(std::move(_o.parsedUserId))
	, orderIds(std::move(_o.orderIds))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS& VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS::operator=(Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS&& _o)
{
	if(this != &_o)
	{
		parsedUserId = std::move(_o.parsedUserId);
		orderIds = std::move(_o.orderIds);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS::clear()
{
	parsedUserId.clear();
	orderIds.clear();
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS::equals(const Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS& _o) const
{
	return parsedUserId.equals(_o.parsedUserId) &&
		orderIds.equals(_o.orderIds);
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_USER_CANCEL_ORDERS).append(")");
	_buf.append(',');
	_buf.append("parsedUserId=");
	_buf.append(parsedUserId);
	_buf.append(',');
	_buf.append("orderIds=");
	orderIds.toTraceString(_buf);
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(parsedUserId);
	orderIds.composeMsg(_msg);
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(parsedUserId);
	orderIds.parseMsg(_parser);
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_USER_CANCEL_ORDERS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "parsedUserId"); size_t szParsedUserId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "parsedUserId", szParsedUserId, 20, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szOrderIds = ThinAtf::LAtfVector< UINT32, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("orderIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateIntMax(_descr, "orderIds", szOrderIds, 1024, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY
//=================================================================

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY(Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, userIntId(std::move(_o.userIntId))
{
}

VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY& VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY::operator=(Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		userIntId = std::move(_o.userIntId);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
	userIntId = 0;
}

bool VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY::equals(const Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		userIntId == _o.userIntId;
}

const char *VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
	}
	else
	{
		_buf.append(',');
		_buf.append("userIntId=");
		_buf.appendUint(userIntId);
	}
	return _buf.c_str();
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errStr);
	}
	else
	{
		_msg.composeUINT32(userIntId);
	}
}

void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errStr);
	}
	else
	{
		_parser.parseUINT32(userIntId);
	}
}

/*static*/ void VipStore::cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 userIntId; _parser.parseUINT32(userIntId);
		AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES
//=================================================================

VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES()
{
	clear();
}

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES::clear()
{
}

bool VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES::equals(const Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES& _o) const
{
	return true;
}

const char *VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(VIPSTORE_GET_USER_ALT_ADDRESSES).append(")");
	return _buf.c_str();
}

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES::composeMsg(CommMsgBody& _msg) const
{
}

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "VIPSTORE_GET_USER_ALT_ADDRESSES";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY
//=================================================================

VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY(Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, maxSuggestedAltAddrLimit(std::move(_o.maxSuggestedAltAddrLimit))
	, altAddresses(std::move(_o.altAddresses))
{
}

VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY& VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY::operator=(Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		maxSuggestedAltAddrLimit = std::move(_o.maxSuggestedAltAddrLimit);
		altAddresses = std::move(_o.altAddresses);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
	maxSuggestedAltAddrLimit = 0;
	altAddresses.clear();
}

bool VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY::equals(const Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		maxSuggestedAltAddrLimit == _o.maxSuggestedAltAddrLimit &&
		altAddresses.equals(_o.altAddresses);
}

const char *VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
	}
	else
	{
		_buf.append(',');
		_buf.append("maxSuggestedAltAddrLimit=");
		_buf.appendUint(maxSuggestedAltAddrLimit);
		_buf.append(',');
		_buf.append("altAddresses=");
		altAddresses.toTraceString(_buf);
	}
	return _buf.c_str();
}

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errStr);
	}
	else
	{
		_msg.composeUINT32(maxSuggestedAltAddrLimit);
		altAddresses.composeMsg(_msg);
	}
}

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errStr);
	}
	else
	{
		_parser.parseUINT32(maxSuggestedAltAddrLimit);
		altAddresses.parseMsg(_parser);
	}
}

/*static*/ void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 maxSuggestedAltAddrLimit; _parser.parseUINT32(maxSuggestedAltAddrLimit);
		AtfValidator::validateInt(_descr, "maxSuggestedAltAddrLimit", maxSuggestedAltAddrLimit, _checker, __FILE__, __LINE__);
		PString _descbuf;
		int szAltAddresses = ThinAtf::LAtfVector< VipStoreAlternateClientAddress, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("altAddresses"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "altAddresses", szAltAddresses, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2
//=================================================================

VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2(Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2&& _o)
	: unusedStr(std::move(_o.unusedStr))
{
}

VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2& VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2::operator=(Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2&& _o)
{
	if(this != &_o)
	{
		unusedStr = std::move(_o.unusedStr);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2::clear()
{
	unusedStr.clear();
}

bool VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2::equals(const Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2& _o) const
{
	return unusedStr.equals(_o.unusedStr);
}

const char *VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(VIPSTORE_GET_USER_ALT_ADDRESSES2).append(")");
	_buf.append(',');
	_buf.append("unusedStr=");
	_buf.append(unusedStr);
	return _buf.c_str();
}

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(unusedStr);
}

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2::parseMsg(CommMsgParser& _parser)
{
	if(_parser.parseEnded()) return;
	_parser.parseStringP(unusedStr);
}

/*static*/ void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "VIPSTORE_GET_USER_ALT_ADDRESSES2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	if(_parser.parseEnded()) return;
	_parser.parseStringN(_dummy, 0, "unusedStr"); size_t szUnusedStr = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "unusedStr", szUnusedStr, 20, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY
//=================================================================

VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY(Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, maxSuggestedAltAddrLimit(std::move(_o.maxSuggestedAltAddrLimit))
	, altAddresses(std::move(_o.altAddresses))
{
}

VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY& VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY::operator=(Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		maxSuggestedAltAddrLimit = std::move(_o.maxSuggestedAltAddrLimit);
		altAddresses = std::move(_o.altAddresses);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
	maxSuggestedAltAddrLimit = 0;
	altAddresses.clear();
}

bool VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY::equals(const Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		maxSuggestedAltAddrLimit == _o.maxSuggestedAltAddrLimit &&
		altAddresses.equals(_o.altAddresses);
}

const char *VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
	}
	else
	{
		_buf.append(',');
		_buf.append("maxSuggestedAltAddrLimit=");
		_buf.appendUint(maxSuggestedAltAddrLimit);
		_buf.append(',');
		_buf.append("altAddresses=");
		altAddresses.toTraceString(_buf);
	}
	return _buf.c_str();
}

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errStr);
	}
	else
	{
		_msg.composeUINT32(maxSuggestedAltAddrLimit);
		altAddresses.composeMsg(_msg);
	}
}

void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errStr);
	}
	else
	{
		_parser.parseUINT32(maxSuggestedAltAddrLimit);
		altAddresses.parseMsg(_parser);
	}
}

/*static*/ void VipStore::cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 maxSuggestedAltAddrLimit; _parser.parseUINT32(maxSuggestedAltAddrLimit);
		AtfValidator::validateInt(_descr, "maxSuggestedAltAddrLimit", maxSuggestedAltAddrLimit, _checker, __FILE__, __LINE__);
		PString _descbuf;
		int szAltAddresses = ThinAtf::LAtfVector< VipStoreAlternateClientAddress, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("altAddresses"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "altAddresses", szAltAddresses, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS
//=================================================================

VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS()
{
	clear();
}

void VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS::clear()
{
	addrId = 0;
}

bool VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS::equals(const Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS& _o) const
{
	return addrId == _o.addrId;
}

const char *VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(VIPSTORE_OBSOLETE_USER_ALT_ADDRESS).append(")");
	_buf.append(',');
	_buf.append("addrId=");
	_buf.appendUint(addrId);
	return _buf.c_str();
}

void VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(addrId);
}

void VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(addrId);
}

/*static*/ void VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "VIPSTORE_OBSOLETE_USER_ALT_ADDRESS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 addrId; _parser.parseUINT32(addrId);
	AtfValidator::validateInt(_descr, "addrId", addrId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY
//=================================================================

VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY(Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
{
}

VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY& VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY::operator=(Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
	}
	return *this;
}

#endif

void VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
}

bool VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY::equals(const Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr);
}

const char *VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
	}
	return _buf.c_str();
}

void VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errStr);
	}
}

void VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errStr);
	}
}

/*static*/ void VipStore::cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool VipStore::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "cli"))
	{
		switch(_msgId)
		{
			case MSG_VIPSTORE_INV_GET_ITEM_STOCK2: cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY: cli::Protocol_MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_PREPURCHASE_ITEM: cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY: cli::Protocol_MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_PURCHASE_ITEM: cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_PURCHASE_ITEM_REPLY: cli::Protocol_MSG_VIPSTORE_PURCHASE_ITEM_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_USER_CANCEL_ORDER: cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_USER_CANCEL_ORDERS: cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY: cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY: cli::Protocol_MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_USER_ORDER_HISTORY2: cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY: cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST: cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY: cli::Protocol_MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case VIPSTORE_GET_USER_ALT_ADDRESSES: cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case VIPSTORE_GET_USER_ALT_ADDRESSES2: cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY: cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY: cli::Protocol_VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case VIPSTORE_OBSOLETE_USER_ALT_ADDRESS: cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY: cli::Protocol_VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

