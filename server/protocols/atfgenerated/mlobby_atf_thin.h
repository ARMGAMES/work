/**
 * mlobby_atf_thin.h
 *
 * This file was auto-generated from mlobby_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin mlobby_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_MLOBBY_ATF_THIN_H
#define ATF_PROTOCOL_DEFFILE_MLOBBY_ATF_THIN_H

#include "gamedefs.h"
#include "brands.h"
#include "sites.h"
#include "SeatFinderShared.h"
#include "i18n.localedef.h"
#include "../storm/TableCommonStructs_thin.h"
#include "../mtlobby/NStackTournInfo_thin.h"
#include "PBitmask.h"


#if defined(PROTOCOL_CLIENT_ONLY) && !defined(MLOBBY_CLIENT_PROTOCOL_VERSION)

#define MLOBBY_CLIENT_PROTOCOL_VERSION 10

#endif


#include "mlobby.h"


#include "ThinAtfUserDefStructs.h"

namespace MLobby
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	namespace cli
	{
		struct Filter
		{
			//! M(14s411144444411144441 <FIXME_COND_IF> b <FIXME_COND_ELSE> 44 <FIXME_COND_ELSE> 444 <FIXME_COND_ELSE> b <FIXME_COND_ELSE> s4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 1 <FIXME_COND_ELSE> 1 <FIXME_COND_ENDIF> ) - M(version,locale,country,siteId,game,hiLo,limit,minStake,maxStake,buyInMask,minBuyIn,maxBuyIn,maxPlayers,minSeated,minAvailable,speed,currencies,format,startingSoon,state,order <FIXME_COND_IF> ,realMoney <FIXME_COND_ELSE> ,minEntrants,maxEntrants <FIXME_COND_ELSE> ,zoomTournaments,multiplierPM,features <FIXME_COND_ELSE> ,tableStarters <FIXME_COND_ELSE> ,nameCriteria,specialSearchMode <FIXME_COND_ELSE> ,clientSortingSeed <FIXME_COND_ELSE> ,brandMask <FIXME_COND_ELSE> ,notUsed <FIXME_COND_ELSE> ,seatFindersAndBlitzes <FIXME_COND_ENDIF> )
			BYTE version;
			UINT32 locale;
			PString country;
			UINT32 siteId;
			BYTE game;
			BYTE hiLo;
			BYTE limit;
			UINT32 minStake;
			UINT32 maxStake;
			UINT32 buyInMask;
			UINT32 minBuyIn;
			UINT32 maxBuyIn;
			UINT32 maxPlayers;
			BYTE minSeated;
			BYTE minAvailable;
			BYTE speed;
			UINT32 currencies;	// client can send -1, so no limit
			UINT32 format;
			UINT32 startingSoon;	// TODO: waiting for help from mobile client team
			UINT32 state;
			BYTE order;

			bool realMoney;

			UINT32 minEntrants;
			UINT32 maxEntrants;

			UINT32 zoomTournaments;
			UINT32 multiplierPM;	// TODO: waiting for help from mobile client team
			UINT32 features;

			bool tableStarters;

			PString nameCriteria;
			UINT32 specialSearchMode;

			UINT32 clientSortingSeed;	// Mask - no need to limit

			UINT32 brandMask;

			INT8 notUsed;	// client sends it, but server does not parse/use it

			INT8 seatFindersAndBlitzes;

			Filter();
			void clear();
			bool equals(const Filter&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_RINGGAMES
		{
			//! M(14s411144444411144441 <FIXME_COND_IF> b <FIXME_COND_ELSE> 44 <FIXME_COND_ELSE> 444 <FIXME_COND_ELSE> b <FIXME_COND_ELSE> s4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 1 <FIXME_COND_ELSE> 1 <FIXME_COND_ENDIF> )4 - M(version,locale,country,siteId,game,hiLo,limit,minStake,maxStake,buyInMask,minBuyIn,maxBuyIn,maxPlayers,minSeated,minAvailable,speed,currencies,format,startingSoon,state,order <FIXME_COND_IF> ,realMoney <FIXME_COND_ELSE> ,minEntrants,maxEntrants <FIXME_COND_ELSE> ,zoomTournaments,multiplierPM,features <FIXME_COND_ELSE> ,tableStarters <FIXME_COND_ELSE> ,nameCriteria,specialSearchMode <FIXME_COND_ELSE> ,clientSortingSeed <FIXME_COND_ELSE> ,brandMask <FIXME_COND_ELSE> ,notUsed <FIXME_COND_ELSE> ,seatFindersAndBlitzes <FIXME_COND_ENDIF> ),maxItems
			Filter filter;
			UINT32 maxItems;

			Protocol_MSG_MLOBBY_FIND_RINGGAMES();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_RINGGAMES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_RINGGAMES; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_RINGGAMES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		/*	
		   MsgBodyStruct SharedTableStaticInfo
		   {
		   UINT32 tableId;
		   PString name;
		   PString server;
		   PString serverObject;
		   UINT32 tableFlags;
		   BYTE isOneOnOne;
		   BYTE isPlayMoney;
		   BYTE maxPlayers;
		   BYTE game;
		   BYTE isHiLo;
		   UINT32 loBet;
		   UINT32 hiBet;
		   BYTE structure;
		   PString specialName;
		   UINT32 visibilityMask;
		   UINT16 chatLang;
		   PString currency;
		   UINT32 minChipsLimit;
		   INT32 maxBuyIn;
		   UINT32 ante;
		   UINT32 restrictedCountriesSize;
		   if (restrictedCountriesSize)
		   {
		   bool countryRestrictionInverted;
		   PString[restrictedCountriesSize] restrictedCountries;
		   }
		   PSiteMask visibilityMaskEx parseEndOptB4Me;
		   };
		   
		   MsgBodyStruct SharedTableDynamicInfo
		   {
		   };
		   
		   Message MSG_MLOBBY_FIND_RINGGAMES_REPLY
		   {
		   INT16 err;
		   UINT32 totalItems;
		   UINT32 maxItems;
		   };
		 */

		struct Protocol_MSG_MLOBBY_FIND_TOURNAMENTS
		{
			//! M(14s411144444411144441 <FIXME_COND_IF> b <FIXME_COND_ELSE> 44 <FIXME_COND_ELSE> 444 <FIXME_COND_ELSE> b <FIXME_COND_ELSE> s4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 1 <FIXME_COND_ELSE> 1 <FIXME_COND_ENDIF> )4 - M(version,locale,country,siteId,game,hiLo,limit,minStake,maxStake,buyInMask,minBuyIn,maxBuyIn,maxPlayers,minSeated,minAvailable,speed,currencies,format,startingSoon,state,order <FIXME_COND_IF> ,realMoney <FIXME_COND_ELSE> ,minEntrants,maxEntrants <FIXME_COND_ELSE> ,zoomTournaments,multiplierPM,features <FIXME_COND_ELSE> ,tableStarters <FIXME_COND_ELSE> ,nameCriteria,specialSearchMode <FIXME_COND_ELSE> ,clientSortingSeed <FIXME_COND_ELSE> ,brandMask <FIXME_COND_ELSE> ,notUsed <FIXME_COND_ELSE> ,seatFindersAndBlitzes <FIXME_COND_ENDIF> ),maxItems
			Filter filter;
			UINT32 maxItems;

			Protocol_MSG_MLOBBY_FIND_TOURNAMENTS();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_TOURNAMENTS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_TOURNAMENTS; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_TOURNAMENTS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		/*	
		   Message MSG_MLOBBY_FIND_TOURNAMENTS_REPLY
		   {
		   INT16 err;
		   };
		 */

		struct Protocol_MSG_MLOBBY_FIND_TABLE_OLD
		{
			//! M(14s411144444411144441 <FIXME_COND_IF> b <FIXME_COND_ELSE> 44 <FIXME_COND_ELSE> 444 <FIXME_COND_ELSE> b <FIXME_COND_ELSE> s4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 1 <FIXME_COND_ELSE> 1 <FIXME_COND_ENDIF> )4<4> - M(version,locale,country,siteId,game,hiLo,limit,minStake,maxStake,buyInMask,minBuyIn,maxBuyIn,maxPlayers,minSeated,minAvailable,speed,currencies,format,startingSoon,state,order <FIXME_COND_IF> ,realMoney <FIXME_COND_ELSE> ,minEntrants,maxEntrants <FIXME_COND_ELSE> ,zoomTournaments,multiplierPM,features <FIXME_COND_ELSE> ,tableStarters <FIXME_COND_ELSE> ,nameCriteria,specialSearchMode <FIXME_COND_ELSE> ,clientSortingSeed <FIXME_COND_ELSE> ,brandMask <FIXME_COND_ELSE> ,notUsed <FIXME_COND_ELSE> ,seatFindersAndBlitzes <FIXME_COND_ENDIF> ),numExcludedTables<excludedTables>
			Filter filter;
			ThinAtf::LAtfVector< UINT32, 4 > excludedTables;

			Protocol_MSG_MLOBBY_FIND_TABLE_OLD();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_TABLE_OLD&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_TABLE_OLD; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_TABLE_OLD"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		/*	
		   Message MSG_MLOBBY_FIND_TABLE_OLD_REPLY
		   {
		   INT16 err;
		   };
		 */

		struct Protocol_MSG_MLOBBY_FIND_TABLE64
		{
			//! M(14s411144444411144441 <FIXME_COND_IF> b <FIXME_COND_ELSE> 44 <FIXME_COND_ELSE> 444 <FIXME_COND_ELSE> b <FIXME_COND_ELSE> s4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 1 <FIXME_COND_ELSE> 1 <FIXME_COND_ENDIF> )4<8> - M(version,locale,country,siteId,game,hiLo,limit,minStake,maxStake,buyInMask,minBuyIn,maxBuyIn,maxPlayers,minSeated,minAvailable,speed,currencies,format,startingSoon,state,order <FIXME_COND_IF> ,realMoney <FIXME_COND_ELSE> ,minEntrants,maxEntrants <FIXME_COND_ELSE> ,zoomTournaments,multiplierPM,features <FIXME_COND_ELSE> ,tableStarters <FIXME_COND_ELSE> ,nameCriteria,specialSearchMode <FIXME_COND_ELSE> ,clientSortingSeed <FIXME_COND_ELSE> ,brandMask <FIXME_COND_ELSE> ,notUsed <FIXME_COND_ELSE> ,seatFindersAndBlitzes <FIXME_COND_ENDIF> ),numExcludedTables<excludedTables>
			Filter filter;
			ThinAtf::LAtfVector< UINT64, 4 > excludedTables;

			Protocol_MSG_MLOBBY_FIND_TABLE64();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_TABLE64&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_TABLE64; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_TABLE64"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		/*	
		   Message MSG_MLOBBY_FIND_TABLE64_REPLY
		   {
		   INT16 err;
		   };
		 */

		struct Protocol_MSG_MLOBBY_FIND_BLITZ
		{
			//! M(14s411144444411144441 <FIXME_COND_IF> b <FIXME_COND_ELSE> 44 <FIXME_COND_ELSE> 444 <FIXME_COND_ELSE> b <FIXME_COND_ELSE> s4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 1 <FIXME_COND_ELSE> 1 <FIXME_COND_ENDIF> )4 - M(version,locale,country,siteId,game,hiLo,limit,minStake,maxStake,buyInMask,minBuyIn,maxBuyIn,maxPlayers,minSeated,minAvailable,speed,currencies,format,startingSoon,state,order <FIXME_COND_IF> ,realMoney <FIXME_COND_ELSE> ,minEntrants,maxEntrants <FIXME_COND_ELSE> ,zoomTournaments,multiplierPM,features <FIXME_COND_ELSE> ,tableStarters <FIXME_COND_ELSE> ,nameCriteria,specialSearchMode <FIXME_COND_ELSE> ,clientSortingSeed <FIXME_COND_ELSE> ,brandMask <FIXME_COND_ELSE> ,notUsed <FIXME_COND_ELSE> ,seatFindersAndBlitzes <FIXME_COND_ENDIF> ),maxItems
			Filter filter;
			UINT32 maxItems;

			Protocol_MSG_MLOBBY_FIND_BLITZ();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_BLITZ&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_BLITZ; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_BLITZ"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		/*	
		   Message MSG_MLOBBY_FIND_BLITZ_REPLY
		   {
		   INT16 err;
		   };
		 */

		struct Protocol_MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES
		{
			//! M(14s411144444411144441 <FIXME_COND_IF> b <FIXME_COND_ELSE> 44 <FIXME_COND_ELSE> 444 <FIXME_COND_ELSE> b <FIXME_COND_ELSE> s4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 1 <FIXME_COND_ELSE> 1 <FIXME_COND_ENDIF> )44<4> - M(version,locale,country,siteId,game,hiLo,limit,minStake,maxStake,buyInMask,minBuyIn,maxBuyIn,maxPlayers,minSeated,minAvailable,speed,currencies,format,startingSoon,state,order <FIXME_COND_IF> ,realMoney <FIXME_COND_ELSE> ,minEntrants,maxEntrants <FIXME_COND_ELSE> ,zoomTournaments,multiplierPM,features <FIXME_COND_ELSE> ,tableStarters <FIXME_COND_ELSE> ,nameCriteria,specialSearchMode <FIXME_COND_ELSE> ,clientSortingSeed <FIXME_COND_ELSE> ,brandMask <FIXME_COND_ELSE> ,notUsed <FIXME_COND_ELSE> ,seatFindersAndBlitzes <FIXME_COND_ENDIF> ),maxItems,numExcludedFinders<excludedFinders>
			Filter filter;
			UINT32 maxItems;
			ThinAtf::LAtfVector< UINT32, 4 > excludedFinders;

			Protocol_MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		/*
		   Message MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES_REPLY
		   {
		   INT16 err;
		   };
		 */

		/*
		   struct BaseSelectionFilter
		   {
		   BYTE version;
		   PString country;
		   UINT32 siteId min PokerStars_SiteUnknown max PokerStars_Last;
		   UINT32 brandId min BrandType_None max BrandType_Last;
		   UINT64 gameMask min (UINT64)MobileGameTypes::MobileGame_NLHoldem max (UINT64)MobileGameTypes::MobileGame_Last; // MobileGameTypes
		   UINT32 buyInMask min MobileBuyIn_Cash max MobileBuyIn_Last; // MobileBuyInMask
		   UINT64 minBuyIn;
		   UINT64 maxBuyIn;
		   UINT32 multiplierPM max 2000000000; // TODO: waiting for help from mobile client team
		   UINT32 currencyMask min MobileCurrency_USD max MobileCurrency_Last; // MobileCurrencyTypes
		   UINT32 sortOrder min MobileSortOrder_None max MobileSortOrder_Last; // sorting order
		   };
		 */

		struct TableSelectionFilter
		{
			// M(1s44848844444b) - M(version,country,siteId,brandId,gameMask,buyInMask,minBuyIn,maxBuyIn,multiplierPM,currencyMask,sortOrder,maxPlayerMask,clientSortingSeed,standardFormatOnly)
			BYTE version;
			PString country;
			UINT32 siteId;
			UINT32 brandId;
			UINT64 gameMask;	// MobileGameTypes
			UINT32 buyInMask;	// MobileBuyInMask
			UINT64 minBuyIn;
			UINT64 maxBuyIn;
			UINT32 multiplierPM;	// TODO: waiting for help from mobile client team
			UINT32 currencyMask;	// MobileCurrencyTypes
			UINT32 sortOrder;	// sorting order
			UINT32 maxPlayerMask;	// MobileMaxPlayerTypes
			UINT32 clientSortingSeed;	//PYR-3292
			bool standardFormatOnly;	// Buyin of max 100 Big Blinds and No CAP and No Ante

			TableSelectionFilter();
			void clear();
			bool equals(const TableSelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSelectionFilter
		{
			// M(1s4484884444444bs44<s>4<s>) - M(version,country,siteId,brandId,gameMask,buyInMask,minBuyIn,maxBuyIn,multiplierPM,currencyMask,sortOrder,locale,speedMask,gameVariantMask,startingWithin,registeringOnly,tournName,tableSize,numVisibilityStrings<visibilityStrings>,numTournLobbies<tournLobbies>)
			BYTE version;
			PString country;
			UINT32 siteId;
			UINT32 brandId;
			UINT64 gameMask;	// MobileGameTypes
			UINT32 buyInMask;	// MobileBuyInMask
			UINT64 minBuyIn;
			UINT64 maxBuyIn;
			UINT32 multiplierPM;	// TODO: waiting for help from mobile client team
			UINT32 currencyMask;	// MobileCurrencyTypes
			UINT32 sortOrder;	// sorting order
			UINT32 locale;
			UINT32 speedMask;	// TournSpeedTypes
			UINT32 gameVariantMask;	// TournVariantTypes
			UINT32 startingWithin;	// starting soon in minutes, or 0 if not used
			bool registeringOnly;	// if true, show only tourns still registering
			PString tournName;	// search tournaments by name
			UINT32 tableSize;
			ThinAtf::LAtfVector< PString , 4 > visibilityStrings;
			ThinAtf::LAtfVector< PString, 4 > tournLobbies;

			TournSelectionFilter();
			void clear();
			bool equals(const TournSelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct FinderAndBlitzSelectionFilter
		{
			// M(1s44848844444b1) - M(version,country,siteId,brandId,gameMask,buyInMask,minBuyIn,maxBuyIn,multiplierPM,currencyMask,order,maxPlayerMask,clientSortingSeed,standardFormatOnly,seatFindersAndBlitzes)
			BYTE version;
			PString country;
			UINT32 siteId;
			UINT32 brandId;
			UINT64 gameMask;	// MobileGameTypes
			UINT32 buyInMask;	// MobileBuyInMask
			UINT64 minBuyIn;
			UINT64 maxBuyIn;
			UINT32 multiplierPM;	// TODO: waiting for help from mobile client team
			UINT32 currencyMask;	// MobileCurrencyTypes
			UINT32 order;	// sorting order
			UINT32 maxPlayerMask;	// MobileMaxPlayerTypes
			UINT32 clientSortingSeed;	//PYR-3292
			bool standardFormatOnly;	// Buyin of max 100 Big Blinds and No CAP and No Ante
			INT8 seatFindersAndBlitzes;

			FinderAndBlitzSelectionFilter();
			void clear();
			bool equals(const FinderAndBlitzSelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct RingStaticData
		{
			//! M(4sss411111441s42s444b4<s>4114b8444844s <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>m) - M(tableId32,name,server,serverObject,tableFlags,isOneOnOne,isPlayMoney,maxPlayers,game,isHiLo,loBet,hiBet,structure,specialName,visibilityMask,chatLang,currency,minChipsLimit,maxBuyIn,ante,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,cap,icon,filter,tableInstanceFlags,isTableStarter,tableFlags2,tableTypeId,scalePM,defaultBuyIn,tableId,brandMask,poolBlockMinHands,visibilityCriteria, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx)
			UINT32 tableId32;
			PString name;
			PString server;
			PString serverObject;
			UINT32 tableFlags;
			BYTE isOneOnOne;
			BYTE isPlayMoney;
			BYTE maxPlayers;
			BYTE game;
			BYTE isHiLo;
			UINT32 loBet;
			UINT32 hiBet;
			BYTE structure;
			PString specialName;
			UINT32 visibilityMask;
			UINT16 chatLang;
			PString currency;
			UINT32 minChipsLimit;
			INT32 maxBuyIn;
			UINT32 ante;
			bool countryRestrictionInverted;
			ThinAtf::LAtfVector< PString , 4 > restrictedCountries;
			UINT32 cap;
			BYTE icon;
			BYTE filter;
			UINT32 tableInstanceFlags;
			bool isTableStarter;
			UINT64 tableFlags2;
			UINT32 tableTypeId;
			UINT32 scalePM;
			UINT32 defaultBuyIn;
			UINT64 tableId;
			UINT32 brandMask;
			INT32 poolBlockMinHands;
			PString visibilityCriteria;
			TableCommonThin::TableStakes tableStakes;
			ThinAtf::LAtfVector< INT64, 4 > variableAntes;
			PSiteMask visibilityMaskEx;

			RingStaticData();
			void clear();
			bool equals(const RingStaticData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct FppFactorStruct
		{
			// M(2444tm) - M(fppFactor,sites,gameCategory,number,endT,sitesEx)
			UINT16 fppFactor;
			UINT32 sites;
			UINT32 gameCategory;	// #22626
			UINT32 number;	// PYR-23500
			SrvTime endT;	// PYR-24398
			PSiteMask sitesEx;

			FppFactorStruct();
			void clear();
			bool equals(const FppFactorStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct RingDynaData
		{
			// M(111421414<M(2444tm)>b) - M(numPlayers,wait,playersPerFlop,potSize,handsPerHour,publProp,averageStackSize,vpip,numFppFactors<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,isTableDealingCards)
			BYTE numPlayers;
			BYTE wait;
			BYTE playersPerFlop;
			UINT32 potSize;
			UINT16 handsPerHour;
			BYTE publProp;
			UINT32 averageStackSize;
			BYTE vpip;
			ThinAtf::LAtfVector< FppFactorStruct, 4 > fppFactors;
			bool isTableDealingCards;

			RingDynaData();
			void clear();
			bool equals(const RingDynaData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct RingDataStruct
		{
			//! M(M(4sss411111441s42s444b4<s>4114b8444844s <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>m)M(111421414<M(2444tm)>b)) - M(M(tableId32,name,server,serverObject,tableFlags,isOneOnOne,isPlayMoney,maxPlayers,game,isHiLo,loBet,hiBet,structure,specialName,visibilityMask,chatLang,currency,minChipsLimit,maxBuyIn,ante,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,cap,icon,filter,tableInstanceFlags,isTableStarter,tableFlags2,tableTypeId,scalePM,defaultBuyIn,tableId,brandMask,poolBlockMinHands,visibilityCriteria, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(numPlayers,wait,playersPerFlop,potSize,handsPerHour,publProp,averageStackSize,vpip,numFppFactors<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,isTableDealingCards))
			RingStaticData staticData;
			RingDynaData dynamicData;

			RingDataStruct();
			void clear();
			bool equals(const RingDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct HybridLobbySelectionFilter
		{
			// M(1s44848844444b4b) - M(version,country,siteId,brandId,gameMask,buyInMask,minBuyIn,maxBuyIn,multiplierPM,currencyMask,order,maxPlayerMask,clientSortingSeed,standardFormatOnly,gameTypes,showStealthTables)
			BYTE version;
			PString country;
			UINT32 siteId;
			UINT32 brandId;
			UINT64 gameMask;	// MobileGameTypes
			UINT32 buyInMask;	// MobileBuyInMask
			UINT64 minBuyIn;
			UINT64 maxBuyIn;
			UINT32 multiplierPM;	// TODO: waiting for help from mobile client team
			UINT32 currencyMask;	// MobileCurrencyTypes
			UINT32 order;	// sorting order
			UINT32 maxPlayerMask;	// MobileMaxPlayerTypes
			UINT32 clientSortingSeed;	//PYR-3292
			bool standardFormatOnly;	// Buyin of max 100 Big Blinds and No CAP and No Ante
			UINT32 gameTypes;
			bool showStealthTables;

			HybridLobbySelectionFilter();
			void clear();
			bool equals(const HybridLobbySelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_RINGGAMES2
		{
			// M(1s44848844444b)44<8>4s - M(version,country,siteId,brandId,gameMask,buyInMask,minBuyIn,maxBuyIn,multiplierPM,currencyMask,sortOrder,maxPlayerMask,clientSortingSeed,standardFormatOnly),maxItems,numExcludedTables<excludedTables>,context,installId
			TableSelectionFilter filter;
			UINT32 maxItems;
			ThinAtf::LAtfVector< UINT64, 4 > excludedTables;
			UINT32 context;	// for tracing mlobby requests
			PString installId;	// for tracing mlobby requests

			Protocol_MSG_MLOBBY_FIND_RINGGAMES2();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_RINGGAMES2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_RINGGAMES2; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_RINGGAMES2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_RINGGAMES2_REPLY
		{
			//! 44<M(M(4sss411111441s42s444b4<s>4114b8444844s <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>m)M(111421414<M(2444tm)>b))> - totalItems,numTables<M(M(tableId32,name,server,serverObject,tableFlags,isOneOnOne,isPlayMoney,maxPlayers,game,isHiLo,loBet,hiBet,structure,specialName,visibilityMask,chatLang,currency,minChipsLimit,maxBuyIn,ante,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,cap,icon,filter,tableInstanceFlags,isTableStarter,tableFlags2,tableTypeId,scalePM,defaultBuyIn,tableId,brandMask,poolBlockMinHands,visibilityCriteria, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(numPlayers,wait,playersPerFlop,potSize,handsPerHour,publProp,averageStackSize,vpip,numFppFactors<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,isTableDealingCards))>
			UINT32 totalItems;
			ThinAtf::LAtfVector< RingDataStruct, 4 > tables;

			Protocol_MSG_MLOBBY_FIND_RINGGAMES2_REPLY();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_RINGGAMES2_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_RINGGAMES2_REPLY; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_RINGGAMES2_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct TournStaticData
		{
			//! M(4ssst44411ss14441114444t444b4<s>14tI2s44s241I1121bs4112sss88t4b <FIXME>TournClientThin::NStackTournInfoStruct</FIXME> 44s4141444sm) - M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg, <FIXME>nStackInfo</FIXME> ,tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,tournSitesEx)
			UINT32 tournamentId;
			PString server;
			PString targetServer;
			PString hasSatellite;
			SrvTime whenStart;
			UINT32 buyIn;
			UINT32 rake;
			UINT32 fppBuyIn;
			BYTE isRestricted;
			BYTE isPwdProtected;
			PString name;
			PString admissionId;
			BYTE isPlayMoney;
			UINT32 satelliteTarget;
			UINT32 minPlayers;
			UINT32 tournFlags;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			UINT32 tournMask;
			UINT32 tournSites;
			UINT32 whenStartInt;
			UINT32 tournMask2;
			SrvTime targetWhenStart;
			UINT32 tournMask3;
			UINT32 tournMask4;
			UINT32 maxPerTable;
			bool countryRestrictionInverted;
			ThinAtf::LAtfVector< PString , 4 > restrictedCountries;
			BYTE hasDayTwoStart;
			UINT32 dayTwoStartSec;
			SrvTime dayTwoStart;
			I18nPString shortText;
			UINT16 chatLang;
			PString currency;
			UINT32 tournFlagsServInt;
			UINT32 knockout;
			PString satelliteTargetReference;
			UINT16 satelliteTargetReferenceLock;
			UINT32 maxPlayers;
			BYTE speedDisplay;
			I18nPString nameSnG;
			BYTE step;
			BYTE timedTournType;
			UINT16 timedTournTime;
			BYTE timedTournPayout;
			bool isFlightTourn;
			PString tournBrand;
			UINT32 scalePM;
			BYTE progressiveKnockout;
			BYTE awardScheme;
			UINT16 numReentries;
			PString internalReference;
			PString favReference;
			PString satelliteTargetName;
			INT64 admissionPrice;
			UINT64 tournFlags2;
			SrvTime regEndAbs;
			UINT32 regEndAbsInt;
			bool doNotAllowToUnreg;
			TournClientThin::NStackTournInfoStruct nStackInfo;
			UINT32 tournMask5;
			UINT32 tournMask6;
			PString satelliteTargetNameMTT;
			UINT32 liveEventMask;
			BYTE timedTournPlayersPercent;
			UINT32 dummy1;
			BYTE rmPmLobby;
			UINT32 brandAccessMask;
			UINT32 activeFlags;
			UINT32 sngScriptId;
			PString customSpeedDisplayName;
			PSiteMask tournSitesEx;

			TournStaticData();
			void clear();
			bool equals(const TournStaticData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournDynaData
		{
			// M(441414<M(2444tm)>44b4441) - M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite)
			UINT32 fakeStatus;
			UINT32 entrants;
			BYTE publProp;
			UINT32 prizePoolToPublish;
			BYTE prizePoolUnit;

			ThinAtf::LAtfVector< FppFactorStruct, 4 > happyHoursMultipliers;

			UINT32 goldenSnGMilestoneAwardStub;	//obsolete
			UINT32 dummy1;
			bool goldenSnGEligibleStub;	//obsolete
			UINT32 goldenSnGTotalAddonStub;	//obsolete
			UINT32 prizePoolMoneyToPublish;
			UINT32 timedTournPlayersThreshold;
			INT8 mixTournSatellite;

			TournDynaData();
			void clear();
			bool equals(const TournDynaData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournDataStruct
		{
			//! M(M(4ssst44411ss14441114444t444b4<s>14tI2s44s241I1121bs4112sss88t4b <FIXME>TournClientThin::NStackTournInfoStruct</FIXME> 44s4141444sm)M(441414<M(2444tm)>44b4441)) - M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg, <FIXME>nStackInfo</FIXME> ,tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite))
			TournStaticData staticData;
			TournDynaData dynamicData;

			TournDataStruct();
			void clear();
			bool equals(const TournDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_TOURNAMENTS2
		{
			// M(1s4484884444444bs44<s>4<s>)44s - M(version,country,siteId,brandId,gameMask,buyInMask,minBuyIn,maxBuyIn,multiplierPM,currencyMask,sortOrder,locale,speedMask,gameVariantMask,startingWithin,registeringOnly,tournName,tableSize,numVisibilityStrings<visibilityStrings>,numTournLobbies<tournLobbies>),maxItems,context,installId
			TournSelectionFilter filter;
			UINT32 maxItems;
			UINT32 context;	// for tracing mlobby requests
			PString installId;	// for tracing mlobby requests

			Protocol_MSG_MLOBBY_FIND_TOURNAMENTS2();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_TOURNAMENTS2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_TOURNAMENTS2; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_TOURNAMENTS2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_TOURNAMENTS2_REPLY
		{
			//! 44<M(M(4ssst44411ss14441114444t444b4<s>14tI2s44s241I1121bs4112sss88t4b <FIXME>TournClientThin::NStackTournInfoStruct</FIXME> 44s4141444sm)M(441414<M(2444tm)>44b4441))> - totalItems,numTourns<M(M(tournamentId,server,targetServer,hasSatellite,whenStart,buyIn,rake,fppBuyIn,isRestricted,isPwdProtected,name,admissionId,isPlayMoney,satelliteTarget,minPlayers,tournFlags,game,isHiLo,structure,tournMask,tournSites,whenStartInt,tournMask2,targetWhenStart,tournMask3,tournMask4,maxPerTable,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,hasDayTwoStart,dayTwoStartSec,dayTwoStart,shortText,chatLang,currency,tournFlagsServInt,knockout,satelliteTargetReference,satelliteTargetReferenceLock,maxPlayers,speedDisplay,nameSnG,step,timedTournType,timedTournTime,timedTournPayout,isFlightTourn,tournBrand,scalePM,progressiveKnockout,awardScheme,numReentries,internalReference,favReference,satelliteTargetName,admissionPrice,tournFlags2,regEndAbs,regEndAbsInt,doNotAllowToUnreg, <FIXME>nStackInfo</FIXME> ,tournMask5,tournMask6,satelliteTargetNameMTT,liveEventMask,timedTournPlayersPercent,dummy1,rmPmLobby,brandAccessMask,activeFlags,sngScriptId,customSpeedDisplayName,tournSitesEx),M(fakeStatus,entrants,publProp,prizePoolToPublish,prizePoolUnit,numHappyHoursMultipliers<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,goldenSnGMilestoneAwardStub,dummy1,goldenSnGEligibleStub,goldenSnGTotalAddonStub,prizePoolMoneyToPublish,timedTournPlayersThreshold,mixTournSatellite))>
			UINT32 totalItems;
			ThinAtf::LAtfVector< TournDataStruct, 4 > tourns;

			Protocol_MSG_MLOBBY_FIND_TOURNAMENTS2_REPLY();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_TOURNAMENTS2_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_TOURNAMENTS2_REPLY; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_TOURNAMENTS2_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2
		{
			// M(1s44848844444b1)44<4>4s - M(version,country,siteId,brandId,gameMask,buyInMask,minBuyIn,maxBuyIn,multiplierPM,currencyMask,order,maxPlayerMask,clientSortingSeed,standardFormatOnly,seatFindersAndBlitzes),maxItems,numExcludedFinders<excludedFinders>,context,installId
			FinderAndBlitzSelectionFilter filter;
			UINT32 maxItems;
			ThinAtf::LAtfVector< UINT32, 4 > excludedFinders;
			UINT32 context;	// for tracing mlobby requests
			PString installId;	// for tracing mlobby requests

			Protocol_MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2_REPLY
		{
			//!  <FIXME>SortedSeatFindersAndBlitzes</FIXME>  -  <FIXME>sortedSeatFindersAndBlitzes</FIXME> 
			SortedSeatFindersAndBlitzes sortedSeatFindersAndBlitzes;

			Protocol_MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2_REPLY();
			void clear();
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2_REPLY; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2_REPLY"; }

			// @Override
			bool equals(const Protocol_MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2_REPLY& _o) const;

			// @Override
			const char *asTraceString(PString& _buf) const;

			// @Override
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const;

			// @Override
			bool loadFromXmlString(const PString& _xmlString);

			// @Override
			const char *asJSONString(PString& _buf) const;

			// @Override
			void loadFromJSONString(const PString& _jsonString);

			// @Override
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

			// @Override
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_TABLE64_2
		{
			// M(1s44848844444b)44<8>4s - M(version,country,siteId,brandId,gameMask,buyInMask,minBuyIn,maxBuyIn,multiplierPM,currencyMask,sortOrder,maxPlayerMask,clientSortingSeed,standardFormatOnly),maxItems,numExcludedTables<excludedTables>,context,installId
			TableSelectionFilter filter;
			UINT32 maxItems;
			ThinAtf::LAtfVector< UINT64, 4 > excludedTables;
			UINT32 context;	// for tracing mlobby requests
			PString installId;	// for tracing mlobby requests

			Protocol_MSG_MLOBBY_FIND_TABLE64_2();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_TABLE64_2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_TABLE64_2; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_TABLE64_2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_TABLE64_2_REPLY
		{
			//! 44<M(M(4sss411111441s42s444b4<s>4114b8444844s <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>m)M(111421414<M(2444tm)>b))> - totalItems,numTables<M(M(tableId32,name,server,serverObject,tableFlags,isOneOnOne,isPlayMoney,maxPlayers,game,isHiLo,loBet,hiBet,structure,specialName,visibilityMask,chatLang,currency,minChipsLimit,maxBuyIn,ante,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,cap,icon,filter,tableInstanceFlags,isTableStarter,tableFlags2,tableTypeId,scalePM,defaultBuyIn,tableId,brandMask,poolBlockMinHands,visibilityCriteria, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(numPlayers,wait,playersPerFlop,potSize,handsPerHour,publProp,averageStackSize,vpip,numFppFactors<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,isTableDealingCards))>
			UINT32 totalItems;
			ThinAtf::LAtfVector< RingDataStruct, 4 > tables;

			Protocol_MSG_MLOBBY_FIND_TABLE64_2_REPLY();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_TABLE64_2_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_TABLE64_2_REPLY; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_TABLE64_2_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Game
		{
			// M(111) - M(handType,structure,hiLo)
			BYTE handType;
			BYTE structure;
			BYTE hiLo;

			Game();
			void clear();
			bool equals(const Game&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct MorphLobbySelectionFilter
		{
			// M(1s441114b4<M(111)>b) - M(version,country,siteId,brandId,game,hiLo,limit,currencyMask,isPM,numGames<M(handType,structure,hiLo)>,showStealthTables)
			BYTE version;
			PString country;
			UINT32 siteId;
			UINT32 brandId;
			BYTE game;
			BYTE hiLo;
			BYTE limit;
			UINT32 currencyMask;	// MobileCurrencyTypes
			bool isPM;
			ThinAtf::LAtfVector< Game, 4 > games;
			bool showStealthTables;

			MorphLobbySelectionFilter();
			void clear();
			bool equals(const MorphLobbySelectionFilter&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct SeatFinderStruct
		{
			//! M(411114444s4444sb4<s>ss1b44<4>48b4444444 <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>m) - M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM,handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx)
			// static data
			UINT32 id;
			BYTE game;
			BYTE structure;
			BYTE isHiLo;
			BYTE maxPlayersPerTable;
			INT32 loBet;
			INT32 hiBet;
			INT32 ante;
			INT32 cap;
			PString currency;
			INT32 minChipsLimit;
			INT32 maxBuyIn;
			UINT32 visibilityMask;
			INT32 defaultBuyIn;
			PString specialName;
			bool countryRestrictionInverted;
			ThinAtf::LAtfVector< PString, 4 > restrictedCountries;
			PString replayerAddress;
			PString replayerInstance;
			INT8 minPlayersPerTable;
			bool isPasswordProtected;
			INT32 poolBlockMinHands;
			ThinAtf::LAtfVector< INT32, 4 > poolBlockTimePenalty;
			UINT32 flags;
			UINT64 flags2;
			bool isPM;
			UINT32 scalePM;

			// dynamic data
			INT32 handsPerHour;
			INT32 avgPotSize;
			INT32 avgStackSize;
			INT32 numPlayers;
			INT32 numTables;
			INT32 numFullTables;

			TableCommonThin::TableStakes tableStakes;
			ThinAtf::LAtfVector< INT64, 4 > variableAntes;
			PSiteMask visibilityMaskEx;

			SeatFinderStruct();
			void clear();
			bool equals(const SeatFinderStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TableTypeStaticDataStruct
		{
			//! M(41111414444s44b4<s>b444444<4>bb <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>sm) - M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,specialName,visibilityMaskEx)
			UINT32 id;
			BYTE isPlayMoney;
			BYTE game;
			BYTE isHiLo;
			BYTE maxPlayers;
			UINT32 visibilityMask;
			BYTE structure;
			UINT32 loBet;
			UINT32 hiBet;
			UINT32 ante;
			UINT32 cap;
			PString currency;
			UINT32 minChipsLimit;
			UINT32 maxBuyIn;
			bool countryRestrictionInverted;
			ThinAtf::LAtfVector< PString, 4 > restrictedCountries;
			bool visible;
			UINT32 scalePM;
			UINT32 defaultBuyIn;
			UINT32 brandMask;
			UINT32 seatFinderId;
			INT32 poolBlockMinHands;
			ThinAtf::LAtfVector< INT32, 4 > poolBlockTimePenalty;
			bool isPasswordProtected;
			bool isMorphLobby;
			TableCommonThin::TableStakes tableStakes;
			ThinAtf::LAtfVector< INT64, 4 > variableAntes;
			PString specialName;
			PSiteMask visibilityMaskEx;

			TableTypeStaticDataStruct();
			void clear();
			bool equals(const TableTypeStaticDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TableTypeDynaDataStruct
		{
			// M(44) - M(numPlayers,numTables)
			UINT32 numPlayers;
			UINT32 numTables;

			TableTypeDynaDataStruct();
			void clear();
			bool equals(const TableTypeDynaDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TableTypeDataStruct
		{
			//! M(M(41111414444s44b4<s>b444444<4>bb <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>sm)M(44)) - M(M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,specialName,visibilityMaskEx),M(numPlayers,numTables))
			TableTypeStaticDataStruct staticData;
			TableTypeDynaDataStruct dynamicData;

			TableTypeDataStruct();
			void clear();
			bool equals(const TableTypeDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ZoomStaticDataStruct
		{
			//! M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommonThin::TableStakes</FIXME> m8) - M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2)
			// static data
			UINT32 id;
			BYTE game;
			BYTE structure;
			BYTE isHiLo;
			BYTE maxPlayersPerTable;
			INT32 loBet;
			INT32 hiBet;
			INT32 ante;
			INT32 cap;
			PString currency;
			INT32 minChipsLimit;
			INT32 maxBuyIn;
			UINT32 visibilityMask;
			INT32 defaultBuyIn;
			PString specialName;
			bool countryRestrictionInverted;
			ThinAtf::LAtfVector< PString, 4 > restrictedCountries;
			BYTE isPlayMoney;
			bool isMorphLobby;
			UINT32 scalePM;
			PString server;
			PString name;
			PString replayerInstance;
			BYTE isOneOnOne;
			UINT32 tableFlags;
			UINT16 chatLang;
			bool quickLobbyVisible;	// #22042
			UINT32 blitzFlags;
			UINT32 brandMask;	// PYR-40190
			PString serverObj;
			TableCommonThin::TableStakes tableStakes;
			PSiteMask visibilityMaskEx;
			UINT64 tableFlags2;

			ZoomStaticDataStruct();
			void clear();
			bool equals(const ZoomStaticDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct EarlyBirdMultiplier
		{
			// M(44) - M(licenseId,multiplier)
			UINT32 licenseId;
			UINT32 multiplier;

			EarlyBirdMultiplier();
			void clear();
			bool equals(const EarlyBirdMultiplier&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ZoomDynaDataStruct
		{
			// M(44441114<M(2444tm)>44<M(44)>) - M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,numFppFactors<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>)
			// dynamic data
			INT32 handsPerHour;
			INT32 avgPotSize;
			INT32 avgStackSize;
			INT32 numPlayers;
			BYTE publProp;
			BYTE avgPlayers;
			BYTE avgVpip;
			ThinAtf::LAtfVector< FppFactorStruct, 4 > fppFactors;
			INT32 earlyBirdMins;	// if > 0, early bird eligible
			ThinAtf::LAtfVector< EarlyBirdMultiplier, 4 > earlyBirdMultipliers;	// PYR-114224, if client license has multiplier > 0 then early bird eligible

			ZoomDynaDataStruct();
			void clear();
			bool equals(const ZoomDynaDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ZoomDataStruct
		{
			//! M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommonThin::TableStakes</FIXME> m8)M(44441114<M(2444tm)>44<M(44)>)) - M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,numFppFactors<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>))
			ZoomStaticDataStruct staticData;
			ZoomDynaDataStruct dynamicData;

			ZoomDataStruct();
			void clear();
			bool equals(const ZoomDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct SeatFinderStaticDataStruct
		{
			//! M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>m) - M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx)
			// static data
			UINT32 id;
			BYTE game;
			BYTE structure;
			BYTE isHiLo;
			BYTE maxPlayersPerTable;
			INT32 loBet;
			INT32 hiBet;
			INT32 ante;
			INT32 cap;
			PString currency;
			INT32 minChipsLimit;
			INT32 maxBuyIn;
			UINT32 visibilityMask;
			INT32 defaultBuyIn;
			PString specialName;
			bool countryRestrictionInverted;
			ThinAtf::LAtfVector< PString, 4 > restrictedCountries;
			PString replayerAddress;
			PString replayerInstance;
			INT8 minPlayersPerTable;
			bool isPasswordProtected;
			INT32 poolBlockMinHands;
			ThinAtf::LAtfVector< INT32, 4 > poolBlockTimePenalty;
			UINT32 flags;
			UINT64 flags2;
			bool isPM;
			UINT32 scalePM;
			TableCommonThin::TableStakes tableStakes;
			ThinAtf::LAtfVector< INT64, 4 > variableAntes;
			PSiteMask visibilityMaskEx;

			SeatFinderStaticDataStruct();
			void clear();
			bool equals(const SeatFinderStaticDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct SeatFinderDynaDataStruct
		{
			// M(444444) - M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables)
			// dynamic data
			INT32 handsPerHour;
			INT32 avgPotSize;
			INT32 avgStackSize;
			INT32 numPlayers;
			INT32 numTables;
			INT32 numFullTables;

			SeatFinderDynaDataStruct();
			void clear();
			bool equals(const SeatFinderDynaDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct SeatFinderDataStruct
		{
			//! M(M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>m)M(444444)) - M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables))
			SeatFinderStaticDataStruct staticData;
			SeatFinderDynaDataStruct dynamicData;

			SeatFinderDataStruct();
			void clear();
			bool equals(const SeatFinderDataStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_MORPH_LOBBIES
		{
			// M(1s441114b4<M(111)>b)44<4>4s - M(version,country,siteId,brandId,game,hiLo,limit,currencyMask,isPM,numGames<M(handType,structure,hiLo)>,showStealthTables),maxItems,numExcludedFinders<excludedFinders>,context,installId
			MorphLobbySelectionFilter filter;
			UINT32 maxItems;
			ThinAtf::LAtfVector< UINT32, 4 > excludedFinders;
			UINT32 context;	// for tracing mlobby requests
			PString installId;	// for tracing mlobby requests

			Protocol_MSG_MLOBBY_FIND_MORPH_LOBBIES();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_MORPH_LOBBIES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_MORPH_LOBBIES; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_MORPH_LOBBIES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_MORPH_LOBBIES_REPLY
		{
			//! 44<M(411114444s4444sb4<s>ss1b44<4>48b4444444 <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>m)> - totalItems,numSf<M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM,handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx)>
			UINT32 totalItems;
			ThinAtf::LAtfVector< SeatFinderStruct, 4 > sf;

			Protocol_MSG_MLOBBY_FIND_MORPH_LOBBIES_REPLY();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_MORPH_LOBBIES_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_MORPH_LOBBIES_REPLY; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_MORPH_LOBBIES_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_HYBRID_GAMES
		{
			// M(1s44848844444b4b)44<4>4s - M(version,country,siteId,brandId,gameMask,buyInMask,minBuyIn,maxBuyIn,multiplierPM,currencyMask,order,maxPlayerMask,clientSortingSeed,standardFormatOnly,gameTypes,showStealthTables),maxItems,numExcludedFinders<excludedFinders>,context,installId
			HybridLobbySelectionFilter filter;
			UINT32 maxItems;
			ThinAtf::LAtfVector< UINT32, 4 > excludedFinders;
			UINT32 context;	// for tracing mlobby requests
			PString installId;	// for tracing mlobby requests

			Protocol_MSG_MLOBBY_FIND_HYBRID_GAMES();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_HYBRID_GAMES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_HYBRID_GAMES; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_HYBRID_GAMES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_HYBRID_GAMES_REPLY
		{
			//! 44<M(M(411114444s4444sb4<s>ss1b44<4>48b4 <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>m)M(444444))>4<M(M(411114444s4444sb4<s>1b4sss142b44s <FIXME>TableCommonThin::TableStakes</FIXME> m8)M(44441114<M(2444tm)>44<M(44)>))>4<M(M(41111414444s44b4<s>b444444<4>bb <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>sm)M(44))>4<4> - totalItems,numSfs<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,replayerAddress,replayerInstance,minPlayersPerTable,isPasswordProtected,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,flags,flags2,isPM,scalePM, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,numTables,numFullTables))>,numBlitzes<M(M(id,game,structure,isHiLo,maxPlayersPerTable,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,visibilityMask,defaultBuyIn,specialName,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,isPlayMoney,isMorphLobby,scalePM,server,name,replayerInstance,isOneOnOne,tableFlags,chatLang,quickLobbyVisible,blitzFlags,brandMask,serverObj, <FIXME>tableStakes</FIXME> ,visibilityMaskEx,tableFlags2),M(handsPerHour,avgPotSize,avgStackSize,numPlayers,publProp,avgPlayers,avgVpip,numFppFactors<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,earlyBirdMins,numEarlyBirdMultipliers<M(licenseId,multiplier)>))>,numTableTypes<M(M(id,isPlayMoney,game,isHiLo,maxPlayers,visibilityMask,structure,loBet,hiBet,ante,cap,currency,minChipsLimit,maxBuyIn,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,visible,scalePM,defaultBuyIn,brandMask,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,isPasswordProtected,isMorphLobby, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,specialName,visibilityMaskEx),M(numPlayers,numTables))>,numGameOrder<gameOrder>
			UINT32 totalItems;
			ThinAtf::LAtfVector< SeatFinderDataStruct, 4 > sfs;
			ThinAtf::LAtfVector< ZoomDataStruct, 4 > blitzes;
			ThinAtf::LAtfVector< TableTypeDataStruct, 4 > tableTypes;
			ThinAtf::LAtfVector< UINT32, 4 > gameOrder;	// MobileHybridLobbyGameTypes

			Protocol_MSG_MLOBBY_FIND_HYBRID_GAMES_REPLY();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_HYBRID_GAMES_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_HYBRID_GAMES_REPLY; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_HYBRID_GAMES_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_RING_GAME_BY_TYPE
		{
			// 4444s - tableTypeId,maxItems,order,context,installId
			UINT32 tableTypeId;
			UINT32 maxItems;
			UINT32 order;	// sorting order
			UINT32 context;	// for tracing mlobby requests
			PString installId;	// for tracing mlobby requests

			Protocol_MSG_MLOBBY_FIND_RING_GAME_BY_TYPE();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_RING_GAME_BY_TYPE&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_RING_GAME_BY_TYPE; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_RING_GAME_BY_TYPE"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MLOBBY_FIND_RING_GAME_BY_TYPE_REPLY
		{
			//! 44<M(M(4sss411111441s42s444b4<s>4114b8444844s <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>m)M(111421414<M(2444tm)>b))> - totalItems,numTables<M(M(tableId32,name,server,serverObject,tableFlags,isOneOnOne,isPlayMoney,maxPlayers,game,isHiLo,loBet,hiBet,structure,specialName,visibilityMask,chatLang,currency,minChipsLimit,maxBuyIn,ante,countryRestrictionInverted,numRestrictedCountries<restrictedCountries>,cap,icon,filter,tableInstanceFlags,isTableStarter,tableFlags2,tableTypeId,scalePM,defaultBuyIn,tableId,brandMask,poolBlockMinHands,visibilityCriteria, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,visibilityMaskEx),M(numPlayers,wait,playersPerFlop,potSize,handsPerHour,publProp,averageStackSize,vpip,numFppFactors<M(fppFactor,sites,gameCategory,number,endT,sitesEx)>,isTableDealingCards))>
			UINT32 totalItems;
			ThinAtf::LAtfVector< RingDataStruct, 4 > tables;

			Protocol_MSG_MLOBBY_FIND_RING_GAME_BY_TYPE_REPLY();
			void clear();
			bool equals(const Protocol_MSG_MLOBBY_FIND_RING_GAME_BY_TYPE_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MLOBBY_FIND_RING_GAME_BY_TYPE_REPLY; }
			static const char *getMsgIdString() { return "MSG_MLOBBY_FIND_RING_GAME_BY_TYPE_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
	};
};

#endif
