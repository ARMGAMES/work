/**
 * SagStarter_atf_thin.h
 *
 * This file was auto-generated from SagStarter_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin SagStarter_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_SAGSTARTER_ATF_THIN_H
#define ATF_PROTOCOL_DEFFILE_SAGSTARTER_ATF_THIN_H

#include "SagStarterCommon_atf_thin.h"


#include "ThinAtfUserDefStructs.h"

namespace SagStarterThin
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	namespace cli
	{
		struct Protocol_MSG_SAG_TOURN_REG_INFO_BY_SCRIPTID	// alternative message exists in sagStarterProtocols.txt (for LobbyEtc->SagStarter communication)
		{
			// 4141 - scriptId,numGames,tournRegInfoFlags,variantId
			UINT32 scriptId;
			BYTE numGames;	// 0 is treated the same as 1 on the server side. 0 might still be sent by client
			UINT32 tournRegInfoFlags;	// PYR-51083
			BYTE variantId;	//PYR-111939

			Protocol_MSG_SAG_TOURN_REG_INFO_BY_SCRIPTID();
			void clear();
			bool equals(const Protocol_MSG_SAG_TOURN_REG_INFO_BY_SCRIPTID&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_SAG_TOURN_REG_INFO_BY_SCRIPTID; }
			static const char *getMsgIdString() { return "MSG_SAG_TOURN_REG_INFO_BY_SCRIPTID"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID	// alternative message exists in sagStarterProtocols.txt (for LobbyEtc->SagStarter communication)
		{
			//!  <FIXME>common::RegisterWithScriptId</FIXME> 1 -  <FIXME>ri</FIXME> ,variantId
			common::RegisterWithScriptId ri;
			BYTE variantId;	//PYR-111939

			Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID();
			void clear();
			bool equals(const Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID; }
			static const char *getMsgIdString() { return "MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID(Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID&&);
			Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID& operator=(Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID(const Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID&) = default;
			Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID& operator=(const Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID&) = default;
#endif
#endif
		};

		struct UserTicketDataATF
		{
			// s44 - admissionId,totalCount,reserved
			PString admissionId;
			UINT32 totalCount;
			UINT32 reserved;

			UserTicketDataATF();
			void clear();
			bool equals(const UserTicketDataATF&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UserTicketDataATF(UserTicketDataATF&&);
			UserTicketDataATF& operator=(UserTicketDataATF&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UserTicketDataATF(const UserTicketDataATF&) = default;
			UserTicketDataATF& operator=(const UserTicketDataATF&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY
		{
			//! 2 <FIXME_COND_IF> s <FIXME_COND_ELSE> 444s11444444s111sbM()M()ts84144144b84<s44>8 <FIXME_COND_ENDIF>  - errCode <FIXME_COND_IF> ,errMsg <FIXME_COND_ELSE> ,buyin,rake,fppBuyin,admission,pm,pwd,chips,playChips32,fpp,tickets,tchips,notused,preRegistrMessage,game,isHiLo,structure,currency,enoughMoneyInOtherCurrency,M(),M(),whenStartAbs,name,playChips,scalePM,speedDisplay,minPlayers,maxPlayers,maxPerTable,tournFlags,knockout,boolValue,admissionPrice,numEffectiveAdmissions<admissionId,totalCount,reserved>,tournFlags2 <FIXME_COND_ENDIF> 
			INT16 errCode;

			PString errMsg;

			UINT32 buyin;
			UINT32 rake;
			UINT32 fppBuyin;
			PString admission;
			BYTE pm;
			BYTE pwd;
			UINT32 chips;
			UINT32 playChips32;
			UINT32 fpp;
			UINT32 tickets;
			UINT32 tchips;
			UINT32 notused;
			PString preRegistrMessage;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			PString currency;
			bool enoughMoneyInOtherCurrency;
			ThinAtf::CopyableMsgBody currencyContext;
			ThinAtf::CopyableMsgBody clientCurrencyContext;
			SrvTime whenStartAbs;
			PString name;
			UINT64 playChips;
			UINT32 scalePM;
			BYTE speedDisplay;
			UINT32 minPlayers;
			UINT32 maxPlayers;
			BYTE maxPerTable;
			UINT32 tournFlags;
			UINT32 knockout;
			bool boolValue;
			INT64 admissionPrice;
			ThinAtf::LAtfVector< UserTicketDataATF, 4 > effectiveAdmissions;
			UINT64 tournFlags2;

			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY();
			void clear();
			bool equals(const Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBY_TOURN_REG_INFO_REPLY; }
			static const char *getMsgIdString() { return "MSG_LOBBY_TOURN_REG_INFO_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY(Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&&);
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY& operator=(Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY(const Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&) = default;
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY& operator=(const Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&) = default;
#endif
#endif
		};

		struct WhereIsBodyATF
		{
			// M(4ss44b11111s4444444bt444444s88) - M(tournamentId,serverName,serverObjectName,clubId,tournFlags,isAvail,game,isHiLo,structure,speedDisplay,isPlayMoney,currency,buyIn,rake,scalePM,knockout,minPlayers,maxPlayers,maxPerTable,awardSchemaProportional,whenStartAbs,whenStartAbsInt,fppBuyIn,tournMask,tournMask2,tournMask3,tournMask4,admission,admissionPrice,tournFlags2)
			UINT32 tournamentId;
			PString serverName;
			PString serverObjectName;
			UINT32 clubId;
			UINT32 tournFlags;
			bool isAvail;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			BYTE speedDisplay;
			BYTE isPlayMoney;
			PString currency;
			UINT32 buyIn;
			UINT32 rake;
			INT32 scalePM;
			UINT32 knockout;
			UINT32 minPlayers;
			UINT32 maxPlayers;
			UINT32 maxPerTable;
			bool awardSchemaProportional;
			SrvTime whenStartAbs;
			UINT32 whenStartAbsInt;
			UINT32 fppBuyIn;
			UINT32 tournMask;
			UINT32 tournMask2;
			UINT32 tournMask3;
			UINT32 tournMask4;
			PString admission;
			INT64 admissionPrice;
			INT64 tournFlags2;

			WhereIsBodyATF();
			void clear();
			bool equals(const WhereIsBodyATF&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			WhereIsBodyATF(WhereIsBodyATF&&);
			WhereIsBodyATF& operator=(WhereIsBodyATF&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			WhereIsBodyATF(const WhereIsBodyATF&) = default;
			WhereIsBodyATF& operator=(const WhereIsBodyATF&) = default;
#endif
#endif
		};

		struct Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY
		{
			//! 2s <FIXME_COND_IF> 2s4bssM(4ss44b11111s4444444bt444444s88)ss <FIXME_COND_ENDIF>  - errCode,errMsg <FIXME_COND_IF> ,allInOption,locale,tournId,seatAvail,serverName,socialToken,M(tournamentId,serverName,serverObjectName,clubId,tournFlags,isAvail,game,isHiLo,structure,speedDisplay,isPlayMoney,currency,buyIn,rake,scalePM,knockout,minPlayers,maxPlayers,maxPerTable,awardSchemaProportional,whenStartAbs,whenStartAbsInt,fppBuyIn,tournMask,tournMask2,tournMask3,tournMask4,admission,admissionPrice,tournFlags2),aamsTicket,clientNotification <FIXME_COND_ENDIF> 
			INT16 errCode;
			PString errMsg;

			INT16 allInOption;
			PString locale;
			UINT32 tournId;
			bool seatAvail;
			PString serverName;
			PString socialToken;
			WhereIsBodyATF whereIsBody;
			PString aamsTicket;
			PString clientNotification;

			Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY();
			void clear();
			bool equals(const Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY; }
			static const char *getMsgIdString() { return "MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY(Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY&&);
			Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY& operator=(Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY(const Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY&) = default;
			Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY& operator=(const Protocol_MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY&) = default;
#endif
#endif
		};

		struct SagWinnerInfo
		{
			// M(s444sIs) - M(userId,payoutTicketTypeId,userImageId,award,targetRef,targetName,ticketName)
			PString userId;
			UINT32 payoutTicketTypeId;
			UINT32 userImageId;
			INT32 award;
			PString targetRef;
			I18nPString targetName;	// for client to be able to use default template
			PString ticketName;	// for client to be able to use default template

			SagWinnerInfo();
			void clear();
			bool equals(const SagWinnerInfo&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SagWinnerInfo(SagWinnerInfo&&);
			SagWinnerInfo& operator=(SagWinnerInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SagWinnerInfo(const SagWinnerInfo&) = default;
			SagWinnerInfo& operator=(const SagWinnerInfo&) = default;
#endif
#endif
		};

		struct SagDataExCli
		{
			// b444441111t44<M(s444sIs)>m - active,visibilityMask32,buyIn,rake,currency,scalePM,game,isHiLo,structure,speed,finished,levelMark,numWinners<M(userId,payoutTicketTypeId,userImageId,award,targetRef,targetName,ticketName)>,visibilityMask
			bool active;
			INT32 visibilityMask32;
			INT32 buyIn;
			INT32 rake;
			INT32 currency;
			INT32 scalePM;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			BYTE speed;
			SrvTime finished;
			INT32 levelMark;
			ThinAtf::LAtfVector< SagWinnerInfo, 4 > winners;
			PSiteMask visibilityMask;

			SagDataExCli();
			void clear();
			bool equals(const SagDataExCli&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SagDataExCli(SagDataExCli&&);
			SagDataExCli& operator=(SagDataExCli&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SagDataExCli(const SagDataExCli&) = default;
			SagDataExCli& operator=(const SagDataExCli&) = default;
#endif
#endif
		};
	};

	namespace srv
	{
		struct SagTournFinishInfo
		{
			// M(4t444<M(s444sIs)>) - M(tournId,finished,buyIn,rake,numWinners<M(userId,payoutTicketTypeId,userImageId,award,targetRef,targetName,ticketName)>)
			UINT32 tournId;
			SrvTime finished;
			INT32 buyIn;
			INT32 rake;
			ThinAtf::LAtfVector< cli::SagWinnerInfo, 4 > winners;

			SagTournFinishInfo();
			void clear();
			bool equals(const SagTournFinishInfo&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SagTournFinishInfo(SagTournFinishInfo&&);
			SagTournFinishInfo& operator=(SagTournFinishInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SagTournFinishInfo(const SagTournFinishInfo&) = default;
			SagTournFinishInfo& operator=(const SagTournFinishInfo&) = default;
#endif
#endif
		};
	};
};

#endif
