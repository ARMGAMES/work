/**
 * ChipsDbm_atf_thin.cpp
 *
 * This file was auto-generated from ChipsDbm_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin ChipsDbm_atf.txt
 */
 
#include "ChipsDbm_atf_thin.h"

//=================================================================
//                Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE
//=================================================================

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE(Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE&& _o)
	: receipt(std::move(_o.receipt))
	, useNewPaywall(std::move(_o.useNewPaywall))
{
}

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE& ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE::operator=(Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE&& _o)
{
	if(this != &_o)
	{
		receipt = std::move(_o.receipt);
		useNewPaywall = std::move(_o.useNewPaywall);
	}
	return *this;
}

#endif

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE::clear()
{
	receipt.clear();
	useNewPaywall = false;
}

bool ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE::equals(const Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE& _o) const
{
	return receipt.equals(_o.receipt) &&
		useNewPaywall == _o.useNewPaywall;
}

const char *ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(CHIPSDBM_Q_APPLE_STORE_PURCHASE).append(")");
	_buf.append(',');
	_buf.append("receipt=");
	_buf.append(receipt);
	_buf.append(',');
	_buf.append("useNewPaywall=");
	_buf.appendUint(useNewPaywall);
	return _buf.c_str();
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(receipt);
	_msg.composeBOOL(useNewPaywall);
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(receipt);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(useNewPaywall);
}

/*static*/ void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "CHIPSDBM_Q_APPLE_STORE_PURCHASE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "receipt"); size_t szReceipt = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "receipt", szReceipt, 10000, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool useNewPaywall; _parser.parseBOOL(useNewPaywall);
	AtfValidator::validateInt(_descr, "useNewPaywall", useNewPaywall, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE
//=================================================================

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE(Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE&& _o)
	: errCode(std::move(_o.errCode))
	, errDescr(std::move(_o.errDescr))
	, purchaseToken(std::move(_o.purchaseToken))
{
}

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE& ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE::operator=(Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDescr = std::move(_o.errDescr);
		purchaseToken = std::move(_o.purchaseToken);
	}
	return *this;
}

#endif

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE::clear()
{
	errCode = 0;
	errDescr.clear();
	purchaseToken = 0;
}

bool ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE::equals(const Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE& _o) const
{
	return errCode == _o.errCode &&
		errDescr.equals(_o.errDescr) &&
		purchaseToken == _o.purchaseToken;
}

const char *ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(CHIPSDBM_A_APPLE_STORE_PURCHASE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("purchaseToken=");
		_buf.appendUint64(purchaseToken);
	}
	return _buf.c_str();
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeUINT64(purchaseToken);
	}
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseUINT64(purchaseToken);
	}
}

/*static*/ void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "CHIPSDBM_A_APPLE_STORE_PURCHASE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT64 purchaseToken; _parser.parseUINT64(purchaseToken);
		AtfValidator::validateUint(_descr, "purchaseToken", purchaseToken, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE
//=================================================================

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE(Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE&& _o)
	: notUsedStr(std::move(_o.notUsedStr))
	, orderJson(std::move(_o.orderJson))
	, signature(std::move(_o.signature))
	, useNewPaywall(std::move(_o.useNewPaywall))
{
}

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE& ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE::operator=(Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE&& _o)
{
	if(this != &_o)
	{
		notUsedStr = std::move(_o.notUsedStr);
		orderJson = std::move(_o.orderJson);
		signature = std::move(_o.signature);
		useNewPaywall = std::move(_o.useNewPaywall);
	}
	return *this;
}

#endif

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE::clear()
{
	notUsedStr.clear();
	orderJson.clear();
	signature.clear();
	useNewPaywall = false;
}

bool ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE::equals(const Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE& _o) const
{
	return notUsedStr.equals(_o.notUsedStr) &&
		orderJson.equals(_o.orderJson) &&
		signature.equals(_o.signature) &&
		useNewPaywall == _o.useNewPaywall;
}

const char *ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE).append(")");
	_buf.append(',');
	_buf.append("notUsedStr=");
	_buf.append(notUsedStr);
	_buf.append(',');
	_buf.append("orderJson=");
	_buf.append(orderJson);
	_buf.append(',');
	_buf.append("signature=");
	_buf.append(signature);
	_buf.append(',');
	_buf.append("useNewPaywall=");
	_buf.appendUint(useNewPaywall);
	return _buf.c_str();
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(notUsedStr);
	_msg.composeString(orderJson);
	_msg.composeString(signature);
	_msg.composeBOOL(useNewPaywall);
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(notUsedStr);
	_parser.parseStringP(orderJson);
	_parser.parseStringP(signature);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(useNewPaywall);
}

/*static*/ void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "notUsedStr"); size_t szNotUsedStr = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "notUsedStr", szNotUsedStr, 10000, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "orderJson"); size_t szOrderJson = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "orderJson", szOrderJson, 10000, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "signature"); size_t szSignature = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "signature", szSignature, 10000, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool useNewPaywall; _parser.parseBOOL(useNewPaywall);
	AtfValidator::validateInt(_descr, "useNewPaywall", useNewPaywall, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE
//=================================================================

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE(Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE&& _o)
	: errCode(std::move(_o.errCode))
	, errDescr(std::move(_o.errDescr))
	, purchaseToken(std::move(_o.purchaseToken))
{
}

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE& ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE::operator=(Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDescr = std::move(_o.errDescr);
		purchaseToken = std::move(_o.purchaseToken);
	}
	return *this;
}

#endif

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE::clear()
{
	errCode = 0;
	errDescr.clear();
	purchaseToken = 0;
}

bool ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE::equals(const Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE& _o) const
{
	return errCode == _o.errCode &&
		errDescr.equals(_o.errDescr) &&
		purchaseToken == _o.purchaseToken;
}

const char *ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(CHIPSDBM_A_GOOGLE_PLAY_PURCHASE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("purchaseToken=");
		_buf.appendUint64(purchaseToken);
	}
	return _buf.c_str();
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeUINT64(purchaseToken);
	}
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseUINT64(purchaseToken);
	}
}

/*static*/ void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "CHIPSDBM_A_GOOGLE_PLAY_PURCHASE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT64 purchaseToken; _parser.parseUINT64(purchaseToken);
		AtfValidator::validateUint(_descr, "purchaseToken", purchaseToken, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_CHIPSDBM_Q_GET_CHIPS_TRANS
//=================================================================

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_CHIPS_TRANS::Protocol_CHIPSDBM_Q_GET_CHIPS_TRANS()
{
	clear();
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_CHIPS_TRANS::clear()
{
	purchaseId = 0;
}

bool ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_CHIPS_TRANS::equals(const Protocol_CHIPSDBM_Q_GET_CHIPS_TRANS& _o) const
{
	return purchaseId == _o.purchaseId;
}

const char *ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_CHIPS_TRANS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(CHIPSDBM_Q_GET_CHIPS_TRANS).append(")");
	_buf.append(',');
	_buf.append("purchaseId=");
	_buf.appendUint(purchaseId);
	return _buf.c_str();
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_CHIPS_TRANS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(purchaseId);
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_CHIPS_TRANS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(purchaseId);
}

/*static*/ void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_CHIPS_TRANS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "CHIPSDBM_Q_GET_CHIPS_TRANS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 purchaseId; _parser.parseUINT32(purchaseId);
	AtfValidator::validateInt(_descr, "purchaseId", purchaseId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_CHIPSDBM_A_GET_CHIPS_TRANS
//=================================================================

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS(Protocol_CHIPSDBM_A_GET_CHIPS_TRANS&& _o)
	: errCode(std::move(_o.errCode))
	, errDescr(std::move(_o.errDescr))
	, purchaseId(std::move(_o.purchaseId))
	, parentId(std::move(_o.parentId))
	, amount(std::move(_o.amount))
	, playChipsAmount(std::move(_o.playChipsAmount))
	, gateway(std::move(_o.gateway))
	, status(std::move(_o.status))
	, errCodeChipsInfo(std::move(_o.errCodeChipsInfo))
	, errInfo(std::move(_o.errInfo))
	, extRefId(std::move(_o.extRefId))
	, started(std::move(_o.started))
	, completed(std::move(_o.completed))
	, userId(std::move(_o.userId))
	, auditId(std::move(_o.auditId))
	, userIntId(std::move(_o.userIntId))
	, paywallId(std::move(_o.paywallId))
	, paywallVersionId(std::move(_o.paywallVersionId))
	, segmentId(std::move(_o.segmentId))
	, segmentVersionId(std::move(_o.segmentVersionId))
	, bundleId(std::move(_o.bundleId))
	, bundleVersionId(std::move(_o.bundleVersionId))
{
}

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS& ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS::operator=(Protocol_CHIPSDBM_A_GET_CHIPS_TRANS&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDescr = std::move(_o.errDescr);
		purchaseId = std::move(_o.purchaseId);
		parentId = std::move(_o.parentId);
		amount = std::move(_o.amount);
		playChipsAmount = std::move(_o.playChipsAmount);
		gateway = std::move(_o.gateway);
		status = std::move(_o.status);
		errCodeChipsInfo = std::move(_o.errCodeChipsInfo);
		errInfo = std::move(_o.errInfo);
		extRefId = std::move(_o.extRefId);
		started = std::move(_o.started);
		completed = std::move(_o.completed);
		userId = std::move(_o.userId);
		auditId = std::move(_o.auditId);
		userIntId = std::move(_o.userIntId);
		paywallId = std::move(_o.paywallId);
		paywallVersionId = std::move(_o.paywallVersionId);
		segmentId = std::move(_o.segmentId);
		segmentVersionId = std::move(_o.segmentVersionId);
		bundleId = std::move(_o.bundleId);
		bundleVersionId = std::move(_o.bundleVersionId);
	}
	return *this;
}

#endif

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS::clear()
{
	errCode = 0;
	errDescr.clear();
	purchaseId = 0;
	parentId = 0;
	amount = 0;
	playChipsAmount = 0;
	gateway.clear();
	status.clear();
	errCodeChipsInfo.clear();
	errInfo.clear();
	extRefId.clear();
	started.setNull();
	completed.setNull();
	userId.clear();
	auditId = 0;
	userIntId = 0;
	paywallId = 0;
	paywallVersionId = 0;
	segmentId = 0;
	segmentVersionId = 0;
	bundleId = 0;
	bundleVersionId = 0;
}

bool ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS::equals(const Protocol_CHIPSDBM_A_GET_CHIPS_TRANS& _o) const
{
	return errCode == _o.errCode &&
		errDescr.equals(_o.errDescr) &&
		purchaseId == _o.purchaseId &&
		parentId == _o.parentId &&
		amount == _o.amount &&
		playChipsAmount == _o.playChipsAmount &&
		gateway.equals(_o.gateway) &&
		status.equals(_o.status) &&
		errCodeChipsInfo.equals(_o.errCodeChipsInfo) &&
		errInfo.equals(_o.errInfo) &&
		extRefId.equals(_o.extRefId) &&
		started.equals(_o.started) &&
		completed.equals(_o.completed) &&
		userId.equals(_o.userId) &&
		auditId == _o.auditId &&
		userIntId == _o.userIntId &&
		paywallId == _o.paywallId &&
		paywallVersionId == _o.paywallVersionId &&
		segmentId == _o.segmentId &&
		segmentVersionId == _o.segmentVersionId &&
		bundleId == _o.bundleId &&
		bundleVersionId == _o.bundleVersionId;
}

const char *ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(CHIPSDBM_A_GET_CHIPS_TRANS).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("purchaseId=");
		_buf.appendUint(purchaseId);
		_buf.append(',');
		_buf.append("parentId=");
		_buf.appendUint(parentId);
		_buf.append(',');
		_buf.append("amount=");
		_buf.appendUint64(amount);
		_buf.append(',');
		_buf.append("playChipsAmount=");
		_buf.appendUint64(playChipsAmount);
		_buf.append(',');
		_buf.append("gateway=");
		_buf.append(gateway);
		_buf.append(',');
		_buf.append("status=");
		_buf.append(status);
		_buf.append(',');
		_buf.append("errCodeChipsInfo=");
		_buf.append(errCodeChipsInfo);
		_buf.append(',');
		_buf.append("errInfo=");
		_buf.append(errInfo);
		_buf.append(',');
		_buf.append("extRefId=");
		_buf.append(extRefId);
		_buf.append(',');
		_buf.append("started=");
		ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, started);
		_buf.append(',');
		_buf.append("completed=");
		ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, completed);
		_buf.append(',');
		_buf.append("userId=");
		_buf.append(userId);
		_buf.append(',');
		_buf.append("auditId=");
		_buf.appendUint64(auditId);
		_buf.append(',');
		_buf.append("userIntId=");
		_buf.appendUint(userIntId);
		_buf.append(',');
		_buf.append("paywallId=");
		_buf.appendUint(paywallId);
		_buf.append(',');
		_buf.append("paywallVersionId=");
		_buf.appendInt(paywallVersionId);
		_buf.append(',');
		_buf.append("segmentId=");
		_buf.appendUint(segmentId);
		_buf.append(',');
		_buf.append("segmentVersionId=");
		_buf.appendInt(segmentVersionId);
		_buf.append(',');
		_buf.append("bundleId=");
		_buf.appendUint(bundleId);
		_buf.append(',');
		_buf.append("bundleVersionId=");
		_buf.appendInt(bundleVersionId);
	}
	return _buf.c_str();
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
	else
	{
		_msg.composeUINT32(purchaseId);
		_msg.composeUINT32(parentId);
		_msg.composeUINT64(amount);
		_msg.composeUINT64(playChipsAmount);
		_msg.composeString(gateway);
		_msg.composeString(status);
		_msg.composeString(errCodeChipsInfo);
		_msg.composeString(errInfo);
		_msg.composeString(extRefId);
		_msg.composeSrvTime(started);
		_msg.composeSrvTime(completed);
		_msg.composeString(userId);
		_msg.composeUINT64(auditId);
		_msg.composeUINT32(userIntId);
		_msg.composeUINT32(paywallId);
		_msg.composeINT16(paywallVersionId);
		_msg.composeUINT32(segmentId);
		_msg.composeINT16(segmentVersionId);
		_msg.composeUINT32(bundleId);
		_msg.composeINT16(bundleVersionId);
	}
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		_parser.parseUINT32(purchaseId);
		_parser.parseUINT32(parentId);
		_parser.parseUINT64(amount);
		_parser.parseUINT64(playChipsAmount);
		_parser.parseStringP(gateway);
		_parser.parseStringP(status);
		_parser.parseStringP(errCodeChipsInfo);
		_parser.parseStringP(errInfo);
		_parser.parseStringP(extRefId);
		_parser.parseSrvTime(started);
		_parser.parseSrvTime(completed);
		_parser.parseStringP(userId);
		_parser.parseUINT64(auditId);
		_parser.parseUINT32(userIntId);
		_parser.parseUINT32(paywallId);
		_parser.parseINT16(paywallVersionId);
		_parser.parseUINT32(segmentId);
		_parser.parseINT16(segmentVersionId);
		_parser.parseUINT32(bundleId);
		_parser.parseINT16(bundleVersionId);
	}
}

/*static*/ void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "CHIPSDBM_A_GET_CHIPS_TRANS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		UINT32 purchaseId; _parser.parseUINT32(purchaseId);
		AtfValidator::validateInt(_descr, "purchaseId", purchaseId, _checker, __FILE__, __LINE__);
		UINT32 parentId; _parser.parseUINT32(parentId);
		AtfValidator::validateInt(_descr, "parentId", parentId, _checker, __FILE__, __LINE__);
		UINT64 amount; _parser.parseUINT64(amount);
		AtfValidator::validateUint(_descr, "amount", amount, _checker, __FILE__, __LINE__);
		UINT64 playChipsAmount; _parser.parseUINT64(playChipsAmount);
		AtfValidator::validateUint(_descr, "playChipsAmount", playChipsAmount, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "gateway"); size_t szGateway = strlen(_dummy);
		AtfValidator::validateInt(_descr, "gateway", szGateway, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "status"); size_t szStatus = strlen(_dummy);
		AtfValidator::validateInt(_descr, "status", szStatus, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "errCodeChipsInfo"); size_t szErrCodeChipsInfo = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errCodeChipsInfo", szErrCodeChipsInfo, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "errInfo"); size_t szErrInfo = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errInfo", szErrInfo, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "extRefId"); size_t szExtRefId = strlen(_dummy);
		AtfValidator::validateInt(_descr, "extRefId", szExtRefId, _checker, __FILE__, __LINE__);
		CommSrvTime started; _parser.parseSrvTime(started);
		AtfValidator::validateSrvDateTime(_descr, "started", started, _checker, __FILE__, __LINE__);
		CommSrvTime completed; _parser.parseSrvTime(completed);
		AtfValidator::validateSrvDateTime(_descr, "completed", completed, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
		AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
		UINT64 auditId; _parser.parseUINT64(auditId);
		AtfValidator::validateUint(_descr, "auditId", auditId, _checker, __FILE__, __LINE__);
		UINT32 userIntId; _parser.parseUINT32(userIntId);
		AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
		UINT32 paywallId; _parser.parseUINT32(paywallId);
		AtfValidator::validateInt(_descr, "paywallId", paywallId, _checker, __FILE__, __LINE__);
		INT16 paywallVersionId; _parser.parseINT16(paywallVersionId);
		AtfValidator::validateInt(_descr, "paywallVersionId", paywallVersionId, _checker, __FILE__, __LINE__);
		UINT32 segmentId; _parser.parseUINT32(segmentId);
		AtfValidator::validateInt(_descr, "segmentId", segmentId, _checker, __FILE__, __LINE__);
		INT16 segmentVersionId; _parser.parseINT16(segmentVersionId);
		AtfValidator::validateInt(_descr, "segmentVersionId", segmentVersionId, _checker, __FILE__, __LINE__);
		UINT32 bundleId; _parser.parseUINT32(bundleId);
		AtfValidator::validateInt(_descr, "bundleId", bundleId, _checker, __FILE__, __LINE__);
		INT16 bundleVersionId; _parser.parseINT16(bundleVersionId);
		AtfValidator::validateInt(_descr, "bundleVersionId", bundleVersionId, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG
//=================================================================

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::Protocol_CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG()
{
	clear();
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::clear()
{
	storeId = 0;
}

bool ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::equals(const Protocol_CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG& _o) const
{
	return storeId == _o.storeId;
}

const char *ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG).append(")");
	_buf.append(',');
	_buf.append("storeId=");
	_buf.appendUint(storeId);
	return _buf.c_str();
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(storeId);
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(storeId);
}

/*static*/ void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 storeId; _parser.parseUINT32(storeId);
	AtfValidator::validateInt(_descr, "storeId", storeId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    PlayChipsConfigStore
//=================================================================

ChipsDbm::cli_mobile::PlayChipsConfigStore::PlayChipsConfigStore()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ChipsDbm::cli_mobile::PlayChipsConfigStore::PlayChipsConfigStore(PlayChipsConfigStore&& _o)
	: configId(std::move(_o.configId))
	, storeId(std::move(_o.storeId))
	, productId(std::move(_o.productId))
{
}

ChipsDbm::cli_mobile::PlayChipsConfigStore& ChipsDbm::cli_mobile::PlayChipsConfigStore::operator=(PlayChipsConfigStore&& _o)
{
	if(this != &_o)
	{
		configId = std::move(_o.configId);
		storeId = std::move(_o.storeId);
		productId = std::move(_o.productId);
	}
	return *this;
}

#endif

void ChipsDbm::cli_mobile::PlayChipsConfigStore::clear()
{
	configId = 0;
	storeId = 0;
	productId.clear();
}

bool ChipsDbm::cli_mobile::PlayChipsConfigStore::equals(const PlayChipsConfigStore& _o) const
{
	return configId == _o.configId &&
		storeId == _o.storeId &&
		productId.equals(_o.productId);
}

const char *ChipsDbm::cli_mobile::PlayChipsConfigStore::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("configId=");
	_buf.appendUint(configId);
	_buf.append(',');
	_buf.append("storeId=");
	_buf.appendUint(storeId);
	_buf.append(',');
	_buf.append("productId=");
	_buf.append(productId);
	_buf.append('}');
	return _buf.c_str();
}

void ChipsDbm::cli_mobile::PlayChipsConfigStore::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PlayChipsConfigStore())) // not empty
	{
		_body.composeUINT32(configId);
		_body.composeUINT32(storeId);
		_body.composeString(productId);
	}

	_msg.composeMsgBody(_body);
}

void ChipsDbm::cli_mobile::PlayChipsConfigStore::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(configId);
	_parser0.parseUINT32(storeId);
	_parser0.parseStringP(productId);
}

/*static*/ void ChipsDbm::cli_mobile::PlayChipsConfigStore::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	UINT32 configId; _parser0.parseUINT32(configId);
	AtfValidator::validateInt(_descr, "configId", configId, _checker, __FILE__, __LINE__);
	UINT32 storeId; _parser0.parseUINT32(storeId);
	AtfValidator::validateInt(_descr, "storeId", storeId, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "productId"); size_t szProductId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "productId", szProductId, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    PlayChipsConfig
//=================================================================

ChipsDbm::cli_mobile::PlayChipsConfig::PlayChipsConfig()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ChipsDbm::cli_mobile::PlayChipsConfig::PlayChipsConfig(PlayChipsConfig&& _o)
	: configId(std::move(_o.configId))
	, amount(std::move(_o.amount))
	, playChipsAmount(std::move(_o.playChipsAmount))
	, payTier(std::move(_o.payTier))
	, whenCreated(std::move(_o.whenCreated))
	, createdBy(std::move(_o.createdBy))
	, whenObsoleted(std::move(_o.whenObsoleted))
	, obsoletedBy(std::move(_o.obsoletedBy))
	, platform(std::move(_o.platform))
	, popular(std::move(_o.popular))
	, storeConfigs(std::move(_o.storeConfigs))
{
}

ChipsDbm::cli_mobile::PlayChipsConfig& ChipsDbm::cli_mobile::PlayChipsConfig::operator=(PlayChipsConfig&& _o)
{
	if(this != &_o)
	{
		configId = std::move(_o.configId);
		amount = std::move(_o.amount);
		playChipsAmount = std::move(_o.playChipsAmount);
		payTier = std::move(_o.payTier);
		whenCreated = std::move(_o.whenCreated);
		createdBy = std::move(_o.createdBy);
		whenObsoleted = std::move(_o.whenObsoleted);
		obsoletedBy = std::move(_o.obsoletedBy);
		platform = std::move(_o.platform);
		popular = std::move(_o.popular);
		storeConfigs = std::move(_o.storeConfigs);
	}
	return *this;
}

#endif

void ChipsDbm::cli_mobile::PlayChipsConfig::clear()
{
	configId = 0;
	amount = 0;
	playChipsAmount = 0;
	payTier = 0;
	whenCreated.setNull();
	createdBy = 0;
	whenObsoleted.setNull();
	obsoletedBy = 0;
	platform = 0;
	popular = 0;
	storeConfigs.clear();
}

bool ChipsDbm::cli_mobile::PlayChipsConfig::equals(const PlayChipsConfig& _o) const
{
	return configId == _o.configId &&
		amount == _o.amount &&
		playChipsAmount == _o.playChipsAmount &&
		payTier == _o.payTier &&
		whenCreated.equals(_o.whenCreated) &&
		createdBy == _o.createdBy &&
		whenObsoleted.equals(_o.whenObsoleted) &&
		obsoletedBy == _o.obsoletedBy &&
		platform == _o.platform &&
		popular == _o.popular &&
		storeConfigs.equals(_o.storeConfigs);
}

const char *ChipsDbm::cli_mobile::PlayChipsConfig::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("configId=");
	_buf.appendUint(configId);
	_buf.append(',');
	_buf.append("amount=");
	_buf.appendInt64(amount);
	_buf.append(',');
	_buf.append("playChipsAmount=");
	_buf.appendInt64(playChipsAmount);
	_buf.append(',');
	_buf.append("payTier=");
	_buf.appendUint(payTier);
	_buf.append(',');
	_buf.append("whenCreated=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenCreated);
	_buf.append(',');
	_buf.append("createdBy=");
	_buf.appendUint(createdBy);
	_buf.append(',');
	_buf.append("whenObsoleted=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenObsoleted);
	_buf.append(',');
	_buf.append("obsoletedBy=");
	_buf.appendUint(obsoletedBy);
	_buf.append(',');
	_buf.append("platform=");
	_buf.appendUint(platform);
	_buf.append(',');
	_buf.append("popular=");
	_buf.appendUint(popular);
	_buf.append(',');
	_buf.append("storeConfigs=");
	storeConfigs.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void ChipsDbm::cli_mobile::PlayChipsConfig::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PlayChipsConfig())) // not empty
	{
		_body.composeUINT32(configId);
		_body.composeINT64(amount);
		_body.composeINT64(playChipsAmount);
		_body.composeUINT32(payTier);
		_body.composeSrvTime(whenCreated);
		_body.composeUINT32(createdBy);
		_body.composeSrvTime(whenObsoleted);
		_body.composeUINT32(obsoletedBy);
		_body.composeUINT32(platform);
		_body.composeUINT16(popular);
		storeConfigs.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void ChipsDbm::cli_mobile::PlayChipsConfig::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(configId);
	_parser0.parseINT64(amount);
	_parser0.parseINT64(playChipsAmount);
	_parser0.parseUINT32(payTier);
	_parser0.parseSrvTime(whenCreated);
	_parser0.parseUINT32(createdBy);
	_parser0.parseSrvTime(whenObsoleted);
	_parser0.parseUINT32(obsoletedBy);
	_parser0.parseUINT32(platform);
	_parser0.parseUINT16(popular);
	storeConfigs.parseMsg(_parser0);
}

/*static*/ void ChipsDbm::cli_mobile::PlayChipsConfig::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	UINT32 configId; _parser0.parseUINT32(configId);
	AtfValidator::validateInt(_descr, "configId", configId, _checker, __FILE__, __LINE__);
	INT64 amount; _parser0.parseINT64(amount);
	AtfValidator::validateInt(_descr, "amount", amount, _checker, __FILE__, __LINE__);
	INT64 playChipsAmount; _parser0.parseINT64(playChipsAmount);
	AtfValidator::validateInt(_descr, "playChipsAmount", playChipsAmount, _checker, __FILE__, __LINE__);
	UINT32 payTier; _parser0.parseUINT32(payTier);
	AtfValidator::validateInt(_descr, "payTier", payTier, _checker, __FILE__, __LINE__);
	CommSrvTime whenCreated; _parser0.parseSrvTime(whenCreated);
	AtfValidator::validateSrvDateTime(_descr, "whenCreated", whenCreated, _checker, __FILE__, __LINE__);
	UINT32 createdBy; _parser0.parseUINT32(createdBy);
	AtfValidator::validateInt(_descr, "createdBy", createdBy, _checker, __FILE__, __LINE__);
	CommSrvTime whenObsoleted; _parser0.parseSrvTime(whenObsoleted);
	AtfValidator::validateSrvDateTime(_descr, "whenObsoleted", whenObsoleted, _checker, __FILE__, __LINE__);
	UINT32 obsoletedBy; _parser0.parseUINT32(obsoletedBy);
	AtfValidator::validateInt(_descr, "obsoletedBy", obsoletedBy, _checker, __FILE__, __LINE__);
	UINT32 platform; _parser0.parseUINT32(platform);
	AtfValidator::validateInt(_descr, "platform", platform, _checker, __FILE__, __LINE__);
	UINT16 popular; _parser0.parseUINT16(popular);
	AtfValidator::validateInt(_descr, "popular", popular, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szStoreConfigs = ThinAtf::LAtfVector< PlayChipsConfigStore, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("storeConfigs"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "storeConfigs", szStoreConfigs, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG
//=================================================================

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG(Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG&& _o)
	: errCode(std::move(_o.errCode))
	, errDescr(std::move(_o.errDescr))
	, playChipsConfig(std::move(_o.playChipsConfig))
{
}

ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG& ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::operator=(Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDescr = std::move(_o.errDescr);
		playChipsConfig = std::move(_o.playChipsConfig);
	}
	return *this;
}

#endif

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::clear()
{
	errCode = 0;
	errDescr.clear();
	playChipsConfig.clear();
}

bool ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::equals(const Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG& _o) const
{
	return errCode == _o.errCode &&
		errDescr.equals(_o.errDescr) &&
		playChipsConfig.equals(_o.playChipsConfig);
}

const char *ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode)
	{
		_buf.append(',');
		_buf.append("errDescr=");
		_buf.append(errDescr);
	}
	else
	{
		_buf.append(',');
		_buf.append("playChipsConfig=");
		playChipsConfig.toTraceString(_buf);
	}
	return _buf.c_str();
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode)
	{
		_msg.composeString(errDescr);
	}
	else
	{
		playChipsConfig.composeMsg(_msg);
	}
}

void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode)
	{
		_parser.parseStringP(errDescr);
	}
	else
	{
		playChipsConfig.parseMsg(_parser);
	}
}

/*static*/ void ChipsDbm::cli_mobile::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode)
	{
		_parser.parseStringN(_dummy, 0, "errDescr"); size_t szErrDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDescr", szErrDescr, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szPlayChipsConfig = ThinAtf::LAtfVector< PlayChipsConfig, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("playChipsConfig"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "playChipsConfig", szPlayChipsConfig, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool ChipsDbm::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "cli_mobile"))
	{
		switch(_msgId)
		{
			case CHIPSDBM_A_APPLE_STORE_PURCHASE: cli_mobile::Protocol_CHIPSDBM_A_APPLE_STORE_PURCHASE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case CHIPSDBM_A_GET_CHIPS_TRANS: cli_mobile::Protocol_CHIPSDBM_A_GET_CHIPS_TRANS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG: cli_mobile::Protocol_CHIPSDBM_A_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case CHIPSDBM_A_GOOGLE_PLAY_PURCHASE: cli_mobile::Protocol_CHIPSDBM_A_GOOGLE_PLAY_PURCHASE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case CHIPSDBM_Q_APPLE_STORE_PURCHASE: cli_mobile::Protocol_CHIPSDBM_Q_APPLE_STORE_PURCHASE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case CHIPSDBM_Q_GET_CHIPS_TRANS: cli_mobile::Protocol_CHIPSDBM_Q_GET_CHIPS_TRANS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG: cli_mobile::Protocol_CHIPSDBM_Q_GET_STORE_AVAILABLE_PLAYCHIPSCONFIG::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE: cli_mobile::Protocol_CHIPSDBM_Q_GOOGLE_PLAY_PURCHASE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

