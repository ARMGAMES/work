/**
 * SagStarterCommon_atf_thin.cpp
 *
 * This file was auto-generated from SagStarterCommon_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin SagStarterCommon_atf.txt
 */
 
#include "SagStarterCommon_atf_thin.h"

//=================================================================
//                    RegisterWithScriptId
//=================================================================

SagStarterThin::common::RegisterWithScriptId::RegisterWithScriptId()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SagStarterThin::common::RegisterWithScriptId::RegisterWithScriptId(RegisterWithScriptId&& _o)
	: userId(std::move(_o.userId))
	, buyInRM(std::move(_o.buyInRM))
	, buyInPlay(std::move(_o.buyInPlay))
	, buyInFpp(std::move(_o.buyInFpp))
	, tournPwd(std::move(_o.tournPwd))
	, useTicket(std::move(_o.useTicket))
	, buyInT(std::move(_o.buyInT))
	, buyInW(std::move(_o.buyInW))
	, currencyContext(std::move(_o.currencyContext))
	, sagScriptId(std::move(_o.sagScriptId))
	, numOfGames(std::move(_o.numOfGames))
	, admissionPrice(std::move(_o.admissionPrice))
	, admissions(std::move(_o.admissions))
	, sportsBookVisible(std::move(_o.sportsBookVisible))
{
}

SagStarterThin::common::RegisterWithScriptId& SagStarterThin::common::RegisterWithScriptId::operator=(RegisterWithScriptId&& _o)
{
	if(this != &_o)
	{
		userId = std::move(_o.userId);
		buyInRM = std::move(_o.buyInRM);
		buyInPlay = std::move(_o.buyInPlay);
		buyInFpp = std::move(_o.buyInFpp);
		tournPwd = std::move(_o.tournPwd);
		useTicket = std::move(_o.useTicket);
		buyInT = std::move(_o.buyInT);
		buyInW = std::move(_o.buyInW);
		currencyContext = std::move(_o.currencyContext);
		sagScriptId = std::move(_o.sagScriptId);
		numOfGames = std::move(_o.numOfGames);
		admissionPrice = std::move(_o.admissionPrice);
		admissions = std::move(_o.admissions);
		sportsBookVisible = std::move(_o.sportsBookVisible);
	}
	return *this;
}

#endif

void SagStarterThin::common::RegisterWithScriptId::clear()
{
	userId.clear();
	buyInRM = 0;
	buyInPlay = 0;
	buyInFpp = 0;
	tournPwd.clear();
	useTicket = 0;
	buyInT = 0;
	buyInW = 0;
	currencyContext.clear();
	sagScriptId = 0;
	numOfGames = 0;
	admissionPrice = 0;
	admissions.clear();
	sportsBookVisible = false;
}

bool SagStarterThin::common::RegisterWithScriptId::equals(const RegisterWithScriptId& _o) const
{
	return userId.equals(_o.userId) &&
		buyInRM == _o.buyInRM &&
		buyInPlay == _o.buyInPlay &&
		buyInFpp == _o.buyInFpp &&
		tournPwd.equals(_o.tournPwd) &&
		useTicket == _o.useTicket &&
		buyInT == _o.buyInT &&
		buyInW == _o.buyInW &&
		currencyContext.equals(_o.currencyContext) &&
		sagScriptId == _o.sagScriptId &&
		numOfGames == _o.numOfGames &&
		admissionPrice == _o.admissionPrice &&
		admissions.equals(_o.admissions) &&
		sportsBookVisible == _o.sportsBookVisible;
}

const char *SagStarterThin::common::RegisterWithScriptId::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("buyInRM=");
	_buf.appendInt(buyInRM);
	_buf.append(',');
	_buf.append("buyInPlay=");
	_buf.appendInt(buyInPlay);
	_buf.append(',');
	_buf.append("buyInFpp=");
	_buf.appendInt(buyInFpp);
	_buf.append(',');
	_buf.append("tournPwd=");
	_buf.append(tournPwd);
	_buf.append(',');
	_buf.append("useTicket=");
	_buf.appendUint(useTicket);
	_buf.append(',');
	_buf.append("buyInT=");
	_buf.appendInt(buyInT);
	_buf.append(',');
	_buf.append("buyInW=");
	_buf.appendInt(buyInW);
	_buf.append(',');
	_buf.append("currencyContext=");
	currencyContext.toTraceString(_buf);
	_buf.append(',');
	_buf.append("sagScriptId=");
	_buf.appendUint(sagScriptId);
	_buf.append(',');
	_buf.append("numOfGames=");
	_buf.appendUint(numOfGames);
	_buf.append(',');
	_buf.append("admissionPrice=");
	_buf.appendInt64(admissionPrice);
	_buf.append(',');
	_buf.append("admissions=");
	admissions.toTraceString(_buf);
	_buf.append(',');
	_buf.append("sportsBookVisible=");
	_buf.appendUint(sportsBookVisible);
	_buf.append('}');
	return _buf.c_str();
}

void SagStarterThin::common::RegisterWithScriptId::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId);
	_msg.composeINT32(buyInRM);
	_msg.composeINT32(buyInPlay);
	_msg.composeINT32(buyInFpp);
	_msg.composeString(tournPwd);
	_msg.composeBYTE(useTicket);
	_msg.composeINT32(buyInT);
	_msg.composeINT32(buyInW);
	_msg.composeMsgBody(currencyContext);
	_msg.composeUINT32(sagScriptId);
	_msg.composeBYTE(numOfGames);
	_msg.composeINT64(admissionPrice);
	admissions.composeMsg(_msg);
	_msg.composeBOOL(sportsBookVisible);
}

void SagStarterThin::common::RegisterWithScriptId::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseINT32(buyInRM);
	_parser.parseINT32(buyInPlay);
	_parser.parseINT32(buyInFpp);
	_parser.parseStringP(tournPwd);
	_parser.parseBYTE(useTicket);
	_parser.parseINT32(buyInT);
	_parser.parseINT32(buyInW);
	_parser.parseMsgBody(currencyContext);
	_parser.parseUINT32(sagScriptId);
	_parser.parseBYTE(numOfGames);
	_parser.parseINT64(admissionPrice);
	admissions.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(sportsBookVisible);
}

/*static*/ void SagStarterThin::common::RegisterWithScriptId::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "userId", szUserId, ATF_USER_NAME_MAX_LENGTH, _checker, __FILE__, __LINE__);
	INT32 buyInRM; _parser.parseINT32(buyInRM);
	AtfValidator::validateIntRange(_descr, "buyInRM", buyInRM, 0, ATF_SAG_MAX_BUYIN_REAL, _checker, __FILE__, __LINE__);
	INT32 buyInPlay; _parser.parseINT32(buyInPlay);
	AtfValidator::validateIntRange(_descr, "buyInPlay", buyInPlay, 0, ATF_SAG_MAX_BUYIN_PM, _checker, __FILE__, __LINE__);
	INT32 buyInFpp; _parser.parseINT32(buyInFpp);
	AtfValidator::validateIntRange(_descr, "buyInFpp", buyInFpp, 0, ATF_SAG_MAX_BUYIN_FPP, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "tournPwd"); size_t szTournPwd = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "tournPwd", szTournPwd, ATF_SAG_MAX_PASSWORD_LEN, _checker, __FILE__, __LINE__);
	BYTE useTicket; _parser.parseBYTE(useTicket);
	AtfValidator::validateIntRange(_descr, "useTicket", useTicket, 0, 1, _checker, __FILE__, __LINE__);
	INT32 buyInT; _parser.parseINT32(buyInT);
	AtfValidator::validateIntRange(_descr, "buyInT", buyInT, 0, ATF_SAG_MAX_BUYIN_REAL, _checker, __FILE__, __LINE__);
	INT32 buyInW; _parser.parseINT32(buyInW);
	AtfValidator::validateIntRange(_descr, "buyInW", buyInW, 0, 0, _checker, __FILE__, __LINE__);
	size_t szCurrencyContext; _parser.skipMsgBody(szCurrencyContext);  /*currencyContext*/
	AtfValidator::validateIntMax(_descr, "currencyContext", szCurrencyContext, 10000, _checker, __FILE__, __LINE__);
	UINT32 sagScriptId; _parser.parseUINT32(sagScriptId);
	AtfValidator::validateInt(_descr, "sagScriptId", sagScriptId, _checker, __FILE__, __LINE__);
	BYTE numOfGames; _parser.parseBYTE(numOfGames);
	AtfValidator::validateIntRange(_descr, "numOfGames", numOfGames, 1, ATF_SAG_MAX_REG_GAMES, _checker, __FILE__, __LINE__);
	INT64 admissionPrice; _parser.parseINT64(admissionPrice);
	AtfValidator::validateIntRange(_descr, "admissionPrice", admissionPrice, 0, ATF_SAG_MAX_ADMISSION_PRICE, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szAdmissions = ThinAtf::LAtfVector< CommonThin::AtfShared::UserTicketDataBase, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("admissions"), _fieldsWithUnparsedContent);
	AtfValidator::validateIntMax(_descr, "admissions", szAdmissions, ATF_SAG_MAX_ADMISSIONS, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool sportsBookVisible; _parser.parseBOOL(sportsBookVisible);
	AtfValidator::validateInt(_descr, "sportsBookVisible", sportsBookVisible, _checker, __FILE__, __LINE__);
}

