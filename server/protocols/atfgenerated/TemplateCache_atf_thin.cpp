/**
 * TemplateCache_atf_thin.cpp
 *
 * This file was auto-generated from TemplateCache_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin TemplateCache_atf.txt
 */
 
#include "TemplateCache_atf_thin.h"

//=================================================================
//                Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE()
{
	clear();
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::clear()
{
	category = 0;
	subCategory = 0;
	clientPlatformId = 0;
	clientType = 0;
	clientDevice = 0;
	clientSiteId = 0;
	locale = 0;
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::equals(const Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE& _o) const
{
	return category == _o.category &&
		subCategory == _o.subCategory &&
		clientPlatformId == _o.clientPlatformId &&
		clientType == _o.clientType &&
		clientDevice == _o.clientDevice &&
		clientSiteId == _o.clientSiteId &&
		locale == _o.locale;
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_Q_I18N_GET_TRANSLATED_MESSAGE).append(")");
	_buf.append(',');
	_buf.append("category=");
	_buf.appendUint(category);
	_buf.append(',');
	_buf.append("subCategory=");
	_buf.appendUint(subCategory);
	_buf.append(',');
	_buf.append("clientPlatformId=");
	_buf.appendUint(clientPlatformId);
	_buf.append(',');
	_buf.append("clientType=");
	_buf.appendUint(clientType);
	_buf.append(',');
	_buf.append("clientDevice=");
	_buf.appendUint(clientDevice);
	_buf.append(',');
	_buf.append("clientSiteId=");
	_buf.appendUint(clientSiteId);
	_buf.append(',');
	_buf.append("locale=");
	_buf.appendUint(locale);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(category);
	_msg.composeUINT32(subCategory);
	_msg.composeUINT32(clientPlatformId);
	_msg.composeUINT32(clientType);
	_msg.composeUINT32(clientDevice);
	_msg.composeUINT32(clientSiteId);
	_msg.composeUINT32(locale);
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(category);
	_parser.parseUINT32(subCategory);
	_parser.parseUINT32(clientPlatformId);
	_parser.parseUINT32(clientType);
	_parser.parseUINT32(clientDevice);
	_parser.parseUINT32(clientSiteId);
	_parser.parseUINT32(locale);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_Q_I18N_GET_TRANSLATED_MESSAGE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 category; _parser.parseUINT32(category);
	AtfValidator::validateIntRange(_descr, "category", category, eUserBlocking, eTemplateCacheMessageCategory_Last, _checker, __FILE__, __LINE__);
	UINT32 subCategory; _parser.parseUINT32(subCategory);
	AtfValidator::validateIntMax(_descr, "subCategory", subCategory, 2000000000, _checker, __FILE__, __LINE__);
	UINT32 clientPlatformId; _parser.parseUINT32(clientPlatformId);
	AtfValidator::validateIntRange(_descr, "clientPlatformId", clientPlatformId, Client_UnknownPlatform, Client_Last, _checker, __FILE__, __LINE__);
	UINT32 clientType; _parser.parseUINT32(clientType);
	AtfValidator::validateIntRange(_descr, "clientType", clientType, ClientType_Unknown, ClientType_Last, _checker, __FILE__, __LINE__);
	UINT32 clientDevice; _parser.parseUINT32(clientDevice);
	AtfValidator::validateIntRange(_descr, "clientDevice", clientDevice, ClientDevice_Unknown, ClientDevice_Last, _checker, __FILE__, __LINE__);
	UINT32 clientSiteId; _parser.parseUINT32(clientSiteId);
	AtfValidator::validateIntRange(_descr, "clientSiteId", clientSiteId, PokerStars_SiteUnknown, PokerStars_Last, _checker, __FILE__, __LINE__);
	UINT32 locale; _parser.parseUINT32(locale);
	AtfValidator::validateIntMax(_descr, "locale", locale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE(Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE&& _o)
	: errCode(std::move(_o.errCode))
	, msg(std::move(_o.msg))
{
}

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE& TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::operator=(Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		msg = std::move(_o.msg);
	}
	return *this;
}

#endif

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::clear()
{
	errCode = 0;
	msg.clear();
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::equals(const Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE& _o) const
{
	return errCode == _o.errCode &&
		msg.equals(_o.msg);
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_A_I18N_GET_TRANSLATED_MESSAGE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("msg=");
	_buf.append(msg);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(msg);
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringP(msg);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_A_I18N_GET_TRANSLATED_MESSAGE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode; _parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "msg"); size_t szMsg = strlen(_dummy);
	AtfValidator::validateInt(_descr, "msg", szMsg, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR(Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR&& _o)
	: errorDescr(std::move(_o.errorDescr))
	, clientPlatformId(std::move(_o.clientPlatformId))
	, clientType(std::move(_o.clientType))
	, clientDevice(std::move(_o.clientDevice))
	, clientSiteId(std::move(_o.clientSiteId))
	, locale(std::move(_o.locale))
{
}

TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR& TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::operator=(Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR&& _o)
{
	if(this != &_o)
	{
		errorDescr = std::move(_o.errorDescr);
		clientPlatformId = std::move(_o.clientPlatformId);
		clientType = std::move(_o.clientType);
		clientDevice = std::move(_o.clientDevice);
		clientSiteId = std::move(_o.clientSiteId);
		locale = std::move(_o.locale);
	}
	return *this;
}

#endif

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::clear()
{
	errorDescr.clear();
	clientPlatformId = 0;
	clientType = 0;
	clientDevice = 0;
	clientSiteId = 0;
	locale = 0;
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::equals(const Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR& _o) const
{
	return errorDescr.equals(_o.errorDescr) &&
		clientPlatformId == _o.clientPlatformId &&
		clientType == _o.clientType &&
		clientDevice == _o.clientDevice &&
		clientSiteId == _o.clientSiteId &&
		locale == _o.locale;
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR).append(")");
	_buf.append(',');
	_buf.append("errorDescr=");
	_buf.append(errorDescr);
	_buf.append(',');
	_buf.append("clientPlatformId=");
	_buf.appendUint(clientPlatformId);
	_buf.append(',');
	_buf.append("clientType=");
	_buf.appendUint(clientType);
	_buf.append(',');
	_buf.append("clientDevice=");
	_buf.appendUint(clientDevice);
	_buf.append(',');
	_buf.append("clientSiteId=");
	_buf.appendUint(clientSiteId);
	_buf.append(',');
	_buf.append("locale=");
	_buf.appendUint(locale);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(errorDescr);
	_msg.composeUINT32(clientPlatformId);
	_msg.composeUINT32(clientType);
	_msg.composeUINT32(clientDevice);
	_msg.composeUINT32(clientSiteId);
	_msg.composeUINT32(locale);
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(errorDescr);
	_parser.parseUINT32(clientPlatformId);
	_parser.parseUINT32(clientType);
	_parser.parseUINT32(clientDevice);
	_parser.parseUINT32(clientSiteId);
	_parser.parseUINT32(locale);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "errorDescr"); size_t szErrorDescr = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "errorDescr", szErrorDescr, 10000, _checker, __FILE__, __LINE__);
	UINT32 clientPlatformId; _parser.parseUINT32(clientPlatformId);
	AtfValidator::validateIntRange(_descr, "clientPlatformId", clientPlatformId, Client_UnknownPlatform, Client_Last, _checker, __FILE__, __LINE__);
	UINT32 clientType; _parser.parseUINT32(clientType);
	AtfValidator::validateIntRange(_descr, "clientType", clientType, ClientType_Unknown, ClientType_Last, _checker, __FILE__, __LINE__);
	UINT32 clientDevice; _parser.parseUINT32(clientDevice);
	AtfValidator::validateIntRange(_descr, "clientDevice", clientDevice, ClientDevice_Unknown, ClientDevice_Last, _checker, __FILE__, __LINE__);
	UINT32 clientSiteId; _parser.parseUINT32(clientSiteId);
	AtfValidator::validateIntRange(_descr, "clientSiteId", clientSiteId, PokerStars_SiteUnknown, PokerStars_Last, _checker, __FILE__, __LINE__);
	UINT32 locale; _parser.parseUINT32(locale);
	AtfValidator::validateIntMax(_descr, "locale", locale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR(Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR&& _o)
	: errCode(std::move(_o.errCode))
	, msg(std::move(_o.msg))
{
}

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR& TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::operator=(Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		msg = std::move(_o.msg);
	}
	return *this;
}

#endif

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::clear()
{
	errCode = 0;
	msg.clear();
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::equals(const Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR& _o) const
{
	return errCode == _o.errCode &&
		msg.equals(_o.msg);
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("msg=");
	_buf.append(msg);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(msg);
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringP(msg);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode; _parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "msg"); size_t szMsg = strlen(_dummy);
	AtfValidator::validateInt(_descr, "msg", szMsg, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS(Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS&& _o)
	: locale(std::move(_o.locale))
	, bonusIds(std::move(_o.bonusIds))
{
}

TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS& TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::operator=(Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS&& _o)
{
	if(this != &_o)
	{
		locale = std::move(_o.locale);
		bonusIds = std::move(_o.bonusIds);
	}
	return *this;
}

#endif

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::clear()
{
	locale = 0;
	bonusIds.clear();
}

bool TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::equals(const Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS& _o) const
{
	return locale == _o.locale &&
		bonusIds.equals(_o.bonusIds);
}

const char *TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS).append(")");
	_buf.append(',');
	_buf.append("locale=");
	_buf.appendUint(locale);
	_buf.append(',');
	_buf.append("bonusIds=");
	bonusIds.toTraceString(_buf);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(locale);
	bonusIds.composeMsg(_msg);
}

void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(locale);
	bonusIds.parseMsg(_parser);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 locale; _parser.parseUINT32(locale);
	AtfValidator::validateIntMax(_descr, "locale", locale, MAX_LOCALES, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szBonusIds = ThinAtf::LAtfVector< UINT32, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("bonusIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateIntMax(_descr, "bonusIds", szBonusIds, 10240, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    BonusStrings
//=================================================================

TemplateCache::cli_unauth::BonusStrings::BonusStrings()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TemplateCache::cli_unauth::BonusStrings::BonusStrings(BonusStrings&& _o)
	: bonusId(std::move(_o.bonusId))
	, bonusName(std::move(_o.bonusName))
	, bonusDescription(std::move(_o.bonusDescription))
	, bonusUrl(std::move(_o.bonusUrl))
{
}

TemplateCache::cli_unauth::BonusStrings& TemplateCache::cli_unauth::BonusStrings::operator=(BonusStrings&& _o)
{
	if(this != &_o)
	{
		bonusId = std::move(_o.bonusId);
		bonusName = std::move(_o.bonusName);
		bonusDescription = std::move(_o.bonusDescription);
		bonusUrl = std::move(_o.bonusUrl);
	}
	return *this;
}

#endif

void TemplateCache::cli_unauth::BonusStrings::clear()
{
	bonusId = 0;
	bonusName.clear();
	bonusDescription.clear();
	bonusUrl.clear();
}

bool TemplateCache::cli_unauth::BonusStrings::equals(const BonusStrings& _o) const
{
	return bonusId == _o.bonusId &&
		bonusName.equals(_o.bonusName) &&
		bonusDescription.equals(_o.bonusDescription) &&
		bonusUrl.equals(_o.bonusUrl);
}

const char *TemplateCache::cli_unauth::BonusStrings::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("bonusId=");
	_buf.appendUint(bonusId);
	_buf.append(',');
	_buf.append("bonusName=");
	_buf.append(bonusName);
	_buf.append(',');
	_buf.append("bonusDescription=");
	_buf.append(bonusDescription);
	_buf.append(',');
	_buf.append("bonusUrl=");
	_buf.append(bonusUrl);
	_buf.append('}');
	return _buf.c_str();
}

void TemplateCache::cli_unauth::BonusStrings::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(BonusStrings())) // not empty
	{
		_body.composeUINT32(bonusId);
		_body.composeString(bonusName);
		_body.composeString(bonusDescription);
		_body.composeString(bonusUrl);
	}

	_msg.composeMsgBody(_body);
}

void TemplateCache::cli_unauth::BonusStrings::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(bonusId);
	_parser0.parseStringP(bonusName);
	_parser0.parseStringP(bonusDescription);
	_parser0.parseStringP(bonusUrl);
}

/*static*/ void TemplateCache::cli_unauth::BonusStrings::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	UINT32 bonusId; _parser0.parseUINT32(bonusId);
	AtfValidator::validateInt(_descr, "bonusId", bonusId, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "bonusName"); size_t szBonusName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "bonusName", szBonusName, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "bonusDescription"); size_t szBonusDescription = strlen(_dummy);
	AtfValidator::validateInt(_descr, "bonusDescription", szBonusDescription, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "bonusUrl"); size_t szBonusUrl = strlen(_dummy);
	AtfValidator::validateInt(_descr, "bonusUrl", szBonusUrl, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS
//=================================================================

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS(Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS&& _o)
	: bonusStrings(std::move(_o.bonusStrings))
{
}

TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS& TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::operator=(Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS&& _o)
{
	if(this != &_o)
	{
		bonusStrings = std::move(_o.bonusStrings);
	}
	return *this;
}

#endif

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::clear()
{
	bonusStrings.clear();
}

bool TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::equals(const Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS& _o) const
{
	return bonusStrings.equals(_o.bonusStrings);
}

const char *TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS).append(")");
	_buf.append(',');
	_buf.append("bonusStrings=");
	bonusStrings.toTraceString(_buf);
	return _buf.c_str();
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::composeMsg(CommMsgBody& _msg) const
{
	bonusStrings.composeMsg(_msg);
}

void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::parseMsg(CommMsgParser& _parser)
{
	bonusStrings.parseMsg(_parser);
}

/*static*/ void TemplateCache::cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szBonusStrings = ThinAtf::LAtfVector< BonusStrings, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("bonusStrings"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "bonusStrings", szBonusStrings, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool TemplateCache::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "cli_unauth"))
	{
		switch(_msgId)
		{
			case TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS: cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR: cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case TS_A_I18N_GET_TRANSLATED_MESSAGE: cli_unauth::Protocol_TS_A_I18N_GET_TRANSLATED_MESSAGE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS: cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_BONUSES_STRINGS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR: cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_INTERNAL_ERROR::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case TS_Q_I18N_GET_TRANSLATED_MESSAGE: cli_unauth::Protocol_TS_Q_I18N_GET_TRANSLATED_MESSAGE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

