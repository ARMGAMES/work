/**
 * tablehh.cpp
 *
 * This file was auto-generated from tablehh.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: tablehh.txt
 */
 
#include "tablehh.h"

//=================================================================
//                    PlayerAndBounty
//=================================================================

HandHist::content::PlayerAndBounty::PlayerAndBounty()
{
	clear();
}

void HandHist::content::PlayerAndBounty::clear()
{
	userId.clear();
	bounty = 0;
	tournId = 0;
	ticketAdmission.clear();
	tchips = 0;
}

bool HandHist::content::PlayerAndBounty::equals(const PlayerAndBounty& _o) const
{
	return Atf::atfPStringEquals(userId, _o.userId) &&
		bounty == _o.bounty &&
		tournId == _o.tournId &&
		Atf::atfPStringEquals(ticketAdmission, _o.ticketAdmission) &&
		tchips == _o.tchips;
}

const char *HandHist::content::PlayerAndBounty::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("bounty=");
	_buf.appendInt64(bounty);
	_buf.append(',');
	_buf.append("tournId=");
	_buf.appendUint64(tournId);
	_buf.append(',');
	_buf.append("ticketAdmission=");
	_buf.append(ticketAdmission);
	_buf.append(',');
	_buf.append("tchips=");
	_buf.appendUint(tchips);
	_buf.append('}');
	return _buf.c_str();
}

const char *HandHist::content::PlayerAndBounty::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	Atf::XmlElement::encodeAsXmlElement("bounty", bounty, _buf);
	Atf::XmlElement::encodeAsXmlElement("tournId", tournId, _buf);
	Atf::XmlElement::encodeAsXmlElement("ticketAdmission", ticketAdmission, _buf);
	Atf::XmlElement::encodeAsXmlElement("tchips", tchips, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool HandHist::content::PlayerAndBounty::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("userId"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
		}
		else if (_element.equals("bounty"))
		{
			bounty = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("tournId"))
		{
			tournId = (UINT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("ticketAdmission"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, ticketAdmission)) return false;
		}
		else if (_element.equals("tchips"))
		{
			tchips = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void HandHist::content::PlayerAndBounty::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(PlayerAndBounty())) // not empty
	{
		_body.composeString(userId);
		_body.composeINT64(bounty);
		_body.composeUINT64(tournId);
		_body.composeString(ticketAdmission);
		_body.composeUINT32(tchips);
	}

	_msg.composeMsgBody(_body);
}

void HandHist::content::PlayerAndBounty::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(userId);
	_parser0.parseINT64(bounty);
	_parser0.parseUINT64(tournId);
	_parser0.parseStringP(ticketAdmission);
	_parser0.parseUINT32(tchips);
}

const char *HandHist::content::PlayerAndBounty::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("bounty", bounty);
	_jsonstr.compose("tournId", tournId);
	_jsonstr.compose("ticketAdmission", ticketAdmission);
	_jsonstr.compose("tchips", tchips);
	return _buf.c_str();
}

void HandHist::content::PlayerAndBounty::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("bounty", bounty);
	_jparser.parseByNameThrow("tournId", tournId);
	_jparser.parseByNameThrow("ticketAdmission", ticketAdmission);
	_jparser.parseByNameThrow("tchips", tchips);
}

/* static */ void HandHist::content::PlayerAndBounty::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
	INT64 bounty; _jparser.validateByNameThrow("bounty", bounty);
	AtfValidator::validateInt(_descr, "bounty", bounty, _checker, __FILE__, __LINE__);
	UINT64 tournId; _jparser.validateByNameThrow("tournId", tournId);
	AtfValidator::validateUint(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	PString ticketAdmission; _jparser.validateByNameThrow("ticketAdmission", ticketAdmission);
	AtfValidator::validateInt(_descr, "ticketAdmission", ticketAdmission.length(), _checker, __FILE__, __LINE__);
	UINT32 tchips; _jparser.validateByNameThrow("tchips", tchips);
	AtfValidator::validateInt(_descr, "tchips", tchips, _checker, __FILE__, __LINE__);
}

/*static*/ void HandHist::content::PlayerAndBounty::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	INT64 bounty; _parser0.parseINT64(bounty);
	AtfValidator::validateInt(_descr, "bounty", bounty, _checker, __FILE__, __LINE__);
	UINT64 tournId; _parser0.parseUINT64(tournId);
	AtfValidator::validateUint(_descr, "tournId", tournId, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "ticketAdmission"); size_t szTicketAdmission = strlen(_dummy);
	AtfValidator::validateInt(_descr, "ticketAdmission", szTicketAdmission, _checker, __FILE__, __LINE__);
	UINT32 tchips; _parser0.parseUINT32(tchips);
	AtfValidator::validateInt(_descr, "tchips", tchips, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    BountyWon
//=================================================================

HandHist::content::BountyWon::BountyWon()
{
	clear();
}

void HandHist::content::BountyWon::clear()
{
	bountyWinners.clear();
}

bool HandHist::content::BountyWon::equals(const BountyWon& _o) const
{
	return bountyWinners.equals(_o.bountyWinners);
}

const char *HandHist::content::BountyWon::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("bountyWinners=");
	bountyWinners.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

const char *HandHist::content::BountyWon::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	bountyWinners.toXmlString("bountyWinners", _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool HandHist::content::BountyWon::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("bountyWinners"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< PlayerAndBounty , 4 > >::FromXmlString(_value, bountyWinners)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void HandHist::content::BountyWon::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	bountyWinners.composeMsg(_msg, _ignoreJSON);
}

void HandHist::content::BountyWon::parseMsg(CommMsgParser& _parser)
{
	bountyWinners.parseMsg(_parser);
}

const char *HandHist::content::BountyWon::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("bountyWinners", bountyWinners);
	return _buf.c_str();
}

void HandHist::content::BountyWon::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("bountyWinners", bountyWinners);
}

/* static */ void HandHist::content::BountyWon::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	Atf::AtfVectorBase< PlayerAndBounty > bountyWinners; _jparser.validateByNameThrow("bountyWinners", bountyWinners);
	AtfValidator::validateInt(_descr, "bountyWinners", bountyWinners.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void HandHist::content::BountyWon::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szBountyWinners = Atf::LAtfVector< PlayerAndBounty , 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("bountyWinners"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "bountyWinners", szBountyWinners, _checker, __FILE__, __LINE__);
}

