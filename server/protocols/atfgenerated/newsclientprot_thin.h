/**
 * newsclientprot_thin.h
 *
 * This file was auto-generated from newsclientprot.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin newsclientprot.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_NEWSCLIENTPROT_THIN_H
#define ATF_PROTOCOL_DEFFILE_NEWSCLIENTPROT_THIN_H


#include "ThinAtfUserDefStructs.h"

namespace NewsServerClient
{
	//---------------------------------------------------------------------------------------------
	// News Server Data Publications
	//---------------------------------------------------------------------------------------------

	struct MorphLobbyGame
	{
		// M(1111) - M(gameType,structure,hiLo,numPlayers)
		BYTE gameType;
		BYTE structure;
		BYTE hiLo;
		BYTE numPlayers;

		MorphLobbyGame();
		void clear();
		bool equals(const MorphLobbyGame&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct MorphLobbyPublData	// Leaf { 0, x }
	{
		// 44s111IIIII1ss4<M(1111)> - templateId,version,helpSupportPortalName,gameType,structure,hiLo,tabName,mobileNVP,mobileImage,desktopLobbyMhtml,desktopSidecarMhtml,defaultWeighting,helpSupportPortalShowAsNewName,helpSupportPortalShowAsDefaultName,numGames<M(gameType,structure,hiLo,numPlayers)>
		UINT32 templateId;
		UINT32 version;
		PString helpSupportPortalName;
		BYTE gameType;
		BYTE structure;
		BYTE hiLo;
		I18nPString tabName;
		I18nPString mobileNVP;
		I18nPString mobileImage;
		I18nPString desktopLobbyMhtml;
		I18nPString desktopSidecarMhtml;

		BYTE defaultWeighting;
		PString helpSupportPortalShowAsNewName;
		PString helpSupportPortalShowAsDefaultName;
		ThinAtf::LAtfVector< MorphLobbyGame, 4 > games;

		MorphLobbyPublData();
		void clear();
		bool equals(const MorphLobbyPublData&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		MorphLobbyPublData(MorphLobbyPublData&&);
		MorphLobbyPublData& operator=(MorphLobbyPublData&&);
	private:
		MorphLobbyPublData(const MorphLobbyPublData&);  // prohibit
		MorphLobbyPublData& operator=(const MorphLobbyPublData&);  // prohibit
#endif
	};

	struct BrandedTournWidget
	{
		// M(Is) - M(mhtml,branding)
		I18nPString mhtml;
		PString branding;

		BrandedTournWidget();
		void clear();
		bool equals(const BrandedTournWidget&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		BrandedTournWidget(BrandedTournWidget&&);
		BrandedTournWidget& operator=(BrandedTournWidget&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		BrandedTournWidget(const BrandedTournWidget&) = default;
		BrandedTournWidget& operator=(const BrandedTournWidget&) = default;
#endif
#endif
	};

	struct KnockoutLobbyPublData	// Leaf { 0, x, 0 }
	{
		// 4sIII - version,helpSupportPortalName,tabName,lobbyMhtml,mobileImage
		UINT32 version;
		PString helpSupportPortalName;
		I18nPString tabName;
		I18nPString lobbyMhtml;
		I18nPString mobileImage;

		KnockoutLobbyPublData();
		void clear();
		bool equals(const KnockoutLobbyPublData&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		KnockoutLobbyPublData(KnockoutLobbyPublData&&);
		KnockoutLobbyPublData& operator=(KnockoutLobbyPublData&&);
	private:
		KnockoutLobbyPublData(const KnockoutLobbyPublData&);  // prohibit
		KnockoutLobbyPublData& operator=(const KnockoutLobbyPublData&);  // prohibit
#endif
	};

	struct KnockoutLobbyWidgetPublData	// Leaf { 0, x, 1 }
	{
		// II4<M(Is)> - sngWidgetMhtml,regularTournWidgetMhtml,numBrandedWidgets<M(mhtml,branding)>
		I18nPString sngWidgetMhtml;
		I18nPString regularTournWidgetMhtml;
		ThinAtf::LAtfVector< BrandedTournWidget, 4 > brandedWidgets;

		KnockoutLobbyWidgetPublData();
		void clear();
		bool equals(const KnockoutLobbyWidgetPublData&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		KnockoutLobbyWidgetPublData(KnockoutLobbyWidgetPublData&&);
		KnockoutLobbyWidgetPublData& operator=(KnockoutLobbyWidgetPublData&&);
	private:
		KnockoutLobbyWidgetPublData(const KnockoutLobbyWidgetPublData&);  // prohibit
		KnockoutLobbyWidgetPublData& operator=(const KnockoutLobbyWidgetPublData&);  // prohibit
#endif
	};
};

#endif
