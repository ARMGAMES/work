#include "converter.h"
#include "pyrtime.h"

#define TOP_LEVEL_NAMESPACE converter

MsgBodyStruct CountryCurrency
{
	PString countryCode minlen 2 maxlen 2;
	PString localCurrencyIsoCode minlen 3 maxlen 3;
	
	@override CountryCurrency(PString code, PString isoCode)
	{
		countryCode = code;
		localCurrencyIsoCode = isoCode;
	}
};



MsgBodyStruct CurrencyConvertRate
{
	PString currency;
	INT32 rate;
};

Message MSG_CONVERTER_GET_ALL_RATES //101
{
	SrvTime time;
};

Message MSG_CONVERTER_GET_ALL_RATES_REPLY //102
{
	INT16 errCode;
	if(errCode)
	{
		PString errorDescription;
	}
	else
	{
		vector<CurrencyConvertRate> rates;
	}	
};


Message MSG_CONVERTER_GET_RATE //103 
{
	SrvTime time;
	PString currency;
};
Message MSG_CONVERTER_GET_RATE_REPLY //104 
{	
	INT16 errCode;
	if(errCode)
	{
		PString errorDescription;
	}	
	else
	{
		INT32 rate;
	}
};

Message MSG_CONVERTER_CONVERT_AMOUNT //105 
{
		SrvTime time;
		INT64 srcCurrencyAmount;
		PString srcCurrencyType;
		PString destCurrencyType;
		bool applyRounding;
		bool roundUp;
};
Message MSG_CONVERTER_CONVERT_AMOUNT_REPLY //106 
{	
	INT16 errCode;
	if(errCode)
	{
		PString errorDescription;
	}	
	else
	{
		INT64 destAmount;
		INT64 rate parseEndOptB4Me;
	}
};



MsgBodyStruct CurrencyConvertBatchRequest	
{
	INT64 srcCurrencyAmount;
	PString srcCurrencyType minlen 3 maxlen 3;
	PString destCurrencyType minlen 3 maxlen 3;
};


Message MSG_CONVERTER_CONVERT_BATCH_AMOUNTS	//107
{
	SrvTime time;	
	bool applyRounding;
	bool roundUp;	
	vector<CurrencyConvertBatchRequest> convertRequests;
};

MsgBodyStruct CurrencyConvertBatchReply
{
	INT16 errCode;
	if(errCode)
	{
		PString errorDescription;	
	}
	else
	{
		INT64 destAmount;
		INT64 rate parseEndOptB4Me;
	}
};


Message MSG_CONVERTER_CONVERT_BATCH_AMOUNTS_REPLY	//108
{
	INT16 errCode;
	if(errCode)
	{
		PString errorDescription;
	}
	else
	{
		vector<CurrencyConvertBatchReply> conversionResults;
	}
};




Message MSG_CONVERTER_GET_DATA_FOR_CLIENT_CONVERSIONS //109
{
	SrvTime time;
};



MsgBodyStruct CurrencyConvertData
{
	INT64 roundingFactorsCommonRatio;
	vector<INT64> roundingFactors;
	vector<CurrencyConvertRate> rates;
};



Message MSG_CONVERTER_GET_DATA_FOR_CLIENT_CONVERSIONS_REPLY //110
{
	INT16 errCode;
	if(errCode)
	{
		PString errorDescription;
	}
	else
	{
		CurrencyConvertData payload;
	}
};


Message MSG_CONVERTER_CONVERT_AMOUNT_BY_COUNTRY_CODE //111 
{
		SrvTime time;
		INT64 srcCurrencyAmount;
		PString srcCurrencyType minlen 3 maxlen 3;
		PString destCountryCode minlen 2 maxlen 2;
		bool applyRounding;
		bool roundUp;		
};
Message MSG_CONVERTER_CONVERT_AMOUNT_BY_COUNTRY_CODE_REPLY //112 
{	
	INT16 errCode;
	if(errCode)
	{
		PString errorDescription;
	}	
	else
	{
		INT64 destAmount;
		PString destCurrencyType minlen 3 maxlen 3;
		INT64 rate parseEndOptB4Me;
	}
};