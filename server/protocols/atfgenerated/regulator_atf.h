/**
 * regulator_atf.h
 *
 * This file was auto-generated from regulator_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: regulator_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_REGULATOR_ATF_H
#define ATF_PROTOCOL_DEFFILE_REGULATOR_ATF_H

#include "regulator.h"
#include "cashier.h"
#include "lobby.h"
#include "UserDefStructs.h"
#include "i18n.localedef.h"
#include "clientplatforms.h"
#include "timezone.h"
#include "tsclientshared.h"
#include "Common_atf.h"


#define CHALLENGE_ANSWERS_SIZE 2

namespace regulator
{
	class ProtocolFactory
	{
	public:
		static Atf::MessageProtocol* createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId);
		static bool validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	//////////////////////////////////// COMMON STRUCTS ////////////////////////////
	namespace common_structs
	{
		struct ResetPwdMessageStruct	// request
		{
			// ssssbsss - user,zip,addr,email,useChallengeQuestions,answer1,answer2,ssn4
			PString user;
			PString zip;	// client does not limit the length
			PString addr;	// client does not limit the length
			PString email;
			bool useChallengeQuestions;
			PString answer1;
			PString answer2;
			PString ssn4;

			ResetPwdMessageStruct();
			void clear();
			bool equals(const ResetPwdMessageStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct ChallengeQuestion	// reply
		{
			// 4s - id,txt
			UINT32 id;
			PString txt;

			ChallengeQuestion();
			void clear();
			bool equals(const ChallengeQuestion&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct LobbyNameAvailableStruct	// request
		{
			// s4 - userId,localeId
			PString userId;	// clients can send strings longer than USER_NAME_LEN due to utf8 characters
			UINT32 localeId;

			LobbyNameAvailableStruct();
			void clear();
			bool equals(const LobbyNameAvailableStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct LobbyNameAvailableReplyStruct	// response
		{
			// 2[s|s4<s>] - errCode[errDescr|userId_,numSuggestedIds<suggestedIds>]
			INT16 errCode;

			PString errDescr;

			PString userId_;
			Atf::LAtfVector< PString, 4 > suggestedIds;

			LobbyNameAvailableReplyStruct();
			void clear();
			bool equals(const LobbyNameAvailableReplyStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct EmailAttachmentStruct	// request
		{
			// sv - attName,attBody
			PString attName;
			PBlock attBody;

			EmailAttachmentStruct();
			void clear();
			bool equals(const EmailAttachmentStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct EmailAttachmentVec	// request
		{
			// 4<sv> - numAttachments<attName,attBody>
			Atf::LAtfVector< EmailAttachmentStruct, 4 > attachments;

			EmailAttachmentVec();
			void clear();
			bool equals(const EmailAttachmentVec&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct EmailAttachmentPart	// request
		{
			// ss4<sv> - clientVersion,clientOsInfo,numAttachments<attName,attBody>
			PString clientVersion;	// client can send longer than CLIENT_TO_SUPPORT_VER_LEN
			PString clientOsInfo;	// client can send longer than CLIENT_TO_SUPPORT_OS_LEN
			EmailAttachmentVec attachments;

			EmailAttachmentPart();
			void clear();
			bool equals(const EmailAttachmentPart&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct LobbyClientToSupportEmailStruct	// request
		{
			// s44ssss4<sv> - userId,category,subCategory,subject,body,clientVersion,clientOsInfo,numAttachments<attName,attBody>
			PString userId;
			UINT32 category;	// enum eClientEmailCategory
			UINT32 subCategory;	// generic field, can be one of many subcategories in tsclientshared.h
			PString subject;
			PString body;
			EmailAttachmentPart attPart;

			LobbyClientToSupportEmailStruct();
			void clear();
			bool equals(const LobbyClientToSupportEmailStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct LobbyClientToSupportEmailReplyStruct	// reply
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			LobbyClientToSupportEmailReplyStruct();
			void clear();
			bool equals(const LobbyClientToSupportEmailReplyStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ChallengeAnswer	// request
		{
			// s - answer
			PString answer;

			ChallengeAnswer();
			void clear();
			bool equals(const ChallengeAnswer&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct UserProfile	// request
		{
			// ssssssssdsssssss4sds448s - firstName,lastName,sex,addr_1,citymaxlen,state,country,zipCode,birthDate,birthCity,birthState,birthCountry,phone,mobile,email,fiscalCode,documentType,documentNumber,documentIssueDate,documentPlaceOfIssue,documentIssuingAuthority,flags,flags2,profession
			PString firstName;
			PString lastName;
			PString sex;

			PString addr_1;
			PString citymaxlen;
			PString state;
			PString country;
			PString zipCode;

			CommSrvDate birthDate;
			PString birthCity;
			PString birthState;
			PString birthCountry;

			PString phone;
			PString mobile;
			PString email;

			PString fiscalCode;
			UINT32 documentType;	// no limit, limit depends on license
			PString documentNumber;
			CommSrvDate documentIssueDate;
			PString documentPlaceOfIssue;
			UINT32 documentIssuingAuthority;	// limit depends on document type

			// PYR-19416 (for ARJEL)
			UINT32 flags;
			UINT64 flags2;

			PString profession;

			UserProfile();
			void clear();
			bool equals(const UserProfile&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct UserUpdateElement	// request
		{
			//! 4 <FIXME_COND_IF> M(ssssss) <FIXME_COND_ELSE> M(sb) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(1v) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M() <FIXME_COND_ELSE> M(ss) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(4< <FIXME>Common::AtfShared::UserPropertyLegacy</FIXME> >) <FIXME_COND_ELSE> M(d) <FIXME_COND_ELSE> M(44b) <FIXME_COND_ELSE> M(4b4b4s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(ss) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(bbbb) <FIXME_COND_ELSE> M(ssssssssdsssssss4sds448s) <FIXME_COND_ELSE> M(bs) <FIXME_COND_ELSE> M(44b4) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(sss) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(844s) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M() <FIXME_COND_ENDIF>  - updateType <FIXME_COND_IF> ,M(addr_1,addr_2,city,state,country,zipCode) <FIXME_COND_ELSE> ,M(email,autoValidateEmail) <FIXME_COND_ELSE> ,M(pwd) <FIXME_COND_ELSE> ,M(imageType,imgData) <FIXME_COND_ELSE> ,M(fullName) <FIXME_COND_ELSE> ,M(phone) <FIXME_COND_ELSE> ,M() <FIXME_COND_ELSE> ,M(firstName,lastName) <FIXME_COND_ELSE> ,M(fiscalCode) <FIXME_COND_ELSE> ,M(encrFiscalCode) <FIXME_COND_ELSE> ,M(numProperties< <FIXME>Common::AtfShared::UserPropertyLegacy</FIXME> >) <FIXME_COND_ELSE> ,M(birthDate) <FIXME_COND_ELSE> ,M(imageId,currentImageId,isCurrentImageFromGallery) <FIXME_COND_ELSE> ,M(imageId,isGalleryImage,currentImageId,isCurrentImageFromGallery,adminIntId,adminId) <FIXME_COND_ELSE> ,M(sex) <FIXME_COND_ELSE> ,M(mobile) <FIXME_COND_ELSE> ,M(verificationCertificate,verificationSignedData) <FIXME_COND_ELSE> ,M(mailListIn) <FIXME_COND_ELSE> ,M(mailListPokerIn,mailListCasinoIn,mailListSportsIn,mailListSportsLiveAlertIn) <FIXME_COND_ELSE> ,M(firstName,lastName,sex,addr_1,citymaxlen,state,country,zipCode,birthDate,birthCity,birthState,birthCountry,phone,mobile,email,fiscalCode,documentType,documentNumber,documentIssueDate,documentPlaceOfIssue,documentIssuingAuthority,flags,flags2,profession) <FIXME_COND_ELSE> ,M(realMoneyOkSet,comment) <FIXME_COND_ELSE> ,M(weeklyDepositLimit,buyInLimit,isBuyInLimitValid,sportsAccumulatedLimit) <FIXME_COND_ELSE> ,M(allowSMSPwdReset) <FIXME_COND_ELSE> ,M(smsMarketingFlagValue) <FIXME_COND_ELSE> ,M(answer1,answer2,ssn4) <FIXME_COND_ELSE> ,M(booleanActions) <FIXME_COND_ELSE> ,M(optinLeaderBoard) <FIXME_COND_ELSE> ,M(appLoginId,brandId,adminIntId,adminId) <FIXME_COND_ELSE> ,M(requestCtx) <FIXME_COND_ELSE> ,M() <FIXME_COND_ENDIF> 
			UINT32 updateType;

			PString addr_1;
			PString addr_2;
			PString city;
			PString state;
			PString country;
			PString zipCode;

			PString email;
			bool autoValidateEmail;

			PString pwd;

			BYTE imageType;
			PBlock imgData;	// dbm.h

			PString fullName;

			PString phone;

			// empty
			// client is NOT sending anything here, all userProfile goes via eUserUpdateTypeExternalValidation (sic)

			PString firstName;
			PString lastName;

			PString fiscalCode;

			PString encrFiscalCode;

			Atf::LAtfVector< Common::AtfShared::UserPropertyLegacy, 4 > properties;

			CommSrvDate birthDate;

			UINT32 imageId;
			UINT32 currentImageId;
			bool isCurrentImageFromGallery;

			bool isGalleryImage;

			UINT32 adminIntId;
			PString adminId;

			PString sex;

			PString mobile;	// should be USER_MOBILE_LEN. Client to fix it under PYR-61334

			PString verificationCertificate;	// assumption
			PString verificationSignedData;	// assumption

			bool mailListIn;

			bool mailListPokerIn;
			bool mailListCasinoIn;
			bool mailListSportsIn;
			bool mailListSportsLiveAlertIn;

			UserProfile profile;

			bool realMoneyOkSet;
			PString comment;	// assumption

			INT32 weeklyDepositLimit;	// -1 is handled as INCONSISTENT_DATA in Regulator code
			INT32 buyInLimit;	// -1 is used by some clients if isBuyInLimitValid is false
			bool isBuyInLimitValid;
			INT32 sportsAccumulatedLimit;

			bool allowSMSPwdReset;

			bool smsMarketingFlagValue;

			PString answer1;	// assumption
			PString answer2;	// assumption
			PString ssn4;

			UINT32 booleanActions;

			bool optinLeaderBoard;

			UINT64 appLoginId;	// no limit
			UINT32 brandId;

			// no limit

			INT32 requestCtx;	// no limit

			Atf::CopyableMsgBody dummy_makeATFdefinitionForThisUpdateType;	// this will trigger validation error in case of unsupported type

			UserUpdateElement();
			void clear();
			bool equals(const UserUpdateElement&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody1(CommMsgParser& _parser);
			static void validateAnonymousMsgBody1(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody2(CommMsgParser& _parser);
			static void validateAnonymousMsgBody2(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody3(CommMsgParser& _parser);
			static void validateAnonymousMsgBody3(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody4(CommMsgParser& _parser);
			static void validateAnonymousMsgBody4(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody5(CommMsgParser& _parser);
			static void validateAnonymousMsgBody5(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody6(CommMsgParser& _parser);
			static void validateAnonymousMsgBody6(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody7(CommMsgParser& _parser);
			static void validateAnonymousMsgBody7(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody8(CommMsgParser& _parser);
			static void validateAnonymousMsgBody8(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody9(CommMsgParser& _parser);
			static void validateAnonymousMsgBody9(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody10(CommMsgParser& _parser);
			static void validateAnonymousMsgBody10(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody11(CommMsgParser& _parser);
			static void validateAnonymousMsgBody11(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody12(CommMsgParser& _parser);
			static void validateAnonymousMsgBody12(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody13(CommMsgParser& _parser);
			static void validateAnonymousMsgBody13(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody14(CommMsgParser& _parser);
			static void validateAnonymousMsgBody14(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody15(CommMsgParser& _parser);
			static void validateAnonymousMsgBody15(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody16(CommMsgParser& _parser);
			static void validateAnonymousMsgBody16(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody17(CommMsgParser& _parser);
			static void validateAnonymousMsgBody17(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody18(CommMsgParser& _parser);
			static void validateAnonymousMsgBody18(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody19(CommMsgParser& _parser);
			static void validateAnonymousMsgBody19(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody20(CommMsgParser& _parser);
			static void validateAnonymousMsgBody20(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody21(CommMsgParser& _parser);
			static void validateAnonymousMsgBody21(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody22(CommMsgParser& _parser);
			static void validateAnonymousMsgBody22(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody23(CommMsgParser& _parser);
			static void validateAnonymousMsgBody23(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody24(CommMsgParser& _parser);
			static void validateAnonymousMsgBody24(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody25(CommMsgParser& _parser);
			static void validateAnonymousMsgBody25(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody26(CommMsgParser& _parser);
			static void validateAnonymousMsgBody26(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody27(CommMsgParser& _parser);
			static void validateAnonymousMsgBody27(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody28(CommMsgParser& _parser);
			static void validateAnonymousMsgBody28(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct UserUpdateValidationResult	// response
		{
			// 42s - updateType,errCode,errDescr
			INT32 updateType;
			INT16 errCode;
			PString errDescr;

			UserUpdateValidationResult();
			void clear();
			bool equals(const UserUpdateValidationResult&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct SwissUrlParamString	//	PYR-89580
		{
			// s - param
			PString param;	//	PYR-89580. Param encapsulated in struct in order to limit length.

			SwissUrlParamString();
			void clear();
			bool equals(const SwissUrlParamString&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct SwissUrlRequest
		{
			// 444<s> - locale,urlType,numParams<param>
			UINT32 locale;
			UINT32 urlType;	//	enum eRegulatorSwissURLType
			Atf::LAtfVector< SwissUrlParamString, 4 > params;	//	Optional param dependent on urlType

			SwissUrlRequest();
			void clear();
			bool equals(const SwissUrlRequest&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
	};

	//////////////////////////////////// AUTHENTICATED CLIENT CONNECTION ////////////////////////////
	namespace cli
	{
		//--------------------------------------------- MSG_LOBBY_UPDATE_USER2 (cli) ------------------------------------------
		struct Protocol_MSG_LOBBY_UPDATE_USER2 : public Atf::MessageProtocol	// 389
		{
			//! s4<4 <FIXME_COND_IF> M(ssssss) <FIXME_COND_ELSE> M(sb) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(1v) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M() <FIXME_COND_ELSE> M(ss) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(4< <FIXME>Common::AtfShared::UserPropertyLegacy</FIXME> >) <FIXME_COND_ELSE> M(d) <FIXME_COND_ELSE> M(44b) <FIXME_COND_ELSE> M(4b4b4s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(ss) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(bbbb) <FIXME_COND_ELSE> M(ssssssssdsssssss4sds448s) <FIXME_COND_ELSE> M(bs) <FIXME_COND_ELSE> M(44b4) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(sss) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(844s) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M() <FIXME_COND_ENDIF> >48 - userId_ignore,numElements<updateType <FIXME_COND_IF> ,M(addr_1,addr_2,city,state,country,zipCode) <FIXME_COND_ELSE> ,M(email,autoValidateEmail) <FIXME_COND_ELSE> ,M(pwd) <FIXME_COND_ELSE> ,M(imageType,imgData) <FIXME_COND_ELSE> ,M(fullName) <FIXME_COND_ELSE> ,M(phone) <FIXME_COND_ELSE> ,M() <FIXME_COND_ELSE> ,M(firstName,lastName) <FIXME_COND_ELSE> ,M(fiscalCode) <FIXME_COND_ELSE> ,M(encrFiscalCode) <FIXME_COND_ELSE> ,M(numProperties< <FIXME>Common::AtfShared::UserPropertyLegacy</FIXME> >) <FIXME_COND_ELSE> ,M(birthDate) <FIXME_COND_ELSE> ,M(imageId,currentImageId,isCurrentImageFromGallery) <FIXME_COND_ELSE> ,M(imageId,isGalleryImage,currentImageId,isCurrentImageFromGallery,adminIntId,adminId) <FIXME_COND_ELSE> ,M(sex) <FIXME_COND_ELSE> ,M(mobile) <FIXME_COND_ELSE> ,M(verificationCertificate,verificationSignedData) <FIXME_COND_ELSE> ,M(mailListIn) <FIXME_COND_ELSE> ,M(mailListPokerIn,mailListCasinoIn,mailListSportsIn,mailListSportsLiveAlertIn) <FIXME_COND_ELSE> ,M(firstName,lastName,sex,addr_1,citymaxlen,state,country,zipCode,birthDate,birthCity,birthState,birthCountry,phone,mobile,email,fiscalCode,documentType,documentNumber,documentIssueDate,documentPlaceOfIssue,documentIssuingAuthority,flags,flags2,profession) <FIXME_COND_ELSE> ,M(realMoneyOkSet,comment) <FIXME_COND_ELSE> ,M(weeklyDepositLimit,buyInLimit,isBuyInLimitValid,sportsAccumulatedLimit) <FIXME_COND_ELSE> ,M(allowSMSPwdReset) <FIXME_COND_ELSE> ,M(smsMarketingFlagValue) <FIXME_COND_ELSE> ,M(answer1,answer2,ssn4) <FIXME_COND_ELSE> ,M(booleanActions) <FIXME_COND_ELSE> ,M(optinLeaderBoard) <FIXME_COND_ELSE> ,M(appLoginId,brandId,adminIntId,adminId) <FIXME_COND_ELSE> ,M(requestCtx) <FIXME_COND_ELSE> ,M() <FIXME_COND_ENDIF> >,flags_ingore,flags2_ignore
			PString userId_ignore;
			Atf::LAtfVector< common_structs::UserUpdateElement, 4 > elements;
			UINT32 flags_ingore;	// PYR-19416 - for arjel purpose (sent since Sep 2011)
			UINT64 flags2_ignore;

			Protocol_MSG_LOBBY_UPDATE_USER2();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_UPDATE_USER2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_UPDATE_USER2; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_UPDATE_USER2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_UPDATE_USER2_REPLY : public Atf::MessageProtocol	// 390
		{
			// 2[s|sbbM()] - errCode[errDescr|frArjelUserHash,doReconnect,emailAutoValidated,M()]
			INT16 errCode;

			PString errDescr;

			PString frArjelUserHash;	// PYR-23674; client ignores it - composed for Arjel
			bool doReconnect;
			bool emailAutoValidated;	// PYR-36060
			Atf::CopyableMsgBody specificContext;	// depends on license

			Protocol_MSG_LOBBY_UPDATE_USER2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_UPDATE_USER2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_UPDATE_USER2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_UPDATE_USER2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_CASHIER_LOOKUP_FISCAL_CODE (cli) ------------------------------------------
		// NOTE: also used for admin connection with the exactly same definition
		struct Protocol_MSG_CASHIER_LOOKUP_FISCAL_CODE : public Atf::MessageProtocol	// 5415
		{
			// s - fiscalCode
			PString fiscalCode;	// FISCAL_CODE_LENGTH(16) is defined only locally, regulator handles other values by itself, sending INCONSISTENT_DATA errCode

			Protocol_MSG_CASHIER_LOOKUP_FISCAL_CODE();
			void clear() override;
			bool equals(const Protocol_MSG_CASHIER_LOOKUP_FISCAL_CODE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CASHIER_LOOKUP_FISCAL_CODE; }
			const char *getMsgIdString() const override { return "MSG_CASHIER_LOOKUP_FISCAL_CODE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct FiscalCodeCountry	// reply
		{
			// M(ss) - M(code,country)
			PString code;
			PString country;

			FiscalCodeCountry();
			void clear();
			bool equals(const FiscalCodeCountry&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct FiscalCodeCity	// reply
		{
			// M(ss) - M(province,city)
			PString province;
			PString city;

			FiscalCodeCity();
			void clear();
			bool equals(const FiscalCodeCity&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_CASHIER_LOOKUP_FISCAL_CODE_REPLY : public Atf::MessageProtocol	// 5416
		{
			// 2[s|4<M(ss)>2<M(ss)>] - errCode[errDescr|numCities<M(province,city)>,numCountries<M(code,country)>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< FiscalCodeCity, 4 > cities;
			Atf::LAtfVector< FiscalCodeCountry, 2 > countries;

			Protocol_MSG_CASHIER_LOOKUP_FISCAL_CODE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_CASHIER_LOOKUP_FISCAL_CODE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CASHIER_LOOKUP_FISCAL_CODE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_CASHIER_LOOKUP_FISCAL_CODE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		//--------------------------------------------- MSG_REGULATOR_CHECK_USER_FISCALCODE_UNIQUE (CLI) PYR-46312 ---------------------------
		struct Protocol_MSG_REGULATOR_CHECK_USER_FISCALCODE_UNIQUE : public Atf::MessageProtocol	// 7316
		{
			// 4ss - unusedUserIntId,unusedUserId,fiscalCode
			UINT32 unusedUserIntId;
			PString unusedUserId;
			PString fiscalCode;

			Protocol_MSG_REGULATOR_CHECK_USER_FISCALCODE_UNIQUE();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CHECK_USER_FISCALCODE_UNIQUE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CHECK_USER_FISCALCODE_UNIQUE; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CHECK_USER_FISCALCODE_UNIQUE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_CHECK_USER_FISCALCODE_UNIQUE_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			//else { }
			Protocol_MSG_REGULATOR_CHECK_USER_FISCALCODE_UNIQUE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CHECK_USER_FISCALCODE_UNIQUE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CHECK_USER_FISCALCODE_UNIQUE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CHECK_USER_FISCALCODE_UNIQUE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		//--------------------------------------------- MSG_REGULATOR_USER_GET_INFO (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_USER_GET_INFO : public Atf::MessageProtocol	// 7100
		{
			// s4 - clientVersionInfo,requestFlags
			PString clientVersionInfo;	//alias clVer
			UINT32 requestFlags;	//alias f	// eRegulatorUserGetInfoFlags

			Protocol_MSG_REGULATOR_USER_GET_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_USER_GET_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_USER_GET_INFO; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_USER_GET_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct UserInfoCurrencyAccountBody	// reply
		{
			// M(s88) - M(currency,chips,tChips)
			PString currency;
			INT64 chips;
			INT64 tChips;

			UserInfoCurrencyAccountBody();
			void clear();
			bool equals(const UserInfoCurrencyAccountBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct UserInfoCommonBody	// reply
		{
			//! M(44848tt8s4s44<M(s88)>s884sssssssss4sss84< <FIXME>Common::AtfShared::UserPropertyBody</FIXME> >4) - M(userOptions,flags,flags2,privileges,privileges2,registered,firstDeposit,privileges3,userWebId,licenseId,country,locale,numBalances<M(currency,chips,tChips)>,userId,fppAmountCents,playChips,imageId,email,phone,mobile,sex,addr1,addr2,city,state,zipCode,timezone,firstName,lastName,fullName,flags3,numUserProperies< <FIXME>Common::AtfShared::UserPropertyBody</FIXME> >,emLocale)
			UINT32 userOptions;
			UINT32 flags;
			UINT64 flags2;
			UINT32 privileges;
			UINT64 privileges2;
			CommSrvTime registered;
			CommSrvTime firstDeposit;
			UINT64 privileges3;
			PString userWebId;
			INT32 licenseId;
			PString country;
			INT32 locale;
			Atf::LAtfVector< UserInfoCurrencyAccountBody, 4 > balances;
			PString userId;
			INT64 fppAmountCents;
			INT64 playChips;
			UINT32 imageId;
			PString email;
			PString phone;
			PString mobile;
			PString sex;
			PString addr1;
			PString addr2;
			PString city;
			PString state;
			PString zipCode;
			UINT32 timezone;
			PString firstName;
			PString lastName;
			PString fullName;
			UINT64 flags3;
			Atf::LAtfVector< Common::AtfShared::UserPropertyBody, 4 > userProperies;
			INT32 emLocale;	// PYR-88289

			UserInfoCommonBody();
			void clear();
			bool equals(const UserInfoCommonBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct UserInfoRegulatorAction	// reply
		{
			// 4M() - actionRequest,M()
			UINT32 actionRequest;	// enum eRegulatorActionRequest
			Atf::CopyableMsgBody specificBody;

			UserInfoRegulatorAction();
			void clear();
			bool equals(const UserInfoRegulatorAction&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct UserInfoRegulatorNotification	// reply
		{
			// 4M() - notificationType,M()
			UINT32 notificationType;	// enum eRegulatorNotificationType
			Atf::CopyableMsgBody specificBody;

			UserInfoRegulatorNotification();
			void clear();
			bool equals(const UserInfoRegulatorNotification&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_USER_GET_INFO_REPLY : public Atf::MessageProtocol	// 7101
		{
			//! 2[s|M(44848tt8s4s44<M(s88)>s884sssssssss4sss84< <FIXME>Common::AtfShared::UserPropertyBody</FIXME> >4)4<4M()>M(4<4M()>)] - errCode[errDescr|M(userOptions,flags,flags2,privileges,privileges2,registered,firstDeposit,privileges3,userWebId,licenseId,country,locale,numBalances<M(currency,chips,tChips)>,userId,fppAmountCents,playChips,imageId,email,phone,mobile,sex,addr1,addr2,city,state,zipCode,timezone,firstName,lastName,fullName,flags3,numUserProperies< <FIXME>Common::AtfShared::UserPropertyBody</FIXME> >,emLocale),numRegulatorActions<actionRequest,M()>,M(numRegulatorNotifications<notificationType,M()>)]
			INT16 errCode;

			PString errDescr;

			UserInfoCommonBody commonBody;
			Atf::LAtfVector< UserInfoRegulatorAction, 4 > regulatorActions;

			Atf::LAtfVector< UserInfoRegulatorNotification, 4 > regulatorNotifications;

			Protocol_MSG_REGULATOR_USER_GET_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_USER_GET_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_USER_GET_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_USER_GET_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_USER_GET_INFO_NO_ACTIONS (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_USER_GET_INFO_NO_ACTIONS : public Atf::MessageProtocol	// 7274, PYR-71570 (same as MSG_REGULATOR_USER_GET_INFO, but no actions in reply)
		{
			// s - clientVersionInfo
			PString clientVersionInfo;

			Protocol_MSG_REGULATOR_USER_GET_INFO_NO_ACTIONS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_USER_GET_INFO_NO_ACTIONS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_USER_GET_INFO_NO_ACTIONS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_USER_GET_INFO_NO_ACTIONS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_USER_GET_INFO_NO_ACTIONS_REPLY : public Atf::MessageProtocol	// 7275
		{
			//! 2[s|M(44848tt8s4s44<M(s88)>s884sssssssss4sss84< <FIXME>Common::AtfShared::UserPropertyBody</FIXME> >4)4<4M()>M(4<4M()>)] - errCode[errDescr|M(userOptions,flags,flags2,privileges,privileges2,registered,firstDeposit,privileges3,userWebId,licenseId,country,locale,numBalances<M(currency,chips,tChips)>,userId,fppAmountCents,playChips,imageId,email,phone,mobile,sex,addr1,addr2,city,state,zipCode,timezone,firstName,lastName,fullName,flags3,numUserProperies< <FIXME>Common::AtfShared::UserPropertyBody</FIXME> >,emLocale),numRegulatorActions_alwaysEmpty<actionRequest,M()>,M(numRegulatorNotifications_alwaysEmpty<notificationType,M()>)]
			INT16 errCode;

			PString errDescr;

			UserInfoCommonBody commonBody;
			Atf::LAtfVector< UserInfoRegulatorAction, 4 > regulatorActions_alwaysEmpty;	// keep it empty

			Atf::LAtfVector< UserInfoRegulatorNotification, 4 > regulatorNotifications_alwaysEmpty;	// keep it empty

			Protocol_MSG_REGULATOR_USER_GET_INFO_NO_ACTIONS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_USER_GET_INFO_NO_ACTIONS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_USER_GET_INFO_NO_ACTIONS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_USER_GET_INFO_NO_ACTIONS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_MIGRATION_GET_INFO (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_MIGRATION_GET_INFO : public Atf::MessageProtocol	// 7102
		{
			// empty

			Protocol_MSG_REGULATOR_MIGRATION_GET_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_MIGRATION_GET_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_MIGRATION_GET_INFO; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_MIGRATION_GET_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_MIGRATION_GET_INFO_REPLY : public Atf::MessageProtocol	// 7103
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_MIGRATION_GET_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_MIGRATION_GET_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_MIGRATION_GET_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_MIGRATION_GET_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_MIGRATION_PERFORM (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_MIGRATION_PERFORM : public Atf::MessageProtocol	// 7104
		{
			// 44 - migrFlags,migrSiteId
			UINT32 migrFlags;
			UINT32 migrSiteId;

			Protocol_MSG_REGULATOR_MIGRATION_PERFORM();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_MIGRATION_PERFORM&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_MIGRATION_PERFORM; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_MIGRATION_PERFORM"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_MIGRATION_PERFORM_REPLY : public Atf::MessageProtocol	// 7105
		{
			// 2s - errCode,errDescr
			INT16 errCode;
			PString errDescr;

			Protocol_MSG_REGULATOR_MIGRATION_PERFORM_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_MIGRATION_PERFORM_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_MIGRATION_PERFORM_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_MIGRATION_PERFORM_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_MIGRATION_CHECK_ONLY (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_MIGRATION_CHECK_ONLY : public Atf::MessageProtocol	// 7314
		{
			// 44 - migrFlags,migrSiteId
			UINT32 migrFlags;
			UINT32 migrSiteId;

			Protocol_MSG_REGULATOR_MIGRATION_CHECK_ONLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_MIGRATION_CHECK_ONLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_MIGRATION_CHECK_ONLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_MIGRATION_CHECK_ONLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct RegulatorMigrCheckOnlyReplyStruct
		{
			//! 4 <FIXME_COND_IF> M(s) <FIXME_COND_ENDIF>  - targetLicenceId <FIXME_COND_IF> ,M(migrToken) <FIXME_COND_ENDIF> 

			// PYR-89650
			UINT32 targetLicenceId;

			PString migrToken;

			RegulatorMigrCheckOnlyReplyStruct();
			void clear();
			bool equals(const RegulatorMigrCheckOnlyReplyStruct&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_MIGRATION_CHECK_ONLY_REPLY : public Atf::MessageProtocol	// 7315
		{
			//! 2[s|4 <FIXME_COND_IF> M(s) <FIXME_COND_ENDIF> ] - errCode[errDescr|targetLicenceId <FIXME_COND_IF> ,M(migrToken) <FIXME_COND_ENDIF> ]
			INT16 errCode;

			PString errDescr;

			RegulatorMigrCheckOnlyReplyStruct replyStruct;

			Protocol_MSG_REGULATOR_MIGRATION_CHECK_ONLY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_MIGRATION_CHECK_ONLY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_MIGRATION_CHECK_ONLY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_MIGRATION_CHECK_ONLY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_CONVERT_FUNDS_TO_ONE_ACCT_FOR_NJMIGR (cli) ------------------------------------------
		// obsolete
		struct Protocol_MSG_REGULATOR_CONVERT_FUNDS_TO_ONE_ACCT_FOR_NJMIGR : public Atf::MessageProtocol	// 7200, PYR-27224
		{
			// empty

			Protocol_MSG_REGULATOR_CONVERT_FUNDS_TO_ONE_ACCT_FOR_NJMIGR();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CONVERT_FUNDS_TO_ONE_ACCT_FOR_NJMIGR&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CONVERT_FUNDS_TO_ONE_ACCT_FOR_NJMIGR; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CONVERT_FUNDS_TO_ONE_ACCT_FOR_NJMIGR"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		// regulator always replies with an error - NOT_ALLOWED
		struct Protocol_MSG_REGULATOR_CONVERT_FUNDS_TO_ONE_ACCT_FOR_NJMIGR_REPLY : public Atf::MessageProtocol	// 7201
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_CONVERT_FUNDS_TO_ONE_ACCT_FOR_NJMIGR_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CONVERT_FUNDS_TO_ONE_ACCT_FOR_NJMIGR_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CONVERT_FUNDS_TO_ONE_ACCT_FOR_NJMIGR_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CONVERT_FUNDS_TO_ONE_ACCT_FOR_NJMIGR_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_EULA_TERMS_SIGNED (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_EULA_TERMS_SIGNED : public Atf::MessageProtocol	//
		{
			// bb - mailList,useMailList
			bool mailList;
			bool useMailList;

			Protocol_MSG_REGULATOR_EULA_TERMS_SIGNED();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_EULA_TERMS_SIGNED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_EULA_TERMS_SIGNED; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_EULA_TERMS_SIGNED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_EULA_TERMS_SIGNED_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_EULA_TERMS_SIGNED_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_EULA_TERMS_SIGNED_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_EULA_TERMS_SIGNED_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_EULA_TERMS_SIGNED_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_CASHIER_SET_RMF_BANKACCOUNT (cli) ------------------------------------------
		// same as cashier's, should we omit it?
		struct Protocol_MSG_CASHIER_SET_RMF_BANKACCOUNT : public Atf::MessageProtocol	// 5345
		{
			// sss - bankName,accountNumberDecrypted,bankCountry
			PString bankName;
			PString accountNumberDecrypted;
			PString bankCountry;

			Protocol_MSG_CASHIER_SET_RMF_BANKACCOUNT();
			void clear() override;
			bool equals(const Protocol_MSG_CASHIER_SET_RMF_BANKACCOUNT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CASHIER_SET_RMF_BANKACCOUNT; }
			const char *getMsgIdString() const override { return "MSG_CASHIER_SET_RMF_BANKACCOUNT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		// same as cashier's, should we omit it?
		struct Protocol_MSG_CASHIER_SET_RMF_BANKACCOUNT_REPLY : public Atf::MessageProtocol	// 5346
		{
			// 2[s|sbM(1s)] - errCode[errDescr|reference,isValid,M(realMoneyOk,accountNumberDecrypted)]
			INT16 errCode;

			PString errDescr;

			PString reference;
			bool isValid;

			BYTE realMoneyOk;
			PString accountNumberDecrypted;

			Protocol_MSG_CASHIER_SET_RMF_BANKACCOUNT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_CASHIER_SET_RMF_BANKACCOUNT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CASHIER_SET_RMF_BANKACCOUNT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_CASHIER_SET_RMF_BANKACCOUNT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_GET_LAST_LOGIN_DETAILS (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_GET_LAST_LOGIN_DETAILS : public Atf::MessageProtocol	// 7108, PYR-23308
		{
			// empty

			Protocol_MSG_REGULATOR_GET_LAST_LOGIN_DETAILS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_LAST_LOGIN_DETAILS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_LAST_LOGIN_DETAILS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_LAST_LOGIN_DETAILS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct LoginDetailsClientTournBody	// reply only
		{
			// M(4sb) - M(tournId,tournName,isPublished)
			UINT32 tournId;
			PString tournName;
			bool isPublished;

			LoginDetailsClientTournBody();
			void clear();
			bool equals(const LoginDetailsClientTournBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct LoginDetailsBody
		{
			// M(s) - M(lastLogoutIp)
			// if (license != ES) // FIXME: ATF doesn't allow to check for external parameters
			//{
			PString lastLogoutIp;
			//}
			/*else // ES body
			   {
			   CommMsgBody
			   {
			   CommSrvTime lastLoginTime;
			   CommSrvTime lastLogoutTime;
			   PString reasonDescr;
			   INT64 totalPlayed;
			   INT64 totalWon;
			   };
			   vector<LoginDetailsClientTournBody> tourns;
			   CommMsgBody hands; // copied directly
			   }*/

			LoginDetailsBody();
			void clear();
			bool equals(const LoginDetailsBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_GET_LAST_LOGIN_DETAILS_REPLY : public Atf::MessageProtocol	// 7109
		{
			// 2[s|tM(s)b] - errCode[errDescr|lastLoginTime,M(lastLogoutIp),isFirstLoginSession]
			INT16 errCode;

			PString errDescr;

			CommSrvTime lastLoginTime;
			LoginDetailsBody loginDetails;
			bool isFirstLoginSession;

			Protocol_MSG_REGULATOR_GET_LAST_LOGIN_DETAILS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_LAST_LOGIN_DETAILS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_LAST_LOGIN_DETAILS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_LAST_LOGIN_DETAILS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_GET_USER_WINNINGS (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_GET_USER_WINNINGS : public Atf::MessageProtocol	// 7212, PYR-37856
		{
			// t - loginTime
			CommSrvTime loginTime;

			Protocol_MSG_REGULATOR_GET_USER_WINNINGS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_USER_WINNINGS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_USER_WINNINGS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_USER_WINNINGS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_GET_USER_WINNINGS_REPLY : public Atf::MessageProtocol	// 7213
		{
			// 2[s|88] - errCode[errDescr|totalPlayed,totalWon]
			INT16 errCode;

			PString errDescr;

			INT64 totalPlayed;
			INT64 totalWon;

			Protocol_MSG_REGULATOR_GET_USER_WINNINGS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_USER_WINNINGS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_USER_WINNINGS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_USER_WINNINGS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_GET_FACEBOOK_LINK_CODE (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE : public Atf::MessageProtocol	// 7114, PYR-23923
		{
			// empty

			Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_FACEBOOK_LINK_CODE; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_FACEBOOK_LINK_CODE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE_REPLY : public Atf::MessageProtocol	// 7115
		{
			// 2[s|4] - errCode[errDescr|facebookLinkCode]
			INT16 errCode;

			PString errDescr;

			UINT32 facebookLinkCode;

			Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_FACEBOOK_LINK_CODE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_FACEBOOK_LINK_CODE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_GET_FTP_PAIRING_CODE (cli) ------------------------------------------
		// obsolete
		struct Protocol_MSG_REGULATOR_GET_FTP_PAIRING_CODE : public Atf::MessageProtocol	// 7120, PYR-23771
		{
			// empty

			Protocol_MSG_REGULATOR_GET_FTP_PAIRING_CODE();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_FTP_PAIRING_CODE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_FTP_PAIRING_CODE; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_FTP_PAIRING_CODE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		// alwys returns MSG_REGULATOR_GET_FTP_PAIRING_CODE_REPLY
		struct Protocol_MSG_REGULATOR_GET_FTP_PAIRING_CODE_REPLY : public Atf::MessageProtocol	// 7121
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_GET_FTP_PAIRING_CODE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_FTP_PAIRING_CODE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_FTP_PAIRING_CODE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_FTP_PAIRING_CODE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_SUPPORT_EMAIL_READY (cli) ------------------------------------------
		struct Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY : public Atf::MessageProtocol	// 1212, PYR-27504
		{
			// s - userIdNotUsed
			PString userIdNotUsed;

			Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SUPPORT_EMAIL_READY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SUPPORT_EMAIL_READY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY_REPLY : public Atf::MessageProtocol	// 1213
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SUPPORT_EMAIL_READY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SUPPORT_EMAIL_READY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL (cli) ------------------------------------------
		struct Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL : public Atf::MessageProtocol	// 1172, PYR-27504
		{
			// s44ssss4<sv> - userId,category,subCategory,subject,body,clientVersion,clientOsInfo,numAttachments<attName,attBody>
			common_structs::LobbyClientToSupportEmailStruct body;

			Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL_REPLY : public Atf::MessageProtocol	// 1208
		{
			// 2[s] - errCode[errDescr]
			common_structs::LobbyClientToSupportEmailReplyStruct replyBody;

			Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_CONFIRMED_USER_LIMITS (cli) ------------------------------------------
		struct NjDepositLimitActionBody	// request, struct NjLimitAction PYR-27779, PYR-27795
		{
			// M(44b44s) - M(limitType,limitId,isApprove,prevLimit,limit,currency)
			UINT32 limitType;	// enum SelfDepositLimitType in dbm.h
			UINT32 limitId;
			bool isApprove;
			INT32 prevLimit;	// forwarded to, but not used by dbm
			INT32 limit;	// forwarded to, but not used by dbm
			PString currency;	// forwarded to, but not used by dbm

			NjDepositLimitActionBody();
			void clear();
			bool equals(const NjDepositLimitActionBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct NjGameLimitActionBody	// request, struct NjLimitAction PYR-27779, PYR-27795
		{
			// M(44b44s) - M(limitType,limitId,isApprove,prevLimit,limit,currency)
			UINT32 limitType;	// eTableLimitType in dbm.h
			UINT32 limitId;
			bool isApprove;
			INT32 prevLimit;
			INT32 limit;
			PString currency;

			NjGameLimitActionBody();
			void clear();
			bool equals(const NjGameLimitActionBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct UserDepositLimitsBody	// request and response
		{
			// M(4<M(44b44s)>) - M(numLimits<M(limitType,limitId,isApprove,prevLimit,limit,currency)>)
			Atf::LAtfVector< NjDepositLimitActionBody, 4 > limits;

			UserDepositLimitsBody();
			void clear();
			bool equals(const UserDepositLimitsBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct UserGameLimitsBody	// request and response
		{
			// M(4<M(44b44s)>) - M(numLimits<M(limitType,limitId,isApprove,prevLimit,limit,currency)>)
			Atf::LAtfVector< NjGameLimitActionBody, 4 > limits;

			UserGameLimitsBody();
			void clear();
			bool equals(const UserGameLimitsBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_CONFIRMED_USER_LIMITS : public Atf::MessageProtocol	// 7130, PYR-27795
		{
			// M(4<M(44b44s)>)M(4<M(44b44s)>) - M(numLimits<M(limitType,limitId,isApprove,prevLimit,limit,currency)>),M(numLimits<M(limitType,limitId,isApprove,prevLimit,limit,currency)>)
			UserDepositLimitsBody depositLimits;
			UserGameLimitsBody gameLimits;

			Protocol_MSG_REGULATOR_CONFIRMED_USER_LIMITS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CONFIRMED_USER_LIMITS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CONFIRMED_USER_LIMITS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CONFIRMED_USER_LIMITS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct UserDepositLimitsResultBody	// response
		{
			// M(2[s|M(4<M(44b44s)>)]) - M(errCode[errDescr|M(numLimits<M(limitType,limitId,isApprove,prevLimit,limit,currency)>)])
			INT16 errCode;

			PString errDescr;

			UserDepositLimitsBody limits;

			UserDepositLimitsResultBody();
			void clear();
			bool equals(const UserDepositLimitsResultBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct UserGameLimitsResultBody	// response
		{
			// M(2[s|M(4<M(44b44s)>)]) - M(errCode[errDescr|M(numLimits<M(limitType,limitId,isApprove,prevLimit,limit,currency)>)])
			INT16 errCode;

			PString errDescr;

			UserGameLimitsBody limits;

			UserGameLimitsResultBody();
			void clear();
			bool equals(const UserGameLimitsResultBody&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_CONFIRMED_USER_LIMITS_REPLY : public Atf::MessageProtocol	// 7131
		{
			// M(2[s|M(4<M(44b44s)>)])M(2[s|M(4<M(44b44s)>)]) - M(errCode[errDescr|M(numLimits<M(limitType,limitId,isApprove,prevLimit,limit,currency)>)]),M(errCode[errDescr|M(numLimits<M(limitType,limitId,isApprove,prevLimit,limit,currency)>)])
			UserDepositLimitsResultBody depositLimits;
			UserGameLimitsResultBody gameLimits;

			Protocol_MSG_REGULATOR_CONFIRMED_USER_LIMITS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CONFIRMED_USER_LIMITS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CONFIRMED_USER_LIMITS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CONFIRMED_USER_LIMITS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_CHALLENGE_QUESTION (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_CHALLENGE_QUESTION : public Atf::MessageProtocol	// 7138, PYR-27258
		{
			// 4 - locale
			UINT32 locale;

			Protocol_MSG_REGULATOR_CHALLENGE_QUESTION();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CHALLENGE_QUESTION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CHALLENGE_QUESTION; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CHALLENGE_QUESTION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_CHALLENGE_QUESTION_REPLY : public Atf::MessageProtocol	// 7139
		{
			// 2[s|2<4s>] - errCode[errDescr|numChallengeQuestions<id,txt>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< common_structs::ChallengeQuestion, 2 > challengeQuestions;

			Protocol_MSG_REGULATOR_CHALLENGE_QUESTION_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CHALLENGE_QUESTION_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CHALLENGE_QUESTION_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CHALLENGE_QUESTION_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_CASHIER_LIFETIME_LIMIT_CONFIRMED (cli) ------------------------------------------
		struct Protocol_MSG_CASHIER_LIFETIME_LIMIT_CONFIRMED : public Atf::MessageProtocol	// 5483, PYR-27262
		{
			// empty

			Protocol_MSG_CASHIER_LIFETIME_LIMIT_CONFIRMED();
			void clear() override;
			bool equals(const Protocol_MSG_CASHIER_LIFETIME_LIMIT_CONFIRMED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CASHIER_LIFETIME_LIMIT_CONFIRMED; }
			const char *getMsgIdString() const override { return "MSG_CASHIER_LIFETIME_LIMIT_CONFIRMED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_CASHIER_LIFETIME_LIMIT_CONFIRMED_REPLY : public Atf::MessageProtocol	// 5484
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_CASHIER_LIFETIME_LIMIT_CONFIRMED_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_CASHIER_LIFETIME_LIMIT_CONFIRMED_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_CASHIER_LIFETIME_LIMIT_CONFIRMED_REPLY; }
			const char *getMsgIdString() const override { return "MSG_CASHIER_LIFETIME_LIMIT_CONFIRMED_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_CLIENT_FTPLAUNCHER (cli) ------------------------------------------
		// obsolete
		struct Protocol_MSG_REGULATOR_CLIENT_FTPLAUNCHER : public Atf::MessageProtocol	// 7164, PYR-30114
		{
			// empty

			Protocol_MSG_REGULATOR_CLIENT_FTPLAUNCHER();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CLIENT_FTPLAUNCHER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CLIENT_FTPLAUNCHER; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CLIENT_FTPLAUNCHER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		// always returns NOT_ALLOWED
		struct Protocol_MSG_REGULATOR_CLIENT_FTPLAUNCHER_REPLY : public Atf::MessageProtocol	// 7165
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_CLIENT_FTPLAUNCHER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CLIENT_FTPLAUNCHER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CLIENT_FTPLAUNCHER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CLIENT_FTPLAUNCHER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_SET_PROMO_CODE (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_SET_PROMO_CODE : public Atf::MessageProtocol	// 7162, PYR-29811
		{
			// s - promoCode
			PString promoCode;

			Protocol_MSG_REGULATOR_SET_PROMO_CODE();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_PROMO_CODE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_PROMO_CODE; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_PROMO_CODE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SET_PROMO_CODE_REPLY : public Atf::MessageProtocol	// 7163
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_SET_PROMO_CODE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_PROMO_CODE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_PROMO_CODE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_PROMO_CODE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_SET_PWD_REMINDER (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_SET_PWD_REMINDER : public Atf::MessageProtocol	// 7168, PYR-30480
		{
			// b - remind
			bool remind;

			Protocol_MSG_REGULATOR_SET_PWD_REMINDER();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_PWD_REMINDER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_PWD_REMINDER; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_PWD_REMINDER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SET_PWD_REMINDER_REPLY : public Atf::MessageProtocol	//7169
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_SET_PWD_REMINDER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_PWD_REMINDER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_PWD_REMINDER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_PWD_REMINDER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS : public Atf::MessageProtocol	// 7170, PYR-28732
		{
			// 4<s> - numAnswers<answer>
			Atf::LAtfVector< common_structs::ChallengeAnswer, 4 > answers;

			Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS_REPLY : public Atf::MessageProtocol	// 7171
		{
			// 2[s|bb] - errCode[errDescr|match,allowMoreAttempts]
			INT16 errCode;

			PString errDescr;

			bool match;
			bool allowMoreAttempts;

			Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_REMOVE_CHALLENGE_QUESTIONS (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_REMOVE_CHALLENGE_QUESTIONS : public Atf::MessageProtocol	// 7172, PYR-28732
		{
			// empty

			Protocol_MSG_REGULATOR_REMOVE_CHALLENGE_QUESTIONS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_REMOVE_CHALLENGE_QUESTIONS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_REMOVE_CHALLENGE_QUESTIONS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_REMOVE_CHALLENGE_QUESTIONS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_REMOVE_CHALLENGE_QUESTIONS_REPLY : public Atf::MessageProtocol	// 7173
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_REMOVE_CHALLENGE_QUESTIONS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_REMOVE_CHALLENGE_QUESTIONS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_REMOVE_CHALLENGE_QUESTIONS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_REMOVE_CHALLENGE_QUESTIONS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_SET_CHALLENGE_QUESTIONS_REMINDER (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_SET_CHALLENGE_QUESTIONS_REMINDER : public Atf::MessageProtocol	// 7172, PYR-28732
		{
			// b - remind
			bool remind;

			Protocol_MSG_REGULATOR_SET_CHALLENGE_QUESTIONS_REMINDER();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_CHALLENGE_QUESTIONS_REMINDER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_CHALLENGE_QUESTIONS_REMINDER; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_CHALLENGE_QUESTIONS_REMINDER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SET_CHALLENGE_QUESTIONS_REMINDER_REPLY : public Atf::MessageProtocol	// 7173
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_SET_CHALLENGE_QUESTIONS_REMINDER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_CHALLENGE_QUESTIONS_REMINDER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_CHALLENGE_QUESTIONS_REMINDER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_CHALLENGE_QUESTIONS_REMINDER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_CHALLENGE_QUESTION_SETUP_REFUSED (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_CHALLENGE_QUESTION_SETUP_REFUSED : public Atf::MessageProtocol	// 7176, PYR-28732
		{
			// empty

			Protocol_MSG_REGULATOR_CHALLENGE_QUESTION_SETUP_REFUSED();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CHALLENGE_QUESTION_SETUP_REFUSED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CHALLENGE_QUESTION_SETUP_REFUSED; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CHALLENGE_QUESTION_SETUP_REFUSED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_CHALLENGE_QUESTION_SETUP_REFUSED_REPLY : public Atf::MessageProtocol	// 7177
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_CHALLENGE_QUESTION_SETUP_REFUSED_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CHALLENGE_QUESTION_SETUP_REFUSED_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CHALLENGE_QUESTION_SETUP_REFUSED_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CHALLENGE_QUESTION_SETUP_REFUSED_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_MATCH_ZIP_CODE (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_MATCH_ZIP_CODE : public Atf::MessageProtocol	// 7180, PYR-27186
		{
			// sss - streetNum,zipCode,countryCode
			PString streetNum;
			PString zipCode;
			PString countryCode;

			Protocol_MSG_REGULATOR_MATCH_ZIP_CODE();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_MATCH_ZIP_CODE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_MATCH_ZIP_CODE; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_MATCH_ZIP_CODE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Address
		{
			// M(sssss) - M(address,city,state,zip,country)
			PString address;
			PString city;
			PString state;
			PString zip;
			PString country;

			Address();
			void clear();
			bool equals(const Address&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_MATCH_ZIP_CODE_REPLY : public Atf::MessageProtocol	// 7181
		{
			// 2[s|4<M(sssss)>] - errCode[errDescr|numAddresses<M(address,city,state,zip,country)>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< Address, 4 > addresses;

			Protocol_MSG_REGULATOR_MATCH_ZIP_CODE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_MATCH_ZIP_CODE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_MATCH_ZIP_CODE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_MATCH_ZIP_CODE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_SET_SHOW_CASINO_GAMES_FLAG (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_SET_SHOW_CASINO_GAMES_FLAG : public Atf::MessageProtocol	// 7206, PYR-33086
		{
			// bss - setNotRemove,userId,comment
			bool setNotRemove;
			PString userId;
			PString comment;

			Protocol_MSG_REGULATOR_SET_SHOW_CASINO_GAMES_FLAG();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_SHOW_CASINO_GAMES_FLAG&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_SHOW_CASINO_GAMES_FLAG; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_SHOW_CASINO_GAMES_FLAG"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SET_SHOW_CASINO_GAMES_FLAG_REPLY : public Atf::MessageProtocol	// 7207
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_SET_SHOW_CASINO_GAMES_FLAG_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_SHOW_CASINO_GAMES_FLAG_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_SHOW_CASINO_GAMES_FLAG_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_SHOW_CASINO_GAMES_FLAG_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_RESET_PWD (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_RESET_PWD : public Atf::MessageProtocol	// 7134, PYR-27258
		{
			// ssssbsss - user,zip,addr,email,useChallengeQuestions,answer1,answer2,ssn4
			common_structs::ResetPwdMessageStruct resetPwd;

			Protocol_MSG_REGULATOR_RESET_PWD();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_RESET_PWD&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_RESET_PWD; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_RESET_PWD"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_RESET_PWD_REPLY : public Atf::MessageProtocol	// 7135
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_RESET_PWD_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_RESET_PWD_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_RESET_PWD_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_RESET_PWD_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_GET_CONFIG_INFO (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_GET_CONFIG_INFO : public Atf::MessageProtocol	// 7210, PYR-31215
		{
			// 4 - configInfoMask
			UINT32 configInfoMask;	// mask of eRegulatorConfigInfoType

			Protocol_MSG_REGULATOR_GET_CONFIG_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_CONFIG_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_CONFIG_INFO; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_CONFIG_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct RegulatorConfigInfo	// response
		{
			//! 4 <FIXME_COND_IF> M(b4) <FIXME_COND_ELSE> M(4) <FIXME_COND_ENDIF>  - configInfoType <FIXME_COND_IF> ,M(showAddressLookup,addressLookupRMFtypesMask) <FIXME_COND_ELSE> ,M(deshMaxAgeVerifyAttempts) <FIXME_COND_ENDIF> 
			UINT32 configInfoType;

			bool showAddressLookup;
			UINT32 addressLookupRMFtypesMask;

			INT32 deshMaxAgeVerifyAttempts;

			RegulatorConfigInfo();
			void clear();
			bool equals(const RegulatorConfigInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody1(CommMsgParser& _parser);
			static void validateAnonymousMsgBody1(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_CONFIG_INFO_REPLY : public Atf::MessageProtocol	// 7211
		{
			//! 2[s|4<4 <FIXME_COND_IF> M(b4) <FIXME_COND_ELSE> M(4) <FIXME_COND_ENDIF> >] - errCode[errDescr|numConfigInfoData<configInfoType <FIXME_COND_IF> ,M(showAddressLookup,addressLookupRMFtypesMask) <FIXME_COND_ELSE> ,M(deshMaxAgeVerifyAttempts) <FIXME_COND_ENDIF> >]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< RegulatorConfigInfo, 4 > configInfoData;

			Protocol_MSG_REGULATOR_GET_CONFIG_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_CONFIG_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_CONFIG_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_CONFIG_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_SET_RATE_MOBILE_FLAG (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_SET_RATE_MOBILE_FLAG : public Atf::MessageProtocol	// 7216, PYR-33276
		{
			// bss - setNotRemove,userId,comment
			bool setNotRemove;
			PString userId;	// client sends blank, admin sends actual userId
			PString comment;	// client sends blank, admin sends a comment

			Protocol_MSG_REGULATOR_SET_RATE_MOBILE_FLAG();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_RATE_MOBILE_FLAG&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_RATE_MOBILE_FLAG; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_RATE_MOBILE_FLAG"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SET_RATE_MOBILE_FLAG_REPLY : public Atf::MessageProtocol	// 7217
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_SET_RATE_MOBILE_FLAG_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_RATE_MOBILE_FLAG_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_RATE_MOBILE_FLAG_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_RATE_MOBILE_FLAG_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_SAVE_CONSENT (cli) ------------------------------------------
		struct Protocol_MSG_LOBBY_SAVE_CONSENT : public Atf::MessageProtocol	// 1109, PYR-40406
		{
			// s44 - userId,consentId,status
			PString userId;
			UINT32 consentId;
			UINT32 status;	// USERCONSENTS.STATUS (Declined = 1, Agree = 2)

			Protocol_MSG_LOBBY_SAVE_CONSENT();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SAVE_CONSENT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SAVE_CONSENT; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SAVE_CONSENT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_SAVE_CONSENT_REPLY : public Atf::MessageProtocol	// 1110
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_SAVE_CONSENT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SAVE_CONSENT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SAVE_CONSENT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SAVE_CONSENT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_FULLTILT_CONVERSION_PERFORM (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_FULLTILT_CONVERSION_PERFORM : public Atf::MessageProtocol	// 7230, PYR-39878
		{
			// 44s4 - playerix,userIntId,ftToken,conversionType
			UINT32 playerix;
			UINT32 userIntId;
			PString ftToken;

			INT32 conversionType;	// enum eFullTiltConversionType (dbm.h)

			Protocol_MSG_REGULATOR_FULLTILT_CONVERSION_PERFORM();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_FULLTILT_CONVERSION_PERFORM&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_FULLTILT_CONVERSION_PERFORM; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_FULLTILT_CONVERSION_PERFORM"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_FULLTILT_CONVERSION_PERFORM_REPLY : public Atf::MessageProtocol	// 7231
		{
			// 2[s|b] - errCode[errDescr|isRmPlayer]
			INT16 errCode;

			PString errDescr;

			bool isRmPlayer;

			Protocol_MSG_REGULATOR_FULLTILT_CONVERSION_PERFORM_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_FULLTILT_CONVERSION_PERFORM_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_FULLTILT_CONVERSION_PERFORM_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_FULLTILT_CONVERSION_PERFORM_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_GET_USER_SESSION_WINNINGS (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_GET_USER_SESSION_WINNINGS : public Atf::MessageProtocol	// 7240, PYR-43867
		{
			// empty

			Protocol_MSG_REGULATOR_GET_USER_SESSION_WINNINGS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_USER_SESSION_WINNINGS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_USER_SESSION_WINNINGS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_USER_SESSION_WINNINGS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_USER_SESSION_WINNINGS_REPLY : public Atf::MessageProtocol	// 7241
		{
			// 2[s|btt88] - errCode[errDescr|isLastSession,sessionStartTime,sessionEndTime,wager,winLoss]
			INT16 errCode;

			PString errDescr;

			bool isLastSession;
			CommSrvTime sessionStartTime;
			CommSrvTime sessionEndTime;
			INT64 wager;
			INT64 winLoss;

			Protocol_MSG_REGULATOR_GET_USER_SESSION_WINNINGS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_USER_SESSION_WINNINGS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_USER_SESSION_WINNINGS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_USER_SESSION_WINNINGS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_VALIDATE_USER_UPDATE (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE : public Atf::MessageProtocol	// 7250, PYR-45841
		{
			//! s4<4 <FIXME_COND_IF> M(ssssss) <FIXME_COND_ELSE> M(sb) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(1v) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M() <FIXME_COND_ELSE> M(ss) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(4< <FIXME>Common::AtfShared::UserPropertyLegacy</FIXME> >) <FIXME_COND_ELSE> M(d) <FIXME_COND_ELSE> M(44b) <FIXME_COND_ELSE> M(4b4b4s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(ss) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(bbbb) <FIXME_COND_ELSE> M(ssssssssdsssssss4sds448s) <FIXME_COND_ELSE> M(bs) <FIXME_COND_ELSE> M(44b4) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(sss) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(844s) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M() <FIXME_COND_ENDIF> >4 - userId_ignore,numElements<updateType <FIXME_COND_IF> ,M(addr_1,addr_2,city,state,country,zipCode) <FIXME_COND_ELSE> ,M(email,autoValidateEmail) <FIXME_COND_ELSE> ,M(pwd) <FIXME_COND_ELSE> ,M(imageType,imgData) <FIXME_COND_ELSE> ,M(fullName) <FIXME_COND_ELSE> ,M(phone) <FIXME_COND_ELSE> ,M() <FIXME_COND_ELSE> ,M(firstName,lastName) <FIXME_COND_ELSE> ,M(fiscalCode) <FIXME_COND_ELSE> ,M(encrFiscalCode) <FIXME_COND_ELSE> ,M(numProperties< <FIXME>Common::AtfShared::UserPropertyLegacy</FIXME> >) <FIXME_COND_ELSE> ,M(birthDate) <FIXME_COND_ELSE> ,M(imageId,currentImageId,isCurrentImageFromGallery) <FIXME_COND_ELSE> ,M(imageId,isGalleryImage,currentImageId,isCurrentImageFromGallery,adminIntId,adminId) <FIXME_COND_ELSE> ,M(sex) <FIXME_COND_ELSE> ,M(mobile) <FIXME_COND_ELSE> ,M(verificationCertificate,verificationSignedData) <FIXME_COND_ELSE> ,M(mailListIn) <FIXME_COND_ELSE> ,M(mailListPokerIn,mailListCasinoIn,mailListSportsIn,mailListSportsLiveAlertIn) <FIXME_COND_ELSE> ,M(firstName,lastName,sex,addr_1,citymaxlen,state,country,zipCode,birthDate,birthCity,birthState,birthCountry,phone,mobile,email,fiscalCode,documentType,documentNumber,documentIssueDate,documentPlaceOfIssue,documentIssuingAuthority,flags,flags2,profession) <FIXME_COND_ELSE> ,M(realMoneyOkSet,comment) <FIXME_COND_ELSE> ,M(weeklyDepositLimit,buyInLimit,isBuyInLimitValid,sportsAccumulatedLimit) <FIXME_COND_ELSE> ,M(allowSMSPwdReset) <FIXME_COND_ELSE> ,M(smsMarketingFlagValue) <FIXME_COND_ELSE> ,M(answer1,answer2,ssn4) <FIXME_COND_ELSE> ,M(booleanActions) <FIXME_COND_ELSE> ,M(optinLeaderBoard) <FIXME_COND_ELSE> ,M(appLoginId,brandId,adminIntId,adminId) <FIXME_COND_ELSE> ,M(requestCtx) <FIXME_COND_ELSE> ,M() <FIXME_COND_ENDIF> >,locale
			PString userId_ignore;
			Atf::LAtfVector< common_structs::UserUpdateElement, 4 > elements;
			UINT32 locale;

			Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_VALIDATE_USER_UPDATE; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_VALIDATE_USER_UPDATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE_REPLY : public Atf::MessageProtocol	// 7251
		{
			// 2[s|4<42s>] - errCode[errDescr|numValidationResults<updateType,errCode,errDescr>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< common_structs::UserUpdateValidationResult, 4 > validationResults;

			Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_VALIDATE_USER_UPDATE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_VALIDATE_USER_UPDATE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_FR_ACC_VAL_PLAYER_ACTION (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_FR_ACC_VAL_PLAYER_ACTION : public Atf::MessageProtocol	// 7248, PYR-43398
		{
			// 4 - action
			INT32 action;	// enum eRegulatorFrAccValPlayerAction (regulator.h), no limits, explicitly validated in process function

			Protocol_MSG_REGULATOR_FR_ACC_VAL_PLAYER_ACTION();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_FR_ACC_VAL_PLAYER_ACTION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_FR_ACC_VAL_PLAYER_ACTION; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_FR_ACC_VAL_PLAYER_ACTION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_FR_ACC_VAL_PLAYER_ACTION_REPLY : public Atf::MessageProtocol	// 7249
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_FR_ACC_VAL_PLAYER_ACTION_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_FR_ACC_VAL_PLAYER_ACTION_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_FR_ACC_VAL_PLAYER_ACTION_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_FR_ACC_VAL_PLAYER_ACTION_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_CHECK_USER_DOCUMENT_UNIQUE (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_CHECK_USER_DOCUMENT_UNIQUE : public Atf::MessageProtocol	// 7258, PYR-50428
		{
			// s4s - document,docType,country
			PString document;
			INT32 docType;	// limit depends on license
			PString country;

			Protocol_MSG_REGULATOR_CHECK_USER_DOCUMENT_UNIQUE();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CHECK_USER_DOCUMENT_UNIQUE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CHECK_USER_DOCUMENT_UNIQUE; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CHECK_USER_DOCUMENT_UNIQUE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_CHECK_USER_DOCUMENT_UNIQUE_REPLY : public Atf::MessageProtocol	// 7259
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_CHECK_USER_DOCUMENT_UNIQUE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CHECK_USER_DOCUMENT_UNIQUE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CHECK_USER_DOCUMENT_UNIQUE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CHECK_USER_DOCUMENT_UNIQUE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_SE_BANKID_VERIFY (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_SE_BANKID_VERIFY : public Atf::MessageProtocol	// 7286, PYR-78110
		{
			// sb - personalNumber,mobileBankIdOnly
			PString personalNumber;
			bool mobileBankIdOnly;

			Protocol_MSG_REGULATOR_SE_BANKID_VERIFY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SE_BANKID_VERIFY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SE_BANKID_VERIFY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SE_BANKID_VERIFY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SE_BANKID_VERIFY_REPLY : public Atf::MessageProtocol	// 7287
		{
			// 2[s|4M()] - errCode[errDescr|status,M()]
			INT16 errCode;

			PString errDescr;

			INT32 status;	// enum eRegulatorSeBankIdVerificationStatus (regulator.h)
			Atf::CopyableMsgBody replyDetails;	// respose data that depends on status value; once nested conditions supported by ATF should be described as follows:
			//if ( status == 0 ) // eRegulatorSeBankIdVerificationStatus_Pending
			//{
			//	PString autoStartToken maxlen 2000;
			//	INT32 orderId min 1; // no max limit
			//}

			Protocol_MSG_REGULATOR_SE_BANKID_VERIFY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SE_BANKID_VERIFY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SE_BANKID_VERIFY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SE_BANKID_VERIFY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_SE_BANKID_COLLECT (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_SE_BANKID_COLLECT : public Atf::MessageProtocol	// 7288, PYR-78110
		{
			// 4b - orderId,bankIdClientStartedAutomatically
			INT32 orderId;	// no max limit
			bool bankIdClientStartedAutomatically;

			Protocol_MSG_REGULATOR_SE_BANKID_COLLECT();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SE_BANKID_COLLECT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SE_BANKID_COLLECT; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SE_BANKID_COLLECT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SE_BANKID_COLLECT_REPLY : public Atf::MessageProtocol	// 7289
		{
			// 2[s|4M()] - errCode[errDescr|status,M()]
			INT16 errCode;

			PString errDescr;

			INT32 status;	// enum eRegulatorSeBankIdVerificationStatus (regulator.h)
			Atf::CopyableMsgBody replyDetails;	// respose data that depends on status value; once nested conditions supported by ATF should be described as follows:
			//if ( status == 0 ) // eRegulatorSeBankIdVerificationStatus_Pending
			//{
			//	PString messageCode maxlen 5;
			//}
			//else if ( status == 1 ) // eRegulatorSeBankIdVerificationStatus_Complete
			//{
			//	PString firstName maxlen 200;
			//	PString lastName maxlen 200;
			//	PString personalNumber maxlen 12;
			//}
			//else if ( status == 2 ) // eRegulatorSeBankIdVerificationStatus_Failed
			//{
			//	PString messageCode maxlen 5;
			//}

			Protocol_MSG_REGULATOR_SE_BANKID_COLLECT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SE_BANKID_COLLECT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SE_BANKID_COLLECT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SE_BANKID_COLLECT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_GET_USER_BLACKLIST_INFO (cli) ------------------------------------------

		struct BlackListInfo
		{
			// M(4tt) - M(durationDays,timeFrom,timeUntil)
			INT32 durationDays;
			SrvTime timeFrom;
			SrvTime timeUntil;

			BlackListInfo();
			void clear();
			bool equals(const BlackListInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct BlackListInfoConditional
		{
			// b[M(4tt)] - isBlacklisted[M(durationDays,timeFrom,timeUntil)]
			bool isBlacklisted;

			BlackListInfo infoBody;

			BlackListInfoConditional();
			void clear();
			bool equals(const BlackListInfoConditional&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_GET_USER_BLACKLIST_INFO : public Atf::MessageProtocol	// 7292, PYR-82532
		{
			// empty

			Protocol_MSG_REGULATOR_GET_USER_BLACKLIST_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_USER_BLACKLIST_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_USER_BLACKLIST_INFO; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_USER_BLACKLIST_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_USER_BLACKLIST_INFO_REPLY : public Atf::MessageProtocol	// 7293
		{
			// 2[s|b[M(4tt)]] - errCode[errDesc|isBlacklisted[M(durationDays,timeFrom,timeUntil)]]
			INT16 errCode;

			PString errDesc;

			BlackListInfoConditional blackListInfo;

			Protocol_MSG_REGULATOR_GET_USER_BLACKLIST_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_USER_BLACKLIST_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_USER_BLACKLIST_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_USER_BLACKLIST_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_REQUEST_USER_BLACKLIST_INFO (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_REQUEST_USER_BLACKLISTED : public Atf::MessageProtocol	// 7294, PYR-82532
		{
			// 4 - durationDays
			INT32 durationDays;

			Protocol_MSG_REGULATOR_REQUEST_USER_BLACKLISTED();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_REQUEST_USER_BLACKLISTED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_REQUEST_USER_BLACKLISTED; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_REQUEST_USER_BLACKLISTED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_REQUEST_USER_BLACKLISTED_REPLY : public Atf::MessageProtocol	// 7295
		{
			// 2[s|M(4tt)] - errCode[errDesc|M(durationDays,timeFrom,timeUntil)]
			INT16 errCode;

			PString errDesc;

			BlackListInfo infoBody;

			Protocol_MSG_REGULATOR_REQUEST_USER_BLACKLISTED_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_REQUEST_USER_BLACKLISTED_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_REQUEST_USER_BLACKLISTED_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_REQUEST_USER_BLACKLISTED_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//----------------------------------------- MSG_REGULATOR_GET_SWISS_URL (cli) ----------------------------------------------------------------
		struct Protocol_MSG_REGULATOR_GET_SWISS_URL : public Atf::MessageProtocol	//	PYR-89580
		{
			// 444<s> - locale,urlType,numParams<param>
			common_structs::SwissUrlRequest commonRequest;

			Protocol_MSG_REGULATOR_GET_SWISS_URL();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_SWISS_URL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_SWISS_URL; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_SWISS_URL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_SWISS_URL_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s] - errCode[errDescr|url]
			INT16 errCode;

			PString errDescr;

			PString url;

			Protocol_MSG_REGULATOR_GET_SWISS_URL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_SWISS_URL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_SWISS_URL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_SWISS_URL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//----------------------------------------- MSG_REGULATOR_GET_ASIA_GAMING_URL (cli) ----------------------------------------------------------------
		struct Protocol_MSG_REGULATOR_GET_ASIA_GAMING_URL : public Atf::MessageProtocol	//	PYR-51935, PYR-65389
		{
			// 2 - urlType
			INT16 urlType;	//	enum AsiaB2B_LinkType

			Protocol_MSG_REGULATOR_GET_ASIA_GAMING_URL();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_ASIA_GAMING_URL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_ASIA_GAMING_URL; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_ASIA_GAMING_URL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_ASIA_GAMING_URL_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s] - errCode[errDescr|url]
			INT16 errCode;

			PString errDescr;

			PString url;

			Protocol_MSG_REGULATOR_GET_ASIA_GAMING_URL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_ASIA_GAMING_URL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_ASIA_GAMING_URL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_ASIA_GAMING_URL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_REACTIVATE_DORMANT_ACCOUNT (cli) ------------------------------------------
		struct Protocol_MSG_REGULATOR_REACTIVATE_DORMANT_ACCOUNT : public Atf::MessageProtocol	// 7330, PYR-102822
		{
			// empty

			Protocol_MSG_REGULATOR_REACTIVATE_DORMANT_ACCOUNT();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_REACTIVATE_DORMANT_ACCOUNT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_REACTIVATE_DORMANT_ACCOUNT; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_REACTIVATE_DORMANT_ACCOUNT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_REACTIVATE_DORMANT_ACCOUNT_REPLY : public Atf::MessageProtocol	// 7331
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_MSG_REGULATOR_REACTIVATE_DORMANT_ACCOUNT_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_REACTIVATE_DORMANT_ACCOUNT_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_REACTIVATE_DORMANT_ACCOUNT_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_REACTIVATE_DORMANT_ACCOUNT_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_ES_IDSCAN_DOCUMENT_SUBMISSION : public Atf::MessageProtocol	// 7338, PYR-60240
		{
			// s - journeyId
			PString journeyId;

			Protocol_MSG_REGULATOR_ES_IDSCAN_DOCUMENT_SUBMISSION();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_ES_IDSCAN_DOCUMENT_SUBMISSION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_ES_IDSCAN_DOCUMENT_SUBMISSION; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_ES_IDSCAN_DOCUMENT_SUBMISSION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_ES_IDSCAN_DOCUMENT_SUBMISSION_REPLY : public Atf::MessageProtocol	// 7339, PYR-60240
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_MSG_REGULATOR_ES_IDSCAN_DOCUMENT_SUBMISSION_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_ES_IDSCAN_DOCUMENT_SUBMISSION_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_ES_IDSCAN_DOCUMENT_SUBMISSION_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_ES_IDSCAN_DOCUMENT_SUBMISSION_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

	};

	//////////////////////////////////// UNAUTHENTICATED CLIENT CONNECTION ////////////////////////////
	namespace cli_unauth
	{
		//--------------------------------------------- MSG_LOBBY_REPORT_CREATE_ACCOUNT_GIVE_UP (cli_unauth) ------------------------------------------
		struct Protocol_MSG_LOBBY_REPORT_CREATE_ACCOUNT_GIVE_UP : public Atf::MessageProtocol	// 563, PYR-17950
		{
			//! s44s <FIXME>Common::AtfShared::LoginExtra</FIXME>  - installId,siteId,platformId,accountWizardPageName, <FIXME>clientExtra</FIXME> 
			PString installId;
			UINT32 siteId;	// enum Sites in sites.h
			UINT32 platformId;	// enum ClientPlatform in clientplatforms.h
			PString accountWizardPageName;
			Common::AtfShared::LoginExtra clientExtra;

			Protocol_MSG_LOBBY_REPORT_CREATE_ACCOUNT_GIVE_UP();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_REPORT_CREATE_ACCOUNT_GIVE_UP&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_REPORT_CREATE_ACCOUNT_GIVE_UP; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_REPORT_CREATE_ACCOUNT_GIVE_UP"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_NAME_AVAILABLE (cli_unauth) ------------------------------------------
		struct Protocol_MSG_LOBBY_NAME_AVAILABLE : public Atf::MessageProtocol	// 1136
		{
			// s4 - userId,localeId
			common_structs::LobbyNameAvailableStruct body;

			Protocol_MSG_LOBBY_NAME_AVAILABLE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_NAME_AVAILABLE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_NAME_AVAILABLE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_NAME_AVAILABLE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_NAME_AVAILABLE_REPLY : public Atf::MessageProtocol	// 1137
		{
			// 2[s|s4<s>] - errCode[errDescr|userId_,numSuggestedIds<suggestedIds>]
			common_structs::LobbyNameAvailableReplyStruct replyBody;

			Protocol_MSG_LOBBY_NAME_AVAILABLE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_NAME_AVAILABLE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_NAME_AVAILABLE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_NAME_AVAILABLE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_COMPARE_SITE_FOR_IP (cli_unauth) ------------------------------------------
		struct Protocol_MSG_LOBBY_COMPARE_SITE_FOR_IP : public Atf::MessageProtocol	// 513, PYR-17233
		{
			//! 4 <FIXME>Common::AtfShared::LoginExtra</FIXME>  - siteId, <FIXME>clientExtra</FIXME> 
			UINT32 siteId;
			Common::AtfShared::LoginExtra clientExtra;

			Protocol_MSG_LOBBY_COMPARE_SITE_FOR_IP();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_COMPARE_SITE_FOR_IP&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_COMPARE_SITE_FOR_IP; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_COMPARE_SITE_FOR_IP"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct SiteMetadata
		{
			// 4sssss - siteId,name,contactEmail,contactURL,downloadURL,faqURL
			UINT32 siteId;
			PString name;
			PString contactEmail;
			PString contactURL;
			PString downloadURL;
			PString faqURL;

			SiteMetadata();
			void clear();
			bool equals(const SiteMetadata&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_COMPARE_SITE_FOR_IP_REPLY : public Atf::MessageProtocol	// 514
		{
			// 2s4sssss - errCode,country,siteId,name,contactEmail,contactURL,downloadURL,faqURL
			INT16 errCode;
			PString country;
			SiteMetadata siteMetadata;

			Protocol_MSG_LOBBY_COMPARE_SITE_FOR_IP_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_COMPARE_SITE_FOR_IP_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_COMPARE_SITE_FOR_IP_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_COMPARE_SITE_FOR_IP_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_SIGNUP_QUESTIONNAIRE (cli_unauth) ------------------------------------------
		struct Protocol_MSG_LOBBY_SIGNUP_QUESTIONNAIRE : public Atf::MessageProtocol	// 439
		{
			// s4 - country,locale
			PString country;	// normally it has length 2, but there are examples of "*****"
			UINT32 locale;

			Protocol_MSG_LOBBY_SIGNUP_QUESTIONNAIRE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SIGNUP_QUESTIONNAIRE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SIGNUP_QUESTIONNAIRE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SIGNUP_QUESTIONNAIRE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct ReferralSource	// reply
		{
			// 4ss4<s> - sourceId,sourceName,pleaseSpecify,numOptions<options>
			UINT32 sourceId;
			PString sourceName;
			PString pleaseSpecify;
			Atf::LAtfVector< PString, 4 > options;

			ReferralSource();
			void clear();
			bool equals(const ReferralSource&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_SIGNUP_QUESTIONNAIRE_REPLY : public Atf::MessageProtocol	// 440
		{
			// 2[s|4<4ss4<s>>] - errCode[errDescr|numSources<sourceId,sourceName,pleaseSpecify,numOptions<options>>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< ReferralSource, 4 > sources;

			Protocol_MSG_LOBBY_SIGNUP_QUESTIONNAIRE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SIGNUP_QUESTIONNAIRE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SIGNUP_QUESTIONNAIRE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SIGNUP_QUESTIONNAIRE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct RegisterNewUserPrivileges
		{
			// M(448888) - M(untrustedPriv,untrustedPrivMask,untrustedPriv2,untrustedPriv2Mask,untrustedPriv3,untrustedPriv3Mask)
			UINT32 untrustedPriv;
			UINT32 untrustedPrivMask;
			UINT64 untrustedPriv2;
			UINT64 untrustedPriv2Mask;
			UINT64 untrustedPriv3;
			UINT64 untrustedPriv3Mask;

			RegisterNewUserPrivileges();
			void clear();
			bool equals(const RegisterNewUserPrivileges&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct RegisterNewUserRequest	// request
		{
			//! sssssssssss1vs44s4d4sssssbssvsbsss4 <FIXME>Common::AtfShared::LoginExtra</FIXME> 44 <FIXME>Common::AtfShared::LoginExtra</FIXME> M(448888)4 - id,pwd,fullName,email,addr_1,addr_2,city,state,country,zipCode,userInstallId,imageType,imageData,_dummy,siteIdShifted,referenceType,referenceStr,_promisedFppDummy,dob,locale,tiVer,tiGUID,tiManualPromo,tiPromoCode,tiInfoFile,ignoreInvalidManualPromo,firstName,lastName,captchaData,captchaText,mailList,sex,refDomain,mobile,timezone, <FIXME>clientExtra</FIXME> ,imageId,clientFlags, <FIXME>clientExtra_ignored</FIXME> ,M(untrustedPriv,untrustedPrivMask,untrustedPriv2,untrustedPriv2Mask,untrustedPriv3,untrustedPriv3Mask),regSiteId
			PString id;	// limit from InsertAcctCreationFailureStmt
			PString pwd;
			PString fullName;
			PString email;
			PString addr_1;
			PString addr_2;
			PString city;
			PString state;
			PString country;
			PString zipCode;
			PString userInstallId;
			BYTE imageType;	// dbm.h
			PBlock imageData;	// dbm.h
			PString _dummy;
			UINT32 siteIdShifted;
			INT32 referenceType;	// limit removed: min -1 max 1000; // limit estimated, questionnaire type, observed to be -1
			PString referenceStr;
			INT32 _promisedFppDummy;
			CommSrvDate dob;
			UINT32 locale;
			PString tiVer;
			PString tiGUID;
			PString tiManualPromo;	// maxlen 38 observed in QA env
			PString tiPromoCode;
			PString tiInfoFile;
			bool ignoreInvalidManualPromo;
			PString firstName;
			PString lastName;
			PBlock captchaData;
			PString captchaText;
			bool mailList;
			PString sex;
			PString refDomain;
			PString mobile;
			UINT32 timezone;	// enum eTimeZone in timezone.h
			Common::AtfShared::LoginExtra clientExtra;
			UINT32 imageId;
			UINT32 clientFlags;
			Common::AtfShared::LoginExtra clientExtra_ignored;	// not used by server
			RegisterNewUserPrivileges privileges;
			UINT32 regSiteId;

			RegisterNewUserRequest();
			void clear();
			bool equals(const RegisterNewUserRequest&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_REGISTER_NEW_USER (cli_unauth) ------------------------------------------
		struct Protocol_MSG_LOBBY_REGISTER_NEW_USER : public Atf::MessageProtocol	// 28
		{
			//! sssssssssss1vs44s4d4sssssbssvsbsss4 <FIXME>Common::AtfShared::LoginExtra</FIXME> 44 <FIXME>Common::AtfShared::LoginExtra</FIXME> M(448888)4 - id,pwd,fullName,email,addr_1,addr_2,city,state,country,zipCode,userInstallId,imageType,imageData,_dummy,siteIdShifted,referenceType,referenceStr,_promisedFppDummy,dob,locale,tiVer,tiGUID,tiManualPromo,tiPromoCode,tiInfoFile,ignoreInvalidManualPromo,firstName,lastName,captchaData,captchaText,mailList,sex,refDomain,mobile,timezone, <FIXME>clientExtra</FIXME> ,imageId,clientFlags, <FIXME>clientExtra_ignored</FIXME> ,M(untrustedPriv,untrustedPrivMask,untrustedPriv2,untrustedPriv2Mask,untrustedPriv3,untrustedPriv3Mask),regSiteId
			RegisterNewUserRequest newUser;

			Protocol_MSG_LOBBY_REGISTER_NEW_USER();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_REGISTER_NEW_USER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_REGISTER_NEW_USER; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_REGISTER_NEW_USER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_REGISTER_NEW_USER_REPLY : public Atf::MessageProtocol	// 29
		{
			// 2[s|4s4ss] - errCode[errDescr|fppForQuestionnaire,empty,firstDepositBonusAmount,firstDepositBonusCurrency,fdbPrompt]
			INT16 errCode;

			PString errDescr;

			INT32 fppForQuestionnaire;
			PString empty;
			INT32 firstDepositBonusAmount;
			PString firstDepositBonusCurrency;
			PString fdbPrompt;

			Protocol_MSG_LOBBY_REGISTER_NEW_USER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_REGISTER_NEW_USER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_REGISTER_NEW_USER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_REGISTER_NEW_USER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_1ST_TIME_FACEBOOK_LOGIN (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_1ST_TIME_FACEBOOK_LOGIN : public Atf::MessageProtocol	// 7118
		{
			//! sss444 <FIXME>Common::AtfShared::LoginExtra</FIXME>  - userId,email,installId,locale,siteId,platformId, <FIXME>clientExtra</FIXME> 
			PString userId;
			PString email;
			PString installId;
			UINT32 locale;
			UINT32 siteId;
			UINT32 platformId;
			Common::AtfShared::LoginExtra clientExtra;

			Protocol_MSG_REGULATOR_1ST_TIME_FACEBOOK_LOGIN();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_1ST_TIME_FACEBOOK_LOGIN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_1ST_TIME_FACEBOOK_LOGIN; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_1ST_TIME_FACEBOOK_LOGIN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_1ST_TIME_FACEBOOK_LOGIN_REPLY : public Atf::MessageProtocol	// 7119
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_1ST_TIME_FACEBOOK_LOGIN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_1ST_TIME_FACEBOOK_LOGIN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_1ST_TIME_FACEBOOK_LOGIN_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_1ST_TIME_FACEBOOK_LOGIN_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_EMAIL_AVAILABLE (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_EMAIL_AVAILABLE : public Atf::MessageProtocol	// 7244, PYR-42399
		{
			//! s4 <FIXME>Common::AtfShared::LoginExtra</FIXME>  - email,locale, <FIXME>clientExtra</FIXME> 
			PString email;
			UINT32 locale;
			Common::AtfShared::LoginExtra clientExtra;

			Protocol_MSG_REGULATOR_EMAIL_AVAILABLE();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_EMAIL_AVAILABLE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_EMAIL_AVAILABLE; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_EMAIL_AVAILABLE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_EMAIL_AVAILABLE_REPLY : public Atf::MessageProtocol	// 7245
		{
			//! 2[s <FIXME_COND_ELSE> 4 <FIXME_COND_ENDIF>  - errCode[errDescr <FIXME_COND_ELSE> ,brandId <FIXME_COND_ENDIF> 
			INT16 errCode;

			PString errDescr;

			UINT32 brandId;

			Protocol_MSG_REGULATOR_EMAIL_AVAILABLE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_EMAIL_AVAILABLE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_EMAIL_AVAILABLE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_EMAIL_AVAILABLE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_RESET_PWD (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_RESET_PWD : public Atf::MessageProtocol	// 7134, PYR-27258
		{
			// ssssbsss - user,zip,addr,email,useChallengeQuestions,answer1,answer2,ssn4
			common_structs::ResetPwdMessageStruct resetPwd;

			Protocol_MSG_REGULATOR_RESET_PWD();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_RESET_PWD&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_RESET_PWD; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_RESET_PWD"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_RESET_PWD_REPLY : public Atf::MessageProtocol	// 7135
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_RESET_PWD_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_RESET_PWD_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_RESET_PWD_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_RESET_PWD_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_RETRIEVE_USERID ------------------------------------------
		struct Protocol_MSG_LOBBY_RETRIEVE_USERID : public Atf::MessageProtocol	// 455
		{
			// s44 - email,locale,clientSiteId
			PString email;
			UINT32 locale;
			UINT32 clientSiteId;

			Protocol_MSG_LOBBY_RETRIEVE_USERID();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RETRIEVE_USERID&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RETRIEVE_USERID; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RETRIEVE_USERID"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_RETRIEVE_USERID_REPLY : public Atf::MessageProtocol	// 456
		{
			//! 2[s|s <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 2<4s> <FIXME_COND_ENDIF>  - errCode[errDescr|emptyStr <FIXME_COND_ELSE> ,licenseId <FIXME_COND_ELSE> ,numChallengeQuestions<id,txt> <FIXME_COND_ENDIF> 
			INT16 errCode;

			PString errDescr;

			PString emptyStr;

			UINT32 licenseId;

			Atf::LAtfVector< common_structs::ChallengeQuestion, 2 > challengeQuestions;

			Protocol_MSG_LOBBY_RETRIEVE_USERID_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_RETRIEVE_USERID_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_RETRIEVE_USERID_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_RETRIEVE_USERID_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_SMS_RESET_PWD (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_SMS_RESET_PWD : public Atf::MessageProtocol	// 7136, PYR-27258 (orig PYR-22184 MSG_LOBBY_SMS_RESET_PWD2 via lobby -> removed PYR-40405)
		{
			// sss - user,email,mobile
			PString user;
			PString email;
			PString mobile;

			Protocol_MSG_REGULATOR_SMS_RESET_PWD();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SMS_RESET_PWD&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SMS_RESET_PWD; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SMS_RESET_PWD"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SMS_RESET_PWD_REPLY : public Atf::MessageProtocol	// 7137
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_SMS_RESET_PWD_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SMS_RESET_PWD_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SMS_RESET_PWD_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SMS_RESET_PWD_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_PWD_RESET_QUESTIONS (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS : public Atf::MessageProtocol	// 7140, PYR-27258
		{
			// ss4 - userId,email,locale
			PString userId;	// client does not limit the length correctly (should be 20 max)
			PString email;
			UINT32 locale;

			Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_PWD_RESET_QUESTIONS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_PWD_RESET_QUESTIONS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS_REPLY : public Atf::MessageProtocol	// 7141
		{
			// 2[s|b2<4s>b] - errCode[errDescr|isRM,numChallengeQuestions<id,txt>,allowSMSReset]
			INT16 errCode;

			PString errDescr;

			bool isRM;
			Atf::LAtfVector< common_structs::ChallengeQuestion, 2 > challengeQuestions;
			bool allowSMSReset;

			Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_PWD_RESET_QUESTIONS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_PWD_RESET_QUESTIONS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_PWD_RESET_QUESTIONS2 (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS2 : public Atf::MessageProtocol	// 7142, PYR-27258
		{
			// s44 - userId,locale,userIntId
			PString userId;	// client does not limit the length correctly (should be 20 max)
			UINT32 locale;
			UINT32 userIntId;

			Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS2();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_PWD_RESET_QUESTIONS2; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_PWD_RESET_QUESTIONS2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS2_REPLY : public Atf::MessageProtocol	// 7143
		{
			// 2[s|2<4s>] - errCode[errDescr|numChallengeQuestions<id,txt>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< common_structs::ChallengeQuestion, 2 > challengeQuestions;

			Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_PWD_RESET_QUESTIONS2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_PWD_RESET_QUESTIONS2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_PWD_RESET_QUESTIONS2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_CLEAR_STRONG_AUTH_REQD (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_CLEAR_STRONG_AUTH_REQD : public Atf::MessageProtocol	// 7144, PYR-27258
		{
			// ssss - user,answer1,answer2,ssn4
			PString user;
			PString answer1;
			PString answer2;
			PString ssn4;

			Protocol_MSG_REGULATOR_CLEAR_STRONG_AUTH_REQD();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CLEAR_STRONG_AUTH_REQD&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CLEAR_STRONG_AUTH_REQD; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CLEAR_STRONG_AUTH_REQD"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_CLEAR_STRONG_AUTH_REQD_REPLY : public Atf::MessageProtocol	// 7145
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_CLEAR_STRONG_AUTH_REQD_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CLEAR_STRONG_AUTH_REQD_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CLEAR_STRONG_AUTH_REQD_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CLEAR_STRONG_AUTH_REQD_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_RETRIEVE_USERID2 (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_RETRIEVE_USERID2 : public Atf::MessageProtocol	// 7150, PYR-28472
		{
			// ssss44 - eMail,answer1,answer2,ssn4,locale,clientSiteId
			PString eMail;
			PString answer1;
			PString answer2;
			PString ssn4;
			UINT32 locale;
			UINT32 clientSiteId;

			Protocol_MSG_REGULATOR_RETRIEVE_USERID2();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_RETRIEVE_USERID2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_RETRIEVE_USERID2; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_RETRIEVE_USERID2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_RETRIEVE_USERID2_REPLY : public Atf::MessageProtocol	// 7151
		{
			//! 2[s|s <FIXME_COND_ELSE> 4 <FIXME_COND_ELSE> 2<4s> <FIXME_COND_ENDIF>  - errCode[errDescr|emptyStr <FIXME_COND_ELSE> ,licenseId <FIXME_COND_ELSE> ,numChallengeQuestions<id,txt> <FIXME_COND_ENDIF> 
			INT16 errCode;

			PString errDescr;

			PString emptyStr;

			UINT32 licenseId;

			Atf::LAtfVector< common_structs::ChallengeQuestion, 2 > challengeQuestions;

			Protocol_MSG_REGULATOR_RETRIEVE_USERID2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_RETRIEVE_USERID2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_RETRIEVE_USERID2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_RETRIEVE_USERID2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_GET_AVAIL_REVALIDATION_METHODS (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_GET_AVAIL_REVALIDATION_METHODS : public Atf::MessageProtocol	// 7182, PYR-31219
		{
			// s444 - userId,locale,clientSiteId,userIntId
			PString userId;
			UINT32 locale;
			UINT32 clientSiteId;
			UINT32 userIntId;

			Protocol_MSG_REGULATOR_GET_AVAIL_REVALIDATION_METHODS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_AVAIL_REVALIDATION_METHODS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_AVAIL_REVALIDATION_METHODS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_AVAIL_REVALIDATION_METHODS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_AVAIL_REVALIDATION_METHODS_REPLY : public Atf::MessageProtocol	// 7183
		{
			// 2[s|4s] - errCode[errDescr|revalidationMethods,phoneNumber]
			INT16 errCode;

			PString errDescr;

			UINT32 revalidationMethods;
			PString phoneNumber;

			Protocol_MSG_REGULATOR_GET_AVAIL_REVALIDATION_METHODS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_AVAIL_REVALIDATION_METHODS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_AVAIL_REVALIDATION_METHODS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_AVAIL_REVALIDATION_METHODS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_CLEAR_ACCOUNT_REVALIDATION (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_CLEAR_ACCOUNT_REVALIDATION : public Atf::MessageProtocol	// 7184, PYR-31219
		{
			// s444ss4 - userId,locale,clientSiteId,revalidationMethod,answer1,answer2,userIntId
			PString userId;
			UINT32 locale;
			UINT32 clientSiteId;
			INT32 revalidationMethod;
			PString answer1;
			PString answer2;
			UINT32 userIntId;

			Protocol_MSG_REGULATOR_CLEAR_ACCOUNT_REVALIDATION();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CLEAR_ACCOUNT_REVALIDATION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CLEAR_ACCOUNT_REVALIDATION; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CLEAR_ACCOUNT_REVALIDATION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_CLEAR_ACCOUNT_REVALIDATION_REPLY : public Atf::MessageProtocol	// 7185
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_CLEAR_ACCOUNT_REVALIDATION_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CLEAR_ACCOUNT_REVALIDATION_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CLEAR_ACCOUNT_REVALIDATION_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CLEAR_ACCOUNT_REVALIDATION_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_ACCOUNT_REVALIDATION_CANCELLED (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_CANCELLED : public Atf::MessageProtocol	// 7186, PYR-31219
		{
			// s444 - userId,locale,clientSiteId,userIntId
			PString userId;
			UINT32 locale;
			UINT32 clientSiteId;
			UINT32 userIntId;

			Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_CANCELLED();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_CANCELLED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_ACCOUNT_REVALIDATION_CANCELLED; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_ACCOUNT_REVALIDATION_CANCELLED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_CANCELLED_REPLY : public Atf::MessageProtocol	// 7187
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_CANCELLED_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_CANCELLED_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_ACCOUNT_REVALIDATION_CANCELLED_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_ACCOUNT_REVALIDATION_CANCELLED_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_ACCOUNT_REVALIDATION_SEND_SMS (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_SEND_SMS : public Atf::MessageProtocol	// 7188, PYR-31219
		{
			// s444 - userId,locale,clientSiteId,userIntId
			PString userId;
			UINT32 locale;
			UINT32 clientSiteId;
			UINT32 userIntId;

			Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_SEND_SMS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_SEND_SMS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_ACCOUNT_REVALIDATION_SEND_SMS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_ACCOUNT_REVALIDATION_SEND_SMS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_SEND_SMS_REPLY : public Atf::MessageProtocol	// 7189
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_SEND_SMS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_SEND_SMS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_ACCOUNT_REVALIDATION_SEND_SMS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_ACCOUNT_REVALIDATION_SEND_SMS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_ACCOUNT_REVALIDATION_GET_LAST_CC (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_GET_LAST_CC : public Atf::MessageProtocol	// 7190, PYR-31219
		{
			// s444 - userId,locale,clientSiteId,userIntId
			PString userId;
			UINT32 locale;
			UINT32 clientSiteId;
			UINT32 userIntId;

			Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_GET_LAST_CC();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_GET_LAST_CC&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_ACCOUNT_REVALIDATION_GET_LAST_CC; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_ACCOUNT_REVALIDATION_GET_LAST_CC"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct MaskedCardNum	// reply
		{
			// sst - paysystem,maskedNum,whenUsed
			PString paysystem;
			PString maskedNum;
			SrvTime whenUsed;

			MaskedCardNum();
			void clear();
			bool equals(const MaskedCardNum&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_GET_LAST_CC_REPLY : public Atf::MessageProtocol	// 7191
		{
			// 2[s|4<sst>] - errCode[errDescr|numUserMaskedCreditCards<paysystem,maskedNum,whenUsed>]
			INT16 errCode;

			PString errDescr;

			Atf::LAtfVector< MaskedCardNum, 4 > userMaskedCreditCards;

			Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_GET_LAST_CC_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_ACCOUNT_REVALIDATION_GET_LAST_CC_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_ACCOUNT_REVALIDATION_GET_LAST_CC_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_ACCOUNT_REVALIDATION_GET_LAST_CC_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS2 (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS2 : public Atf::MessageProtocol	// 7204, PYR-32706
		{
			// s444<s> - userId,locale,clientSiteId,numAnswers<answer>
			PString userId;
			UINT32 locale;
			UINT32 clientSiteId;
			Atf::LAtfVector< common_structs::ChallengeAnswer, 4 > answers;

			Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS2();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS2; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS2_REPLY : public Atf::MessageProtocol	// 7205
		{
			// 2[s|b] - errCode[errDescr|match]
			INT16 errCode;

			PString errDescr;

			bool match;

			Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_VALIDATE_CHALLENGE_ANSWERS2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_REMIND_SID (cli_unauth) ------------------------------------------
		struct Protocol_MSG_LOBBY_REMIND_SID : public Atf::MessageProtocol	// 234, PYR-40406
		{
			// s - userId
			PString userId;	// client does not limit the length correctly (should be 20 max)

			Protocol_MSG_LOBBY_REMIND_SID();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_REMIND_SID&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_REMIND_SID; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_REMIND_SID"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_REMIND_SID_REPLY : public Atf::MessageProtocol	// 235
		{
			// 2[s|sb] - errCode[errDescr|mobileOrEmail,viaSMS]
			INT16 errCode;

			PString errDescr;

			PString mobileOrEmail;
			bool viaSMS;

			Protocol_MSG_LOBBY_REMIND_SID_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_REMIND_SID_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_REMIND_SID_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_REMIND_SID_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_SEND_WEB_PWD_RESET_EMAIL (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_SEND_WEB_PWD_RESET_EMAIL : public Atf::MessageProtocol	// 7232, PYR-41017
		{
			//! s44s4 <FIXME>Common::AtfShared::LoginExtra</FIXME>  - userIdOrEmail,locale,clientSiteId,installId,brandId, <FIXME>clientExtra</FIXME> 
			PString userIdOrEmail;	// USER_EMAIL_LEN; // USER_EMAIL_LEN > USER_NAME_LEN // client can send longer string
			UINT32 locale;
			UINT32 clientSiteId;
			PString installId;
			INT32 brandId;
			//if (ramConn)
			//PString ipAddr parseEndOptB4Me;
			Common::AtfShared::LoginExtra clientExtra;

			Protocol_MSG_REGULATOR_SEND_WEB_PWD_RESET_EMAIL();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SEND_WEB_PWD_RESET_EMAIL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SEND_WEB_PWD_RESET_EMAIL; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SEND_WEB_PWD_RESET_EMAIL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_SEND_WEB_PWD_RESET_EMAIL_REPLY : public Atf::MessageProtocol	// 7233
		{
			// 2[s|4s] - errCode[errDescr|inputFormat,eMailMask]
			INT16 errCode;

			PString errDescr;

			INT32 inputFormat;
			PString eMailMask;

			Protocol_MSG_REGULATOR_SEND_WEB_PWD_RESET_EMAIL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SEND_WEB_PWD_RESET_EMAIL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SEND_WEB_PWD_RESET_EMAIL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SEND_WEB_PWD_RESET_EMAIL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_WEB_PWD_SET_NEW_PWD (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_WEB_PWD_SET_NEW_PWD : public Atf::MessageProtocol	// 7234, PYR-41017
		{
			// sss - encryptedData,newPwd,ipAddr
			PString encryptedData;
			PString newPwd;	// client does not limit the length correctly
			PString ipAddr;

			Protocol_MSG_REGULATOR_WEB_PWD_SET_NEW_PWD();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_WEB_PWD_SET_NEW_PWD&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_WEB_PWD_SET_NEW_PWD; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_WEB_PWD_SET_NEW_PWD"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_WEB_PWD_SET_NEW_PWD_REPLY : public Atf::MessageProtocol	// 7235
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_WEB_PWD_SET_NEW_PWD_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_WEB_PWD_SET_NEW_PWD_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_WEB_PWD_SET_NEW_PWD_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_WEB_PWD_SET_NEW_PWD_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_WEB_PWD_GET_TOKEN_INFO (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_WEB_PWD_GET_TOKEN_INFO : public Atf::MessageProtocol	// 7238
		{
			// s - encryptedData
			PString encryptedData;

			Protocol_MSG_REGULATOR_WEB_PWD_GET_TOKEN_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_WEB_PWD_GET_TOKEN_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_WEB_PWD_GET_TOKEN_INFO; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_WEB_PWD_GET_TOKEN_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_WEB_PWD_GET_TOKEN_INFO_REPLY : public Atf::MessageProtocol	// 7239
		{
			// 2[s|sbss4t] - errCode[errDescr|userId,isRMOK,userFirstName,userLastName,userLicenseId,tokenExpiry]
			INT16 errCode;

			PString errDescr;

			PString userId;
			bool isRMOK;
			PString userFirstName;
			PString userLastName;
			UINT32 userLicenseId;
			SrvTime tokenExpiry;

			Protocol_MSG_REGULATOR_WEB_PWD_GET_TOKEN_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_WEB_PWD_GET_TOKEN_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_WEB_PWD_GET_TOKEN_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_WEB_PWD_GET_TOKEN_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_SET_PRIV_NO_SURVEY (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_SET_PRIV_NO_SURVEY : public Atf::MessageProtocol	// 7242, PYR-37989
		{
			// s - encryptedData
			PString encryptedData;

			Protocol_MSG_REGULATOR_SET_PRIV_NO_SURVEY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_PRIV_NO_SURVEY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_PRIV_NO_SURVEY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_PRIV_NO_SURVEY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SET_PRIV_NO_SURVEY_REPLY : public Atf::MessageProtocol	// 7243
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_SET_PRIV_NO_SURVEY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_PRIV_NO_SURVEY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_PRIV_NO_SURVEY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_PRIV_NO_SURVEY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_VALIDATE_USER_UPDATE (cli_unauth) ------------------------------------------
		struct Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE : public Atf::MessageProtocol	// 7250, PYR-45841
		{
			//! s4<4 <FIXME_COND_IF> M(ssssss) <FIXME_COND_ELSE> M(sb) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(1v) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M() <FIXME_COND_ELSE> M(ss) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(4< <FIXME>Common::AtfShared::UserPropertyLegacy</FIXME> >) <FIXME_COND_ELSE> M(d) <FIXME_COND_ELSE> M(44b) <FIXME_COND_ELSE> M(4b4b4s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(s) <FIXME_COND_ELSE> M(ss) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(bbbb) <FIXME_COND_ELSE> M(ssssssssdsssssss4sds448s) <FIXME_COND_ELSE> M(bs) <FIXME_COND_ELSE> M(44b4) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(sss) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M(b) <FIXME_COND_ELSE> M(844s) <FIXME_COND_ELSE> M(4) <FIXME_COND_ELSE> M() <FIXME_COND_ENDIF> >4 - userId_ignore,numElements<updateType <FIXME_COND_IF> ,M(addr_1,addr_2,city,state,country,zipCode) <FIXME_COND_ELSE> ,M(email,autoValidateEmail) <FIXME_COND_ELSE> ,M(pwd) <FIXME_COND_ELSE> ,M(imageType,imgData) <FIXME_COND_ELSE> ,M(fullName) <FIXME_COND_ELSE> ,M(phone) <FIXME_COND_ELSE> ,M() <FIXME_COND_ELSE> ,M(firstName,lastName) <FIXME_COND_ELSE> ,M(fiscalCode) <FIXME_COND_ELSE> ,M(encrFiscalCode) <FIXME_COND_ELSE> ,M(numProperties< <FIXME>Common::AtfShared::UserPropertyLegacy</FIXME> >) <FIXME_COND_ELSE> ,M(birthDate) <FIXME_COND_ELSE> ,M(imageId,currentImageId,isCurrentImageFromGallery) <FIXME_COND_ELSE> ,M(imageId,isGalleryImage,currentImageId,isCurrentImageFromGallery,adminIntId,adminId) <FIXME_COND_ELSE> ,M(sex) <FIXME_COND_ELSE> ,M(mobile) <FIXME_COND_ELSE> ,M(verificationCertificate,verificationSignedData) <FIXME_COND_ELSE> ,M(mailListIn) <FIXME_COND_ELSE> ,M(mailListPokerIn,mailListCasinoIn,mailListSportsIn,mailListSportsLiveAlertIn) <FIXME_COND_ELSE> ,M(firstName,lastName,sex,addr_1,citymaxlen,state,country,zipCode,birthDate,birthCity,birthState,birthCountry,phone,mobile,email,fiscalCode,documentType,documentNumber,documentIssueDate,documentPlaceOfIssue,documentIssuingAuthority,flags,flags2,profession) <FIXME_COND_ELSE> ,M(realMoneyOkSet,comment) <FIXME_COND_ELSE> ,M(weeklyDepositLimit,buyInLimit,isBuyInLimitValid,sportsAccumulatedLimit) <FIXME_COND_ELSE> ,M(allowSMSPwdReset) <FIXME_COND_ELSE> ,M(smsMarketingFlagValue) <FIXME_COND_ELSE> ,M(answer1,answer2,ssn4) <FIXME_COND_ELSE> ,M(booleanActions) <FIXME_COND_ELSE> ,M(optinLeaderBoard) <FIXME_COND_ELSE> ,M(appLoginId,brandId,adminIntId,adminId) <FIXME_COND_ELSE> ,M(requestCtx) <FIXME_COND_ELSE> ,M() <FIXME_COND_ENDIF> >,locale
			PString userId_ignore;
			Atf::LAtfVector< common_structs::UserUpdateElement, 4 > elements;
			UINT32 locale;

			Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_VALIDATE_USER_UPDATE; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_VALIDATE_USER_UPDATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE_REPLY : public Atf::MessageProtocol	// 7251, PYR-45841
		{
			// 2[4<42s>] - errCode[numValidationResults<updateType,errCode,errDescr>]
			INT16 errCode;

			Atf::LAtfVector< common_structs::UserUpdateValidationResult, 4 > validationResults;

			Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_VALIDATE_USER_UPDATE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_VALIDATE_USER_UPDATE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_VALIDATE_USER_UPDATE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//---------------- MSG_REGULATOR_GET_SWISS_URL (cli_unauth) -------------------------------------------------------------------
		struct Protocol_MSG_REGULATOR_GET_SWISS_URL : public Atf::MessageProtocol	//	PYR-89580
		{
			//!  <FIXME>Common::AtfShared::LoginExtra</FIXME> 444<s> -  <FIXME>loginExtra</FIXME> ,locale,urlType,numParams<param>
			Common::AtfShared::LoginExtra loginExtra;
			common_structs::SwissUrlRequest commonRequest;

			Protocol_MSG_REGULATOR_GET_SWISS_URL();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_SWISS_URL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_SWISS_URL; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_SWISS_URL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_SWISS_URL_REPLY : public Atf::MessageProtocol
		{
			// 2[s|s] - errCode[errDescr|url]
			INT16 errCode;

			PString errDescr;

			PString url;

			Protocol_MSG_REGULATOR_GET_SWISS_URL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_SWISS_URL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_SWISS_URL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_SWISS_URL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//---------------- MSG_REGULATOR_VALIDATE_REGISTRATION_COUNTRY (cli_unauth) -------------------------------------------------------------------
		struct Protocol_MSG_REGULATOR_VALIDATE_REGISTRATION_COUNTRY : public Atf::MessageProtocol	//	PYR-124003
		{
			//!  <FIXME>Common::AtfShared::LoginExtra</FIXME> s4 -  <FIXME>clientExtra</FIXME> ,country,localeId
			Common::AtfShared::LoginExtra clientExtra;
			PString country;
			UINT32 localeId;

			Protocol_MSG_REGULATOR_VALIDATE_REGISTRATION_COUNTRY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_VALIDATE_REGISTRATION_COUNTRY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_VALIDATE_REGISTRATION_COUNTRY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_VALIDATE_REGISTRATION_COUNTRY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_VALIDATE_REGISTRATION_COUNTRY_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_VALIDATE_REGISTRATION_COUNTRY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_VALIDATE_REGISTRATION_COUNTRY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_VALIDATE_REGISTRATION_COUNTRY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_VALIDATE_REGISTRATION_COUNTRY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
	};

	//////////////////////////////////// CORE CLIENT (FACEBOOK) CONNECTION ////////////////////////////
	namespace core
	{
		//--------------------------------------------- MSG_LOBBY_NAME_AVAILABLE (core) ------------------------------------------
		struct Protocol_MSG_LOBBY_NAME_AVAILABLE : public Atf::MessageProtocol	//
		{
			// 4s4 - reqId,userId,localeId
			UINT32 reqId;
			common_structs::LobbyNameAvailableStruct body;

			Protocol_MSG_LOBBY_NAME_AVAILABLE();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_NAME_AVAILABLE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_NAME_AVAILABLE; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_NAME_AVAILABLE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_NAME_AVAILABLE_REPLY : public Atf::MessageProtocol
		{
			// 42[s|s4<s>] - reqId,errCode[errDescr|userId_,numSuggestedIds<suggestedIds>]
			UINT32 reqId;
			common_structs::LobbyNameAvailableReplyStruct replyBody;

			Protocol_MSG_LOBBY_NAME_AVAILABLE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_NAME_AVAILABLE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_NAME_AVAILABLE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_NAME_AVAILABLE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_REGISTER_NEW_USER2 (core) ------------------------------------------
		struct AppTypeEssentials
		{
			// 4444 - brandId,osId,appTypeId,productId
			UINT32 brandId;
			UINT32 osId;
			UINT32 appTypeId;
			UINT32 productId;

			AppTypeEssentials();
			void clear();
			bool equals(const AppTypeEssentials&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_REGISTER_NEW_USER2 : public Atf::MessageProtocol	// PYR-23343
		{
			// 4ss8sssssssd4sss44444444s - reqId,ipAddr,id,facebookIntId,email,userInstallId,addr_1,city,state,country,zipCode,dob,locale,firstName,lastName,sex,timezone_,clientPlatform,clientType,clientDevice,brandId,osId,appTypeId,productId,phone
			UINT32 reqId;
			PString ipAddr;
			PString id;
			UINT64 facebookIntId;
			PString email;
			PString userInstallId;
			PString addr_1;
			PString city;
			PString state;
			PString country;
			PString zipCode;
			CommSrvDate dob;
			UINT32 locale;
			PString firstName;
			PString lastName;
			PString sex;
			UINT32 timezone_;	// enum eTimeZone
			UINT32 clientPlatform;
			UINT32 clientType;
			UINT32 clientDevice;
			AppTypeEssentials appTypeEssentials;
			PString phone;

			Protocol_MSG_REGULATOR_REGISTER_NEW_USER2();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_REGISTER_NEW_USER2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_REGISTER_NEW_USER2; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_REGISTER_NEW_USER2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_REGISTER_NEW_USER2_REPLY : public Atf::MessageProtocol
		{
			// 42[s|4] - reqId,errCode[errDescr|userIntId]
			UINT32 reqId;
			INT16 errCode;

			PString errDescr;

			UINT32 userIntId;

			Protocol_MSG_REGULATOR_REGISTER_NEW_USER2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_REGISTER_NEW_USER2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_REGISTER_NEW_USER2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_REGISTER_NEW_USER2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_GET_FACEBOOK_LINK_CODE (core) ------------------------------------------
		struct Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE : public Atf::MessageProtocol	// PYR-23923
		{
			// 4ss - reqId,userId,email
			UINT32 reqId;
			PString userId;
			PString email;

			Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_FACEBOOK_LINK_CODE; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_FACEBOOK_LINK_CODE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE_REPLY : public Atf::MessageProtocol
		{
			// 42[s|4] - reqId,errCode[errDescr|facebookLinkCode]
			UINT32 reqId;
			INT16 errCode;

			PString errDescr;

			UINT32 facebookLinkCode;

			Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_FACEBOOK_LINK_CODE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_FACEBOOK_LINK_CODE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_FACEBOOK_LINK_CODE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_CREATE_FACEBOOK_LINK (core) ------------------------------------------
		struct Protocol_MSG_REGULATOR_CREATE_FACEBOOK_LINK : public Atf::MessageProtocol	// PYR-23923
		{
			// 4s84 - reqId,userId,facebookIntId,linkCode
			UINT32 reqId;
			PString userId;
			UINT64 facebookIntId;
			UINT32 linkCode;

			Protocol_MSG_REGULATOR_CREATE_FACEBOOK_LINK();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CREATE_FACEBOOK_LINK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CREATE_FACEBOOK_LINK; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CREATE_FACEBOOK_LINK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_CREATE_FACEBOOK_LINK_REPLY : public Atf::MessageProtocol
		{
			// 42[s|4s] - reqId,errCode[errDescr|userIntId,userId]
			UINT32 reqId;
			INT16 errCode;

			PString errDescr;

			UINT32 userIntId;
			PString userId;

			Protocol_MSG_REGULATOR_CREATE_FACEBOOK_LINK_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_CREATE_FACEBOOK_LINK_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_CREATE_FACEBOOK_LINK_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_CREATE_FACEBOOK_LINK_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_REGULATOR_RAM ------------------------------------------
		struct Protocol_MSG_REGULATOR_SET_COMM_PREFS : public Atf::MessageProtocol	// PYR-64017
		{
			// sbbb - token,poker,casino,sports
			PString token;
			bool poker;
			bool casino;
			bool sports;

			Protocol_MSG_REGULATOR_SET_COMM_PREFS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_COMM_PREFS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_COMM_PREFS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_COMM_PREFS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SET_COMM_PREFS_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_SET_COMM_PREFS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_COMM_PREFS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_COMM_PREFS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_COMM_PREFS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_COMM_PREFS : public Atf::MessageProtocol	// PYR-64017
		{
			// s - token
			PString token;

			Protocol_MSG_REGULATOR_GET_COMM_PREFS();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_COMM_PREFS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_COMM_PREFS; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_COMM_PREFS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_COMM_PREFS_REPLY : public Atf::MessageProtocol
		{
			// 2[s|sbbb] - errCode[errDescr|userId,poker,casino,sports]
			INT16 errCode;

			PString errDescr;

			PString userId;
			bool poker;
			bool casino;
			bool sports;

			Protocol_MSG_REGULATOR_GET_COMM_PREFS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_COMM_PREFS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_COMM_PREFS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_COMM_PREFS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SET_COMM_PREFS_SV : public Atf::MessageProtocol	// PYR-64017
		{
			// sbbb - userId,poker,casino,sports
			PString userId;
			bool poker;
			bool casino;
			bool sports;

			Protocol_MSG_REGULATOR_SET_COMM_PREFS_SV();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_COMM_PREFS_SV&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_COMM_PREFS_SV; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_COMM_PREFS_SV"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_SET_COMM_PREFS_SV_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_REGULATOR_SET_COMM_PREFS_SV_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_SET_COMM_PREFS_SV_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_SET_COMM_PREFS_SV_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_SET_COMM_PREFS_SV_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_COMM_PREFS_SV : public Atf::MessageProtocol	// PYR-64017
		{
			// 4 - userIntId
			UINT32 userIntId;

			Protocol_MSG_REGULATOR_GET_COMM_PREFS_SV();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_COMM_PREFS_SV&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_COMM_PREFS_SV; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_COMM_PREFS_SV"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_COMM_PREFS_SV_REPLY : public Atf::MessageProtocol
		{
			// 2[s|sbbb] - errCode[errDescr|userId,poker,casino,sports]
			INT16 errCode;

			PString errDescr;

			PString userId;
			bool poker;
			bool casino;
			bool sports;

			Protocol_MSG_REGULATOR_GET_COMM_PREFS_SV_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_COMM_PREFS_SV_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_COMM_PREFS_SV_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_COMM_PREFS_SV_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
	};

	namespace Asia
	{
		struct Protocol_MSG_REGULATOR_GET_EXTERNAL_OP_TOKEN : public Atf::MessageProtocol	//	PYR-65464
		{

			Protocol_MSG_REGULATOR_GET_EXTERNAL_OP_TOKEN();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_EXTERNAL_OP_TOKEN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_EXTERNAL_OP_TOKEN; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_EXTERNAL_OP_TOKEN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_REGULATOR_GET_EXTERNAL_OP_TOKEN_REPLY : public Atf::MessageProtocol
		{
			// 2[s|ss4] - errCode[errDescr|token,tokenSignature,userIntId]
			INT16 errCode;

			PString errDescr;

			PString token;
			PString tokenSignature;
			UINT32 userIntId;

			Protocol_MSG_REGULATOR_GET_EXTERNAL_OP_TOKEN_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_REGULATOR_GET_EXTERNAL_OP_TOKEN_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_REGULATOR_GET_EXTERNAL_OP_TOKEN_REPLY; }
			const char *getMsgIdString() const override { return "MSG_REGULATOR_GET_EXTERNAL_OP_TOKEN_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
	};

	//////////////////////////////////// CLIENT DOCS CONNECTION ////////////////////////////
	// client -> regulator for sending attached documents
	namespace cli_docs
	{
		//--------------------------------------------- MSG_LOBBY_SUPPORT_EMAIL_READY (cli_docs) ------------------------------------------
		struct Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY : public Atf::MessageProtocol	// PYR-27504
		{
			// s - userIdNotUsed
			PString userIdNotUsed;

			Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SUPPORT_EMAIL_READY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SUPPORT_EMAIL_READY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_SUPPORT_EMAIL_READY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_SUPPORT_EMAIL_READY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_SUPPORT_EMAIL_READY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		//--------------------------------------------- MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL (cli_docs) ------------------------------------------
		struct Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL : public Atf::MessageProtocol	// PYR-27504
		{
			// s44ssss4<sv> - userId,category,subCategory,subject,body,clientVersion,clientOsInfo,numAttachments<attName,attBody>
			common_structs::LobbyClientToSupportEmailStruct body;

			Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL_REPLY : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errDescr]
			common_structs::LobbyClientToSupportEmailReplyStruct replyBody;

			Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_LOBBY_CLIENT_TO_SUPPORT_EMAIL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
	};
};

#endif
