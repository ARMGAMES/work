/**
 * hub_feed_server_atf.cpp
 *
 * This file was auto-generated from hub_feed_server_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: hub_feed_server_atf.txt
 */
 
#include "hub_feed_server_atf.h"

//=================================================================
//                    ButtonInfo
//=================================================================

HubFeedServerATF::cli::ButtonInfo::ButtonInfo()
{
	clear();
}

void HubFeedServerATF::cli::ButtonInfo::clear()
{
	label.clear();
	c2l.clear();
}

bool HubFeedServerATF::cli::ButtonInfo::equals(const ButtonInfo& _o) const
{
	return Atf::atfPStringEquals(label, _o.label) &&
		Atf::atfPStringEquals(c2l, _o.c2l);
}

const char *HubFeedServerATF::cli::ButtonInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("label=");
	_buf.append(label);
	_buf.append(',');
	_buf.append("c2l=");
	_buf.append(c2l);
	_buf.append('}');
	return _buf.c_str();
}

const char *HubFeedServerATF::cli::ButtonInfo::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("label", label, _buf);
	Atf::XmlElement::encodeAsXmlElement("c2l", c2l, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool HubFeedServerATF::cli::ButtonInfo::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("label"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, label)) return false;
		}
		else if (_element.equals("c2l"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, c2l)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void HubFeedServerATF::cli::ButtonInfo::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(ButtonInfo())) // not empty
	{
		_body.composeString(label);
		_body.composeString(c2l);
	}

	_msg.composeMsgBody(_body);
}

void HubFeedServerATF::cli::ButtonInfo::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(label);
	_parser0.parseStringP(c2l);
}

const char *HubFeedServerATF::cli::ButtonInfo::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("label", label);
	_jsonstr.compose("c2l", c2l);
	return _buf.c_str();
}

void HubFeedServerATF::cli::ButtonInfo::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("label", label);
	_jparser.parseByNameThrow("c2l", c2l);
}

/* static */ void HubFeedServerATF::cli::ButtonInfo::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString label; _jparser.validateByNameThrow("label", label);
	AtfValidator::validateInt(_descr, "label", label.length(), _checker, __FILE__, __LINE__);
	PString c2l; _jparser.validateByNameThrow("c2l", c2l);
	AtfValidator::validateInt(_descr, "c2l", c2l.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void HubFeedServerATF::cli::ButtonInfo::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "label"); size_t szLabel = strlen(_dummy);
	AtfValidator::validateInt(_descr, "label", szLabel, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "c2l"); size_t szC2l = strlen(_dummy);
	AtfValidator::validateInt(_descr, "c2l", szC2l, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    PostItemData
//=================================================================

HubFeedServerATF::cli::PostItemData::PostItemData()
{
	clear();
}

void HubFeedServerATF::cli::PostItemData::clear()
{
	postIcon = 0;
	buttons.clear();
	postTitle.clear();
	postBody.clear();
	eventTime.setNull();
}

bool HubFeedServerATF::cli::PostItemData::equals(const PostItemData& _o) const
{
	return postIcon == _o.postIcon &&
		buttons.equals(_o.buttons) &&
		Atf::atfPStringEquals(postTitle, _o.postTitle) &&
		Atf::atfPStringEquals(postBody, _o.postBody) &&
		eventTime.equals(_o.eventTime);
}

const char *HubFeedServerATF::cli::PostItemData::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("postIcon=");
	_buf.appendInt(postIcon);
	_buf.append(',');
	_buf.append("buttons=");
	buttons.toTraceString(_buf);
	_buf.append(',');
	_buf.append("postTitle=");
	_buf.append(postTitle);
	_buf.append(',');
	_buf.append("postBody=");
	_buf.append(postBody);
	_buf.append(',');
	_buf.append("eventTime=");
	Atf::AtfTempl<SrvTime>::ToTraceString(_buf, eventTime);
	_buf.append('}');
	return _buf.c_str();
}

const char *HubFeedServerATF::cli::PostItemData::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("postIcon", postIcon, _buf);
	buttons.toXmlString("buttons", _buf);
	Atf::XmlElement::encodeAsXmlElement("postTitle", postTitle, _buf);
	Atf::XmlElement::encodeAsXmlElement("postBody", postBody, _buf);
	Atf::AtfTempl<SrvTime>::ToXmlString(_buf, "eventTime", eventTime);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool HubFeedServerATF::cli::PostItemData::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("postIcon"))
		{
			postIcon = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("buttons"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< ButtonInfo, 4 > >::FromXmlString(_value, buttons)) return false;
		}
		else if (_element.equals("postTitle"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, postTitle)) return false;
		}
		else if (_element.equals("postBody"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, postBody)) return false;
		}
		else if (_element.equals("eventTime"))
		{
			Atf::AtfTempl<SrvTime>::FromXmlString(_value, eventTime);
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void HubFeedServerATF::cli::PostItemData::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(PostItemData())) // not empty
	{
		_body.composeINT32(postIcon);
		buttons.composeMsg(_body, _ignoreJSON);
		_body.composeString(postTitle);
		_body.composeString(postBody);
		_body.composeSrvTime(eventTime);
	}

	_msg.composeMsgBody(_body);
}

void HubFeedServerATF::cli::PostItemData::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(postIcon);
	buttons.parseMsg(_parser0);
	_parser0.parseStringP(postTitle);
	_parser0.parseStringP(postBody);
	_parser0.parseSrvTime(eventTime);
}

const char *HubFeedServerATF::cli::PostItemData::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("postIcon", postIcon);
	_jsonstr.compose("buttons", buttons);
	_jsonstr.compose("postTitle", postTitle);
	_jsonstr.compose("postBody", postBody);
	_jsonstr.compose("eventTime", eventTime);
	return _buf.c_str();
}

void HubFeedServerATF::cli::PostItemData::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("postIcon", postIcon);
	_jparser.parseByNameThrow("buttons", buttons);
	_jparser.parseByNameThrow("postTitle", postTitle);
	_jparser.parseByNameThrow("postBody", postBody);
	_jparser.parseByNameThrow("eventTime", eventTime);
}

/* static */ void HubFeedServerATF::cli::PostItemData::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 postIcon; _jparser.validateByNameThrow("postIcon", postIcon);
	AtfValidator::validateInt(_descr, "postIcon", postIcon, _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< ButtonInfo > buttons; _jparser.validateByNameThrow("buttons", buttons);
	AtfValidator::validateInt(_descr, "buttons", buttons.size(), _checker, __FILE__, __LINE__);
	PString postTitle; _jparser.validateByNameThrow("postTitle", postTitle);
	AtfValidator::validateInt(_descr, "postTitle", postTitle.length(), _checker, __FILE__, __LINE__);
	PString postBody; _jparser.validateByNameThrow("postBody", postBody);
	AtfValidator::validateInt(_descr, "postBody", postBody.length(), _checker, __FILE__, __LINE__);
	SrvTime eventTime; _jparser.validateByNameThrow("eventTime", eventTime);
	AtfValidator::validateSrvDateTime(_descr, "eventTime", eventTime, _checker, __FILE__, __LINE__);
}

/*static*/ void HubFeedServerATF::cli::PostItemData::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	INT32 postIcon; _parser0.parseINT32(postIcon);
	AtfValidator::validateInt(_descr, "postIcon", postIcon, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szButtons = Atf::LAtfVector< ButtonInfo, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("buttons"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "buttons", szButtons, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "postTitle"); size_t szPostTitle = strlen(_dummy);
	AtfValidator::validateInt(_descr, "postTitle", szPostTitle, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "postBody"); size_t szPostBody = strlen(_dummy);
	AtfValidator::validateInt(_descr, "postBody", szPostBody, _checker, __FILE__, __LINE__);
	SrvTime eventTime; _parser0.parseSrvTime(eventTime);
	AtfValidator::validateSrvDateTime(_descr, "eventTime", eventTime, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_HFS_Q_GET_FEED_ITEMS
//=================================================================

HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::Protocol_HFS_Q_GET_FEED_ITEMS()
{
	clear();
}

void HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::clear()
{
	numItems = 0;
}

bool HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::equals(const Protocol_HFS_Q_GET_FEED_ITEMS& _o) const
{
	return numItems == _o.numItems;
}

bool HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::equals(Atf::MessageProtocol* _other) const
{
	if (HFS_Q_GET_FEED_ITEMS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_HFS_Q_GET_FEED_ITEMS*)_other));
}

const char *HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(HFS_Q_GET_FEED_ITEMS).append(")");
	_buf.append(',');
	_buf.append("numItems=");
	_buf.appendInt(numItems);
	return _buf.c_str();
}

const char *HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(HFS_Q_GET_FEED_ITEMS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("numItems", numItems, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("numItems"))
			{
				numItems = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT32(numItems);
}

void HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(numItems);
}

const char *HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("numItems", numItems);
	return _buf.c_str();
}

void HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("numItems", numItems);
}

/*static*/ void HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "HFS_Q_GET_FEED_ITEMS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 numItems; _jparser.validateByNameThrow("numItems", numItems);
	AtfValidator::validateIntRange(_descr, "numItems", numItems, 0, 10000, _checker, __FILE__, __LINE__);
}

/*static*/ void HubFeedServerATF::cli::Protocol_HFS_Q_GET_FEED_ITEMS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "HFS_Q_GET_FEED_ITEMS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT32 numItems; _parser.parseINT32(numItems);
	AtfValidator::validateIntRange(_descr, "numItems", numItems, 0, 10000, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_HFS_A_GET_FEED_ITEMS
//=================================================================

HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::Protocol_HFS_A_GET_FEED_ITEMS()
{
	clear();
}

void HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::clear()
{
	feedItems.clear();
}

bool HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::equals(const Protocol_HFS_A_GET_FEED_ITEMS& _o) const
{
	return feedItems.equals(_o.feedItems);
}

bool HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::equals(Atf::MessageProtocol* _other) const
{
	if (HFS_A_GET_FEED_ITEMS != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_HFS_A_GET_FEED_ITEMS*)_other));
}

const char *HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(HFS_A_GET_FEED_ITEMS).append(")");
	_buf.append(',');
	_buf.append("feedItems=");
	feedItems.toTraceString(_buf);
	return _buf.c_str();
}

const char *HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(HFS_A_GET_FEED_ITEMS).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	feedItems.toXmlString("feedItems", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("feedItems"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< PostItemData, 4 > >::FromXmlString(_value, feedItems)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	feedItems.composeMsg(_msg, _ignoreJSON);
}

void HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::parseMsg(CommMsgParser& _parser)
{
	feedItems.parseMsg(_parser);
}

const char *HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("feedItems", feedItems);
	return _buf.c_str();
}

void HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("feedItems", feedItems);
}

/*static*/ void HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "HFS_A_GET_FEED_ITEMS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	Atf::AtfVectorBase< PostItemData > feedItems; _jparser.validateByNameThrow("feedItems", feedItems);
	AtfValidator::validateInt(_descr, "feedItems", feedItems.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void HubFeedServerATF::cli::Protocol_HFS_A_GET_FEED_ITEMS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "HFS_A_GET_FEED_ITEMS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szFeedItems = Atf::LAtfVector< PostItemData, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("feedItems"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "feedItems", szFeedItems, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE
//=================================================================

HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE()
{
	clear();
}

void HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::clear()
{
	templateId = 0;
	isPublished = false;
}

bool HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::equals(const Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE& _o) const
{
	return templateId == _o.templateId &&
		isPublished == _o.isPublished;
}

bool HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::equals(Atf::MessageProtocol* _other) const
{
	if (HFS_Q_ADMIN_TEMPLATE_UPDATE != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE*)_other));
}

const char *HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(HFS_Q_ADMIN_TEMPLATE_UPDATE).append(")");
	_buf.append(',');
	_buf.append("templateId=");
	_buf.appendUint(templateId);
	_buf.append(',');
	_buf.append("isPublished=");
	_buf.appendUint(isPublished);
	return _buf.c_str();
}

const char *HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(HFS_Q_ADMIN_TEMPLATE_UPDATE).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("templateId", templateId, _buf);
	Atf::XmlElement::encodeAsXmlElement("isPublished", isPublished, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("templateId"))
			{
				templateId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("isPublished"))
			{
				isPublished = (*_value.ptr() == '1');
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(templateId);
	_msg.composeBOOL(isPublished);
}

void HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(templateId);
	_parser.parseBOOL(isPublished);
}

const char *HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("templateId", templateId);
	_jsonstr.compose("isPublished", isPublished);
	return _buf.c_str();
}

void HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("templateId", templateId);
	_jparser.parseByNameThrow("isPublished", isPublished);
}

/*static*/ void HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "HFS_Q_ADMIN_TEMPLATE_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 templateId; _jparser.validateByNameThrow("templateId", templateId);
	AtfValidator::validateInt(_descr, "templateId", templateId, _checker, __FILE__, __LINE__);
	bool isPublished; _jparser.validateByNameThrow("isPublished", isPublished);
	AtfValidator::validateInt(_descr, "isPublished", isPublished, _checker, __FILE__, __LINE__);
}

/*static*/ void HubFeedServerATF::cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "HFS_Q_ADMIN_TEMPLATE_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 templateId; _parser.parseUINT32(templateId);
	AtfValidator::validateInt(_descr, "templateId", templateId, _checker, __FILE__, __LINE__);
	bool isPublished; _parser.parseBOOL(isPublished);
	AtfValidator::validateInt(_descr, "isPublished", isPublished, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE
//=================================================================

HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE()
{
	clear();
}

void HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::clear()
{
}

bool HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::equals(const Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE& _o) const
{
	return true;
}

bool HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::equals(Atf::MessageProtocol* _other) const
{
	if (HFS_A_ADMIN_TEMPLATE_UPDATE != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE*)_other));
}

const char *HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(HFS_A_ADMIN_TEMPLATE_UPDATE).append(")");
	return _buf.c_str();
}

const char *HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(HFS_A_ADMIN_TEMPLATE_UPDATE).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
}

void HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::parseMsg(CommMsgParser& _parser)
{
}

const char *HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	return _buf.c_str();
}

void HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
}

/*static*/ void HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "HFS_A_ADMIN_TEMPLATE_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
}

/*static*/ void HubFeedServerATF::cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "HFS_A_ADMIN_TEMPLATE_UPDATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ Atf::MessageProtocol* HubFeedServerATF::ProtocolFactory::createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId)
{
	Atf::MessageProtocol *_obj = NULL;

	if(!strcmp(_nameSpace, "cli"))
	{
		switch(_msgId)
		{
			case HFS_A_ADMIN_TEMPLATE_UPDATE: _obj = new cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE(); break;
			case HFS_A_GET_FEED_ITEMS: _obj = new cli::Protocol_HFS_A_GET_FEED_ITEMS(); break;
			case HFS_Q_ADMIN_TEMPLATE_UPDATE: _obj = new cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE(); break;
			case HFS_Q_GET_FEED_ITEMS: _obj = new cli::Protocol_HFS_Q_GET_FEED_ITEMS(); break;
		}
	}
	
	return _obj;
}

/* static */ bool HubFeedServerATF::ProtocolFactory::validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "cli"))
	{
		switch(_msgId)
		{
			case HFS_A_ADMIN_TEMPLATE_UPDATE: cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case HFS_A_GET_FEED_ITEMS: cli::Protocol_HFS_A_GET_FEED_ITEMS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case HFS_Q_ADMIN_TEMPLATE_UPDATE: cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case HFS_Q_GET_FEED_ITEMS: cli::Protocol_HFS_Q_GET_FEED_ITEMS::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

/* static */ bool HubFeedServerATF::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "cli"))
	{
		switch(_msgId)
		{
			case HFS_A_ADMIN_TEMPLATE_UPDATE: cli::Protocol_HFS_A_ADMIN_TEMPLATE_UPDATE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case HFS_A_GET_FEED_ITEMS: cli::Protocol_HFS_A_GET_FEED_ITEMS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case HFS_Q_ADMIN_TEMPLATE_UPDATE: cli::Protocol_HFS_Q_ADMIN_TEMPLATE_UPDATE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case HFS_Q_GET_FEED_ITEMS: cli::Protocol_HFS_Q_GET_FEED_ITEMS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

