/**
 * zoomreplay_atf_thin.h
 *
 * This file was auto-generated from zoomreplay_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin zoomreplay_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_ZOOMREPLAY_ATF_THIN_H
#define ATF_PROTOCOL_DEFFILE_ZOOMREPLAY_ATF_THIN_H

#include "table.h"
#include "sites.h"
#include "ThinAtfUserDefStructs.h"
#include "Common_atf_thin.h"


namespace ZoomReplay
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	namespace cli
	{
		struct Protocol_MSG_TABLE_LOGIN
		{
			// s4bbb - user,clientSiteId,notShowWhenAllIn,sitOutNextHand,useAllInitStacks
			PString user;
			UINT32 clientSiteId;
			bool notShowWhenAllIn;
			bool sitOutNextHand;
			bool useAllInitStacks;

			Protocol_MSG_TABLE_LOGIN();
			void clear();
			bool equals(const Protocol_MSG_TABLE_LOGIN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_TABLE_LOGIN; }
			static const char *getMsgIdString() { return "MSG_TABLE_LOGIN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_LOGIN(Protocol_MSG_TABLE_LOGIN&&);
			Protocol_MSG_TABLE_LOGIN& operator=(Protocol_MSG_TABLE_LOGIN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_LOGIN(const Protocol_MSG_TABLE_LOGIN&) = default;
			Protocol_MSG_TABLE_LOGIN& operator=(const Protocol_MSG_TABLE_LOGIN&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_LOGIN_REPLY
		{
			// 1s11s4M()1222bbb2 - errCode,errStr,seat,sittingOut,clientIP,privilege,M(),autoRebuyOptions,autoRebuyBigBets,autoRebuyFallUnderBigBets,autoRebuyFallUnderPercents,playerRITFavored,campingPreventionEnabled,isTableDealingHands,campingCountingDownSec
			BYTE errCode;
			PString errStr;
			INT8 seat;
			BYTE sittingOut;
			PString clientIP;
			UINT32 privilege;
			ThinAtf::CopyableMsgBody clientMsg_txtEx;
			INT8 autoRebuyOptions;
			UINT16 autoRebuyBigBets;
			UINT16 autoRebuyFallUnderBigBets;
			UINT16 autoRebuyFallUnderPercents;
			bool playerRITFavored;
			bool campingPreventionEnabled;
			bool isTableDealingHands;
			UINT16 campingCountingDownSec;

			Protocol_MSG_TABLE_LOGIN_REPLY();
			void clear();
			bool equals(const Protocol_MSG_TABLE_LOGIN_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_TABLE_LOGIN_REPLY; }
			static const char *getMsgIdString() { return "MSG_TABLE_LOGIN_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_LOGIN_REPLY(Protocol_MSG_TABLE_LOGIN_REPLY&&);
			Protocol_MSG_TABLE_LOGIN_REPLY& operator=(Protocol_MSG_TABLE_LOGIN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_LOGIN_REPLY(const Protocol_MSG_TABLE_LOGIN_REPLY&) = default;
			Protocol_MSG_TABLE_LOGIN_REPLY& operator=(const Protocol_MSG_TABLE_LOGIN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_LOGOUT
		{
			// dummy message

			Protocol_MSG_TABLE_LOGOUT();
			void clear();
			bool equals(const Protocol_MSG_TABLE_LOGOUT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_TABLE_LOGOUT; }
			static const char *getMsgIdString() { return "MSG_TABLE_LOGOUT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_TABLE_LOGOUT_REPLY
		{
			// 1s - errCode,errStr
			BYTE errCode;
			PString errStr;

			Protocol_MSG_TABLE_LOGOUT_REPLY();
			void clear();
			bool equals(const Protocol_MSG_TABLE_LOGOUT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_TABLE_LOGOUT_REPLY; }
			static const char *getMsgIdString() { return "MSG_TABLE_LOGOUT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_LOGOUT_REPLY(Protocol_MSG_TABLE_LOGOUT_REPLY&&);
			Protocol_MSG_TABLE_LOGOUT_REPLY& operator=(Protocol_MSG_TABLE_LOGOUT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_LOGOUT_REPLY(const Protocol_MSG_TABLE_LOGOUT_REPLY&) = default;
			Protocol_MSG_TABLE_LOGOUT_REPLY& operator=(const Protocol_MSG_TABLE_LOGOUT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_CHAT2
		{
			// s - chat
			PString chat;

			Protocol_MSG_TABLE_CHAT2();
			void clear();
			bool equals(const Protocol_MSG_TABLE_CHAT2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_TABLE_CHAT2; }
			static const char *getMsgIdString() { return "MSG_TABLE_CHAT2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_CHAT2(Protocol_MSG_TABLE_CHAT2&&);
			Protocol_MSG_TABLE_CHAT2& operator=(Protocol_MSG_TABLE_CHAT2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_CHAT2(const Protocol_MSG_TABLE_CHAT2&) = default;
			Protocol_MSG_TABLE_CHAT2& operator=(const Protocol_MSG_TABLE_CHAT2&) = default;
#endif
#endif
		};

		struct Protocol_MSG_TABLE_CHAT2_REPLY
		{
			// 2M()s - errCode,M(),chatMsg
			UINT16 errCode;
			ThinAtf::CopyableMsgBody errMsgBody;
			PString chatMsg;

			Protocol_MSG_TABLE_CHAT2_REPLY();
			void clear();
			bool equals(const Protocol_MSG_TABLE_CHAT2_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_TABLE_CHAT2_REPLY; }
			static const char *getMsgIdString() { return "MSG_TABLE_CHAT2_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_TABLE_CHAT2_REPLY(Protocol_MSG_TABLE_CHAT2_REPLY&&);
			Protocol_MSG_TABLE_CHAT2_REPLY& operator=(Protocol_MSG_TABLE_CHAT2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_TABLE_CHAT2_REPLY(const Protocol_MSG_TABLE_CHAT2_REPLY&) = default;
			Protocol_MSG_TABLE_CHAT2_REPLY& operator=(const Protocol_MSG_TABLE_CHAT2_REPLY&) = default;
#endif
#endif
		};
	};
};

#endif
