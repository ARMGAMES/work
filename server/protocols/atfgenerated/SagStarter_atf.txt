#include "SagStarterCommon_atf${ATF_THIN_FILENAME_SUFFIX}.h"
		
#define TOP_LEVEL_NAMESPACE SagStarter${ATF_THIN_NAMESPACE_SUFFIX}

namespace cli
{
	Message MSG_SAG_TOURN_REG_INFO_BY_SCRIPTID   // alternative message exists in sagStarterProtocols.txt (for LobbyEtc->SagStarter communication)
	{
		UINT32 scriptId;
		BYTE numGames min 0 max ATF_SAG_MAX_REG_GAMES; // 0 is treated the same as 1 on the server side. 0 might still be sent by client
		UINT32 tournRegInfoFlags parseEndOptB4Me;              // PYR-51083
		BYTE variantId min 0 max 1 parseEndOptB4Me default esvBase; //PYR-111939
	};

	Message MSG_SAG_REGISTER_TOURNAMENT_USER_BY_SCRIPTID // alternative message exists in sagStarterProtocols.txt (for LobbyEtc->SagStarter communication)
	{
		common::RegisterWithScriptId ri;
		BYTE variantId min 0 max 1 parseEndOptB4Me default esvBase;  //PYR-111939
	};
	
	Struct UserTicketDataATF
	{
		PString admissionId;
		UINT32 totalCount;
		UINT32 reserved;
	};
	
	Message MSG_LOBBY_TOURN_REG_INFO_REPLY
	{
		INT16 errCode;
		
		if( errCode != DBM_NO_ERROR )
		{
			PString errMsg;
		}
		else
		{
			UINT32 buyin;
			UINT32 rake;
			UINT32 fppBuyin;
			PString admission;
			BYTE pm;
			BYTE pwd;
			UINT32 chips;
			UINT32 playChips32;
			UINT32 fpp;
			UINT32 tickets;
			UINT32 tchips;
			UINT32 notused;
			PString preRegistrMessage;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			PString currency;
			bool enoughMoneyInOtherCurrency;
			CommMsgBody currencyContext;
			CommMsgBody clientCurrencyContext;
			SrvTime whenStartAbs;
			PString name;
			UINT64 playChips;
			UINT32 scalePM;
			BYTE speedDisplay; 
			UINT32 minPlayers;
			UINT32 maxPlayers;
			BYTE maxPerTable;
			UINT32 tournFlags;
			UINT32 knockout;
			bool boolValue;
			INT64 admissionPrice;
			vector<UserTicketDataATF> effectiveAdmissions;
			UINT64 tournFlags2;
		}
	};
	
	MsgBodyStruct WhereIsBodyATF
	{
		UINT32  tournamentId;
		PString  serverName;
		PString  serverObjectName;
		UINT32  clubId;
		UINT32  tournFlags;
		bool  isAvail;
		BYTE game;
		BYTE isHiLo;
		BYTE structure;
		BYTE speedDisplay;
		BYTE isPlayMoney;
		PString currency;
		UINT32 buyIn;
		UINT32 rake;
		INT32 scalePM;
		UINT32 knockout;
		UINT32 minPlayers;
		UINT32 maxPlayers;
		UINT32 maxPerTable;
		bool awardSchemaProportional;
		SrvTime  whenStartAbs;
		UINT32 whenStartAbsInt;
		UINT32 fppBuyIn;
		UINT32 tournMask;
		UINT32 tournMask2;
		UINT32 tournMask3;
		UINT32 tournMask4;
		PString admission;
		INT64 admissionPrice;
		INT64 tournFlags2;
	};
	
	Message MSG_SAG_REGISTER_TOURNAMENT_USER_REPLY
	{
		INT16 errCode;
		PString errMsg;
		
		if( errCode == DBM_NO_ERROR )
		{
			INT16 allInOption;
			PString locale;
			UINT32 tournId;
			bool seatAvail;
			PString serverName;
			PString socialToken;
			WhereIsBodyATF whereIsBody;
			PString aamsTicket;
			PString clientNotification;
		}
	};

	MsgBodyStruct SagWinnerInfo 
	{
		PString userId;
		UINT32 payoutTicketTypeId;
		UINT32 userImageId;
		INT32 award;
		PString targetRef;
		I18nPString targetName; // for client to be able to use default template
		PString ticketName; // for client to be able to use default template

	};

	Struct SagDataExCli
	{
        bool active;
        INT32 visibilityMask32;
        INT32 buyIn;
        INT32 rake;
        INT32 currency;
        INT32 scalePM;
        BYTE game;
        BYTE isHiLo;
        BYTE structure;
        BYTE speed;
        SrvTime finished;
        INT32 levelMark;
        vector<SagWinnerInfo> winners;
		PSiteMask visibilityMask;

	};
};

namespace srv
{
	MsgBodyStruct SagTournFinishInfo
	{
		UINT32 tournId;
		SrvTime finished;
		INT32 buyIn;
		INT32 rake;
		vector<cli::SagWinnerInfo> winners;
	};
};
