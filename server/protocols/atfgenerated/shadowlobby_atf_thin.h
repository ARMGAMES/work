/**
 * shadowlobby_atf_thin.h
 *
 * This file was auto-generated from shadowlobby_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin shadowlobby_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_SHADOWLOBBY_ATF_THIN_H
#define ATF_PROTOCOL_DEFFILE_SHADOWLOBBY_ATF_THIN_H

#include "ThinAtfUserDefStructs.h"
#include "AtfCountryVisibilityFilter.h"
#include "../storm/TableClientProtocols_thin.h"


namespace ShadowLobby
{
	namespace publication
	{
		struct TableType2
		{
			//! 444b4<s>b1111s444444144444<4>bb <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>bm8 - tableTypeId,siteVisibilityMask,brandVisibilityMask,invertCountryFilter,numCountryFilter<countryFilter>,quickLobbyVisible,game,structure,isHiLo,isPlayMoney,currency,loBet,hiBet,cap,ante,minChipsLimit,maxBuyIn,playerPerTable,scalePM,defaultBuyIn,seatFinderId,poolBlockMinHands,numPoolBlockTimePenalty<poolBlockTimePenalty>,passwordProtected,morphLobby, <FIXME>tableStakes</FIXME> ,numVariableAntes<variableAntes>,isHybridSingle,siteVisibilityMaskEx,tableFlags2
			UINT32 tableTypeId;
			UINT32 siteVisibilityMask;
			UINT32 brandVisibilityMask;
			bool invertCountryFilter;
			ThinAtf::LAtfVector< PString , 4 > countryFilter;
			bool quickLobbyVisible;
			BYTE game;
			BYTE structure;
			BYTE isHiLo;
			BYTE isPlayMoney;
			PString currency;
			UINT32 loBet;
			UINT32 hiBet;
			UINT32 cap;
			UINT32 ante;
			UINT32 minChipsLimit;
			UINT32 maxBuyIn;
			BYTE playerPerTable;
			UINT32 scalePM;
			UINT32 defaultBuyIn;
			UINT32 seatFinderId;
			INT32 poolBlockMinHands;
			ThinAtf::LAtfVector< INT32 , 4 > poolBlockTimePenalty;
			bool passwordProtected;
			bool morphLobby;
			TableCommonThin::TableStakes tableStakes;
			ThinAtf::LAtfVector< INT64 , 4 > variableAntes;
			bool isHybridSingle;
			PSiteMask siteVisibilityMaskEx;
			UINT64 tableFlags2;

			TableType2();
			void clear();
			bool equals(const TableType2&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableType2(TableType2&&);
			TableType2& operator=(TableType2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableType2(const TableType2&) = default;
			TableType2& operator=(const TableType2&) = default;
#endif
#endif
		};

		struct TableSubscr_Static	// Path { 0, n, 0 }
		{
			//! 4sss411111441s42s444 <FIXME>CommonThin::AtfShared::LegacyCountryVisibilityFilter</FIXME> 4114b8444844s <FIXME>TableCommonThin::TableStakes</FIXME> 4<8>m - _obsolete_1,name,server,serverObject,tableFlags,isOneOnOne,isPlayMoney,playerPerTable,game,isHiLo,_obsolete_2,_obsolete_3,structure,typeName,_obsolete_4,chatLang,currency,minChipsLimit,maxBuyIn,_obsolete_5, <FIXME>countryFilter</FIXME> ,cap,iconIndex,filterIndex,tableInstanceFlag,_obsolete_6,tableFlags2,tableTypeId,scalePM,defaultBuyIn,tableId,brandVisibilityMask,_obsolete_7,criteria, <FIXME>tableStakes</FIXME> ,numVarAnte<varAnte>,siteVisibilityMask
			UINT32 _obsolete_1;
			PString name;
			PString server;
			PString serverObject;
			UINT32 tableFlags;
			BYTE isOneOnOne;
			BYTE isPlayMoney;
			BYTE playerPerTable;
			BYTE game;
			BYTE isHiLo;
			UINT32 _obsolete_2;
			UINT32 _obsolete_3;
			BYTE structure;
			PString typeName;
			UINT32 _obsolete_4;
			UINT16 chatLang;
			PString currency;
			UINT32 minChipsLimit;
			UINT32 maxBuyIn;
			UINT32 _obsolete_5;
			CommonThin::AtfShared::LegacyCountryVisibilityFilter countryFilter;
			UINT32 cap;
			BYTE iconIndex;
			BYTE filterIndex;
			UINT32 tableInstanceFlag;
			bool _obsolete_6;
			UINT64 tableFlags2;
			UINT32 tableTypeId;
			UINT32 scalePM;
			UINT32 defaultBuyIn;
			UINT64 tableId;
			UINT32 brandVisibilityMask;
			INT32 _obsolete_7;
			PString criteria;
			TableCommonThin::TableStakes tableStakes;
			ThinAtf::LAtfVector< INT64 , 4 > varAnte;
			PSiteMask siteVisibilityMask;

			TableSubscr_Static();
			void clear();
			bool equals(const TableSubscr_Static&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSubscr_Static(TableSubscr_Static&&);
			TableSubscr_Static& operator=(TableSubscr_Static&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSubscr_Static(const TableSubscr_Static&) = default;
			TableSubscr_Static& operator=(const TableSubscr_Static&) = default;
#endif
#endif
		};

		struct TableSubscr_Status	// Path { 0, n, 1 }
		{
			//! 11142141 <FIXME>TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType</FIXME> b - players,waitingList,playersPerFlop,averagePot,handsPerHour,publPropFlag,averageStack,vpip, <FIXME>fppFactor</FIXME> ,active
			BYTE players;
			BYTE waitingList;
			BYTE playersPerFlop;
			UINT32 averagePot;
			UINT16 handsPerHour;
			BYTE publPropFlag;
			UINT32 averageStack;
			BYTE vpip;
			TableClientThin::publication::TableSubscr_Static::_HappyHourInfoPublMsgType fppFactor;
			bool active;

			TableSubscr_Status();
			void clear();
			bool equals(const TableSubscr_Status&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableSubscr_Status(TableSubscr_Status&&);
			TableSubscr_Status& operator=(TableSubscr_Status&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableSubscr_Status(const TableSubscr_Status&) = default;
			TableSubscr_Status& operator=(const TableSubscr_Status&) = default;
#endif
#endif
		};

		struct ReplaySubscr_Winner
		{
			// M(88b) - M(award,bounty,wasDealMode)
			INT64 award;
			INT64 bounty;
			bool wasDealMode;

			ReplaySubscr_Winner();
			void clear();
			bool equals(const ReplaySubscr_Winner&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ReplaySubscr_Static	// Path { 0, n, 0 }
		{
			// 4ssts1114s44444s444M(d8I4<M(88b)>)sb8884484ssm - tournamentId,server,serverObj,whenStart,name,game,isHiLo,structure,tournMask,info,siteVisibilityMask,whenStart_t,tournMask2,tournMask3,tournMask4,currency,tournMask5,tournMask6,brandVisibilityMask,M(origTournDate,finalPrizePool,origTournName,numWinners<M(award,bounty,wasDealMode)>),criteria,isPlayMoney,buyIn,rake,bounty,maxPlayers,tournFlags,tournFlags2,tournFlagsServInt,groupReference,pokerNgGroup,siteVisibilityMaskEx
			UINT32 tournamentId;
			PString server;
			PString serverObj;
			SrvTime whenStart;
			PString name;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			UINT32 tournMask;
			PString info;
			UINT32 siteVisibilityMask;
			UINT32 whenStart_t;
			UINT32 tournMask2;
			UINT32 tournMask3;
			UINT32 tournMask4;
			PString currency;
			UINT32 tournMask5;
			UINT32 tournMask6;
			UINT32 brandVisibilityMask;

			SrvDate origTournDate;
			INT64 finalPrizePool;
			I18nPString origTournName;
			ThinAtf::LAtfVector< ReplaySubscr_Winner, 4 > winners;

			PString criteria;
			bool isPlayMoney;
			INT64 buyIn;
			INT64 rake;
			INT64 bounty;
			INT32 maxPlayers;
			UINT32 tournFlags;
			UINT64 tournFlags2;
			UINT32 tournFlagsServInt;
			PString groupReference;
			PString pokerNgGroup;
			PSiteMask siteVisibilityMaskEx;

			ReplaySubscr_Static();
			void clear();
			bool equals(const ReplaySubscr_Static&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ReplaySubscr_Static(ReplaySubscr_Static&&);
			ReplaySubscr_Static& operator=(ReplaySubscr_Static&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ReplaySubscr_Static(const ReplaySubscr_Static&) = default;
			ReplaySubscr_Static& operator=(const ReplaySubscr_Static&) = default;
#endif
#endif

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ReplaySubscr_Status	// Path { 0, n, 1 }
		{
			// 4 - status
			UINT32 status;

			ReplaySubscr_Status();
			void clear();
			bool equals(const ReplaySubscr_Status&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
	};
};

#endif
