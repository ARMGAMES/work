// From protocols/atfgenerated folder call
// perl.exe ../../atf/genprot.pl CashierServer_atf.txt
// and
// perl.exe ../../atf/genprot.pl -genMoveConstructor -thin CashierServer_atf.txt

#include "cashier.h"
#include "dbm.h"
#include "lobby.h"
#include "commonmacros.h"
#include "Common_atf${ATF_THIN_FILENAME_SUFFIX}.h"

#define TOP_LEVEL_NAMESPACE CashierServer

//////////////////////////////////// COMMON STRUCTS ////////////////////////////
namespace common_structs
{
	struct SetUserRollStatus
	{
		UINT32 userRollId; // no limit
		INT32 curStatus min eUserRollStatus_Undefined max eUserRollStatus_Last; // enum eUserRollStatus
		INT32 action enum {eUserRollAction_AcceptIssued, eUserRollAction_Void, eUserRollAction_Surrender, eUserRollAction_Pause, eUserRollAction_Resume };
	};
	
	struct SetUserRollStatusReply
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	struct SetGameTicketStatus
	{
		UINT64 gameTicketId; // no limit
		INT32 curStatus min eGameTicketStatus_Issued max eGameTicketStatus_Last;
		INT32 action enum { eGameTicketAction_Accept, eGameTicketAction_Reject, eGameTicketAction_Void }; // eGameTicketAction
	};
	
	struct SetGameTicketStatusReply
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	MsgBodyStruct CashierRollBody // reply only
	{
		//if (rollId)
		//{
			UINT32 rollId parseEndOptB4Me;
			INT32 rollAmount;
			PString bonusCurrency;
			INT32 rollAmountInAcctCur;
			PString acctCurrency;
			INT32 cashPriceInAcctCur;
			PString acctCurrency2;
			UINT32 rollProducts;
			INT32 clearPointsInCentsRounded;
			INT32 clearBets;
			INT32 redemptionLimit;
			INT32 clearStakes;
		//}
	};
	
	struct PaysystemLimit
	{
		BYTE paySystemByte;
		PString paysystemName;
		INT32 minDeposit;
		INT32 maxCashinMonthly;
		INT32 maxCashinWeekly;
		INT32 maxCashinDaily;
		PString feeStr;
		PString empty;
		INT32 maxDeposits;
		INT32 depositsHours;
		PString userLimitText;
		INT32 maxCashin1Trans;
		bool fastDepositIsOk;
		UINT32 psAvailFlagToClient;
	};
	
	MsgBodyStruct TransactionHistoryCacheItem // PYR-79696
	{
		SrvTime whenAccountWasImpacted;
		PString typeDescr;
		INT32 transAcctAmount;
		UINT32 obsoleteSystemFee; // always 0
		PString cardMaskedOrReference;
		UINT32 transId;
		PString transBalanceCurrency; // normalized
		PString descriptor;
		INT32 transConverted;
		PString transCurrency;
		BYTE transCardTypeByte;
		PString referenceHint;
		UINT32 historyFlags; // eCashierHistoryFlags
	};
};
//////////////////////////////////// AUTHENTICATED CLIENT CONNECTION ////////////////////////////
namespace cli
{
	//--------------------------------------------- MSG_CASHIER_CHIPS_INFO2 (cli) ------------------------------------------
	Message MSG_CASHIER_CHIPS_INFO2 // 5283
	{
		PString userId maxlen USER_NAME_LEN;
		PString clientVersionInfo maxlen 1000 parseEndOptB4Me; // 1000 looks like a reasonable assumption
		UINT32 infoFlags default 0 /*min 0*/ max ((((UINT32)eCashierChipsInfoFlag_Last)<<1)-1) parseEndOptB4Me;
	};

	struct PhoneValidationInfo // reply only
	{
		BYTE result;
		PString contryPhoneCode;
		PString verifiedPhoneNumber;
		PString dialingInfo;
		PString phoneNumber;
	};

	MsgBodyStruct UserBalanceInfo // reply only
	{
		UINT32 balanceFlags;
		PString currency;
		INT32 availForSpending;
		INT32 unclearedForSpending;
		INT32 availForCashout;
		INT32 unclearedForCashout;
		INT32 owedChips;
		INT32 tChips;
		INT32 wChips;
		INT32 chips;
		INT32 markedForCashoutOnly;
		INT32 userRollsWalletAmount;
		INT32 fsbTotalBetsNumber;
		INT32 userRollsAllocAmount;
	};

	MsgBodyStruct UserFundsInfo // reply only
	{
		PString currency;
		INT32 amount;
	};

	MsgBodyStruct UserNonUsdCurrency // reply only
	{
		PString name;
	};

	struct CashierExtraInfo // reply only
	{
		INT32 type; // enum eCashierExtraInfoType from cashier.h
		if (type == eCashierExtraInfoType_Greek)
		{
			CommMsgBody
			{
				PString currency;
				INT64 greekDailyGameProfit;
				INT64 greekNotAvailForCashout;
			};
		}
		else if (type == eCashierExtraInfoType_UserHasCashoutHistory)
		{
			CommMsgBody
			{
				bool hasCashoutHistory;
			};
		}
	};

	Message MSG_CASHIER_CHIPS_INFO2_REPLY // 5284
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			CommMsgBody // userInfoBody
			{
				PString email; // from chipsInfo
				PString addr1;
				PString addr2;
				PString city;
				PString state;
				PString country;
				PString zipCode;
				PString fullName;
				SrvDate birthDate;
				
				CommMsgBody { PhoneValidationInfo homePhoneValidation; };
				
				PString firstName; // from chipsInfo
				PString onlyLastName;
				PString fiscalCode; // from chipsInfo
				
				vector<Common::AtfShared::UserPropertyBody> userProperties;
				
				PString sex; // from chipsInfo
				
				CommMsgBody { PhoneValidationInfo mobilePhoneValidation; };
				
				SrvTime registered;
			};
			
			UINT32 flags;
			UINT32 bitMask;
			BYTE realMoneyOk; // from chipsInfo
			INT32 vipStatus; // from chipsInfo
			INT32 playChips; // from chipsInfo
			INT32 allocPlayChips; // from chipsInfo
			INT32 fpWithCents;
			BYTE showBonusButton min 0 max 1;
			BYTE showBonusButton2 min 0 max 1;
			
			vector<UserBalanceInfo>    balances;
			vector<UserFundsInfo>      funds;
			vector<UserNonUsdCurrency> nonUsdCurrencies;
			
			PString defaultCurrencyForCountry;
			INT32 totalBalanceInPreferredCurrency;
			INT32 totalTBalanceInPreferredCurrency;
			BYTE fastDepositPaysystemByte;
			INT32 beProtectedFromGaming;
			INT32 beUnusedLossLimit;
			INT64 playChips2; // the same from chipsInfo
			INT64 allocPlayChips2; // the same from chipsInfo
			PString fulltiltUserId;
			INT32 ftCashoutMinLimit; // obsolete, left for backwards compat PYR-45667 PYR-25157
			
			vector<CashierExtraInfo> cashierExtraInfo;
			vector<common_structs::CashierRollBody> userRolls;
			
			INT32 totalForCashoutInPrefCur;
			UINT64 flags3; // from chipsInfo
			
			CommMsgBody
			{
				// FIXME: here should be nacData in case if license == Italy
			};
			
			INT64 totalBalanceInUsd;
		}
	};
	
	struct PaymentSpecificDataOne
	{
		// enum ePaymentSpecificData 
		UINT32 dataId enum {
			ePaymentSpecificData_Worldpay3DS2_ReferenceId, // PYR-80344
			ePaymentSpecificData_StarswalletMtan,          // PYR-51865
			ePaymentSpecificData_ApplePay,                 // PYR-36843
			ePaymentSpecificData_CbsUrl,                   // PYR-90717 PYR-117084
			ePaymentSpecificData_3dFormDone,               // PYR-80351
			ePaymentSpecificData_ClientCapability          // PYR-80352
		};
		if (dataId == ePaymentSpecificData_Worldpay3DS2_ReferenceId)
		{
			CommMsgBody
			{
				PString worldpay3DS2_referenceId maxlen 10000;
				PString worldpay3DS2_windowSize maxlen 10000;
			};
		}
		else if (dataId == ePaymentSpecificData_StarswalletMtan)
		{
			CommMsgBody
			{
				PString starswallet_mTan maxlen 10000;
			};
		}
		else if (dataId == ePaymentSpecificData_CbsUrl)
		{
			CommMsgBody
			{
				PString cbsUrl maxlen 10000;
				PString cbsUrl_wc2mt maxlen 10000 parseEndOptB4Me;
			};
		}
		else if (dataId == ePaymentSpecificData_ApplePay)
		{
			CommMsgBody
			{
				PString applePay_encrPaymentToken maxlen 10000;
			};
		}
		else if (dataId == ePaymentSpecificData_3dFormDone)
		{
			CommMsgBody
			{
				UINT32 childTransId;
			};
		}
		else if (dataId == ePaymentSpecificData_ClientCapability)
		{
			CommMsgBody
			{
				
				PString clientAcceptHeader maxlen 10000;
				PString clientJavaEnabled maxlen 10000;
				PString clientScreenColorDepth maxlen 10000;
				PString clientScreenHeight maxlen 10000;
				PString clientScreenWidth maxlen 10000;
				PString clientUserAgent maxlen 10000 parseEndOptB4Me;
				PString clientTzOffsetInMin maxlen 10000 parseEndOptB4Me;
				PString clientBrowserLocale maxlen 10000 parseEndOptB4Me; // ISO 639 language code. (3 char or 2 char)
				PString clientChallengeWinSize maxlen 10000 parseEndOptB4Me;
			};
		}
	};
	
	MsgBodyStruct PaymentSpecificDataVec
	{
		vector<PaymentSpecificDataOne> vec maxsize 1000;
	};
	
	//--------------------------------------------- MSG_CASHIER_CASHIN_CC (cli) ------------------------------------------
	Message MSG_CASHIER_CASHIN_CC // 5011
	{
		PString userId maxlen USER_NAME_LEN;
		INT32 amount min 0 max MAX_BANKROLL_SIZE;
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		PString cardNum maxlen CARDNUM_LEN;
		PString cardCvv maxlen CARD_CVV_LEN;
		UINT16 expYear min 0 max 3000;  // 0 can be specified if paysystem does not require an expiration date
		BYTE expMonth min 0 max 12;     // 0 can be specified if paysystem does not require an expiration date
		UINT32 bonusId; // no limit
		BYTE doNotCancelCashouts; // obsolete
		PString currency maxlen CURRENCY_LEN;
		PString issueNum maxlen ISSUE_NUM_LEN;
		PString startDate maxlen START_DATE_LEN;
		INT32 converted min 0 max MAX_BANKROLL_SIZE;
		PString secNum maxlen 1000; // SSN
		CommSrvDate bDate;
		PString dLicense maxlen 1000;
		PString userPhoneAch maxlen 1000;
		bool saveCardInfoRequested;
		PString bonusCode maxlen BONUS_CODE_LEN;
		PString balanceCurrency maxlen CURRENCY_LEN;
		INT32 clientBalance max MAX_BANKROLL_SIZE;
		bool fastDepositTransaction;
		bool saveInfoForFastDeposit;
		bool ignoreRepeatedDeclines;
		UINT32 cardInfoId; // no limit
		UINT32 awardId; // no limit
		UINT32 clientDepositFlags /*min 0*/ max ((((UINT32)eClientDepositFlags_Last)<<1)-1);
		
		if (paySystemByte == cardTypePayLucky || paySystemByte == cardTypeSightline || paySystemByte == cardTypeSightlineNR)
		{
			CommMsgBody
			{
				bool isLoadAmountProvided;
				INT32 loadAmount min 0 max MAX_BANKROLL_SIZE;
				PString geoIpInfo maxlen 10000;
			} parseEndOptB4Me;
		}
		else if (paySystemByte == cardTypeGamersCard)
		{
			CommMsgBody
			{
				PString depositPassword maxlen 10000;
			} parseEndOptB4Me;
		}
		else
		{
			CommMsgBody
			{
				// empty
			} parseEndOptB4Me;
		}
		
		PBlock encryptedCardNumAndCvv maxlen 4000 parseEndOptB4Me; //parseGuardEncryptedCardNumAndCvv
		PaymentSpecificDataVec paymentSpecificDataVec parseEndOptB4Me;
	};
	
	//--------------------------------------------- MSG_CASHIER_CASHIN_CC_CONFIRM (cli) ------------------------------------------
	// server to client
	Message MSG_CASHIER_CASHIN_CC_CONFIRM // 5012
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 transId;
			PString empty;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CASHIN_CC_COMPLETE (cli) ------------------------------------------
	struct CashinResultInfo // reply only
	{
		BYTE type;
		BYTE action;
		INT32 amount;
		PString reference;
		INT32 systemFee;
	};
	
	Message MSG_CASHIER_CASHIN_CC_COMPLETE // 5013, cashier->client
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
			BYTE cardTypeByte parseEndOptB4Me; // only for cases where (trans->cashierFlags & CashierCashTransaction::eRequestAlternativePaysystem) != 0
			UINT32 transId;
			bool dadEligible;
			PString errDescrForClient; // same as errDescr
			PString balanceCurrency;
		}
		else
		{
			UINT32 transId;
			BYTE transStatusForClient;
			INT32 totalAmount;
			vector<CashinResultInfo> resultInfos;
			UINT32 rejectExplanationCode;
			PString urlForUser;
			BYTE cardTypeByte;
			bool dadEligible;
			PString errorTemplateText;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CASHOUT (cli) ------------------------------------------
	Message MSG_CASHIER_CASHOUT // 5005
	{
		PString userId maxlen USER_NAME_LEN;
		INT32 amount min 0 max MAX_BANKROLL_SIZE;
		BYTE paySystem min cardTypeFirst max cardTypeLast;
		BYTE bonusAware max 1;
		PString userPhone maxlen 100;
		PString currency maxlen CURRENCY_LEN;
		INT32 convRate min 0 max std::numeric_limits<INT32>::max();
		PString balanceCurrency maxlen CURRENCY_LEN;
		PString reference maxlen 1000;
		INT32 clientBalance_ignored; // not used by server
		INT64 convRate64 min 0 max 1000000000000LL parseEndOptB4Me; // 10^12 (one trillion) equals to 100M base multiplied by 100K (so far Iranian Rial has the worst ratio - 20K to 1USD)
	};
	
	struct ResultInfos
	{
		BYTE type;
		BYTE action;
		INT32 amount;
		PString reference;
		INT32 systemFee;
	};
	
    // server to client
	Message MSG_CASHIER_CASHOUT_COMPLETE // 5008
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 transId;
			BYTE statusByte;
			INT32 returnedAmount;
			
			vector<ResultInfos> resultInfos;
			
			BYTE parentPaySystem;
			PString empty;
			PString balanceCurrency;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_HISTORY2 (cli) ------------------------------------------
	Message MSG_CASHIER_HISTORY2 // 5277
	{
		PString userId maxlen USER_NAME_LEN;
		UINT32 nLastDays max 400; // decreased from 10000 per EugeneK request
		UINT32 requestFlags /*min 0*/ max 1; // 0 = include trans amount in type, anything else - don't include (gui client uses 1)
	};
	
	MsgBodyStruct CashTransactionWithReferenceBody // reply only
	{
		PString typeDescr;
		INT32 transAcctAmount;
		UINT32 zero;
		PString cardMaskedOrReference;
		UINT32 transId;
		PString normalizedBalanceCurrency;
		PString descriptor;
		INT32 transConverted;
		PString transCurrency;
		BYTE cardTypeByte;
		PString referenceHint;
		UINT32 historyFlags;
	};
	
	Message MSG_CASHIER_HISTORY2_REPLY // 5278
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashTransactionWithReferenceBody> transactions;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_USER_BONUSHIST_NEW (cli) ------------------------------------------
	Message MSG_CASHIER_USER_BONUSHIST_NEW // 5105
	{
		PString userId maxlen USER_NAME_LEN;
	};
	
	MsgBodyStruct UserBonusBody // reply only
	{
		PString bonusName maxlen 1000;
		CommSrvTime when;
		UINT32 createdTransId;
		INT32 bonusAmount;
		INT32 fppToCollect;
		INT32 fppCollected;
		INT32 credited;
		UINT32 creditTransId;
		CommSrvTime expDate;
		PString currency;
		INT32 bonusInTickets;
		INT32 creditedTickets;
		UINT32 bonusClearedFlags;
	};
	
	Message MSG_CASHIER_USER_BONUSHIST_NEW_REPLY // 5106
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<UserBonusBody> bonuses;
			PString bonusDescr; // one long html formatted line for desktop client
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_PRE_CASHIN2 (cli) ------------------------------------------
	Message MSG_CASHIER_PRE_CASHIN2 // 5041
	{
		PString userId maxlen USER_NAME_LEN; // legacy, should not be used for authentication
		INT32 accountAmount min 0 max MAX_BANKROLL_SIZE;
		BYTE bytePaySystem min cardTypeFirst max cardTypeLast;
		PString processorCurrency maxlen CURRENCY_LEN;
		PString bonusCode maxlen 40; // was BONUS_CODE_LEN, but client can somehow send 27
		PString accountCurrency maxlen CURRENCY_LEN;
		CommMsgBody
		{
			UINT32 validationDigits;
			UINT32 validationAttempts;
		};
		INT32 processorAmount min 0 max MAX_BANKROLL_SIZE;
		bool nonZeroPaysystemFeeApplies;
		PString cardNum maxlen CARDNUM_LEN parseEndOptB4Me;
		PBlock encryptedCardNum maxlen 4000 parseEndOptB4Me;
	};
	
	MsgBodyStruct CashierTicketBody // reply only
	{
		PString admission;
		INT32 ticketsCount;
	};
	
	MsgBodyStruct CashierGatewayDisclaimerBodyOne // reply only
	{
		PString text;
	};
	
	MsgBodyStruct CashierGatewayDisclaimerBody // reply only
	{
		//if (conn.precashinGateway.length() > 0)
		//{
			PString header parseEndOptB4Me;
			PString text;
			vector<CashierGatewayDisclaimerBodyOne> buttons;
		//}
	};
	
	Message MSG_CASHIER_PRE_CASHIN2_REPLY // 5042
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			INT32 bestBonusAmount;
			INT32 bestBonusFppToEarn;
			INT32 availAmount;
			UINT32 bestBonusId;
			INT32 bestBonusPercent;
			INT32 bestBonusMaxAvailableAmount;
			PString bestBonusName;
			CommSrvTime bestBonusStart;
			CommSrvTime bestBonusEnd;
			PString bestBonusUrl;
			UINT32 zero;
			INT32 bestBonusReleasePortion;
			INT32 bestBonusFppReleasePortion;
			UINT32 bestBonusBonusFlags;
			UINT32 bestBonusMaxNumDepositsLeft;
			CommSrvTime bestBonusLastAllowedDepositTime;
			PString bestBonusCurrency;
			INT32 bestBonusDaysToDeposit;
			INT32 bestBonusMaxDepositNumber;
			INT32 acctAmount;
			bool beDepositExceedsLossLimit;
			CommMsgBody { vector<CashierTicketBody> ticketOnlyBonusBodies; };
			common_structs::CashierRollBody rollMsgBody;
			CashierGatewayDisclaimerBody disclaimerMsgBody;
		}
	};
	
	Message MSG_CASHIER_CASHIN_NT // 5034
	{
		PString userId maxlen USER_NAME_LEN;
		PString netAccount maxlen 1000; // trans cardnum
		PString secureId maxlen 1000;
		INT32 transAmount min 0 max MAX_BANKROLL_SIZE;
		UINT32 bonusId; // no limit
		BYTE doNotCancel_ignored; // not used by server
		PString bank_acct_num maxlen 1000;
		bool saveCardInfoRequested;
		PString bonusCode maxlen BONUS_CODE_LEN;
		PString currency maxlen CURRENCY_LEN;
		INT32 converted min 0 max MAX_BANKROLL_SIZE;
		PString balanceCurrency maxlen CURRENCY_LEN;
		INT32 clientBalance_ignored; // not used by server
		bool fastDepositTransaction;
		bool saveInfoForFastDeposit;
		bool ignoreRepeatedDeclines;
		UINT32 cardInfoId; // no limit
		UINT32 awardId; // no limit
		UINT32 clientDepositFlags /*min 0*/ max ((((UINT32)eClientDepositFlags_Last)<<1)-1);
	};
	
    // server to client
	Message MSG_CASHIER_CASHIN_NT_CONFIRM // 5035
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 transId;
		}
	};
	
	struct Cashier3DSecureRedirectionParams // reply only
	{
		PString first;
		PString second;
	};
	
	struct CashierCashinCompleteSpecificInfoBody // reply only
	{
		UINT32 type; // eCashinCompleteSpecificInfo_UnverifiedPayment
		
		if (type == eCashinCompleteSpecificInfo_UnverifiedPayment )
		{
			CommMsgBody
			{
				// empty
			};
		}
		else if (type == eCashinCompleteSpecificInfo_AdditionalText)
		{
			CommMsgBody
			{
				PString text;
			};
		}
	};
	
	Message MSG_CASHIER_CASHIN_NT_COMPLETE // 5036 (reply)
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 transId;
			BYTE transStatusByte;
			INT32 totalAmount;
			
			vector<ResultInfos> resultInfos;
			
			UINT32 rejectExplanationCode;
			PString errorInfo;
			PString ntUrl;
			PString ntUrlMsg;
			PString ntPhone;
			bool dadEligible;
			PString rejectMsg;
			// replyAfterErrorString
			PString transBalanceCurrency;
			INT32 transConverted;
			PString transCurrency;
			vector<Cashier3DSecureRedirectionParams> threeDSecureRedirectionParams;
		}
	};
	
	// doesn't have a reply
	Message MSG_CASHIER_CASHIN_CC_REDIRECTED // 5126
	{
		UINT32 transId; // no limit
		INT32 amount min 0 max MAX_BANKROLL_SIZE;
		INT32 isError min 0 max 1;
		PString errDescr maxlen 1000;
	};
	
	//--------------------------------------------- MSG_CASHIER_PRE_CASHOUT (cli) ------------------------------------------
	Message MSG_CASHIER_PRE_CASHOUT // 5045
	{
		PString userId maxlen USER_NAME_LEN;
		INT32 cashoutAmount min 0 max MAX_BANKROLL_SIZE;
		PString balanceCurrency maxlen 7; // should be CURRENCY_LEN. Seems to be some client bug due to UTF
		bool isForFTPkr;
		BYTE userRollbackOption default 0 parseEndOptB4Me; // PYR-85939, PYR-87069 - eUserRollbackOption - for Admin tool; Client should pass 0 as it's ignored by Cashier
	};
	
	struct CardRollback // reply only
	{
		PString cardType;
		PString cardMasked;
		INT32 amount;
	};
	
	MsgBodyStruct CardRollbackExtBody // reply only
	{
		PString cardType;
		PString cardMasked;
		INT32 amount;
		BYTE cardTypeByte;
		INT64 convRate64;
		PString cardCurrency;
		INT32 processorAmount;
		UINT32 cardId;
		UINT32 flagsForClient;
	};
	
	MsgBodyStruct CashoutOptionBody // reply only
	{
		BYTE cardTypeByte;
		CommSrvTime when;
		PString maskedReference;
		PString currCode;
		UINT32 convRate;
		bool isAllowed;
		INT32 limitAmount;
		PString explanation;
		PString psForCashoutI18n;
		INT64 coConvRate;
		PString additionalText;
		bool isTagged;
		UINT32 cardId;
		UINT32 coFlagsForClient;
	};
	
	Message MSG_CASHIER_PRE_CASHOUT_REPLY // 5046
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			BYTE needsBonusWarning;
			PString bonusName;
			PString bonusUrl;
			INT32 bonusPercent;
			INT32 bonusMaxAmount;
			INT32 estimatedRollback;
			INT16 zero;         // obsolete: lastCashins are ignored on client's side
			PString userPhone;  // obsolete: ignores since #7862
			INT16 zero2;        // obsolete functionality of composeCashoutOptions() always 0
			l2vector<CardRollback> rollbacks;
			vector<CashoutOptionBody> cashoutOptions;
			vector<CardRollbackExtBody> rollbacksExt;
			UINT32 preCashoutReplyFlags;
			
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_VIP_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_VIP_INFO // 5076
	{
		PString userId maxlen USER_NAME_LEN;
	};
	
	MsgBodyStruct VipLevelBody
	{
		INT32 statusId;
		INT32 type;
		INT32 minFpp;
		INT32 fppBonusRate;
		INT32 vipToKeepYearlyStatus;
		INT32 lastMonthForYearly;
		INT32 missableMonthsYearly;
	};
	
	struct StellarBonusLevel
	{
		UINT32 groupId;
		INT32 vppThreshold;
		INT32 amount;
	};
	
	Message MSG_CASHIER_VIP_INFO_REPLY // 5077
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 zero; // Is obsolete after Aug 9 '12 build
			INT32 lastMonthForYearlyOld; // TODO: obsolete after PYR-21602 is fixed for Sep '12 build and old Clients are no longer a concern.
			vector<StellarBonusLevel> stellarBonuses;
			INT32 previousYearVPP;
			UINT32 zero2; // milestoneBonusLevels, PYR-20663, not used by the Client
			INT32 dailyCnt;
			vector<VipLevelBody> vipLevelBodies;
			INT64 ltVppInCents;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SAVED_CARD (cli) ------------------------------------------
	Message MSG_CASHIER_SAVED_CARD // 5080
	{
		PString userId maxlen USER_NAME_LEN;
		PString paySystem minlen 1 maxlen 1000;
		UINT32 cardInfoId; // no limit
	};
	
	Message MSG_CASHIER_SAVED_CARD_REPLY // 5081
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 infoId;
			PString userId;
			PString paySystem;
			PString plainCardNumForOldClient;
			PString ssNumPlain;
			PString dLicensePlain;
			UINT16 expYear;
			BYTE expMonth;
			PBlock encryptedCardNum;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_DAD_REQUEST (cli) ------------------------------------------
	struct DadRequest
	{
		UINT32 requestType enum { eLiveSupportRequestChat, eLiveSupportRequestPhone, eLiveSupportRequestNone, eLiveSupportRequestEmail, eLiveSupportRequestIndirect }; // eLiveSupportRequestType
		PString userId maxlen USER_NAME_LEN;
		PString phoneToContact maxlen 100;
		PString timeToContact maxlen 1000;
		UINT32 transactionId; // no limit
	};
	
	Message MSG_CASHIER_DAD_REQUEST // 5092
	{
		DadRequest dadRequest;
	};
	
	Message MSG_CASHIER_DAD_REQUEST_REPLY // 5093 // same as MSG_CASHIER_FRMIGRATION_LIVESUPPORT_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 requestType;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_FRMIGRATION_LIVESUPPORT (cli) ------------------------------------------
	Message MSG_CASHIER_FRMIGRATION_LIVESUPPORT // 5358
	{
		DadRequest dadRequest;
	};
	
	Message MSG_CASHIER_FRMIGRATION_LIVESUPPORT_REPLY // 5359 // same as MSG_CASHIER_DAD_REQUEST_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 requestType;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_WIRE_REQUEST (cli) ------------------------------------------
	Message MSG_CASHIER_WIRE_REQUEST // 5101
	{
		PString userId maxlen USER_NAME_LEN;
		INT32 procAmount min 0 max MAX_BANKROLL_SIZE;
		PString currency_not; // ignored
		PString bonusCode maxlen BONUS_CODE_LEN;
		PString personalInfo maxlen 1000; //#7378 - fiscalNumber
	};
	
	Message MSG_CASHIER_WIRE_REQUEST_REPLY // 5102
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString paymentReference;
			PString accountHolder;
			PString bankName;
			PString city;
			PString swift;
			PString specialId;
			PString bankAcct;
			PString country;
			PString additionalRef;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_BPAY_REQUEST (cli) ------------------------------------------
	Message MSG_CASHIER_BPAY_REQUEST // 5195
	{
		PString userId maxlen USER_NAME_LEN;
		INT32 procAmount min 0 max MAX_BANKROLL_SIZE;
		PString currency_not maxlen CURRENCY_LEN;
		PString bonusCode maxlen BONUS_CODE_LEN;
		PString personalInfo maxlen 1000;
	};
	
	Message MSG_CASHIER_BPAY_REQUEST_REPLY // 5196
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString paymentReference;
			PString billerId;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_INIT_WIRECARD_DEPOSIT (cli) ------------------------------------------
	Message MSG_CASHIER_INIT_WIRECARD_DEPOSIT // 5305, PYR-11583
	{
		PString userId maxlen USER_NAME_LEN;
		INT32 amount min 0 max MAX_BANKROLL_SIZE;
		PString currency maxlen CURRENCY_LEN;
		PString bonusCode maxlen BONUS_CODE_LEN;
	};
	
	Message MSG_CASHIER_INIT_WIRECARD_DEPOSIT_REPLY // 5306
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString popUpText;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_AGE_CHECK_UK (cli) ------------------------------------------
	Message MSG_CASHIER_AGE_CHECK_UK // 5113
	{
		PString title maxlen 100;
		PString fullName maxlen USER_FULLNAME_LEN;
		PString gender maxlen /*GENDER_LEN*/ 6; // Can be up to 6 bytes for older clients ('Male', 'Female')
		CommSrvDate dateOfBirth;
		PString address maxlen USER_ADDR_LEN;
		PString city maxlen USER_CITY_LEN;
		PString zip maxlen USER_ZIP_LEN;
		PString state maxlen USER_STATE_LEN;
		PString country maxlen USER_COUNTRY_LEN;
		PString passportNumber1 maxlen 100;
		PString passportNumber2 maxlen 100;
		PString passportNumber3 maxlen 100;
		PString passportNumber4 maxlen 100;
		PString passportNumber5 maxlen 100;
		PString passportNumber6 maxlen 100;
		CommSrvDate passportExprireDate;
		PString driverNumber1 maxlen 100;
		PString driverNumber2 maxlen 100;
		PString driverNumber3 maxlen 100;
		PString driverNumber4 maxlen 100;
		PString driverpostcode maxlen 100;
		UINT32 attemptNumber /*min 0*/ max 1000;
	};
	
	Message MSG_CASHIER_AGE_CHECK_UK_REPLY // 5114
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_AGEVERIVICATION2 (cli) ------------------------------------------
	MsgBodyStruct AgeVerificationCommonBody // request only
	{
		INT32 title enum { eUserTitleNone, eUserTitleMr, eUserTitleMrs, eUserTitleMiss, eUserTitleMs, eUserTitleDr };
		PString fullName maxlen USER_FULLNAME_LEN;
		PString gender maxlen GENDER_LEN;
		CommSrvDate dateOfBirth;
		PString address maxlen USER_ADDR_LEN;
		PString city maxlen USER_CITY_LEN;
		PString zip maxlen USER_ZIP_LEN;
		PString state maxlen USER_STATE_LEN;
		PString country maxlen USER_COUNTRY_LEN;
		PString phone maxlen 100;
		PString firstName maxlen USER_FIRST_NAME_LEN;
		PString lastName maxlen USER_LAST_NAME_LEN;
	};
	
	MsgBodyStruct AgeVerificationPassportBody // request only, can be empty
	{
		PString passportNumber1 maxlen 100 parseEndOptB4Me;
		PString passportNumber2 maxlen 100 parseEndOptB4Me;
		PString passportNumber3 maxlen 100 parseEndOptB4Me;
		PString passportNumber4 maxlen 100 parseEndOptB4Me;
		PString passportNumber5 maxlen 100 parseEndOptB4Me;
		PString passportNumber6 maxlen 100 parseEndOptB4Me;
		CommSrvDate passportExprireDate parseEndOptB4Me;
	};
	
	MsgBodyStruct AgeVerificationDrivLicBody // request only, can be empty
	{
		PString driverLicenseCountry maxlen 100 parseEndOptB4Me;
		PString driverNumber1 maxlen 100 parseEndOptB4Me;
		PString driverNumber2 maxlen 100 parseEndOptB4Me;
		PString driverNumber3 maxlen 100 parseEndOptB4Me;
		PString driverNumber4 maxlen 100 parseEndOptB4Me;
	};
	
	Message MSG_CASHIER_AGEVERIVICATION2 // 5436
	{
		AgeVerificationCommonBody common;
		AgeVerificationPassportBody passport;
		AgeVerificationDrivLicBody drivLic;
	};
	
	MsgBodyStruct AgeVerificationDrivLicCountryBody // reply only
	{
		PString country;
	};
	
	Message MSG_CASHIER_AGEVERIVICATION2_REPLY // 5437
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr; // ignored in case of ERR_AGEVERIFICATION_NEEDS_DATA
		}
		else
		{
			vector<AgeVerificationDrivLicCountryBody> ageCheckDrivLicCountries parseEndOptB4Me; // for ERR_AGEVERIFICATION_NEEDS_DATA
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_AGEVERIVICATION2_CANCEL (cli) ------------------------------------------
	Message MSG_CASHIER_AGEVERIVICATION2_CANCEL // 5438
	{
		// empty
	};
	
	Message MSG_CASHIER_AGEVERIVICATION2_CANCEL_REPLY // 5439
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CHECK_PAYSYSTEM (cli) ------------------------------------------
	//--------------------------------------------- MSG_CASHIER_CHECK_PAYSYSTEM2 (cli) ------------------------------------------
	Message MSG_CASHIER_CHECK_PAYSYSTEM // 5127 (obsolete)
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		PString requestCurrency maxlen CURRENCY_LEN;
		UINT32 cardInfoId; // no limit
		BYTE notUsedNum1 parseEndOptB4Me; // added for older clients sending 5 extra bytes
		BYTE notUsedNum2 parseEndOptB4Me;
		BYTE notUsedNum3 parseEndOptB4Me;
		BYTE notUsedNum4 parseEndOptB4Me;
		BYTE notUsedNum5 parseEndOptB4Me;
	};
	
	MsgBodyStruct CashierAvailableCurrency // response only
	{
		PString currency;
		UINT64 depositRate64;
		UINT64 depositRate64Inverted;
	};
	
	MsgBodyStruct CashierFeeBody  // response only
	{
		INT32 graceDepositsPeriodDays;
		INT32 graceDeposits;
		INT32 leftGraceDeposits;
		INT32 calcRate_x_100K;
		INT32 calcMinFee;
		INT32 calcMaxFee;
		BYTE altPaysystemByte;
	};
	
	MsgBodyStruct CashierPredefinedButtonsBody  // response only
	{
		vector<INT32> roundedValidSuggestedAmounts;
		INT32 selectedInd;
	};
	
	MsgBodyStruct CashierOpenValueBody  // response only
	{
		bool openValue; // ???
		// fastDepositAmountInProcCur FIXME
	};
	
	MsgBodyStruct CashierDepositCurrencyBody // response only
	{
		PString processorCurr;
		CashierPredefinedButtonsBody predefinedButtons;
		CashierOpenValueBody openValue;
	};
	
	MsgBodyStruct CashierPrepopulatedCodeBody // response only
	{
		PString bonusCode;
	};
	
	struct CashierSubType // response only
	{
		PString productId;
		PString subTypeName;
		UINT32 logoImageId;
		vector<PString> currencies;
	};
	
	struct CashierUrlPair // response only
	{
		PString openAccountStr;
		PString signUpLink;
		UINT32 linkFlags;
	};
	
	struct CashierAgeVerifyOne // response only
	{
		UINT32 id_type;
		PString id_descr;
	};
	
	struct CashierPaysystemReply // 5128
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			BYTE paySystemByte;
			bool isAvailable;
			PString paysystemMessage;
			vector<CashierSubType> subTypes;
			vector<CashierUrlPair> urlPairs;
			bool ageVerifyNeeded;
			vector<CashierAgeVerifyOne> ageVerifications;
			UINT32 ageVerifyProcessorId;
			INT32 daysToClear;
			vector<CashierAvailableCurrency> availableCurrencies;
			bool bonusWithCodeExists;
			UINT32 validationFailuresThreshold;
			INT32 selfImposedLimit;
			INT32 allowedAmount;
			bool fastDepositIsOk;
			bool isItPs4AuthUser;
			CommMsgBody
			{
				INT32 maxCashinDaily;
				INT32 maxCashinWeekly;
				INT32 maxCashinMonthly;
			};
			bool paysystemFeeApplies;
			//if (paysystemFeeApplies == true)
			//{
			//	CashierFeeBody fee;
			//}
			INT32 cardNumLength;
			CommMsgBody // suggestedDepositBody
			{
				//INT32 numOfProcessorCurrencies;
				vector<CashierDepositCurrencyBody> depositAvailableCurrencies;
			};
			
			CommMsgBody // paysystemSpecificBody
			{
				// FIXME
			};
			
			vector<CashierPrepopulatedCodeBody> prepopulatedCodes;
		}
	};
	
	Message MSG_CASHIER_CHECK_PAYSYSTEM_REPLY // 5128
	{
		CashierPaysystemReply reply;
	};
	
	// NOTE: both currency and amount are optional
	// It is a known situation that fastDepositData body can be present, but empty
	MsgBodyStruct FastDepositDataBody // request, all members should have limits
	{
		PString currency maxlen 8 parseEndOptB4Me; // CURRENCY_LEN: client sends longer string, possibly due to UTF encoding
		INT32 amount min 0 max MAX_BANKROLL_SIZE parseEndOptB4Me;
	};
	
	Message MSG_CASHIER_CHECK_PAYSYSTEM2 // 5554
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		PString requestCurrency maxlen CURRENCY_LEN;
		UINT32 cardInfoId; // no limit
		FastDepositDataBody fastDepositData parseEndOptB4Me;
	};
	
	Message MSG_CASHIER_CHECK_PAYSYSTEM2_REPLY // 5555
	{
		CashierPaysystemReply reply;
	};
	
	//--------------------------------------------- MSG_CASHIER_CASHIN_HOSTED (cli) ------------------------------------------
	Message MSG_CASHIER_CASHIN_HOSTED // 5133
	{
		PString userId maxlen USER_NAME_LEN;
		INT32 amount min 0 max MAX_BANKROLL_SIZE;
		PString currency maxlen CURRENCY_LEN;
		INT32 converted min 0 max MAX_BANKROLL_SIZE;
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		PString productId maxlen PRODUCT_ID_LEN;
		UINT32 bonusId; // no limit
		PString bonusCode maxlen BONUS_CODE_LEN;
		BYTE doNotCancelCashouts; // obsolete
		PString balanceCurrency maxlen CURRENCY_LEN;
		INT32 clientBalance min 0 max MAX_BANKROLL_SIZE;  // #14701 for arjel
		PString cardNum maxlen CARDNUM_LEN;
		bool saveCardInfoRequested;
		bool fastDepositTransaction;
		bool saveInfoForFastDeposit;
		UINT32 cardInfoId; // PYR-24538 if !=0 then transaction was initiated with given saved cardinfo.infoid record // no limit
		UINT32 awardId;    // PYR-24840 if !=0 then transaction was initiated with promised upsell award // no limit
		UINT32 clientDepositFlags /*min 0*/ max ((((UINT32)eClientDepositFlags_Last)<<1)-1);
		PBlock encryptedCardNum maxlen 4000 parseEndOptB4Me;
		PaymentSpecificDataVec paymentSpecificDataVec parseEndOptB4Me;
	};
	
    // server to client
	Message MSG_CASHIER_CASHIN_HOSTED_REDIRECT // 5134
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString formMethod;
			PString formAction;
			UINT32 transId;
			PString xTransStr;
			BYTE cardTypeByte;
		}
	};
	
	Message MSG_CASHIER_HOSTED_DONE // 5135
	{
		PString userId maxlen USER_NAME_LEN;
		UINT32 transId; // no limit
		PString xTransStr maxlen 1000;
		bool isDone;
	};
	
	// FIXME: placing in a namespace doesn't seem to work
	/*namespace workarounds
	{
		Message MSG_CASHIER_HOSTED_DONE_REPLY // 5135 (the same as above, it's a 'well-known old feature')
		{
			INT16 errCode;
			if(errCode)
			{
				PString errDescr;
			}
			else
			{
				// empty
			}
		};
	};*/
	
	//--------------------------------------------- MSG_CASHIER_SUGGEST_PAYSYSTEMS (cli) ------------------------------------------
	Message MSG_CASHIER_SUGGEST_PAYSYSTEMS // 5313
	{
		BYTE paysystemRejectedByte min cardTypeFirst max cardTypeLast;
		UINT32 rejectedTransId; // no limit
	};
	
	MsgBodyStruct CashierSuggestedPaysystem // reply only
	{
		BYTE cardTypeByte;
		PString usedDescription;
	};
	
	Message MSG_CASHIER_SUGGEST_PAYSYSTEMS_REPLY // 5314
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else 
		{
			vector<CashierSuggestedPaysystem> suggestions;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_RECENT_SUCCESSFUL_DEPOSITS (cli) ------------------------------------------
	Message MSG_CASHIER_GET_RECENT_SUCCESSFUL_DEPOSITS // 5613, PYR-62719
	{
		// empty
	};
	
	MsgBodyStruct CashierRecentDepositBody // reply only
	{
		BYTE paysystemByte;
		UINT32 transId;
		PString maskedCardNum;
		SrvTime started;
		SrvTime completed;
		INT32 fxAmount;
		PString fxCurrency;
		INT32 converted;
		PString currency;
	};
	
	Message MSG_CASHIER_GET_RECENT_SUCCESSFUL_DEPOSITS_REPLY // 5614
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashierRecentDepositBody> deposits;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_RESCUE_PAYSYSTEMS (cli) ------------------------------------------
	Message MSG_CASHIER_GET_RESCUE_PAYSYSTEMS // 5616
	{
		// empty
	};
	
	MsgBodyStruct CashierRescuePaysystem // reply only
	{
		BYTE paysystemByte;
		UINT32 flags max ((((UINT32)eRescuePaysystemFlags_Last)<<1)-1); // enum eRescuePaysystemFlags
	};
	
	Message MSG_CASHIER_GET_RESCUE_PAYSYSTEMS_REPLY // 5617
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashierRescuePaysystem> paysystems;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_VERIFY_AGE (cli) ------------------------------------------
	Message MSG_CASHIER_VERIFY_AGE // 5138
	{
		UINT32 clientReqId;  // no limit
		PString userId maxlen USER_NAME_LEN;
		PString fullName maxlen USER_FULLNAME_LEN;
		PString gender maxlen GENDER_LEN;
		CommSrvDate dateOfBirth;
		PString phone maxlen 100;
		PString address maxlen USER_ADDR_LEN;
		PString city maxlen USER_CITY_LEN;
		PString zip maxlen USER_ZIP_LEN;
		PString county maxlen COUNTY_LEN;
		PString state maxlen USER_STATE_LEN;
		PString country maxlen USER_COUNTRY_LEN;
		PString SSN4 maxlen SSN_4_LEN;
		UINT32 idType min eAgeVerificationPersonalIdTypeNone max eAgeVerificationPersonalIdTypeTravelDocument; // enum eAgeVerificationPersonalIdType, NOTE: max is 8, values 5,6,7 do not exist now
		PString id maxlen 100;
		UINT32 contextAttemptNumber /*min 0*/ max 1000;
		UINT32 requestPurpose enum { eAristotleRequestForAgeVerification, eAristotleRequestForAuthentication, eAristotleRequestForScreening };
	};
	
	Message MSG_CASHIER_VERIFY_AGE_REPLY // 5139
	{
		INT16 errCode;
		PString errDescr;
		UINT32 resultId;
	};
	
	//--------------------------------------------- MSG_CASHIER_PAYSYSTEMS_AVAIL (cli) ------------------------------------------
	Message MSG_CASHIER_PAYSYSTEMS_AVAIL // 5149
	{
		PString currency maxlen CURRENCY_LEN;
	};
	
	MsgBodyStruct PaysystemLimitBody
	{
		common_structs::PaysystemLimit limit;
	};
	
	Message MSG_CASHIER_PAYSYSTEMS_AVAIL_REPLY // 5150
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<PaysystemLimitBody> limits;
			bool dadPreDepositAvailable;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_PAYSYSTEMS_AVAIL_PM (cli) ------------------------------------------
	Message MSG_CASHIER_PAYSYSTEMS_AVAIL_PM // 5493
	{
		// empty
	};
	
	MsgBodyStruct CashierPaySystemLimitExBody
	{
		BYTE paySystemByte;
		PaysystemLimitBody cashinLimit;
		bool fastDepositIsOk;
		UINT32 psAvailFlagToClient;
	};
	
	Message MSG_CASHIER_PAYSYSTEMS_AVAIL_PM_REPLY // 5494
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashierPaySystemLimitExBody> limits;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_PAYSYSTEMS_AVAIL_PROMO (cli) ------------------------------------------
	Message MSG_CASHIER_PAYSYSTEMS_AVAIL_PROMO // 5389
	{
		PString currency maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_PAYSYSTEMS_AVAIL_PROMO_REPLY // 5390
	{
		BYTE pssNum;
		PString header;
		PString body;
		PString footer;
	};
	
	MsgBodyStruct WireHolderBody
	{
		PString fullName maxlen WIREACCOUNTS_HOLDERNAME_LEN;
		PString phone maxlen WIREACCOUNTS_PHONE_LEN;
		PString address maxlen WIREACCOUNTS_ADDR_LEN;
		PString city maxlen WIREACCOUNTS_CITY_LEN;
		PString state maxlen WIREACCOUNTS_STATE_LEN;
		PString zip maxlen WIREACCOUNTS_ZIPCODE_LEN;
		PString countryCode maxlen WIREACCOUNTS_COUNTRY_LEN;
	};
	
	MsgBodyStruct WireBankInfoBody
	{
		PString userAccount maxlen 100; // content is context specific: might be crypted, might be plain
		PString currencyCode maxlen WIREACCOUNTS_CURRENCY_LEN;
		PString iban maxlen WIREACCOUNTS_IBAN_LEN;
		PString swiftCode maxlen WIREACCOUNTS_SWIFTCODE_LEN;
		PString bankName maxlen WIREACCOUNTS_BANKNAME_LEN;
		PString bankAddr maxlen WIREACCOUNTS_BANKADDR_LEN;
		PString comments maxlen 10000; // GUI client doesn't have a limit on that field, anything above WIREACCOUNTS_COMMENTS_LEN will be bounced by cashier itself
	};
	
	//--------------------------------------------- MSG_CASHIER_SAVE_WIRE_CASHOUT_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_SAVE_WIRE_CASHOUT_INFO // 5170
	{
		WireHolderBody holder;
		WireBankInfoBody bankinfo;
	};
	
	Message MSG_CASHIER_SAVE_WIRE_CASHOUT_INFO_REPLY // 5171
	{
		INT16 errCode;
		PString errReplyInfo;
		INT16 eDbtWireBankValNoError;
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_USER_LIMIT (cli) ------------------------------------------
	Message MSG_CASHIER_GET_USER_LIMIT // 5178
	{
		PString userId maxlen USER_NAME_LEN parseEndOptB4Me;
	};
	
	Message MSG_CASHIER_GET_USER_LIMIT_REPLY // 5179
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			INT32 weeklyLimit;
			CommSrvTime enforcedUntil;
			INT32 maxUserLimit;
			INT32 minUserLimitInCur;
			PString selfLimitCurrency;
			INT64 rateToUsd_x100M; // PYR-76896
			INT32 regulatoryWeeklyLimit default -1 parseEndOptB4Me; // PYR-113183 -1 if no regulatory limit
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SET_USER_LIMIT (cli) ------------------------------------------
	Message MSG_CASHIER_SET_USER_LIMIT
	{
		PString userId maxlen USER_NAME_LEN;
		INT32 weeklyLimit min -1 max MAX_BANKROLL_SIZE; // -1 removes the limit
		UINT32 flags_ignored;
		UINT64 flags2_ignored;
		bool  groupDepositLimit parseEndOptB4Me;
	};
	
	Message MSG_CASHIER_SET_USER_LIMIT_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			BYTE status;
			INT32 weeklyLimit;
			SrvTime enforcedUntil;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_USER_LIMIT_EX (cli) ------------------------------------------
	Message MSG_CASHIER_GET_USER_LIMIT_EX // 5427
	{
		PString userId maxlen USER_NAME_LEN; // parsed always
	};
	
	MsgBodyStruct UserLimitReplyBody
	{
		UINT32 type; // enum SelfDepositLimitType in dbm.h
		INT32 value;
		CommSrvTime enforcedUntil;
		INT32 maxL;
		INT32 minL;
		INT32 maxValuePropInt;
		INT32 regulatoryLimit default -1 parseEndOptB4Me; // PYR-113183 -1 if no regulatory limit
	};
	
	Message MSG_CASHIER_GET_USER_LIMIT_EX_REPLY // 5428
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			CommMsgBody { UINT32 quizPropInt; SrvTime quizPropWhen; };
			UINT32 size min 3 max 3;
			UserLimitReplyBody limitDaily;
			UserLimitReplyBody limitWeekly;
			UserLimitReplyBody limitMonthly;
			PString selfLimitCurrency;
			INT64 rateToUsd_x100M; // PYR-76896
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SET_USER_LIMIT_EX (cli) ------------------------------------------
	struct CashierUserLimit
	{
		UINT32 type enum {eDailyDepositLimit, eWeeklyDepositLimit, eMonthlyDepositLimit}; // enum SelfDepositLimitType in dbm.h
		INT32 value min -1 max MAX_BANKROLL_SIZE;
	};
	
	Message MSG_CASHIER_SET_USER_LIMIT_EX
	{
		CommMsgBody { UINT32 quiz; UINT32 ignoreFlags1; UINT64 ignoreFlags2; UINT32 answers; };
		UINT32 sz min 3 max 3;
		CommMsgBody { CashierUserLimit daily; };
		CommMsgBody { CashierUserLimit weekly; };
		CommMsgBody { CashierUserLimit monthly; };
		bool  groupDepositLimit parseEndOptB4Me;
	};
	
	struct SelfDepositLimitReplyInfo
	{
		UINT32 type; // enum SelfDepositLimitType in dbm.h
		INT16 code;
		PString info;
		INT32 curValue;
		SrvTime enforcedUntil;
		INT32 newValue;
	};
	
	Message MSG_CASHIER_SET_USER_LIMIT_EX_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 sz; // always 3
			CommMsgBody { SelfDepositLimitReplyInfo daily; };
			CommMsgBody { SelfDepositLimitReplyInfo weekly; };
			CommMsgBody { SelfDepositLimitReplyInfo monthly; };
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_UNCLEARED_DEPOSITS2 (cli) ------------------------------------------
	Message MSG_CASHIER_GET_UNCLEARED_DEPOSITS2 // 5269
	{
		// empty
	};
	
	MsgBodyStruct CashierUnclearedDepositBody
	{
		UINT32 transId;
		PString psNameTranslated;
		INT32 amountUsd;
		CommSrvTime whenClear;
		INT32 fppLeftToClear;
		PString balanceCurrency;
		INT32 balanceAmount;
		PString processorCurrency;
		INT32 processorAmount;
	};
	
	Message MSG_CASHIER_GET_UNCLEARED_DEPOSITS2_REPLY // 5270
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashierUnclearedDepositBody> unclearedDeposits;
			UINT32 maxNum;
			UINT32 maxSum;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_DBT_FIELDS (cli) ------------------------------------------
	Message MSG_CASHIER_GET_DBT_FIELDS // 5191
	{
		PString userId maxlen USER_NAME_LEN;
	};
	
	MsgBodyStruct OneDbtFieldBody
	{
		PString fieldName;
		PString localizedDescription;
		PString fieldValue;
		UINT32 maxLen;
		UINT32 flag;
		PString extra;
		UINT32 minLen;
	};
	
	Message MSG_CASHIER_GET_DBT_FIELDS_REPLY // 5192
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<OneDbtFieldBody> dbtFields;
			vector<PString> currencies;
		}
	};
	
	MsgBodyStruct DbtValidateFieldBody // request
	{
		PString fieldName maxlen 100;
		PString fieldValue maxlen 300;
	};
	
	//--------------------------------------------- MSG_CASHIER_DBT_VALIDATE (cli) ------------------------------------------
	Message MSG_CASHIER_DBT_VALIDATE // 5193
	{
		PString userId maxlen USER_NAME_LEN;
		PString currency maxlen CURRENCY_LEN;
		vector<DbtValidateFieldBody> fields maxsize 1000; // PYR-52360
	};
	
	Message MSG_CASHIER_DBT_VALIDATE_REPLY // 5194
	{
		INT16 errCode;
		PString errReplyInfo;
		INT16 eDbtWireBankValNoError;
	};
	
	//--------------------------------------------- MSG_CASHIER_AVLS_REQUEST (cli) ------------------------------------------
	Message MSG_CASHIER_AVLS_REQUEST // 5221
	{
		UINT32 requestType enum { eLiveSupportRequestChat, eLiveSupportRequestPhone, eLiveSupportRequestNone, eLiveSupportRequestEmail, eLiveSupportRequestIndirect }; // eLiveSupportRequestType
		PString userId maxlen USER_NAME_LEN;
		PString phoneToContact maxlen 100;
		PString timeToContact maxlen 1000;
		UINT32 avSystem enum { eAgeVerificationSystemAristotle, eAgeVerificationSystemURU }; // eAgeVerificationSystem
		UINT32 resultId; // no limit
	};
	
	Message MSG_CASHIER_AVLS_REQUEST_REPLY // 5222
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 requestType;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_PENDING_CASHOUTS (cli) ------------------------------------------
	Message MSG_CASHIER_GET_PENDING_CASHOUTS // 5250
	{
		bool includeHoldStatus_obsolete;
	};
	
	MsgBodyStruct OneTransBody // reply only
	{
		UINT32 transId;
		PString psForCashout;
		INT32 returnedAmount;
		PString currency;
		INT32 converted;
		CommSrvTime started;
		PString status;
		PString balanceCurrency;
		bool canBeCancelled;
		BYTE cardTypeByte;
		PString maskedReference;
	};
	
	Message MSG_CASHIER_GET_PENDING_CASHOUTS_REPLY // 5251
	{
		vector<OneTransBody> cashoutTransactions;
	};
	
	//--------------------------------------------- MSG_CASHIER_CANCEL_PENDING_CASHOUTS (cli) ------------------------------------------
	Message MSG_CASHIER_CANCEL_PENDING_CASHOUTS // 5252
	{
		vector<UINT32> idsToCancel maxsize 10000; // PYR-52366
		PString bonusCode maxlen BONUS_CODE_LEN;
	};
	
	struct PendingCashoutStatus
	{
		INT16 errCode;
		PString errDescr;
	};
	
	Message MSG_CASHIER_CANCEL_PENDING_CASHOUTS_REPLY // 5253
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<PendingCashoutStatus> cashoutStatuses;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_ENVOY_LBT_GET_BANKS (cli) ------------------------------------------
	Message MSG_CASHIER_ENVOY_LBT_GET_BANKS // 5261
	{
		PString procCurrency maxlen 100;
		bool forAllCurrencies;
		BYTE paysystemByte min cardTypeFirst max cardTypeLast;
	};
	
	MsgBodyStruct EnvoyBankInfoBody // reply only
	{
		UINT32 bankrefId;
		PString currency;
		PString name;
		PString city;
		PString address;
		PString swift;
		PString url;
		PString accountNum;
		PString iban;
		PString benficiary;
		PString extraInfo;
		bool preferred;
		PString paysystem;
		PString bankId;
		PString comment;
		UINT32 flags;
		PString country;
	};
	
	Message MSG_CASHIER_ENVOY_LBT_GET_BANKS_REPLY // 5262
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<EnvoyBankInfoBody> banksForClient;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_ENVOY_LBT_BANK_SELECTED (cli) ------------------------------------------
	Message MSG_CASHIER_ENVOY_LBT_BANK_SELECTED // 5263
	{
		PString bonusCode maxlen BONUS_CODE_LEN;
		UINT32 bankrefId; // the fields are mostly identical to EnvoyBankInfoBody, but not completely // no limit
		PString currency maxlen CURRENCY_LEN;
		PString name maxlen WIREACCOUNTS_HOLDERNAME_LEN;
		PString city maxlen WIREACCOUNTS_CITY_LEN;
		PString address maxlen WIREACCOUNTS_ADDR_LEN;
		PString swift maxlen WIREACCOUNTS_SWIFTCODE_LEN;
		PString url maxlen 1000;
		PString accountNum maxlen 100;
		PString iban maxlen WIREACCOUNTS_IBAN_LEN;
		PString benficiary maxlen WIREACCOUNTS_HOLDERNAME_LEN;
		PString extraInfo maxlen 4000;
		bool preferred;
		INT32 intendedProcAmount min 0 max MAX_BANKROLL_SIZE;
	};
	
	Message MSG_CASHIER_ENVOY_LBT_BANK_SELECTED_REPLY // 5264
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString retStr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_PSTARSPAY_BANK_SELECTED (cli) ------------------------------------------
	Message MSG_CASHIER_PSTARSPAY_BANK_SELECTED // 5393
	{
		PString bonusCode maxlen BONUS_CODE_LEN;
		UINT32 bankRefId; // no limit
		INT32 intendedProcAmount min 0 max MAX_BANKROLL_SIZE;
		PString processorCurrency maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_PSTARSPAY_BANK_SELECTED_REPLY // 5394
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString name;
			PString benficiary;
			PString sccountNum;
			bool useReference;
			PString processorExtras;
			PString currency;
			INT32 intendedProcAmount;
			INT32 amount;
			PString comment;
			PString empty;
			PString extraInfo;
			PString url;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CONVRATES_SUBSET (cli) ------------------------------------------
	Message MSG_CASHIER_CONVRATES_SUBSET // 5279
	{
		UINT32 intActionType min eConvActionDefault max eConvActionPoolBettingLast;
		PString incomingCur maxlen 100;
		bool curIsSrcNotDst;
	};
	
	MsgBodyStruct CashierConvRateBody // reply only
	{
		PString outgoingCur;
		UINT64 rateFin;
		UINT64 inverseRateFin;
	};
	
	Message MSG_CASHIER_CONVRATES_SUBSET_REPLY // 5280
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashierConvRateBody> convRates;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SET_DEFAULT_ACCOUNT (cli) ------------------------------------------
	Message MSG_CASHIER_SET_DEFAULT_ACCOUNT // 5285
	{
		PString newDefaultCurrency maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_SET_DEFAULT_ACCOUNT_REPLY // 5286
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_NEW_CURRENCY_ACCOUNT (cli) ------------------------------------------
	Message MSG_CASHIER_NEW_CURRENCY_ACCOUNT // 5287
	{
		PString newCurrencyToAdd maxlen 100;
	};
	
	Message MSG_CASHIER_NEW_CURRENCY_ACCOUNT_REPLY // 5288
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_DELETE_CURRENCY_ACCOUNT (cli) ------------------------------------------
	Message MSG_CASHIER_DELETE_CURRENCY_ACCOUNT // 5289
	{
		PString currencyToDelete maxlen CURRENCY_LEN;
		bool disregradBonuses;
	};
	
	Message MSG_CASHIER_DELETE_CURRENCY_ACCOUNT_REPLY // 5290
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CURRENCY_ACCOUNT_MULTI_TRANSFER (cli) ------------------------------------------
	struct AccountTransferInfo
	{
		INT32 amountSrc min 0 max MAX_BANKROLL_SIZE;
		PString currencySrc maxlen CURRENCY_LEN;
		INT32 amountDst min 0 max MAX_BANKROLL_SIZE;
		PString currencyDst maxlen CURRENCY_LEN;
		INT32 chipsType enum { REAL_CHIPS, PLAY_CHIPS, TOURN_CHIPS, BLITZ_REAL_CHIPS, BLITZ_PLAY_CHIPS, POKER_DUEL_CHIPS };
	};
	
	Message MSG_CASHIER_CURRENCY_ACCOUNT_MULTI_TRANSFER // 5303
	{
		vector<AccountTransferInfo> transfers maxsize 1000; // PYR-52360
	};
	
	Message MSG_CASHIER_CURRENCY_ACCOUNT_MULTI_TRANSFER_REPLY // 5304
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_USER_PRIVS (cli) ------------------------------------------
	Message MSG_CASHIER_GET_USER_PRIVS // 5295
	{
		PString unusedStr maxlen USER_NAME_LEN parseEndOptB4Me;
	};
	
	struct CashierUserPrivs
	{
		UINT32 privs;
		UINT64 privs2;
		bool modelessCashierAllowedForUser;
		bool forceCashout;
		bool dummy; // always true
		UINT64 privs3;
	};
	
	Message MSG_CASHIER_GET_USER_PRIVS_REPLY // 5296
	{
		CashierUserPrivs privs;
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_USER_PRIVS_2 (cli) ------------------------------------------
	Message MSG_CASHIER_GET_USER_PRIVS_2 // 5556
	{
		PString unusedStr maxlen USER_NAME_LEN parseEndOptB4Me;
	};
	
	Message MSG_CASHIER_GET_USER_PRIVS_2_REPLY // 5557
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			CashierUserPrivs privs;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_REAL_PRE_TRANSFER (cli) ------------------------------------------
	Message MSG_CASHIER_REAL_PRE_TRANSFER // 5293
	{
		PString userFrom maxlen USER_NAME_LEN;
		PString userTo maxlen 1000; // was USER_NAME_LEN, client fails to limit this field
		INT32 amountFrom min 0 max MAX_BANKROLL_SIZE;
		PString currencyFrom maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_REAL_PRE_TRANSFER_REPLY // 5294
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString userId;
			PString city;
			PString country;
			BYTE showCity min 0 max 1;
			UINT32 imageId;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_REAL_TRANSFER (cli) ------------------------------------------
	Message MSG_CASHIER_REAL_TRANSFER // 5297
	{
		PString userFrom maxlen USER_NAME_LEN;
		PString userTo maxlen USER_NAME_LEN;
		INT32 amountFrom min 0 max MAX_BANKROLL_SIZE;
		PString userComment maxlen 4000;
		PString currencyFrom maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_REAL_TRANSFER_REPLY // 5298
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CREATE_REDEEM_ACCOUNT (cli) ------------------------------------------
	struct CashierRedeemAccountData
	{
		PString name maxlen 100;
		PString acct maxlen 100;
		// UINT32 userIntId; // NOTE: only for admin connection
	};
	
	Message MSG_CASHIER_CREATE_REDEEM_ACCOUNT // 5311
	{
		BYTE paysystemByte min cardTypeFirst max cardTypeLast;
		vector<CashierRedeemAccountData> accounts maxsize 1000; // PYR-52360
	};
	
	Message MSG_CASHIER_CREATE_REDEEM_ACCOUNT_REPLY // 5312
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_USER_ACCT_PROC_REGISTRATION (cli) ------------------------------------------
	Message MSG_CASHIER_USER_ACCT_PROC_REGISTRATION // 5317
	{
		PString userId maxlen USER_NAME_LEN;
		BYTE paysystemByte min cardTypeFirst max cardTypeLast;
	};
	
	Message MSG_CASHIER_USER_ACCT_PROC_REGISTRATION_REPLY // 5318
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CHECK_PLI (cli) ------------------------------------------
	Message MSG_CASHIER_CHECK_PLI // 5321
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		PString accountCurrency maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_CHECK_PLI_REPLY // 5322
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			BYTE cardTypeByte;
			INT32 minDepositInCur;
			INT32 maxCashinDaily;
			INT32 maxCashinWeekly;
			INT32 maxCashinMonthly;
			UINT32 levelId;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_INCREASE_PLI (cli) ------------------------------------------
	Message MSG_CASHIER_INCREASE_PLI // 5323
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		UINT32 nextLevelId; // level id, no limit
	};
	
	Message MSG_CASHIER_INCREASE_PLI_REPLY // 5324
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SEND_USER_DOCS (cli) ------------------------------------------
	Message MSG_CASHIER_SEND_USER_DOCS // 5325
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
	};
	
	Message MSG_CASHIER_SEND_USER_DOCS_REPLY // 5326
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PBlock data;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_PAYSYSTEMS_LIMITS (cli) ------------------------------------------
	Message MSG_CASHIER_PAYSYSTEMS_LIMITS // 5338
	{
		vector<BYTE> paySystemBytes maxsize 2000; // PYR-52360
	};
	
	MsgBodyStruct PaysystemLimit2Body // they reportedly wanted the format to be the same as PaysystemLimit
	{
		PString currency; // <-- this field is not in PaysystemLimit
		common_structs::PaysystemLimit limit;
	};
	
	Message MSG_CASHIER_PAYSYSTEMS_LIMITS_REPLY // 5339
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<PaysystemLimit2Body> limits;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CONVERT_ALL_ASSETS (cli) ------------------------------------------
	Message MSG_CASHIER_CONVERT_ALL_ASSETS // 5341
	{
		//if (0) // is admin connection
		//{
		//	UINT32 adminReqId;
		//	PString userId;
		//	UINT32 conversionFlags;
		//}
		//else
		//{
			// empty
		//}
	};
	
	MsgBodyStruct UserAllAssetsOneBody // reply only
	{
		INT32 assetType;
		INT32 typedAmount;
		PString currency;
		INT32 chipsDst;
		UINT64 convRate;
	};
	
	struct UserAllAssets // reply only
	{
		INT32 availDst;
		PString currencyDst;
		vector<UserAllAssetsOneBody> assets;
	};
	
	Message MSG_CASHIER_CONVERT_ALL_ASSETS_REPLY // 5342
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UserAllAssets allAssets;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_RMF_BANKACCOUNT (cli) ------------------------------------------
	Message MSG_CASHIER_GET_RMF_BANKACCOUNT // 5343
	{
		PString unusedStr maxlen USER_NAME_LEN parseEndOptB4Me;
	};
	
	Message MSG_CASHIER_GET_RMF_BANKACCOUNT_REPLY // 5344
	{
		//if(0)
		//{
		//	UINT32 origReqId; // depends on conn props
		//}
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString bankName;
			PString accountNumberDecrypted;
			bool isValid;
			PString bankCountry;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SET_RMF_BANKACCOUNT (cli) ------------------------------------------
	Message MSG_CASHIER_SET_RMF_BANKACCOUNT // 5345
	{
		PString bankName maxlen 1000;
		PString accountNumberDecrypted maxlen 1000;
		PString bankCountry maxlen 100;
	};
	
	Message MSG_CASHIER_SET_RMF_BANKACCOUNT_REPLY // 5346
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString reference;
			bool isValid;
			
			CommMsgBody
			{
				BYTE realMoneyOk min 0 max 1;
				PString accountNumberDecrypted;
			};
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_SPENDING_LIMIT (cli) ------------------------------------------
	Message MSG_CASHIER_GET_SPENDING_LIMIT // 5347
	{
		// empty
	};
	
	Message MSG_CASHIER_GET_SPENDING_LIMIT_REPLY // 5348
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			INT32 spendingLimitOUT;
			INT32 availForSpending;
			INT32 totalBalance;
			vector<INT32> limitsArray;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SET_SPENDING_LIMIT (cli) ------------------------------------------
	Message MSG_CASHIER_SET_SPENDING_LIMIT // 5349, PYR-33650
	{
		INT32 spendingLimit min 1 max MAX_BANKROLL_SIZE;
		UINT32 flags_ignored parseEndOptB4Me; // old clients and web-cashier can send that
		UINT64 flags2_ignored parseEndOptB4Me; // old clients and web-cashier can send that
	};
	
	Message MSG_CASHIER_SET_SPENDING_LIMIT_REPLY // 5350
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_FRMIGRATION_CANCEL (cli) ------------------------------------------
	Message MSG_CASHIER_FRMIGRATION_CANCEL // 5352
	{
		UINT32 cancelCode min eFrMigrationCancelCode1 max eFrMigrationCancelCodeLast; // eFrMigrationCancelCode (trackCode in client, migrationStep in cashier)
	};
	
	Message MSG_CASHIER_FRMIGRATION_CANCEL_REPLY // 5353
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_FRMIGRATION_GET_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_FRMIGRATION_GET_INFO // 5354
	{
		UINT32 migrTypeInt min eMigrationTypeTransfer max eMigrationTypeLast;
		PString linkedUserId maxlen 200; // client doesn't have a limit
	};
	
	Message MSG_CASHIER_FRMIGRATION_GET_INFO_REPLY // 5355
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UserAllAssets cashAssets;
			UserAllAssets tChipsAssets;
			UINT32 fppBalance;
			UINT32 vipRewardBonusFpp;
			UINT32 monthlyVpp;
			UINT32 yearlyVpp;
			UINT32 totalCashAmount;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_FRMIGRATION (cli) ------------------------------------------
	Message MSG_CASHIER_FRMIGRATION // 5356
	{
		// empty
	};
	
	Message MSG_CASHIER_FRMIGRATION_REPLY // 5357
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 overcreditTransId;
			UINT32 migrationId;
			INT32 overcreditAmount;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_FRMIGRATION_DEPOSIT (cli) ------------------------------------------
	Message MSG_CASHIER_FRMIGRATION_DEPOSIT // 5360
	{
		bool doDeposit;
		UINT32 overcreditTransId; // no limit
		UINT32 migrationId; // no limit
		INT32 amount min 0 max MAX_BANKROLL_SIZE;
	};
	
	Message MSG_CASHIER_FRMIGRATION_DEPOSIT_REPLY // 5361
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_ESMIGRATION2_CANCEL (cli) ------------------------------------------
	Message MSG_CASHIER_ESMIGRATION2_CANCEL // 5443
	{
		UINT32 cancelCode min eEsMigrationCancelCode1 max eEsMigrationCancelCodeLast; // eEsMigrationCancelCode (trackCode in client, migrationStep in cashier)
	};
	
	Message MSG_CASHIER_ESMIGRATION2_CANCEL_REPLY // 5444
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_ESMIGRATION2_GET_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_ESMIGRATION2_GET_INFO // 5445
	{
		// empty
	};
	
	Message MSG_CASHIER_ESMIGRATION2_GET_INFO_REPLY // 5446
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UserAllAssets cashAssets;
			UserAllAssets tChipsAssets;
			UINT32 fppBalance;
			UINT32 vipRewardBonusFpp;
			UINT32 monthlyVpp;
			UINT32 yearlyVpp;
			UINT32 totalCashAmount;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_ESMIGRATION2 (cli) ------------------------------------------
	Message MSG_CASHIER_ESMIGRATION2 // 5447
	{
		// empty
	};
	
	Message MSG_CASHIER_ESMIGRATION2_REPLY // 5448
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 overcreditTransId;
			UINT32 migrationId;
			UINT32 overcreditAmount;
			PString voucher;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_ESMIGRATION2_DEPOSIT (cli) ------------------------------------------
	Message MSG_CASHIER_ESMIGRATION2_DEPOSIT // 5449
	{
		bool doDeposit;
		UINT32 overcreditTransId; // no limit
		UINT32 migrationId; // no limit
		INT32 amountEur min 0 max MAX_BANKROLL_SIZE;
	};
	
	Message MSG_CASHIER_ESMIGRATION2_DEPOSIT_REPLY // 5450
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString descrForUser;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_VALIDATION_CANCEL (cli) ------------------------------------------
	Message MSG_CASHIER_VALIDATION_CANCEL // 5364
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		UINT32 digits; // it's actually a bitmask, old cardnum string (if exists) gets compared with a new one, letter by letter
		// every '1' bit in the bitmask represents one letter difference, bit position = character position in cardnum
		UINT32 attempts max 1000;
	};
	
	Message MSG_CASHIER_VALIDATION_CANCEL_REPLY // 5365
	{
		INT16 errCode;
	};
	
	//--------------------------------------------- MSG_CASHIER_TCHIPS_PRESALE (cli) ------------------------------------------
	Message MSG_CASHIER_TCHIPS_PRESALE // 5378
	{
		PString anotherUserId maxlen 200; // was USER_NAME_LEN, client fails to limit this field
		bool isBuyer;
		INT32 tChips min 0 max MAX_BANKROLL_SIZE;
		INT32 cash min 0 max MAX_BANKROLL_SIZE;
		PString currency maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_TCHIPS_PRESALE_REPLY // 5379
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString seller;
			PString buyer;
			bool isBuyer;
			INT32 tChips;
			INT32 cash;
			PString userId;
			PString city;
			PString country;
			BYTE showCity min 0 max 1;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_TCHIPS_SALE (cli) ------------------------------------------
	Message MSG_CASHIER_TCHIPS_SALE // 5380
	{
		PString anotherUserId maxlen USER_NAME_LEN;
		bool isBuyer;
		INT32 tChips min 0 max MAX_BANKROLL_SIZE;
		INT32 cash min 0 max MAX_BANKROLL_SIZE;
		PString currency maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_TCHIPS_SALE_REPLY // 5381
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			INT32 expirationIntervalSec;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_TCHIPS_PRECANCEL (cli) ------------------------------------------
	Message MSG_CASHIER_TCHIPS_PRECANCEL // 5382
	{
		// empty
	};
	
	MsgBodyStruct CashierTChipsPrecancelOneBody // reply only
	{
		UINT32 saleId;
		PString anotherUserId;
		INT32 tChips;
		INT32 cash;
		bool isStartedByBuyer;
		CommSrvTime validUntil;
		PString currency;
	};
	
	Message MSG_CASHIER_TCHIPS_PRECANCEL_REPLY // 5383
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashierTChipsPrecancelOneBody> precancelEntries;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_TCHIPS_CANCELID (cli) ------------------------------------------
	Message MSG_CASHIER_TCHIPS_CANCELID // 5384
	{
		vector<UINT32> saleIds maxsize 10000; // PYR-52360
	};
	
	MsgBodyStruct CashieTChipsSaleBody
	{
		UINT32 saleId;
		INT16 errCode2;
	};
	
	Message MSG_CASHIER_TCHIPS_CANCELID_REPLY // 5385
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashieTChipsSaleBody> sales;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_TCHIPS_SALE_TO_PSTARS (cli) ------------------------------------------
	Message MSG_CASHIER_TCHIPS_SALE_TO_PSTARS // 5386
	{
		INT32 tChips min 0 max MAX_BANKROLL_SIZE;
		INT32 cash min 0 max MAX_BANKROLL_SIZE;
		PString currency maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_TCHIPS_SALE_TO_PSTARS_REPLY // 5387
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_TSALE_GET_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_TSALE_GET_INFO // 5391
	{
		// empty
	};
	
	Message MSG_CASHIER_TSALE_GET_INFO_REPLY // 5392
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			INT32 tChipsToCashMinimumRate_x1M;
			bool tSaleToPStarsEnabled;
			INT32 tChipsToCashPStarsRate_x1M;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_VOUCHER_AMOUNTCURRENCY_GET_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_VOUCHER_AMOUNTCURRENCY_GET_INFO // 5395
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
	};
	
	MsgBodyStruct CashierAmountCurrencyBody // reply only
	{
		INT32 amount;
		PString currency;
	};
	
	Message MSG_CASHIER_VOUCHER_AMOUNTCURRENCY_GET_INFO_REPLY // 5396
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashierAmountCurrencyBody> infos;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_FAST_DEPOSIT_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_GET_FAST_DEPOSIT_INFO // 5405
	{
		INT32 fdCallFrom min eFastDepositCallFromUnknown max eFastDepositCallFromLast;
		INT32 targetAmount min -1 max MAX_BANKROLL_SIZE; // -1 is for specifial purpose
		PString targetAcctCurrency maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_GET_FAST_DEPOSIT_INFO_REPLY // 5406
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			BYTE cardTypeByte;
			PString paysystemName;
			INT32 status;
			INT32 procAmount;
			PString procCurrency;
			INT32 extraAcctAmountNeeded;
			UINT32 cardInfoId;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_UPDATE_FAST_DEPOSIT_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_UPDATE_FAST_DEPOSIT_INFO // 5407
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		INT32 fdStatus enum { eFastDepositStatusNotExists, eFastDepositStatusDisabled, eFastDepositStatusActive };
		INT32 procAmount min 0 max MAX_BANKROLL_SIZE;
		PString procCurrency maxlen CURRENCY_LEN;
		UINT32 cardInfoId; // no limit
	};
	
	Message MSG_CASHIER_UPDATE_FAST_DEPOSIT_INFO_REPLY // 5408
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_DELETE_FAST_DEPOSIT_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_DELETE_FAST_DEPOSIT_INFO // 5409
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
	};
	
	Message MSG_CASHIER_DELETE_FAST_DEPOSIT_INFO_REPLY // 5410
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_RM_NOK_HELD_FUNDS (cli) ------------------------------------------
	Message MSG_CASHIER_GET_RM_NOK_HELD_FUNDS // 5417
	{
		// empty
	};
	
	MsgBodyStruct CashierHeldTransBody // reply only
	{
		UINT32 transId;
		INT32 amountAcct;
		PString currencyAcct;
		CommSrvTime started;
		BYTE cardTypeByte;
		PString paysystemName;
	};
	
	Message MSG_CASHIER_GET_RM_NOK_HELD_FUNDS_REPLY // 5418
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashierHeldTransBody> transactions;
			INT32 totalOnHold; // not used if no transactions
			PString denominatedCurrency;  // not used if no transactions
			UINT32 allowToRejectFunds;  // not used if no transactions
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_REJECT_RM_NOK_HELD_FUNDS (cli) ------------------------------------------
	Message MSG_CASHIER_REJECT_RM_NOK_HELD_FUNDS // 5419
	{
		// empty
	};
	
	Message MSG_CASHIER_REJECT_RM_NOK_HELD_FUNDS_REPLY // 5420
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_SAVED_CARDS (cli) ------------------------------------------
	Message MSG_CASHIER_GET_SAVED_CARDS // 5468, PYR-24538
	{
		// empty
	};
	
	MsgBodyStruct CashierOneCardBody // reply only
	{
		UINT32 infoId;
		UINT32 ccId;
		BYTE paysystemByte;
		UINT32 flagsForClient;
		PString oldCardNumPlain;
		PString maskedCardNum;
		UINT16 expYear;
		BYTE expMonth;
		CommSrvTime lastUse;
		PString currencyProc;
		INT32 savedProcAmount;
	};
	
	Message MSG_CASHIER_GET_SAVED_CARDS_REPLY // 5469
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashierOneCardBody> cards;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_DELETE_SAVED_CARD (cli) ------------------------------------------
	Message MSG_CASHIER_DELETE_SAVED_CARD // 5470, PYR-24538
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		UINT32 cardInfoId; // no limit
	};
	
	Message MSG_CASHIER_DELETE_SAVED_CARD_REPLY // 5471
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_PLAY_TRANSFER (cli) ------------------------------------------
	Message MSG_CASHIER_PLAY_TRANSFER // 5477, PYR-26613
	{
		PString userTo maxlen USER_NAME_LEN;
		INT64 amount64 min 0 max MAX_BANKROLL_SIZE;
	};
	
	Message MSG_CASHIER_PLAY_TRANSFER_REPLY // 5478
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_DEPOSIT_CHECK (cli) ------------------------------------------
	Message MSG_CASHIER_DEPOSIT_CHECK // 5475, PYR-24538
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		INT64 procAmount min 0 max MAX_BANKROLL_SIZE;
		PString procCurrency maxlen 100;
		INT64 acctAmount min 0 max MAX_BANKROLL_SIZE;
		PString acctCurrency maxlen 100;
		UINT32 requestFlags /*min 0*/ max ((((UINT32)eCashierDepositCheckFlag_Last)<<1)-1);
		PString cardNum maxlen CARDNUM_LEN;
		PBlock cardNumEncrypted maxlen 4000 parseEndOptB4Me; // may be skipped by older clients
	};
	
	MsgBodyStruct CashierUpsellAwardBody // response only
	{
		INT64 proposedProcAmount;
		INT64 proposedAcctAmount;
		INT64 award;
		INT64 awardInAcctCurrency;
	};
	
	MsgBodyStruct CashierUpsellBody // response only
	{
		UINT32 awardId;
		INT32 awardType;
		PString upsellCaptionText;
		PString baseCurrency;
		vector<CashierUpsellAwardBody> awards;
		INT32 timerValueSecs;
	};
	
	Message MSG_CASHIER_DEPOSIT_CHECK_REPLY // 5476
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
			//if (errCode == LIFETIME_LIMIT_EXCEEDED) // fixme
			//{
			//	CommMsgBody { INT32 lifetimeNJDepositLimitInUSCents; };
			//}
		}
		else
		{
			//CashierUpsellBody upsellBody;
			CommMsgBody
			{
				// empty upsell body
			};
			UINT32 replyFlags;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_3V_PREREGISTER (cli) ------------------------------------------
	Message MSG_CASHIER_3V_PREREGISTER // 5481, PYR-29055
	{
		// empty
	};
	
	Message MSG_CASHIER_3V_PREREGISTER_REPLY // 5482
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString signupUrl;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_BUY_PM (cli) ------------------------------------------
	MsgBodyStruct BuyPmUserBody // request, can be empty
	{
		PString addr1 maxlen USER_ADDR_LEN parseEndOptB4Me;
		PString addr2 maxlen USER_ADDR2_LEN parseEndOptB4Me;
		PString city maxlen USER_CITY_LEN parseEndOptB4Me;
		PString state maxlen USER_STATE_LEN parseEndOptB4Me;
		PString country maxlen USER_COUNTRY_LEN parseEndOptB4Me;
		PString zipCode maxlen USER_ZIP_LEN parseEndOptB4Me;
		PString firstName maxlen USER_FIRST_NAME_LEN parseEndOptB4Me;
		PString lastName maxlen USER_LAST_NAME_LEN parseEndOptB4Me;
	};
	
	MsgBodyStruct BuyPmCardBody // request
	{
		UINT32 cardInfoId; // no limit
		PString cardNum maxlen CARDNUM_LEN;
		PString cardCvv maxlen CARD_CVV_LEN;
		UINT16 expYear max 3000; // 0 can be used for specific payment systems that don't have exp date
		BYTE expMonth max 12;    // 0 can be used for specific payment systems that don't have exp date
		PBlock encryptedCardNumAndCvv maxlen 4000 parseEndOptB4Me; // old clients may skip that field
	};
	
	Message MSG_CASHIER_BUY_PM // 5490, PYR-29055
	{
		INT32 converted min 0 max MAX_BANKROLL_SIZE;
		PString currency maxlen CURRENCY_LEN;
		INT64 playMoneyPurchaseAmount min 0 max ((INT64)PINT32_MAX*CASHTRANS_PM_MULTIPLIER); // PYR-49042
		BuyPmUserBody userBody;
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		
		BuyPmCardBody cardBody;
		bool saveCardInfoRequested;
		
		CommMsgBody cliPsSpecificBodyIn maxsize 10000 parseEndOptB4Me;  // PYR-48920 PayWall data from client
	};
	
    // server to client
	Message MSG_CASHIER_BUY_PM_COMPLETE // 5491
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString pmpApprovedPopUp;
			UINT32 transId;
		}
	};
	
    // server to client
	Message MSG_CASHIER_BUY_PM_CONFIRM // 5492
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 transId;
			PString message;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_MBOOKERS_REDIRECTED (cli) ------------------------------------------
	// NOTE: doesn't have a reply
	Message MSG_CASHIER_MBOOKERS_REDIRECTED // 5173
	{
		UINT32 transId; // no limit
		UINT32 status; // no limit, client sends custom error code (platform and/or implementation dependent)
		PString errDescr maxlen 1000;
	};
	
	//--------------------------------------------- MSG_CASHIER_PM_PURCH_ITEMS_AVAIL (cli) ------------------------------------------
	Message MSG_CASHIER_PM_PURCH_ITEMS_AVAIL // 5495, PYR-29634
	{
		UINT32 storeId min ClientPlayChipsStore_web max ClientPlayChipsStore_Last; // enum ClientPlayChipsStore
	};
	
	MsgBodyStruct CashierPurchaseBody // reply only
	{
		INT32 cashPrice;
		PString currency; // always USD?
		INT64 playMoneyAmt;
		PString productId;
		UINT32 itemFlags;
		INT32 savingRate_x1M;
	};
	
	Message MSG_CASHIER_PM_PURCH_ITEMS_AVAIL_REPLY // 5496
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashierPurchaseBody> purchases;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_BUY_PM_GOOGLE (cli) ------------------------------------------
	Message MSG_CASHIER_BUY_PM_GOOGLE // 5497
	{
		PString order maxlen 1000;
		PString signature maxlen 1000;
	};
	
	struct CashierCommmonBuyPmReply // reply only
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString pmpApprovedPopUp;
			UINT32 transId;
		}
	};
	
	Message MSG_CASHIER_BUY_PM_GOOGLE_REPLY // 5498
	{
		CashierCommmonBuyPmReply reply;
	};
	
	//--------------------------------------------- MSG_CASHIER_BUY_PM_APPLE (cli) ------------------------------------------
	Message MSG_CASHIER_BUY_PM_APPLE // 5499
	{
		PString order maxlen 1000;
	};
	
	Message MSG_CASHIER_BUY_PM_APPLE_REPLY // 5500
	{
		CashierCommmonBuyPmReply reply;
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_ASTROPAY_BANKINFO (cli) ------------------------------------------
	Message MSG_CASHIER_GET_ASTROPAY_BANKINFO // 5501
	{
		bool isForCashout;
		BYTE cardTypeByte min cardTypeFirst max cardTypeLast parseEndOptB4Me;
	};
	
	struct AstropayDirectUserBankRef // used in both request and reply
	{
		UINT32 bankId; // no limit
		PString bankCode maxlen ASTROPAYDIRECT_BANKCODE_LEN;
		PString bankName maxlen ASTROPAYDIRECT_BANKNAME_LEN;
		PString bankCurrency maxlen CURRENCY_LEN;
		PString branchName maxlen ASTROPAYDIRECT_BRANCHNAME_LEN;
		PString nicAlias maxlen ASTROPAYDIRECT_NICALIAS_LEN;
		PString country maxlen USER_COUNTRY_LEN;
		PString nicValue maxlen ASTROPAYDIRECT_NICVALUE_LEN;
		PString bankAccount maxlen ASTROPAYDIRECT_ACCTNUM_LEN;
		PString accountType maxlen ASTROPAYDIRECT_ACCTTYPE_LEN;
	};
	
	Message MSG_CASHIER_GET_ASTROPAY_BANKINFO_REPLY // 5502
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			INT16 index;
			vector<AstropayDirectUserBankRef> bankInfos;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_ASTROPAY_CASHIN (cli) ------------------------------------------
	Message MSG_CASHIER_ASTROPAY_CASHIN // 5503
	{
		UINT32 bankId; // no limit
		PString cpf maxlen 100; //uuid
		INT64 amount64 min 0 max MAX_BANKROLL_SIZE;
		PString bonusCode maxlen BONUS_CODE_LEN;
		BYTE cardTypeByte min cardTypeFirst max cardTypeLast parseEndOptB4Me;
	};
	
	Message MSG_CASHIER_ASTROPAY_CASHIN_REDIRECT // 5504
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString redirectUrl;
			INT64 amount64;
			AstropayDirectUserBankRef bankInfo;
			BYTE cardTypeByte;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SAVE_ASTROPAY_BANKINFO (cli) ------------------------------------------
	Message MSG_CASHIER_SAVE_ASTROPAY_BANKINFO // 5505
	{
		AstropayDirectUserBankRef bankInfo;
		BYTE cardTypeByte min cardTypeFirst max cardTypeLast parseEndOptB4Me; 
	};
	
	Message MSG_CASHIER_SAVE_ASTROPAY_BANKINFO_REPLY // 5506
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CONVERT_FUNDS_TO_ONE_ACCT (cli) ------------------------------------------
	Message MSG_CASHIER_CONVERT_FUNDS_TO_ONE_ACCT // 5507
	{
		PString currencyDst maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_CONVERT_FUNDS_TO_ONE_ACCT_REPLY // 5508
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GENERATE_ELV_MANDATE_EMAIL (cli) ------------------------------------------
	Message MSG_CASHIER_GENERATE_ELV_MANDATE_EMAIL // 5511
	{
		// empty
	};
	
	Message MSG_CASHIER_GENERATE_ELV_MANDATE_EMAIL_REPLY // 5512
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_PAYLUCKY_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_GET_PAYLUCKY_INFO // 5513
	{
		BYTE paySystemByte default cardTypePayLucky enum { cardTypePayLucky, cardTypeSightline, cardTypeSightlineNR };
	};
	
	Message MSG_CASHIER_GET_PAYLUCKY_INFO_REPLY // 5514
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			INT32 payLuckyBalance;
			INT32 sightLineMaxBalance;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_VANILLA_AMTCURRENCY (cli) ------------------------------------------
	Message MSG_CASHIER_GET_VANILLA_AMTCURRENCY // 5519
	{
		PString pin maxlen 100;
		PString balanceCurrency maxlen 100;
	};
	
	Message MSG_CASHIER_GET_VANILLA_AMTCURRENCY_REPLY // 5520
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 procAmount;
			PString procCurrency;
			UINT32 balanceAmount;
			PString balanceCurrency;
			PString pin;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_PLAY_MONEY_REFILL (cli) ------------------------------------------
	Message MSG_CASHIER_PLAY_MONEY_REFILL // 5521, PYR-18558
	{
		// empty
	};
	
	MsgBodyStruct CashierPlayMoneyCommonBody // reply only
	{
		INT32 playChipsRefillPeriodSec;
		INT64 playChipsAllowedForPeriodCents;
		INT64 targetRefillAmountCents;
		INT64 playChipsBalance;
		INT64 availableForRefill;
	};
	
	struct CashierPlayMoneyRefillResult // reply only
	{
		INT32 refillResult;
		if (refillResult == ePmRefillSucceeded)
		{
			CommMsgBody
			{
				INT64 refilledAmount;
				CommSrvTime nextRefillTime;
				INT32 deltaSec;
			};
		}
		else if (refillResult == ePmRefillAllowenceExceeded)
		{
			CommMsgBody
			{
				CommSrvTime nextRefillTime;
				INT32 deltaSec;
			};
		}
		else if (refillResult == ePmRefillGreaterThanTarget)
		{
			CommMsgBody
			{
				// empty
			};
		}
	};
	
	Message MSG_CASHIER_PLAY_MONEY_REFILL_REPLY // 5522, PYR-18558
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			CashierPlayMoneyCommonBody common;
			CashierPlayMoneyRefillResult refillResult;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_PLAY_MONEY_REFILL_GET_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_PLAY_MONEY_REFILL_GET_INFO // 5573, PYR-47011
	{
		// empty
	};
	
	MsgBodyStruct AdEventConfBody
	{
		CommSrvTime nextAdEventTime;
		INT64 adEventPmRewardAmountCents;
	};
	
	Message MSG_CASHIER_PLAY_MONEY_REFILL_GET_INFO_REPLY // 5574
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			INT32 playChipsRefillPeriodSec;
			INT64 playChipsAllowedForPeriodCents;
			INT64 targetRefillAmountCents;
			INT64 availableForRefill;
			CommSrvTime nextRefillTime;
			AdEventConfBody userAdEventConf parseEndOptB4Me; // if userAdEventConf
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_PM_WATCH2EARN_START (cli) ------------------------------------------
	Message MSG_CASHIER_PM_WATCH2EARN_START // 5575, PYR-45097
	{
		INT32 triggerType min ePlayMoneyAdTriggerType_Undefined max ePlayMoneyAdTriggerType_Last;
		UINT64 triggerId; // no limit
	};
	
	Message MSG_CASHIER_PM_WATCH2EARN_START_REPLY // 5576
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 eventId;
			CommSrvTime nextAdEventTime;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_PM_WATCH2EARN_FINISH (cli) ------------------------------------------
	Message MSG_CASHIER_PM_WATCH2EARN_FINISH // 5577, PYR-45097
	{
		UINT32 eventId; // no limit
		INT32 status min ePlayMoneyAdWatchResult_Complete max ePlayMoneyAdWatchResult_Last; // enum ePlayMoneyAdWatchResult // PYR-45097
		PString xTransStr maxlen 1000;
		PString infoStr maxlen 1000;
	};
	
	Message MSG_CASHIER_PM_WATCH2EARN_FINISH_REPLY // 5578
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CHIPS_INFO_WITH_OPTIONS (cli) ------------------------------------------
	Message MSG_CASHIER_CHIPS_INFO_WITH_OPTIONS // 5524
	{
		vector<INT32> propertyTypes minsize 1 maxsize 2000; // enum eUserPropertyType
	};

	MsgBodyStruct CashierAccountBalanceBody // reply only
	{
		PString currency;
		INT64 chips; // might be negative
		INT64 tChips;
	};
	
	Message MSG_CASHIER_CHIPS_INFO_WITH_OPTIONS_REPLY // 5525
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::UserPropertyBody> userProperties;
			UINT32 flags;
			UINT64 flags2;
			UINT32 privileges;
			UINT64 privileges2;
			UINT64 privileges3;
			INT64 playChips;
			PString defaultCurrency;
			INT64 totalAmountCurr;
			vector<CashierAccountBalanceBody> accountBalances;
			UINT64 flags3;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_CURRENT_USERROLLS (cli) ------------------------------------------
	Message MSG_CASHIER_GET_CURRENT_USERROLLS // 5532
	{
		// empty
	};
	
	MsgBodyStruct CashierUserRollBody // reply only
	{
		UINT32 userRollId;
		INT32 status;
		PString oneRollDescription;
		INT32 paidFpp;
		INT32 paidCash;
		INT32 initialAmount;
		INT32 currentAmount;
		PString currency;
		INT32 surrenderValue;
		INT32 collectedPoints;
		INT32 totalPoints;
		INT32 numOfBets;
		INT32 clearBets;
		CommSrvTime expiration;
		UINT32 rollFlags;
		UINT32 flags;
		PString rollSupportedGamesJson;
		INT32 redemptionLimit;
		PString shortEligibleGameNames;
		PString longEligibleGameNames;
		INT32 stakes;
		INT32 clearStakes;
		UINT32 rollBrandsMask;
		INT32 rollRewardAssetType;
		UINT32 rollRewardAssetId;
		INT32 rollVerticalMask;
	};
	
	Message MSG_CASHIER_GET_CURRENT_USERROLLS_REPLY // 5533
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			vector<CashierUserRollBody> userRolls;
			vector<CashierUserRollBody> freeSpinUserRolls;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SET_USERROLL_STATUS (cli) ------------------------------------------
	Message MSG_CASHIER_SET_USERROLL_STATUS // 5534
	{
		common_structs::SetUserRollStatus status;
	};
	
	Message MSG_CASHIER_SET_USERROLL_STATUS_REPLY // 5535
	{
		common_structs::SetUserRollStatusReply reply;
	};
	
	//--------------------------------------------- MSG_CASHIER_UPDATE_USERROLLS_ORDER (cli) ------------------------------------------
	MsgBodyStruct CashierUserRollsOrderOneBody // request
	{
		UINT32 userRollId; // no limit
	};
	
	Message MSG_CASHIER_UPDATE_USERROLLS_ORDER // 5540
	{
		vector<CashierUserRollsOrderOneBody> userRollsOrder minsize 1 maxsize 10000; //  PYR-52360
	};
	
	Message MSG_CASHIER_UPDATE_USERROLLS_ORDER_REPLY // 5541
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SET_USER_ALL_PRIVILEGES (cli) ------------------------------------------
	Message MSG_CASHIER_SET_USER_ALL_PRIVILEGES // 5546
	{
		UINT32 privsMaskToSet; // all bits permitted, no range validation needed, UserPrivileges in dbm.h
		UINT32 privsMaskToClear; // no limit
		// note - the calculations below won't overflow as long as people follow guidelines and don't use 63rd bit (it causes issues in DB2)
		UINT64 privs2MaskToSet max ((ONE64<<(priv2LastUsedBit+ONE64))-ONE64); // priv2* defines in dbm.h
		UINT64 privs2MaskToClear; // no limit
		UINT64 privs3MaskToSet max ((ONE64<<(priv3LastUsedBit+ONE64))-ONE64); // priv3* defines in dbm.h
		UINT64 privs3MaskToClear; // no limit
	};
	
	Message MSG_CASHIER_SET_USER_ALL_PRIVILEGES_REPLY // 5547
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_TEXT (cli) ------------------------------------------
	Message MSG_CASHIER_GET_TEXT // 5548
	{
		UINT32 getTextFlags /*min 0*/ max ((((UINT32)eCashierGetTextFlags_Last)<<1)-1);
	};
	
	MsgBodyStruct CashierGetTextRealMoneyPopupBody // reply only
	{
		PString localizedTitle;
		PString localizedText;
		PString localizedButton;
	};
	
	MsgBodyStruct CashierGetTextResponseOneBody // reply only
	{
		INT32 getTextFlag;
		bool processedOk;
		CashierGetTextRealMoneyPopupBody textData;
	};
	
	
	Message MSG_CASHIER_GET_TEXT_REPLY // 5549
	{
		vector<CashierGetTextResponseOneBody> items;
	};
	
	//--------------------------------------------- MSG_CASHIER_SIGHTLINE_SIGNUP (cli) ------------------------------------------
	Message MSG_CASHIER_SIGHTLINE_SIGNUP // 5561
	{
		PString geoIpInfo maxlen 10000;
	};
	
	Message MSG_CASHIER_SIGHTLINE_SIGNUP_REPLY // 5562
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_VALINNARELOAD_SIGNUP (cli) ------------------------------------------
	Message MSG_CASHIER_VALINNARELOAD_SIGNUP // 5567
	{
		// empty
	};
	
	Message MSG_CASHIER_VALINNARELOAD_SIGNUP_REPLY // 5568
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_VALINNARELOAD_GET_BARCODE (cli) ------------------------------------------
	Message MSG_CASHIER_VALINNARELOAD_GET_BARCODE // 5569
	{
		// empty
	};
	
	Message MSG_CASHIER_VALINNARELOAD_GET_BARCODE_REPLY // 5570
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SET_GAMETICKET_STATUS (cli) ------------------------------------------
	Message MSG_CASHIER_SET_GAMETICKET_STATUS // 5571
	{
		common_structs::SetGameTicketStatus status;
	};
	
	Message MSG_CASHIER_SET_GAMETICKET_STATUS_REPLY // 5572
	{
		common_structs::SetGameTicketStatusReply reply;
	};
	
	//--------------------------------------------- MSG_CASHIER_TURN_ON_OFF_GAMEIN_AUTOCONVERSION (cli) ------------------------------------------
	Message MSG_CASHIER_TURN_ON_OFF_GAMEIN_AUTOCONVERSION // 5579
	{
		bool setNotRemove;
	};
	
	Message MSG_CASHIER_TURN_ON_OFF_GAMEIN_AUTOCONVERSION_REPLY // 5580
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CONVERT_FOR_TARGET_AMOUNT (cli) ------------------------------------------
	Message MSG_CASHIER_CONVERT_FOR_TARGET_AMOUNT // 5581
	{
		INT32 totalAmountNeeded min 0 max MAX_BANKROLL_SIZE;
		PString currency maxlen CURRENCY_LEN;
	};
	
	Message MSG_CASHIER_CONVERT_FOR_TARGET_AMOUNT_REPLY // 5582
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			INT32 amountAfter;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_DENOMINATED_BALANCE (cli) ------------------------------------------
	Message MSG_CASHIER_GET_DENOMINATED_BALANCE // 5588
	{
		PString targetCurrency maxlen CURRENCY_LEN;
		INT32 convActionTypeInt min eConvActionDefault max eConvActionPoolBettingLast; // enum ConversionActionType, validated further with validateConversionActionType() at sharedconversion.cpp
	};
	
	MsgBodyStruct DenominatedBalanceOneAccBody // reply only, struct DenominatedBalanceOneAcc cashierobject.h
	{
		PString acctCurrency;
		INT64 convRate_x100M;
		INT64 chips;
		INT64 chipsInTC;
		INT64 tChips;
		INT64 tChipsInTC;
	};
	
	Message MSG_CASHIER_GET_DENOMINATED_BALANCE_REPLY // 5589
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString targetCurrency;
			vector<DenominatedBalanceOneAccBody> denominatedBalanceAccs;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_STARSWALLET_REGISTER (cli) ------------------------------------------
	Message MSG_CASHIER_STARSWALLET_REGISTER // 5592, PYR-37328
	{
		PString mobilePhone maxlen USER_MOBILE_LEN;
	};
	
	Message MSG_CASHIER_STARSWALLET_REGISTER_REPLY // 5593
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_STARSWALLET_CHANGE_MOBILE (cli) ------------------------------------------
	Message MSG_CASHIER_STARSWALLET_CHANGE_MOBILE // 5597, PYR-37328
	{
		PString newMobileNumber maxlen USER_MOBILE_LEN;
	};
	
	Message MSG_CASHIER_STARSWALLET_CHANGE_MOBILE_REPLY // 5598
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_STARSWALLET_RESEND_OTP (cli) ------------------------------------------
	Message MSG_CASHIER_STARSWALLET_RESEND_OTP // 5599, PYR-37328
	{
		// empty
	};
	
	Message MSG_CASHIER_STARSWALLET_RESEND_OTP_REPLY // 5600
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_STARSWALLET_OTP_RECEIVED (cli) ------------------------------------------
	Message MSG_CASHIER_STARSWALLET_OTP_RECEIVED // 5601, PYR-37328
	{
		// empty
	};
	
	Message MSG_CASHIER_STARSWALLET_OTP_RECEIVED_REPLY // 5602
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_IND_USER_TAX_INFO (cli) ------------------------------------------
	Message MSG_CASHIER_GET_IND_USER_TAX_INFO // 5603, PYR-30309
	{
		INT32 cashoutAmount min -1 max MAX_BANKROLL_SIZE; // -1 means that the client is interested only in 'coefficients' (totalBalance, unUsedBalance, taxableCashout)
	};
	
	Message MSG_CASHIER_GET_IND_USER_TAX_INFO_REPLY // 5604
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			INT32 taxAmount;
			INT32 totalBalance;
			INT32 unUsedBalance;
			INT32 taxableCashout;
			INT32 indiaTaxFreeCashout;
			INT32 indiaTaxRate_x1M;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_CC_BIN_CHECK (cli) ------------------------------------------
	Message MSG_CASHIER_CC_BIN_CHECK // 5606, PYR-45337
	{
		PString cardBin maxlen 100; // minlen should not be constrained, the code checks if length is < 6 and replies with a custom error code
	};
	
	Message MSG_CASHIER_CC_BIN_CHECK_REPLY // 5607
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			bool bHostile;
			BYTE paySystemByte;
		}
	};

	//--------------------------------------------- MSG_CASHIER_BONUS_CHECK (cli) ------------------------------------------
	Message MSG_CASHIER_BONUS_CHECK // 5608, PYR-52613
	{
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		PString bonusCode maxlen BONUS_CODE_LEN;
	};
	
	Message MSG_CASHIER_BONUS_CHECK_REPLY // 5609
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_NET_REPORT_BRIEF (cli) ------------------------------------------
	Message MSG_CASHIER_GET_NET_REPORT_BRIEF // 5618, PYR-59305
	{
	};
	
	//--------------------------------------------- MSG_CASHIER_GET_USER_COUNTRY_PHONE_PREFIX (cli) ------------------------------------------
	Message MSG_CASHIER_GET_USER_COUNTRY_PHONE_PREFIX // 5622, PYR-61756
	{
	};
	
	Message MSG_CASHIER_GET_USER_COUNTRY_PHONE_PREFIX_REPLY // 5623
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString countryPrefix;
		}
	};

	//--------------------------------------------- MSG_CASHIER_GET_AG_OPERATOR_BALANCE (cli) ------------------------------------------
	Message MSG_CASHIER_GET_AG_OPERATOR_BALANCE // 5624, PYR-52150
	{
		PString balanceCurrency maxlen CURRENCY_LEN;
	};

	Message MSG_CASHIER_GET_AG_OPERATOR_BALANCE_REPLY // 5625
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString operatorCurrency;
			INT64 operatorAmount;
			PString balanceCurrency;
			INT64 balanceAmount;
		}
	};

	//--------------------------------------------- MSG_CASHIER_GET_TRANSINFO (cli) ------------------------------------------
	Message MSG_CASHIER_GET_TRANSINFO // 5626, PYR-57431
	{
		UINT32 transId; 
	}; 

	Message MSG_CASHIER_GET_TRANSINFO_REPLY // 5627
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 transId; 
			PString status; 
			BYTE paysystemByte; 
			PString gateway; 
			INT32 procAmount; 
			PString procCurrency; 
			INT32 balanceAmount; 
			PString balanceCurrency; 
		}
	};

	// NOTE: obsolete messages (faulty logic):
	// MSG_CASHIER_CITADEL_GET_BANKS - 5227
	// MSG_CASHIER_CITADEL_BANK_SELECTED - 5229
	// MSG_CASHIER_GCDEBIT_INIT2 - 5235
	// MSG_CASHIER_GCDEBIT_VERIFY - 5117
	// MSG_CASHIER_GCDEBIT_CONFIRM - 5119
	// MSG_CASHIER_GET_WU_SCHEMA - 5068
	// MSG_CASHIER_INIT_WU_TRANS - 5070
	// MSG_CASHIER_PRE_MTCN - 5072
	// MSG_CASHIER_SET_WU_MTCN - 5074
	// 
	Message MSG_CASHIER_SAVE_PAYSYSTEM_CONSENT // 7589, PYR-70835 
	{		
		BYTE paySystemByte min cardTypeFirst max cardTypeLast;
		INT32 consentValue enum {eUserPaysystemConsent_No, eUserPaysystemConsent_Yes}; //eUserPaysystemConsent in cashier.h
	};
	Message MSG_CASHIER_SAVE_PAYSYSTEM_CONSENT_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};

	//--------------------------------------------- MSG_CASHIER_CALC_ROMANIA_CASHOUT_TAX (cli) ------------------------------------------
	Message MSG_CASHIER_CALC_ROMANIA_CASHOUT_TAX // 5632, PYR-69310
	{
		INT64 cashoutAmount min 0 max MAX_BANKROLL_SIZE;
		PString balanceCurrency maxlen CURRENCY_LEN;
	};

	Message MSG_CASHIER_CALC_ROMANIA_CASHOUT_TAX_REPLY // 5633
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			INT64 taxAmountInBalanceCurrency;
			INT64 cashoutRemainder;
		}
	};

	//--------------------------------------------- MSG_CASHIER_GET_VANILLADIRECT_BARCODE (cli) ------------------------------------------
	Message MSG_CASHIER_GET_VANILLADIRECT_BARCODE // 5630, PYR-73312
	{
	};

	Message MSG_CASHIER_GET_VANILLADIRECT_BARCODE_REPLY // 5631
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString barcode;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_STARSWALLET_RESEND_MTAN (cli) ------------------------------------------
	Message MSG_CASHIER_STARSWALLET_RESEND_MTAN // 5636, PYR-51865
	{
	};

	Message MSG_CASHIER_STARSWALLET_RESEND_MTAN_REPLY // 5637
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_STARSWALLET_CHECK_MTAN (cli) ------------------------------------------
	Message MSG_CASHIER_STARSWALLET_CHECK_MTAN // 5638, PYR-51865
	{
		PString mtan maxlen 50;
	};

	Message MSG_CASHIER_STARSWALLET_CHECK_MTAN_REPLY // 5639
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};

	//--------------------------------------------- MSG_CASHIER_APPLEPAY_MERCHANT_VALIDATION (cli) ------------------------------------------
	Message MSG_CASHIER_APPLEPAY_MERCHANT_VALIDATION // 5640, PYR-36843
	{
		PString initiative maxlen 10000;
		PString validationURL maxlen 10000;
	};

	Message MSG_CASHIER_APPLEPAY_MERCHANT_VALIDATION_REPLY // 5641
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString merchantSession;
		}
	};

	MsgBodyStruct TempAccountLimitStatus // MSG_CASHIER_TEMP_ACCOUNT_CASHOUT_LIMIT_STATUS // PYR-89627
	
	{
		INT32 limitAmount default 0;
		PString limitCurrency;
		INT32 availAmount default 0;
		PString availBalanceCurrency;
	};
	Message MSG_CASHIER_GET_TEMP_ACCOUNT_CASHOUT_LIMIT_STATUS // 5642
	{
	};
	Message MSG_CASHIER_GET_TEMP_ACCOUNT_CASHOUT_LIMIT_STATUS_REPLY // 5643
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			bool enabled;
			TempAccountLimitStatus cashoutLimit;
		}
	};

	// PYR-108884
	Message MSG_CASHIER_GET_TEMP_ACCOUNT_DEPOSIT_STATUS // 5559
	{ // no content.
	};
	Message MSG_CASHIER_GET_TEMP_ACCOUNT_DEPOSIT_STATUS_REPLY // 5560
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			bool enabled;
			TempAccountLimitStatus limitStatus;
		}
	};
	//--------------------------------------------- MSG_CASHIER_STARSWALLET_CHECK_MTAN (cli) ------------------------------------------
	Message MSG_CASHIER_FDMS_NOTIFY_3DFORM_COMPLETED // 5647, PYR-80351
	{
		UINT32 transId;
	};

	Message MSG_CASHIER_FDMS_NOTIFY_3DFORM_COMPLETED_REPLY // 5648
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};

	Message MSG_CASHIER_GET_PLAID_DATA // 5651, PYR-116520
	{
		BYTE paysystemByte;
		INT32 amount min 0 max MAX_BANKROLL_SIZE;
		PString currency  maxlen CURRENCY_LEN;
	};

	Message MSG_CASHIER_GET_PLAID_DATA_REPLY // 5652
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString plaidEnvironment;
			PString plaidPublicKey;
			PString bankLookupPreference;
			bool isPlaidAccountInSystem;
		}
	};

	Message MSG_CASHIER_ADD_PLAID_ACCOUNT // 5653, PYR-116520
	{
		PString plaidPublicToken minlen 1;
		PString plaidBankAccountId minlen 1;
	};

	Message MSG_CASHIER_ADD_PLAID_ACCOUNT_REPLY // 5654
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};

};

//////////////////////////////////// AUTHENTICATED CLIENT LITE CONNECTION ////////////////////////////
// PYR-31838
namespace cli_lite
{
	//--------------------------------------------- MSG_CASHIER_USER_LOGGED_IN (cli_lite) ------------------------------------------
	Message MSG_CASHIER_USER_LOGGED_IN // 5527
	{
		// empty
	};
	
	Message MSG_CASHIER_USER_LOGGED_IN_REPLY // 5528
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	//--------------------------------------------- MSG_CASHIER_SET_USERROLL_STATUS (cli_lite) ------------------------------------------
	// same as in cli
	Message MSG_CASHIER_SET_USERROLL_STATUS // 5534
	{
		common_structs::SetUserRollStatus status;
	};
	
	Message MSG_CASHIER_SET_USERROLL_STATUS_REPLY // 5535
	{
		common_structs::SetUserRollStatusReply reply;
	};
	
	
	//--------------------------------------------- MSG_CASHIER_SET_GAMETICKET_STATUS (cli_lite) ------------------------------------------
	// same as in cli
	Message MSG_CASHIER_SET_GAMETICKET_STATUS // 5571
	{
		common_structs::SetGameTicketStatus status;
	};
	
	Message MSG_CASHIER_SET_GAMETICKET_STATUS_REPLY // 5572
	{
		common_structs::SetGameTicketStatusReply reply;
	};

};
