/**
 * SagStarterCommon_atf.cpp
 *
 * This file was auto-generated from SagStarterCommon_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor SagStarterCommon_atf.txt
 */
 
#include "SagStarterCommon_atf.h"

//=================================================================
//                    RegisterWithScriptId
//=================================================================

SagStarter::common::RegisterWithScriptId::RegisterWithScriptId()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SagStarter::common::RegisterWithScriptId::RegisterWithScriptId(RegisterWithScriptId&& _o)
	: userId(std::move(_o.userId))
	, buyInRM(std::move(_o.buyInRM))
	, buyInPlay(std::move(_o.buyInPlay))
	, buyInFpp(std::move(_o.buyInFpp))
	, tournPwd(std::move(_o.tournPwd))
	, useTicket(std::move(_o.useTicket))
	, buyInT(std::move(_o.buyInT))
	, buyInW(std::move(_o.buyInW))
	, currencyContext(std::move(_o.currencyContext))
	, sagScriptId(std::move(_o.sagScriptId))
	, numOfGames(std::move(_o.numOfGames))
	, admissionPrice(std::move(_o.admissionPrice))
	, admissions(std::move(_o.admissions))
	, sportsBookVisible(std::move(_o.sportsBookVisible))
{
}

SagStarter::common::RegisterWithScriptId& SagStarter::common::RegisterWithScriptId::operator=(RegisterWithScriptId&& _o)
{
	if(this != &_o)
	{
		userId = std::move(_o.userId);
		buyInRM = std::move(_o.buyInRM);
		buyInPlay = std::move(_o.buyInPlay);
		buyInFpp = std::move(_o.buyInFpp);
		tournPwd = std::move(_o.tournPwd);
		useTicket = std::move(_o.useTicket);
		buyInT = std::move(_o.buyInT);
		buyInW = std::move(_o.buyInW);
		currencyContext = std::move(_o.currencyContext);
		sagScriptId = std::move(_o.sagScriptId);
		numOfGames = std::move(_o.numOfGames);
		admissionPrice = std::move(_o.admissionPrice);
		admissions = std::move(_o.admissions);
		sportsBookVisible = std::move(_o.sportsBookVisible);
	}
	return *this;
}

#endif

void SagStarter::common::RegisterWithScriptId::clear()
{
	userId.clear();
	buyInRM = 0;
	buyInPlay = 0;
	buyInFpp = 0;
	tournPwd.clear();
	useTicket = 0;
	buyInT = 0;
	buyInW = 0;
	currencyContext.clear();
	sagScriptId = 0;
	numOfGames = 0;
	admissionPrice = 0;
	admissions.clear();
	sportsBookVisible = false;
}

bool SagStarter::common::RegisterWithScriptId::equals(const RegisterWithScriptId& _o) const
{
	return userId.equals(_o.userId) &&
		buyInRM == _o.buyInRM &&
		buyInPlay == _o.buyInPlay &&
		buyInFpp == _o.buyInFpp &&
		tournPwd.equals(_o.tournPwd) &&
		useTicket == _o.useTicket &&
		buyInT == _o.buyInT &&
		buyInW == _o.buyInW &&
		currencyContext.equals(_o.currencyContext) &&
		sagScriptId == _o.sagScriptId &&
		numOfGames == _o.numOfGames &&
		admissionPrice == _o.admissionPrice &&
		admissions.equals(_o.admissions) &&
		sportsBookVisible == _o.sportsBookVisible;
}

const char *SagStarter::common::RegisterWithScriptId::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("buyInRM=");
	_buf.appendInt(buyInRM);
	_buf.append(',');
	_buf.append("buyInPlay=");
	_buf.appendInt(buyInPlay);
	_buf.append(',');
	_buf.append("buyInFpp=");
	_buf.appendInt(buyInFpp);
	_buf.append(',');
	_buf.append("tournPwd=");
	_buf.append(tournPwd);
	_buf.append(',');
	_buf.append("useTicket=");
	_buf.appendUint(useTicket);
	_buf.append(',');
	_buf.append("buyInT=");
	_buf.appendInt(buyInT);
	_buf.append(',');
	_buf.append("buyInW=");
	_buf.appendInt(buyInW);
	_buf.append(',');
	_buf.append("currencyContext=");
	_buf.append('{'); Atf::XmlElement::encodeMsgBody(currencyContext, _buf); _buf.append('}');
	_buf.append(',');
	_buf.append("sagScriptId=");
	_buf.appendUint(sagScriptId);
	_buf.append(',');
	_buf.append("numOfGames=");
	_buf.appendUint(numOfGames);
	_buf.append(',');
	_buf.append("admissionPrice=");
	_buf.appendInt64(admissionPrice);
	_buf.append(',');
	_buf.append("admissions=");
	admissions.toTraceString(_buf);
	_buf.append(',');
	_buf.append("sportsBookVisible=");
	_buf.appendUint(sportsBookVisible);
	_buf.append('}');
	return _buf.c_str();
}

const char *SagStarter::common::RegisterWithScriptId::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	Atf::XmlElement::encodeAsXmlElement("buyInRM", buyInRM, _buf);
	Atf::XmlElement::encodeAsXmlElement("buyInPlay", buyInPlay, _buf);
	Atf::XmlElement::encodeAsXmlElement("buyInFpp", buyInFpp, _buf);
	Atf::XmlElement::encodeAsXmlElement("tournPwd", tournPwd, _buf);
	Atf::XmlElement::encodeAsXmlElement("useTicket", useTicket, _buf);
	Atf::XmlElement::encodeAsXmlElement("buyInT", buyInT, _buf);
	Atf::XmlElement::encodeAsXmlElement("buyInW", buyInW, _buf);
	Atf::XmlElement::encodeAsXmlElement("currencyContext", currencyContext, _buf);
	Atf::XmlElement::encodeAsXmlElement("sagScriptId", sagScriptId, _buf);
	Atf::XmlElement::encodeAsXmlElement("numOfGames", numOfGames, _buf);
	Atf::XmlElement::encodeAsXmlElement("admissionPrice", admissionPrice, _buf);
	admissions.toXmlString("admissions", _buf);
	Atf::XmlElement::encodeAsXmlElement("sportsBookVisible", sportsBookVisible, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool SagStarter::common::RegisterWithScriptId::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("userId"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
		}
		else if (_element.equals("buyInRM"))
		{
			buyInRM = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("buyInPlay"))
		{
			buyInPlay = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("buyInFpp"))
		{
			buyInFpp = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("tournPwd"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, tournPwd)) return false;
		}
		else if (_element.equals("useTicket"))
		{
			useTicket = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("buyInT"))
		{
			buyInT = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("buyInW"))
		{
			buyInW = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("currencyContext"))
		{
			if(!Atf::XmlElement::_movePBlock0ToMsgBody(_value, currencyContext)) return false;
		}
		else if (_element.equals("sagScriptId"))
		{
			sagScriptId = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("numOfGames"))
		{
			numOfGames = (BYTE)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("admissionPrice"))
		{
			admissionPrice = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("admissions"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< Common::AtfShared::UserTicketDataBase, 4 > >::FromXmlString(_value, admissions)) return false;
		}
		else if (_element.equals("sportsBookVisible"))
		{
			sportsBookVisible = (*_value.ptr() == '1');
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void SagStarter::common::RegisterWithScriptId::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userId);
	_msg.composeINT32(buyInRM);
	_msg.composeINT32(buyInPlay);
	_msg.composeINT32(buyInFpp);
	_msg.composeString(tournPwd);
	_msg.composeBYTE(useTicket);
	_msg.composeINT32(buyInT);
	_msg.composeINT32(buyInW);
	_msg.composeMsgBody(currencyContext);
	_msg.composeUINT32(sagScriptId);
	_msg.composeBYTE(numOfGames);
	_msg.composeINT64(admissionPrice);
	admissions.composeMsg(_msg, _ignoreJSON);
	_msg.composeBOOL(sportsBookVisible);
}

void SagStarter::common::RegisterWithScriptId::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseINT32(buyInRM);
	_parser.parseINT32(buyInPlay);
	_parser.parseINT32(buyInFpp);
	_parser.parseStringP(tournPwd);
	_parser.parseBYTE(useTicket);
	_parser.parseINT32(buyInT);
	_parser.parseINT32(buyInW);
	_parser.parseMsgBody(currencyContext);
	_parser.parseUINT32(sagScriptId);
	_parser.parseBYTE(numOfGames);
	_parser.parseINT64(admissionPrice);
	admissions.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(sportsBookVisible);
}

void SagStarter::common::RegisterWithScriptId::parseMsg(Atf::MsgParserWithJSON& _parser)
{
	_parser.parse("userId", userId);
	_parser.parse("buyInRM", buyInRM);
	_parser.parse("buyInPlay", buyInPlay);
	_parser.parse("buyInFpp", buyInFpp);
	_parser.parse("tournPwd", tournPwd);
	_parser.parse("useTicket", useTicket);
	_parser.parse("buyInT", buyInT);
	_parser.parse("buyInW", buyInW);
	_parser.parse("currencyContext", currencyContext);
	_parser.parse("sagScriptId", sagScriptId);
	_parser.parse("numOfGames", numOfGames);
	_parser.parse("admissionPrice", admissionPrice);
	_parser.parse("admissions", admissions);
	if(_parser.parseEnded()) return;
	_parser.parse("sportsBookVisible", sportsBookVisible);
}

const char *SagStarter::common::RegisterWithScriptId::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("buyInRM", buyInRM);
	_jsonstr.compose("buyInPlay", buyInPlay);
	_jsonstr.compose("buyInFpp", buyInFpp);
	_jsonstr.compose("tournPwd", tournPwd);
	_jsonstr.compose("useTicket", useTicket);
	_jsonstr.compose("buyInT", buyInT);
	_jsonstr.compose("buyInW", buyInW);
	_jsonstr.compose("currencyContext", currencyContext);
	_jsonstr.compose("sagScriptId", sagScriptId);
	_jsonstr.compose("numOfGames", numOfGames);
	_jsonstr.compose("admissionPrice", admissionPrice);
	_jsonstr.compose("admissions", admissions);
	_jsonstr.compose("sportsBookVisible", sportsBookVisible);
	return _buf.c_str();
}

void SagStarter::common::RegisterWithScriptId::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("buyInRM", buyInRM);
	_jparser.parseByNameThrow("buyInPlay", buyInPlay);
	_jparser.parseByNameThrow("buyInFpp", buyInFpp);
	_jparser.parseByNameThrow("tournPwd", tournPwd);
	_jparser.parseByNameThrow("useTicket", useTicket);
	_jparser.parseByNameThrow("buyInT", buyInT);
	_jparser.parseByNameThrow("buyInW", buyInW);
	_jparser.parseByNameThrow("currencyContext", currencyContext);
	_jparser.parseByNameThrow("sagScriptId", sagScriptId);
	_jparser.parseByNameThrow("numOfGames", numOfGames);
	_jparser.parseByNameThrow("admissionPrice", admissionPrice);
	_jparser.parseByNameThrow("admissions", admissions);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("sportsBookVisible", sportsBookVisible);
}

/* static */ void SagStarter::common::RegisterWithScriptId::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateIntMax(_descr, "userId", userId.length(), ATF_USER_NAME_MAX_LENGTH, _checker, __FILE__, __LINE__);
	INT32 buyInRM; _jparser.validateByNameThrow("buyInRM", buyInRM);
	AtfValidator::validateIntRange(_descr, "buyInRM", buyInRM, 0, ATF_SAG_MAX_BUYIN_REAL, _checker, __FILE__, __LINE__);
	INT32 buyInPlay; _jparser.validateByNameThrow("buyInPlay", buyInPlay);
	AtfValidator::validateIntRange(_descr, "buyInPlay", buyInPlay, 0, ATF_SAG_MAX_BUYIN_PM, _checker, __FILE__, __LINE__);
	INT32 buyInFpp; _jparser.validateByNameThrow("buyInFpp", buyInFpp);
	AtfValidator::validateIntRange(_descr, "buyInFpp", buyInFpp, 0, ATF_SAG_MAX_BUYIN_FPP, _checker, __FILE__, __LINE__);
	PString tournPwd; _jparser.validateByNameThrow("tournPwd", tournPwd);
	AtfValidator::validateIntMax(_descr, "tournPwd", tournPwd.length(), ATF_SAG_MAX_PASSWORD_LEN, _checker, __FILE__, __LINE__);
	BYTE useTicket; _jparser.validateByNameThrow("useTicket", useTicket);
	AtfValidator::validateIntRange(_descr, "useTicket", useTicket, 0, 1, _checker, __FILE__, __LINE__);
	INT32 buyInT; _jparser.validateByNameThrow("buyInT", buyInT);
	AtfValidator::validateIntRange(_descr, "buyInT", buyInT, 0, ATF_SAG_MAX_BUYIN_REAL, _checker, __FILE__, __LINE__);
	INT32 buyInW; _jparser.validateByNameThrow("buyInW", buyInW);
	AtfValidator::validateIntRange(_descr, "buyInW", buyInW, 0, 0, _checker, __FILE__, __LINE__);
	Atf::CopyableMsgBody currencyContext; _jparser.validateByNameThrow("currencyContext", currencyContext);
	AtfValidator::validateIntMax(_descr, "currencyContext", currencyContext._size(), 10000, _checker, __FILE__, __LINE__);
	UINT32 sagScriptId; _jparser.validateByNameThrow("sagScriptId", sagScriptId);
	AtfValidator::validateInt(_descr, "sagScriptId", sagScriptId, _checker, __FILE__, __LINE__);
	BYTE numOfGames; _jparser.validateByNameThrow("numOfGames", numOfGames);
	AtfValidator::validateIntRange(_descr, "numOfGames", numOfGames, 1, ATF_SAG_MAX_REG_GAMES, _checker, __FILE__, __LINE__);
	INT64 admissionPrice; _jparser.validateByNameThrow("admissionPrice", admissionPrice);
	AtfValidator::validateIntRange(_descr, "admissionPrice", admissionPrice, 0, ATF_SAG_MAX_ADMISSION_PRICE, _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< Common::AtfShared::UserTicketDataBase > admissions; _jparser.validateByNameThrow("admissions", admissions);
	AtfValidator::validateIntMax(_descr, "admissions", admissions.size(), ATF_SAG_MAX_ADMISSIONS, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	bool sportsBookVisible; _jparser.validateByNameThrow("sportsBookVisible", sportsBookVisible);
	AtfValidator::validateInt(_descr, "sportsBookVisible", sportsBookVisible, _checker, __FILE__, __LINE__);
}

/*static*/ void SagStarter::common::RegisterWithScriptId::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "userId", szUserId, ATF_USER_NAME_MAX_LENGTH, _checker, __FILE__, __LINE__);
	INT32 buyInRM; _parser.parseINT32(buyInRM);
	AtfValidator::validateIntRange(_descr, "buyInRM", buyInRM, 0, ATF_SAG_MAX_BUYIN_REAL, _checker, __FILE__, __LINE__);
	INT32 buyInPlay; _parser.parseINT32(buyInPlay);
	AtfValidator::validateIntRange(_descr, "buyInPlay", buyInPlay, 0, ATF_SAG_MAX_BUYIN_PM, _checker, __FILE__, __LINE__);
	INT32 buyInFpp; _parser.parseINT32(buyInFpp);
	AtfValidator::validateIntRange(_descr, "buyInFpp", buyInFpp, 0, ATF_SAG_MAX_BUYIN_FPP, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "tournPwd"); size_t szTournPwd = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "tournPwd", szTournPwd, ATF_SAG_MAX_PASSWORD_LEN, _checker, __FILE__, __LINE__);
	BYTE useTicket; _parser.parseBYTE(useTicket);
	AtfValidator::validateIntRange(_descr, "useTicket", useTicket, 0, 1, _checker, __FILE__, __LINE__);
	INT32 buyInT; _parser.parseINT32(buyInT);
	AtfValidator::validateIntRange(_descr, "buyInT", buyInT, 0, ATF_SAG_MAX_BUYIN_REAL, _checker, __FILE__, __LINE__);
	INT32 buyInW; _parser.parseINT32(buyInW);
	AtfValidator::validateIntRange(_descr, "buyInW", buyInW, 0, 0, _checker, __FILE__, __LINE__);
	size_t szCurrencyContext; _parser.skipMsgBody(szCurrencyContext);  /*currencyContext*/
	AtfValidator::validateIntMax(_descr, "currencyContext", szCurrencyContext, 10000, _checker, __FILE__, __LINE__);
	UINT32 sagScriptId; _parser.parseUINT32(sagScriptId);
	AtfValidator::validateInt(_descr, "sagScriptId", sagScriptId, _checker, __FILE__, __LINE__);
	BYTE numOfGames; _parser.parseBYTE(numOfGames);
	AtfValidator::validateIntRange(_descr, "numOfGames", numOfGames, 1, ATF_SAG_MAX_REG_GAMES, _checker, __FILE__, __LINE__);
	INT64 admissionPrice; _parser.parseINT64(admissionPrice);
	AtfValidator::validateIntRange(_descr, "admissionPrice", admissionPrice, 0, ATF_SAG_MAX_ADMISSION_PRICE, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szAdmissions = Atf::LAtfVector< Common::AtfShared::UserTicketDataBase, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("admissions"), _fieldsWithUnparsedContent);
	AtfValidator::validateIntMax(_descr, "admissions", szAdmissions, ATF_SAG_MAX_ADMISSIONS, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool sportsBookVisible; _parser.parseBOOL(sportsBookVisible);
	AtfValidator::validateInt(_descr, "sportsBookVisible", sportsBookVisible, _checker, __FILE__, __LINE__);
}

