/**
 * mtlobby_atf_cli_thin.h
 *
 * This file was auto-generated from mtlobby_atf_cli.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin mtlobby_atf_cli.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_MTLOBBY_ATF_CLI_THIN_H
#define ATF_PROTOCOL_DEFFILE_MTLOBBY_ATF_CLI_THIN_H

#include "dbm.h"
#include "lobby.h"
#include "mtlobby.h"
#include "ThinAtfUserDefStructs.h"
#include "Common_atf_thin.h"


namespace MTLobbyCli
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	struct UserStatsReply
	{
		// 44sss4sss14s42224 - place,totalPlayers,tableName,userName,city,chips,tableServer,tableObject,country,showCity,fromFlightId,fromFlightName,bountyAndKnockouts,rebuysDone,addonsDone,rebuysRemaining,headBounty
		UINT32 place;
		INT32 totalPlayers;
		PString tableName;
		PString userName;
		PString city;
		UINT32 chips;
		PString tableServer;
		PString tableObject;
		PString country;
		BYTE showCity;
		UINT32 fromFlightId;
		PString fromFlightName;
		INT32 bountyAndKnockouts;
		UINT16 rebuysDone;
		UINT16 addonsDone;
		INT16 rebuysRemaining;
		INT32 headBounty;

		UserStatsReply();
		void clear();
		bool equals(const UserStatsReply&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		UserStatsReply(UserStatsReply&&);
		UserStatsReply& operator=(UserStatsReply&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		UserStatsReply(const UserStatsReply&) = default;
		UserStatsReply& operator=(const UserStatsReply&) = default;
#endif
#endif
	};

	struct TournSpendLimit	// duplicated. See original at protocols/mtlobby/TournCommonStruct.txt
	{
		// M(b[44]) - M(limitImposed[spendAmount,spendLimit])
		bool limitImposed;

		INT32 spendAmount;
		INT32 spendLimit;

		TournSpendLimit();
		void clear();
		bool equals(const TournSpendLimit&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		TournSpendLimit(TournSpendLimit&&);
		TournSpendLimit& operator=(TournSpendLimit&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		TournSpendLimit(const TournSpendLimit&) = default;
		TournSpendLimit& operator=(const TournSpendLimit&) = default;
#endif
#endif
	};

	namespace publication
	{
		struct P_TicketType
		{
			// 2s - ticketTypeId,name
			UINT16 ticketTypeId;
			PString name;

			P_TicketType();
			void clear();
			bool equals(const P_TicketType&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			P_TicketType(P_TicketType&&);
			P_TicketType& operator=(P_TicketType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			P_TicketType(const P_TicketType&) = default;
			P_TicketType& operator=(const P_TicketType&) = default;
#endif
#endif
		};

		struct P_FppReward
		{
			// M(44) - M(siteId,reward)
			UINT32 siteId;
			UINT32 reward;

			P_FppReward();
			void clear();
			bool equals(const P_FppReward&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct P_MultiDayInfo
		{
			// M(444t) - M(props,dayOneStopValue,dayTwoStartMinutes,dayTwoStart)
			UINT32 props;
			INT32 dayOneStopValue;
			UINT32 dayTwoStartMinutes;
			SrvTime dayTwoStart;

			P_MultiDayInfo();
			void clear();
			bool equals(const P_MultiDayInfo&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_Static	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_STATIC_LEAF }
		{
			// 4444441btttt4144bbs4444444444421444444b4444444<2s>4I244s441444<4>M(4<4>4<4>)1444ts24121b4<M(44)>1s44b1I24444ss88bM(4444b)ts44441414414441444444<M(444t)>ss - tournamentId,buyIn,rake,startingChips,maxPlayers,playersPerTable,gameType,isHiLo,startingTime,registrationStarts,registrationEnds,seatingStarts,minPlayers,restricted,fppReward,fppBuyIn,isRestricted,isPwdProtected,name,numRebuys,rebuyChips,_obsolete_1,rebuyMaxChips,numAddOns,addOnChips,_obsolete_2,addOnMaxChips,scriptPrizeAddOn,guaranteedPrizePool,tournFlags,maxAllins,awardSchema,timeBank,unregistrationEnds_t,satelliteTarget,satelliteTargetBuyIn,rebuyFppPrice,addOnFppPrice,isPlayMoney,startingTime_t,registrationStarts_t,registrationEnds_t,seatingStarts_t,tournFlagsServInt,tournProp2,numTicketTypes<ticketTypeId,name>,tableLogo,finalTableText,chatLang,lobbyRestricted,fppFraction,currency,rebuyFppReward,addOnFppReward,fppRewardPercent,nPublishLobbyPlayersLess,bounty,numFallbackSatelliteTargets<fallbackSatelliteTargets>,M(numTeamProBounties<teamProBounties>,numBountyMultipliers<bountyMultipliers>),publPropFlag,multiDayTournProps,multiDayTournDayOneStopValue,multiDayTournDayTwoStartMinutes,multiDayTournDayTwoStarts,satelliteTargetReference,satelliteTargetReferenceLock,clubId,timedTournType,timedTournLevelsOrMinutes,timedTournPayoutStructure,_obsolete_3,numFppRewards<M(siteId,reward)>,speedDisplay,tournBrand,scalePM,blitzNormalDealingThreshold,_obsolete_4,progressiveKnockout,tableText,reEntryAllowed,tournMask,tournMask2,tournMask3,tournMask4,internalReference,favoriteReference,ticketPrice,tournFlags2,cannotUnregisterFromTarget,M(initialStacks,singleStackChips,forceReloadAllStacksInLevel,forceReloadAllStacksInMinutes,reloadStacksOnlyWhenEmpty),targetWhenStarts,admission,siteMask,publStartLevel,tournMask5,tournMask6,dealExclusionType,dealExclusionValue,timedTournPlayersPercent,_obsolete_5,spinGoStartDelay,rmPmLobby,brandMask,playerKnockOutAddOn,totalKnockOutAddOn,knockOutAddOnProgressive,sitGoStarterGameId,numStandardButton,lateRegDelta,finalTablePlusOne,multidayIndex,numMultiDayInfo<M(props,dayOneStopValue,dayTwoStartMinutes,dayTwoStart)>,criteria,groupReference
			UINT32 tournamentId;
			UINT32 buyIn;
			UINT32 rake;
			UINT32 startingChips;
			UINT32 maxPlayers;
			UINT32 playersPerTable;
			BYTE gameType;
			bool isHiLo;
			SrvTime startingTime;
			SrvTime registrationStarts;
			SrvTime registrationEnds;
			SrvTime seatingStarts;
			UINT32 minPlayers;
			BYTE restricted;
			UINT32 fppReward;
			UINT32 fppBuyIn;
			bool isRestricted;
			bool isPwdProtected;
			PString name;
			UINT32 numRebuys;
			UINT32 rebuyChips;
			UINT32 _obsolete_1;
			UINT32 rebuyMaxChips;
			UINT32 numAddOns;
			UINT32 addOnChips;
			UINT32 _obsolete_2;
			UINT32 addOnMaxChips;
			UINT32 scriptPrizeAddOn;
			UINT32 guaranteedPrizePool;
			UINT32 tournFlags;
			UINT16 maxAllins;
			BYTE awardSchema;
			UINT32 timeBank;
			UINT32 unregistrationEnds_t;
			UINT32 satelliteTarget;
			UINT32 satelliteTargetBuyIn;
			UINT32 rebuyFppPrice;
			UINT32 addOnFppPrice;
			bool isPlayMoney;
			UINT32 startingTime_t;
			UINT32 registrationStarts_t;
			UINT32 registrationEnds_t;
			UINT32 seatingStarts_t;
			UINT32 tournFlagsServInt;
			UINT32 tournProp2;
			ThinAtf::LAtfVector< P_TicketType , 4 > ticketTypes;
			UINT32 tableLogo;
			I18nPString finalTableText;
			UINT16 chatLang;
			UINT32 lobbyRestricted;
			UINT32 fppFraction;
			PString currency;
			UINT32 rebuyFppReward;
			UINT32 addOnFppReward;
			BYTE fppRewardPercent;
			UINT32 nPublishLobbyPlayersLess;
			UINT32 bounty;
			ThinAtf::LAtfVector< UINT32 , 4 > fallbackSatelliteTargets;

			ThinAtf::LAtfVector< UINT32 , 4 > teamProBounties;
			ThinAtf::LAtfVector< UINT32 , 4 > bountyMultipliers;

			BYTE publPropFlag;
			UINT32 multiDayTournProps;
			UINT32 multiDayTournDayOneStopValue;
			UINT32 multiDayTournDayTwoStartMinutes;
			SrvTime multiDayTournDayTwoStarts;
			PString satelliteTargetReference;
			UINT16 satelliteTargetReferenceLock;
			UINT32 clubId;
			BYTE timedTournType;
			UINT16 timedTournLevelsOrMinutes;
			BYTE timedTournPayoutStructure;
			bool _obsolete_3;
			ThinAtf::LAtfVector< P_FppReward , 4 > fppRewards;
			BYTE speedDisplay;
			PString tournBrand;
			UINT32 scalePM;
			UINT32 blitzNormalDealingThreshold;
			bool _obsolete_4;
			BYTE progressiveKnockout;
			I18nPString tableText;
			UINT16 reEntryAllowed;
			UINT32 tournMask;
			UINT32 tournMask2;
			UINT32 tournMask3;
			UINT32 tournMask4;
			PString internalReference;
			PString favoriteReference;
			INT64 ticketPrice;
			UINT64 tournFlags2;
			bool cannotUnregisterFromTarget;

			UINT32 initialStacks;
			UINT32 singleStackChips;
			UINT32 forceReloadAllStacksInLevel;
			UINT32 forceReloadAllStacksInMinutes;
			bool reloadStacksOnlyWhenEmpty;

			SrvTime targetWhenStarts;
			PString admission;
			UINT32 siteMask;
			UINT32 publStartLevel;
			UINT32 tournMask5;
			UINT32 tournMask6;
			BYTE dealExclusionType;
			UINT32 dealExclusionValue;
			BYTE timedTournPlayersPercent;
			UINT32 _obsolete_5;
			UINT32 spinGoStartDelay;
			BYTE rmPmLobby;
			UINT32 brandMask;
			UINT32 playerKnockOutAddOn;
			UINT32 totalKnockOutAddOn;
			BYTE knockOutAddOnProgressive;
			UINT32 sitGoStarterGameId;
			UINT32 numStandardButton;
			INT32 lateRegDelta;
			INT32 finalTablePlusOne;
			UINT32 multidayIndex;
			ThinAtf::LAtfVector< P_MultiDayInfo , 4 > multiDayInfo;
			PString criteria;
			PString groupReference;

			TournSubscr_Static();
			void clear();
			bool equals(const TournSubscr_Static&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Static(TournSubscr_Static&&);
			TournSubscr_Static& operator=(TournSubscr_Static&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Static(const TournSubscr_Static&) = default;
			TournSubscr_Static& operator=(const TournSubscr_Static&) = default;
#endif
#endif

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody1(CommMsgParser& _parser);
			static void validateAnonymousMsgBody1(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_Betting	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_BETTING_LEAF }
		{
			// 44441411[444444t]211b - loBet,hiBet,bringIn,smallBlind,structure,ante,blindsLevel,nextLevelOrdinal[nextAnte,nextSmallBlind,nextLoBet,nextHiBet,nextBringIn,nextLevelStart_t,nextLevelStart],olympicLevel,gameType,limit,isHiLo
			UINT32 loBet;
			UINT32 hiBet;
			UINT32 bringIn;
			UINT32 smallBlind;
			BYTE structure;
			UINT32 ante;
			BYTE blindsLevel;
			BYTE nextLevelOrdinal;

			UINT32 nextAnte;
			UINT32 nextSmallBlind;
			UINT32 nextLoBet;
			UINT32 nextHiBet;
			UINT32 nextBringIn;
			UINT32 nextLevelStart_t;
			SrvTime nextLevelStart;

			UINT16 olympicLevel;
			BYTE gameType;
			BYTE limit;
			bool isHiLo;

			TournSubscr_Betting();
			void clear();
			bool equals(const TournSubscr_Betting&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Betting(TournSubscr_Betting&&);
			TournSubscr_Betting& operator=(TournSubscr_Betting&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Betting(const TournSubscr_Betting&) = default;
			TournSubscr_Betting& operator=(const TournSubscr_Betting&) = default;
#endif
#endif
		};

		struct TournSubscr_Status	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_STATUS_LEAF }
		{
			// 4t4ssb4bb44b - status,newStartTimeFlightTourn,minutesLateFlightTourn,createdBy,cancelledBy,isBlitzTourn,timedTournPlayersThreshold,sameLevelFlightsAvailable,nextLevelFlightsAvailable,delayedPlaceDelta,activeFlags,isWinTheButtonTourn
			UINT32 status;
			SrvTime newStartTimeFlightTourn;
			UINT32 minutesLateFlightTourn;
			PString createdBy;
			PString cancelledBy;
			bool isBlitzTourn;
			UINT32 timedTournPlayersThreshold;
			bool sameLevelFlightsAvailable;
			bool nextLevelFlightsAvailable;
			INT32 delayedPlaceDelta;
			UINT32 activeFlags;
			bool isWinTheButtonTourn;

			TournSubscr_Status();
			void clear();
			bool equals(const TournSubscr_Status&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Status(TournSubscr_Status&&);
			TournSubscr_Status& operator=(TournSubscr_Status&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Status(const TournSubscr_Status&) = default;
			TournSubscr_Status& operator=(const TournSubscr_Status&) = default;
#endif
#endif
		};

		struct TournSubscr_Break	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_BREAK_LEAF }
		{
			// tt444b4I - nextBreakStarts,currentBreakStops,currentBreakDuration,nextBreakStarts_t,currentBreakStops_t,addOnEligibleBreak,blitzTableRound,message
			SrvTime nextBreakStarts;
			SrvTime currentBreakStops;
			UINT32 currentBreakDuration;
			UINT32 nextBreakStarts_t;
			UINT32 currentBreakStops_t;
			bool addOnEligibleBreak;
			UINT32 blitzTableRound;
			I18nPString message;

			TournSubscr_Break();
			void clear();
			bool equals(const TournSubscr_Break&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Break(TournSubscr_Break&&);
			TournSubscr_Break& operator=(TournSubscr_Break&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Break(const TournSubscr_Break&) = default;
			TournSubscr_Break& operator=(const TournSubscr_Break&) = default;
#endif
#endif
		};

		struct TournSubscr_Awards	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_AWARDS_LEAF }
		{
			// 44<4>44<4>41 - effectivePrizePool,numPrizes<prizes>,numTicketsWithTournId,numTickets<tickets>,additionalPrize,mixTournSatellite
			UINT32 effectivePrizePool;
			ThinAtf::LAtfVector< UINT32 , 4 > prizes;
			UINT32 numTicketsWithTournId;
			ThinAtf::LAtfVector< UINT32 , 4 > tickets;
			UINT32 additionalPrize;
			BYTE mixTournSatellite;

			TournSubscr_Awards();
			void clear();
			bool equals(const TournSubscr_Awards&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Awards(TournSubscr_Awards&&);
			TournSubscr_Awards& operator=(TournSubscr_Awards&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Awards(const TournSubscr_Awards&) = default;
			TournSubscr_Awards& operator=(const TournSubscr_Awards&) = default;
#endif
#endif
		};

		struct TournSubscr_AddOn	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_ADDON_LEAF }
		{
			// 1 - waiting
			BYTE waiting;

			TournSubscr_AddOn();
			void clear();
			bool equals(const TournSubscr_AddOn&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_PrizePool	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_PRIZEPOOL_LEAF }
		{
			// 4444444 - numUsers,prizePoolToPublish,totalRebuysDone,totalAddonsDone,payouts,flightIntermediatePayoutPrizePool,flightIntermediatePayoutPerUser
			UINT32 numUsers;
			INT32 prizePoolToPublish;
			UINT32 totalRebuysDone;
			UINT32 totalAddonsDone;
			INT32 payouts;
			INT32 flightIntermediatePayoutPrizePool;
			INT32 flightIntermediatePayoutPerUser;

			TournSubscr_PrizePool();
			void clear();
			bool equals(const TournSubscr_PrizePool&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_Bounty	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_BOUNTIES_LEAF }
		{
			// 444 - minBounty,maxBounty,averageBounty
			UINT32 minBounty;
			UINT32 maxBounty;
			UINT32 averageBounty;

			TournSubscr_Bounty();
			void clear();
			bool equals(const TournSubscr_Bounty&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_TableBanner	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_TABLE_MSG_LEAF }
		{
			// 424It44I - counter,duration,options,banner,when,flags,licenseMask,observerBanner
			UINT32 counter;
			UINT16 duration;
			UINT32 options;
			I18nPString banner;
			SrvTime when;
			UINT32 flags;
			UINT32 licenseMask;
			I18nPString observerBanner;

			TournSubscr_TableBanner();
			void clear();
			bool equals(const TournSubscr_TableBanner&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_TableBanner(TournSubscr_TableBanner&&);
			TournSubscr_TableBanner& operator=(TournSubscr_TableBanner&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_TableBanner(const TournSubscr_TableBanner&) = default;
			TournSubscr_TableBanner& operator=(const TournSubscr_TableBanner&) = default;
#endif
#endif
		};

		struct TournSubscr_OptEarlyStart	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_OPTEARLYSTART_LEAF }
		{
			// 1 - options
			BYTE options;

			TournSubscr_OptEarlyStart();
			void clear();
			bool equals(const TournSubscr_OptEarlyStart&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_SpinGoPrize_Vector
		{
			// 4<4> - numPrizes<prizes>
			ThinAtf::LAtfVector< UINT32 , 4 > prizes;

			TournSubscr_SpinGoPrize_Vector();
			void clear();
			bool equals(const TournSubscr_SpinGoPrize_Vector&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_SpinGoPrize_Vector(TournSubscr_SpinGoPrize_Vector&&);
			TournSubscr_SpinGoPrize_Vector& operator=(TournSubscr_SpinGoPrize_Vector&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_SpinGoPrize_Vector(const TournSubscr_SpinGoPrize_Vector&) = default;
			TournSubscr_SpinGoPrize_Vector& operator=(const TournSubscr_SpinGoPrize_Vector&) = default;
#endif
#endif
		};

		struct TournSubscr_SpinGoPrize_TargetReference
		{
			// 8ssI - tournamentId,server,instance,name
			UINT64 tournamentId;
			PString server;
			PString instance;
			I18nPString name;

			TournSubscr_SpinGoPrize_TargetReference();
			void clear();
			bool equals(const TournSubscr_SpinGoPrize_TargetReference&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_SpinGoPrize_TargetReference(TournSubscr_SpinGoPrize_TargetReference&&);
			TournSubscr_SpinGoPrize_TargetReference& operator=(TournSubscr_SpinGoPrize_TargetReference&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_SpinGoPrize_TargetReference(const TournSubscr_SpinGoPrize_TargetReference&) = default;
			TournSubscr_SpinGoPrize_TargetReference& operator=(const TournSubscr_SpinGoPrize_TargetReference&) = default;
#endif
#endif
		};

		struct TournSubscr_SpinGoPrize	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_SAG_LEAF }
		{
			// 4<8>44<I>44<8ssI>44<4<4>>4tbs4s4 - numSpinGoLevels<spinGoLevels>,spinGoMarker,numTickets<tickets>,level,numTargetReferences<tournamentId,server,instance,name>,spinGoMaxCashout,numSpinGoMaxLevels<numPrizes<prizes>>,animationType,animationEndTime,isJackpot,winner,freeBetStake,freeBetCurrency,freeBetsCampaignId
			ThinAtf::LAtfVector< INT64 , 4 > spinGoLevels;
			INT32 spinGoMarker;
			ThinAtf::LAtfVector< I18nPString , 4 > tickets;
			UINT32 level;
			ThinAtf::LAtfVector< TournSubscr_SpinGoPrize_TargetReference , 4 > targetReferences;
			UINT32 spinGoMaxCashout;
			ThinAtf::LAtfVector< TournSubscr_SpinGoPrize_Vector , 4 > spinGoMaxLevels;
			UINT32 animationType;
			SrvTime animationEndTime;
			bool isJackpot;
			PString winner;
			UINT32 freeBetStake;
			PString freeBetCurrency;
			UINT32 freeBetsCampaignId;

			TournSubscr_SpinGoPrize();
			void clear();
			bool equals(const TournSubscr_SpinGoPrize&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_SpinGoPrize(TournSubscr_SpinGoPrize&&);
			TournSubscr_SpinGoPrize& operator=(TournSubscr_SpinGoPrize&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_SpinGoPrize(const TournSubscr_SpinGoPrize&) = default;
			TournSubscr_SpinGoPrize& operator=(const TournSubscr_SpinGoPrize&) = default;
#endif
#endif
		};

		struct TournSubscr_PerHand	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_PER_HAND }
		{
			// b444 - intervalInHands,currentHandInLevel,totalHandsInLevel,handsUntilAllInLevel
			bool intervalInHands;
			INT32 currentHandInLevel;
			INT32 totalHandsInLevel;
			INT32 handsUntilAllInLevel;

			TournSubscr_PerHand();
			void clear();
			bool equals(const TournSubscr_PerHand&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_SpinGoSpinner	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_TRIPLE_SPINNER }
		{
			// t44444b - time,choice,spinner1,spinner2,spinner3,cashout,timeout
			SrvTime time;
			UINT32 choice;
			UINT32 spinner1;
			UINT32 spinner2;
			UINT32 spinner3;
			UINT32 cashout;
			bool timeout;

			TournSubscr_SpinGoSpinner();
			void clear();
			bool equals(const TournSubscr_SpinGoSpinner&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournExtraSubscr_Prize_Winner
		{
			// 41 - amount,percent
			UINT32 amount;
			BYTE percent;

			TournExtraSubscr_Prize_Winner();
			void clear();
			bool equals(const TournExtraSubscr_Prize_Winner&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournExtraSubscr_Prize_Prize
		{
			// 4444<41> - min,max,numTickets,numWinners<amount,percent>
			UINT32 min;
			UINT32 max;
			UINT32 numTickets;
			ThinAtf::LAtfVector< TournExtraSubscr_Prize_Winner , 4 > winners;

			TournExtraSubscr_Prize_Prize();
			void clear();
			bool equals(const TournExtraSubscr_Prize_Prize&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_Prize_Prize(TournExtraSubscr_Prize_Prize&&);
			TournExtraSubscr_Prize_Prize& operator=(TournExtraSubscr_Prize_Prize&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_Prize_Prize(const TournExtraSubscr_Prize_Prize&) = default;
			TournExtraSubscr_Prize_Prize& operator=(const TournExtraSubscr_Prize_Prize&) = default;
#endif
#endif
		};

		struct TournExtraSubscr_Prize	// Path { PUBL_TOURN_INFO_ROOT, PUBL_TOURN_INFO_PRIZES_LEAF }
		{
			// 44444444<4444<41>> - zero,creditPlayer,returnBuyInValue,rebuyPrice,rebuyRake,addOnPrice,addOnRake,numPrizes<min,max,numTickets,numWinners<amount,percent>>
			UINT32 zero;
			UINT32 creditPlayer;
			UINT32 returnBuyInValue;
			UINT32 rebuyPrice;
			UINT32 rebuyRake;
			UINT32 addOnPrice;
			UINT32 addOnRake;
			ThinAtf::LAtfVector< TournExtraSubscr_Prize_Prize , 4 > prizes;

			TournExtraSubscr_Prize();
			void clear();
			bool equals(const TournExtraSubscr_Prize&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_Prize(TournExtraSubscr_Prize&&);
			TournExtraSubscr_Prize& operator=(TournExtraSubscr_Prize&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_Prize(const TournExtraSubscr_Prize&) = default;
			TournExtraSubscr_Prize& operator=(const TournExtraSubscr_Prize&) = default;
#endif
#endif
		};

		struct TournExtraSubscr_Rake_SitesPerCountry
		{
			// s4 - country,sites
			PString country;
			UINT32 sites;

			TournExtraSubscr_Rake_SitesPerCountry();
			void clear();
			bool equals(const TournExtraSubscr_Rake_SitesPerCountry&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_Rake_SitesPerCountry(TournExtraSubscr_Rake_SitesPerCountry&&);
			TournExtraSubscr_Rake_SitesPerCountry& operator=(TournExtraSubscr_Rake_SitesPerCountry&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_Rake_SitesPerCountry(const TournExtraSubscr_Rake_SitesPerCountry&) = default;
			TournExtraSubscr_Rake_SitesPerCountry& operator=(const TournExtraSubscr_Rake_SitesPerCountry&) = default;
#endif
#endif
		};

		struct TournExtraSubscr_Rake_SitesPerCountryEx
		{
			// sm - country,sitesEx
			PString country;
			PBitmask sitesEx;

			TournExtraSubscr_Rake_SitesPerCountryEx();
			void clear();
			bool equals(const TournExtraSubscr_Rake_SitesPerCountryEx&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_Rake_SitesPerCountryEx(TournExtraSubscr_Rake_SitesPerCountryEx&&);
			TournExtraSubscr_Rake_SitesPerCountryEx& operator=(TournExtraSubscr_Rake_SitesPerCountryEx&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_Rake_SitesPerCountryEx(const TournExtraSubscr_Rake_SitesPerCountryEx&) = default;
			TournExtraSubscr_Rake_SitesPerCountryEx& operator=(const TournExtraSubscr_Rake_SitesPerCountryEx&) = default;
#endif
#endif
		};

		struct TournExtraSubscr_Rake	// Path { PUBL_TOURN_INFO_ROOT, PUBL_TOURN_INFO_REBUYRAKECOUNTRIES_LEAF }
		{
			// 444<s4>mm4<sm> - sites4AllCountries,sitesNoRake,numSitesPerCountry<country,sites>,sites4AllCountriesEx,sitesNoRakeEx,numSitesPerCountryEx<country,sitesEx>
			UINT32 sites4AllCountries;
			UINT32 sitesNoRake;
			ThinAtf::LAtfVector< TournExtraSubscr_Rake_SitesPerCountry , 4 > sitesPerCountry;

			PBitmask sites4AllCountriesEx;
			PBitmask sitesNoRakeEx;
			ThinAtf::LAtfVector< TournExtraSubscr_Rake_SitesPerCountryEx , 4 > sitesPerCountryEx;

			TournExtraSubscr_Rake();
			void clear();
			bool equals(const TournExtraSubscr_Rake&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_Rake(TournExtraSubscr_Rake&&);
			TournExtraSubscr_Rake& operator=(TournExtraSubscr_Rake&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_Rake(const TournExtraSubscr_Rake&) = default;
			TournExtraSubscr_Rake& operator=(const TournExtraSubscr_Rake&) = default;
#endif
#endif
		};

		struct TournI18nSubscr_Name	// Path { PUBL_TOURN_I18N_ROOT, PUBL_TOURN_I18N_NAME_LEAF }
		{
			// s - name
			PString name;

			TournI18nSubscr_Name();
			void clear();
			bool equals(const TournI18nSubscr_Name&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournI18nSubscr_Name(TournI18nSubscr_Name&&);
			TournI18nSubscr_Name& operator=(TournI18nSubscr_Name&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournI18nSubscr_Name(const TournI18nSubscr_Name&) = default;
			TournI18nSubscr_Name& operator=(const TournI18nSubscr_Name&) = default;
#endif
#endif
		};
	};

	namespace cli
	{
		struct CurrencyContextStruct
		{
			//! M(t4< <FIXME>CommonThin::AtfShared::ConvRatesAndMarginsStruct</FIXME> >) - M(srvTime,numConvRatesAndMargins< <FIXME>CommonThin::AtfShared::ConvRatesAndMarginsStruct</FIXME> >)
			SrvTime srvTime;
			ThinAtf::LAtfVector< CommonThin::AtfShared::ConvRatesAndMarginsStruct, 4 > convRatesAndMargins;

			CurrencyContextStruct();
			void clear();
			bool equals(const CurrencyContextStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			CurrencyContextStruct(CurrencyContextStruct&&);
			CurrencyContextStruct& operator=(CurrencyContextStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			CurrencyContextStruct(const CurrencyContextStruct&) = default;
			CurrencyContextStruct& operator=(const CurrencyContextStruct&) = default;
#endif
#endif
		};

		struct OneAccountStruct
		{
			// M(s84444) - M(currency,convRate,chips,tChips,chipsDst,tChipsDst)
			PString currency;
			INT64 convRate;
			INT32 chips;
			INT32 tChips;
			INT32 chipsDst;
			INT32 tChipsDst;

			OneAccountStruct();
			void clear();
			bool equals(const OneAccountStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			OneAccountStruct(OneAccountStruct&&);
			OneAccountStruct& operator=(OneAccountStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			OneAccountStruct(const OneAccountStruct&) = default;
			OneAccountStruct& operator=(const OneAccountStruct&) = default;
#endif
#endif
		};

		struct ClientCurrencyContext
		{
			// M(s444<M(s84444)>48444) - M(currencyDst,availForSpendingDst,unclearedDst,numOneAcct<M(currency,convRate,chips,tChips,chipsDst,tChipsDst)>,flags,flags2,userRollId,rollAmount,availWithoutConv)
			PString currencyDst;
			INT32 availForSpendingDst;
			INT32 unclearedDst;
			ThinAtf::LAtfVector< OneAccountStruct, 4 > oneAcct;
			UINT32 flags;
			UINT64 flags2;
			UINT32 userRollId;
			INT32 rollAmount;
			INT32 availWithoutConv;

			ClientCurrencyContext();
			void clear();
			bool equals(const ClientCurrencyContext&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClientCurrencyContext(ClientCurrencyContext&&);
			ClientCurrencyContext& operator=(ClientCurrencyContext&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClientCurrencyContext(const ClientCurrencyContext&) = default;
			ClientCurrencyContext& operator=(const ClientCurrencyContext&) = default;
#endif
#endif
		};

		struct UserTicketData
		{
			// s44 - admissionId,totalCount,reserved
			PString admissionId;
			UINT32 totalCount;
			UINT32 reserved;

			UserTicketData();
			void clear();
			bool equals(const UserTicketData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UserTicketData(UserTicketData&&);
			UserTicketData& operator=(UserTicketData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UserTicketData(const UserTicketData&) = default;
			UserTicketData& operator=(const UserTicketData&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_WHERE_IS_PLAYER
		{
			// s - userName
			PString userName;

			Protocol_MTL_LOBBY_WHERE_IS_PLAYER();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_WHERE_IS_PLAYER; }
			static const char *getMsgIdString() { return "MTL_LOBBY_WHERE_IS_PLAYER"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER(Protocol_MTL_LOBBY_WHERE_IS_PLAYER&&);
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER& operator=(Protocol_MTL_LOBBY_WHERE_IS_PLAYER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER&) = default;
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER& operator=(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY
		{
			//! 2 <FIXME_COND_IF> 4 <FIXME_COND_ELSE> ssb <FIXME_COND_ELSE> s <FIXME_COND_ENDIF>  - errCode <FIXME_COND_IF> ,place <FIXME_COND_ELSE> ,tableServer,tableObject,flags <FIXME_COND_ELSE> ,errDescr <FIXME_COND_ENDIF> 
			INT16 errCode;

			UINT32 place;

			PString tableServer;
			PString tableObject;
			bool flags;

			PString errDescr;

			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_WHERE_IS_PLAYER_REPLY; }
			static const char *getMsgIdString() { return "MTL_LOBBY_WHERE_IS_PLAYER_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY(Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&&);
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY& operator=(Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&) = default;
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY& operator=(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS
		{
			// s - userName
			PString userName;

			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_TOURNAMENT_USER_STATS; }
			static const char *getMsgIdString() { return "MTL_LOBBY_TOURNAMENT_USER_STATS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&&);
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS& operator=(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&) = default;
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS& operator=(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY
		{
			// 2[s|44sss4sss14s42224] - errCode[errDescr|place,totalPlayers,tableName,userName,city,chips,tableServer,tableObject,country,showCity,fromFlightId,fromFlightName,bountyAndKnockouts,rebuysDone,addonsDone,rebuysRemaining,headBounty]
			INT16 errCode;

			PString errDescr;

			UserStatsReply reply;

			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY; }
			static const char *getMsgIdString() { return "MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&&);
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY& operator=(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&) = default;
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY& operator=(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_TOURN_REG_INFO
		{
			// s44 - userId,tournId,tournRegInfoFlags
			PString userId;
			UINT32 tournId;
			UINT32 tournRegInfoFlags;

			Protocol_MSG_LOBBY_TOURN_REG_INFO();
			void clear();
			bool equals(const Protocol_MSG_LOBBY_TOURN_REG_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBY_TOURN_REG_INFO; }
			static const char *getMsgIdString() { return "MSG_LOBBY_TOURN_REG_INFO"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_TOURN_REG_INFO(Protocol_MSG_LOBBY_TOURN_REG_INFO&&);
			Protocol_MSG_LOBBY_TOURN_REG_INFO& operator=(Protocol_MSG_LOBBY_TOURN_REG_INFO&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_TOURN_REG_INFO(const Protocol_MSG_LOBBY_TOURN_REG_INFO&) = default;
			Protocol_MSG_LOBBY_TOURN_REG_INFO& operator=(const Protocol_MSG_LOBBY_TOURN_REG_INFO&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY
		{
			//! 2 <FIXME_COND_IF> ss4bM(b[44]) <FIXME_COND_ELSE> ss4b <FIXME_COND_ELSE> 444s11444444s111sbM()M()ts84144144b84<s44>8M(b[44]) <FIXME_COND_ENDIF>  - errCode <FIXME_COND_IF> ,errDescr,currency,buyInAndRake,enoughMoneyInOtherCurrency,M(limitImposed[spendAmount,spendLimit]) <FIXME_COND_ELSE> ,errDescr,currency,buyInAndRake,enoughMoneyInOtherCurrency <FIXME_COND_ELSE> ,buyIn,rake,fpp,admissionId,isPlayMoney,isPwdProtected,userChips,userPlayChips,userFpp,numTickets,tChips,wChips,preRegMsg,game,isHiLo,structure,currency,enoughMoneyInOtherCurrency,M(),M(),whenStartAbs,tournName,playChips64,scalePM,speed,minPlayers,maxPlayers,maxPerTable,tournFlags,knockout,isProportional,admPrice,numEffectiveAdmissions<admissionId,totalCount,reserved>,tournFlags2,M(limitImposed[spendAmount,spendLimit]) <FIXME_COND_ENDIF> 
			INT16 errCode;

			PString errDescr;
			PString currency;
			UINT32 buyInAndRake;	// yep. you need to know this data
			bool enoughMoneyInOtherCurrency;
			TournSpendLimit tournSpendLimit;

			UINT32 buyIn;
			UINT32 rake;
			UINT32 fpp;
			PString admissionId;
			BYTE isPlayMoney;
			BYTE isPwdProtected;
			UINT32 userChips;
			UINT32 userPlayChips;
			UINT32 userFpp;
			UINT32 numTickets;
			UINT32 tChips;
			UINT32 wChips;
			PString preRegMsg;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;

			ThinAtf::CopyableMsgBody currencyContext;
			ThinAtf::CopyableMsgBody clientCurrencyContext;
			SrvTime whenStartAbs;
			PString tournName;
			UINT64 playChips64;
			INT32 scalePM;
			BYTE speed;
			UINT32 minPlayers;
			UINT32 maxPlayers;
			BYTE maxPerTable;
			UINT32 tournFlags;
			UINT32 knockout;
			bool isProportional;
			INT64 admPrice;
			ThinAtf::LAtfVector< UserTicketData, 4 > effectiveAdmissions;
			INT64 tournFlags2;

			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY();
			void clear();
			bool equals(const Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBY_TOURN_REG_INFO_REPLY; }
			static const char *getMsgIdString() { return "MSG_LOBBY_TOURN_REG_INFO_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY(Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&&);
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY& operator=(Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY(const Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&) = default;
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY& operator=(const Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_REGISTER_USER
		{
			// s444s144M()s111t4 - userName,buyInRM,buyInPlay,buyInFpp,tournPwd,useTicket,buyInT,buyInW,M(),currency,game,hiLo,structure,startTime,clientRegFlags
			PString userName;
			INT32 buyInRM;
			INT32 buyInPlay;
			INT32 buyInFpp;
			PString tournPwd;
			BYTE useTicket;
			INT32 buyInT;
			INT32 buyInW;
			ThinAtf::CopyableMsgBody currencyContext;
			// the following is not parsed/used by server
			PString currency;
			BYTE game;
			BYTE hiLo;
			BYTE structure;
			SrvTime startTime;
			UINT32 clientRegFlags;

			Protocol_MTL_LOBBY_REGISTER_USER();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_REGISTER_USER&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_REGISTER_USER; }
			static const char *getMsgIdString() { return "MTL_LOBBY_REGISTER_USER"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_REGISTER_USER(Protocol_MTL_LOBBY_REGISTER_USER&&);
			Protocol_MTL_LOBBY_REGISTER_USER& operator=(Protocol_MTL_LOBBY_REGISTER_USER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_REGISTER_USER(const Protocol_MTL_LOBBY_REGISTER_USER&) = default;
			Protocol_MTL_LOBBY_REGISTER_USER& operator=(const Protocol_MTL_LOBBY_REGISTER_USER&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_REGISTER_USER_REPLY
		{
			//! 2s <FIXME_COND_IF> 2sbsss <FIXME_COND_ENDIF>  - errCode,errDescr <FIXME_COND_IF> ,maxAllins,registrationMsg,seatsAvailable,serverName,socialToken,clientNotification <FIXME_COND_ENDIF> 
			INT16 errCode;
			PString errDescr;

			INT16 maxAllins;
			PString registrationMsg;
			bool seatsAvailable;
			PString serverName;
			PString socialToken;
			PString clientNotification;

			Protocol_MTL_LOBBY_REGISTER_USER_REPLY();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_REGISTER_USER_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_REGISTER_USER_REPLY; }
			static const char *getMsgIdString() { return "MTL_LOBBY_REGISTER_USER_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_REGISTER_USER_REPLY(Protocol_MTL_LOBBY_REGISTER_USER_REPLY&&);
			Protocol_MTL_LOBBY_REGISTER_USER_REPLY& operator=(Protocol_MTL_LOBBY_REGISTER_USER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_REGISTER_USER_REPLY(const Protocol_MTL_LOBBY_REGISTER_USER_REPLY&) = default;
			Protocol_MTL_LOBBY_REGISTER_USER_REPLY& operator=(const Protocol_MTL_LOBBY_REGISTER_USER_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_UNREGISTER_USER
		{
			// 4s - tournId,userName
			UINT32 tournId;
			PString userName;

			Protocol_MTL_LOBBY_UNREGISTER_USER();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_UNREGISTER_USER&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_UNREGISTER_USER; }
			static const char *getMsgIdString() { return "MTL_LOBBY_UNREGISTER_USER"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_UNREGISTER_USER(Protocol_MTL_LOBBY_UNREGISTER_USER&&);
			Protocol_MTL_LOBBY_UNREGISTER_USER& operator=(Protocol_MTL_LOBBY_UNREGISTER_USER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_UNREGISTER_USER(const Protocol_MTL_LOBBY_UNREGISTER_USER&) = default;
			Protocol_MTL_LOBBY_UNREGISTER_USER& operator=(const Protocol_MTL_LOBBY_UNREGISTER_USER&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY
		{
			//! 2s <FIXME_COND_IF> 44444ss8 <FIXME_COND_ENDIF>  - errCode,errDescr <FIXME_COND_IF> ,refund,refundPlay,refundFpp,refundTChips,refundWChips,tournamentCurrency,refundCurrency,refundPlay64 <FIXME_COND_ENDIF> 
			INT16 errCode;
			PString errDescr;

			UINT32 refund;
			INT32 refundPlay;
			UINT32 refundFpp;
			UINT32 refundTChips;
			UINT32 refundWChips;
			PString tournamentCurrency;
			PString refundCurrency;
			UINT64 refundPlay64;

			Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_UNREGISTER_USER_REPLY; }
			static const char *getMsgIdString() { return "MTL_LOBBY_UNREGISTER_USER_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY(Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY&&);
			Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY& operator=(Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY(const Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY&) = default;
			Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY& operator=(const Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY&) = default;
#endif
#endif
		};

		struct ChipGraphRequest
		{
			// M(s4) - M(name,time)
			PString name;
			UINT32 time;

			ChipGraphRequest();
			void clear();
			bool equals(const ChipGraphRequest&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ChipGraphRequest(ChipGraphRequest&&);
			ChipGraphRequest& operator=(ChipGraphRequest&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ChipGraphRequest(const ChipGraphRequest&) = default;
			ChipGraphRequest& operator=(const ChipGraphRequest&) = default;
#endif
#endif
		};

		struct ChipGraphData
		{
			// 44 - time,val
			UINT32 time;
			UINT32 val;

			ChipGraphData();
			void clear();
			bool equals(const ChipGraphData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct ChipGraphReply
		{
			// M(s4<44>) - M(name,numData<time,val>)
			PString name;
			ThinAtf::LAtfVector< ChipGraphData, 4 > data;

			ChipGraphReply();
			void clear();
			bool equals(const ChipGraphReply&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ChipGraphReply(ChipGraphReply&&);
			ChipGraphReply& operator=(ChipGraphReply&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ChipGraphReply(const ChipGraphReply&) = default;
			ChipGraphReply& operator=(const ChipGraphReply&) = default;
#endif
#endif
		};

		struct Protocol_MTL_GET_CHIP_GRAPH_DATA
		{
			// 4<M(s4)> - numRequestData<M(name,time)>
			ThinAtf::LAtfVector< ChipGraphRequest, 4 > requestData;

			Protocol_MTL_GET_CHIP_GRAPH_DATA();
			void clear();
			bool equals(const Protocol_MTL_GET_CHIP_GRAPH_DATA&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_GET_CHIP_GRAPH_DATA; }
			static const char *getMsgIdString() { return "MTL_GET_CHIP_GRAPH_DATA"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_GET_CHIP_GRAPH_DATA(Protocol_MTL_GET_CHIP_GRAPH_DATA&&);
			Protocol_MTL_GET_CHIP_GRAPH_DATA& operator=(Protocol_MTL_GET_CHIP_GRAPH_DATA&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_GET_CHIP_GRAPH_DATA(const Protocol_MTL_GET_CHIP_GRAPH_DATA&) = default;
			Protocol_MTL_GET_CHIP_GRAPH_DATA& operator=(const Protocol_MTL_GET_CHIP_GRAPH_DATA&) = default;
#endif
#endif
		};

		struct Protocol_MTL_GET_CHIP_GRAPH_DATA_REPLY
		{
			// 44M() - n,hockeyTime,M()
			UINT32 n;
			UINT32 hockeyTime;
			ThinAtf::CopyableMsgBody chipGraphData;

			Protocol_MTL_GET_CHIP_GRAPH_DATA_REPLY();
			void clear();
			bool equals(const Protocol_MTL_GET_CHIP_GRAPH_DATA_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_GET_CHIP_GRAPH_DATA_REPLY; }
			static const char *getMsgIdString() { return "MTL_GET_CHIP_GRAPH_DATA_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_GET_CHIP_GRAPH_DATA_REPLY(Protocol_MTL_GET_CHIP_GRAPH_DATA_REPLY&&);
			Protocol_MTL_GET_CHIP_GRAPH_DATA_REPLY& operator=(Protocol_MTL_GET_CHIP_GRAPH_DATA_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_GET_CHIP_GRAPH_DATA_REPLY(const Protocol_MTL_GET_CHIP_GRAPH_DATA_REPLY&) = default;
			Protocol_MTL_GET_CHIP_GRAPH_DATA_REPLY& operator=(const Protocol_MTL_GET_CHIP_GRAPH_DATA_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS
		{
			// 4 - tournId
			UINT32 tournId;

			Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS();
			void clear();
			bool equals(const Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MTL_GET_SAME_LEVEL_FLIGHTS; }
			static const char *getMsgIdString() { return "MSG_MTL_GET_SAME_LEVEL_FLIGHTS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct TGMFlightData
		{
			// 4t4 - tournId,startTime,numUsers
			UINT32 tournId;
			SrvTime startTime;
			UINT32 numUsers;

			TGMFlightData();
			void clear();
			bool equals(const TGMFlightData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY
		{
			// 2[s|44<4t4>] - errCode[errDescr|numLevels,numFlightData<tournId,startTime,numUsers>]
			INT16 errCode;

			PString errDescr;

			UINT32 numLevels;
			ThinAtf::LAtfVector< TGMFlightData, 4 > flightData;

			Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY();
			void clear();
			bool equals(const Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY; }
			static const char *getMsgIdString() { return "MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY(Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY&&);
			Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY& operator=(Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY(const Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY&) = default;
			Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY& operator=(const Protocol_MSG_MTL_GET_SAME_LEVEL_FLIGHTS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_MTL_CHANGE_FLIGHT
		{
			// 4 - tournId
			UINT32 tournId;

			Protocol_MSG_MTL_CHANGE_FLIGHT();
			void clear();
			bool equals(const Protocol_MSG_MTL_CHANGE_FLIGHT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MTL_CHANGE_FLIGHT; }
			static const char *getMsgIdString() { return "MSG_MTL_CHANGE_FLIGHT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_MTL_CHANGE_FLIGHT_REPLY
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MSG_MTL_CHANGE_FLIGHT_REPLY();
			void clear();
			bool equals(const Protocol_MSG_MTL_CHANGE_FLIGHT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_MTL_CHANGE_FLIGHT_REPLY; }
			static const char *getMsgIdString() { return "MSG_MTL_CHANGE_FLIGHT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_MTL_CHANGE_FLIGHT_REPLY(Protocol_MSG_MTL_CHANGE_FLIGHT_REPLY&&);
			Protocol_MSG_MTL_CHANGE_FLIGHT_REPLY& operator=(Protocol_MSG_MTL_CHANGE_FLIGHT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_MTL_CHANGE_FLIGHT_REPLY(const Protocol_MSG_MTL_CHANGE_FLIGHT_REPLY&) = default;
			Protocol_MSG_MTL_CHANGE_FLIGHT_REPLY& operator=(const Protocol_MSG_MTL_CHANGE_FLIGHT_REPLY&) = default;
#endif
#endif
		};

		// PYR-61693: FTD-246
		struct LightTournData
		{
			// 4t4144 - status,whenStart,prizePoolToPublish,prizePoolUnit,prizePoolMoneyToPublish,numUsersReg
			UINT32 status;
			SrvTime whenStart;
			INT32 prizePoolToPublish;
			BYTE prizePoolUnit;
			INT32 prizePoolMoneyToPublish;
			UINT32 numUsersReg;

			LightTournData();
			void clear();
			bool equals(const LightTournData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
	};

	namespace unauth_cli
	{
		struct Protocol_MTL_LOBBY_WHERE_IS_PLAYER
		{
			// s - userName
			PString userName;

			Protocol_MTL_LOBBY_WHERE_IS_PLAYER();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_WHERE_IS_PLAYER; }
			static const char *getMsgIdString() { return "MTL_LOBBY_WHERE_IS_PLAYER"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER(Protocol_MTL_LOBBY_WHERE_IS_PLAYER&&);
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER& operator=(Protocol_MTL_LOBBY_WHERE_IS_PLAYER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER&) = default;
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER& operator=(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY
		{
			//! 2 <FIXME_COND_IF> 4 <FIXME_COND_ELSE> ssb <FIXME_COND_ELSE> s <FIXME_COND_ENDIF>  - errCode <FIXME_COND_IF> ,place <FIXME_COND_ELSE> ,tableServer,tableObject,flags <FIXME_COND_ELSE> ,errDescr <FIXME_COND_ENDIF> 
			INT16 errCode;

			UINT32 place;

			PString tableServer;
			PString tableObject;
			bool flags;

			PString errDescr;

			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_WHERE_IS_PLAYER_REPLY; }
			static const char *getMsgIdString() { return "MTL_LOBBY_WHERE_IS_PLAYER_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY(Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&&);
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY& operator=(Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&) = default;
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY& operator=(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS
		{
			// s - userName
			PString userName;

			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_TOURNAMENT_USER_STATS; }
			static const char *getMsgIdString() { return "MTL_LOBBY_TOURNAMENT_USER_STATS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&&);
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS& operator=(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&) = default;
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS& operator=(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY
		{
			// 2[s|44sss4sss14s42224] - errCode[errDescr|place,totalPlayers,tableName,userName,city,chips,tableServer,tableObject,country,showCity,fromFlightId,fromFlightName,bountyAndKnockouts,rebuysDone,addonsDone,rebuysRemaining,headBounty]
			INT16 errCode;

			PString errDescr;

			UserStatsReply reply;

			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY; }
			static const char *getMsgIdString() { return "MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&&);
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY& operator=(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&) = default;
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY& operator=(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&) = default;
#endif
#endif
		};

		struct SnapshotStruct
		{
			// ss - player0,player1
			PString player0;
			PString player1;

			SnapshotStruct();
			void clear();
			bool equals(const SnapshotStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SnapshotStruct(SnapshotStruct&&);
			SnapshotStruct& operator=(SnapshotStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SnapshotStruct(const SnapshotStruct&) = default;
			SnapshotStruct& operator=(const SnapshotStruct&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT
		{

			Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT();
			void clear();
			bool equals(const Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBY_OLYMPIC_SNAPSHOT; }
			static const char *getMsgIdString() { return "MSG_LOBBY_OLYMPIC_SNAPSHOT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY
		{
			// 2[s|24<ss>] - errCode[errDesc|snapshotOk,numSnapshotData<player0,player1>]
			INT16 errCode;

			PString errDesc;

			INT16 snapshotOk;
			ThinAtf::LAtfVector< SnapshotStruct, 4 > snapshotData;

			Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY();
			void clear();
			bool equals(const Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY; }
			static const char *getMsgIdString() { return "MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY(Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY&&);
			Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY& operator=(Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY(const Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY&) = default;
			Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY& operator=(const Protocol_MSG_LOBBY_OLYMPIC_SNAPSHOT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_TOURN_TEXT_INFO
		{

			Protocol_MTL_TOURN_TEXT_INFO();
			void clear();
			bool equals(const Protocol_MTL_TOURN_TEXT_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_TOURN_TEXT_INFO; }
			static const char *getMsgIdString() { return "MTL_TOURN_TEXT_INFO"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_TOURN_TEXT_INFO_REPLY
		{
			// II - name,messageBoardText
			I18nPString name;
			I18nPString messageBoardText;

			Protocol_MTL_TOURN_TEXT_INFO_REPLY();
			void clear();
			bool equals(const Protocol_MTL_TOURN_TEXT_INFO_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_TOURN_TEXT_INFO_REPLY; }
			static const char *getMsgIdString() { return "MTL_TOURN_TEXT_INFO_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_TOURN_TEXT_INFO_REPLY(Protocol_MTL_TOURN_TEXT_INFO_REPLY&&);
			Protocol_MTL_TOURN_TEXT_INFO_REPLY& operator=(Protocol_MTL_TOURN_TEXT_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_TOURN_TEXT_INFO_REPLY(const Protocol_MTL_TOURN_TEXT_INFO_REPLY&) = default;
			Protocol_MTL_TOURN_TEXT_INFO_REPLY& operator=(const Protocol_MTL_TOURN_TEXT_INFO_REPLY&) = default;
#endif
#endif
		};
	};

	namespace perm_cli
	{
		struct Protocol_MTL_LOBBY_WHERE_IS_PLAYER
		{
			// s - userName
			PString userName;

			Protocol_MTL_LOBBY_WHERE_IS_PLAYER();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_WHERE_IS_PLAYER; }
			static const char *getMsgIdString() { return "MTL_LOBBY_WHERE_IS_PLAYER"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER(Protocol_MTL_LOBBY_WHERE_IS_PLAYER&&);
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER& operator=(Protocol_MTL_LOBBY_WHERE_IS_PLAYER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER&) = default;
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER& operator=(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY
		{
			//! 2 <FIXME_COND_IF> 4 <FIXME_COND_ELSE> ssb <FIXME_COND_ELSE> s <FIXME_COND_ENDIF>  - errCode <FIXME_COND_IF> ,place <FIXME_COND_ELSE> ,tableServer,tableObject,flags <FIXME_COND_ELSE> ,errDescr <FIXME_COND_ENDIF> 
			INT16 errCode;

			UINT32 place;

			PString tableServer;
			PString tableObject;
			bool flags;

			PString errDescr;

			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_WHERE_IS_PLAYER_REPLY; }
			static const char *getMsgIdString() { return "MTL_LOBBY_WHERE_IS_PLAYER_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY(Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&&);
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY& operator=(Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&) = default;
			Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY& operator=(const Protocol_MTL_LOBBY_WHERE_IS_PLAYER_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS
		{
			// s - userName
			PString userName;

			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_TOURNAMENT_USER_STATS; }
			static const char *getMsgIdString() { return "MTL_LOBBY_TOURNAMENT_USER_STATS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&&);
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS& operator=(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&) = default;
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS& operator=(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY
		{
			// 2[s|44sss4sss14s42224] - errCode[errDescr|place,totalPlayers,tableName,userName,city,chips,tableServer,tableObject,country,showCity,fromFlightId,fromFlightName,bountyAndKnockouts,rebuysDone,addonsDone,rebuysRemaining,headBounty]
			INT16 errCode;

			PString errDescr;

			UserStatsReply reply;

			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY; }
			static const char *getMsgIdString() { return "MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&&);
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY& operator=(Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&) = default;
			Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY& operator=(const Protocol_MTL_LOBBY_TOURNAMENT_USER_STATS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_CLI_GOTO_TABLE
		{
			// ssbs4b1b84124 - server,instance,playMoney,currency,chips,sittingIn,seat,reconnect,handId,stat,action,rebuys,timeout
			PString server;
			PString instance;
			bool playMoney;
			PString currency;
			UINT32 chips;
			bool sittingIn;
			INT8 seat;
			bool reconnect;
			UINT64 handId;
			UINT32 stat;
			char action;
			UINT16 rebuys;
			INT32 timeout;

			Protocol_MTL_CLI_GOTO_TABLE();
			void clear();
			bool equals(const Protocol_MTL_CLI_GOTO_TABLE&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_CLI_GOTO_TABLE; }
			static const char *getMsgIdString() { return "GTT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_CLI_GOTO_TABLE(Protocol_MTL_CLI_GOTO_TABLE&&);
			Protocol_MTL_CLI_GOTO_TABLE& operator=(Protocol_MTL_CLI_GOTO_TABLE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_CLI_GOTO_TABLE(const Protocol_MTL_CLI_GOTO_TABLE&) = default;
			Protocol_MTL_CLI_GOTO_TABLE& operator=(const Protocol_MTL_CLI_GOTO_TABLE&) = default;
#endif
#endif
		};

		struct Protocol_MTL_USER_SITIN
		{

			Protocol_MTL_USER_SITIN();
			void clear();
			bool equals(const Protocol_MTL_USER_SITIN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_SITIN; }
			static const char *getMsgIdString() { return "MTL_USER_SITIN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_USER_SITIN_REPLY
		{
			// 2[s|ssbs4b] - errCode[errDescr|tableServer,tableObject,isPlayMoney,currency,chips,sittingIn]
			INT16 errCode;

			PString errDescr;

			PString tableServer;
			PString tableObject;
			bool isPlayMoney;
			PString currency;
			UINT32 chips;
			bool sittingIn;

			Protocol_MTL_USER_SITIN_REPLY();
			void clear();
			bool equals(const Protocol_MTL_USER_SITIN_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_SITIN_REPLY; }
			static const char *getMsgIdString() { return "MTL_USER_SITIN_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_USER_SITIN_REPLY(Protocol_MTL_USER_SITIN_REPLY&&);
			Protocol_MTL_USER_SITIN_REPLY& operator=(Protocol_MTL_USER_SITIN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_USER_SITIN_REPLY(const Protocol_MTL_USER_SITIN_REPLY&) = default;
			Protocol_MTL_USER_SITIN_REPLY& operator=(const Protocol_MTL_USER_SITIN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_USER_SITOUT
		{

			Protocol_MTL_USER_SITOUT();
			void clear();
			bool equals(const Protocol_MTL_USER_SITOUT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_SITOUT; }
			static const char *getMsgIdString() { return "MTL_USER_SITOUT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_USER_SITOUT_REPLY
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_MTL_USER_SITOUT_REPLY();
			void clear();
			bool equals(const Protocol_MTL_USER_SITOUT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_SITOUT_REPLY; }
			static const char *getMsgIdString() { return "MTL_USER_SITOUT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_USER_SITOUT_REPLY(Protocol_MTL_USER_SITOUT_REPLY&&);
			Protocol_MTL_USER_SITOUT_REPLY& operator=(Protocol_MTL_USER_SITOUT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_USER_SITOUT_REPLY(const Protocol_MTL_USER_SITOUT_REPLY&) = default;
			Protocol_MTL_USER_SITOUT_REPLY& operator=(const Protocol_MTL_USER_SITOUT_REPLY&) = default;
#endif
#endif
		};

		struct P_HomeGamesTourn
		{
			// 4[t4s4s1b4444b1sb44ss] - available[startTime,clubId,clubName,tournId,name,gameType,isHiLo,buyIn,rake,bounty,players,registered,limit,currency,playMoney,playersPerTable,state,server,serverObject]
			UINT32 available;

			SrvTime startTime;
			UINT32 clubId;
			PString clubName;
			UINT32 tournId;
			PString name;
			BYTE gameType;
			bool isHiLo;
			UINT32 buyIn;
			UINT32 rake;
			UINT32 bounty;
			UINT32 players;
			bool registered;
			BYTE limit;
			PString currency;
			bool playMoney;
			UINT32 playersPerTable;
			UINT32 state;
			PString server;
			PString serverObject;

			P_HomeGamesTourn();
			void clear();
			bool equals(const P_HomeGamesTourn&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			P_HomeGamesTourn(P_HomeGamesTourn&&);
			P_HomeGamesTourn& operator=(P_HomeGamesTourn&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			P_HomeGamesTourn(const P_HomeGamesTourn&) = default;
			P_HomeGamesTourn& operator=(const P_HomeGamesTourn&) = default;
#endif
#endif
		};

		struct P_FlightTourn
		{
			// b[Is] - available[name,server]
			bool available;

			I18nPString name;
			PString server;

			P_FlightTourn();
			void clear();
			bool equals(const P_FlightTourn&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			P_FlightTourn(P_FlightTourn&&);
			P_FlightTourn& operator=(P_FlightTourn&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			P_FlightTourn(const P_FlightTourn&) = default;
			P_FlightTourn& operator=(const P_FlightTourn&) = default;
#endif
#endif
		};

		struct Protocol_MTL_CLI_GOTO_FINISH
		{
			// 4ss4[t4s4s1b4444b1sb44ss]b[Is]4444t - place,message,socialToken,available[startTime,clubId,clubName,tournId,name,gameType,isHiLo,buyIn,rake,bounty,players,registered,limit,currency,playMoney,playersPerTable,state,server,serverObject],available[name,server],ownBounty,flags,award,bountyWon,reEntryDeadline
			UINT32 place;
			PString message;
			PString socialToken;
			P_HomeGamesTourn nextHomeGamesTourn;
			P_FlightTourn nextFlightTourn;
			UINT32 ownBounty;
			UINT32 flags;
			UINT32 award;
			UINT32 bountyWon;
			SrvTime reEntryDeadline;	// PYR-50362

			Protocol_MTL_CLI_GOTO_FINISH();
			void clear();
			bool equals(const Protocol_MTL_CLI_GOTO_FINISH&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_CLI_GOTO_FINISH; }
			static const char *getMsgIdString() { return "GTF"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_CLI_GOTO_FINISH(Protocol_MTL_CLI_GOTO_FINISH&&);
			Protocol_MTL_CLI_GOTO_FINISH& operator=(Protocol_MTL_CLI_GOTO_FINISH&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_CLI_GOTO_FINISH(const Protocol_MTL_CLI_GOTO_FINISH&) = default;
			Protocol_MTL_CLI_GOTO_FINISH& operator=(const Protocol_MTL_CLI_GOTO_FINISH&) = default;
#endif
#endif
		};

		struct Protocol_MTL_USER_REBUY
		{
			// 1 - numRebuys
			BYTE numRebuys;

			Protocol_MTL_USER_REBUY();
			void clear();
			bool equals(const Protocol_MTL_USER_REBUY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_REBUY; }
			static const char *getMsgIdString() { return "MTL_USER_REBUY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_USER_REBUY_REPLY
		{
			// 1[sM()|4444444s8222M(b[44])] - errCode[errDescr,M()|chipsRecieved,realMoneySpent,playMoneySpent,fppSpent,tChipsSpent,wMoneySpent,isAamsTicket,aamsTicket,playChipsSpent64,rebuysDone,addonsDone,rebuysRemaining,M(limitImposed[spendAmount,spendLimit])]
			BYTE errCode;

			PString errDescr;
			ThinAtf::CopyableMsgBody errMsgBody;

			UINT32 chipsRecieved;
			UINT32 realMoneySpent;
			UINT32 playMoneySpent;
			UINT32 fppSpent;
			UINT32 tChipsSpent;
			UINT32 wMoneySpent;
			UINT32 isAamsTicket;
			PString aamsTicket;
			INT64 playChipsSpent64;
			UINT16 rebuysDone;
			UINT16 addonsDone;
			INT16 rebuysRemaining;
			TournSpendLimit tournSpendLimit;

			Protocol_MTL_USER_REBUY_REPLY();
			void clear();
			bool equals(const Protocol_MTL_USER_REBUY_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_REBUY_REPLY; }
			static const char *getMsgIdString() { return "MTL_USER_REBUY_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_USER_REBUY_REPLY(Protocol_MTL_USER_REBUY_REPLY&&);
			Protocol_MTL_USER_REBUY_REPLY& operator=(Protocol_MTL_USER_REBUY_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_USER_REBUY_REPLY(const Protocol_MTL_USER_REBUY_REPLY&) = default;
			Protocol_MTL_USER_REBUY_REPLY& operator=(const Protocol_MTL_USER_REBUY_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_USER_ADDON
		{

			Protocol_MTL_USER_ADDON();
			void clear();
			bool equals(const Protocol_MTL_USER_ADDON&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_ADDON; }
			static const char *getMsgIdString() { return "MTL_USER_ADDON"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_USER_ADDON_REPLY
		{
			// 1[sM()|4444444s8222M(b[44])] - errCode[errDescr,M()|chipsRecieved,realMoneySpent,playMoneySpent,fppSpent,tChipsSpent,wMoneySpent,isAamsTicket,aamsTicket,playChipsSpent64,rebuysDone,addonsDone,rebuysRemaining,M(limitImposed[spendAmount,spendLimit])]
			BYTE errCode;

			PString errDescr;
			ThinAtf::CopyableMsgBody errMsgBody;

			UINT32 chipsRecieved;
			UINT32 realMoneySpent;
			UINT32 playMoneySpent;
			UINT32 fppSpent;
			UINT32 tChipsSpent;
			UINT32 wMoneySpent;
			UINT32 isAamsTicket;
			PString aamsTicket;
			INT64 playChipsSpent64;
			UINT16 rebuysDone;
			UINT16 addonsDone;
			INT16 rebuysRemaining;
			TournSpendLimit tournSpendLimit;

			Protocol_MTL_USER_ADDON_REPLY();
			void clear();
			bool equals(const Protocol_MTL_USER_ADDON_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_ADDON_REPLY; }
			static const char *getMsgIdString() { return "MTL_USER_ADDON_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_USER_ADDON_REPLY(Protocol_MTL_USER_ADDON_REPLY&&);
			Protocol_MTL_USER_ADDON_REPLY& operator=(Protocol_MTL_USER_ADDON_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_USER_ADDON_REPLY(const Protocol_MTL_USER_ADDON_REPLY&) = default;
			Protocol_MTL_USER_ADDON_REPLY& operator=(const Protocol_MTL_USER_ADDON_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_USER_DECLINE_REBUY
		{

			Protocol_MTL_USER_DECLINE_REBUY();
			void clear();
			bool equals(const Protocol_MTL_USER_DECLINE_REBUY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_DECLINE_REBUY; }
			static const char *getMsgIdString() { return "MTL_USER_DECLINE_REBUY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_SET_IMREADY
		{

			Protocol_MTL_SET_IMREADY();
			void clear();
			bool equals(const Protocol_MTL_SET_IMREADY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_SET_IMREADY; }
			static const char *getMsgIdString() { return "MTL_SET_IMREADY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_SET_IMREADY_REPLY
		{
			// 2b - errCode,userReady
			INT16 errCode;
			bool userReady;

			Protocol_MTL_SET_IMREADY_REPLY();
			void clear();
			bool equals(const Protocol_MTL_SET_IMREADY_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_SET_IMREADY_REPLY; }
			static const char *getMsgIdString() { return "MTL_SET_IMREADY_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_GET_IMREADY
		{

			Protocol_MTL_GET_IMREADY();
			void clear();
			bool equals(const Protocol_MTL_GET_IMREADY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_GET_IMREADY; }
			static const char *getMsgIdString() { return "MTL_GET_IMREADY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_GET_IMREADY_REPLY
		{
			// 2b - errCode,userReady
			INT16 errCode;
			bool userReady;

			Protocol_MTL_GET_IMREADY_REPLY();
			void clear();
			bool equals(const Protocol_MTL_GET_IMREADY_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_GET_IMREADY_REPLY; }
			static const char *getMsgIdString() { return "MTL_GET_IMREADY_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_USER_AUTO_RELOAD_STACKS_NOTIFY
		{
			// 4 - stacksReloaded
			UINT32 stacksReloaded;

			Protocol_MTL_USER_AUTO_RELOAD_STACKS_NOTIFY();
			void clear();
			bool equals(const Protocol_MTL_USER_AUTO_RELOAD_STACKS_NOTIFY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_AUTO_RELOAD_STACKS_NOTIFY; }
			static const char *getMsgIdString() { return "MTL_USER_AUTO_RELOAD_STACKS_NOTIFY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_USER_RELOAD_STACKS
		{
			// 4b - reqStacks,isSyncReload
			INT32 reqStacks;
			bool isSyncReload;

			Protocol_MTL_USER_RELOAD_STACKS();
			void clear();
			bool equals(const Protocol_MTL_USER_RELOAD_STACKS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_RELOAD_STACKS; }
			static const char *getMsgIdString() { return "MTL_USER_RELOAD_STACKS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MTL_USER_RELOAD_STACKS_REPLY
		{
			// 1[sM()|4] - errCode[errDescr,M()|unusedStacks]
			BYTE errCode;

			PString errDescr;
			ThinAtf::CopyableMsgBody errMsgBody;

			UINT32 unusedStacks;

			Protocol_MTL_USER_RELOAD_STACKS_REPLY();
			void clear();
			bool equals(const Protocol_MTL_USER_RELOAD_STACKS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_RELOAD_STACKS_REPLY; }
			static const char *getMsgIdString() { return "MTL_USER_RELOAD_STACKS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_USER_RELOAD_STACKS_REPLY(Protocol_MTL_USER_RELOAD_STACKS_REPLY&&);
			Protocol_MTL_USER_RELOAD_STACKS_REPLY& operator=(Protocol_MTL_USER_RELOAD_STACKS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_USER_RELOAD_STACKS_REPLY(const Protocol_MTL_USER_RELOAD_STACKS_REPLY&) = default;
			Protocol_MTL_USER_RELOAD_STACKS_REPLY& operator=(const Protocol_MTL_USER_RELOAD_STACKS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_USER_LIMBO_CLIENT_ACTIONTIMER_STARTED
		{

			Protocol_MTL_USER_LIMBO_CLIENT_ACTIONTIMER_STARTED();
			void clear();
			bool equals(const Protocol_MTL_USER_LIMBO_CLIENT_ACTIONTIMER_STARTED&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_USER_LIMBO_CLIENT_ACTIONTIMER_STARTED; }
			static const char *getMsgIdString() { return "MTL_USER_LIMBO_CLIENT_ACTIONTIMER_STARTED"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
	};
};

#endif
