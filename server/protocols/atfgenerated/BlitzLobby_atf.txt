#include "Common_atf${ATF_THIN_FILENAME_SUFFIX}.h"
#include "lobby.h"
#include "../storm/TableCommonStructs${ATF_THIN_FILENAME_SUFFIX}.h"

#define TOP_LEVEL_NAMESPACE BlitzLobby

namespace cli
{
	MsgBodyStruct Accounts
	{
		PString currency maxlen CURRENCY_LEN;
		INT64 convRate min 0 max 1000000000000LL; // 10^12 (one trillion) equals to 100M base multiplied by 100K (so far Iranian Rial has the worst ratio - 20K to 1USD)
		INT32 chips min 0 max MAX_BANKROLL_SIZE;
		INT32 tChips min 0 max MAX_BANKROLL_SIZE;
		INT32 chipsDst min 0 max MAX_BANKROLL_SIZE;
		INT32 tChipsDst min 0 max MAX_BANKROLL_SIZE;
	};
	
	Message BL_USER_BUYIN
	{
		INT32 buyIn max 2000000000;
		CommMsgBody currencyContext maxsize 10000; // server not using it
	};
	
	Message BL_USER_BUYIN_REPLY
	{
		INT16 errCode;
		if (errCode)
		{
			PString errDescrForUser;
		}
		else
		{
			UINT32 entry;
			PString thisAddress;
			PString tableObjectName;
			bool sittingOut;
			UINT32 chips;
			bool sitOutNextBlind;
			bool state3Plus;
			bool isTablePublicationOverConnection;
			BYTE numPlayingEntries;
			INT32 chipsAfter;
		}
	};
	
	Message BL_USER_OUT
	{
		UINT32 entryId; // id - no need to limit
		
	};
	
	MsgBodyStruct BetInfo
	{
		INT64 sumOfBets;
		INT64 wonAmount;
	};
	
	Message BL_USER_OUT_REPLY
	{
		UINT32 entryId;
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
		else
		{
			BetInfo betInfo;
		}
	};
	
	Message BL_USER_ADDON
	{
		UINT32 entryId; // id - no need to limit
		INT32 addOn max 2000000000;
		CommMsgBody currencyContext; // Server doesn't use it.
	};
	
	Message BL_USER_ADDON_REPLY
	{
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
		UINT32 entryId;
	};
	
	Message BL_USER_SITIN
	{
		UINT32 entryId; // id - no need to limit
	};
	
	Message BL_USER_SITIN_REPLY
	{
		UINT32 entryId;
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
		else
		{
			PString thisAddress;
			PString tableObjectName;
			bool sittingOut;
			UINT32 chips;
			bool sitOutNextBlind;
			bool state3Plus;
			bool isTablePublicationOverConnection;
		}
	};
	
	Message BL_USER_GET_ENTRIES
	{
		// empty message
	};
	
	MsgBodyStruct EntryBody
	{
		UINT32 entryId;
		PString thisAddress;
		PString tableObjectName;
		bool sittingOut;
		UINT32 chips;
		INT8 autoRebuyOpt;
		UINT16 autoRebuyBigBets;
		UINT16 fallUnderBigBets;
		UINT16 fallUnderPercents;
		bool sitOutNextBlind;
		bool state3Plus;
	};
	
	Message BL_USER_GET_ENTRIES_REPLY
	{
		vector<EntryBody> entryBodies;
	};
	
	Message BL_USER_WHERE_REPLY UWR
	{
		UINT32 entryId;
		INT16 err;
		if( err )
		{
			PString errStr;
		}
		else
		{
			PString thisAddress;
			PString tableObjectName;
			bool sittingOut;
			UINT32 chips;
			bool sitOutNextBlind;
			PString italianSessionId;
			bool state3Plus;
			UINT32 scalePM;
			bool privatePubl;
		}
	};

	Message BL_USER_GET_BUYIN_INFO
	{
		UINT32 entryId parseEndOptB4Me; // id - no need to limit
	};
	
	MsgBodyStruct OneAccount
	{
		PString currency;
		INT64 convRate;
		INT32 chips;
		INT32 tChips;
		INT32 chipsDst;
		INT32 tChipsDst;
	};

	MsgBodyStruct MoneyAvailInfo
	{
		PString currencyDst;
		INT32 availForSpendingDst;
		INT32 unclearedDst;
		vector<OneAccount> accounts;
		UINT32 flags;
		UINT64 flags2;
		UINT32 userRollId;
		INT32 rollAmount;
		INT32 availWithoutConv;
	};

	Message BL_USER_GET_BUYIN_INFO_REPLY
	{
		INT16 errCode;
		if (errCode)
		{
			PString errDescrForUser;
			PString currency;
			UINT32 minChipsLimit;
			bool enoughOnAllAccounts;
		}
		else
		{
				INT32 chips;
				INT32 chipsMin;
				INT32 maxBuyIn;
				INT32 chipsQuantum;
				BYTE playAddB;
				INT32 playAddU;
				MoneyAvailInfo clientCurrencyContext;
				INT8 entriesLeft;
				UINT32 entryId;
				INT32 chipsInPlay;
				bool enoughMoneyInOtherCurrencies;
				INT32 maxRebuyChips;
				INT32 totalRebuyChips;
				INT64 playChips64;
				INT32 scalePM;
				BYTE clientServiceFlag;
				INT32 defaultBuyIn;
		}
	};
	
	Message BL_USER_GET_INFO
	{
		// empty message
	};
	
	Message BL_USER_GET_INFO_REPLY
	{
		PString name;
		BYTE isOneToOne;
		BYTE isPlayMoney;
		BYTE nMaxPlayersPerTable;
		BYTE game;
		BYTE hiLo;
		UINT32 smartLoBet;
		UINT32 highBet;
		BYTE structure;
		UINT32 cap;
		UINT32 tableFlags;
		UINT16 chatLang;
		PString currency;
		UINT32 minChipsLimit;
		UINT32 maxBuyIn;
		UINT32 ante;
		PString itId;
		bool shortHanded;
		UINT32 scalePM;
		UINT32 noVppGainSites;
		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes parseEndOptB4Me;
	};
	
	Message BL_USER_SET_AUTOREBUY
	{
		UINT32 entryId; // id - no need to limit
		INT8 autoRebuyOpt min 0 max 100;
		UINT16 autoRebuyBigBets min 0 max 1000;
		UINT16 fallUnderBigBets min 0 max 1000;
		UINT16 fallUnderPercents min 0 max 100;
	};
	
	Message BL_USER_SET_AUTOREBUY_REPLY
	{
		UINT32 entryId;
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
	};
	
	Message BL_USER_SITOUT
	{
		UINT32 entryId; // id - no need to limit
	};
	
	Message BL_USER_SITOUT_REPLY
	{
		UINT32 entryId;
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
	};
	
	Message BL_USER_SITOUT_NEXTBB
	{
		UINT32 entryId; // id - no need to limit
		bool sitoutBB;
	};
	
	Message BL_USER_SITOUT_NEXTBB_REPLY
	{
		UINT32 entryId;
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
		else
		{
			bool sitOutNextBlind;
		}
	};
	
	Message BL_USER_SET_3PLUS
	{
		UINT32 entryId; // id - no need to limit
		bool state3Plus;
	};
	
	Message BL_USER_SET_3PLUS_REPLY
	{
		UINT32 entryId;
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
		else
		{
			bool state3Plus;
		}
	};
};
