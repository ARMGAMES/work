/**
 * Common_atf.cpp
 *
 * This file was auto-generated from Common_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor Common_atf.txt
 */
 
#include "Common_atf.h"

//=================================================================
//                    ConvRatesAndMarginsStruct
//=================================================================

Common::AtfShared::ConvRatesAndMarginsStruct::ConvRatesAndMarginsStruct()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Common::AtfShared::ConvRatesAndMarginsStruct::ConvRatesAndMarginsStruct(ConvRatesAndMarginsStruct&& _o)
	: rateSrc(std::move(_o.rateSrc))
	, rateDst(std::move(_o.rateDst))
	, rateMid(std::move(_o.rateMid))
	, rateFin(std::move(_o.rateFin))
	, mgnVal(std::move(_o.mgnVal))
	, amtMgnSrc(std::move(_o.amtMgnSrc))
	, amtMgnDst(std::move(_o.amtMgnDst))
	, amtMgnUS(std::move(_o.amtMgnUS))
	, curSrc(std::move(_o.curSrc))
	, amtSrc(std::move(_o.amtSrc))
	, amtSrcUS(std::move(_o.amtSrcUS))
	, curDst(std::move(_o.curDst))
	, amtDst(std::move(_o.amtDst))
	, amtDstNoMgn(std::move(_o.amtDstNoMgn))
	, amtDstUS(std::move(_o.amtDstUS))
	, intActionType(std::move(_o.intActionType))
{
}

Common::AtfShared::ConvRatesAndMarginsStruct& Common::AtfShared::ConvRatesAndMarginsStruct::operator=(ConvRatesAndMarginsStruct&& _o)
{
	if(this != &_o)
	{
		rateSrc = std::move(_o.rateSrc);
		rateDst = std::move(_o.rateDst);
		rateMid = std::move(_o.rateMid);
		rateFin = std::move(_o.rateFin);
		mgnVal = std::move(_o.mgnVal);
		amtMgnSrc = std::move(_o.amtMgnSrc);
		amtMgnDst = std::move(_o.amtMgnDst);
		amtMgnUS = std::move(_o.amtMgnUS);
		curSrc = std::move(_o.curSrc);
		amtSrc = std::move(_o.amtSrc);
		amtSrcUS = std::move(_o.amtSrcUS);
		curDst = std::move(_o.curDst);
		amtDst = std::move(_o.amtDst);
		amtDstNoMgn = std::move(_o.amtDstNoMgn);
		amtDstUS = std::move(_o.amtDstUS);
		intActionType = std::move(_o.intActionType);
	}
	return *this;
}

#endif

void Common::AtfShared::ConvRatesAndMarginsStruct::clear()
{
	rateSrc = 0;
	rateDst = 0;
	rateMid = 0;
	rateFin = 0;
	mgnVal = 0;
	amtMgnSrc = 0;
	amtMgnDst = 0;
	amtMgnUS = 0;
	curSrc.clear();
	amtSrc = 0;
	amtSrcUS = 0;
	curDst.clear();
	amtDst = 0;
	amtDstNoMgn = 0;
	amtDstUS = 0;
	intActionType = 0;
}

bool Common::AtfShared::ConvRatesAndMarginsStruct::equals(const ConvRatesAndMarginsStruct& _o) const
{
	return rateSrc == _o.rateSrc &&
		rateDst == _o.rateDst &&
		rateMid == _o.rateMid &&
		rateFin == _o.rateFin &&
		mgnVal == _o.mgnVal &&
		amtMgnSrc == _o.amtMgnSrc &&
		amtMgnDst == _o.amtMgnDst &&
		amtMgnUS == _o.amtMgnUS &&
		Atf::atfPStringEquals(curSrc, _o.curSrc) &&
		amtSrc == _o.amtSrc &&
		amtSrcUS == _o.amtSrcUS &&
		Atf::atfPStringEquals(curDst, _o.curDst) &&
		amtDst == _o.amtDst &&
		amtDstNoMgn == _o.amtDstNoMgn &&
		amtDstUS == _o.amtDstUS &&
		intActionType == _o.intActionType;
}

const char *Common::AtfShared::ConvRatesAndMarginsStruct::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("rateSrc=");
	_buf.appendUint64(rateSrc);
	_buf.append(',');
	_buf.append("rateDst=");
	_buf.appendUint64(rateDst);
	_buf.append(',');
	_buf.append("rateMid=");
	_buf.appendUint64(rateMid);
	_buf.append(',');
	_buf.append("rateFin=");
	_buf.appendUint64(rateFin);
	_buf.append(',');
	_buf.append("mgnVal=");
	_buf.appendInt(mgnVal);
	_buf.append(',');
	_buf.append("amtMgnSrc=");
	_buf.appendInt(amtMgnSrc);
	_buf.append(',');
	_buf.append("amtMgnDst=");
	_buf.appendInt(amtMgnDst);
	_buf.append(',');
	_buf.append("amtMgnUS=");
	_buf.appendInt(amtMgnUS);
	_buf.append(',');
	_buf.append("curSrc=");
	_buf.append(curSrc);
	_buf.append(',');
	_buf.append("amtSrc=");
	_buf.appendInt(amtSrc);
	_buf.append(',');
	_buf.append("amtSrcUS=");
	_buf.appendInt(amtSrcUS);
	_buf.append(',');
	_buf.append("curDst=");
	_buf.append(curDst);
	_buf.append(',');
	_buf.append("amtDst=");
	_buf.appendInt64(amtDst);
	_buf.append(',');
	_buf.append("amtDstNoMgn=");
	_buf.appendInt64(amtDstNoMgn);
	_buf.append(',');
	_buf.append("amtDstUS=");
	_buf.appendInt(amtDstUS);
	_buf.append(',');
	_buf.append("intActionType=");
	_buf.appendUint(intActionType);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::ConvRatesAndMarginsStruct::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("rateSrc", rateSrc, _buf);
	Atf::XmlElement::encodeAsXmlElement("rateDst", rateDst, _buf);
	Atf::XmlElement::encodeAsXmlElement("rateMid", rateMid, _buf);
	Atf::XmlElement::encodeAsXmlElement("rateFin", rateFin, _buf);
	Atf::XmlElement::encodeAsXmlElement("mgnVal", mgnVal, _buf);
	Atf::XmlElement::encodeAsXmlElement("amtMgnSrc", amtMgnSrc, _buf);
	Atf::XmlElement::encodeAsXmlElement("amtMgnDst", amtMgnDst, _buf);
	Atf::XmlElement::encodeAsXmlElement("amtMgnUS", amtMgnUS, _buf);
	Atf::XmlElement::encodeAsXmlElement("curSrc", curSrc, _buf);
	Atf::XmlElement::encodeAsXmlElement("amtSrc", amtSrc, _buf);
	Atf::XmlElement::encodeAsXmlElement("amtSrcUS", amtSrcUS, _buf);
	Atf::XmlElement::encodeAsXmlElement("curDst", curDst, _buf);
	Atf::XmlElement::encodeAsXmlElement("amtDst", amtDst, _buf);
	Atf::XmlElement::encodeAsXmlElement("amtDstNoMgn", amtDstNoMgn, _buf);
	Atf::XmlElement::encodeAsXmlElement("amtDstUS", amtDstUS, _buf);
	Atf::XmlElement::encodeAsXmlElement("intActionType", intActionType, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::ConvRatesAndMarginsStruct::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("rateSrc"))
		{
			rateSrc = (UINT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("rateDst"))
		{
			rateDst = (UINT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("rateMid"))
		{
			rateMid = (UINT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("rateFin"))
		{
			rateFin = (UINT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("mgnVal"))
		{
			mgnVal = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("amtMgnSrc"))
		{
			amtMgnSrc = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("amtMgnDst"))
		{
			amtMgnDst = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("amtMgnUS"))
		{
			amtMgnUS = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("curSrc"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, curSrc)) return false;
		}
		else if (_element.equals("amtSrc"))
		{
			amtSrc = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("amtSrcUS"))
		{
			amtSrcUS = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("curDst"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, curDst)) return false;
		}
		else if (_element.equals("amtDst"))
		{
			amtDst = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("amtDstNoMgn"))
		{
			amtDstNoMgn = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("amtDstUS"))
		{
			amtDstUS = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("intActionType"))
		{
			intActionType = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void Common::AtfShared::ConvRatesAndMarginsStruct::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT64(rateSrc);
	_msg.composeUINT64(rateDst);
	_msg.composeUINT64(rateMid);
	_msg.composeUINT64(rateFin);
	_msg.composeINT32(mgnVal);
	_msg.composeINT32(amtMgnSrc);
	_msg.composeINT32(amtMgnDst);
	_msg.composeINT32(amtMgnUS);
	_msg.composeString(curSrc);
	_msg.composeINT32(amtSrc);
	_msg.composeINT32(amtSrcUS);
	_msg.composeString(curDst);
	_msg.composeINT64(amtDst);
	_msg.composeINT64(amtDstNoMgn);
	_msg.composeINT32(amtDstUS);
	_msg.composeUINT32(intActionType);
}

void Common::AtfShared::ConvRatesAndMarginsStruct::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(rateSrc);
	_parser.parseUINT64(rateDst);
	_parser.parseUINT64(rateMid);
	_parser.parseUINT64(rateFin);
	_parser.parseINT32(mgnVal);
	_parser.parseINT32(amtMgnSrc);
	_parser.parseINT32(amtMgnDst);
	_parser.parseINT32(amtMgnUS);
	_parser.parseStringP(curSrc);
	_parser.parseINT32(amtSrc);
	_parser.parseINT32(amtSrcUS);
	_parser.parseStringP(curDst);
	_parser.parseINT64(amtDst);
	_parser.parseINT64(amtDstNoMgn);
	_parser.parseINT32(amtDstUS);
	_parser.parseUINT32(intActionType);
}

const char *Common::AtfShared::ConvRatesAndMarginsStruct::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("rateSrc", rateSrc);
	_jsonstr.compose("rateDst", rateDst);
	_jsonstr.compose("rateMid", rateMid);
	_jsonstr.compose("rateFin", rateFin);
	_jsonstr.compose("mgnVal", mgnVal);
	_jsonstr.compose("amtMgnSrc", amtMgnSrc);
	_jsonstr.compose("amtMgnDst", amtMgnDst);
	_jsonstr.compose("amtMgnUS", amtMgnUS);
	_jsonstr.compose("curSrc", curSrc);
	_jsonstr.compose("amtSrc", amtSrc);
	_jsonstr.compose("amtSrcUS", amtSrcUS);
	_jsonstr.compose("curDst", curDst);
	_jsonstr.compose("amtDst", amtDst);
	_jsonstr.compose("amtDstNoMgn", amtDstNoMgn);
	_jsonstr.compose("amtDstUS", amtDstUS);
	_jsonstr.compose("intActionType", intActionType);
	return _buf.c_str();
}

void Common::AtfShared::ConvRatesAndMarginsStruct::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("rateSrc", rateSrc);
	_jparser.parseByNameThrow("rateDst", rateDst);
	_jparser.parseByNameThrow("rateMid", rateMid);
	_jparser.parseByNameThrow("rateFin", rateFin);
	_jparser.parseByNameThrow("mgnVal", mgnVal);
	_jparser.parseByNameThrow("amtMgnSrc", amtMgnSrc);
	_jparser.parseByNameThrow("amtMgnDst", amtMgnDst);
	_jparser.parseByNameThrow("amtMgnUS", amtMgnUS);
	_jparser.parseByNameThrow("curSrc", curSrc);
	_jparser.parseByNameThrow("amtSrc", amtSrc);
	_jparser.parseByNameThrow("amtSrcUS", amtSrcUS);
	_jparser.parseByNameThrow("curDst", curDst);
	_jparser.parseByNameThrow("amtDst", amtDst);
	_jparser.parseByNameThrow("amtDstNoMgn", amtDstNoMgn);
	_jparser.parseByNameThrow("amtDstUS", amtDstUS);
	_jparser.parseByNameThrow("intActionType", intActionType);
}

/* static */ void Common::AtfShared::ConvRatesAndMarginsStruct::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT64 rateSrc; _jparser.validateByNameThrow("rateSrc", rateSrc);
	AtfValidator::validateUint(_descr, "rateSrc", rateSrc, _checker, __FILE__, __LINE__);
	UINT64 rateDst; _jparser.validateByNameThrow("rateDst", rateDst);
	AtfValidator::validateUint(_descr, "rateDst", rateDst, _checker, __FILE__, __LINE__);
	UINT64 rateMid; _jparser.validateByNameThrow("rateMid", rateMid);
	AtfValidator::validateUint(_descr, "rateMid", rateMid, _checker, __FILE__, __LINE__);
	UINT64 rateFin; _jparser.validateByNameThrow("rateFin", rateFin);
	AtfValidator::validateUint(_descr, "rateFin", rateFin, _checker, __FILE__, __LINE__);
	INT32 mgnVal; _jparser.validateByNameThrow("mgnVal", mgnVal);
	AtfValidator::validateInt(_descr, "mgnVal", mgnVal, _checker, __FILE__, __LINE__);
	INT32 amtMgnSrc; _jparser.validateByNameThrow("amtMgnSrc", amtMgnSrc);
	AtfValidator::validateInt(_descr, "amtMgnSrc", amtMgnSrc, _checker, __FILE__, __LINE__);
	INT32 amtMgnDst; _jparser.validateByNameThrow("amtMgnDst", amtMgnDst);
	AtfValidator::validateInt(_descr, "amtMgnDst", amtMgnDst, _checker, __FILE__, __LINE__);
	INT32 amtMgnUS; _jparser.validateByNameThrow("amtMgnUS", amtMgnUS);
	AtfValidator::validateInt(_descr, "amtMgnUS", amtMgnUS, _checker, __FILE__, __LINE__);
	PString curSrc; _jparser.validateByNameThrow("curSrc", curSrc);
	AtfValidator::validateInt(_descr, "curSrc", curSrc.length(), _checker, __FILE__, __LINE__);
	INT32 amtSrc; _jparser.validateByNameThrow("amtSrc", amtSrc);
	AtfValidator::validateInt(_descr, "amtSrc", amtSrc, _checker, __FILE__, __LINE__);
	INT32 amtSrcUS; _jparser.validateByNameThrow("amtSrcUS", amtSrcUS);
	AtfValidator::validateInt(_descr, "amtSrcUS", amtSrcUS, _checker, __FILE__, __LINE__);
	PString curDst; _jparser.validateByNameThrow("curDst", curDst);
	AtfValidator::validateInt(_descr, "curDst", curDst.length(), _checker, __FILE__, __LINE__);
	INT64 amtDst; _jparser.validateByNameThrow("amtDst", amtDst);
	AtfValidator::validateInt(_descr, "amtDst", amtDst, _checker, __FILE__, __LINE__);
	INT64 amtDstNoMgn; _jparser.validateByNameThrow("amtDstNoMgn", amtDstNoMgn);
	AtfValidator::validateInt(_descr, "amtDstNoMgn", amtDstNoMgn, _checker, __FILE__, __LINE__);
	INT32 amtDstUS; _jparser.validateByNameThrow("amtDstUS", amtDstUS);
	AtfValidator::validateInt(_descr, "amtDstUS", amtDstUS, _checker, __FILE__, __LINE__);
	UINT32 intActionType; _jparser.validateByNameThrow("intActionType", intActionType);
	AtfValidator::validateInt(_descr, "intActionType", intActionType, _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::ConvRatesAndMarginsStruct::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	UINT64 rateSrc; _parser.parseUINT64(rateSrc);
	AtfValidator::validateUint(_descr, "rateSrc", rateSrc, _checker, __FILE__, __LINE__);
	UINT64 rateDst; _parser.parseUINT64(rateDst);
	AtfValidator::validateUint(_descr, "rateDst", rateDst, _checker, __FILE__, __LINE__);
	UINT64 rateMid; _parser.parseUINT64(rateMid);
	AtfValidator::validateUint(_descr, "rateMid", rateMid, _checker, __FILE__, __LINE__);
	UINT64 rateFin; _parser.parseUINT64(rateFin);
	AtfValidator::validateUint(_descr, "rateFin", rateFin, _checker, __FILE__, __LINE__);
	INT32 mgnVal; _parser.parseINT32(mgnVal);
	AtfValidator::validateInt(_descr, "mgnVal", mgnVal, _checker, __FILE__, __LINE__);
	INT32 amtMgnSrc; _parser.parseINT32(amtMgnSrc);
	AtfValidator::validateInt(_descr, "amtMgnSrc", amtMgnSrc, _checker, __FILE__, __LINE__);
	INT32 amtMgnDst; _parser.parseINT32(amtMgnDst);
	AtfValidator::validateInt(_descr, "amtMgnDst", amtMgnDst, _checker, __FILE__, __LINE__);
	INT32 amtMgnUS; _parser.parseINT32(amtMgnUS);
	AtfValidator::validateInt(_descr, "amtMgnUS", amtMgnUS, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "curSrc"); size_t szCurSrc = strlen(_dummy);
	AtfValidator::validateInt(_descr, "curSrc", szCurSrc, _checker, __FILE__, __LINE__);
	INT32 amtSrc; _parser.parseINT32(amtSrc);
	AtfValidator::validateInt(_descr, "amtSrc", amtSrc, _checker, __FILE__, __LINE__);
	INT32 amtSrcUS; _parser.parseINT32(amtSrcUS);
	AtfValidator::validateInt(_descr, "amtSrcUS", amtSrcUS, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "curDst"); size_t szCurDst = strlen(_dummy);
	AtfValidator::validateInt(_descr, "curDst", szCurDst, _checker, __FILE__, __LINE__);
	INT64 amtDst; _parser.parseINT64(amtDst);
	AtfValidator::validateInt(_descr, "amtDst", amtDst, _checker, __FILE__, __LINE__);
	INT64 amtDstNoMgn; _parser.parseINT64(amtDstNoMgn);
	AtfValidator::validateInt(_descr, "amtDstNoMgn", amtDstNoMgn, _checker, __FILE__, __LINE__);
	INT32 amtDstUS; _parser.parseINT32(amtDstUS);
	AtfValidator::validateInt(_descr, "amtDstUS", amtDstUS, _checker, __FILE__, __LINE__);
	UINT32 intActionType; _parser.parseUINT32(intActionType);
	AtfValidator::validateInt(_descr, "intActionType", intActionType, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    CurrencyContextOptionalMsgBody
//=================================================================

Common::AtfShared::CurrencyContextOptionalMsgBody::CurrencyContextOptionalMsgBody()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Common::AtfShared::CurrencyContextOptionalMsgBody::CurrencyContextOptionalMsgBody(CurrencyContextOptionalMsgBody&& _o)
	: srvTime(std::move(_o.srvTime))
	, convRatesAndMargins(std::move(_o.convRatesAndMargins))
{
}

Common::AtfShared::CurrencyContextOptionalMsgBody& Common::AtfShared::CurrencyContextOptionalMsgBody::operator=(CurrencyContextOptionalMsgBody&& _o)
{
	if(this != &_o)
	{
		srvTime = std::move(_o.srvTime);
		convRatesAndMargins = std::move(_o.convRatesAndMargins);
	}
	return *this;
}

#endif

void Common::AtfShared::CurrencyContextOptionalMsgBody::clear()
{
	srvTime.setNull();
	convRatesAndMargins.clear();
}

bool Common::AtfShared::CurrencyContextOptionalMsgBody::equals(const CurrencyContextOptionalMsgBody& _o) const
{
	return srvTime.equals(_o.srvTime) &&
		convRatesAndMargins.equals(_o.convRatesAndMargins);
}

const char *Common::AtfShared::CurrencyContextOptionalMsgBody::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("srvTime=");
	Atf::AtfTempl<SrvTime>::ToTraceString(_buf, srvTime);
	_buf.append(',');
	_buf.append("convRatesAndMargins=");
	convRatesAndMargins.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::CurrencyContextOptionalMsgBody::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::AtfTempl<SrvTime>::ToXmlString(_buf, "srvTime", srvTime);
	convRatesAndMargins.toXmlString("convRatesAndMargins", _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::CurrencyContextOptionalMsgBody::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("srvTime"))
		{
			Atf::AtfTempl<SrvTime>::FromXmlString(_value, srvTime);
		}
		else if (_element.equals("convRatesAndMargins"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< ConvRatesAndMarginsStruct, 4 > >::FromXmlString(_value, convRatesAndMargins)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void Common::AtfShared::CurrencyContextOptionalMsgBody::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(CurrencyContextOptionalMsgBody())) // not empty
	{
		_body.composeSrvTime(srvTime);
		convRatesAndMargins.composeMsg(_body, _ignoreJSON);
	}

	_msg.composeMsgBody(_body);
}

void Common::AtfShared::CurrencyContextOptionalMsgBody::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	if(_parser0.parseEnded()) return;
	_parser0.parseSrvTime(srvTime);
	convRatesAndMargins.parseMsg(_parser0);
}

const char *Common::AtfShared::CurrencyContextOptionalMsgBody::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("srvTime", srvTime);
	_jsonstr.compose("convRatesAndMargins", convRatesAndMargins);
	return _buf.c_str();
}

void Common::AtfShared::CurrencyContextOptionalMsgBody::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("srvTime", srvTime);
	_jparser.parseByNameThrow("convRatesAndMargins", convRatesAndMargins);
}

/* static */ void Common::AtfShared::CurrencyContextOptionalMsgBody::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	if(_jparser.parseEnded()) return;
	SrvTime srvTime; _jparser.validateByNameThrow("srvTime", srvTime);
	AtfValidator::validateSrvDateTime(_descr, "srvTime", srvTime, _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< ConvRatesAndMarginsStruct > convRatesAndMargins; _jparser.validateByNameThrow("convRatesAndMargins", convRatesAndMargins);
	AtfValidator::validateInt(_descr, "convRatesAndMargins", convRatesAndMargins.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::CurrencyContextOptionalMsgBody::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	if(_parser0.parseEnded()) return;
	SrvTime srvTime; _parser0.parseSrvTime(srvTime);
	AtfValidator::validateSrvDateTime(_descr, "srvTime", srvTime, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szConvRatesAndMargins = Atf::LAtfVector< ConvRatesAndMarginsStruct, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("convRatesAndMargins"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "convRatesAndMargins", szConvRatesAndMargins, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    UserTicketDataBase
//=================================================================

Common::AtfShared::UserTicketDataBase::UserTicketDataBase()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Common::AtfShared::UserTicketDataBase::UserTicketDataBase(UserTicketDataBase&& _o)
	: admissionId(std::move(_o.admissionId))
	, reserved(std::move(_o.reserved))
{
}

Common::AtfShared::UserTicketDataBase& Common::AtfShared::UserTicketDataBase::operator=(UserTicketDataBase&& _o)
{
	if(this != &_o)
	{
		admissionId = std::move(_o.admissionId);
		reserved = std::move(_o.reserved);
	}
	return *this;
}

#endif

void Common::AtfShared::UserTicketDataBase::clear()
{
	admissionId.clear();
	reserved = 0;
}

bool Common::AtfShared::UserTicketDataBase::equals(const UserTicketDataBase& _o) const
{
	return Atf::atfPStringEquals(admissionId, _o.admissionId) &&
		reserved == _o.reserved;
}

const char *Common::AtfShared::UserTicketDataBase::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("admissionId=");
	_buf.append(admissionId);
	_buf.append(',');
	_buf.append("reserved=");
	_buf.appendUint(reserved);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::UserTicketDataBase::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("admissionId", admissionId, _buf);
	Atf::XmlElement::encodeAsXmlElement("reserved", reserved, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::UserTicketDataBase::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("admissionId"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, admissionId)) return false;
		}
		else if (_element.equals("reserved"))
		{
			reserved = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void Common::AtfShared::UserTicketDataBase::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(admissionId);
	_msg.composeUINT32(reserved);
}

void Common::AtfShared::UserTicketDataBase::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(admissionId);
	_parser.parseUINT32(reserved);
}

const char *Common::AtfShared::UserTicketDataBase::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("admissionId", admissionId);
	_jsonstr.compose("reserved", reserved);
	return _buf.c_str();
}

void Common::AtfShared::UserTicketDataBase::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("admissionId", admissionId);
	_jparser.parseByNameThrow("reserved", reserved);
}

/* static */ void Common::AtfShared::UserTicketDataBase::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString admissionId; _jparser.validateByNameThrow("admissionId", admissionId);
	AtfValidator::validateIntMax(_descr, "admissionId", admissionId.length(), ATF_TICKET_ADMISSION_MAX_LENGTH, _checker, __FILE__, __LINE__);
	UINT32 reserved; _jparser.validateByNameThrow("reserved", reserved);
	AtfValidator::validateIntRange(_descr, "reserved", reserved, 0, ATF_MAX_RESERVED_TICKETS, _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::UserTicketDataBase::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "admissionId"); size_t szAdmissionId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "admissionId", szAdmissionId, ATF_TICKET_ADMISSION_MAX_LENGTH, _checker, __FILE__, __LINE__);
	UINT32 reserved; _parser.parseUINT32(reserved);
	AtfValidator::validateIntRange(_descr, "reserved", reserved, 0, ATF_MAX_RESERVED_TICKETS, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    LoginExtra
//=================================================================

// @Override
Common::AtfShared::LoginExtra::LoginExtra( const ClientLoginExtras2& loginExtras_ )
{
	macAddr = loginExtras_.macAddr;
	volumeLabel = loginExtras_.volumeLabel;
	installId = loginExtras_.installId;
	userExtraId = loginExtras_.userExtraId;
	clientSiteId = loginExtras_.clientSiteId;
	clientPlatform = loginExtras_.clientPlatform;
	clientExtraInfoMask = loginExtras_.clientExtraInfoMask;
	clientType = loginExtras_.clientType;
	clientDevice = loginExtras_.clientDevice;
	clientVersion = loginExtras_.clientVersion;
	routerMacAddr = loginExtras_.routerMacAddr;
	clientBrand = loginExtras_.brandId;
	osId = loginExtras_.osId;
	appTypeId = loginExtras_.appTypeId;
	productId = loginExtras_.productId;
	installId2 = loginExtras_.installId2;
	operatorId = loginExtras_.operatorId;
	osVersion = loginExtras_.osVersion;
}

Common::AtfShared::LoginExtra::LoginExtra()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Common::AtfShared::LoginExtra::LoginExtra(LoginExtra&& _o)
	: macAddr(std::move(_o.macAddr))
	, volumeLabel(std::move(_o.volumeLabel))
	, installId(std::move(_o.installId))
	, machineGuid(std::move(_o.machineGuid))
	, adapterGuid(std::move(_o.adapterGuid))
	, userExtraId(std::move(_o.userExtraId))
	, clientSiteId(std::move(_o.clientSiteId))
	, clientPlatform(std::move(_o.clientPlatform))
	, clientExtraInfoMask(std::move(_o.clientExtraInfoMask))
	, clientType(std::move(_o.clientType))
	, clientDevice(std::move(_o.clientDevice))
	, clientVersion(std::move(_o.clientVersion))
	, routerMacAddr(std::move(_o.routerMacAddr))
	, clientBrand(std::move(_o.clientBrand))
	, osId(std::move(_o.osId))
	, appTypeId(std::move(_o.appTypeId))
	, productId(std::move(_o.productId))
	, installId2(std::move(_o.installId2))
	, operatorId(std::move(_o.operatorId))
	, osVersion(std::move(_o.osVersion))
{
}

Common::AtfShared::LoginExtra& Common::AtfShared::LoginExtra::operator=(LoginExtra&& _o)
{
	if(this != &_o)
	{
		macAddr = std::move(_o.macAddr);
		volumeLabel = std::move(_o.volumeLabel);
		installId = std::move(_o.installId);
		machineGuid = std::move(_o.machineGuid);
		adapterGuid = std::move(_o.adapterGuid);
		userExtraId = std::move(_o.userExtraId);
		clientSiteId = std::move(_o.clientSiteId);
		clientPlatform = std::move(_o.clientPlatform);
		clientExtraInfoMask = std::move(_o.clientExtraInfoMask);
		clientType = std::move(_o.clientType);
		clientDevice = std::move(_o.clientDevice);
		clientVersion = std::move(_o.clientVersion);
		routerMacAddr = std::move(_o.routerMacAddr);
		clientBrand = std::move(_o.clientBrand);
		osId = std::move(_o.osId);
		appTypeId = std::move(_o.appTypeId);
		productId = std::move(_o.productId);
		installId2 = std::move(_o.installId2);
		operatorId = std::move(_o.operatorId);
		osVersion = std::move(_o.osVersion);
	}
	return *this;
}

#endif

void Common::AtfShared::LoginExtra::clear()
{
	macAddr.clear();
	volumeLabel.clear();
	installId.clear();
	machineGuid.clear();
	adapterGuid.clear();
	userExtraId.clear();
	clientSiteId = 0;
	clientPlatform = 0;
	clientExtraInfoMask = 0;
	clientType = ClientType_Unknown;
	clientDevice = ClientDevice_Unknown;
	clientVersion = 0;
	routerMacAddr = "";
	clientBrand = BrandType_PokerStars;
	osId = OSId_Unknown;
	appTypeId = AppTypeId_Unknown;
	productId = ProductId_Unknown;
	installId2 = "";
	operatorId = "";
	osVersion = "";
}

bool Common::AtfShared::LoginExtra::equals(const LoginExtra& _o) const
{
	return Atf::atfPStringEquals(macAddr, _o.macAddr) &&
		Atf::atfPStringEquals(volumeLabel, _o.volumeLabel) &&
		Atf::atfPStringEquals(installId, _o.installId) &&
		Atf::atfPStringEquals(machineGuid, _o.machineGuid) &&
		Atf::atfPStringEquals(adapterGuid, _o.adapterGuid) &&
		Atf::atfPStringEquals(userExtraId, _o.userExtraId) &&
		clientSiteId == _o.clientSiteId &&
		clientPlatform == _o.clientPlatform &&
		clientExtraInfoMask == _o.clientExtraInfoMask &&
		clientType == _o.clientType &&
		clientDevice == _o.clientDevice &&
		clientVersion == _o.clientVersion &&
		Atf::atfPStringEquals(routerMacAddr, _o.routerMacAddr) &&
		clientBrand == _o.clientBrand &&
		osId == _o.osId &&
		appTypeId == _o.appTypeId &&
		productId == _o.productId &&
		Atf::atfPStringEquals(installId2, _o.installId2) &&
		Atf::atfPStringEquals(operatorId, _o.operatorId) &&
		Atf::atfPStringEquals(osVersion, _o.osVersion);
}

const char *Common::AtfShared::LoginExtra::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("macAddr=");
	_buf.append(macAddr);
	_buf.append(',');
	_buf.append("volumeLabel=");
	_buf.append(volumeLabel);
	_buf.append(',');
	_buf.append("installId=");
	_buf.append(installId);
	_buf.append(',');
	_buf.append("machineGuid=");
	_buf.append(machineGuid);
	_buf.append(',');
	_buf.append("adapterGuid=");
	_buf.append(adapterGuid);
	_buf.append(',');
	_buf.append("userExtraId=");
	_buf.append(userExtraId);
	_buf.append(',');
	_buf.append("clientSiteId=");
	_buf.appendUint(clientSiteId);
	_buf.append(',');
	_buf.append("clientPlatform=");
	_buf.appendUint(clientPlatform);
	_buf.append(',');
	_buf.append("clientExtraInfoMask=");
	_buf.appendUint(clientExtraInfoMask);
	_buf.append(',');
	_buf.append("clientType=");
	_buf.appendUint(clientType);
	_buf.append(',');
	_buf.append("clientDevice=");
	_buf.appendUint(clientDevice);
	_buf.append(',');
	_buf.append("clientVersion=");
	_buf.appendUint(clientVersion);
	_buf.append(',');
	_buf.append("routerMacAddr=");
	_buf.append(routerMacAddr);
	_buf.append(',');
	_buf.append("clientBrand=");
	_buf.appendUint(clientBrand);
	_buf.append(',');
	_buf.append("osId=");
	_buf.appendUint(osId);
	_buf.append(',');
	_buf.append("appTypeId=");
	_buf.appendUint(appTypeId);
	_buf.append(',');
	_buf.append("productId=");
	_buf.appendUint(productId);
	_buf.append(',');
	_buf.append("installId2=");
	_buf.append(installId2);
	_buf.append(',');
	_buf.append("operatorId=");
	_buf.append(operatorId);
	_buf.append(',');
	_buf.append("osVersion=");
	_buf.append(osVersion);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::LoginExtra::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("macAddr", macAddr, _buf);
	Atf::XmlElement::encodeAsXmlElement("volumeLabel", volumeLabel, _buf);
	Atf::XmlElement::encodeAsXmlElement("installId", installId, _buf);
	Atf::XmlElement::encodeAsXmlElement("machineGuid", machineGuid, _buf);
	Atf::XmlElement::encodeAsXmlElement("adapterGuid", adapterGuid, _buf);
	Atf::XmlElement::encodeAsXmlElement("userExtraId", userExtraId, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientSiteId", clientSiteId, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientPlatform", clientPlatform, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientExtraInfoMask", clientExtraInfoMask, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientType", clientType, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientDevice", clientDevice, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientVersion", clientVersion, _buf);
	Atf::XmlElement::encodeAsXmlElement("routerMacAddr", routerMacAddr, _buf);
	Atf::XmlElement::encodeAsXmlElement("clientBrand", clientBrand, _buf);
	Atf::XmlElement::encodeAsXmlElement("osId", osId, _buf);
	Atf::XmlElement::encodeAsXmlElement("appTypeId", appTypeId, _buf);
	Atf::XmlElement::encodeAsXmlElement("productId", productId, _buf);
	Atf::XmlElement::encodeAsXmlElement("installId2", installId2, _buf);
	Atf::XmlElement::encodeAsXmlElement("operatorId", operatorId, _buf);
	Atf::XmlElement::encodeAsXmlElement("osVersion", osVersion, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::LoginExtra::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("macAddr"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, macAddr)) return false;
		}
		else if (_element.equals("volumeLabel"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, volumeLabel)) return false;
		}
		else if (_element.equals("installId"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, installId)) return false;
		}
		else if (_element.equals("machineGuid"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, machineGuid)) return false;
		}
		else if (_element.equals("adapterGuid"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, adapterGuid)) return false;
		}
		else if (_element.equals("userExtraId"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, userExtraId)) return false;
		}
		else if (_element.equals("clientSiteId"))
		{
			clientSiteId = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("clientPlatform"))
		{
			clientPlatform = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("clientExtraInfoMask"))
		{
			clientExtraInfoMask = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("clientType"))
		{
			clientType = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("clientDevice"))
		{
			clientDevice = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("clientVersion"))
		{
			clientVersion = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("routerMacAddr"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, routerMacAddr)) return false;
		}
		else if (_element.equals("clientBrand"))
		{
			clientBrand = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("osId"))
		{
			osId = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("appTypeId"))
		{
			appTypeId = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("productId"))
		{
			productId = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("installId2"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, installId2)) return false;
		}
		else if (_element.equals("operatorId"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, operatorId)) return false;
		}
		else if (_element.equals("osVersion"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, osVersion)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void Common::AtfShared::LoginExtra::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(LoginExtra())) // not empty
	{
		_body.composeString(macAddr);
		_body.composeString(volumeLabel);
		_body.composeString(installId);
		_body.composeString(machineGuid);
		_body.composeString(adapterGuid);
		_body.composeString(userExtraId);
		_body.composeUINT32(clientSiteId);
		_body.composeUINT32(clientPlatform);
		_body.composeUINT32(clientExtraInfoMask);
		_body.composeUINT32(clientType);
		_body.composeUINT32(clientDevice);
		_body.composeUINT32(clientVersion);
		_body.composeString(routerMacAddr);
		_body.composeUINT32(clientBrand);
		_body.composeUINT32(osId);
		_body.composeUINT32(appTypeId);
		_body.composeUINT32(productId);
		_body.composeString(installId2);
		_body.composeString(operatorId);
		_body.composeString(osVersion);
	}

	_msg.composeMsgBody(_body);
}

void Common::AtfShared::LoginExtra::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringP(macAddr);
	_parser0.parseStringP(volumeLabel);
	_parser0.parseStringP(installId);
	_parser0.parseStringP(machineGuid);
	_parser0.parseStringP(adapterGuid);
	_parser0.parseStringP(userExtraId);
	_parser0.parseUINT32(clientSiteId);
	_parser0.parseUINT32(clientPlatform);
	_parser0.parseUINT32(clientExtraInfoMask);
	if(_parser0.parseEnded()) return;
	_parser0.parseUINT32(clientType);
	if(_parser0.parseEnded()) return;
	_parser0.parseUINT32(clientDevice);
	if(_parser0.parseEnded()) return;
	_parser0.parseUINT32(clientVersion);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringP(routerMacAddr);
	if(_parser0.parseEnded()) return;
	_parser0.parseUINT32(clientBrand);
	if(_parser0.parseEnded()) return;
	_parser0.parseUINT32(osId);
	_parser0.parseUINT32(appTypeId);
	_parser0.parseUINT32(productId);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringP(installId2);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringP(operatorId);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringP(osVersion);
}

const char *Common::AtfShared::LoginExtra::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("macAddr", macAddr);
	_jsonstr.compose("volumeLabel", volumeLabel);
	_jsonstr.compose("installId", installId);
	_jsonstr.compose("machineGuid", machineGuid);
	_jsonstr.compose("adapterGuid", adapterGuid);
	_jsonstr.compose("userExtraId", userExtraId);
	_jsonstr.compose("clientSiteId", clientSiteId);
	_jsonstr.compose("clientPlatform", clientPlatform);
	_jsonstr.compose("clientExtraInfoMask", clientExtraInfoMask);
	_jsonstr.compose("clientType", clientType);
	_jsonstr.compose("clientDevice", clientDevice);
	_jsonstr.compose("clientVersion", clientVersion);
	_jsonstr.compose("routerMacAddr", routerMacAddr);
	_jsonstr.compose("clientBrand", clientBrand);
	_jsonstr.compose("osId", osId);
	_jsonstr.compose("appTypeId", appTypeId);
	_jsonstr.compose("productId", productId);
	_jsonstr.compose("installId2", installId2);
	_jsonstr.compose("operatorId", operatorId);
	_jsonstr.compose("osVersion", osVersion);
	return _buf.c_str();
}

void Common::AtfShared::LoginExtra::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("macAddr", macAddr);
	_jparser.parseByNameThrow("volumeLabel", volumeLabel);
	_jparser.parseByNameThrow("installId", installId);
	_jparser.parseByNameThrow("machineGuid", machineGuid);
	_jparser.parseByNameThrow("adapterGuid", adapterGuid);
	_jparser.parseByNameThrow("userExtraId", userExtraId);
	_jparser.parseByNameThrow("clientSiteId", clientSiteId);
	_jparser.parseByNameThrow("clientPlatform", clientPlatform);
	_jparser.parseByNameThrow("clientExtraInfoMask", clientExtraInfoMask);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("clientType", clientType);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("clientDevice", clientDevice);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("clientVersion", clientVersion);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("routerMacAddr", routerMacAddr);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("clientBrand", clientBrand);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("osId", osId);
	_jparser.parseByNameThrow("appTypeId", appTypeId);
	_jparser.parseByNameThrow("productId", productId);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("installId2", installId2);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("operatorId", operatorId);
	if(_jparser.parseEnded()) return;
	_jparser.parseByNameThrow("osVersion", osVersion);
}

/* static */ void Common::AtfShared::LoginExtra::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	if(_jparser.parseEnded()) return;
	PString macAddr; _jparser.validateByNameThrow("macAddr", macAddr);
	AtfValidator::validateIntMax(_descr, "macAddr", macAddr.length(), MAC_ADDR_LEN, _checker, __FILE__, __LINE__);
	PString volumeLabel; _jparser.validateByNameThrow("volumeLabel", volumeLabel);
	AtfValidator::validateIntMax(_descr, "volumeLabel", volumeLabel.length(), VOLUME_LABEL_LEN, _checker, __FILE__, __LINE__);
	PString installId; _jparser.validateByNameThrow("installId", installId);
	AtfValidator::validateIntMax(_descr, "installId", installId.length(), USER_INSTALLID_LEN, _checker, __FILE__, __LINE__);
	PString machineGuid; _jparser.validateByNameThrow("machineGuid", machineGuid);
	AtfValidator::validateIntMax(_descr, "machineGuid", machineGuid.length(), 1000, _checker, __FILE__, __LINE__);
	PString adapterGuid; _jparser.validateByNameThrow("adapterGuid", adapterGuid);
	AtfValidator::validateIntMax(_descr, "adapterGuid", adapterGuid.length(), 1000, _checker, __FILE__, __LINE__);
	PString userExtraId; _jparser.validateByNameThrow("userExtraId", userExtraId);
	AtfValidator::validateIntMax(_descr, "userExtraId", userExtraId.length(), 1000, _checker, __FILE__, __LINE__);
	UINT32 clientSiteId; _jparser.validateByNameThrow("clientSiteId", clientSiteId);
	AtfValidator::validateIntRange(_descr, "clientSiteId", clientSiteId, PokerStars_SiteUnknown, PokerStars_Last, _checker, __FILE__, __LINE__);
	UINT32 clientPlatform; _jparser.validateByNameThrow("clientPlatform", clientPlatform);
	AtfValidator::validateIntRange(_descr, "clientPlatform", clientPlatform, Client_UnknownPlatform, Client_Last, _checker, __FILE__, __LINE__);
	UINT32 clientExtraInfoMask; _jparser.validateByNameThrow("clientExtraInfoMask", clientExtraInfoMask);
	AtfValidator::validateIntMax(_descr, "clientExtraInfoMask", clientExtraInfoMask, MAX_VALUE_clientExtraInfoMask, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 clientType; _jparser.validateByNameThrow("clientType", clientType);
	AtfValidator::validateIntRange(_descr, "clientType", clientType, ClientType_Unknown, ClientType_Last, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 clientDevice; _jparser.validateByNameThrow("clientDevice", clientDevice);
	AtfValidator::validateIntRange(_descr, "clientDevice", clientDevice, ClientDevice_Unknown, ClientDevice_Last, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 clientVersion; _jparser.validateByNameThrow("clientVersion", clientVersion);
	AtfValidator::validateInt(_descr, "clientVersion", clientVersion, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	PString routerMacAddr; _jparser.validateByNameThrow("routerMacAddr", routerMacAddr);
	AtfValidator::validateIntMax(_descr, "routerMacAddr", routerMacAddr.length(), MAC_ADDR_LEN, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 clientBrand; _jparser.validateByNameThrow("clientBrand", clientBrand);
	AtfValidator::validateIntRange(_descr, "clientBrand", clientBrand, BrandType_None, BrandType_Last, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	UINT32 osId; _jparser.validateByNameThrow("osId", osId);
	AtfValidator::validateIntRange(_descr, "osId", osId, OSId_Unknown, OsId_Last, _checker, __FILE__, __LINE__);
	UINT32 appTypeId; _jparser.validateByNameThrow("appTypeId", appTypeId);
	AtfValidator::validateIntRange(_descr, "appTypeId", appTypeId, AppTypeId_Unknown, AppTypeId_Last, _checker, __FILE__, __LINE__);
	UINT32 productId; _jparser.validateByNameThrow("productId", productId);
	AtfValidator::validateIntRange(_descr, "productId", productId, ProductId_Unknown, ProductId_Last, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	PString installId2; _jparser.validateByNameThrow("installId2", installId2);
	AtfValidator::validateIntMax(_descr, "installId2", installId2.length(), 100, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	PString operatorId; _jparser.validateByNameThrow("operatorId", operatorId);
	AtfValidator::validateIntMax(_descr, "operatorId", operatorId.length(), 32, _checker, __FILE__, __LINE__);
	if(_jparser.parseEnded()) return;
	PString osVersion; _jparser.validateByNameThrow("osVersion", osVersion);
	AtfValidator::validateIntMax(_descr, "osVersion", osVersion.length(), 20, _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::LoginExtra::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	if(_parser0.parseEnded()) return;
	_parser0.parseStringN(_dummy, 0, "macAddr"); size_t szMacAddr = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "macAddr", szMacAddr, MAC_ADDR_LEN, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "volumeLabel"); size_t szVolumeLabel = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "volumeLabel", szVolumeLabel, VOLUME_LABEL_LEN, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "installId"); size_t szInstallId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "installId", szInstallId, USER_INSTALLID_LEN, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "machineGuid"); size_t szMachineGuid = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "machineGuid", szMachineGuid, 1000, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "adapterGuid"); size_t szAdapterGuid = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "adapterGuid", szAdapterGuid, 1000, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "userExtraId"); size_t szUserExtraId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "userExtraId", szUserExtraId, 1000, _checker, __FILE__, __LINE__);
	UINT32 clientSiteId; _parser0.parseUINT32(clientSiteId);
	AtfValidator::validateIntRange(_descr, "clientSiteId", clientSiteId, PokerStars_SiteUnknown, PokerStars_Last, _checker, __FILE__, __LINE__);
	UINT32 clientPlatform; _parser0.parseUINT32(clientPlatform);
	AtfValidator::validateIntRange(_descr, "clientPlatform", clientPlatform, Client_UnknownPlatform, Client_Last, _checker, __FILE__, __LINE__);
	UINT32 clientExtraInfoMask; _parser0.parseUINT32(clientExtraInfoMask);
	AtfValidator::validateIntMax(_descr, "clientExtraInfoMask", clientExtraInfoMask, MAX_VALUE_clientExtraInfoMask, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	UINT32 clientType; _parser0.parseUINT32(clientType);
	AtfValidator::validateIntRange(_descr, "clientType", clientType, ClientType_Unknown, ClientType_Last, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	UINT32 clientDevice; _parser0.parseUINT32(clientDevice);
	AtfValidator::validateIntRange(_descr, "clientDevice", clientDevice, ClientDevice_Unknown, ClientDevice_Last, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	UINT32 clientVersion; _parser0.parseUINT32(clientVersion);
	AtfValidator::validateInt(_descr, "clientVersion", clientVersion, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringN(_dummy, 0, "routerMacAddr"); size_t szRouterMacAddr = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "routerMacAddr", szRouterMacAddr, MAC_ADDR_LEN, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	UINT32 clientBrand; _parser0.parseUINT32(clientBrand);
	AtfValidator::validateIntRange(_descr, "clientBrand", clientBrand, BrandType_None, BrandType_Last, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	UINT32 osId; _parser0.parseUINT32(osId);
	AtfValidator::validateIntRange(_descr, "osId", osId, OSId_Unknown, OsId_Last, _checker, __FILE__, __LINE__);
	UINT32 appTypeId; _parser0.parseUINT32(appTypeId);
	AtfValidator::validateIntRange(_descr, "appTypeId", appTypeId, AppTypeId_Unknown, AppTypeId_Last, _checker, __FILE__, __LINE__);
	UINT32 productId; _parser0.parseUINT32(productId);
	AtfValidator::validateIntRange(_descr, "productId", productId, ProductId_Unknown, ProductId_Last, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringN(_dummy, 0, "installId2"); size_t szInstallId2 = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "installId2", szInstallId2, 100, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringN(_dummy, 0, "operatorId"); size_t szOperatorId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "operatorId", szOperatorId, 32, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringN(_dummy, 0, "osVersion"); size_t szOsVersion = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "osVersion", szOsVersion, 20, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    UserPropertyBody
//=================================================================

Common::AtfShared::UserPropertyBody::UserPropertyBody()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Common::AtfShared::UserPropertyBody::UserPropertyBody(UserPropertyBody&& _o)
	: propType(std::move(_o.propType))
	, propInt(std::move(_o.propInt))
	, propStr(std::move(_o.propStr))
	, propWhen(std::move(_o.propWhen))
{
}

Common::AtfShared::UserPropertyBody& Common::AtfShared::UserPropertyBody::operator=(UserPropertyBody&& _o)
{
	if(this != &_o)
	{
		propType = std::move(_o.propType);
		propInt = std::move(_o.propInt);
		propStr = std::move(_o.propStr);
		propWhen = std::move(_o.propWhen);
	}
	return *this;
}

#endif

void Common::AtfShared::UserPropertyBody::clear()
{
	propType = 0;
	propInt = 0;
	propStr.clear();
	propWhen.setNull();
}

bool Common::AtfShared::UserPropertyBody::equals(const UserPropertyBody& _o) const
{
	return propType == _o.propType &&
		propInt == _o.propInt &&
		Atf::atfPStringEquals(propStr, _o.propStr) &&
		propWhen.equals(_o.propWhen);
}

const char *Common::AtfShared::UserPropertyBody::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("propType=");
	_buf.appendInt(propType);
	_buf.append(',');
	_buf.append("propInt=");
	_buf.appendInt(propInt);
	_buf.append(',');
	_buf.append("propStr=");
	_buf.append(propStr);
	_buf.append(',');
	_buf.append("propWhen=");
	Atf::AtfTempl<CommSrvTime>::ToTraceString(_buf, propWhen);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::UserPropertyBody::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("propType", propType, _buf);
	Atf::XmlElement::encodeAsXmlElement("propInt", propInt, _buf);
	Atf::XmlElement::encodeAsXmlElement("propStr", propStr, _buf);
	Atf::AtfTempl<CommSrvTime>::ToXmlString(_buf, "propWhen", propWhen);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::UserPropertyBody::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("propType"))
		{
			propType = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("propInt"))
		{
			propInt = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("propStr"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, propStr)) return false;
		}
		else if (_element.equals("propWhen"))
		{
			Atf::AtfTempl<CommSrvTime>::FromXmlString(_value, propWhen);
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void Common::AtfShared::UserPropertyBody::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(UserPropertyBody())) // not empty
	{
		_body.composeINT32(propType);
		_body.composeINT32(propInt);
		_body.composeString(propStr);
		_body.composeSrvTime(propWhen);
	}

	_msg.composeMsgBody(_body);
}

void Common::AtfShared::UserPropertyBody::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(propType);
	_parser0.parseINT32(propInt);
	_parser0.parseStringP(propStr);
	_parser0.parseSrvTime(propWhen);
}

const char *Common::AtfShared::UserPropertyBody::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("propType", propType);
	_jsonstr.compose("propInt", propInt);
	_jsonstr.compose("propStr", propStr);
	_jsonstr.compose("propWhen", propWhen);
	return _buf.c_str();
}

void Common::AtfShared::UserPropertyBody::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("propType", propType);
	_jparser.parseByNameThrow("propInt", propInt);
	_jparser.parseByNameThrow("propStr", propStr);
	_jparser.parseByNameThrow("propWhen", propWhen);
}

/* static */ void Common::AtfShared::UserPropertyBody::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 propType; _jparser.validateByNameThrow("propType", propType);
	AtfValidator::validateIntRange(_descr, "propType", propType, ePromoName, eClientCustomOptionsEnd, _checker, __FILE__, __LINE__);
	INT32 propInt; _jparser.validateByNameThrow("propInt", propInt);
	AtfValidator::validateInt(_descr, "propInt", propInt, _checker, __FILE__, __LINE__);
	PString propStr; _jparser.validateByNameThrow("propStr", propStr);
	AtfValidator::validateIntMax(_descr, "propStr", propStr.length(), 10000, _checker, __FILE__, __LINE__);
	CommSrvTime propWhen; _jparser.validateByNameThrow("propWhen", propWhen);
	AtfValidator::validateSrvDateTime(_descr, "propWhen", propWhen, _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::UserPropertyBody::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	INT32 propType; _parser0.parseINT32(propType);
	AtfValidator::validateIntRange(_descr, "propType", propType, ePromoName, eClientCustomOptionsEnd, _checker, __FILE__, __LINE__);
	INT32 propInt; _parser0.parseINT32(propInt);
	AtfValidator::validateInt(_descr, "propInt", propInt, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "propStr"); size_t szPropStr = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "propStr", szPropStr, 10000, _checker, __FILE__, __LINE__);
	CommSrvTime propWhen; _parser0.parseSrvTime(propWhen);
	AtfValidator::validateSrvDateTime(_descr, "propWhen", propWhen, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    UserPropertyLegacy
//=================================================================

Common::AtfShared::UserPropertyLegacy::UserPropertyLegacy()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Common::AtfShared::UserPropertyLegacy::UserPropertyLegacy(UserPropertyLegacy&& _o)
	: propType(std::move(_o.propType))
	, propInt(std::move(_o.propInt))
	, propStr(std::move(_o.propStr))
	, propWhen(std::move(_o.propWhen))
{
}

Common::AtfShared::UserPropertyLegacy& Common::AtfShared::UserPropertyLegacy::operator=(UserPropertyLegacy&& _o)
{
	if(this != &_o)
	{
		propType = std::move(_o.propType);
		propInt = std::move(_o.propInt);
		propStr = std::move(_o.propStr);
		propWhen = std::move(_o.propWhen);
	}
	return *this;
}

#endif

void Common::AtfShared::UserPropertyLegacy::clear()
{
	propType = 0;
	propInt = 0;
	propStr.clear();
	propWhen.setNull();
}

bool Common::AtfShared::UserPropertyLegacy::equals(const UserPropertyLegacy& _o) const
{
	return propType == _o.propType &&
		propInt == _o.propInt &&
		Atf::atfPStringEquals(propStr, _o.propStr) &&
		propWhen.equals(_o.propWhen);
}

const char *Common::AtfShared::UserPropertyLegacy::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("propType=");
	_buf.appendInt(propType);
	_buf.append(',');
	_buf.append("propInt=");
	_buf.appendInt(propInt);
	_buf.append(',');
	_buf.append("propStr=");
	_buf.append(propStr);
	_buf.append(',');
	_buf.append("propWhen=");
	Atf::AtfTempl<CommSrvTime>::ToTraceString(_buf, propWhen);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::UserPropertyLegacy::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("propType", propType, _buf);
	Atf::XmlElement::encodeAsXmlElement("propInt", propInt, _buf);
	Atf::XmlElement::encodeAsXmlElement("propStr", propStr, _buf);
	Atf::AtfTempl<CommSrvTime>::ToXmlString(_buf, "propWhen", propWhen);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::UserPropertyLegacy::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("propType"))
		{
			propType = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("propInt"))
		{
			propInt = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("propStr"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, propStr)) return false;
		}
		else if (_element.equals("propWhen"))
		{
			Atf::AtfTempl<CommSrvTime>::FromXmlString(_value, propWhen);
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void Common::AtfShared::UserPropertyLegacy::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT32(propType);
	_msg.composeINT32(propInt);
	_msg.composeString(propStr);
	_msg.composeSrvTime(propWhen);
}

void Common::AtfShared::UserPropertyLegacy::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(propType);
	_parser.parseINT32(propInt);
	_parser.parseStringP(propStr);
	_parser.parseSrvTime(propWhen);
}

const char *Common::AtfShared::UserPropertyLegacy::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("propType", propType);
	_jsonstr.compose("propInt", propInt);
	_jsonstr.compose("propStr", propStr);
	_jsonstr.compose("propWhen", propWhen);
	return _buf.c_str();
}

void Common::AtfShared::UserPropertyLegacy::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("propType", propType);
	_jparser.parseByNameThrow("propInt", propInt);
	_jparser.parseByNameThrow("propStr", propStr);
	_jparser.parseByNameThrow("propWhen", propWhen);
}

/* static */ void Common::AtfShared::UserPropertyLegacy::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 propType; _jparser.validateByNameThrow("propType", propType);
	AtfValidator::validateIntRange(_descr, "propType", propType, ePromoName, eClientCustomOptionsEnd, _checker, __FILE__, __LINE__);
	INT32 propInt; _jparser.validateByNameThrow("propInt", propInt);
	AtfValidator::validateInt(_descr, "propInt", propInt, _checker, __FILE__, __LINE__);
	PString propStr; _jparser.validateByNameThrow("propStr", propStr);
	AtfValidator::validateIntMax(_descr, "propStr", propStr.length(), 10000, _checker, __FILE__, __LINE__);
	CommSrvTime propWhen; _jparser.validateByNameThrow("propWhen", propWhen);
	AtfValidator::validateSrvDateTime(_descr, "propWhen", propWhen, _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::UserPropertyLegacy::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	INT32 propType; _parser.parseINT32(propType);
	AtfValidator::validateIntRange(_descr, "propType", propType, ePromoName, eClientCustomOptionsEnd, _checker, __FILE__, __LINE__);
	INT32 propInt; _parser.parseINT32(propInt);
	AtfValidator::validateInt(_descr, "propInt", propInt, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "propStr"); size_t szPropStr = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "propStr", szPropStr, 10000, _checker, __FILE__, __LINE__);
	CommSrvTime propWhen; _parser.parseSrvTime(propWhen);
	AtfValidator::validateSrvDateTime(_descr, "propWhen", propWhen, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    UserCurrencyAccount
//=================================================================

Common::AtfShared::UserCurrencyAccount::UserCurrencyAccount()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Common::AtfShared::UserCurrencyAccount::UserCurrencyAccount(UserCurrencyAccount&& _o)
	: currency(std::move(_o.currency))
	, chips(std::move(_o.chips))
	, owedChips(std::move(_o.owedChips))
	, tChips(std::move(_o.tChips))
	, wChips(std::move(_o.wChips))
{
}

Common::AtfShared::UserCurrencyAccount& Common::AtfShared::UserCurrencyAccount::operator=(UserCurrencyAccount&& _o)
{
	if(this != &_o)
	{
		currency = std::move(_o.currency);
		chips = std::move(_o.chips);
		owedChips = std::move(_o.owedChips);
		tChips = std::move(_o.tChips);
		wChips = std::move(_o.wChips);
	}
	return *this;
}

#endif

void Common::AtfShared::UserCurrencyAccount::clear()
{
	currency = "USD";
	chips = 0;
	owedChips = 0;
	tChips = 0;
	wChips = 0;
}

bool Common::AtfShared::UserCurrencyAccount::equals(const UserCurrencyAccount& _o) const
{
	return Atf::atfPStringEquals(currency, _o.currency) &&
		chips == _o.chips &&
		owedChips == _o.owedChips &&
		tChips == _o.tChips &&
		wChips == _o.wChips;
}

const char *Common::AtfShared::UserCurrencyAccount::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("chips=");
	_buf.appendInt(chips);
	_buf.append(',');
	_buf.append("owedChips=");
	_buf.appendInt(owedChips);
	_buf.append(',');
	_buf.append("tChips=");
	_buf.appendInt(tChips);
	_buf.append(',');
	_buf.append("wChips=");
	_buf.appendInt(wChips);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::UserCurrencyAccount::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("currency", currency, _buf);
	Atf::XmlElement::encodeAsXmlElement("chips", chips, _buf);
	Atf::XmlElement::encodeAsXmlElement("owedChips", owedChips, _buf);
	Atf::XmlElement::encodeAsXmlElement("tChips", tChips, _buf);
	Atf::XmlElement::encodeAsXmlElement("wChips", wChips, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::UserCurrencyAccount::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("currency"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, currency)) return false;
		}
		else if (_element.equals("chips"))
		{
			chips = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("owedChips"))
		{
			owedChips = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("tChips"))
		{
			tChips = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("wChips"))
		{
			wChips = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void Common::AtfShared::UserCurrencyAccount::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(currency);
	_msg.composeINT32(chips);
	_msg.composeINT32(owedChips);
	_msg.composeINT32(tChips);
	_msg.composeINT32(wChips);
}

void Common::AtfShared::UserCurrencyAccount::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(currency);
	_parser.parseINT32(chips);
	_parser.parseINT32(owedChips);
	_parser.parseINT32(tChips);
	_parser.parseINT32(wChips);
}

const char *Common::AtfShared::UserCurrencyAccount::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("currency", currency);
	_jsonstr.compose("chips", chips);
	_jsonstr.compose("owedChips", owedChips);
	_jsonstr.compose("tChips", tChips);
	_jsonstr.compose("wChips", wChips);
	return _buf.c_str();
}

void Common::AtfShared::UserCurrencyAccount::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("currency", currency);
	_jparser.parseByNameThrow("chips", chips);
	_jparser.parseByNameThrow("owedChips", owedChips);
	_jparser.parseByNameThrow("tChips", tChips);
	_jparser.parseByNameThrow("wChips", wChips);
}

/* static */ void Common::AtfShared::UserCurrencyAccount::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString currency; _jparser.validateByNameThrow("currency", currency);
	AtfValidator::validateInt(_descr, "currency", currency.length(), _checker, __FILE__, __LINE__);
	INT32 chips; _jparser.validateByNameThrow("chips", chips);
	AtfValidator::validateInt(_descr, "chips", chips, _checker, __FILE__, __LINE__);
	INT32 owedChips; _jparser.validateByNameThrow("owedChips", owedChips);
	AtfValidator::validateInt(_descr, "owedChips", owedChips, _checker, __FILE__, __LINE__);
	INT32 tChips; _jparser.validateByNameThrow("tChips", tChips);
	AtfValidator::validateInt(_descr, "tChips", tChips, _checker, __FILE__, __LINE__);
	INT32 wChips; _jparser.validateByNameThrow("wChips", wChips);
	AtfValidator::validateInt(_descr, "wChips", wChips, _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::UserCurrencyAccount::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "currency"); size_t szCurrency = strlen(_dummy);
	AtfValidator::validateInt(_descr, "currency", szCurrency, _checker, __FILE__, __LINE__);
	INT32 chips; _parser.parseINT32(chips);
	AtfValidator::validateInt(_descr, "chips", chips, _checker, __FILE__, __LINE__);
	INT32 owedChips; _parser.parseINT32(owedChips);
	AtfValidator::validateInt(_descr, "owedChips", owedChips, _checker, __FILE__, __LINE__);
	INT32 tChips; _parser.parseINT32(tChips);
	AtfValidator::validateInt(_descr, "tChips", tChips, _checker, __FILE__, __LINE__);
	INT32 wChips; _parser.parseINT32(wChips);
	AtfValidator::validateInt(_descr, "wChips", wChips, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    UserCurrencyAccounts
//=================================================================

Common::AtfShared::UserCurrencyAccounts::UserCurrencyAccounts()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Common::AtfShared::UserCurrencyAccounts::UserCurrencyAccounts(UserCurrencyAccounts&& _o)
	: defaultAccount(std::move(_o.defaultAccount))
	, exAccounts(std::move(_o.exAccounts))
{
}

Common::AtfShared::UserCurrencyAccounts& Common::AtfShared::UserCurrencyAccounts::operator=(UserCurrencyAccounts&& _o)
{
	if(this != &_o)
	{
		defaultAccount = std::move(_o.defaultAccount);
		exAccounts = std::move(_o.exAccounts);
	}
	return *this;
}

#endif

void Common::AtfShared::UserCurrencyAccounts::clear()
{
	defaultAccount.clear();
	exAccounts.clear();
}

bool Common::AtfShared::UserCurrencyAccounts::equals(const UserCurrencyAccounts& _o) const
{
	return defaultAccount.equals(_o.defaultAccount) &&
		exAccounts.equals(_o.exAccounts);
}

const char *Common::AtfShared::UserCurrencyAccounts::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("defaultAccount=");
	defaultAccount.toTraceString(_buf);
	_buf.append(',');
	_buf.append("exAccounts=");
	exAccounts.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::UserCurrencyAccounts::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	defaultAccount.toXmlString("defaultAccount", _buf);
	exAccounts.toXmlString("exAccounts", _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::UserCurrencyAccounts::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("defaultAccount"))
		{
			if(!Atf::AtfTempl< UserCurrencyAccount >::FromXmlString(_value, defaultAccount)) return false;
		}
		else if (_element.equals("exAccounts"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< UserCurrencyAccount, 4 > >::FromXmlString(_value, exAccounts)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void Common::AtfShared::UserCurrencyAccounts::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	defaultAccount.composeMsg(_msg, _ignoreJSON);
	exAccounts.composeMsg(_msg, _ignoreJSON);
}

void Common::AtfShared::UserCurrencyAccounts::parseMsg(CommMsgParser& _parser)
{
	defaultAccount.parseMsg(_parser);
	exAccounts.parseMsg(_parser);
}

const char *Common::AtfShared::UserCurrencyAccounts::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("defaultAccount", defaultAccount);
	_jsonstr.compose("exAccounts", exAccounts);
	return _buf.c_str();
}

void Common::AtfShared::UserCurrencyAccounts::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("defaultAccount", defaultAccount);
	_jparser.parseByNameThrow("exAccounts", exAccounts);
}

/* static */ void Common::AtfShared::UserCurrencyAccounts::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UserCurrencyAccount defaultAccount; _jparser.validateByNameThrow("defaultAccount", defaultAccount);
	Atf::AtfVectorBase< UserCurrencyAccount > exAccounts; _jparser.validateByNameThrow("exAccounts", exAccounts);
	AtfValidator::validateInt(_descr, "exAccounts", exAccounts.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::UserCurrencyAccounts::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	UserCurrencyAccount::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("defaultAccount"), _fieldsWithUnparsedContent);
	int szExAccounts = Atf::LAtfVector< UserCurrencyAccount, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("exAccounts"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "exAccounts", szExAccounts, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    PaysystemMask
//=================================================================

Common::AtfShared::PaysystemMask::PaysystemMask()
{
	clear();
}

void Common::AtfShared::PaysystemMask::clear()
{
	mask = 0;
	mask2 = 0;
	mask3 = 0;
	mask4 = 0;
}

bool Common::AtfShared::PaysystemMask::equals(const PaysystemMask& _o) const
{
	return mask == _o.mask &&
		mask2 == _o.mask2 &&
		mask3 == _o.mask3 &&
		mask4 == _o.mask4;
}

const char *Common::AtfShared::PaysystemMask::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("mask=");
	_buf.appendUint(mask);
	_buf.append(',');
	_buf.append("mask2=");
	_buf.appendUint(mask2);
	_buf.append(',');
	_buf.append("mask3=");
	_buf.appendUint64(mask3);
	_buf.append(',');
	_buf.append("mask4=");
	_buf.appendUint64(mask4);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::PaysystemMask::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("mask", mask, _buf);
	Atf::XmlElement::encodeAsXmlElement("mask2", mask2, _buf);
	Atf::XmlElement::encodeAsXmlElement("mask3", mask3, _buf);
	Atf::XmlElement::encodeAsXmlElement("mask4", mask4, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::PaysystemMask::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("mask"))
		{
			mask = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("mask2"))
		{
			mask2 = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("mask3"))
		{
			mask3 = (UINT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("mask4"))
		{
			mask4 = (UINT64)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void Common::AtfShared::PaysystemMask::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(mask);
	_msg.composeUINT32(mask2);
	_msg.composeUINT64(mask3);
	_msg.composeUINT64(mask4);
}

void Common::AtfShared::PaysystemMask::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(mask);
	_parser.parseUINT32(mask2);
	_parser.parseUINT64(mask3);
	_parser.parseUINT64(mask4);
}

const char *Common::AtfShared::PaysystemMask::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("mask", mask);
	_jsonstr.compose("mask2", mask2);
	_jsonstr.compose("mask3", mask3);
	_jsonstr.compose("mask4", mask4);
	return _buf.c_str();
}

void Common::AtfShared::PaysystemMask::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("mask", mask);
	_jparser.parseByNameThrow("mask2", mask2);
	_jparser.parseByNameThrow("mask3", mask3);
	_jparser.parseByNameThrow("mask4", mask4);
}

/* static */ void Common::AtfShared::PaysystemMask::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 mask; _jparser.validateByNameThrow("mask", mask);
	AtfValidator::validateInt(_descr, "mask", mask, _checker, __FILE__, __LINE__);
	UINT32 mask2; _jparser.validateByNameThrow("mask2", mask2);
	AtfValidator::validateInt(_descr, "mask2", mask2, _checker, __FILE__, __LINE__);
	UINT64 mask3; _jparser.validateByNameThrow("mask3", mask3);
	AtfValidator::validateUint(_descr, "mask3", mask3, _checker, __FILE__, __LINE__);
	UINT64 mask4; _jparser.validateByNameThrow("mask4", mask4);
	AtfValidator::validateUint(_descr, "mask4", mask4, _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::PaysystemMask::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	UINT32 mask; _parser.parseUINT32(mask);
	AtfValidator::validateInt(_descr, "mask", mask, _checker, __FILE__, __LINE__);
	UINT32 mask2; _parser.parseUINT32(mask2);
	AtfValidator::validateInt(_descr, "mask2", mask2, _checker, __FILE__, __LINE__);
	UINT64 mask3; _parser.parseUINT64(mask3);
	AtfValidator::validateUint(_descr, "mask3", mask3, _checker, __FILE__, __LINE__);
	UINT64 mask4; _parser.parseUINT64(mask4);
	AtfValidator::validateUint(_descr, "mask4", mask4, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    PlayerPointsProgram
//=================================================================

Common::AtfShared::PlayerPointsProgram::PlayerPointsProgram()
{
	clear();
}

void Common::AtfShared::PlayerPointsProgram::clear()
{
	lt = 0;
	yr = 0;
	mo = 0;
	statusSet.setNull();
	milliCent = 0;
}

bool Common::AtfShared::PlayerPointsProgram::equals(const PlayerPointsProgram& _o) const
{
	return lt == _o.lt &&
		yr == _o.yr &&
		mo == _o.mo &&
		statusSet.equals(_o.statusSet) &&
		milliCent == _o.milliCent;
}

const char *Common::AtfShared::PlayerPointsProgram::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("lt=");
	_buf.appendInt64(lt);
	_buf.append(',');
	_buf.append("yr=");
	_buf.appendInt64(yr);
	_buf.append(',');
	_buf.append("mo=");
	_buf.appendInt64(mo);
	_buf.append(',');
	_buf.append("statusSet=");
	Atf::AtfTempl<SrvDate>::ToTraceString(_buf, statusSet);
	_buf.append(',');
	_buf.append("milliCent=");
	_buf.appendInt(milliCent);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::PlayerPointsProgram::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("lt", lt, _buf);
	Atf::XmlElement::encodeAsXmlElement("yr", yr, _buf);
	Atf::XmlElement::encodeAsXmlElement("mo", mo, _buf);
	Atf::AtfTempl<SrvDate>::ToXmlString(_buf, "statusSet", statusSet);
	Atf::XmlElement::encodeAsXmlElement("milliCent", milliCent, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::PlayerPointsProgram::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("lt"))
		{
			lt = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("yr"))
		{
			yr = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("mo"))
		{
			mo = (INT64)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("statusSet"))
		{
			Atf::AtfTempl<SrvDate>::FromXmlString(_value, statusSet);
		}
		else if (_element.equals("milliCent"))
		{
			milliCent = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void Common::AtfShared::PlayerPointsProgram::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT64(lt);
	_msg.composeINT64(yr);
	_msg.composeINT64(mo);
	_msg.composeSrvDate(statusSet);
	_msg.composeINT32(milliCent);
}

void Common::AtfShared::PlayerPointsProgram::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT64(lt);
	_parser.parseINT64(yr);
	_parser.parseINT64(mo);
	_parser.parseSrvDate(statusSet);
	_parser.parseINT32(milliCent);
}

const char *Common::AtfShared::PlayerPointsProgram::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("lt", lt);
	_jsonstr.compose("yr", yr);
	_jsonstr.compose("mo", mo);
	_jsonstr.compose("statusSet", statusSet);
	_jsonstr.compose("milliCent", milliCent);
	return _buf.c_str();
}

void Common::AtfShared::PlayerPointsProgram::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("lt", lt);
	_jparser.parseByNameThrow("yr", yr);
	_jparser.parseByNameThrow("mo", mo);
	_jparser.parseByNameThrow("statusSet", statusSet);
	_jparser.parseByNameThrow("milliCent", milliCent);
}

/* static */ void Common::AtfShared::PlayerPointsProgram::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT64 lt; _jparser.validateByNameThrow("lt", lt);
	AtfValidator::validateInt(_descr, "lt", lt, _checker, __FILE__, __LINE__);
	INT64 yr; _jparser.validateByNameThrow("yr", yr);
	AtfValidator::validateInt(_descr, "yr", yr, _checker, __FILE__, __LINE__);
	INT64 mo; _jparser.validateByNameThrow("mo", mo);
	AtfValidator::validateInt(_descr, "mo", mo, _checker, __FILE__, __LINE__);
	SrvDate statusSet; _jparser.validateByNameThrow("statusSet", statusSet);
	AtfValidator::validateSrvDateTime(_descr, "statusSet", statusSet, _checker, __FILE__, __LINE__);
	INT32 milliCent; _jparser.validateByNameThrow("milliCent", milliCent);
	AtfValidator::validateInt(_descr, "milliCent", milliCent, _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::PlayerPointsProgram::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT64 lt; _parser.parseINT64(lt);
	AtfValidator::validateInt(_descr, "lt", lt, _checker, __FILE__, __LINE__);
	INT64 yr; _parser.parseINT64(yr);
	AtfValidator::validateInt(_descr, "yr", yr, _checker, __FILE__, __LINE__);
	INT64 mo; _parser.parseINT64(mo);
	AtfValidator::validateInt(_descr, "mo", mo, _checker, __FILE__, __LINE__);
	SrvDate statusSet; _parser.parseSrvDate(statusSet);
	AtfValidator::validateSrvDateTime(_descr, "statusSet", statusSet, _checker, __FILE__, __LINE__);
	INT32 milliCent; _parser.parseINT32(milliCent);
	AtfValidator::validateInt(_descr, "milliCent", milliCent, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    User
//=================================================================

Common::AtfShared::User::User()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Common::AtfShared::User::User(User&& _o)
	: id(std::move(_o.id))
	, dummy(std::move(_o.dummy))
	, privileges(std::move(_o.privileges))
	, chips_dummy(std::move(_o.chips_dummy))
	, playChips32(std::move(_o.playChips32))
	, tChips_dummy(std::move(_o.tChips_dummy))
	, wChips_dummy(std::move(_o.wChips_dummy))
	, fullName(std::move(_o.fullName))
	, email(std::move(_o.email))
	, addr_1(std::move(_o.addr_1))
	, addr_2(std::move(_o.addr_2))
	, city(std::move(_o.city))
	, state(std::move(_o.state))
	, country(std::move(_o.country))
	, zipCode(std::move(_o.zipCode))
	, userInstallId(std::move(_o.userInstallId))
	, imageId(std::move(_o.imageId))
	, flags(std::move(_o.flags))
	, prevUserId(std::move(_o.prevUserId))
	, fpp_(std::move(_o.fpp_))
	, ltFpp_(std::move(_o.ltFpp_))
	, unique(std::move(_o.unique))
	, registered(std::move(_o.registered))
	, userIntId(std::move(_o.userIntId))
	, category(std::move(_o.category))
	, phone(std::move(_o.phone))
	, firstDeposit(std::move(_o.firstDeposit))
	, hybridSiteId(std::move(_o.hybridSiteId))
	, sid(std::move(_o.sid))
	, visited(std::move(_o.visited))
	, fppCents_(std::move(_o.fppCents_))
	, vipStatus(std::move(_o.vipStatus))
	, vipCounter1_(std::move(_o.vipCounter1_))
	, vipCounter2_(std::move(_o.vipCounter2_))
	, vipStatusSet(std::move(_o.vipStatusSet))
	, firstTransfer(std::move(_o.firstTransfer))
	, owedChips_dummy(std::move(_o.owedChips_dummy))
	, depositMask32(std::move(_o.depositMask32))
	, birthDate(std::move(_o.birthDate))
	, locale(std::move(_o.locale))
	, privileges2(std::move(_o.privileges2))
	, clearedMask32(std::move(_o.clearedMask32))
	, emLocale(std::move(_o.emLocale))
	, encrPwd(std::move(_o.encrPwd))
	, timezone(std::move(_o.timezone))
	, currency_dummy(std::move(_o.currency_dummy))
	, firstName(std::move(_o.firstName))
	, lastName(std::move(_o.lastName))
	, fiscalCode(std::move(_o.fiscalCode))
	, licenseId(std::move(_o.licenseId))
	, gracePeriodUntil_dummy(std::move(_o.gracePeriodUntil_dummy))
	, flags2(std::move(_o.flags2))
	, ltFppCents_(std::move(_o.ltFppCents_))
	, vipCounter1Cents_(std::move(_o.vipCounter1Cents_))
	, vipCounter2Cents_(std::move(_o.vipCounter2Cents_))
	, adminFlags(std::move(_o.adminFlags))
	, overcreditMask64(std::move(_o.overcreditMask64))
	, originalUserIntId(std::move(_o.originalUserIntId))
	, balance(std::move(_o.balance))
	, depositMask64(std::move(_o.depositMask64))
	, clearedMask64(std::move(_o.clearedMask64))
	, sex(std::move(_o.sex))
	, normalizedUserId(std::move(_o.normalizedUserId))
	, mobile(std::move(_o.mobile))
	, licenseSpecificLimit1(std::move(_o.licenseSpecificLimit1))
	, licenseSpecificCounter2(std::move(_o.licenseSpecificCounter2))
	, depositMask(std::move(_o.depositMask))
	, clearedMask(std::move(_o.clearedMask))
	, overcreditMask(std::move(_o.overcreditMask))
	, vipCounter3InCents_(std::move(_o.vipCounter3InCents_))
	, beMoneyIn(std::move(_o.beMoneyIn))
	, beMoneyOut(std::move(_o.beMoneyOut))
	, licenseSpecificAmount3(std::move(_o.licenseSpecificAmount3))
	, vipStatusUntil(std::move(_o.vipStatusUntil))
	, platformsUsed(std::move(_o.platformsUsed))
	, facebookIntId(std::move(_o.facebookIntId))
	, playChips(std::move(_o.playChips))
	, blockingCode(std::move(_o.blockingCode))
	, idExtension(std::move(_o.idExtension))
	, privileges3(std::move(_o.privileges3))
	, cpp(std::move(_o.cpp))
	, spp(std::move(_o.spp))
	, flags3(std::move(_o.flags3))
	, brandsUsed(std::move(_o.brandsUsed))
	, nac2(std::move(_o.nac2))
	, visitedEx(std::move(_o.visitedEx))
	, regSiteId(std::move(_o.regSiteId))
	, operatorId(std::move(_o.operatorId))
	, promoName(std::move(_o.promoName))
{
}

Common::AtfShared::User& Common::AtfShared::User::operator=(User&& _o)
{
	if(this != &_o)
	{
		id = std::move(_o.id);
		dummy = std::move(_o.dummy);
		privileges = std::move(_o.privileges);
		chips_dummy = std::move(_o.chips_dummy);
		playChips32 = std::move(_o.playChips32);
		tChips_dummy = std::move(_o.tChips_dummy);
		wChips_dummy = std::move(_o.wChips_dummy);
		fullName = std::move(_o.fullName);
		email = std::move(_o.email);
		addr_1 = std::move(_o.addr_1);
		addr_2 = std::move(_o.addr_2);
		city = std::move(_o.city);
		state = std::move(_o.state);
		country = std::move(_o.country);
		zipCode = std::move(_o.zipCode);
		userInstallId = std::move(_o.userInstallId);
		imageId = std::move(_o.imageId);
		flags = std::move(_o.flags);
		prevUserId = std::move(_o.prevUserId);
		fpp_ = std::move(_o.fpp_);
		ltFpp_ = std::move(_o.ltFpp_);
		unique = std::move(_o.unique);
		registered = std::move(_o.registered);
		userIntId = std::move(_o.userIntId);
		category = std::move(_o.category);
		phone = std::move(_o.phone);
		firstDeposit = std::move(_o.firstDeposit);
		hybridSiteId = std::move(_o.hybridSiteId);
		sid = std::move(_o.sid);
		visited = std::move(_o.visited);
		fppCents_ = std::move(_o.fppCents_);
		vipStatus = std::move(_o.vipStatus);
		vipCounter1_ = std::move(_o.vipCounter1_);
		vipCounter2_ = std::move(_o.vipCounter2_);
		vipStatusSet = std::move(_o.vipStatusSet);
		firstTransfer = std::move(_o.firstTransfer);
		owedChips_dummy = std::move(_o.owedChips_dummy);
		depositMask32 = std::move(_o.depositMask32);
		birthDate = std::move(_o.birthDate);
		locale = std::move(_o.locale);
		privileges2 = std::move(_o.privileges2);
		clearedMask32 = std::move(_o.clearedMask32);
		emLocale = std::move(_o.emLocale);
		encrPwd = std::move(_o.encrPwd);
		timezone = std::move(_o.timezone);
		currency_dummy = std::move(_o.currency_dummy);
		firstName = std::move(_o.firstName);
		lastName = std::move(_o.lastName);
		fiscalCode = std::move(_o.fiscalCode);
		licenseId = std::move(_o.licenseId);
		gracePeriodUntil_dummy = std::move(_o.gracePeriodUntil_dummy);
		flags2 = std::move(_o.flags2);
		ltFppCents_ = std::move(_o.ltFppCents_);
		vipCounter1Cents_ = std::move(_o.vipCounter1Cents_);
		vipCounter2Cents_ = std::move(_o.vipCounter2Cents_);
		adminFlags = std::move(_o.adminFlags);
		overcreditMask64 = std::move(_o.overcreditMask64);
		originalUserIntId = std::move(_o.originalUserIntId);
		balance = std::move(_o.balance);
		depositMask64 = std::move(_o.depositMask64);
		clearedMask64 = std::move(_o.clearedMask64);
		sex = std::move(_o.sex);
		normalizedUserId = std::move(_o.normalizedUserId);
		mobile = std::move(_o.mobile);
		licenseSpecificLimit1 = std::move(_o.licenseSpecificLimit1);
		licenseSpecificCounter2 = std::move(_o.licenseSpecificCounter2);
		depositMask = std::move(_o.depositMask);
		clearedMask = std::move(_o.clearedMask);
		overcreditMask = std::move(_o.overcreditMask);
		vipCounter3InCents_ = std::move(_o.vipCounter3InCents_);
		beMoneyIn = std::move(_o.beMoneyIn);
		beMoneyOut = std::move(_o.beMoneyOut);
		licenseSpecificAmount3 = std::move(_o.licenseSpecificAmount3);
		vipStatusUntil = std::move(_o.vipStatusUntil);
		platformsUsed = std::move(_o.platformsUsed);
		facebookIntId = std::move(_o.facebookIntId);
		playChips = std::move(_o.playChips);
		blockingCode = std::move(_o.blockingCode);
		idExtension = std::move(_o.idExtension);
		privileges3 = std::move(_o.privileges3);
		cpp = std::move(_o.cpp);
		spp = std::move(_o.spp);
		flags3 = std::move(_o.flags3);
		brandsUsed = std::move(_o.brandsUsed);
		nac2 = std::move(_o.nac2);
		visitedEx = std::move(_o.visitedEx);
		regSiteId = std::move(_o.regSiteId);
		operatorId = std::move(_o.operatorId);
		promoName = std::move(_o.promoName);
	}
	return *this;
}

#endif

void Common::AtfShared::User::clear()
{
	id.clear();
	dummy.clear();
	privileges = 0;
	chips_dummy = 0;
	playChips32 = 0;
	tChips_dummy = 0;
	wChips_dummy = 0;
	fullName.clear();
	email.clear();
	addr_1.clear();
	addr_2.clear();
	city.clear();
	state.clear();
	country.clear();
	zipCode.clear();
	userInstallId.clear();
	imageId = 0;
	flags = 0;
	prevUserId.clear();
	fpp_ = 0;
	ltFpp_ = 0;
	unique = 0;
	registered.setNull();
	userIntId = 0;
	category.clear();
	phone.clear();
	firstDeposit.setNull();
	hybridSiteId = 0;
	sid.clear();
	visited = 0;
	fppCents_ = 0;
	vipStatus = 0;
	vipCounter1_ = 0;
	vipCounter2_ = 0;
	vipStatusSet.setNull();
	firstTransfer.setNull();
	owedChips_dummy = 0;
	depositMask32 = 0;
	birthDate.setNull();
	locale = 0;
	privileges2 = 0;
	clearedMask32 = 0;
	emLocale = 0;
	encrPwd.clear();
	timezone = 0;
	currency_dummy.clear();
	firstName.clear();
	lastName.clear();
	fiscalCode.clear();
	licenseId = 0;
	gracePeriodUntil_dummy.setNull();
	flags2 = 0;
	ltFppCents_ = 0;
	vipCounter1Cents_ = 0;
	vipCounter2Cents_ = 0;
	adminFlags = 0;
	overcreditMask64 = 0;
	originalUserIntId = 0;
	balance.clear();
	depositMask64 = 0;
	clearedMask64 = 0;
	sex.clear();
	normalizedUserId.clear();
	mobile.clear();
	licenseSpecificLimit1 = 0;
	licenseSpecificCounter2 = 0;
	depositMask.clear();
	clearedMask.clear();
	overcreditMask.clear();
	vipCounter3InCents_ = 0;
	beMoneyIn = 0;
	beMoneyOut = 0;
	licenseSpecificAmount3 = 0;
	vipStatusUntil.setNull();
	platformsUsed = 0;
	facebookIntId = 0;
	playChips = 0;
	blockingCode = 0;
	idExtension.clear();
	privileges3 = 0;
	cpp.clear();
	spp.clear();
	flags3 = 0;
	brandsUsed = 0;
	nac2 = 0;
	visitedEx.clear();
	regSiteId = 0;
	operatorId = 0;
	promoName.clear();
}

bool Common::AtfShared::User::equals(const User& _o) const
{
	return Atf::atfPStringEquals(id, _o.id) &&
		Atf::atfPStringEquals(dummy, _o.dummy) &&
		privileges == _o.privileges &&
		chips_dummy == _o.chips_dummy &&
		playChips32 == _o.playChips32 &&
		tChips_dummy == _o.tChips_dummy &&
		wChips_dummy == _o.wChips_dummy &&
		Atf::atfPStringEquals(fullName, _o.fullName) &&
		Atf::atfPStringEquals(email, _o.email) &&
		Atf::atfPStringEquals(addr_1, _o.addr_1) &&
		Atf::atfPStringEquals(addr_2, _o.addr_2) &&
		Atf::atfPStringEquals(city, _o.city) &&
		Atf::atfPStringEquals(state, _o.state) &&
		Atf::atfPStringEquals(country, _o.country) &&
		Atf::atfPStringEquals(zipCode, _o.zipCode) &&
		Atf::atfPStringEquals(userInstallId, _o.userInstallId) &&
		imageId == _o.imageId &&
		flags == _o.flags &&
		Atf::atfPStringEquals(prevUserId, _o.prevUserId) &&
		fpp_ == _o.fpp_ &&
		ltFpp_ == _o.ltFpp_ &&
		unique == _o.unique &&
		registered.equals(_o.registered) &&
		userIntId == _o.userIntId &&
		Atf::atfPStringEquals(category, _o.category) &&
		Atf::atfPStringEquals(phone, _o.phone) &&
		firstDeposit.equals(_o.firstDeposit) &&
		hybridSiteId == _o.hybridSiteId &&
		Atf::atfPStringEquals(sid, _o.sid) &&
		visited == _o.visited &&
		fppCents_ == _o.fppCents_ &&
		vipStatus == _o.vipStatus &&
		vipCounter1_ == _o.vipCounter1_ &&
		vipCounter2_ == _o.vipCounter2_ &&
		vipStatusSet.equals(_o.vipStatusSet) &&
		firstTransfer.equals(_o.firstTransfer) &&
		owedChips_dummy == _o.owedChips_dummy &&
		depositMask32 == _o.depositMask32 &&
		birthDate.equals(_o.birthDate) &&
		locale == _o.locale &&
		privileges2 == _o.privileges2 &&
		clearedMask32 == _o.clearedMask32 &&
		emLocale == _o.emLocale &&
		Atf::atfPStringEquals(encrPwd, _o.encrPwd) &&
		timezone == _o.timezone &&
		Atf::atfPStringEquals(currency_dummy, _o.currency_dummy) &&
		Atf::atfPStringEquals(firstName, _o.firstName) &&
		Atf::atfPStringEquals(lastName, _o.lastName) &&
		Atf::atfPStringEquals(fiscalCode, _o.fiscalCode) &&
		licenseId == _o.licenseId &&
		gracePeriodUntil_dummy.equals(_o.gracePeriodUntil_dummy) &&
		flags2 == _o.flags2 &&
		ltFppCents_ == _o.ltFppCents_ &&
		vipCounter1Cents_ == _o.vipCounter1Cents_ &&
		vipCounter2Cents_ == _o.vipCounter2Cents_ &&
		adminFlags == _o.adminFlags &&
		overcreditMask64 == _o.overcreditMask64 &&
		originalUserIntId == _o.originalUserIntId &&
		balance.equals(_o.balance) &&
		depositMask64 == _o.depositMask64 &&
		clearedMask64 == _o.clearedMask64 &&
		Atf::atfPStringEquals(sex, _o.sex) &&
		Atf::atfPStringEquals(normalizedUserId, _o.normalizedUserId) &&
		Atf::atfPStringEquals(mobile, _o.mobile) &&
		licenseSpecificLimit1 == _o.licenseSpecificLimit1 &&
		licenseSpecificCounter2 == _o.licenseSpecificCounter2 &&
		depositMask.equals(_o.depositMask) &&
		clearedMask.equals(_o.clearedMask) &&
		overcreditMask.equals(_o.overcreditMask) &&
		vipCounter3InCents_ == _o.vipCounter3InCents_ &&
		beMoneyIn == _o.beMoneyIn &&
		beMoneyOut == _o.beMoneyOut &&
		licenseSpecificAmount3 == _o.licenseSpecificAmount3 &&
		vipStatusUntil.equals(_o.vipStatusUntil) &&
		platformsUsed == _o.platformsUsed &&
		facebookIntId == _o.facebookIntId &&
		playChips == _o.playChips &&
		blockingCode == _o.blockingCode &&
		Atf::atfPStringEquals(idExtension, _o.idExtension) &&
		privileges3 == _o.privileges3 &&
		cpp.equals(_o.cpp) &&
		spp.equals(_o.spp) &&
		flags3 == _o.flags3 &&
		brandsUsed == _o.brandsUsed &&
		nac2 == _o.nac2 &&
		visitedEx.equals(_o.visitedEx) &&
		regSiteId == _o.regSiteId &&
		operatorId == _o.operatorId &&
		Atf::atfPStringEquals(promoName, _o.promoName);
}

const char *Common::AtfShared::User::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("id=");
	_buf.append(id);
	_buf.append(',');
	_buf.append("dummy=");
	_buf.append(dummy);
	_buf.append(',');
	_buf.append("privileges=");
	_buf.appendUint(privileges);
	_buf.append(',');
	_buf.append("chips_dummy=");
	_buf.appendInt(chips_dummy);
	_buf.append(',');
	_buf.append("playChips32=");
	_buf.appendInt(playChips32);
	_buf.append(',');
	_buf.append("tChips_dummy=");
	_buf.appendInt(tChips_dummy);
	_buf.append(',');
	_buf.append("wChips_dummy=");
	_buf.appendInt(wChips_dummy);
	_buf.append(',');
	_buf.append("fullName=");
	_buf.append(fullName);
	_buf.append(',');
	_buf.append("email=");
	_buf.append(email);
	_buf.append(',');
	_buf.append("addr_1=");
	_buf.append(addr_1);
	_buf.append(',');
	_buf.append("addr_2=");
	_buf.append(addr_2);
	_buf.append(',');
	_buf.append("city=");
	_buf.append(city);
	_buf.append(',');
	_buf.append("state=");
	_buf.append(state);
	_buf.append(',');
	_buf.append("country=");
	_buf.append(country);
	_buf.append(',');
	_buf.append("zipCode=");
	_buf.append(zipCode);
	_buf.append(',');
	_buf.append("userInstallId=");
	_buf.append(userInstallId);
	_buf.append(',');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("prevUserId=");
	_buf.append(prevUserId);
	_buf.append(',');
	_buf.append("fpp_=");
	_buf.appendInt(fpp_);
	_buf.append(',');
	_buf.append("ltFpp_=");
	_buf.appendInt(ltFpp_);
	_buf.append(',');
	_buf.append("unique=");
	_buf.appendInt(unique);
	_buf.append(',');
	_buf.append("registered=");
	Atf::AtfTempl<SrvTime>::ToTraceString(_buf, registered);
	_buf.append(',');
	_buf.append("userIntId=");
	_buf.appendUint(userIntId);
	_buf.append(',');
	_buf.append("category=");
	_buf.append(category);
	_buf.append(',');
	_buf.append("phone=");
	_buf.append(phone);
	_buf.append(',');
	_buf.append("firstDeposit=");
	Atf::AtfTempl<SrvTime>::ToTraceString(_buf, firstDeposit);
	_buf.append(',');
	_buf.append("hybridSiteId=");
	_buf.appendUint(hybridSiteId);
	_buf.append(',');
	_buf.append("sid=");
	_buf.append(sid);
	_buf.append(',');
	_buf.append("visited=");
	_buf.appendUint(visited);
	_buf.append(',');
	_buf.append("fppCents_=");
	_buf.appendInt(fppCents_);
	_buf.append(',');
	_buf.append("vipStatus=");
	_buf.appendInt(vipStatus);
	_buf.append(',');
	_buf.append("vipCounter1_=");
	_buf.appendInt(vipCounter1_);
	_buf.append(',');
	_buf.append("vipCounter2_=");
	_buf.appendInt(vipCounter2_);
	_buf.append(',');
	_buf.append("vipStatusSet=");
	Atf::AtfTempl<SrvTime>::ToTraceString(_buf, vipStatusSet);
	_buf.append(',');
	_buf.append("firstTransfer=");
	Atf::AtfTempl<SrvTime>::ToTraceString(_buf, firstTransfer);
	_buf.append(',');
	_buf.append("owedChips_dummy=");
	_buf.appendInt(owedChips_dummy);
	_buf.append(',');
	_buf.append("depositMask32=");
	_buf.appendUint(depositMask32);
	_buf.append(',');
	_buf.append("birthDate=");
	Atf::AtfTempl<SrvDate>::ToTraceString(_buf, birthDate);
	_buf.append(',');
	_buf.append("locale=");
	_buf.appendUint(locale);
	_buf.append(',');
	_buf.append("privileges2=");
	_buf.appendUint64(privileges2);
	_buf.append(',');
	_buf.append("clearedMask32=");
	_buf.appendUint(clearedMask32);
	_buf.append(',');
	_buf.append("emLocale=");
	_buf.appendUint(emLocale);
	_buf.append(',');
	_buf.append("encrPwd=");
	_buf.append(encrPwd);
	_buf.append(',');
	_buf.append("timezone=");
	_buf.appendUint(timezone);
	_buf.append(',');
	_buf.append("currency_dummy=");
	_buf.append(currency_dummy);
	_buf.append(',');
	_buf.append("firstName=");
	_buf.append(firstName);
	_buf.append(',');
	_buf.append("lastName=");
	_buf.append(lastName);
	_buf.append(',');
	_buf.append("fiscalCode=");
	_buf.append(fiscalCode);
	_buf.append(',');
	_buf.append("licenseId=");
	_buf.appendUint(licenseId);
	_buf.append(',');
	_buf.append("gracePeriodUntil_dummy=");
	Atf::AtfTempl<SrvTime>::ToTraceString(_buf, gracePeriodUntil_dummy);
	_buf.append(',');
	_buf.append("flags2=");
	_buf.appendUint64(flags2);
	_buf.append(',');
	_buf.append("ltFppCents_=");
	_buf.appendInt(ltFppCents_);
	_buf.append(',');
	_buf.append("vipCounter1Cents_=");
	_buf.appendInt(vipCounter1Cents_);
	_buf.append(',');
	_buf.append("vipCounter2Cents_=");
	_buf.appendInt(vipCounter2Cents_);
	_buf.append(',');
	_buf.append("adminFlags=");
	_buf.appendUint(adminFlags);
	_buf.append(',');
	_buf.append("overcreditMask64=");
	_buf.appendUint64(overcreditMask64);
	_buf.append(',');
	_buf.append("originalUserIntId=");
	_buf.appendUint(originalUserIntId);
	_buf.append(',');
	_buf.append("balance=");
	balance.toTraceString(_buf);
	_buf.append(',');
	_buf.append("depositMask64=");
	_buf.appendUint64(depositMask64);
	_buf.append(',');
	_buf.append("clearedMask64=");
	_buf.appendUint64(clearedMask64);
	_buf.append(',');
	_buf.append("sex=");
	_buf.append(sex);
	_buf.append(',');
	_buf.append("normalizedUserId=");
	_buf.append(normalizedUserId);
	_buf.append(',');
	_buf.append("mobile=");
	_buf.append(mobile);
	_buf.append(',');
	_buf.append("licenseSpecificLimit1=");
	_buf.appendInt(licenseSpecificLimit1);
	_buf.append(',');
	_buf.append("licenseSpecificCounter2=");
	_buf.appendInt(licenseSpecificCounter2);
	_buf.append(',');
	_buf.append("depositMask=");
	depositMask.toTraceString(_buf);
	_buf.append(',');
	_buf.append("clearedMask=");
	clearedMask.toTraceString(_buf);
	_buf.append(',');
	_buf.append("overcreditMask=");
	overcreditMask.toTraceString(_buf);
	_buf.append(',');
	_buf.append("vipCounter3InCents_=");
	_buf.appendInt(vipCounter3InCents_);
	_buf.append(',');
	_buf.append("beMoneyIn=");
	_buf.appendInt(beMoneyIn);
	_buf.append(',');
	_buf.append("beMoneyOut=");
	_buf.appendInt(beMoneyOut);
	_buf.append(',');
	_buf.append("licenseSpecificAmount3=");
	_buf.appendInt(licenseSpecificAmount3);
	_buf.append(',');
	_buf.append("vipStatusUntil=");
	Atf::AtfTempl<SrvDate>::ToTraceString(_buf, vipStatusUntil);
	_buf.append(',');
	_buf.append("platformsUsed=");
	_buf.appendUint(platformsUsed);
	_buf.append(',');
	_buf.append("facebookIntId=");
	_buf.appendUint64(facebookIntId);
	_buf.append(',');
	_buf.append("playChips=");
	_buf.appendInt64(playChips);
	_buf.append(',');
	_buf.append("blockingCode=");
	_buf.appendUint(blockingCode);
	_buf.append(',');
	_buf.append("idExtension=");
	_buf.append(idExtension);
	_buf.append(',');
	_buf.append("privileges3=");
	_buf.appendUint64(privileges3);
	_buf.append(',');
	_buf.append("cpp=");
	cpp.toTraceString(_buf);
	_buf.append(',');
	_buf.append("spp=");
	spp.toTraceString(_buf);
	_buf.append(',');
	_buf.append("flags3=");
	_buf.appendUint64(flags3);
	_buf.append(',');
	_buf.append("brandsUsed=");
	_buf.appendUint(brandsUsed);
	_buf.append(',');
	_buf.append("nac2=");
	_buf.appendInt(nac2);
	_buf.append(',');
	_buf.append("visitedEx=");
	visitedEx.toTraceString(_buf);
	_buf.append(',');
	_buf.append("regSiteId=");
	_buf.appendUint(regSiteId);
	_buf.append(',');
	_buf.append("operatorId=");
	_buf.appendInt(operatorId);
	_buf.append(',');
	_buf.append("promoName=");
	_buf.append(promoName);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::User::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("id", id, _buf);
	Atf::XmlElement::encodeAsXmlElement("dummy", dummy, _buf);
	Atf::XmlElement::encodeAsXmlElement("privileges", privileges, _buf);
	Atf::XmlElement::encodeAsXmlElement("chips_dummy", chips_dummy, _buf);
	Atf::XmlElement::encodeAsXmlElement("playChips32", playChips32, _buf);
	Atf::XmlElement::encodeAsXmlElement("tChips_dummy", tChips_dummy, _buf);
	Atf::XmlElement::encodeAsXmlElement("wChips_dummy", wChips_dummy, _buf);
	Atf::XmlElement::encodeAsXmlElement("fullName", fullName, _buf);
	Atf::XmlElement::encodeAsXmlElement("email", email, _buf);
	Atf::XmlElement::encodeAsXmlElement("addr_1", addr_1, _buf);
	Atf::XmlElement::encodeAsXmlElement("addr_2", addr_2, _buf);
	Atf::XmlElement::encodeAsXmlElement("city", city, _buf);
	Atf::XmlElement::encodeAsXmlElement("state", state, _buf);
	Atf::XmlElement::encodeAsXmlElement("country", country, _buf);
	Atf::XmlElement::encodeAsXmlElement("zipCode", zipCode, _buf);
	Atf::XmlElement::encodeAsXmlElement("userInstallId", userInstallId, _buf);
	Atf::XmlElement::encodeAsXmlElement("imageId", imageId, _buf);
	Atf::XmlElement::encodeAsXmlElement("flags", flags, _buf);
	Atf::XmlElement::encodeAsXmlElement("prevUserId", prevUserId, _buf);
	Atf::XmlElement::encodeAsXmlElement("fpp_", fpp_, _buf);
	Atf::XmlElement::encodeAsXmlElement("ltFpp_", ltFpp_, _buf);
	Atf::XmlElement::encodeAsXmlElement("unique", unique, _buf);
	Atf::AtfTempl<SrvTime>::ToXmlString(_buf, "registered", registered);
	Atf::XmlElement::encodeAsXmlElement("userIntId", userIntId, _buf);
	Atf::XmlElement::encodeAsXmlElement("category", category, _buf);
	Atf::XmlElement::encodeAsXmlElement("phone", phone, _buf);
	Atf::AtfTempl<SrvTime>::ToXmlString(_buf, "firstDeposit", firstDeposit);
	Atf::XmlElement::encodeAsXmlElement("hybridSiteId", hybridSiteId, _buf);
	Atf::XmlElement::encodeAsXmlElement("sid", sid, _buf);
	Atf::XmlElement::encodeAsXmlElement("visited", visited, _buf);
	Atf::XmlElement::encodeAsXmlElement("fppCents_", fppCents_, _buf);
	Atf::XmlElement::encodeAsXmlElement("vipStatus", vipStatus, _buf);
	Atf::XmlElement::encodeAsXmlElement("vipCounter1_", vipCounter1_, _buf);
	Atf::XmlElement::encodeAsXmlElement("vipCounter2_", vipCounter2_, _buf);
	Atf::AtfTempl<SrvTime>::ToXmlString(_buf, "vipStatusSet", vipStatusSet);
	Atf::AtfTempl<SrvTime>::ToXmlString(_buf, "firstTransfer", firstTransfer);
	Atf::XmlElement::encodeAsXmlElement("owedChips_dummy", owedChips_dummy, _buf);
	Atf::XmlElement::encodeAsXmlElement("depositMask32", depositMask32, _buf);
	Atf::AtfTempl<SrvDate>::ToXmlString(_buf, "birthDate", birthDate);
	Atf::XmlElement::encodeAsXmlElement("locale", locale, _buf);
	Atf::XmlElement::encodeAsXmlElement("privileges2", privileges2, _buf);
	Atf::XmlElement::encodeAsXmlElement("clearedMask32", clearedMask32, _buf);
	Atf::XmlElement::encodeAsXmlElement("emLocale", emLocale, _buf);
	Atf::XmlElement::encodeAsXmlElement("encrPwd", encrPwd, _buf);
	Atf::XmlElement::encodeAsXmlElement("timezone", timezone, _buf);
	Atf::XmlElement::encodeAsXmlElement("currency_dummy", currency_dummy, _buf);
	Atf::XmlElement::encodeAsXmlElement("firstName", firstName, _buf);
	Atf::XmlElement::encodeAsXmlElement("lastName", lastName, _buf);
	Atf::XmlElement::encodeAsXmlElement("fiscalCode", fiscalCode, _buf);
	Atf::XmlElement::encodeAsXmlElement("licenseId", licenseId, _buf);
	Atf::AtfTempl<SrvTime>::ToXmlString(_buf, "gracePeriodUntil_dummy", gracePeriodUntil_dummy);
	Atf::XmlElement::encodeAsXmlElement("flags2", flags2, _buf);
	Atf::XmlElement::encodeAsXmlElement("ltFppCents_", ltFppCents_, _buf);
	Atf::XmlElement::encodeAsXmlElement("vipCounter1Cents_", vipCounter1Cents_, _buf);
	Atf::XmlElement::encodeAsXmlElement("vipCounter2Cents_", vipCounter2Cents_, _buf);
	Atf::XmlElement::encodeAsXmlElement("adminFlags", adminFlags, _buf);
	Atf::XmlElement::encodeAsXmlElement("overcreditMask64", overcreditMask64, _buf);
	Atf::XmlElement::encodeAsXmlElement("originalUserIntId", originalUserIntId, _buf);
	balance.toXmlString("balance", _buf);
	Atf::XmlElement::encodeAsXmlElement("depositMask64", depositMask64, _buf);
	Atf::XmlElement::encodeAsXmlElement("clearedMask64", clearedMask64, _buf);
	Atf::XmlElement::encodeAsXmlElement("sex", sex, _buf);
	Atf::XmlElement::encodeAsXmlElement("normalizedUserId", normalizedUserId, _buf);
	Atf::XmlElement::encodeAsXmlElement("mobile", mobile, _buf);
	Atf::XmlElement::encodeAsXmlElement("licenseSpecificLimit1", licenseSpecificLimit1, _buf);
	Atf::XmlElement::encodeAsXmlElement("licenseSpecificCounter2", licenseSpecificCounter2, _buf);
	depositMask.toXmlString("depositMask", _buf);
	clearedMask.toXmlString("clearedMask", _buf);
	overcreditMask.toXmlString("overcreditMask", _buf);
	Atf::XmlElement::encodeAsXmlElement("vipCounter3InCents_", vipCounter3InCents_, _buf);
	Atf::XmlElement::encodeAsXmlElement("beMoneyIn", beMoneyIn, _buf);
	Atf::XmlElement::encodeAsXmlElement("beMoneyOut", beMoneyOut, _buf);
	Atf::XmlElement::encodeAsXmlElement("licenseSpecificAmount3", licenseSpecificAmount3, _buf);
	Atf::AtfTempl<SrvDate>::ToXmlString(_buf, "vipStatusUntil", vipStatusUntil);
	Atf::XmlElement::encodeAsXmlElement("platformsUsed", platformsUsed, _buf);
	Atf::XmlElement::encodeAsXmlElement("facebookIntId", facebookIntId, _buf);
	Atf::XmlElement::encodeAsXmlElement("playChips", playChips, _buf);
	Atf::XmlElement::encodeAsXmlElement("blockingCode", blockingCode, _buf);
	Atf::XmlElement::encodeAsXmlElement("idExtension", idExtension, _buf);
	Atf::XmlElement::encodeAsXmlElement("privileges3", privileges3, _buf);
	cpp.toXmlString("cpp", _buf);
	spp.toXmlString("spp", _buf);
	Atf::XmlElement::encodeAsXmlElement("flags3", flags3, _buf);
	Atf::XmlElement::encodeAsXmlElement("brandsUsed", brandsUsed, _buf);
	Atf::XmlElement::encodeAsXmlElement("nac2", nac2, _buf);
	visitedEx.toXmlString("visitedEx", _buf);
	Atf::XmlElement::encodeAsXmlElement("regSiteId", regSiteId, _buf);
	Atf::XmlElement::encodeAsXmlElement("operatorId", operatorId, _buf);
	Atf::XmlElement::encodeAsXmlElement("promoName", promoName, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::User::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		switch((BYTE)*_element)
		{
		case 'a':
			if (_element.equals("addr_1"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, addr_1)) return false;
			}
			else if (_element.equals("addr_2"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, addr_2)) return false;
			}
			else if (_element.equals("adminFlags"))
			{
				adminFlags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'b':
			if (_element.equals("birthDate"))
			{
				Atf::AtfTempl<SrvDate>::FromXmlString(_value, birthDate);
			}
			else if (_element.equals("balance"))
			{
				if(!Atf::AtfTempl< UserCurrencyAccounts >::FromXmlString(_value, balance)) return false;
			}
			else if (_element.equals("beMoneyIn"))
			{
				beMoneyIn = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("beMoneyOut"))
			{
				beMoneyOut = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("blockingCode"))
			{
				blockingCode = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("brandsUsed"))
			{
				brandsUsed = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'c':
			if (_element.equals("chips_dummy"))
			{
				chips_dummy = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("city"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, city)) return false;
			}
			else if (_element.equals("country"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, country)) return false;
			}
			else if (_element.equals("category"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, category)) return false;
			}
			else if (_element.equals("clearedMask32"))
			{
				clearedMask32 = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("currency_dummy"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, currency_dummy)) return false;
			}
			else if (_element.equals("clearedMask64"))
			{
				clearedMask64 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("clearedMask"))
			{
				if(!Atf::AtfTempl< PaysystemMask >::FromXmlString(_value, clearedMask)) return false;
			}
			else if (_element.equals("cpp"))
			{
				if(!Atf::AtfTempl< PlayerPointsProgram >::FromXmlString(_value, cpp)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'd':
			if (_element.equals("dummy"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, dummy)) return false;
			}
			else if (_element.equals("depositMask32"))
			{
				depositMask32 = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("depositMask64"))
			{
				depositMask64 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("depositMask"))
			{
				if(!Atf::AtfTempl< PaysystemMask >::FromXmlString(_value, depositMask)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'e':
			if (_element.equals("email"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, email)) return false;
			}
			else if (_element.equals("emLocale"))
			{
				emLocale = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("encrPwd"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, encrPwd)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'f':
			if (_element.equals("fullName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, fullName)) return false;
			}
			else if (_element.equals("flags"))
			{
				flags = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("fpp_"))
			{
				fpp_ = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("firstDeposit"))
			{
				Atf::AtfTempl<SrvTime>::FromXmlString(_value, firstDeposit);
			}
			else if (_element.equals("fppCents_"))
			{
				fppCents_ = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("firstTransfer"))
			{
				Atf::AtfTempl<SrvTime>::FromXmlString(_value, firstTransfer);
			}
			else if (_element.equals("firstName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, firstName)) return false;
			}
			else if (_element.equals("fiscalCode"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, fiscalCode)) return false;
			}
			else if (_element.equals("flags2"))
			{
				flags2 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("facebookIntId"))
			{
				facebookIntId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("flags3"))
			{
				flags3 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'g':
			if (_element.equals("gracePeriodUntil_dummy"))
			{
				Atf::AtfTempl<SrvTime>::FromXmlString(_value, gracePeriodUntil_dummy);
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'h':
			if (_element.equals("hybridSiteId"))
			{
				hybridSiteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'i':
			if (_element.equals("id"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, id)) return false;
			}
			else if (_element.equals("imageId"))
			{
				imageId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("idExtension"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, idExtension)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'l':
			if (_element.equals("ltFpp_"))
			{
				ltFpp_ = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("locale"))
			{
				locale = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("lastName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, lastName)) return false;
			}
			else if (_element.equals("licenseId"))
			{
				licenseId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("ltFppCents_"))
			{
				ltFppCents_ = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("licenseSpecificLimit1"))
			{
				licenseSpecificLimit1 = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("licenseSpecificCounter2"))
			{
				licenseSpecificCounter2 = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("licenseSpecificAmount3"))
			{
				licenseSpecificAmount3 = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'm':
			if (_element.equals("mobile"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, mobile)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'n':
			if (_element.equals("normalizedUserId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, normalizedUserId)) return false;
			}
			else if (_element.equals("nac2"))
			{
				nac2 = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'o':
			if (_element.equals("owedChips_dummy"))
			{
				owedChips_dummy = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("overcreditMask64"))
			{
				overcreditMask64 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("originalUserIntId"))
			{
				originalUserIntId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("overcreditMask"))
			{
				if(!Atf::AtfTempl< PaysystemMask >::FromXmlString(_value, overcreditMask)) return false;
			}
			else if (_element.equals("operatorId"))
			{
				operatorId = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'p':
			if (_element.equals("privileges"))
			{
				privileges = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("playChips32"))
			{
				playChips32 = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("prevUserId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, prevUserId)) return false;
			}
			else if (_element.equals("phone"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, phone)) return false;
			}
			else if (_element.equals("privileges2"))
			{
				privileges2 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("platformsUsed"))
			{
				platformsUsed = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("playChips"))
			{
				playChips = (INT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("privileges3"))
			{
				privileges3 = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("promoName"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, promoName)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'r':
			if (_element.equals("registered"))
			{
				Atf::AtfTempl<SrvTime>::FromXmlString(_value, registered);
			}
			else if (_element.equals("regSiteId"))
			{
				regSiteId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 's':
			if (_element.equals("state"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, state)) return false;
			}
			else if (_element.equals("sid"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, sid)) return false;
			}
			else if (_element.equals("sex"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, sex)) return false;
			}
			else if (_element.equals("spp"))
			{
				if(!Atf::AtfTempl< PlayerPointsProgram >::FromXmlString(_value, spp)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 't':
			if (_element.equals("tChips_dummy"))
			{
				tChips_dummy = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("timezone"))
			{
				timezone = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'u':
			if (_element.equals("userInstallId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, userInstallId)) return false;
			}
			else if (_element.equals("unique"))
			{
				unique = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("userIntId"))
			{
				userIntId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'v':
			if (_element.equals("visited"))
			{
				visited = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("vipStatus"))
			{
				vipStatus = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("vipCounter1_"))
			{
				vipCounter1_ = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("vipCounter2_"))
			{
				vipCounter2_ = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("vipStatusSet"))
			{
				Atf::AtfTempl<SrvTime>::FromXmlString(_value, vipStatusSet);
			}
			else if (_element.equals("vipCounter1Cents_"))
			{
				vipCounter1Cents_ = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("vipCounter2Cents_"))
			{
				vipCounter2Cents_ = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("vipCounter3InCents_"))
			{
				vipCounter3InCents_ = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("vipStatusUntil"))
			{
				Atf::AtfTempl<SrvDate>::FromXmlString(_value, vipStatusUntil);
			}
			else if (_element.equals("visitedEx"))
			{
				if(!Atf::AtfTempl< PSiteMask >::FromXmlString(_value, visitedEx)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'w':
			if (_element.equals("wChips_dummy"))
			{
				wChips_dummy = (INT32)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		case 'z':
			if (_element.equals("zipCode"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, zipCode)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
			break;
		default:
			return false;
		}
	}
	return true;
}

void Common::AtfShared::User::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(id);
	_msg.composeString(dummy);
	_msg.composeUINT32(privileges);
	_msg.composeINT32(chips_dummy);
	_msg.composeINT32(playChips32);
	_msg.composeINT32(tChips_dummy);
	_msg.composeINT32(wChips_dummy);
	_msg.composeString(fullName);
	_msg.composeString(email);
	_msg.composeString(addr_1);
	_msg.composeString(addr_2);
	_msg.composeString(city);
	_msg.composeString(state);
	_msg.composeString(country);
	_msg.composeString(zipCode);
	_msg.composeString(userInstallId);
	_msg.composeUINT32(imageId);
	_msg.composeUINT32(flags);
	_msg.composeString(prevUserId);
	_msg.composeINT32(fpp_);
	_msg.composeINT32(ltFpp_);
	_msg.composeINT16(unique);
	_msg.composeSrvTime(registered);
	_msg.composeUINT32(userIntId);
	_msg.composeString(category);
	_msg.composeString(phone);
	_msg.composeSrvTime(firstDeposit);
	_msg.composeUINT32(hybridSiteId);
	_msg.composeString(sid);
	_msg.composeUINT32(visited);
	_msg.composeINT32(fppCents_);
	_msg.composeINT32(vipStatus);
	_msg.composeINT32(vipCounter1_);
	_msg.composeINT32(vipCounter2_);
	_msg.composeSrvTime(vipStatusSet);
	_msg.composeSrvTime(firstTransfer);
	_msg.composeINT32(owedChips_dummy);
	_msg.composeUINT32(depositMask32);
	_msg.composeSrvDate(birthDate);
	_msg.composeUINT32(locale);
	_msg.composeUINT64(privileges2);
	_msg.composeUINT32(clearedMask32);
	_msg.composeUINT32(emLocale);
	_msg.composeString(encrPwd);
	_msg.composeUINT32(timezone);
	_msg.composeString(currency_dummy);
	_msg.composeString(firstName);
	_msg.composeString(lastName);
	_msg.composeString(fiscalCode);
	_msg.composeUINT32(licenseId);
	_msg.composeSrvTime(gracePeriodUntil_dummy);
	_msg.composeUINT64(flags2);
	_msg.composeINT16(ltFppCents_);
	_msg.composeINT16(vipCounter1Cents_);
	_msg.composeINT16(vipCounter2Cents_);
	_msg.composeUINT32(adminFlags);
	_msg.composeUINT64(overcreditMask64);
	_msg.composeUINT32(originalUserIntId);
	balance.composeMsg(_msg, _ignoreJSON);
	_msg.composeUINT64(depositMask64);
	_msg.composeUINT64(clearedMask64);
	_msg.composeString(sex);
	_msg.composeString(normalizedUserId);
	_msg.composeString(mobile);
	_msg.composeINT32(licenseSpecificLimit1);
	_msg.composeINT32(licenseSpecificCounter2);
	CommMsgBody _msg0;
	depositMask.composeMsg(_msg0, _ignoreJSON);
	_msg.composeMsgBody(_msg0);
	CommMsgBody _msg1;
	clearedMask.composeMsg(_msg1, _ignoreJSON);
	_msg.composeMsgBody(_msg1);
	CommMsgBody _msg2;
	overcreditMask.composeMsg(_msg2, _ignoreJSON);
	_msg.composeMsgBody(_msg2);
	_msg.composeINT32(vipCounter3InCents_);
	_msg.composeINT32(beMoneyIn);
	_msg.composeINT32(beMoneyOut);
	_msg.composeINT32(licenseSpecificAmount3);
	_msg.composeSrvDate(vipStatusUntil);
	_msg.composeUINT32(platformsUsed);
	_msg.composeUINT64(facebookIntId);
	_msg.composeINT64(playChips);
	_msg.composeUINT32(blockingCode);
	_msg.composeString(idExtension);
	_msg.composeUINT64(privileges3);
	CommMsgBody _msg3;
	cpp.composeMsg(_msg3, _ignoreJSON);
	_msg.composeMsgBody(_msg3);
	CommMsgBody _msg4;
	spp.composeMsg(_msg4, _ignoreJSON);
	_msg.composeMsgBody(_msg4);
	_msg.composeUINT64(flags3);
	_msg.composeUINT32(brandsUsed);
	_msg.composeINT32(nac2);
	CommMsgBody _msg5;
	visitedEx.composeMsg(_msg5, _ignoreJSON);
	_msg5.composeUINT32(regSiteId);
	_msg.composeMsgBody(_msg5);
	CommMsgBody _msg6;
	_msg6.composeINT16(operatorId);
	_msg6.composeString(promoName);
	_msg.composeMsgBody(_msg6);
}

void Common::AtfShared::User::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(id);
	_parser.parseStringP(dummy);
	_parser.parseUINT32(privileges);
	_parser.parseINT32(chips_dummy);
	_parser.parseINT32(playChips32);
	_parser.parseINT32(tChips_dummy);
	_parser.parseINT32(wChips_dummy);
	_parser.parseStringP(fullName);
	_parser.parseStringP(email);
	_parser.parseStringP(addr_1);
	_parser.parseStringP(addr_2);
	_parser.parseStringP(city);
	_parser.parseStringP(state);
	_parser.parseStringP(country);
	_parser.parseStringP(zipCode);
	_parser.parseStringP(userInstallId);
	_parser.parseUINT32(imageId);
	_parser.parseUINT32(flags);
	_parser.parseStringP(prevUserId);
	_parser.parseINT32(fpp_);
	_parser.parseINT32(ltFpp_);
	_parser.parseINT16(unique);
	_parser.parseSrvTime(registered);
	_parser.parseUINT32(userIntId);
	_parser.parseStringP(category);
	_parser.parseStringP(phone);
	_parser.parseSrvTime(firstDeposit);
	_parser.parseUINT32(hybridSiteId);
	_parser.parseStringP(sid);
	_parser.parseUINT32(visited);
	_parser.parseINT32(fppCents_);
	_parser.parseINT32(vipStatus);
	_parser.parseINT32(vipCounter1_);
	_parser.parseINT32(vipCounter2_);
	_parser.parseSrvTime(vipStatusSet);
	_parser.parseSrvTime(firstTransfer);
	_parser.parseINT32(owedChips_dummy);
	_parser.parseUINT32(depositMask32);
	_parser.parseSrvDate(birthDate);
	_parser.parseUINT32(locale);
	_parser.parseUINT64(privileges2);
	_parser.parseUINT32(clearedMask32);
	_parser.parseUINT32(emLocale);
	_parser.parseStringP(encrPwd);
	_parser.parseUINT32(timezone);
	_parser.parseStringP(currency_dummy);
	_parser.parseStringP(firstName);
	_parser.parseStringP(lastName);
	_parser.parseStringP(fiscalCode);
	_parser.parseUINT32(licenseId);
	_parser.parseSrvTime(gracePeriodUntil_dummy);
	_parser.parseUINT64(flags2);
	_parser.parseINT16(ltFppCents_);
	_parser.parseINT16(vipCounter1Cents_);
	_parser.parseINT16(vipCounter2Cents_);
	_parser.parseUINT32(adminFlags);
	_parser.parseUINT64(overcreditMask64);
	_parser.parseUINT32(originalUserIntId);
	balance.parseMsg(_parser);
	_parser.parseUINT64(depositMask64);
	_parser.parseUINT64(clearedMask64);
	_parser.parseStringP(sex);
	_parser.parseStringP(normalizedUserId);
	_parser.parseStringP(mobile);
	_parser.parseINT32(licenseSpecificLimit1);
	_parser.parseINT32(licenseSpecificCounter2);
	parseAnonymousMsgBody0(_parser);
	parseAnonymousMsgBody1(_parser);
	parseAnonymousMsgBody2(_parser);
	_parser.parseINT32(vipCounter3InCents_);
	_parser.parseINT32(beMoneyIn);
	_parser.parseINT32(beMoneyOut);
	_parser.parseINT32(licenseSpecificAmount3);
	_parser.parseSrvDate(vipStatusUntil);
	_parser.parseUINT32(platformsUsed);
	_parser.parseUINT64(facebookIntId);
	_parser.parseINT64(playChips);
	_parser.parseUINT32(blockingCode);
	_parser.parseStringP(idExtension);
	_parser.parseUINT64(privileges3);
	parseAnonymousMsgBody3(_parser);
	parseAnonymousMsgBody4(_parser);
	_parser.parseUINT64(flags3);
	_parser.parseUINT32(brandsUsed);
	_parser.parseINT32(nac2);
	parseAnonymousMsgBody5(_parser);
	parseAnonymousMsgBody6(_parser);
}

const char *Common::AtfShared::User::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("id", id);
	_jsonstr.compose("dummy", dummy);
	_jsonstr.compose("privileges", privileges);
	_jsonstr.compose("chips_dummy", chips_dummy);
	_jsonstr.compose("playChips32", playChips32);
	_jsonstr.compose("tChips_dummy", tChips_dummy);
	_jsonstr.compose("wChips_dummy", wChips_dummy);
	_jsonstr.compose("fullName", fullName);
	_jsonstr.compose("email", email);
	_jsonstr.compose("addr_1", addr_1);
	_jsonstr.compose("addr_2", addr_2);
	_jsonstr.compose("city", city);
	_jsonstr.compose("state", state);
	_jsonstr.compose("country", country);
	_jsonstr.compose("zipCode", zipCode);
	_jsonstr.compose("userInstallId", userInstallId);
	_jsonstr.compose("imageId", imageId);
	_jsonstr.compose("flags", flags);
	_jsonstr.compose("prevUserId", prevUserId);
	_jsonstr.compose("fpp_", fpp_);
	_jsonstr.compose("ltFpp_", ltFpp_);
	_jsonstr.compose("unique", unique);
	_jsonstr.compose("registered", registered);
	_jsonstr.compose("userIntId", userIntId);
	_jsonstr.compose("category", category);
	_jsonstr.compose("phone", phone);
	_jsonstr.compose("firstDeposit", firstDeposit);
	_jsonstr.compose("hybridSiteId", hybridSiteId);
	_jsonstr.compose("sid", sid);
	_jsonstr.compose("visited", visited);
	_jsonstr.compose("fppCents_", fppCents_);
	_jsonstr.compose("vipStatus", vipStatus);
	_jsonstr.compose("vipCounter1_", vipCounter1_);
	_jsonstr.compose("vipCounter2_", vipCounter2_);
	_jsonstr.compose("vipStatusSet", vipStatusSet);
	_jsonstr.compose("firstTransfer", firstTransfer);
	_jsonstr.compose("owedChips_dummy", owedChips_dummy);
	_jsonstr.compose("depositMask32", depositMask32);
	_jsonstr.compose("birthDate", birthDate);
	_jsonstr.compose("locale", locale);
	_jsonstr.compose("privileges2", privileges2);
	_jsonstr.compose("clearedMask32", clearedMask32);
	_jsonstr.compose("emLocale", emLocale);
	_jsonstr.compose("encrPwd", encrPwd);
	_jsonstr.compose("timezone", timezone);
	_jsonstr.compose("currency_dummy", currency_dummy);
	_jsonstr.compose("firstName", firstName);
	_jsonstr.compose("lastName", lastName);
	_jsonstr.compose("fiscalCode", fiscalCode);
	_jsonstr.compose("licenseId", licenseId);
	_jsonstr.compose("gracePeriodUntil_dummy", gracePeriodUntil_dummy);
	_jsonstr.compose("flags2", flags2);
	_jsonstr.compose("ltFppCents_", ltFppCents_);
	_jsonstr.compose("vipCounter1Cents_", vipCounter1Cents_);
	_jsonstr.compose("vipCounter2Cents_", vipCounter2Cents_);
	_jsonstr.compose("adminFlags", adminFlags);
	_jsonstr.compose("overcreditMask64", overcreditMask64);
	_jsonstr.compose("originalUserIntId", originalUserIntId);
	_jsonstr.compose("balance", balance);
	_jsonstr.compose("depositMask64", depositMask64);
	_jsonstr.compose("clearedMask64", clearedMask64);
	_jsonstr.compose("sex", sex);
	_jsonstr.compose("normalizedUserId", normalizedUserId);
	_jsonstr.compose("mobile", mobile);
	_jsonstr.compose("licenseSpecificLimit1", licenseSpecificLimit1);
	_jsonstr.compose("licenseSpecificCounter2", licenseSpecificCounter2);
	_jsonstr.compose("depositMask", depositMask);
	_jsonstr.compose("clearedMask", clearedMask);
	_jsonstr.compose("overcreditMask", overcreditMask);
	_jsonstr.compose("vipCounter3InCents_", vipCounter3InCents_);
	_jsonstr.compose("beMoneyIn", beMoneyIn);
	_jsonstr.compose("beMoneyOut", beMoneyOut);
	_jsonstr.compose("licenseSpecificAmount3", licenseSpecificAmount3);
	_jsonstr.compose("vipStatusUntil", vipStatusUntil);
	_jsonstr.compose("platformsUsed", platformsUsed);
	_jsonstr.compose("facebookIntId", facebookIntId);
	_jsonstr.compose("playChips", playChips);
	_jsonstr.compose("blockingCode", blockingCode);
	_jsonstr.compose("idExtension", idExtension);
	_jsonstr.compose("privileges3", privileges3);
	_jsonstr.compose("cpp", cpp);
	_jsonstr.compose("spp", spp);
	_jsonstr.compose("flags3", flags3);
	_jsonstr.compose("brandsUsed", brandsUsed);
	_jsonstr.compose("nac2", nac2);
	_jsonstr.compose("visitedEx", visitedEx);
	_jsonstr.compose("regSiteId", regSiteId);
	_jsonstr.compose("operatorId", operatorId);
	_jsonstr.compose("promoName", promoName);
	return _buf.c_str();
}

void Common::AtfShared::User::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("id", id);
	_jparser.parseByNameThrow("dummy", dummy);
	_jparser.parseByNameThrow("privileges", privileges);
	_jparser.parseByNameThrow("chips_dummy", chips_dummy);
	_jparser.parseByNameThrow("playChips32", playChips32);
	_jparser.parseByNameThrow("tChips_dummy", tChips_dummy);
	_jparser.parseByNameThrow("wChips_dummy", wChips_dummy);
	_jparser.parseByNameThrow("fullName", fullName);
	_jparser.parseByNameThrow("email", email);
	_jparser.parseByNameThrow("addr_1", addr_1);
	_jparser.parseByNameThrow("addr_2", addr_2);
	_jparser.parseByNameThrow("city", city);
	_jparser.parseByNameThrow("state", state);
	_jparser.parseByNameThrow("country", country);
	_jparser.parseByNameThrow("zipCode", zipCode);
	_jparser.parseByNameThrow("userInstallId", userInstallId);
	_jparser.parseByNameThrow("imageId", imageId);
	_jparser.parseByNameThrow("flags", flags);
	_jparser.parseByNameThrow("prevUserId", prevUserId);
	_jparser.parseByNameThrow("fpp_", fpp_);
	_jparser.parseByNameThrow("ltFpp_", ltFpp_);
	_jparser.parseByNameThrow("unique", unique);
	_jparser.parseByNameThrow("registered", registered);
	_jparser.parseByNameThrow("userIntId", userIntId);
	_jparser.parseByNameThrow("category", category);
	_jparser.parseByNameThrow("phone", phone);
	_jparser.parseByNameThrow("firstDeposit", firstDeposit);
	_jparser.parseByNameThrow("hybridSiteId", hybridSiteId);
	_jparser.parseByNameThrow("sid", sid);
	_jparser.parseByNameThrow("visited", visited);
	_jparser.parseByNameThrow("fppCents_", fppCents_);
	_jparser.parseByNameThrow("vipStatus", vipStatus);
	_jparser.parseByNameThrow("vipCounter1_", vipCounter1_);
	_jparser.parseByNameThrow("vipCounter2_", vipCounter2_);
	_jparser.parseByNameThrow("vipStatusSet", vipStatusSet);
	_jparser.parseByNameThrow("firstTransfer", firstTransfer);
	_jparser.parseByNameThrow("owedChips_dummy", owedChips_dummy);
	_jparser.parseByNameThrow("depositMask32", depositMask32);
	_jparser.parseByNameThrow("birthDate", birthDate);
	_jparser.parseByNameThrow("locale", locale);
	_jparser.parseByNameThrow("privileges2", privileges2);
	_jparser.parseByNameThrow("clearedMask32", clearedMask32);
	_jparser.parseByNameThrow("emLocale", emLocale);
	_jparser.parseByNameThrow("encrPwd", encrPwd);
	_jparser.parseByNameThrow("timezone", timezone);
	_jparser.parseByNameThrow("currency_dummy", currency_dummy);
	_jparser.parseByNameThrow("firstName", firstName);
	_jparser.parseByNameThrow("lastName", lastName);
	_jparser.parseByNameThrow("fiscalCode", fiscalCode);
	_jparser.parseByNameThrow("licenseId", licenseId);
	_jparser.parseByNameThrow("gracePeriodUntil_dummy", gracePeriodUntil_dummy);
	_jparser.parseByNameThrow("flags2", flags2);
	_jparser.parseByNameThrow("ltFppCents_", ltFppCents_);
	_jparser.parseByNameThrow("vipCounter1Cents_", vipCounter1Cents_);
	_jparser.parseByNameThrow("vipCounter2Cents_", vipCounter2Cents_);
	_jparser.parseByNameThrow("adminFlags", adminFlags);
	_jparser.parseByNameThrow("overcreditMask64", overcreditMask64);
	_jparser.parseByNameThrow("originalUserIntId", originalUserIntId);
	_jparser.parseByNameThrow("balance", balance);
	_jparser.parseByNameThrow("depositMask64", depositMask64);
	_jparser.parseByNameThrow("clearedMask64", clearedMask64);
	_jparser.parseByNameThrow("sex", sex);
	_jparser.parseByNameThrow("normalizedUserId", normalizedUserId);
	_jparser.parseByNameThrow("mobile", mobile);
	_jparser.parseByNameThrow("licenseSpecificLimit1", licenseSpecificLimit1);
	_jparser.parseByNameThrow("licenseSpecificCounter2", licenseSpecificCounter2);
	_jparser.parseByNameThrow("depositMask", depositMask);
	_jparser.parseByNameThrow("clearedMask", clearedMask);
	_jparser.parseByNameThrow("overcreditMask", overcreditMask);
	_jparser.parseByNameThrow("vipCounter3InCents_", vipCounter3InCents_);
	_jparser.parseByNameThrow("beMoneyIn", beMoneyIn);
	_jparser.parseByNameThrow("beMoneyOut", beMoneyOut);
	_jparser.parseByNameThrow("licenseSpecificAmount3", licenseSpecificAmount3);
	_jparser.parseByNameThrow("vipStatusUntil", vipStatusUntil);
	_jparser.parseByNameThrow("platformsUsed", platformsUsed);
	_jparser.parseByNameThrow("facebookIntId", facebookIntId);
	_jparser.parseByNameThrow("playChips", playChips);
	_jparser.parseByNameThrow("blockingCode", blockingCode);
	_jparser.parseByNameThrow("idExtension", idExtension);
	_jparser.parseByNameThrow("privileges3", privileges3);
	_jparser.parseByNameThrow("cpp", cpp);
	_jparser.parseByNameThrow("spp", spp);
	_jparser.parseByNameThrow("flags3", flags3);
	_jparser.parseByNameThrow("brandsUsed", brandsUsed);
	_jparser.parseByNameThrow("nac2", nac2);
	_jparser.parseByNameThrow("visitedEx", visitedEx);
	_jparser.parseByName("regSiteId", regSiteId);
	_jparser.parseByNameThrow("operatorId", operatorId);
	_jparser.parseByNameThrow("promoName", promoName);
}

/* static */ void Common::AtfShared::User::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString id; _jparser.validateByNameThrow("id", id);
	AtfValidator::validateInt(_descr, "id", id.length(), _checker, __FILE__, __LINE__);
	PString dummy; _jparser.validateByNameThrow("dummy", dummy);
	AtfValidator::validateInt(_descr, "dummy", dummy.length(), _checker, __FILE__, __LINE__);
	UINT32 privileges; _jparser.validateByNameThrow("privileges", privileges);
	AtfValidator::validateInt(_descr, "privileges", privileges, _checker, __FILE__, __LINE__);
	INT32 chips_dummy; _jparser.validateByNameThrow("chips_dummy", chips_dummy);
	AtfValidator::validateInt(_descr, "chips_dummy", chips_dummy, _checker, __FILE__, __LINE__);
	INT32 playChips32; _jparser.validateByNameThrow("playChips32", playChips32);
	AtfValidator::validateInt(_descr, "playChips32", playChips32, _checker, __FILE__, __LINE__);
	INT32 tChips_dummy; _jparser.validateByNameThrow("tChips_dummy", tChips_dummy);
	AtfValidator::validateInt(_descr, "tChips_dummy", tChips_dummy, _checker, __FILE__, __LINE__);
	INT32 wChips_dummy; _jparser.validateByNameThrow("wChips_dummy", wChips_dummy);
	AtfValidator::validateInt(_descr, "wChips_dummy", wChips_dummy, _checker, __FILE__, __LINE__);
	PString fullName; _jparser.validateByNameThrow("fullName", fullName);
	AtfValidator::validateInt(_descr, "fullName", fullName.length(), _checker, __FILE__, __LINE__);
	PString email; _jparser.validateByNameThrow("email", email);
	AtfValidator::validateInt(_descr, "email", email.length(), _checker, __FILE__, __LINE__);
	PString addr_1; _jparser.validateByNameThrow("addr_1", addr_1);
	AtfValidator::validateInt(_descr, "addr_1", addr_1.length(), _checker, __FILE__, __LINE__);
	PString addr_2; _jparser.validateByNameThrow("addr_2", addr_2);
	AtfValidator::validateInt(_descr, "addr_2", addr_2.length(), _checker, __FILE__, __LINE__);
	PString city; _jparser.validateByNameThrow("city", city);
	AtfValidator::validateInt(_descr, "city", city.length(), _checker, __FILE__, __LINE__);
	PString state; _jparser.validateByNameThrow("state", state);
	AtfValidator::validateInt(_descr, "state", state.length(), _checker, __FILE__, __LINE__);
	PString country; _jparser.validateByNameThrow("country", country);
	AtfValidator::validateInt(_descr, "country", country.length(), _checker, __FILE__, __LINE__);
	PString zipCode; _jparser.validateByNameThrow("zipCode", zipCode);
	AtfValidator::validateInt(_descr, "zipCode", zipCode.length(), _checker, __FILE__, __LINE__);
	PString userInstallId; _jparser.validateByNameThrow("userInstallId", userInstallId);
	AtfValidator::validateInt(_descr, "userInstallId", userInstallId.length(), _checker, __FILE__, __LINE__);
	UINT32 imageId; _jparser.validateByNameThrow("imageId", imageId);
	AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
	UINT32 flags; _jparser.validateByNameThrow("flags", flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	PString prevUserId; _jparser.validateByNameThrow("prevUserId", prevUserId);
	AtfValidator::validateInt(_descr, "prevUserId", prevUserId.length(), _checker, __FILE__, __LINE__);
	INT32 fpp_; _jparser.validateByNameThrow("fpp_", fpp_);
	AtfValidator::validateInt(_descr, "fpp_", fpp_, _checker, __FILE__, __LINE__);
	INT32 ltFpp_; _jparser.validateByNameThrow("ltFpp_", ltFpp_);
	AtfValidator::validateInt(_descr, "ltFpp_", ltFpp_, _checker, __FILE__, __LINE__);
	INT16 unique; _jparser.validateByNameThrow("unique", unique);
	AtfValidator::validateInt(_descr, "unique", unique, _checker, __FILE__, __LINE__);
	SrvTime registered; _jparser.validateByNameThrow("registered", registered);
	AtfValidator::validateSrvDateTime(_descr, "registered", registered, _checker, __FILE__, __LINE__);
	UINT32 userIntId; _jparser.validateByNameThrow("userIntId", userIntId);
	AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	PString category; _jparser.validateByNameThrow("category", category);
	AtfValidator::validateInt(_descr, "category", category.length(), _checker, __FILE__, __LINE__);
	PString phone; _jparser.validateByNameThrow("phone", phone);
	AtfValidator::validateInt(_descr, "phone", phone.length(), _checker, __FILE__, __LINE__);
	SrvTime firstDeposit; _jparser.validateByNameThrow("firstDeposit", firstDeposit);
	AtfValidator::validateSrvDateTime(_descr, "firstDeposit", firstDeposit, _checker, __FILE__, __LINE__);
	UINT32 hybridSiteId; _jparser.validateByNameThrow("hybridSiteId", hybridSiteId);
	AtfValidator::validateInt(_descr, "hybridSiteId", hybridSiteId, _checker, __FILE__, __LINE__);
	PString sid; _jparser.validateByNameThrow("sid", sid);
	AtfValidator::validateInt(_descr, "sid", sid.length(), _checker, __FILE__, __LINE__);
	UINT32 visited; _jparser.validateByNameThrow("visited", visited);
	AtfValidator::validateInt(_descr, "visited", visited, _checker, __FILE__, __LINE__);
	INT32 fppCents_; _jparser.validateByNameThrow("fppCents_", fppCents_);
	AtfValidator::validateInt(_descr, "fppCents_", fppCents_, _checker, __FILE__, __LINE__);
	INT32 vipStatus; _jparser.validateByNameThrow("vipStatus", vipStatus);
	AtfValidator::validateInt(_descr, "vipStatus", vipStatus, _checker, __FILE__, __LINE__);
	INT32 vipCounter1_; _jparser.validateByNameThrow("vipCounter1_", vipCounter1_);
	AtfValidator::validateInt(_descr, "vipCounter1_", vipCounter1_, _checker, __FILE__, __LINE__);
	INT32 vipCounter2_; _jparser.validateByNameThrow("vipCounter2_", vipCounter2_);
	AtfValidator::validateInt(_descr, "vipCounter2_", vipCounter2_, _checker, __FILE__, __LINE__);
	SrvTime vipStatusSet; _jparser.validateByNameThrow("vipStatusSet", vipStatusSet);
	AtfValidator::validateSrvDateTime(_descr, "vipStatusSet", vipStatusSet, _checker, __FILE__, __LINE__);
	SrvTime firstTransfer; _jparser.validateByNameThrow("firstTransfer", firstTransfer);
	AtfValidator::validateSrvDateTime(_descr, "firstTransfer", firstTransfer, _checker, __FILE__, __LINE__);
	INT32 owedChips_dummy; _jparser.validateByNameThrow("owedChips_dummy", owedChips_dummy);
	AtfValidator::validateInt(_descr, "owedChips_dummy", owedChips_dummy, _checker, __FILE__, __LINE__);
	UINT32 depositMask32; _jparser.validateByNameThrow("depositMask32", depositMask32);
	AtfValidator::validateInt(_descr, "depositMask32", depositMask32, _checker, __FILE__, __LINE__);
	SrvDate birthDate; _jparser.validateByNameThrow("birthDate", birthDate);
	AtfValidator::validateSrvDateTime(_descr, "birthDate", birthDate, _checker, __FILE__, __LINE__);
	UINT32 locale; _jparser.validateByNameThrow("locale", locale);
	AtfValidator::validateInt(_descr, "locale", locale, _checker, __FILE__, __LINE__);
	UINT64 privileges2; _jparser.validateByNameThrow("privileges2", privileges2);
	AtfValidator::validateUint(_descr, "privileges2", privileges2, _checker, __FILE__, __LINE__);
	UINT32 clearedMask32; _jparser.validateByNameThrow("clearedMask32", clearedMask32);
	AtfValidator::validateInt(_descr, "clearedMask32", clearedMask32, _checker, __FILE__, __LINE__);
	UINT32 emLocale; _jparser.validateByNameThrow("emLocale", emLocale);
	AtfValidator::validateInt(_descr, "emLocale", emLocale, _checker, __FILE__, __LINE__);
	PString encrPwd; _jparser.validateByNameThrow("encrPwd", encrPwd);
	AtfValidator::validateInt(_descr, "encrPwd", encrPwd.length(), _checker, __FILE__, __LINE__);
	UINT32 timezone; _jparser.validateByNameThrow("timezone", timezone);
	AtfValidator::validateInt(_descr, "timezone", timezone, _checker, __FILE__, __LINE__);
	PString currency_dummy; _jparser.validateByNameThrow("currency_dummy", currency_dummy);
	AtfValidator::validateInt(_descr, "currency_dummy", currency_dummy.length(), _checker, __FILE__, __LINE__);
	PString firstName; _jparser.validateByNameThrow("firstName", firstName);
	AtfValidator::validateInt(_descr, "firstName", firstName.length(), _checker, __FILE__, __LINE__);
	PString lastName; _jparser.validateByNameThrow("lastName", lastName);
	AtfValidator::validateInt(_descr, "lastName", lastName.length(), _checker, __FILE__, __LINE__);
	PString fiscalCode; _jparser.validateByNameThrow("fiscalCode", fiscalCode);
	AtfValidator::validateInt(_descr, "fiscalCode", fiscalCode.length(), _checker, __FILE__, __LINE__);
	UINT32 licenseId; _jparser.validateByNameThrow("licenseId", licenseId);
	AtfValidator::validateInt(_descr, "licenseId", licenseId, _checker, __FILE__, __LINE__);
	SrvTime gracePeriodUntil_dummy; _jparser.validateByNameThrow("gracePeriodUntil_dummy", gracePeriodUntil_dummy);
	AtfValidator::validateSrvDateTime(_descr, "gracePeriodUntil_dummy", gracePeriodUntil_dummy, _checker, __FILE__, __LINE__);
	UINT64 flags2; _jparser.validateByNameThrow("flags2", flags2);
	AtfValidator::validateUint(_descr, "flags2", flags2, _checker, __FILE__, __LINE__);
	INT16 ltFppCents_; _jparser.validateByNameThrow("ltFppCents_", ltFppCents_);
	AtfValidator::validateInt(_descr, "ltFppCents_", ltFppCents_, _checker, __FILE__, __LINE__);
	INT16 vipCounter1Cents_; _jparser.validateByNameThrow("vipCounter1Cents_", vipCounter1Cents_);
	AtfValidator::validateInt(_descr, "vipCounter1Cents_", vipCounter1Cents_, _checker, __FILE__, __LINE__);
	INT16 vipCounter2Cents_; _jparser.validateByNameThrow("vipCounter2Cents_", vipCounter2Cents_);
	AtfValidator::validateInt(_descr, "vipCounter2Cents_", vipCounter2Cents_, _checker, __FILE__, __LINE__);
	UINT32 adminFlags; _jparser.validateByNameThrow("adminFlags", adminFlags);
	AtfValidator::validateInt(_descr, "adminFlags", adminFlags, _checker, __FILE__, __LINE__);
	UINT64 overcreditMask64; _jparser.validateByNameThrow("overcreditMask64", overcreditMask64);
	AtfValidator::validateUint(_descr, "overcreditMask64", overcreditMask64, _checker, __FILE__, __LINE__);
	UINT32 originalUserIntId; _jparser.validateByNameThrow("originalUserIntId", originalUserIntId);
	AtfValidator::validateInt(_descr, "originalUserIntId", originalUserIntId, _checker, __FILE__, __LINE__);
	UserCurrencyAccounts balance; _jparser.validateByNameThrow("balance", balance);
	UINT64 depositMask64; _jparser.validateByNameThrow("depositMask64", depositMask64);
	AtfValidator::validateUint(_descr, "depositMask64", depositMask64, _checker, __FILE__, __LINE__);
	UINT64 clearedMask64; _jparser.validateByNameThrow("clearedMask64", clearedMask64);
	AtfValidator::validateUint(_descr, "clearedMask64", clearedMask64, _checker, __FILE__, __LINE__);
	PString sex; _jparser.validateByNameThrow("sex", sex);
	AtfValidator::validateInt(_descr, "sex", sex.length(), _checker, __FILE__, __LINE__);
	PString normalizedUserId; _jparser.validateByNameThrow("normalizedUserId", normalizedUserId);
	AtfValidator::validateInt(_descr, "normalizedUserId", normalizedUserId.length(), _checker, __FILE__, __LINE__);
	PString mobile; _jparser.validateByNameThrow("mobile", mobile);
	AtfValidator::validateInt(_descr, "mobile", mobile.length(), _checker, __FILE__, __LINE__);
	INT32 licenseSpecificLimit1; _jparser.validateByNameThrow("licenseSpecificLimit1", licenseSpecificLimit1);
	AtfValidator::validateInt(_descr, "licenseSpecificLimit1", licenseSpecificLimit1, _checker, __FILE__, __LINE__);
	INT32 licenseSpecificCounter2; _jparser.validateByNameThrow("licenseSpecificCounter2", licenseSpecificCounter2);
	AtfValidator::validateInt(_descr, "licenseSpecificCounter2", licenseSpecificCounter2, _checker, __FILE__, __LINE__);
	PaysystemMask depositMask; _jparser.validateByNameThrow("depositMask", depositMask);
	PaysystemMask clearedMask; _jparser.validateByNameThrow("clearedMask", clearedMask);
	PaysystemMask overcreditMask; _jparser.validateByNameThrow("overcreditMask", overcreditMask);
	INT32 vipCounter3InCents_; _jparser.validateByNameThrow("vipCounter3InCents_", vipCounter3InCents_);
	AtfValidator::validateInt(_descr, "vipCounter3InCents_", vipCounter3InCents_, _checker, __FILE__, __LINE__);
	INT32 beMoneyIn; _jparser.validateByNameThrow("beMoneyIn", beMoneyIn);
	AtfValidator::validateInt(_descr, "beMoneyIn", beMoneyIn, _checker, __FILE__, __LINE__);
	INT32 beMoneyOut; _jparser.validateByNameThrow("beMoneyOut", beMoneyOut);
	AtfValidator::validateInt(_descr, "beMoneyOut", beMoneyOut, _checker, __FILE__, __LINE__);
	INT32 licenseSpecificAmount3; _jparser.validateByNameThrow("licenseSpecificAmount3", licenseSpecificAmount3);
	AtfValidator::validateInt(_descr, "licenseSpecificAmount3", licenseSpecificAmount3, _checker, __FILE__, __LINE__);
	SrvDate vipStatusUntil; _jparser.validateByNameThrow("vipStatusUntil", vipStatusUntil);
	AtfValidator::validateSrvDateTime(_descr, "vipStatusUntil", vipStatusUntil, _checker, __FILE__, __LINE__);
	UINT32 platformsUsed; _jparser.validateByNameThrow("platformsUsed", platformsUsed);
	AtfValidator::validateInt(_descr, "platformsUsed", platformsUsed, _checker, __FILE__, __LINE__);
	UINT64 facebookIntId; _jparser.validateByNameThrow("facebookIntId", facebookIntId);
	AtfValidator::validateUint(_descr, "facebookIntId", facebookIntId, _checker, __FILE__, __LINE__);
	INT64 playChips; _jparser.validateByNameThrow("playChips", playChips);
	AtfValidator::validateInt(_descr, "playChips", playChips, _checker, __FILE__, __LINE__);
	UINT32 blockingCode; _jparser.validateByNameThrow("blockingCode", blockingCode);
	AtfValidator::validateInt(_descr, "blockingCode", blockingCode, _checker, __FILE__, __LINE__);
	PString idExtension; _jparser.validateByNameThrow("idExtension", idExtension);
	AtfValidator::validateInt(_descr, "idExtension", idExtension.length(), _checker, __FILE__, __LINE__);
	UINT64 privileges3; _jparser.validateByNameThrow("privileges3", privileges3);
	AtfValidator::validateUint(_descr, "privileges3", privileges3, _checker, __FILE__, __LINE__);
	PlayerPointsProgram cpp; _jparser.validateByNameThrow("cpp", cpp);
	PlayerPointsProgram spp; _jparser.validateByNameThrow("spp", spp);
	UINT64 flags3; _jparser.validateByNameThrow("flags3", flags3);
	AtfValidator::validateUint(_descr, "flags3", flags3, _checker, __FILE__, __LINE__);
	UINT32 brandsUsed; _jparser.validateByNameThrow("brandsUsed", brandsUsed);
	AtfValidator::validateInt(_descr, "brandsUsed", brandsUsed, _checker, __FILE__, __LINE__);
	INT32 nac2; _jparser.validateByNameThrow("nac2", nac2);
	AtfValidator::validateInt(_descr, "nac2", nac2, _checker, __FILE__, __LINE__);
	PSiteMask visitedEx; _jparser.validateByNameThrow("visitedEx", visitedEx);
	UINT32 regSiteId; _jparser.validateByName("regSiteId", regSiteId);
	AtfValidator::validateInt(_descr, "regSiteId", regSiteId, _checker, __FILE__, __LINE__);
	INT16 operatorId; _jparser.validateByNameThrow("operatorId", operatorId);
	AtfValidator::validateInt(_descr, "operatorId", operatorId, _checker, __FILE__, __LINE__);
	PString promoName; _jparser.validateByNameThrow("promoName", promoName);
	AtfValidator::validateInt(_descr, "promoName", promoName.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::User::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "id"); size_t szId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "id", szId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "dummy"); size_t szDummy = strlen(_dummy);
	AtfValidator::validateInt(_descr, "dummy", szDummy, _checker, __FILE__, __LINE__);
	UINT32 privileges; _parser.parseUINT32(privileges);
	AtfValidator::validateInt(_descr, "privileges", privileges, _checker, __FILE__, __LINE__);
	INT32 chips_dummy; _parser.parseINT32(chips_dummy);
	AtfValidator::validateInt(_descr, "chips_dummy", chips_dummy, _checker, __FILE__, __LINE__);
	INT32 playChips32; _parser.parseINT32(playChips32);
	AtfValidator::validateInt(_descr, "playChips32", playChips32, _checker, __FILE__, __LINE__);
	INT32 tChips_dummy; _parser.parseINT32(tChips_dummy);
	AtfValidator::validateInt(_descr, "tChips_dummy", tChips_dummy, _checker, __FILE__, __LINE__);
	INT32 wChips_dummy; _parser.parseINT32(wChips_dummy);
	AtfValidator::validateInt(_descr, "wChips_dummy", wChips_dummy, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "fullName"); size_t szFullName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "fullName", szFullName, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "email"); size_t szEmail = strlen(_dummy);
	AtfValidator::validateInt(_descr, "email", szEmail, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "addr_1"); size_t szAddr_1 = strlen(_dummy);
	AtfValidator::validateInt(_descr, "addr_1", szAddr_1, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "addr_2"); size_t szAddr_2 = strlen(_dummy);
	AtfValidator::validateInt(_descr, "addr_2", szAddr_2, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "city"); size_t szCity = strlen(_dummy);
	AtfValidator::validateInt(_descr, "city", szCity, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "state"); size_t szState = strlen(_dummy);
	AtfValidator::validateInt(_descr, "state", szState, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "country"); size_t szCountry = strlen(_dummy);
	AtfValidator::validateInt(_descr, "country", szCountry, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "zipCode"); size_t szZipCode = strlen(_dummy);
	AtfValidator::validateInt(_descr, "zipCode", szZipCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "userInstallId"); size_t szUserInstallId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userInstallId", szUserInstallId, _checker, __FILE__, __LINE__);
	UINT32 imageId; _parser.parseUINT32(imageId);
	AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
	UINT32 flags; _parser.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "prevUserId"); size_t szPrevUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "prevUserId", szPrevUserId, _checker, __FILE__, __LINE__);
	INT32 fpp_; _parser.parseINT32(fpp_);
	AtfValidator::validateInt(_descr, "fpp_", fpp_, _checker, __FILE__, __LINE__);
	INT32 ltFpp_; _parser.parseINT32(ltFpp_);
	AtfValidator::validateInt(_descr, "ltFpp_", ltFpp_, _checker, __FILE__, __LINE__);
	INT16 unique; _parser.parseINT16(unique);
	AtfValidator::validateInt(_descr, "unique", unique, _checker, __FILE__, __LINE__);
	SrvTime registered; _parser.parseSrvTime(registered);
	AtfValidator::validateSrvDateTime(_descr, "registered", registered, _checker, __FILE__, __LINE__);
	UINT32 userIntId; _parser.parseUINT32(userIntId);
	AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "category"); size_t szCategory = strlen(_dummy);
	AtfValidator::validateInt(_descr, "category", szCategory, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "phone"); size_t szPhone = strlen(_dummy);
	AtfValidator::validateInt(_descr, "phone", szPhone, _checker, __FILE__, __LINE__);
	SrvTime firstDeposit; _parser.parseSrvTime(firstDeposit);
	AtfValidator::validateSrvDateTime(_descr, "firstDeposit", firstDeposit, _checker, __FILE__, __LINE__);
	UINT32 hybridSiteId; _parser.parseUINT32(hybridSiteId);
	AtfValidator::validateInt(_descr, "hybridSiteId", hybridSiteId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "sid"); size_t szSid = strlen(_dummy);
	AtfValidator::validateInt(_descr, "sid", szSid, _checker, __FILE__, __LINE__);
	UINT32 visited; _parser.parseUINT32(visited);
	AtfValidator::validateInt(_descr, "visited", visited, _checker, __FILE__, __LINE__);
	INT32 fppCents_; _parser.parseINT32(fppCents_);
	AtfValidator::validateInt(_descr, "fppCents_", fppCents_, _checker, __FILE__, __LINE__);
	INT32 vipStatus; _parser.parseINT32(vipStatus);
	AtfValidator::validateInt(_descr, "vipStatus", vipStatus, _checker, __FILE__, __LINE__);
	INT32 vipCounter1_; _parser.parseINT32(vipCounter1_);
	AtfValidator::validateInt(_descr, "vipCounter1_", vipCounter1_, _checker, __FILE__, __LINE__);
	INT32 vipCounter2_; _parser.parseINT32(vipCounter2_);
	AtfValidator::validateInt(_descr, "vipCounter2_", vipCounter2_, _checker, __FILE__, __LINE__);
	SrvTime vipStatusSet; _parser.parseSrvTime(vipStatusSet);
	AtfValidator::validateSrvDateTime(_descr, "vipStatusSet", vipStatusSet, _checker, __FILE__, __LINE__);
	SrvTime firstTransfer; _parser.parseSrvTime(firstTransfer);
	AtfValidator::validateSrvDateTime(_descr, "firstTransfer", firstTransfer, _checker, __FILE__, __LINE__);
	INT32 owedChips_dummy; _parser.parseINT32(owedChips_dummy);
	AtfValidator::validateInt(_descr, "owedChips_dummy", owedChips_dummy, _checker, __FILE__, __LINE__);
	UINT32 depositMask32; _parser.parseUINT32(depositMask32);
	AtfValidator::validateInt(_descr, "depositMask32", depositMask32, _checker, __FILE__, __LINE__);
	SrvDate birthDate; _parser.parseSrvDate(birthDate);
	AtfValidator::validateSrvDateTime(_descr, "birthDate", birthDate, _checker, __FILE__, __LINE__);
	UINT32 locale; _parser.parseUINT32(locale);
	AtfValidator::validateInt(_descr, "locale", locale, _checker, __FILE__, __LINE__);
	UINT64 privileges2; _parser.parseUINT64(privileges2);
	AtfValidator::validateUint(_descr, "privileges2", privileges2, _checker, __FILE__, __LINE__);
	UINT32 clearedMask32; _parser.parseUINT32(clearedMask32);
	AtfValidator::validateInt(_descr, "clearedMask32", clearedMask32, _checker, __FILE__, __LINE__);
	UINT32 emLocale; _parser.parseUINT32(emLocale);
	AtfValidator::validateInt(_descr, "emLocale", emLocale, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "encrPwd"); size_t szEncrPwd = strlen(_dummy);
	AtfValidator::validateInt(_descr, "encrPwd", szEncrPwd, _checker, __FILE__, __LINE__);
	UINT32 timezone; _parser.parseUINT32(timezone);
	AtfValidator::validateInt(_descr, "timezone", timezone, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "currency_dummy"); size_t szCurrency_dummy = strlen(_dummy);
	AtfValidator::validateInt(_descr, "currency_dummy", szCurrency_dummy, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "firstName"); size_t szFirstName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "firstName", szFirstName, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "lastName"); size_t szLastName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "lastName", szLastName, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "fiscalCode"); size_t szFiscalCode = strlen(_dummy);
	AtfValidator::validateInt(_descr, "fiscalCode", szFiscalCode, _checker, __FILE__, __LINE__);
	UINT32 licenseId; _parser.parseUINT32(licenseId);
	AtfValidator::validateInt(_descr, "licenseId", licenseId, _checker, __FILE__, __LINE__);
	SrvTime gracePeriodUntil_dummy; _parser.parseSrvTime(gracePeriodUntil_dummy);
	AtfValidator::validateSrvDateTime(_descr, "gracePeriodUntil_dummy", gracePeriodUntil_dummy, _checker, __FILE__, __LINE__);
	UINT64 flags2; _parser.parseUINT64(flags2);
	AtfValidator::validateUint(_descr, "flags2", flags2, _checker, __FILE__, __LINE__);
	INT16 ltFppCents_; _parser.parseINT16(ltFppCents_);
	AtfValidator::validateInt(_descr, "ltFppCents_", ltFppCents_, _checker, __FILE__, __LINE__);
	INT16 vipCounter1Cents_; _parser.parseINT16(vipCounter1Cents_);
	AtfValidator::validateInt(_descr, "vipCounter1Cents_", vipCounter1Cents_, _checker, __FILE__, __LINE__);
	INT16 vipCounter2Cents_; _parser.parseINT16(vipCounter2Cents_);
	AtfValidator::validateInt(_descr, "vipCounter2Cents_", vipCounter2Cents_, _checker, __FILE__, __LINE__);
	UINT32 adminFlags; _parser.parseUINT32(adminFlags);
	AtfValidator::validateInt(_descr, "adminFlags", adminFlags, _checker, __FILE__, __LINE__);
	UINT64 overcreditMask64; _parser.parseUINT64(overcreditMask64);
	AtfValidator::validateUint(_descr, "overcreditMask64", overcreditMask64, _checker, __FILE__, __LINE__);
	UINT32 originalUserIntId; _parser.parseUINT32(originalUserIntId);
	AtfValidator::validateInt(_descr, "originalUserIntId", originalUserIntId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	UserCurrencyAccounts::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("balance"), _fieldsWithUnparsedContent);
	UINT64 depositMask64; _parser.parseUINT64(depositMask64);
	AtfValidator::validateUint(_descr, "depositMask64", depositMask64, _checker, __FILE__, __LINE__);
	UINT64 clearedMask64; _parser.parseUINT64(clearedMask64);
	AtfValidator::validateUint(_descr, "clearedMask64", clearedMask64, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "sex"); size_t szSex = strlen(_dummy);
	AtfValidator::validateInt(_descr, "sex", szSex, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "normalizedUserId"); size_t szNormalizedUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "normalizedUserId", szNormalizedUserId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "mobile"); size_t szMobile = strlen(_dummy);
	AtfValidator::validateInt(_descr, "mobile", szMobile, _checker, __FILE__, __LINE__);
	INT32 licenseSpecificLimit1; _parser.parseINT32(licenseSpecificLimit1);
	AtfValidator::validateInt(_descr, "licenseSpecificLimit1", licenseSpecificLimit1, _checker, __FILE__, __LINE__);
	INT32 licenseSpecificCounter2; _parser.parseINT32(licenseSpecificCounter2);
	AtfValidator::validateInt(_descr, "licenseSpecificCounter2", licenseSpecificCounter2, _checker, __FILE__, __LINE__);
	validateAnonymousMsgBody0(_parser, _checker, _descr, _fieldsWithUnparsedContent);
	validateAnonymousMsgBody1(_parser, _checker, _descr, _fieldsWithUnparsedContent);
	validateAnonymousMsgBody2(_parser, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 vipCounter3InCents_; _parser.parseINT32(vipCounter3InCents_);
	AtfValidator::validateInt(_descr, "vipCounter3InCents_", vipCounter3InCents_, _checker, __FILE__, __LINE__);
	INT32 beMoneyIn; _parser.parseINT32(beMoneyIn);
	AtfValidator::validateInt(_descr, "beMoneyIn", beMoneyIn, _checker, __FILE__, __LINE__);
	INT32 beMoneyOut; _parser.parseINT32(beMoneyOut);
	AtfValidator::validateInt(_descr, "beMoneyOut", beMoneyOut, _checker, __FILE__, __LINE__);
	INT32 licenseSpecificAmount3; _parser.parseINT32(licenseSpecificAmount3);
	AtfValidator::validateInt(_descr, "licenseSpecificAmount3", licenseSpecificAmount3, _checker, __FILE__, __LINE__);
	SrvDate vipStatusUntil; _parser.parseSrvDate(vipStatusUntil);
	AtfValidator::validateSrvDateTime(_descr, "vipStatusUntil", vipStatusUntil, _checker, __FILE__, __LINE__);
	UINT32 platformsUsed; _parser.parseUINT32(platformsUsed);
	AtfValidator::validateInt(_descr, "platformsUsed", platformsUsed, _checker, __FILE__, __LINE__);
	UINT64 facebookIntId; _parser.parseUINT64(facebookIntId);
	AtfValidator::validateUint(_descr, "facebookIntId", facebookIntId, _checker, __FILE__, __LINE__);
	INT64 playChips; _parser.parseINT64(playChips);
	AtfValidator::validateInt(_descr, "playChips", playChips, _checker, __FILE__, __LINE__);
	UINT32 blockingCode; _parser.parseUINT32(blockingCode);
	AtfValidator::validateInt(_descr, "blockingCode", blockingCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "idExtension"); size_t szIdExtension = strlen(_dummy);
	AtfValidator::validateInt(_descr, "idExtension", szIdExtension, _checker, __FILE__, __LINE__);
	UINT64 privileges3; _parser.parseUINT64(privileges3);
	AtfValidator::validateUint(_descr, "privileges3", privileges3, _checker, __FILE__, __LINE__);
	validateAnonymousMsgBody3(_parser, _checker, _descr, _fieldsWithUnparsedContent);
	validateAnonymousMsgBody4(_parser, _checker, _descr, _fieldsWithUnparsedContent);
	UINT64 flags3; _parser.parseUINT64(flags3);
	AtfValidator::validateUint(_descr, "flags3", flags3, _checker, __FILE__, __LINE__);
	UINT32 brandsUsed; _parser.parseUINT32(brandsUsed);
	AtfValidator::validateInt(_descr, "brandsUsed", brandsUsed, _checker, __FILE__, __LINE__);
	INT32 nac2; _parser.parseINT32(nac2);
	AtfValidator::validateInt(_descr, "nac2", nac2, _checker, __FILE__, __LINE__);
	validateAnonymousMsgBody5(_parser, _checker, _descr, _fieldsWithUnparsedContent);
	validateAnonymousMsgBody6(_parser, _checker, _descr, _fieldsWithUnparsedContent);
}

void Common::AtfShared::User::parseAnonymousMsgBody0(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);
	CommMsgParser _parser0(_body);
	depositMask.parseMsg(_parser0);
}

/*static*/ void Common::AtfShared::User::validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	PaysystemMask::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("depositMask"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

void Common::AtfShared::User::parseAnonymousMsgBody1(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);
	CommMsgParser _parser0(_body);
	clearedMask.parseMsg(_parser0);
}

/*static*/ void Common::AtfShared::User::validateAnonymousMsgBody1(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	PaysystemMask::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("clearedMask"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

void Common::AtfShared::User::parseAnonymousMsgBody2(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);
	CommMsgParser _parser0(_body);
	overcreditMask.parseMsg(_parser0);
}

/*static*/ void Common::AtfShared::User::validateAnonymousMsgBody2(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	PaysystemMask::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("overcreditMask"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

void Common::AtfShared::User::parseAnonymousMsgBody3(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);
	CommMsgParser _parser0(_body);
	cpp.parseMsg(_parser0);
}

/*static*/ void Common::AtfShared::User::validateAnonymousMsgBody3(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	PlayerPointsProgram::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("cpp"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

void Common::AtfShared::User::parseAnonymousMsgBody4(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);
	CommMsgParser _parser0(_body);
	spp.parseMsg(_parser0);
}

/*static*/ void Common::AtfShared::User::validateAnonymousMsgBody4(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	PlayerPointsProgram::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("spp"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

void Common::AtfShared::User::parseAnonymousMsgBody5(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);
	CommMsgParser _parser0(_body);
	visitedEx.parseMsg(_parser0);
	if(_parser0.parseEnded()) return;
	_parser0.parseUINT32(regSiteId);
}

/*static*/ void Common::AtfShared::User::validateAnonymousMsgBody5(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	PSiteMask::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("visitedEx"), _fieldsWithUnparsedContent);
	if(_parser0.parseEnded()) return;
	UINT32 regSiteId; _parser0.parseUINT32(regSiteId);
	AtfValidator::validateInt(_descr, "regSiteId", regSiteId, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

void Common::AtfShared::User::parseAnonymousMsgBody6(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);
	CommMsgParser _parser0(_body);
	_parser0.parseINT16(operatorId);
	_parser0.parseStringP(promoName);
}

/*static*/ void Common::AtfShared::User::validateAnonymousMsgBody6(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	INT16 operatorId; _parser0.parseINT16(operatorId);
	AtfValidator::validateInt(_descr, "operatorId", operatorId, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "promoName"); size_t szPromoName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "promoName", szPromoName, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    UserWithProperties
//=================================================================

Common::AtfShared::UserWithProperties::UserWithProperties()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Common::AtfShared::UserWithProperties::UserWithProperties(UserWithProperties&& _o)
	: user(std::move(_o.user))
	, userProps(std::move(_o.userProps))
{
}

Common::AtfShared::UserWithProperties& Common::AtfShared::UserWithProperties::operator=(UserWithProperties&& _o)
{
	if(this != &_o)
	{
		user = std::move(_o.user);
		userProps = std::move(_o.userProps);
	}
	return *this;
}

#endif

void Common::AtfShared::UserWithProperties::clear()
{
	user.clear();
	userProps.clear();
}

bool Common::AtfShared::UserWithProperties::equals(const UserWithProperties& _o) const
{
	return user.equals(_o.user) &&
		userProps.equals(_o.userProps);
}

const char *Common::AtfShared::UserWithProperties::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("user=");
	user.toTraceString(_buf);
	_buf.append(',');
	_buf.append("userProps=");
	userProps.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

const char *Common::AtfShared::UserWithProperties::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	user.toXmlString("user", _buf);
	userProps.toXmlString("userProps", _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool Common::AtfShared::UserWithProperties::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("user"))
		{
			if(!Atf::AtfTempl< User >::FromXmlString(_value, user)) return false;
		}
		else if (_element.equals("userProps"))
		{
			if(!Atf::AtfTempl< Atf::LAtfVector< UserPropertyLegacy, 4 > >::FromXmlString(_value, userProps)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void Common::AtfShared::UserWithProperties::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _msg0;
	user.composeMsg(_msg0, _ignoreJSON);
	_msg.composeMsgBody(_msg0);
	CommMsgBody _msg1;
	userProps.composeMsg(_msg1, _ignoreJSON);
	_msg.composeMsgBody(_msg1);
}

void Common::AtfShared::UserWithProperties::parseMsg(CommMsgParser& _parser)
{
	parseAnonymousMsgBody0(_parser);
	parseAnonymousMsgBody1(_parser);
}

const char *Common::AtfShared::UserWithProperties::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("user", user);
	_jsonstr.compose("userProps", userProps);
	return _buf.c_str();
}

void Common::AtfShared::UserWithProperties::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("user", user);
	_jparser.parseByNameThrow("userProps", userProps);
}

/* static */ void Common::AtfShared::UserWithProperties::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	User user; _jparser.validateByNameThrow("user", user);
	Atf::AtfVectorBase< UserPropertyLegacy > userProps; _jparser.validateByNameThrow("userProps", userProps);
	AtfValidator::validateInt(_descr, "userProps", userProps.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void Common::AtfShared::UserWithProperties::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	validateAnonymousMsgBody0(_parser, _checker, _descr, _fieldsWithUnparsedContent);
	validateAnonymousMsgBody1(_parser, _checker, _descr, _fieldsWithUnparsedContent);
}

void Common::AtfShared::UserWithProperties::parseAnonymousMsgBody0(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);
	CommMsgParser _parser0(_body);
	user.parseMsg(_parser0);
}

/*static*/ void Common::AtfShared::UserWithProperties::validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	User::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("user"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

void Common::AtfShared::UserWithProperties::parseAnonymousMsgBody1(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);
	CommMsgParser _parser0(_body);
	userProps.parseMsg(_parser0);
}

/*static*/ void Common::AtfShared::UserWithProperties::validateAnonymousMsgBody1(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	int szUserProps = Atf::LAtfVector< UserPropertyLegacy, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("userProps"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "userProps", szUserProps, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

