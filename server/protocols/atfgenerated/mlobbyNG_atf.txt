// ===========================================================
// Copyright (C) 2018 Stars Technologies Services  All rights reserved.
// =========================================================== 

#include "Common_atf${ATF_THIN_FILENAME_SUFFIX}.h"
#include "mlobbyNG.h"
#include "personalization.h"
#include "tournGroups.h"
#include "../storm/TableCommonStructs${ATF_THIN_FILENAME_SUFFIX}.h"
#include "../mtlobby/NStackTournInfo${ATF_THIN_FILENAME_SUFFIX}.h"
#include "sitemasks.h"
#include "../ppp/pppclientprot${ATF_THIN_FILENAME_SUFFIX}.h"

#define TOP_LEVEL_NAMESPACE MLobbyNG

namespace cli
{
	MsgBodyStruct TournSelectionFilter
	{
		UINT32 locale max MAX_LOCALES;
		UINT64 gameMask max (2*(UINT64)NGGameTypes::NGGame_Last-1); // NGGameTypes
		UINT32 buyInMask max (2*NGBuyIn_Last-1); // NGBuyInTypes
		UINT64 minBuyIn;	// can be PM chips so its unbounded
		UINT64 maxBuyIn;	// can be PM chips so its unbounded
		UINT32 speedMask max (2*NGTournSpeed_Last-1); // NGTournSpeedTypes 
		UINT32 tournTypeMask max (2*NGTournType_Last-1); // NGTournTypeTypes
		UINT32 currencyMask max (2*NGCurrency_Last-1); // NGCurrencyTypes
		UINT32 tableSizeMask max (2*NGMaxTableSize_Last-1); // NGMaxTableSizeTypes
		UINT32 tournVariantMask max (2*NGTournVariant_Last-1); // NGTournVariantTypes
		UINT32 tournStateMask max (2*NGTournState_Last-1); // NGTournStateTypes
		UINT32 startingWithin max 1440; 	// starting soon in minutes, or 0 if not used
		PString country maxlen 3;
		bool isPM;
		vector<UINT32> tournGroups maxsize TournGroup_Last; // enum TournGroupTypes
		INT32 lateRegCutoff parseEndOptB4Me;
		UINT32 genderRestrictMask max (2*RestrictedTo_Last-1) parseEndOptB4Me; // NGTournRestrictedToTypes
		UINT32 tournDisplayMask max (2*NGTournDisplay_Last-1) parseEndOptB4Me; // NGTournDisplayTypes
		UINT32 negateTournVariantMask max (2*NGTournVariant_Last-1) parseEndOptB4Me; // NGTournVariantTypes
	};
	
	MsgBodyStruct TournResultCriteria
	{
		UINT32 sortOrder min NGTournSort_BuyInAsc max NGTournSort_Last; // sorting order
		UINT32 maxItems max 500000;
	};
	
	MsgBodyStruct ClientMarkers
	{
		UINT32 context;
	};
	
	
	MsgBodyStruct FppFactorStruct
	{
		UINT16 fppFactor;
		UINT32 sites;
		UINT32 gameCategory; // #22626
		UINT32 number; // PYR-23500
		SrvTime endT; // PYR-24398
		PSiteMask sitesEx parseEndOptB4Me;
	};
	
	
	MsgBodyStruct TournStaticData
	{
		UINT64  tournamentId;
		PString  server;
		PString  targetServer;
		PString  hasSatellite;
		SrvTime  whenStart;
		UINT32  buyIn;
		UINT32  rake;
		UINT32  fppBuyIn;
		BYTE  isRestricted;
		BYTE  isPwdProtected;
		PString  name;
		PString  admissionId;
		BYTE  isPlayMoney;
		UINT32  satelliteTarget;
		UINT32  minPlayers;
		UINT32  tournFlags;
		BYTE  game;
		BYTE  isHiLo;
		BYTE  structure;
		UINT32  tournMask;
		UINT32  tournSites;
		UINT32  whenStartInt;
		UINT32  tournMask2;
		SrvTime  targetWhenStart;
		UINT32  tournMask3;
		UINT32  tournMask4;
		UINT32  maxPerTable;
		bool  countryRestrictionInverted;
		vector< PString > restrictedCountries;
		BYTE hasDayTwoStart;
		UINT32 dayTwoStartSec;
		SrvTime dayTwoStart;
		PString shortText;
		UINT16  chatLang;
		PString  currency;
		UINT32  tournFlagsServInt;
		UINT32  knockout;
		PString satelliteTargetReference;
		UINT16 satelliteTargetReferenceLock;
		UINT32 maxPlayers;
		BYTE speedDisplay;
		PString nameSnG;
		BYTE  step;
		BYTE timedTournType;
		UINT16 timedTournTime;
		BYTE timedTournPayout;
		bool  isFlightTourn;
		PString tournBrand;
		UINT32 scalePM;
		BYTE progressiveKnockout;
		BYTE awardScheme;
		UINT16 numReentries;
		PString internalReference;
		PString favReference;
		PString satelliteTargetName;
		INT64 admissionPrice;
		UINT64 tournFlags2;
		SrvTime regEndAbs;
		UINT32 regEndAbsInt;
		bool  doNotAllowToUnreg;
		CommMsgBody
		{
			TournClient${ATF_THIN_NAMESPACE_SUFFIX}::NStackTournInfoStruct nStackInfo;
		};		
		UINT32  tournMask5;
		UINT32  tournMask6;
		PString satelliteTargetNameMTT;
		UINT32  liveEventMask;
		BYTE  timedTournPlayersPercent;
		UINT32 dummy1;
		BYTE  rmPmLobby;
		UINT32  brandAccessMask;
		UINT32  activeFlags;
		UINT32  sngScriptId;
		PString customSpeedDisplayName;
		PString mobileName;	// PYR-66779
		UINT32 tournGroup; // PYR-66779
		INT32 guaranteedPrizePool; // PYR-61693
		vector<PString> admissions; // PYR-73971
		PString serverObj;
		PString tournGroupRef parseEndOptB4Me; // PYR-87937
		INT32 maxPayoutSag parseEndOptB4Me; // PYR-98177
		PSiteMask tournSitesEx parseEndOptB4Me;
	};
	
	MsgBodyStruct TournDynaData
	{
		UINT32  fakeStatus;
		UINT32  entrants;
		BYTE  publProp;
		UINT32 prizePoolToPublish;
		BYTE prizePoolUnit;

		vector<FppFactorStruct> happyHoursMultipliers;

		UINT32 goldenSnGMilestoneAwardStub;  //obsolete
		UINT32 dummy1;
		bool goldenSnGEligibleStub; //obsolete
		UINT32 goldenSnGTotalAddonStub; //obsolete
		UINT32 prizePoolMoneyToPublish;
		UINT32  timedTournPlayersThreshold;
		INT8 mixTournSatellite;
	};
	
	MsgBodyStruct TournDataStruct
	{
		TournStaticData staticData;
		TournDynaData dynamicData;
		SrvTime lastEntry;
		bool userHasTicket parseEndOptB4Me;
	};
	
		
	MsgBodyStruct SpinnerPrizeStruct
	{
		BYTE	level;
		BYTE	type;
		UINT32	value;	//for money it's total prize pool, for custom prizes it's ticket type ID for 1st place award
		PString targetRef;
	};
	
	MsgBodyStruct SagMaxMods
	{
		BYTE numUsers;
		vector<SpinnerPrizeStruct> spinnerPrizes;
	};
	
	struct StatesByCountryStruct
	{
		PString country;
		bool	stateInversion;
		vector<PString> states;
	};
	
	struct MLobbyNGSagStaticDataStruct
	{
		//static data
		bool active;
		if( active )
		{
			UINT32 scriptId;
			UINT32 flags;
			UINT32	brandMask;
			UINT32	siteMask; // replaced by "PSiteMask tournSites"
			INT32 buyin;
			INT32 rake;
			INT32 currency;
			INT32	scalePM;
			BYTE	game;
			BYTE	isHiLo;
			BYTE	structure;
			BYTE	speedDisplay;
			INT32 minPrizePool;
			INT32 maxPrizePool;
			INT32 maxPayout;
			PString promoRef;
			INT32 minClientVersion;
			INT32 maxClientVersion;
			vector<SagMaxMods> mods;
			vector<UINT32> tickets;
			I18nPString customSpeedDisplayName;
			bool restrictCountryInversion;
			vector<StatesByCountryStruct> statesByCountry;
			PString visibilityCriteria;
			I18nPString mobileName;
			UINT32 tournGroup;
			vector<PString> admissions; // PYR-73971
			UINT32 tournFlags parseEndOptB4Me;	// PYR-84484
			PString tournGroupName parseEndOptB4Me;	// PYR-66845
			PString tournGroupRef parseEndOptB4Me; // PYR-87937
			PSiteMask tournSites parseEndOptB4Me;
			vector<UINT32> eligibleGroups parseEndOptB4Me; // PYR-109262
			// remember to add new members to MLobbyNGSagStaticDataStructEx::operator=
		}
	};
	
	MsgBodyStruct MLobbyNGSagLocalStaticDataStruct
	{
		//static data
		bool active;
		if( active )
		{
			UINT32 scriptId;
			UINT32 flags;
			UINT32 brandMask;
			UINT32 siteMask; // replaced by "PSiteMask tournSites"
			INT32 buyin;
			INT32 rake;
			INT32 currency;
			INT32 scalePM;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			BYTE speedDisplay;
			INT32 minPrizePool;
			INT32 maxPrizePool;
			INT32 maxPayout;
			PString promoRef;
			INT32 minClientVersion;
			INT32 maxClientVersion;
			vector<SagMaxMods> mods;
			vector<UINT32> tickets;
			PString customSpeedDisplayName;
			bool restrictCountryInversion;
			vector<StatesByCountryStruct> statesByCountry;
			PString visibilityCriteria;
			PString mobileName;
			UINT32 tournGroup;
			vector<PString> admissions; // PYR-73971
			bool isPlayMoney;
			UINT32 tournFlags parseEndOptB4Me;	// PYR-84484
			PString tournGroupName parseEndOptB4Me;	// PYR-66845
			PString tournGroupRef parseEndOptB4Me; // PYR-87937
			PSiteMask tournSites parseEndOptB4Me; // PYR-117157
		}
	};
	
	
	MsgBodyStruct SagDataStruct
	{
		MLobbyNGSagLocalStaticDataStruct staticData;
		SrvTime lastEntry;
		bool userHasTicket parseEndOptB4Me; // PYR-98946
		UINT32 ngSagFlags parseEndOptB4Me; // PYR-112646
	};
	
	MsgBodyStruct PPPDataStruct
	{
		PPPClient::publication::PppStaticLeaf staticData;
		INT64 buyIn; // buyIn + rake
		SrvTime lastEntry;
	};
	
	MsgBodyStruct TableSelectionFilter
	{
		UINT32 locale max MAX_LOCALES;
		UINT64 gameMask max (2*(UINT64)NGGameTypes::NGGame_Last-1); // NGGameTypes
		bool isPlayMoney;
		INT64 minStake max 2000000000;
		INT64 maxStake max 2000000000;
		UINT32 currencyMask max (2*NGCurrency_Last-1); // NGCurrencyTypes
		UINT32 tableSizeMask max (2*NGMaxTableSize_Last-1); // NGMaxTableSizeTypes
		PString country maxlen 3;
		UINT32 gameCategoryMask max (2*GameCategory_Last-1);	// enum GameCategoryTypes
		UINT32 capMask max (2*NGTableHasCap_Last-1) parseEndOptB4Me; // NGTableHasCapTypes
		UINT32 anteMask max (2*NGTableHasAnte_Last-1) parseEndOptB4Me; // NGTableHasAnteTypes
		INT32 minDeepRatio max 2000000000 parseEndOptB4Me;
		INT32 maxDeepRatio max 2000000000 parseEndOptB4Me;
		INT64 minBuyIn parseEndOptB4Me;	// can be PM chips so its unbounded
		INT64 maxBuyIn parseEndOptB4Me;	// can be PM chips so its unbounded
		UINT32 variantMask default NGTableVariant_Regular max (2*NGTableVariant_Last-1) parseEndOptB4Me;	// NGTableVariantTypes
	};
	
	MsgBodyStruct TableResultCriteria
	{
		UINT32 sortOrder min NGTableSort_StakesAsc max NGTableSort_Last; // sorting order
		UINT32 maxItems max 500000;
	};
	
	MsgBodyStruct TableDataStruct
	{
		UINT32 id;
		BYTE isPlayMoney;
		BYTE game;
		BYTE isHiLo;
		BYTE maxPlayers;
		UINT32 visibilityMask;
		BYTE structure;
		UINT32 loBet;
		UINT32 hiBet;
		UINT32 ante;
		UINT32 cap;
		PString currency;
		UINT32 minChipsLimit;
		UINT32 maxBuyIn;
		bool countryRestrictionInverted;
		vector<PString> restrictedCountries;
		bool visible;
		UINT32 scalePM;
		UINT32 defaultBuyIn;
		UINT32 brandMask;
		UINT32 seatFinderId;
		INT32 poolBlockMinHands;
		vector<INT32> poolBlockTimePenalty;
		bool isPasswordProtected;
		bool isMorphLobby;
		SrvTime lastEntry;
		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes parseEndOptB4Me;
		vector<INT64> variableAntes parseEndOptB4Me;
		UINT32 tableFlags parseEndOptB4Me;
		UINT64 tableFlags2 parseEndOptB4Me;
		PSiteMask visibilityMaskEx parseEndOptB4Me;
	};
	
	MsgBodyStruct ZoomStaticDataStruct
	{
		// static data
		UINT32			id;
		BYTE			game;
		BYTE			structure;
		BYTE			isHiLo;
		BYTE			maxPlayersPerTable;
		INT32			loBet;
		INT32			hiBet;
		INT32			ante;
		INT32			cap;
		PString			currency;
		INT32			minChipsLimit;
		INT32			maxBuyIn;
		UINT32			visibilityMask;
		INT32			defaultBuyIn;
		PString			specialName;
		bool			countryRestrictionInverted;
		vector<PString> restrictedCountries;
		BYTE			isPlayMoney;
		bool			isMorphLobby;
		UINT32			scalePM;
		PString 		server;
		PString 		name;
		PString 		replayerInstance;
		BYTE 			isOneOnOne;
		UINT32 			tableFlags;
		UINT16 			chatLang;
		bool 			quickLobbyVisible; // #22042
		UINT32			blitzFlags;
		UINT32 			brandMask; // PYR-40190
		PString 		serverObj;
		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes parseEndOptB4Me;
		PSiteMask		visibilityMaskEx parseEndOptB4Me;
		UINT64			tableFlags2 parseEndOptB4Me;
	};
	
	MsgBodyStruct EarlyBirdMultiplier
	{
		UINT32 licenseId;
		UINT32 multiplier;
	};
	
	MsgBodyStruct ZoomDynaDataStruct
	{
		// dynamic data
		INT32			handsPerHour;
		INT32			avgPotSize;
		INT32			avgStackSize;
		INT32			numPlayers;
		BYTE 			publProp;
		BYTE 			avgPlayers;
		BYTE 			avgVpip;
		INT32			earlyBirdMins;
		vector<EarlyBirdMultiplier> earlyBirdMultipliers; // deprecated, use licenseEarlyBirdMultiplier instead
		UINT32 licenseEarlyBirdMultiplier parseEndOptB4Me; // PYR-123835 
	};
	
	MsgBodyStruct ZoomDataStruct
	{
		ZoomStaticDataStruct staticData;
		ZoomDynaDataStruct dynamicData;
		SrvTime lastEntry;
	};
	
	MsgBodyStruct SeatFinderStaticDataStruct
	{
		// static data
		UINT32			id;
		BYTE			game;
		BYTE			structure;
		BYTE			isHiLo;
		BYTE			maxPlayersPerTable;
		INT32			loBet;
		INT32			hiBet;
		INT32			ante;
		INT32			cap;
		PString			currency;
		INT32			minChipsLimit;
		INT32			maxBuyIn;
		UINT32			visibilityMask;
		INT32			defaultBuyIn;
		PString			specialName;
		bool			countryRestrictionInverted;
		vector<PString> restrictedCountries;
		PString 		replayerAddress;
		PString 		replayerInstance;
		INT8 			minPlayersPerTable;
		bool 			isPasswordProtected;
		INT32 			poolBlockMinHands;
		vector<INT32> 	poolBlockTimePenalty;
		UINT32 			flags;
		UINT64 			flags2;
		bool			isPM;
		UINT32			scalePM;
		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes parseEndOptB4Me;
		vector<INT64>	variableAntes parseEndOptB4Me;
		PSiteMask		visibilityMaskEx parseEndOptB4Me;
	};
	
	MsgBodyStruct SeatFinderDynaDataStruct
	{
		// dynamic data
		INT32			handsPerHour;
		INT32			avgPotSize;
		INT32			avgStackSize;
		INT32			numPlayers;
		INT32 			numTables;
		INT32 			numFullTables;
	};
	
	MsgBodyStruct SeatFinderDataStruct
	{
		SeatFinderStaticDataStruct staticData;
		SeatFinderDynaDataStruct dynamicData;
		SrvTime lastEntry;
	};
	
	MsgBodyStruct SngSelectionFilter
	{
		UINT32 locale max MAX_LOCALES;
		UINT64 gameMask max (2*(UINT64)NGGameTypes::NGGame_Last-1); // NGGameTypes
		UINT32 buyInMask max (2*NGBuyIn_Last-1); // NGBuyInTypes
		INT64 minBuyIn;	// can be PM chips so its unbounded
		INT64 maxBuyIn;	// can be PM chips so its unbounded
		UINT32 speedMask max (2*NGTournSpeed_Last-1); // NGTournSpeedTypes 
		UINT32 currencyMask max (2*NGCurrency_Last-1); // NGCurrencyTypes
		UINT32 tableSizeMask max (2*NGMaxTableSize_Last-1); // NGMaxTableSizeTypes
		UINT32 tournVariantMask max (2*NGTournVariant_Last-1); // NGTournVariantTypes
		PString country maxlen 3;
		bool isPM;
		UINT32 tableNumMask max (2*NGTableNum_Last-1); // NGTableNumTypes
		UINT32 gameCategoryMask max (2*GameCategory_Last-1);	// enum GameCategoryTypes
		vector<UINT32> tournGroups maxsize TournGroup_Last; // enum TournGroupTypes
		UINT32 tournStateMask max (2*NGTournState_Last-1) parseEndOptB4Me;	// NGTournStateTypes - only NGTournState_AllReg and NGTournState_LateReg are checked
		UINT32 negateTournVariantMask max (2*NGTournVariant_Last-1) parseEndOptB4Me; // NGTournVariantTypes
		INT32 numPlayers min 0 max 10000000 parseEndOptB4Me;
	};
	
	// PYR-82008
	MsgBodyStruct WinnerAmountData
	{
		INT32 amount;
		BYTE flags;
	};
	
	// PYR-82008
	MsgBodyStruct PrizeData
	{
		INT32 min;
		INT32 max;
		INT32 numTickets;
		vector<WinnerAmountData> winners;
	};
	
	
	MsgBodyStruct TicketData
	{
		UINT16 ticketId;
		PString admission;
	};
	
	MsgBodyStruct SngDataStruct
	{
		UINT32 id;
		UINT32 tournSites;
		bool visible; // Quick Lobby visible
		BYTE game;
		BYTE structure;
		BYTE isHiLo;
		BYTE isPlayMoney;
		PString currency;
		INT32 buyIn;
		INT32 rake;
		INT32 knockout;	
		BYTE speedDisplay;
		UINT32 minPlayers;
		bool countryRestrictionInverted;
		vector<PString> restrictedCountries;
		UINT32 scalePM; 
		UINT32 brandAccessMask; 
		BYTE timedTournType;	
		UINT16 timedTournTime;	
		PString visibilityCriteria; 
		UINT32 maxPerTable; // PYR-61693
		BYTE timedTournPlayersPercent; // PYR-61693
		UINT32 tournFlags; // PYR-61693
		UINT64 tournFlags2; // PYR-61693
		UINT32 satelliteTarget; // PYR-61693
		PString satelliteTargetReference; //PYR-61693
		UINT32 tournFlagsServInt; // PYR-61693
		UINT64 regTournId;
		PString mobileName;	// PYR-66779
		UINT32 tournGroup; // PYR-66779
		UINT32 maxPlayers; // PYR-66899
		SrvTime lastEntry;
		vector<PString> admissions; // PYR-73971
		INT32 fppBuyIn; // PYR-61693
		vector<PrizeData> prizes; // PYR-82008
		vector<TicketData> tickets;
		INT32 awardScheme;
		PString tournGroupName parseEndOptB4Me;	// PYR-66845
		PString tournGroupRef parseEndOptB4Me; // PYR-87937
		PSiteMask tournSitesEx parseEndOptB4Me;
		bool userHasTicket parseEndOptB4Me; // PYR-98946
	};
	
	
	MsgBodyStruct ActivityStruct
	{
		SrvTime eventTime;		
		UINT32 gameCategory max (2*GameCategory_Last-1);	// all
		BYTE handType max HandType_Last;					// all
		BYTE limit max PotStruct_Last;						// all
		UINT32 minPlayers max 2000000000;					// SNG
		UINT32 maxPlayers max 2000000000;					// MTT, SAG, SNG
		UINT16 playersPerTable max 10;						// all
		UINT32 loBet;										// no limit - all, low bet for stud etc, small blind for holdem, omaha etc
		UINT32 hiBet;										// no limit - all, high bet for stud etc, big blind for holdem, omaha etc
		INT64 buyIn;										// no limit - MTT, SAG, SNG
		UINT16 speed max SpeedDisplay_LastSlot;				// MTT, SAG, SNG
		UINT32 tournVariant max (2*NGTournVariant_Last-1);	// MTT, SAG, SNG
		PString strRef maxlen 20;							// MTT, SAG (promoName), SNG(targetRef)
		UINT32 flags;										// no limit - all, see enum  ActivityFlagTypes in personalization.h
		PString currency maxlen 7;							// all
	};
	
	
	MsgBodyStruct GameListFilter
	{
		UINT32 locale max MAX_LOCALES;
		UINT32 siteId max PokerStars_Last;
		UINT32 brandId max BrandType_Last;
		PString country maxlen 7;
		PString state maxlen 50;
		bool isPM;
	};
	
	MsgBodyStruct SuggestedGamesSelectionFilter
	{
		UINT32 locale max MAX_LOCALES;
		PString country maxlen 3;
		bool isPM;
		INT64 tournMedianValue; 	// no limit 
		INT64 sngMedianValue;		// no limit 
		INT64 ringMedianValue;		// no limit 
		TournSelectionFilter tournFilter;
		TableSelectionFilter tableFilter;
		SngSelectionFilter sngFilter;
	};
	
	
	MsgBodyStruct FilterCountKey
	{
		INT64 intVal1;		// NGFilter_GameType -> NGGameTypes, NGFilter_TableSize -> NGMaxTableSizeTypes, NGFilter_Speed -> NGTournSpeedTypes, NGFilter_TableNum -> NGTableNumTypes
		INT64 intVal2;		// unused
		INT64 intVal3;		// unused
		
		@override bool operator<(const FilterCountKey& rhs) const
		{
			if( intVal1 == rhs.intVal1 )
			{
				if( intVal2 == rhs.intVal2 )
				{
					return intVal3 < rhs.intVal3;
				}

				return intVal2 < rhs.intVal2;
			}
			
			return intVal1 < rhs.intVal1;
		}
	};
	
	MsgBodyStruct FilterCountInfo
	{
		FilterCountKey key;
		INT64 value;
	};
	
	MsgBodyStruct GameConnInfoReqStruct
	{
		UINT64 gameId;
		UINT32 category max GameCategory_Last;
		UINT32 ngSagFlags max (2*NGSAGFlag_Last-1) parseEndOptB4Me;
	};
	
	MsgBodyStruct GameConnectInfo
	{
		UINT64 gameId;
		PString server;
		PString serverObject;
		UINT32 scriptId;
		UINT32 category;		// enum GameCategoryTypes
		bool shouldOpen;
	};
	
	MsgBodyStruct TicketTournInfo
	{
		PString ticketName;
		vector<TournDataStruct> tourns;
		vector<SngDataStruct> sngTypes;
		vector<SagDataStruct> sagTypes;
	};
	
	
	MsgBodyStruct TableStaticDataStruct
	{
		UINT64	tableId;
		PString name;
		PString server;
		PString serverObject;
		UINT32  clubId;	
		BYTE	isOneOnOne;
		BYTE	isPlayMoney;
		BYTE	game;
		BYTE	isHiLo;
		BYTE	maxPlayers;
		UINT32	visibilityMask;
		UINT32	tableFlags;	
		UINT32  tableInstanceFlags;
		UINT16	chatLang;

		BYTE		structure;
		UINT32		loBet;
		UINT32		hiBet;
		UINT32		ante;
		UINT32		cap;
		PString		specialName;
		PString		currency;
		UINT32		minChipsLimit;
		UINT32		maxBuyIn;

		//	The next four vars are used in shadow table only, 
		//		not used in Hg (dummy values are published for Hg)
		BYTE		icon;		//PYR-16988
		BYTE		filter;		//PYR-16988
		bool		countryRestrictionInverted;
		vector< PString > restrictedCountries;

		UINT32		scalePM;
		UINT32		defaultBuyIn;		//PYR-24823
		UINT64		tableFlags2;	
		bool		isTableStarter;
		UINT32		brandMask; // PYR-40975
		INT32		poolBlockMinHands;
		UINT32      tableTypeId;
		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes parseEndOptB4Me;
		vector<INT64>	variableAntes parseEndOptB4Me;
		PSiteMask	visibilityMaskEx parseEndOptB4Me;
		UINT32		seatFinderId parseEndOptB4Me;
	};
	
	MsgBodyStruct TableData
	{
		TableStaticDataStruct staticData;
	};
	
	
	MsgBodyStruct SuggestedGames2SelectionFilter
	{
		UINT32 locale max MAX_LOCALES;
		INT64 tournMedianValue; 	// no limit 
		INT64 sngMedianValue;		// no limit 
		INT64 ringMedianValue;		// no limit 
		vector<TournSelectionFilter> tournFilters maxsize 10;
		vector<TableSelectionFilter> tableFilters maxsize 10;
		vector<SngSelectionFilter> sngFilters maxsize 10;
	};
	
	MsgBodyStruct FilterGamesSelectionFilter
	{
		UINT32 locale max MAX_LOCALES;
		vector<TournSelectionFilter> tournFilters maxsize 10;
		vector<TableSelectionFilter> tableFilters maxsize 10;
		vector<SngSelectionFilter> sngFilters maxsize 10;
	};
	
	MsgBodyStruct FilterGamesResultCriteria
	{
		UINT32 maxItems max 500000;
	};
	
	MsgBodyStruct NameSearchSelectionFilter
	{
		UINT32 locale max MAX_LOCALES;
		PString name maxlen 50;
		PString country maxlen 7 parseEndOptB4Me;
		bool isPM parseEndOptB4Me;
	};
	

	MsgBodyStruct OrderedTicketTournInfo
	{
		PString ticketName;
		vector<TournDataStruct> tourns;
		vector<SngDataStruct> sngTypes;
		vector<SagDataStruct> sagTypes;
		vector<UINT32> gameOrder; // GameCategoryTypes
	};
	
	MsgBodyStruct TicketTournRequestData
	{
		vector<PString> ticketNames maxsize 100;
		UINT32 gameCategoryMask max (2*GameCategory_Last-1);			// enum GameCategoryTypes
		UINT32 ticketTournRequestMask max (2*TicketTournRequest_Last-1);	// enum TicketTournRequestTypes
		GameListFilter filter;
		vector<ActivityStruct> activities maxsize 100;
		UINT64 gameMask max (2*(UINT64)NGGameTypes::NGGame_Last-1) default (2*(UINT64)NGGameTypes::NGGame_Last-1); // NGGameTypes
	};
	
	MsgBodyStruct BrandedLobbyInfo
	{
		PString lobbyName maxlen 100;
		PString displayName maxlen 200;
		vector<TournSelectionFilter> tournFilters maxsize 10;
		vector<TableSelectionFilter> tableFilters maxsize 10;
		vector<SngSelectionFilter> sngFilters maxsize 10;
		INT32 gameCount parseEndOptB4Me;
		INT32 playerCount parseEndOptB4Me;
	};
	
	MsgBodyStruct FullBrandedLobbyInfo
	{
		PString lobbyName maxlen 100;
		I18nPString displayName;
		PSiteMask sites;
		vector<TournSelectionFilter> tournFilters maxsize 10;
		vector<TableSelectionFilter> tableFilters maxsize 10;
		vector<SngSelectionFilter> sngFilters maxsize 10;
	};
	
	MsgBodyStruct ResultRanges
	{
		UINT64 gameMask max (2*(UINT64)NGGameTypes::NGGame_Last-1); 	// NGGameTypes
		UINT32 tableSizeMask max (2*NGMaxTableSize_Last-1); 			// NGMaxTableSizeTypes
		UINT32 speedMask max (2*NGTournSpeed_Last-1); 					// NGTournSpeedTypes 
		UINT32 tournVariantMask max (2*NGTournVariant_Last-1); 			// NGTournVariantTypes
		INT32 minNumPlayers max 1000000000;
		INT32 maxNumPlayers max 1000000000;
		INT64 minBuyIn;	// can be PM chips so its unbounded
		INT64 maxBuyIn;	// can be PM chips so its unbounded
		UINT32 tournStateMask max (2*NGTournState_Last-1) parseEndOptB4Me;              // NGTournStateTypes
		UINT32 gameCategoryMask max (2*GameCategory_Last-1) parseEndOptB4Me;    // GameCategoryTypes

	};
	
	MsgBodyStruct FindTournsByRefFilter
	{
		PString internalRef maxlen 100;
		UINT32 siteId;
		UINT32 brandId default BrandType_AllDefined;
		PString country maxlen 20;
		bool usePMFlag;
		bool isPM;
		UINT32 locale;
	};
	
	Message MSG_MLOBBYNG_GET_GAME_LIST
	{
		GameListFilter filter;
		vector<ActivityStruct> activities maxsize 100;
		UINT32 licenseId max eLicenceLast parseEndOptB4Me;
	};
	
	Message MSG_MLOBBYNG_GET_GAME_LIST_REPLY
	{
		vector<TournDataStruct> tourns;
		vector<TableDataStruct> tableTypes;
		vector<SngDataStruct> sngTypes;
		vector<SagDataStruct> sagTypes;
		vector<ZoomDataStruct> zoomTypes;
		vector<SeatFinderDataStruct> seatFinders;
		vector<UINT32> gameOrder; // GameCategoryTypes
		vector<PPPDataStruct> pppTypes parseEndOptB4Me; // PYR-123925
	};
	
	
	Message MSG_MLOBBYNG_TABLE_TYPE_COUNTS
	{
		TableSelectionFilter filter;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra loginExtraData;
		ClientMarkers clientMarkers;
		INT32 filterTypeToCount max NGFilter_Last; // NGFilterTypes
	};
	
	Message MSG_MLOBBYNG_TABLE_TYPE_COUNTS_REPLY
	{
		INT32 filterTypeToCount;	// NGFilterTypes
		vector<FilterCountInfo> counts;
	};
	
	Message MSG_MLOBBYNG_TOURNAMENT_COUNTS
	{
		TournSelectionFilter filter;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra loginExtraData;
		ClientMarkers clientMarkers;
		INT32 filterTypeToCount max NGFilter_Last; // NGFilterTypes
	};
	
	Message MSG_MLOBBYNG_TOURNAMENT_COUNTS_REPLY
	{
		INT32 filterTypeToCount;	// NGFilterTypes
		vector<FilterCountInfo> counts;
	};
	
	Message MSG_MLOBBYNG_SNG_COUNTS
	{
		SngSelectionFilter filter;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra loginExtraData;
		ClientMarkers clientMarkers;
		INT32 filterTypeToCount max NGFilter_Last; // NGFilterTypes
	};
	
	Message MSG_MLOBBYNG_SNG_COUNTS_REPLY
	{
		INT32 filterTypeToCount;	// NGFilterTypes
		vector<FilterCountInfo> counts;
	};
	
	Message MSG_MLOBBYNG_GET_GAME_CONN_INFO
	{
		vector<GameConnInfoReqStruct> game maxsize 1000;
		UINT32 locale max MAX_LOCALES;
		UINT32 licenseId max eLicenceLast parseEndOptB4Me;
	};
	
	Message MSG_MLOBBYNG_GET_GAME_CONN_INFO_REPLY
	{
		vector<TournDataStruct> tourns;
		vector<TableData> tables;
		vector<ZoomDataStruct> zoomTypes;
	};
	
	Message MSG_MLOBBYNG_TICKET_TOURNS
	{
		vector<PString> ticketNames;
		UINT32 locale max MAX_LOCALES;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra loginExtraData;
		ClientMarkers clientMarkers;
	};
	
	Message MSG_MLOBBYNG_TICKET_TOURNS_REPLY
	{
		vector<TicketTournInfo> ticketInfos;
	};
	
	Message MSG_MLOBBYNG_GET_GAME_INFO
	{
		GameConnInfoReqStruct gameToFind;
		bool isPM;
		UINT32 locale max MAX_LOCALES;
		ClientMarkers clientMarkers;
	};
	
	Message MSG_MLOBBYNG_GET_GAME_INFO_REPLY
	{
		vector<TournDataStruct> tourns;
		vector<TableDataStruct> tableTypes;
		vector<SngDataStruct> sngTypes;
		vector<SagDataStruct> sagTypes;
		vector<ZoomDataStruct> zoomTypes;
		vector<SeatFinderDataStruct> seatFinders;
		vector<TableData> tables;
	};
	
	
	Message MSG_MLOBBYNG_FILTER_GAMES
	{
		FilterGamesSelectionFilter filter;
		FilterGamesResultCriteria criteria;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra loginExtraData;
		ClientMarkers clientMarkers;
		UINT32 licenseId max eLicenceLast parseEndOptB4Me;
	};
	
	Message MSG_MLOBBYNG_FILTER_GAMES_REPLY
	{
		vector<TournDataStruct> tourns;
		vector<TableDataStruct> tableTypes;
		vector<SngDataStruct> sngTypes;
		vector<SagDataStruct> sagTypes;
		vector<ZoomDataStruct> zoomTypes;
		vector<SeatFinderDataStruct> seatFinders;
		vector<UINT32> gameOrder; // GameCategoryTypes
		INT32 totalItems;
		INT64 minBuyIn;
		INT64 maxBuyIn;
		ResultRanges resultRanges;
	};
	
	Message MSG_MLOBBYNG_FILTER_GAMES_PS
	{
		FilterGamesSelectionFilter filter;
		FilterGamesResultCriteria criteria;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra loginExtraData;
		ClientMarkers clientMarkers;
		UINT32 licenseId max eLicenceLast parseEndOptB4Me;
	};
	
	Message MSG_MLOBBYNG_FILTER_GAMES_PS_REPLY
	{
		vector<TournDataStruct> tourns;
		vector<TableDataStruct> tableTypes;
		vector<SngDataStruct> sngTypes;
		vector<SagDataStruct> sagTypes;
		vector<ZoomDataStruct> zoomTypes;
		vector<SeatFinderDataStruct> seatFinders;
		vector<UINT32> gameOrder; // GameCategoryTypes
		INT32 totalItems;
		INT64 minBuyIn;
		INT64 maxBuyIn;
		ResultRanges resultRanges;
	};
	
	Message MSG_MLOBBYNG_GET_SUGGESTED_GAMES2
	{
		SuggestedGames2SelectionFilter filter;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra loginExtraData;
		ClientMarkers clientMarkers;
		UINT32 licenseId max eLicenceLast parseEndOptB4Me;
	};
	
	Message MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_REPLY
	{
		vector<TournDataStruct> tourns;
		vector<TableDataStruct> tableTypes;
		vector<SngDataStruct> sngTypes;
		vector<SagDataStruct> sagTypes;
		vector<ZoomDataStruct> zoomTypes;
		vector<SeatFinderDataStruct> seatFinders;
		vector<UINT32> gameOrder; // GameCategoryTypes
	};
	
	Message MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS
	{
		SuggestedGames2SelectionFilter filter;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra loginExtraData;
		ClientMarkers clientMarkers;
		UINT32 licenseId max eLicenceLast parseEndOptB4Me;
	};
	
	Message MSG_MLOBBYNG_GET_SUGGESTED_GAMES2_PS_REPLY
	{
		vector<TournDataStruct> tourns;
		vector<TableDataStruct> tableTypes;
		vector<SngDataStruct> sngTypes;
		vector<SagDataStruct> sagTypes;
		vector<ZoomDataStruct> zoomTypes;
		vector<SeatFinderDataStruct> seatFinders;
		vector<UINT32> gameOrder; // GameCategoryTypes
	};
	
	Message MSG_MLOBBYNG_SEARCH_BY_NAME
	{
		NameSearchSelectionFilter filter;
		FilterGamesResultCriteria criteria;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra loginExtraData;
		ClientMarkers clientMarkers;
	};
	
	Message MSG_MLOBBYNG_SEARCH_BY_NAME_REPLY
	{
		vector<TournDataStruct> tourns;
		vector<TableDataStruct> tableTypes;
		vector<SngDataStruct> sngTypes;
		vector<SagDataStruct> sagTypes;
		vector<ZoomDataStruct> zoomTypes;
		vector<SeatFinderDataStruct> seatFinders;
		vector<UINT32> gameOrder; // GameCategoryTypes
	};
	
	Message MSG_MLOBBYNG_SEARCH_BY_NAME_PS
	{
		NameSearchSelectionFilter filter;
		FilterGamesResultCriteria criteria;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra loginExtraData;
		ClientMarkers clientMarkers;
	};
	
	Message MSG_MLOBBYNG_SEARCH_BY_NAME_PS_REPLY
	{
		vector<TournDataStruct> tourns;
		vector<TableDataStruct> tableTypes;
		vector<SngDataStruct> sngTypes;
		vector<SagDataStruct> sagTypes;
		vector<ZoomDataStruct> zoomTypes;
		vector<SeatFinderDataStruct> seatFinders;
		vector<UINT32> gameOrder; // GameCategoryTypes
	};
	
	Message MSG_MLOBBYNG_FILTER_TICKET_TOURNS
	{
		TicketTournRequestData input;
	};
	
	Message MSG_MLOBBYNG_FILTER_TICKET_TOURNS_REPLY
	{
		vector<MLobbyNG::cli::OrderedTicketTournInfo> ticketInfos;
	};
	
	message MSG_MLOBBYNG_GET_BRANDED_LOBBIES
	{
		UINT32 locale max MAX_LOCALES;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra loginExtraData;
		ClientMarkers clientMarkers;
		UINT32 currencyMask parseEndOptB4Me;
		PString country parseEndOptB4Me;
		bool isPM parseEndOptB4Me;
	};
	
	message MSG_MLOBBYNG_GET_BRANDED_LOBBIES_REPLY
	{
		vector<BrandedLobbyInfo> lobbies;
	};
	
	
	Message MSG_MLOBBYNG_FIND_TOURNS_BY_REF
	{
		FindTournsByRefFilter input;
	};
	
	Message MSG_MLOBBYNG_FIND_TOURNS_BY_REF_REPLY
	{
		vector<TournDataStruct> tourns;
	};
};
