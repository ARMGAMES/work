/**
 * dbm_atf_thin.cpp
 *
 * This file was auto-generated from dbm_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin dbm_atf.txt
 */
 
#include "dbm_atf_thin.h"

//=================================================================
//                Protocol_DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG
//=================================================================

dbm::admin::Protocol_DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG::Protocol_DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG()
{
	clear();
}

void dbm::admin::Protocol_DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG::clear()
{
	userIntId = 0;
	reasons = 0;
	updateType = 0;
	comment.clear();
}

bool dbm::admin::Protocol_DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG::equals(const Protocol_DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG& _o) const
{
	return userIntId == _o.userIntId &&
		reasons == _o.reasons &&
		updateType == _o.updateType &&
		comment.equals(_o.comment);
}

const char *dbm::admin::Protocol_DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG).append(")");
	_buf.append(',');
	_buf.append("userIntId=");
	_buf.appendUint(userIntId);
	_buf.append(',');
	_buf.append("reasons=");
	_buf.appendUint(reasons);
	_buf.append(',');
	_buf.append("updateType=");
	_buf.appendInt(updateType);
	_buf.append(',');
	_buf.append("comment=");
	_buf.append(comment);
	return _buf.c_str();
}

void dbm::admin::Protocol_DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(userIntId);
	_msg.composeUINT32(reasons);
	_msg.composeINT32(updateType);
	_msg.composeString(comment);
}

void dbm::admin::Protocol_DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(userIntId);
	_parser.parseUINT32(reasons);
	_parser.parseINT32(updateType);
	_parser.parseStringP(comment);
}

/*static*/ void dbm::admin::Protocol_DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 userIntId; _parser.parseUINT32(userIntId);
	AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	UINT32 reasons; _parser.parseUINT32(reasons);
	AtfValidator::validateIntRange(_descr, "reasons", reasons, eFraudulentAccountReasons_Min, eFraudulentAccountReasons_Max, _checker, __FILE__, __LINE__);
	INT32 updateType; _parser.parseINT32(updateType);
	AtfValidator::validateInt(_descr, "updateType", updateType, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "comment"); size_t szComment = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "comment", szComment, (USER_COMMENTS_LEN-1), _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG
//=================================================================

dbm::admin::Protocol_DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG::Protocol_DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG()
{
	clear();
}

void dbm::admin::Protocol_DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG::clear()
{
	errCode = 0;
	errDesc.clear();
}

bool dbm::admin::Protocol_DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG::equals(const Protocol_DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG& _o) const
{
	return errCode == _o.errCode &&
		errDesc.equals(_o.errDesc);
}

const char *dbm::admin::Protocol_DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
	}
	return _buf.c_str();
}

void dbm::admin::Protocol_DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errDesc);
	}
}

void dbm::admin::Protocol_DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errDesc);
	}
}

/*static*/ void dbm::admin::Protocol_DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG
//=================================================================

dbm::admin::Protocol_DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG::Protocol_DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG()
{
	clear();
}

void dbm::admin::Protocol_DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG::clear()
{
	userIntId = 0;
	updateType = 0;
	comment.clear();
}

bool dbm::admin::Protocol_DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG::equals(const Protocol_DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG& _o) const
{
	return userIntId == _o.userIntId &&
		updateType == _o.updateType &&
		comment.equals(_o.comment);
}

const char *dbm::admin::Protocol_DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG).append(")");
	_buf.append(',');
	_buf.append("userIntId=");
	_buf.appendUint(userIntId);
	_buf.append(',');
	_buf.append("updateType=");
	_buf.appendInt(updateType);
	_buf.append(',');
	_buf.append("comment=");
	_buf.append(comment);
	return _buf.c_str();
}

void dbm::admin::Protocol_DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(userIntId);
	_msg.composeINT32(updateType);
	_msg.composeString(comment);
}

void dbm::admin::Protocol_DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(userIntId);
	_parser.parseINT32(updateType);
	_parser.parseStringP(comment);
}

/*static*/ void dbm::admin::Protocol_DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 userIntId; _parser.parseUINT32(userIntId);
	AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	INT32 updateType; _parser.parseINT32(updateType);
	AtfValidator::validateInt(_descr, "updateType", updateType, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "comment"); size_t szComment = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "comment", szComment, (USER_COMMENTS_LEN-1), _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG
//=================================================================

dbm::admin::Protocol_DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG::Protocol_DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG()
{
	clear();
}

void dbm::admin::Protocol_DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG::clear()
{
	errCode = 0;
	errDesc.clear();
}

bool dbm::admin::Protocol_DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG::equals(const Protocol_DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG& _o) const
{
	return errCode == _o.errCode &&
		errDesc.equals(_o.errDesc);
}

const char *dbm::admin::Protocol_DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
	}
	return _buf.c_str();
}

void dbm::admin::Protocol_DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errDesc);
	}
}

void dbm::admin::Protocol_DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errDesc);
	}
}

/*static*/ void dbm::admin::Protocol_DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    RelatedUsers
//=================================================================

dbm::ArchiveManager::RelatedUsers::RelatedUsers()
{
	clear();
}

void dbm::ArchiveManager::RelatedUsers::clear()
{
	groupId.clear();
	severity = 0;
	userWhen.setNull();
	userComment.clear();
	otherIntId = 0;
	otherUserId.clear();
	otherWhen.setNull();
	otherComment.clear();
	otherAdminIntId = 0;
}

bool dbm::ArchiveManager::RelatedUsers::equals(const RelatedUsers& _o) const
{
	return groupId.equals(_o.groupId) &&
		severity == _o.severity &&
		userWhen.equals(_o.userWhen) &&
		userComment.equals(_o.userComment) &&
		otherIntId == _o.otherIntId &&
		otherUserId.equals(_o.otherUserId) &&
		otherWhen.equals(_o.otherWhen) &&
		otherComment.equals(_o.otherComment) &&
		otherAdminIntId == _o.otherAdminIntId;
}

const char *dbm::ArchiveManager::RelatedUsers::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("groupId=");
	_buf.append(groupId);
	_buf.append(',');
	_buf.append("severity=");
	_buf.appendUint(severity);
	_buf.append(',');
	_buf.append("userWhen=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, userWhen);
	_buf.append(',');
	_buf.append("userComment=");
	_buf.append(userComment);
	_buf.append(',');
	_buf.append("otherIntId=");
	_buf.appendUint(otherIntId);
	_buf.append(',');
	_buf.append("otherUserId=");
	_buf.append(otherUserId);
	_buf.append(',');
	_buf.append("otherWhen=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, otherWhen);
	_buf.append(',');
	_buf.append("otherComment=");
	_buf.append(otherComment);
	_buf.append(',');
	_buf.append("otherAdminIntId=");
	_buf.appendUint(otherAdminIntId);
	_buf.append('}');
	return _buf.c_str();
}

void dbm::ArchiveManager::RelatedUsers::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(RelatedUsers())) // not empty
	{
		_body.composeString(groupId);
		_body.composeUINT32(severity);
		_body.composeSrvTime(userWhen);
		_body.composeString(userComment);
		_body.composeUINT32(otherIntId);
		_body.composeString(otherUserId);
		_body.composeSrvTime(otherWhen);
		_body.composeString(otherComment);
		_body.composeUINT32(otherAdminIntId);
	}

	_msg.composeMsgBody(_body);
}

void dbm::ArchiveManager::RelatedUsers::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(groupId);
	_parser0.parseUINT32(severity);
	_parser0.parseSrvTime(userWhen);
	_parser0.parseStringP(userComment);
	_parser0.parseUINT32(otherIntId);
	_parser0.parseStringP(otherUserId);
	_parser0.parseSrvTime(otherWhen);
	_parser0.parseStringP(otherComment);
	_parser0.parseUINT32(otherAdminIntId);
}

/*static*/ void dbm::ArchiveManager::RelatedUsers::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "groupId"); size_t szGroupId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "groupId", szGroupId, _checker, __FILE__, __LINE__);
	UINT32 severity; _parser0.parseUINT32(severity);
	AtfValidator::validateInt(_descr, "severity", severity, _checker, __FILE__, __LINE__);
	CommSrvTime userWhen; _parser0.parseSrvTime(userWhen);
	AtfValidator::validateSrvDateTime(_descr, "userWhen", userWhen, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "userComment"); size_t szUserComment = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userComment", szUserComment, _checker, __FILE__, __LINE__);
	UINT32 otherIntId; _parser0.parseUINT32(otherIntId);
	AtfValidator::validateInt(_descr, "otherIntId", otherIntId, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "otherUserId"); size_t szOtherUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "otherUserId", szOtherUserId, _checker, __FILE__, __LINE__);
	CommSrvTime otherWhen; _parser0.parseSrvTime(otherWhen);
	AtfValidator::validateSrvDateTime(_descr, "otherWhen", otherWhen, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "otherComment"); size_t szOtherComment = strlen(_dummy);
	AtfValidator::validateInt(_descr, "otherComment", szOtherComment, _checker, __FILE__, __LINE__);
	UINT32 otherAdminIntId; _parser0.parseUINT32(otherAdminIntId);
	AtfValidator::validateInt(_descr, "otherAdminIntId", otherAdminIntId, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_DBM_Q_ARCH_GET_RELATEDUSERS
//=================================================================

dbm::ArchiveManager::Protocol_DBM_Q_ARCH_GET_RELATEDUSERS::Protocol_DBM_Q_ARCH_GET_RELATEDUSERS()
{
	clear();
}

void dbm::ArchiveManager::Protocol_DBM_Q_ARCH_GET_RELATEDUSERS::clear()
{
	userId.clear();
}

bool dbm::ArchiveManager::Protocol_DBM_Q_ARCH_GET_RELATEDUSERS::equals(const Protocol_DBM_Q_ARCH_GET_RELATEDUSERS& _o) const
{
	return userId.equals(_o.userId);
}

const char *dbm::ArchiveManager::Protocol_DBM_Q_ARCH_GET_RELATEDUSERS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_ARCH_GET_RELATEDUSERS).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	return _buf.c_str();
}

void dbm::ArchiveManager::Protocol_DBM_Q_ARCH_GET_RELATEDUSERS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId);
}

void dbm::ArchiveManager::Protocol_DBM_Q_ARCH_GET_RELATEDUSERS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
}

/*static*/ void dbm::ArchiveManager::Protocol_DBM_Q_ARCH_GET_RELATEDUSERS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "DBM_Q_ARCH_GET_RELATEDUSERS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_DBM_A_ARCH_GET_RELATEDUSERS
//=================================================================

dbm::ArchiveManager::Protocol_DBM_A_ARCH_GET_RELATEDUSERS::Protocol_DBM_A_ARCH_GET_RELATEDUSERS()
{
	clear();
}

void dbm::ArchiveManager::Protocol_DBM_A_ARCH_GET_RELATEDUSERS::clear()
{
	errCode = 0;
	relatedUsers.clear();
	errString.clear();
}

bool dbm::ArchiveManager::Protocol_DBM_A_ARCH_GET_RELATEDUSERS::equals(const Protocol_DBM_A_ARCH_GET_RELATEDUSERS& _o) const
{
	return errCode == _o.errCode &&
		relatedUsers.equals(_o.relatedUsers) &&
		errString.equals(_o.errString);
}

const char *dbm::ArchiveManager::Protocol_DBM_A_ARCH_GET_RELATEDUSERS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_ARCH_GET_RELATEDUSERS).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode == 0)
	{
		_buf.append(',');
		_buf.append("relatedUsers=");
		relatedUsers.toTraceString(_buf);
	}
	else
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void dbm::ArchiveManager::Protocol_DBM_A_ARCH_GET_RELATEDUSERS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode == 0)
	{
		relatedUsers.composeMsg(_msg);
	}
	else
	{
		_msg.composeString(errString);
	}
}

void dbm::ArchiveManager::Protocol_DBM_A_ARCH_GET_RELATEDUSERS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode == 0)
	{
		relatedUsers.parseMsg(_parser);
	}
	else
	{
		_parser.parseStringP(errString);
	}
}

/*static*/ void dbm::ArchiveManager::Protocol_DBM_A_ARCH_GET_RELATEDUSERS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "DBM_A_ARCH_GET_RELATEDUSERS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if(errCode == 0)
	{
		PString _descbuf;
		int szRelatedUsers = ThinAtf::LAtfVector< RelatedUsers, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("relatedUsers"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "relatedUsers", szRelatedUsers, _checker, __FILE__, __LINE__);
	}
	else
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS
//=================================================================

dbm::ArchiveManager::Protocol_DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS::Protocol_DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS()
{
	clear();
}

void dbm::ArchiveManager::Protocol_DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS::clear()
{
	userIntId = 0;
	userId.clear();
	relatedUsers.clear();
}

bool dbm::ArchiveManager::Protocol_DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS::equals(const Protocol_DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS& _o) const
{
	return userIntId == _o.userIntId &&
		userId.equals(_o.userId) &&
		relatedUsers.equals(_o.relatedUsers);
}

const char *dbm::ArchiveManager::Protocol_DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS).append(")");
	_buf.append(',');
	_buf.append("userIntId=");
	_buf.appendUint(userIntId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("relatedUsers=");
	relatedUsers.toTraceString(_buf);
	return _buf.c_str();
}

void dbm::ArchiveManager::Protocol_DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(userIntId);
	_msg.composeString(userId);
	relatedUsers.composeMsg(_msg);
}

void dbm::ArchiveManager::Protocol_DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(userIntId);
	_parser.parseStringP(userId);
	relatedUsers.parseMsg(_parser);
}

/*static*/ void dbm::ArchiveManager::Protocol_DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 userIntId; _parser.parseUINT32(userIntId);
	AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szRelatedUsers = ThinAtf::LAtfVector< RelatedUsers, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("relatedUsers"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "relatedUsers", szRelatedUsers, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_DBM_A_UNARCHIVE_INSERT_RELATEDUSERS
//=================================================================

dbm::ArchiveManager::Protocol_DBM_A_UNARCHIVE_INSERT_RELATEDUSERS::Protocol_DBM_A_UNARCHIVE_INSERT_RELATEDUSERS()
{
	clear();
}

void dbm::ArchiveManager::Protocol_DBM_A_UNARCHIVE_INSERT_RELATEDUSERS::clear()
{
	errCode = 0;
	errString.clear();
}

bool dbm::ArchiveManager::Protocol_DBM_A_UNARCHIVE_INSERT_RELATEDUSERS::equals(const Protocol_DBM_A_UNARCHIVE_INSERT_RELATEDUSERS& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *dbm::ArchiveManager::Protocol_DBM_A_UNARCHIVE_INSERT_RELATEDUSERS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_UNARCHIVE_INSERT_RELATEDUSERS).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void dbm::ArchiveManager::Protocol_DBM_A_UNARCHIVE_INSERT_RELATEDUSERS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void dbm::ArchiveManager::Protocol_DBM_A_UNARCHIVE_INSERT_RELATEDUSERS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringP(errString);
	}
}

/*static*/ void dbm::ArchiveManager::Protocol_DBM_A_UNARCHIVE_INSERT_RELATEDUSERS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "DBM_A_UNARCHIVE_INSERT_RELATEDUSERS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_DBM_Q_USER_INFO
//=================================================================

dbm::Protocol_DBM_Q_USER_INFO::Protocol_DBM_Q_USER_INFO()
{
	clear();
}

void dbm::Protocol_DBM_Q_USER_INFO::clear()
{
	userId.clear();
	countryByIp.clear();
	stateByIp.clear();
}

bool dbm::Protocol_DBM_Q_USER_INFO::equals(const Protocol_DBM_Q_USER_INFO& _o) const
{
	return userId.equals(_o.userId) &&
		countryByIp.equals(_o.countryByIp) &&
		stateByIp.equals(_o.stateByIp);
}

const char *dbm::Protocol_DBM_Q_USER_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_USER_INFO).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("countryByIp=");
	_buf.append(countryByIp);
	_buf.append(',');
	_buf.append("stateByIp=");
	_buf.append(stateByIp);
	return _buf.c_str();
}

void dbm::Protocol_DBM_Q_USER_INFO::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId);
	_msg.composeString(countryByIp);
	_msg.composeString(stateByIp);
}

void dbm::Protocol_DBM_Q_USER_INFO::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseStringP(countryByIp);
	_parser.parseStringP(stateByIp);
}

/*static*/ void dbm::Protocol_DBM_Q_USER_INFO::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "DBM_Q_USER_INFO";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "countryByIp"); size_t szCountryByIp = strlen(_dummy);
	AtfValidator::validateInt(_descr, "countryByIp", szCountryByIp, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "stateByIp"); size_t szStateByIp = strlen(_dummy);
	AtfValidator::validateInt(_descr, "stateByIp", szStateByIp, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    P_UserProperty
//=================================================================

dbm::P_UserProperty::P_UserProperty()
{
	clear();
}

void dbm::P_UserProperty::clear()
{
	propType = 0;
	propInt = 0;
	propStr.clear();
	propWhen.setNull();
}

bool dbm::P_UserProperty::equals(const P_UserProperty& _o) const
{
	return propType == _o.propType &&
		propInt == _o.propInt &&
		propStr.equals(_o.propStr) &&
		propWhen.equals(_o.propWhen);
}

const char *dbm::P_UserProperty::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("propType=");
	_buf.appendInt(propType);
	_buf.append(',');
	_buf.append("propInt=");
	_buf.appendInt(propInt);
	_buf.append(',');
	_buf.append("propStr=");
	_buf.append(propStr);
	_buf.append(',');
	_buf.append("propWhen=");
	ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, propWhen);
	_buf.append('}');
	return _buf.c_str();
}

void dbm::P_UserProperty::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(propType);
	_msg.composeINT32(propInt);
	_msg.composeString(propStr);
	_msg.composeSrvTime(propWhen);
}

void dbm::P_UserProperty::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(propType);
	_parser.parseINT32(propInt);
	_parser.parseStringP(propStr);
	_parser.parseSrvTime(propWhen);
}

/*static*/ void dbm::P_UserProperty::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	INT32 propType; _parser.parseINT32(propType);
	AtfValidator::validateInt(_descr, "propType", propType, _checker, __FILE__, __LINE__);
	INT32 propInt; _parser.parseINT32(propInt);
	AtfValidator::validateInt(_descr, "propInt", propInt, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "propStr"); size_t szPropStr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "propStr", szPropStr, _checker, __FILE__, __LINE__);
	SrvTime propWhen; _parser.parseSrvTime(propWhen);
	AtfValidator::validateSrvDateTime(_descr, "propWhen", propWhen, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_DBM_A_USER_INFO
//=================================================================

dbm::Protocol_DBM_A_USER_INFO::Protocol_DBM_A_USER_INFO()
{
	clear();
}

void dbm::Protocol_DBM_A_USER_INFO::clear()
{
	errcode = 0;
	errstr.clear();
	fullName.clear();
	email.clear();
	addr_1.clear();
	addr_2.clear();
	city.clear();
	state.clear();
	country.clear();
	zipCode.clear();
	image.clear();
	privileges = 0;
	correctedUserFlags = 0;
	effectivePrivileges = 0;
	imageIdUser = 0;
	bonus = 0;
	fppToEarn = 0;
	availAmount = 0;
	phone.clear();
	birthDate.setNull();
	privileges2 = 0;
	effectivePrivileges2 = 0;
	daysExclActual = 0;
	srvExclFrom.setNull();
	srvExclUntil.setNull();
	firstName.clear();
	lastName.clear();
	fiscalCode.clear();
	userProps.clear();
	vipCounter1 = 0;
	vipCounter1Cents = 0;
	vipCounter2 = 0;
	vipCounter2Cents = 0;
	correctedUserFlags2 = 0;
	imageId = 0;
	sex.clear();
	mobile.clear();
	addressStateLocked = false;
	registered.setNull();
	promoName.clear();
	blockingCode = 0;
	privileges3 = 0;
	effectivePrivileges3 = 0;
	missedMonths = 0;
	vipStatusUntil.setNull();
	missableMonthsYearly = 0;
	correctedUserFlags3 = 0;
	brandImages.clear();
	hallOfFameLevel = 0;
	licenseId = 0;
}

bool dbm::Protocol_DBM_A_USER_INFO::equals(const Protocol_DBM_A_USER_INFO& _o) const
{
	return errcode == _o.errcode &&
		errstr.equals(_o.errstr) &&
		fullName.equals(_o.fullName) &&
		email.equals(_o.email) &&
		addr_1.equals(_o.addr_1) &&
		addr_2.equals(_o.addr_2) &&
		city.equals(_o.city) &&
		state.equals(_o.state) &&
		country.equals(_o.country) &&
		zipCode.equals(_o.zipCode) &&
		image.size() == _o.image.size() && memcmp(image.ptr(), _o.image.ptr(), image.size()) == 0 &&
		privileges == _o.privileges &&
		correctedUserFlags == _o.correctedUserFlags &&
		effectivePrivileges == _o.effectivePrivileges &&
		imageIdUser == _o.imageIdUser &&
		bonus == _o.bonus &&
		fppToEarn == _o.fppToEarn &&
		availAmount == _o.availAmount &&
		phone.equals(_o.phone) &&
		birthDate.equals(_o.birthDate) &&
		privileges2 == _o.privileges2 &&
		effectivePrivileges2 == _o.effectivePrivileges2 &&
		daysExclActual == _o.daysExclActual &&
		srvExclFrom.equals(_o.srvExclFrom) &&
		srvExclUntil.equals(_o.srvExclUntil) &&
		firstName.equals(_o.firstName) &&
		lastName.equals(_o.lastName) &&
		fiscalCode.equals(_o.fiscalCode) &&
		userProps.equals(_o.userProps) &&
		vipCounter1 == _o.vipCounter1 &&
		vipCounter1Cents == _o.vipCounter1Cents &&
		vipCounter2 == _o.vipCounter2 &&
		vipCounter2Cents == _o.vipCounter2Cents &&
		correctedUserFlags2 == _o.correctedUserFlags2 &&
		imageId == _o.imageId &&
		sex.equals(_o.sex) &&
		mobile.equals(_o.mobile) &&
		addressStateLocked == _o.addressStateLocked &&
		registered.equals(_o.registered) &&
		promoName.equals(_o.promoName) &&
		blockingCode == _o.blockingCode &&
		privileges3 == _o.privileges3 &&
		effectivePrivileges3 == _o.effectivePrivileges3 &&
		missedMonths == _o.missedMonths &&
		vipStatusUntil.equals(_o.vipStatusUntil) &&
		missableMonthsYearly == _o.missableMonthsYearly &&
		correctedUserFlags3 == _o.correctedUserFlags3 &&
		brandImages.equals(_o.brandImages) &&
		hallOfFameLevel == _o.hallOfFameLevel &&
		licenseId == _o.licenseId;
}

const char *dbm::Protocol_DBM_A_USER_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_USER_INFO).append(")");
	_buf.append(',');
	_buf.append("errcode=");
	_buf.appendInt(errcode);
	if( errcode )
	{
		_buf.append(',');
		_buf.append("errstr=");
		_buf.append(errstr);
	}
	else
	{
		_buf.append(',');
		_buf.append("fullName=");
		_buf.append(fullName);
		_buf.append(',');
		_buf.append("email=");
		_buf.append(email);
		_buf.append(',');
		_buf.append("addr_1=");
		_buf.append(addr_1);
		_buf.append(',');
		_buf.append("addr_2=");
		_buf.append(addr_2);
		_buf.append(',');
		_buf.append("city=");
		_buf.append(city);
		_buf.append(',');
		_buf.append("state=");
		_buf.append(state);
		_buf.append(',');
		_buf.append("country=");
		_buf.append(country);
		_buf.append(',');
		_buf.append("zipCode=");
		_buf.append(zipCode);
		_buf.append(',');
		_buf.append("image=");
		ThinAtf::AtfTempl<PBlock>::ToTraceString(_buf, image);
		_buf.append(',');
		_buf.append("privileges=");
		_buf.appendUint(privileges);
		_buf.append(',');
		_buf.append("correctedUserFlags=");
		_buf.appendUint(correctedUserFlags);
		_buf.append(',');
		_buf.append("effectivePrivileges=");
		_buf.appendUint(effectivePrivileges);
		_buf.append(',');
		_buf.append("imageIdUser=");
		_buf.appendUint(imageIdUser);
		_buf.append(',');
		_buf.append("bonus=");
		_buf.appendUint(bonus);
		_buf.append(',');
		_buf.append("fppToEarn=");
		_buf.appendUint(fppToEarn);
		_buf.append(',');
		_buf.append("availAmount=");
		_buf.appendUint(availAmount);
		_buf.append(',');
		_buf.append("phone=");
		_buf.append(phone);
		_buf.append(',');
		_buf.append("birthDate=");
		ThinAtf::AtfTempl<SrvDate>::ToTraceString(_buf, birthDate);
		_buf.append(',');
		_buf.append("privileges2=");
		_buf.appendUint64(privileges2);
		_buf.append(',');
		_buf.append("effectivePrivileges2=");
		_buf.appendUint64(effectivePrivileges2);
		_buf.append(',');
		_buf.append("daysExclActual=");
		_buf.appendUint(daysExclActual);
		_buf.append(',');
		_buf.append("srvExclFrom=");
		ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, srvExclFrom);
		_buf.append(',');
		_buf.append("srvExclUntil=");
		ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, srvExclUntil);
		_buf.append(',');
		_buf.append("firstName=");
		_buf.append(firstName);
		_buf.append(',');
		_buf.append("lastName=");
		_buf.append(lastName);
		_buf.append(',');
		_buf.append("fiscalCode=");
		_buf.append(fiscalCode);
		_buf.append(',');
		_buf.append("userProps=");
		userProps.toTraceString(_buf);
		_buf.append(',');
		_buf.append("vipCounter1=");
		_buf.appendUint(vipCounter1);
		_buf.append(',');
		_buf.append("vipCounter1Cents=");
		_buf.appendUint(vipCounter1Cents);
		_buf.append(',');
		_buf.append("vipCounter2=");
		_buf.appendUint(vipCounter2);
		_buf.append(',');
		_buf.append("vipCounter2Cents=");
		_buf.appendUint(vipCounter2Cents);
		_buf.append(',');
		_buf.append("correctedUserFlags2=");
		_buf.appendUint64(correctedUserFlags2);
		_buf.append(',');
		_buf.append("imageId=");
		_buf.appendUint(imageId);
		_buf.append(',');
		_buf.append("sex=");
		_buf.append(sex);
		_buf.append(',');
		_buf.append("mobile=");
		_buf.append(mobile);
		_buf.append(',');
		_buf.append("addressStateLocked=");
		_buf.appendUint(addressStateLocked);
		_buf.append(',');
		_buf.append("registered=");
		ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, registered);
		_buf.append(',');
		_buf.append("promoName=");
		_buf.append(promoName);
		_buf.append(',');
		_buf.append("blockingCode=");
		_buf.appendUint(blockingCode);
		_buf.append(',');
		_buf.append("privileges3=");
		_buf.appendUint64(privileges3);
		_buf.append(',');
		_buf.append("effectivePrivileges3=");
		_buf.appendUint64(effectivePrivileges3);
		_buf.append(',');
		_buf.append("missedMonths=");
		_buf.appendInt(missedMonths);
		_buf.append(',');
		_buf.append("vipStatusUntil=");
		ThinAtf::AtfTempl<SrvDate>::ToTraceString(_buf, vipStatusUntil);
		_buf.append(',');
		_buf.append("missableMonthsYearly=");
		_buf.appendInt(missableMonthsYearly);
		_buf.append(',');
		_buf.append("correctedUserFlags3=");
		_buf.appendUint64(correctedUserFlags3);
		_buf.append(',');
		_buf.append("brandImages=");
		brandImages.toTraceString(_buf);
		_buf.append(',');
		_buf.append("hallOfFameLevel=");
		_buf.appendUint(hallOfFameLevel);
		_buf.append(',');
		_buf.append("licenseId=");
		_buf.appendUint(licenseId);
	}
	return _buf.c_str();
}

void dbm::Protocol_DBM_A_USER_INFO::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errcode);
	if( errcode )
	{
		_msg.composeString(errstr);
	}
	else
	{
		_msg.composeString(fullName);
		_msg.composeString(email);
		_msg.composeString(addr_1);
		_msg.composeString(addr_2);
		_msg.composeString(city);
		_msg.composeString(state);
		_msg.composeString(country);
		_msg.composeString(zipCode);
		_msg._composeVarBlock(image.ptr(), image.size());
		_msg.composeUINT32(privileges);
		_msg.composeUINT32(correctedUserFlags);
		_msg.composeUINT32(effectivePrivileges);
		_msg.composeUINT32(imageIdUser);
		_msg.composeUINT32(bonus);
		_msg.composeUINT32(fppToEarn);
		_msg.composeUINT32(availAmount);
		_msg.composeString(phone);
		_msg.composeSrvDate(birthDate);
		_msg.composeUINT64(privileges2);
		_msg.composeUINT64(effectivePrivileges2);
		_msg.composeUINT32(daysExclActual);
		_msg.composeSrvTime(srvExclFrom);
		_msg.composeSrvTime(srvExclUntil);
		_msg.composeString(firstName);
		_msg.composeString(lastName);
		_msg.composeString(fiscalCode);
		userProps.composeMsg(_msg);
		_msg.composeUINT32(vipCounter1);
		_msg.composeUINT16(vipCounter1Cents);
		_msg.composeUINT32(vipCounter2);
		_msg.composeUINT16(vipCounter2Cents);
		_msg.composeUINT64(correctedUserFlags2);
		_msg.composeUINT32(imageId);
		_msg.composeString(sex);
		_msg.composeString(mobile);
		_msg.composeBOOL(addressStateLocked);
		_msg.composeSrvTime(registered);
		_msg.composeString(promoName);
		_msg.composeUINT32(blockingCode);
		_msg.composeUINT64(privileges3);
		_msg.composeUINT64(effectivePrivileges3);
		_msg.composeINT8(missedMonths);
		_msg.composeSrvDate(vipStatusUntil);
		_msg.composeINT8(missableMonthsYearly);
		_msg.composeUINT64(correctedUserFlags3);
		brandImages.composeMsg(_msg);
		_msg.composeUINT32(hallOfFameLevel);
		_msg.composeUINT32(licenseId);
	}
}

void dbm::Protocol_DBM_A_USER_INFO::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errcode);
	if( errcode )
	{
		_parser.parseStringP(errstr);
	}
	else
	{
		_parser.parseStringP(fullName);
		_parser.parseStringP(email);
		_parser.parseStringP(addr_1);
		_parser.parseStringP(addr_2);
		_parser.parseStringP(city);
		_parser.parseStringP(state);
		_parser.parseStringP(country);
		_parser.parseStringP(zipCode);
		_parser.parsePBlock(image);
		_parser.parseUINT32(privileges);
		_parser.parseUINT32(correctedUserFlags);
		_parser.parseUINT32(effectivePrivileges);
		_parser.parseUINT32(imageIdUser);
		_parser.parseUINT32(bonus);
		_parser.parseUINT32(fppToEarn);
		_parser.parseUINT32(availAmount);
		_parser.parseStringP(phone);
		_parser.parseSrvDate(birthDate);
		_parser.parseUINT64(privileges2);
		_parser.parseUINT64(effectivePrivileges2);
		_parser.parseUINT32(daysExclActual);
		_parser.parseSrvTime(srvExclFrom);
		_parser.parseSrvTime(srvExclUntil);
		_parser.parseStringP(firstName);
		_parser.parseStringP(lastName);
		_parser.parseStringP(fiscalCode);
		userProps.parseMsg(_parser);
		_parser.parseUINT32(vipCounter1);
		_parser.parseUINT16(vipCounter1Cents);
		_parser.parseUINT32(vipCounter2);
		_parser.parseUINT16(vipCounter2Cents);
		_parser.parseUINT64(correctedUserFlags2);
		_parser.parseUINT32(imageId);
		_parser.parseStringP(sex);
		_parser.parseStringP(mobile);
		_parser.parseBOOL(addressStateLocked);
		_parser.parseSrvTime(registered);
		_parser.parseStringP(promoName);
		_parser.parseUINT32(blockingCode);
		_parser.parseUINT64(privileges3);
		_parser.parseUINT64(effectivePrivileges3);
		_parser.parseINT8(missedMonths);
		_parser.parseSrvDate(vipStatusUntil);
		_parser.parseINT8(missableMonthsYearly);
		_parser.parseUINT64(correctedUserFlags3);
		brandImages.parseMsg(_parser);
		_parser.parseUINT32(hallOfFameLevel);
		_parser.parseUINT32(licenseId);
	}
}

/*static*/ void dbm::Protocol_DBM_A_USER_INFO::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "DBM_A_USER_INFO";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errcode = 0;
	_parser.parseINT16(errcode);
	AtfValidator::validateInt(_descr, "errcode", errcode, _checker, __FILE__, __LINE__);
	if( errcode )
	{
		_parser.parseStringN(_dummy, 0, "errstr"); size_t szErrstr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errstr", szErrstr, _checker, __FILE__, __LINE__);
	}
	else
	{
		_parser.parseStringN(_dummy, 0, "fullName"); size_t szFullName = strlen(_dummy);
		AtfValidator::validateInt(_descr, "fullName", szFullName, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "email"); size_t szEmail = strlen(_dummy);
		AtfValidator::validateInt(_descr, "email", szEmail, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "addr_1"); size_t szAddr_1 = strlen(_dummy);
		AtfValidator::validateInt(_descr, "addr_1", szAddr_1, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "addr_2"); size_t szAddr_2 = strlen(_dummy);
		AtfValidator::validateInt(_descr, "addr_2", szAddr_2, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "city"); size_t szCity = strlen(_dummy);
		AtfValidator::validateInt(_descr, "city", szCity, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "state"); size_t szState = strlen(_dummy);
		AtfValidator::validateInt(_descr, "state", szState, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "country"); size_t szCountry = strlen(_dummy);
		AtfValidator::validateInt(_descr, "country", szCountry, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "zipCode"); size_t szZipCode = strlen(_dummy);
		AtfValidator::validateInt(_descr, "zipCode", szZipCode, _checker, __FILE__, __LINE__);
		const BYTE* image; size_t szImage; _parser._parseVarBlock(image, szImage);  /*image*/
		AtfValidator::validateInt(_descr, "image", szImage, _checker, __FILE__, __LINE__);
		UINT32 privileges; _parser.parseUINT32(privileges);
		AtfValidator::validateInt(_descr, "privileges", privileges, _checker, __FILE__, __LINE__);
		UINT32 correctedUserFlags; _parser.parseUINT32(correctedUserFlags);
		AtfValidator::validateInt(_descr, "correctedUserFlags", correctedUserFlags, _checker, __FILE__, __LINE__);
		UINT32 effectivePrivileges; _parser.parseUINT32(effectivePrivileges);
		AtfValidator::validateInt(_descr, "effectivePrivileges", effectivePrivileges, _checker, __FILE__, __LINE__);
		UINT32 imageIdUser; _parser.parseUINT32(imageIdUser);
		AtfValidator::validateInt(_descr, "imageIdUser", imageIdUser, _checker, __FILE__, __LINE__);
		UINT32 bonus; _parser.parseUINT32(bonus);
		AtfValidator::validateInt(_descr, "bonus", bonus, _checker, __FILE__, __LINE__);
		UINT32 fppToEarn; _parser.parseUINT32(fppToEarn);
		AtfValidator::validateInt(_descr, "fppToEarn", fppToEarn, _checker, __FILE__, __LINE__);
		UINT32 availAmount; _parser.parseUINT32(availAmount);
		AtfValidator::validateInt(_descr, "availAmount", availAmount, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "phone"); size_t szPhone = strlen(_dummy);
		AtfValidator::validateInt(_descr, "phone", szPhone, _checker, __FILE__, __LINE__);
		SrvDate birthDate; _parser.parseSrvDate(birthDate);
		AtfValidator::validateSrvDateTime(_descr, "birthDate", birthDate, _checker, __FILE__, __LINE__);
		UINT64 privileges2; _parser.parseUINT64(privileges2);
		AtfValidator::validateUint(_descr, "privileges2", privileges2, _checker, __FILE__, __LINE__);
		UINT64 effectivePrivileges2; _parser.parseUINT64(effectivePrivileges2);
		AtfValidator::validateUint(_descr, "effectivePrivileges2", effectivePrivileges2, _checker, __FILE__, __LINE__);
		UINT32 daysExclActual; _parser.parseUINT32(daysExclActual);
		AtfValidator::validateInt(_descr, "daysExclActual", daysExclActual, _checker, __FILE__, __LINE__);
		SrvTime srvExclFrom; _parser.parseSrvTime(srvExclFrom);
		AtfValidator::validateSrvDateTime(_descr, "srvExclFrom", srvExclFrom, _checker, __FILE__, __LINE__);
		SrvTime srvExclUntil; _parser.parseSrvTime(srvExclUntil);
		AtfValidator::validateSrvDateTime(_descr, "srvExclUntil", srvExclUntil, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "firstName"); size_t szFirstName = strlen(_dummy);
		AtfValidator::validateInt(_descr, "firstName", szFirstName, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "lastName"); size_t szLastName = strlen(_dummy);
		AtfValidator::validateInt(_descr, "lastName", szLastName, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "fiscalCode"); size_t szFiscalCode = strlen(_dummy);
		AtfValidator::validateInt(_descr, "fiscalCode", szFiscalCode, _checker, __FILE__, __LINE__);
		PString _descbuf;
		int szUserProps = ThinAtf::LAtfVector< P_UserProperty, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("userProps"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "userProps", szUserProps, _checker, __FILE__, __LINE__);
		UINT32 vipCounter1; _parser.parseUINT32(vipCounter1);
		AtfValidator::validateInt(_descr, "vipCounter1", vipCounter1, _checker, __FILE__, __LINE__);
		UINT16 vipCounter1Cents; _parser.parseUINT16(vipCounter1Cents);
		AtfValidator::validateInt(_descr, "vipCounter1Cents", vipCounter1Cents, _checker, __FILE__, __LINE__);
		UINT32 vipCounter2; _parser.parseUINT32(vipCounter2);
		AtfValidator::validateInt(_descr, "vipCounter2", vipCounter2, _checker, __FILE__, __LINE__);
		UINT16 vipCounter2Cents; _parser.parseUINT16(vipCounter2Cents);
		AtfValidator::validateInt(_descr, "vipCounter2Cents", vipCounter2Cents, _checker, __FILE__, __LINE__);
		UINT64 correctedUserFlags2; _parser.parseUINT64(correctedUserFlags2);
		AtfValidator::validateUint(_descr, "correctedUserFlags2", correctedUserFlags2, _checker, __FILE__, __LINE__);
		UINT32 imageId; _parser.parseUINT32(imageId);
		AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "sex"); size_t szSex = strlen(_dummy);
		AtfValidator::validateInt(_descr, "sex", szSex, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "mobile"); size_t szMobile = strlen(_dummy);
		AtfValidator::validateInt(_descr, "mobile", szMobile, _checker, __FILE__, __LINE__);
		bool addressStateLocked; _parser.parseBOOL(addressStateLocked);
		AtfValidator::validateInt(_descr, "addressStateLocked", addressStateLocked, _checker, __FILE__, __LINE__);
		SrvTime registered; _parser.parseSrvTime(registered);
		AtfValidator::validateSrvDateTime(_descr, "registered", registered, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "promoName"); size_t szPromoName = strlen(_dummy);
		AtfValidator::validateInt(_descr, "promoName", szPromoName, _checker, __FILE__, __LINE__);
		UINT32 blockingCode; _parser.parseUINT32(blockingCode);
		AtfValidator::validateInt(_descr, "blockingCode", blockingCode, _checker, __FILE__, __LINE__);
		UINT64 privileges3; _parser.parseUINT64(privileges3);
		AtfValidator::validateUint(_descr, "privileges3", privileges3, _checker, __FILE__, __LINE__);
		UINT64 effectivePrivileges3; _parser.parseUINT64(effectivePrivileges3);
		AtfValidator::validateUint(_descr, "effectivePrivileges3", effectivePrivileges3, _checker, __FILE__, __LINE__);
		INT8 missedMonths; _parser.parseINT8(missedMonths);
		AtfValidator::validateInt(_descr, "missedMonths", missedMonths, _checker, __FILE__, __LINE__);
		SrvDate vipStatusUntil; _parser.parseSrvDate(vipStatusUntil);
		AtfValidator::validateSrvDateTime(_descr, "vipStatusUntil", vipStatusUntil, _checker, __FILE__, __LINE__);
		INT8 missableMonthsYearly; _parser.parseINT8(missableMonthsYearly);
		AtfValidator::validateInt(_descr, "missableMonthsYearly", missableMonthsYearly, _checker, __FILE__, __LINE__);
		UINT64 correctedUserFlags3; _parser.parseUINT64(correctedUserFlags3);
		AtfValidator::validateUint(_descr, "correctedUserFlags3", correctedUserFlags3, _checker, __FILE__, __LINE__);
		BrandProtThin::BrandImageList::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("brandImages"), _fieldsWithUnparsedContent);
		UINT32 hallOfFameLevel; _parser.parseUINT32(hallOfFameLevel);
		AtfValidator::validateInt(_descr, "hallOfFameLevel", hallOfFameLevel, _checker, __FILE__, __LINE__);
		UINT32 licenseId; _parser.parseUINT32(licenseId);
		AtfValidator::validateInt(_descr, "licenseId", licenseId, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool dbm::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, ""))
	{
		switch(_msgId)
		{
			case DBM_A_USER_INFO: Protocol_DBM_A_USER_INFO::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case DBM_Q_USER_INFO: Protocol_DBM_Q_USER_INFO::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "ArchiveManager"))
	{
		switch(_msgId)
		{
			case DBM_A_ARCH_GET_RELATEDUSERS: ArchiveManager::Protocol_DBM_A_ARCH_GET_RELATEDUSERS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case DBM_A_UNARCHIVE_INSERT_RELATEDUSERS: ArchiveManager::Protocol_DBM_A_UNARCHIVE_INSERT_RELATEDUSERS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case DBM_Q_ARCH_GET_RELATEDUSERS: ArchiveManager::Protocol_DBM_Q_ARCH_GET_RELATEDUSERS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS: ArchiveManager::Protocol_DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "admin"))
	{
		switch(_msgId)
		{
			case DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG: admin::Protocol_DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG: admin::Protocol_DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG: admin::Protocol_DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG: admin::Protocol_DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

