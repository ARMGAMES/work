/**
 * brandimgs_thin.cpp
 *
 * This file was auto-generated from brandimgs.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin brandimgs.txt
 */
 
#include "brandimgs_thin.h"

//=================================================================
//                    AvatarImg
//=================================================================

BrandProtThin::AvatarImg::AvatarImg()
{
	clear();
}

void BrandProtThin::AvatarImg::clear()
{
	avatarGameType = 0;
	imageId = 0;
}

bool BrandProtThin::AvatarImg::equals(const AvatarImg& _o) const
{
	return avatarGameType == _o.avatarGameType &&
		imageId == _o.imageId;
}

const char *BrandProtThin::AvatarImg::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("avatarGameType=");
	_buf.appendInt(avatarGameType);
	_buf.append(',');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append('}');
	return _buf.c_str();
}

void BrandProtThin::AvatarImg::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(AvatarImg())) // not empty
	{
		_body.composeINT16(avatarGameType);
		_body.composeUINT32(imageId);
	}

	_msg.composeMsgBody(_body);
}

void BrandProtThin::AvatarImg::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT16(avatarGameType);
	_parser0.parseUINT32(imageId);
}

/*static*/ void BrandProtThin::AvatarImg::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT16 avatarGameType; _parser0.parseINT16(avatarGameType);
	AtfValidator::validateIntMax(_descr, "avatarGameType", avatarGameType, eAvatarGameType_Last, _checker, __FILE__, __LINE__);
	UINT32 imageId; _parser0.parseUINT32(imageId);
	AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    BrandImg
//=================================================================

BrandProtThin::BrandImg::BrandImg()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

BrandProtThin::BrandImg::BrandImg(BrandImg&& _o)
	: brand(std::move(_o.brand))
	, imageId(std::move(_o.imageId))
	, avatars(std::move(_o.avatars))
{
}

BrandProtThin::BrandImg& BrandProtThin::BrandImg::operator=(BrandImg&& _o)
{
	if(this != &_o)
	{
		brand = std::move(_o.brand);
		imageId = std::move(_o.imageId);
		avatars = std::move(_o.avatars);
	}
	return *this;
}

#endif

void BrandProtThin::BrandImg::clear()
{
	brand = 0;
	imageId = 0;
	avatars.clear();
}

bool BrandProtThin::BrandImg::equals(const BrandImg& _o) const
{
	return brand == _o.brand &&
		imageId == _o.imageId &&
		avatars.equals(_o.avatars);
}

const char *BrandProtThin::BrandImg::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("brand=");
	_buf.appendUint(brand);
	_buf.append(',');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append(',');
	_buf.append("avatars=");
	avatars.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void BrandProtThin::BrandImg::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(BrandImg())) // not empty
	{
		_body.composeUINT32(brand);
		_body.composeUINT32(imageId);
		avatars.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void BrandProtThin::BrandImg::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(brand);
	_parser0.parseUINT32(imageId);
	if(_parser0.parseEnded()) return;
	avatars.parseMsg(_parser0);
}

/*static*/ void BrandProtThin::BrandImg::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	UINT32 brand; _parser0.parseUINT32(brand);
	AtfValidator::validateInt(_descr, "brand", brand, _checker, __FILE__, __LINE__);
	UINT32 imageId; _parser0.parseUINT32(imageId);
	AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	PString _descbuf;
	int szAvatars = ThinAtf::LAtfVector< AvatarImg, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("avatars"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "avatars", szAvatars, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    BrandImageList
//=================================================================

// @Override
size_t BrandProtThin::BrandImageList::size() const
{
	return images.size();
}

// @Override
void BrandProtThin::BrandImageList::addOrUpdate(UINT32 brand, UINT32 imageId)
{
	for(size_t i = 0; i < images.size(); ++i)
	{
		if(images[i].brand == brand)
		{
			images[i].imageId = imageId;
			return;
		}
	}

	BrandImg img;
	img.brand = brand;
	img.imageId = imageId;

	images.push_back(img);
}

// @Override
void BrandProtThin::BrandImageList::addAvatar(UINT32 brand, UINT32 avatarGameType, UINT32 imageId)
{
	for(size_t i = 0; i < images.size(); ++i)
	{
		if(images[i].brand == brand)
		{
			AvatarImg avatar;
			avatar.avatarGameType = static_cast< INT16 >( avatarGameType );
			avatar.imageId = imageId;
			images[i].avatars.push_back(avatar);
			return;
		}
	}
	
	BrandImg img;
	img.brand = brand;
	AvatarImg avatar;
	avatar.avatarGameType = static_cast< INT16 >( avatarGameType );
	avatar.imageId = imageId;
	img.avatars.push_back(avatar);
	images.push_back(img);
}

// @Override
UINT32 BrandProtThin::BrandImageList::getAvatar(UINT32 brand, INT16 avatarGameType) const
{
	UINT32 imageId = 0;

	if (avatarGameType != eAvatarGameType_Invalid)
	{
		for (auto&& image : images)
		{
			if (avatarGameType != eAvatarGameType_Undefined)
			{
				if (image.brand == brand)
				{
					for (auto&& avatar : image.avatars)
					{
						if (avatar.avatarGameType == avatarGameType)
							return avatar.imageId;
					}
				}
			}
			else if (image.imageId)
			{
				if (image.brand == brand)
					return image.imageId;

				imageId = image.imageId;
			}
		}
	}

	return imageId;
}

// @Override
void BrandProtThin::BrandImageList::compose(CommMsgBody& msg) const
{
	composeMsg(msg);
}

// @Override
void BrandProtThin::BrandImageList::parse(CommMsgParser& parser)
{
	parseMsg(parser);
}

// @Override
void BrandProtThin::BrandImageList::swap(BrandImageList& other)
{
	images.swap(other.images);
}

// @Override
void BrandProtThin::BrandImageList::composeMsgForPublication(bool hasShowImagePriv, UINT32 pokerStarsImageIdToBePublish, BrandImageList& brandImageList) const
{
	if( hasShowImagePriv )
	{
		if(size() == 0 && pokerStarsImageIdToBePublish != 0)
		{
			brandImageList.clear();
			brandImageList.addOrUpdate(BrandType_PokerStars, pokerStarsImageIdToBePublish);
		}
		else
		{
			
			brandImageList = *this;
		}
	}
	else  
	{
		if(size() == 0)
		{
			brandImageList = *this;
		}
		else
		{
			brandImageList.clear();
			
			
			for(size_t i = 0; i < images.size(); ++i)
			{
				if(images[i].brand == BrandType_FullTilt)
				{
					brandImageList.addOrUpdate(BrandType_FullTilt, images[i].imageId);
					break;
				}
			}
			
			for(size_t i = 0; i < images.size(); ++i)
			{
				auto&& currImg = images[i];
				for (size_t j = 0; j < currImg.avatars.size(); ++j)
				{
					brandImageList.addAvatar(currImg.brand, currImg.avatars[j].avatarGameType, currImg.avatars[j].imageId);
				}
			}
		}
	}		
}

// @Override
void BrandProtThin::BrandImageList::composeMsgForPublication(bool hasShowImagePriv, UINT32 pokerStarsImageIdToBePublish, CommMsgBody& body) const
{
	BrandImageList brandImageList;
	composeMsgForPublication(hasShowImagePriv, pokerStarsImageIdToBePublish, brandImageList);
	brandImageList.composeMsg(body);
}

BrandProtThin::BrandImageList::BrandImageList()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

BrandProtThin::BrandImageList::BrandImageList(BrandImageList&& _o)
	: images(std::move(_o.images))
{
}

BrandProtThin::BrandImageList& BrandProtThin::BrandImageList::operator=(BrandImageList&& _o)
{
	if(this != &_o)
	{
		images = std::move(_o.images);
	}
	return *this;
}

#endif

void BrandProtThin::BrandImageList::clear()
{
	images.clear();
}

bool BrandProtThin::BrandImageList::equals(const BrandImageList& _o) const
{
	return images.equals(_o.images);
}

const char *BrandProtThin::BrandImageList::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("images=");
	images.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void BrandProtThin::BrandImageList::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(BrandImageList())) // not empty
	{
		images.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void BrandProtThin::BrandImageList::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	images.parseMsg(_parser0);
}

/*static*/ void BrandProtThin::BrandImageList::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	int szImages = ThinAtf::LAtfVector< BrandImg , 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("images"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "images", szImages, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

