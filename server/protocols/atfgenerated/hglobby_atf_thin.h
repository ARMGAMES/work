/**
 * hglobby_atf_thin.h
 *
 * This file was auto-generated from hglobby_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin hglobby_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_HGLOBBY_ATF_THIN_H
#define ATF_PROTOCOL_DEFFILE_HGLOBBY_ATF_THIN_H

#include "dbm.h"
#include "homelobbymsgs.h"
#include "HgDbmSharedCli.h"
#include "homeclub.h"
#include "gamedefs.h"
#include "ThinAtfUserDefStructs.h"
#include "Common_atf_thin.h"


namespace hglobby
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	// CLI.lobby_client
	namespace lobby_client
	{
		struct UserId
		{
			// s - userId
			PString userId;

			UserId();
			void clear();
			bool equals(const UserId&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UserId(UserId&&);
			UserId& operator=(UserId&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UserId(const UserId&) = default;
			UserId& operator=(const UserId&) = default;
#endif
#endif
		};

		struct Protocol_HG_CREATE_CLUB
		{
			// ss - clubName,password
			PString clubName;
			PString password;

			Protocol_HG_CREATE_CLUB();
			void clear();
			bool equals(const Protocol_HG_CREATE_CLUB&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CREATE_CLUB; }
			static const char *getMsgIdString() { return "HG_CREATE_CLUB"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CREATE_CLUB(Protocol_HG_CREATE_CLUB&&);
			Protocol_HG_CREATE_CLUB& operator=(Protocol_HG_CREATE_CLUB&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CREATE_CLUB(const Protocol_HG_CREATE_CLUB&) = default;
			Protocol_HG_CREATE_CLUB& operator=(const Protocol_HG_CREATE_CLUB&) = default;
#endif
#endif
		};
		struct Protocol_HG_CREATE_CLUB_REPLY
		{
			// 2[s|4s] - errCode[errDesc|clubId,socialToken]
			INT16 errCode;

			PString errDesc;

			UINT32 clubId;
			PString socialToken;

			Protocol_HG_CREATE_CLUB_REPLY();
			void clear();
			bool equals(const Protocol_HG_CREATE_CLUB_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CREATE_CLUB_REPLY; }
			static const char *getMsgIdString() { return "HG_CREATE_CLUB_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CREATE_CLUB_REPLY(Protocol_HG_CREATE_CLUB_REPLY&&);
			Protocol_HG_CREATE_CLUB_REPLY& operator=(Protocol_HG_CREATE_CLUB_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CREATE_CLUB_REPLY(const Protocol_HG_CREATE_CLUB_REPLY&) = default;
			Protocol_HG_CREATE_CLUB_REPLY& operator=(const Protocol_HG_CREATE_CLUB_REPLY&) = default;
#endif
#endif
		};

		struct HgClubInfo
		{
			// M(4s4444b4) - M(clubId,clubName,nbMembers,roleForUser,memberFlags,ordinal,favoriteClub,clubNameColor)
			UINT32 clubId;
			PString clubName;
			UINT32 nbMembers;
			UINT32 roleForUser;
			UINT32 memberFlags;
			UINT32 ordinal;
			bool favoriteClub;
			UINT32 clubNameColor;

			HgClubInfo();
			void clear();
			bool equals(const HgClubInfo&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			HgClubInfo(HgClubInfo&&);
			HgClubInfo& operator=(HgClubInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			HgClubInfo(const HgClubInfo&) = default;
			HgClubInfo& operator=(const HgClubInfo&) = default;
#endif
#endif
		};
		struct Protocol_HG_GET_USER_CLUBS
		{
			// b - isNewBehavior
			bool isNewBehavior;

			Protocol_HG_GET_USER_CLUBS();
			void clear();
			bool equals(const Protocol_HG_GET_USER_CLUBS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_USER_CLUBS; }
			static const char *getMsgIdString() { return "HG_GET_USER_CLUBS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_USER_CLUBS_REPLY
		{
			// 2[s|4<M(4s4444b4)>] - errCode[errDesc|numClubInfoListForClient<M(clubId,clubName,nbMembers,roleForUser,memberFlags,ordinal,favoriteClub,clubNameColor)>]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< HgClubInfo, 4 > clubInfoListForClient;

			Protocol_HG_GET_USER_CLUBS_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_USER_CLUBS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_USER_CLUBS_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_USER_CLUBS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_USER_CLUBS_REPLY(Protocol_HG_GET_USER_CLUBS_REPLY&&);
			Protocol_HG_GET_USER_CLUBS_REPLY& operator=(Protocol_HG_GET_USER_CLUBS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_USER_CLUBS_REPLY(const Protocol_HG_GET_USER_CLUBS_REPLY&) = default;
			Protocol_HG_GET_USER_CLUBS_REPLY& operator=(const Protocol_HG_GET_USER_CLUBS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_ADD_USER_CLUB
		{
			// 4sss - clubId,clubPassword,comment,notUsedUserId
			UINT32 clubId;
			PString clubPassword;
			PString comment;
			PString notUsedUserId;	// not parsed/used by server

			Protocol_HG_ADD_USER_CLUB();
			void clear();
			bool equals(const Protocol_HG_ADD_USER_CLUB&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_ADD_USER_CLUB; }
			static const char *getMsgIdString() { return "HG_ADD_USER_CLUB"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_ADD_USER_CLUB(Protocol_HG_ADD_USER_CLUB&&);
			Protocol_HG_ADD_USER_CLUB& operator=(Protocol_HG_ADD_USER_CLUB&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_ADD_USER_CLUB(const Protocol_HG_ADD_USER_CLUB&) = default;
			Protocol_HG_ADD_USER_CLUB& operator=(const Protocol_HG_ADD_USER_CLUB&) = default;
#endif
#endif
		};
		struct Protocol_HG_ADD_USER_CLUB_REPLY
		{
			// 2[s|ss] - errCode[errDesc|clubName,socialToken]
			INT16 errCode;

			PString errDesc;

			PString clubName;
			PString socialToken;

			Protocol_HG_ADD_USER_CLUB_REPLY();
			void clear();
			bool equals(const Protocol_HG_ADD_USER_CLUB_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_ADD_USER_CLUB_REPLY; }
			static const char *getMsgIdString() { return "HG_ADD_USER_CLUB_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_ADD_USER_CLUB_REPLY(Protocol_HG_ADD_USER_CLUB_REPLY&&);
			Protocol_HG_ADD_USER_CLUB_REPLY& operator=(Protocol_HG_ADD_USER_CLUB_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_ADD_USER_CLUB_REPLY(const Protocol_HG_ADD_USER_CLUB_REPLY&) = default;
			Protocol_HG_ADD_USER_CLUB_REPLY& operator=(const Protocol_HG_ADD_USER_CLUB_REPLY&) = default;
#endif
#endif
		};

		struct GamesMembershipStatus
		{
			// 4 - status
			UINT32 status;

			GamesMembershipStatus();
			void clear();
			bool equals(const GamesMembershipStatus&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_PLAYERS_BASED_ON_STATUS
		{
			// 44<4> - clubId,numStatuses<status>
			UINT32 clubId;
			ThinAtf::LAtfVector< GamesMembershipStatus, 4 > statuses;

			Protocol_HG_GET_PLAYERS_BASED_ON_STATUS();
			void clear();
			bool equals(const Protocol_HG_GET_PLAYERS_BASED_ON_STATUS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_PLAYERS_BASED_ON_STATUS; }
			static const char *getMsgIdString() { return "HG_GET_PLAYERS_BASED_ON_STATUS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_PLAYERS_BASED_ON_STATUS(Protocol_HG_GET_PLAYERS_BASED_ON_STATUS&&);
			Protocol_HG_GET_PLAYERS_BASED_ON_STATUS& operator=(Protocol_HG_GET_PLAYERS_BASED_ON_STATUS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_PLAYERS_BASED_ON_STATUS(const Protocol_HG_GET_PLAYERS_BASED_ON_STATUS&) = default;
			Protocol_HG_GET_PLAYERS_BASED_ON_STATUS& operator=(const Protocol_HG_GET_PLAYERS_BASED_ON_STATUS&) = default;
#endif
#endif
		};
		struct PlayerListElement
		{
			// M(sss44t4) - M(userId,city,comment,status,role,enrolled,flags)
			PString userId;
			PString city;
			PString comment;
			UINT32 status;
			UINT32 role;
			SrvTime enrolled;
			UINT32 flags;

			PlayerListElement();
			void clear();
			bool equals(const PlayerListElement&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			PlayerListElement(PlayerListElement&&);
			PlayerListElement& operator=(PlayerListElement&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			PlayerListElement(const PlayerListElement&) = default;
			PlayerListElement& operator=(const PlayerListElement&) = default;
#endif
#endif
		};
		struct Protocol_HG_GET_PLAYERS_BASED_ON_STATUS_REPLY
		{
			// 2[s|4<M(sss44t4)>] - errCode[errDesc|numPlayerList<M(userId,city,comment,status,role,enrolled,flags)>]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< PlayerListElement, 4 > playerList;

			Protocol_HG_GET_PLAYERS_BASED_ON_STATUS_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_PLAYERS_BASED_ON_STATUS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_PLAYERS_BASED_ON_STATUS_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_PLAYERS_BASED_ON_STATUS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_PLAYERS_BASED_ON_STATUS_REPLY(Protocol_HG_GET_PLAYERS_BASED_ON_STATUS_REPLY&&);
			Protocol_HG_GET_PLAYERS_BASED_ON_STATUS_REPLY& operator=(Protocol_HG_GET_PLAYERS_BASED_ON_STATUS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_PLAYERS_BASED_ON_STATUS_REPLY(const Protocol_HG_GET_PLAYERS_BASED_ON_STATUS_REPLY&) = default;
			Protocol_HG_GET_PLAYERS_BASED_ON_STATUS_REPLY& operator=(const Protocol_HG_GET_PLAYERS_BASED_ON_STATUS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CHANGE_PLAYERS_STATUS
		{
			// 444<s> - clubId,action,numUsersToChange<userId>
			UINT32 clubId;
			UINT32 action;
			ThinAtf::LAtfVector< UserId, 4 > usersToChange;

			Protocol_HG_CHANGE_PLAYERS_STATUS();
			void clear();
			bool equals(const Protocol_HG_CHANGE_PLAYERS_STATUS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_PLAYERS_STATUS; }
			static const char *getMsgIdString() { return "HG_CHANGE_PLAYERS_STATUS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_PLAYERS_STATUS(Protocol_HG_CHANGE_PLAYERS_STATUS&&);
			Protocol_HG_CHANGE_PLAYERS_STATUS& operator=(Protocol_HG_CHANGE_PLAYERS_STATUS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_PLAYERS_STATUS(const Protocol_HG_CHANGE_PLAYERS_STATUS&) = default;
			Protocol_HG_CHANGE_PLAYERS_STATUS& operator=(const Protocol_HG_CHANGE_PLAYERS_STATUS&) = default;
#endif
#endif
		};
		struct Protocol_HG_CHANGE_PLAYERS_STATUS_REPLY
		{
			// 2[s|s] - errCode[errDesc|socialToken]
			INT16 errCode;

			PString errDesc;

			PString socialToken;

			Protocol_HG_CHANGE_PLAYERS_STATUS_REPLY();
			void clear();
			bool equals(const Protocol_HG_CHANGE_PLAYERS_STATUS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_PLAYERS_STATUS_REPLY; }
			static const char *getMsgIdString() { return "HG_CHANGE_PLAYERS_STATUS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_PLAYERS_STATUS_REPLY(Protocol_HG_CHANGE_PLAYERS_STATUS_REPLY&&);
			Protocol_HG_CHANGE_PLAYERS_STATUS_REPLY& operator=(Protocol_HG_CHANGE_PLAYERS_STATUS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_PLAYERS_STATUS_REPLY(const Protocol_HG_CHANGE_PLAYERS_STATUS_REPLY&) = default;
			Protocol_HG_CHANGE_PLAYERS_STATUS_REPLY& operator=(const Protocol_HG_CHANGE_PLAYERS_STATUS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CHANGE_CLUB_PASSWORD
		{
			// 4s - clubId,password
			UINT32 clubId;
			PString password;

			Protocol_HG_CHANGE_CLUB_PASSWORD();
			void clear();
			bool equals(const Protocol_HG_CHANGE_CLUB_PASSWORD&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_CLUB_PASSWORD; }
			static const char *getMsgIdString() { return "HG_CHANGE_CLUB_PASSWORD"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_CLUB_PASSWORD(Protocol_HG_CHANGE_CLUB_PASSWORD&&);
			Protocol_HG_CHANGE_CLUB_PASSWORD& operator=(Protocol_HG_CHANGE_CLUB_PASSWORD&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_CLUB_PASSWORD(const Protocol_HG_CHANGE_CLUB_PASSWORD&) = default;
			Protocol_HG_CHANGE_CLUB_PASSWORD& operator=(const Protocol_HG_CHANGE_CLUB_PASSWORD&) = default;
#endif
#endif
		};
		struct Protocol_HG_CHANGE_CLUB_PASSWORD_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_CHANGE_CLUB_PASSWORD_REPLY();
			void clear();
			bool equals(const Protocol_HG_CHANGE_CLUB_PASSWORD_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_CLUB_PASSWORD_REPLY; }
			static const char *getMsgIdString() { return "HG_CHANGE_CLUB_PASSWORD_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_CLUB_PASSWORD_REPLY(Protocol_HG_CHANGE_CLUB_PASSWORD_REPLY&&);
			Protocol_HG_CHANGE_CLUB_PASSWORD_REPLY& operator=(Protocol_HG_CHANGE_CLUB_PASSWORD_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_CLUB_PASSWORD_REPLY(const Protocol_HG_CHANGE_CLUB_PASSWORD_REPLY&) = default;
			Protocol_HG_CHANGE_CLUB_PASSWORD_REPLY& operator=(const Protocol_HG_CHANGE_CLUB_PASSWORD_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CHANGE_CLUB_OPTIONS
		{
			// 44bbsb - clubId,seasonLength,showClubStandings,showPlayerStats,currency,showFounderFullName
			UINT32 clubId;
			UINT32 seasonLength;
			bool showClubStandings;
			bool showPlayerStats;
			PString currency;
			bool showFounderFullName;

			Protocol_HG_CHANGE_CLUB_OPTIONS();
			void clear();
			bool equals(const Protocol_HG_CHANGE_CLUB_OPTIONS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_CLUB_OPTIONS; }
			static const char *getMsgIdString() { return "HG_CHANGE_CLUB_OPTIONS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_CLUB_OPTIONS(Protocol_HG_CHANGE_CLUB_OPTIONS&&);
			Protocol_HG_CHANGE_CLUB_OPTIONS& operator=(Protocol_HG_CHANGE_CLUB_OPTIONS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_CLUB_OPTIONS(const Protocol_HG_CHANGE_CLUB_OPTIONS&) = default;
			Protocol_HG_CHANGE_CLUB_OPTIONS& operator=(const Protocol_HG_CHANGE_CLUB_OPTIONS&) = default;
#endif
#endif
		};
		struct Protocol_HG_CHANGE_CLUB_OPTIONS_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_CHANGE_CLUB_OPTIONS_REPLY();
			void clear();
			bool equals(const Protocol_HG_CHANGE_CLUB_OPTIONS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_CLUB_OPTIONS_REPLY; }
			static const char *getMsgIdString() { return "HG_CHANGE_CLUB_OPTIONS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_CLUB_OPTIONS_REPLY(Protocol_HG_CHANGE_CLUB_OPTIONS_REPLY&&);
			Protocol_HG_CHANGE_CLUB_OPTIONS_REPLY& operator=(Protocol_HG_CHANGE_CLUB_OPTIONS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_CLUB_OPTIONS_REPLY(const Protocol_HG_CHANGE_CLUB_OPTIONS_REPLY&) = default;
			Protocol_HG_CHANGE_CLUB_OPTIONS_REPLY& operator=(const Protocol_HG_CHANGE_CLUB_OPTIONS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CHANGE_CLUB_IMAGE
		{
			// 4vb - clubId,image,isHeader
			UINT32 clubId;
			PBlock image;	// 10Mb
			bool isHeader;

			Protocol_HG_CHANGE_CLUB_IMAGE();
			void clear();
			bool equals(const Protocol_HG_CHANGE_CLUB_IMAGE&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_CLUB_IMAGE; }
			static const char *getMsgIdString() { return "HG_CHANGE_CLUB_IMAGE"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_CLUB_IMAGE(Protocol_HG_CHANGE_CLUB_IMAGE&&);
			Protocol_HG_CHANGE_CLUB_IMAGE& operator=(Protocol_HG_CHANGE_CLUB_IMAGE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_CLUB_IMAGE(const Protocol_HG_CHANGE_CLUB_IMAGE&) = default;
			Protocol_HG_CHANGE_CLUB_IMAGE& operator=(const Protocol_HG_CHANGE_CLUB_IMAGE&) = default;
#endif
#endif
		};
		struct Protocol_HG_CHANGE_CLUB_IMAGE_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_CHANGE_CLUB_IMAGE_REPLY();
			void clear();
			bool equals(const Protocol_HG_CHANGE_CLUB_IMAGE_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_CLUB_IMAGE_REPLY; }
			static const char *getMsgIdString() { return "HG_CHANGE_CLUB_IMAGE_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_CLUB_IMAGE_REPLY(Protocol_HG_CHANGE_CLUB_IMAGE_REPLY&&);
			Protocol_HG_CHANGE_CLUB_IMAGE_REPLY& operator=(Protocol_HG_CHANGE_CLUB_IMAGE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_CLUB_IMAGE_REPLY(const Protocol_HG_CHANGE_CLUB_IMAGE_REPLY&) = default;
			Protocol_HG_CHANGE_CLUB_IMAGE_REPLY& operator=(const Protocol_HG_CHANGE_CLUB_IMAGE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_SEASONS
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_GET_CLUB_SEASONS();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_SEASONS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_SEASONS; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_SEASONS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct ClubSeason
		{
			// M(4ttb4s) - M(seasonId,timeFrom,timeTo,closed,seasonType,seasonName)
			UINT32 seasonId;
			SrvTime timeFrom;
			SrvTime timeTo;
			bool closed;
			UINT32 seasonType;
			PString seasonName;

			ClubSeason();
			void clear();
			bool equals(const ClubSeason&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClubSeason(ClubSeason&&);
			ClubSeason& operator=(ClubSeason&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClubSeason(const ClubSeason&) = default;
			ClubSeason& operator=(const ClubSeason&) = default;
#endif
#endif
		};
		struct Protocol_HG_GET_CLUB_SEASONS_REPLY
		{
			// 2[s|4<M(4ttb4s)>] - errCode[errDesc|numSeasons<M(seasonId,timeFrom,timeTo,closed,seasonType,seasonName)>]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< ClubSeason, 4 > seasons;

			Protocol_HG_GET_CLUB_SEASONS_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_SEASONS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_SEASONS_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_SEASONS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_SEASONS_REPLY(Protocol_HG_GET_CLUB_SEASONS_REPLY&&);
			Protocol_HG_GET_CLUB_SEASONS_REPLY& operator=(Protocol_HG_GET_CLUB_SEASONS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_SEASONS_REPLY(const Protocol_HG_GET_CLUB_SEASONS_REPLY&) = default;
			Protocol_HG_GET_CLUB_SEASONS_REPLY& operator=(const Protocol_HG_GET_CLUB_SEASONS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_SEASON_RANKS
		{
			// 44b - clubId,seasonId,isPlayMoney
			UINT32 clubId;
			UINT32 seasonId;
			bool isPlayMoney;

			Protocol_HG_GET_CLUB_SEASON_RANKS();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_SEASON_RANKS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_SEASON_RANKS; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_SEASON_RANKS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct ClubSeasonUserRank
		{
			// M(s844) - M(userId,pointsTotal,gamesPlayed,rank)
			PString userId;
			UINT64 pointsTotal;
			UINT32 gamesPlayed;
			UINT32 rank;

			ClubSeasonUserRank();
			void clear();
			bool equals(const ClubSeasonUserRank&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClubSeasonUserRank(ClubSeasonUserRank&&);
			ClubSeasonUserRank& operator=(ClubSeasonUserRank&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClubSeasonUserRank(const ClubSeasonUserRank&) = default;
			ClubSeasonUserRank& operator=(const ClubSeasonUserRank&) = default;
#endif
#endif
		};
		struct Protocol_HG_GET_CLUB_SEASON_RANKS_REPLY
		{
			// 2[s|4<M(s844)>] - errCode[errDesc|numRanks<M(userId,pointsTotal,gamesPlayed,rank)>]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< ClubSeasonUserRank, 4 > ranks;

			Protocol_HG_GET_CLUB_SEASON_RANKS_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_SEASON_RANKS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_SEASON_RANKS_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_SEASON_RANKS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_SEASON_RANKS_REPLY(Protocol_HG_GET_CLUB_SEASON_RANKS_REPLY&&);
			Protocol_HG_GET_CLUB_SEASON_RANKS_REPLY& operator=(Protocol_HG_GET_CLUB_SEASON_RANKS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_SEASON_RANKS_REPLY(const Protocol_HG_GET_CLUB_SEASON_RANKS_REPLY&) = default;
			Protocol_HG_GET_CLUB_SEASON_RANKS_REPLY& operator=(const Protocol_HG_GET_CLUB_SEASON_RANKS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_SEASON_STATS
		{
			// 44b - clubId,seasonId,isPlayMoney
			UINT32 clubId;
			UINT32 seasonId;
			bool isPlayMoney;

			Protocol_HG_GET_CLUB_SEASON_STATS();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_SEASON_STATS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_SEASON_STATS; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_SEASON_STATS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct ClubSeasonUserStats
		{
			// M(ss4444444448444444t) - M(userId,userCity,userAvatar,qualifiedGames,bestTournPlace,bestTournPlaceTo,playersInbestTourn,worstTournPlace,worstTournPlaceTo,playersInWorstTourn,inTheMoney,points,goldFinishes,silverFinishes,bronzeFinishes,averagePlace,rank,knockouts,memberFrom)
			PString userId;
			PString userCity;
			UINT32 userAvatar;
			UINT32 qualifiedGames;
			UINT32 bestTournPlace;
			UINT32 bestTournPlaceTo;
			UINT32 playersInbestTourn;
			UINT32 worstTournPlace;
			UINT32 worstTournPlaceTo;
			UINT32 playersInWorstTourn;
			UINT32 inTheMoney;
			UINT64 points;
			UINT32 goldFinishes;
			UINT32 silverFinishes;
			UINT32 bronzeFinishes;
			UINT32 averagePlace;
			UINT32 rank;
			UINT32 knockouts;
			SrvTime memberFrom;

			ClubSeasonUserStats();
			void clear();
			bool equals(const ClubSeasonUserStats&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClubSeasonUserStats(ClubSeasonUserStats&&);
			ClubSeasonUserStats& operator=(ClubSeasonUserStats&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClubSeasonUserStats(const ClubSeasonUserStats&) = default;
			ClubSeasonUserStats& operator=(const ClubSeasonUserStats&) = default;
#endif
#endif
		};
		struct Protocol_HG_GET_CLUB_SEASON_STATS_REPLY
		{
			// 2[s|4<M(ss4444444448444444t)>] - errCode[errDesc|numStats<M(userId,userCity,userAvatar,qualifiedGames,bestTournPlace,bestTournPlaceTo,playersInbestTourn,worstTournPlace,worstTournPlaceTo,playersInWorstTourn,inTheMoney,points,goldFinishes,silverFinishes,bronzeFinishes,averagePlace,rank,knockouts,memberFrom)>]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< ClubSeasonUserStats, 4 > stats;

			Protocol_HG_GET_CLUB_SEASON_STATS_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_SEASON_STATS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_SEASON_STATS_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_SEASON_STATS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_SEASON_STATS_REPLY(Protocol_HG_GET_CLUB_SEASON_STATS_REPLY&&);
			Protocol_HG_GET_CLUB_SEASON_STATS_REPLY& operator=(Protocol_HG_GET_CLUB_SEASON_STATS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_SEASON_STATS_REPLY(const Protocol_HG_GET_CLUB_SEASON_STATS_REPLY&) = default;
			Protocol_HG_GET_CLUB_SEASON_STATS_REPLY& operator=(const Protocol_HG_GET_CLUB_SEASON_STATS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_RECENT_TOURN_SUMMARIES
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_GET_RECENT_TOURN_SUMMARIES();
			void clear();
			bool equals(const Protocol_HG_GET_RECENT_TOURN_SUMMARIES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_RECENT_TOURN_SUMMARIES; }
			static const char *getMsgIdString() { return "HG_GET_RECENT_TOURN_SUMMARIES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct ClubRecentTournamentSummary
		{
			// M(4sstt484b44b4) - M(tournId,tournName,currency,started,closed,numPlayers,prizePool,seasonId,playMoney,rebuys,rebuyRake,countingToStats,scalePM)
			UINT32 tournId;
			PString tournName;
			PString currency;
			SrvTime started;
			SrvTime closed;
			UINT32 numPlayers;
			UINT64 prizePool;
			UINT32 seasonId;
			bool playMoney;
			UINT32 rebuys;
			UINT32 rebuyRake;
			bool countingToStats;
			INT32 scalePM;

			ClubRecentTournamentSummary();
			void clear();
			bool equals(const ClubRecentTournamentSummary&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClubRecentTournamentSummary(ClubRecentTournamentSummary&&);
			ClubRecentTournamentSummary& operator=(ClubRecentTournamentSummary&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClubRecentTournamentSummary(const ClubRecentTournamentSummary&) = default;
			ClubRecentTournamentSummary& operator=(const ClubRecentTournamentSummary&) = default;
#endif
#endif
		};
		struct Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY
		{
			// 2[s|4<M(4sstt484b44b4)>] - errCode[errDesc|numSummaries<M(tournId,tournName,currency,started,closed,numPlayers,prizePool,seasonId,playMoney,rebuys,rebuyRake,countingToStats,scalePM)>]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< ClubRecentTournamentSummary, 4 > summaries;

			Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_RECENT_TOURN_SUMMARIES_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_RECENT_TOURN_SUMMARIES_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY(Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY&&);
			Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY& operator=(Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY(const Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY&) = default;
			Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY& operator=(const Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_RECENT_TOURN_RESULTS
		{
			// 4 - tournId
			UINT32 tournId;

			Protocol_HG_GET_RECENT_TOURN_RESULTS();
			void clear();
			bool equals(const Protocol_HG_GET_RECENT_TOURN_RESULTS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_RECENT_TOURN_RESULTS; }
			static const char *getMsgIdString() { return "HG_GET_RECENT_TOURN_RESULTS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct ClubRecentTournPlayerResult
		{
			// M(4s444444) - M(tournRank,userId,place,placeTo,prize,pointsEarned,knockouts,scalePM)
			UINT32 tournRank;
			PString userId;
			UINT32 place;
			UINT32 placeTo;
			UINT32 prize;
			UINT32 pointsEarned;
			UINT32 knockouts;
			INT32 scalePM;

			ClubRecentTournPlayerResult();
			void clear();
			bool equals(const ClubRecentTournPlayerResult&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClubRecentTournPlayerResult(ClubRecentTournPlayerResult&&);
			ClubRecentTournPlayerResult& operator=(ClubRecentTournPlayerResult&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClubRecentTournPlayerResult(const ClubRecentTournPlayerResult&) = default;
			ClubRecentTournPlayerResult& operator=(const ClubRecentTournPlayerResult&) = default;
#endif
#endif
		};
		struct Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY
		{
			// 2[s|4<M(4s444444)>] - errCode[errDesc|numTournResults<M(tournRank,userId,place,placeTo,prize,pointsEarned,knockouts,scalePM)>]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< ClubRecentTournPlayerResult, 4 > tournResults;

			Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_RECENT_TOURN_RESULTS_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_RECENT_TOURN_RESULTS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY(Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY&&);
			Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY& operator=(Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY(const Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY&) = default;
			Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY& operator=(const Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_SET_CLUB_COLOR
		{
			// 44 - clubId,color
			UINT32 clubId;	// no limit
			UINT32 color;	// no limit

			Protocol_HG_SET_CLUB_COLOR();
			void clear();
			bool equals(const Protocol_HG_SET_CLUB_COLOR&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_SET_CLUB_COLOR; }
			static const char *getMsgIdString() { return "HG_SET_CLUB_COLOR"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_SET_CLUB_COLOR_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_SET_CLUB_COLOR_REPLY();
			void clear();
			bool equals(const Protocol_HG_SET_CLUB_COLOR_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_SET_CLUB_COLOR_REPLY; }
			static const char *getMsgIdString() { return "HG_SET_CLUB_COLOR_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_SET_CLUB_COLOR_REPLY(Protocol_HG_SET_CLUB_COLOR_REPLY&&);
			Protocol_HG_SET_CLUB_COLOR_REPLY& operator=(Protocol_HG_SET_CLUB_COLOR_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_SET_CLUB_COLOR_REPLY(const Protocol_HG_SET_CLUB_COLOR_REPLY&) = default;
			Protocol_HG_SET_CLUB_COLOR_REPLY& operator=(const Protocol_HG_SET_CLUB_COLOR_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CHANGE_CLUB_NAME
		{
			// 4s - clubId,clubName
			UINT32 clubId;
			PString clubName;

			Protocol_HG_CHANGE_CLUB_NAME();
			void clear();
			bool equals(const Protocol_HG_CHANGE_CLUB_NAME&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_CLUB_NAME; }
			static const char *getMsgIdString() { return "HG_CHANGE_CLUB_NAME"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_CLUB_NAME(Protocol_HG_CHANGE_CLUB_NAME&&);
			Protocol_HG_CHANGE_CLUB_NAME& operator=(Protocol_HG_CHANGE_CLUB_NAME&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_CLUB_NAME(const Protocol_HG_CHANGE_CLUB_NAME&) = default;
			Protocol_HG_CHANGE_CLUB_NAME& operator=(const Protocol_HG_CHANGE_CLUB_NAME&) = default;
#endif
#endif
		};
		struct Protocol_HG_CHANGE_CLUB_NAME_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_CHANGE_CLUB_NAME_REPLY();
			void clear();
			bool equals(const Protocol_HG_CHANGE_CLUB_NAME_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_CLUB_NAME_REPLY; }
			static const char *getMsgIdString() { return "HG_CHANGE_CLUB_NAME_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_CLUB_NAME_REPLY(Protocol_HG_CHANGE_CLUB_NAME_REPLY&&);
			Protocol_HG_CHANGE_CLUB_NAME_REPLY& operator=(Protocol_HG_CHANGE_CLUB_NAME_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_CLUB_NAME_REPLY(const Protocol_HG_CHANGE_CLUB_NAME_REPLY&) = default;
			Protocol_HG_CHANGE_CLUB_NAME_REPLY& operator=(const Protocol_HG_CHANGE_CLUB_NAME_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_OPTIONS
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_GET_CLUB_OPTIONS();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_OPTIONS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_OPTIONS; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_OPTIONS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_CLUB_OPTIONS_REPLY
		{
			// 2[s|44bbsb] - errCode[errDesc|clubId,seasonType,showClubStandings,showPlayerStats,currency,showFounderFullName]
			INT16 errCode;

			PString errDesc;

			UINT32 clubId;
			UINT32 seasonType;
			bool showClubStandings;
			bool showPlayerStats;
			PString currency;
			bool showFounderFullName;

			Protocol_HG_GET_CLUB_OPTIONS_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_OPTIONS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_OPTIONS_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_OPTIONS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_OPTIONS_REPLY(Protocol_HG_GET_CLUB_OPTIONS_REPLY&&);
			Protocol_HG_GET_CLUB_OPTIONS_REPLY& operator=(Protocol_HG_GET_CLUB_OPTIONS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_OPTIONS_REPLY(const Protocol_HG_GET_CLUB_OPTIONS_REPLY&) = default;
			Protocol_HG_GET_CLUB_OPTIONS_REPLY& operator=(const Protocol_HG_GET_CLUB_OPTIONS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_TOURN_STRUCTURES
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_GET_CLUB_TOURN_STRUCTURES();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TOURN_STRUCTURES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TOURN_STRUCTURES; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TOURN_STRUCTURES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct GameStructure
		{
			// M(1bs4<1>4<4>4<b>) - M(handType,isHiLo,description,numPotTypes<potTypes>,numTableSizes<tableSizes>,numMoneyTypes<moneyTypes>)
			BYTE handType;
			bool isHiLo;
			PString description;
			ThinAtf::LAtfVector< BYTE, 4 > potTypes;
			ThinAtf::LAtfVector< UINT32, 4 > tableSizes;
			ThinAtf::LAtfVector< bool, 4 > moneyTypes;

			GameStructure();
			void clear();
			bool equals(const GameStructure&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			GameStructure(GameStructure&&);
			GameStructure& operator=(GameStructure&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			GameStructure(const GameStructure&) = default;
			GameStructure& operator=(const GameStructure&) = default;
#endif
#endif
		};
		struct TournBuyIn
		{
			// M(444) - M(buyIn,rake,bounty)
			UINT32 buyIn;
			UINT32 rake;
			UINT32 bounty;

			TournBuyIn();
			void clear();
			bool equals(const TournBuyIn&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		// HG_CLI_VER_2
		struct TournBuyIn2
		{
			// M(4444) - M(buyIn,rake,bounty,scalePM)
			UINT32 buyIn;
			UINT32 rake;
			UINT32 bounty;
			UINT32 scalePM;

			TournBuyIn2();
			void clear();
			bool equals(const TournBuyIn2&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct TournCurrencyBuyIns
		{
			// s4<M(444)> - currency,numTournBuyInBodies<M(buyIn,rake,bounty)>
			PString currency;
			ThinAtf::LAtfVector< TournBuyIn, 4 > tournBuyInBodies;

			TournCurrencyBuyIns();
			void clear();
			bool equals(const TournCurrencyBuyIns&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournCurrencyBuyIns(TournCurrencyBuyIns&&);
			TournCurrencyBuyIns& operator=(TournCurrencyBuyIns&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournCurrencyBuyIns(const TournCurrencyBuyIns&) = default;
			TournCurrencyBuyIns& operator=(const TournCurrencyBuyIns&) = default;
#endif
#endif
		};
		// HG_CLI_VER_2
		struct TournCurrencyBuyIns2
		{
			// s4<M(4444)> - currency,numTournBuyInBodies<M(buyIn,rake,bounty,scalePM)>
			PString currency;
			ThinAtf::LAtfVector< TournBuyIn2, 4 > tournBuyInBodies;

			TournCurrencyBuyIns2();
			void clear();
			bool equals(const TournCurrencyBuyIns2&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournCurrencyBuyIns2(TournCurrencyBuyIns2&&);
			TournCurrencyBuyIns2& operator=(TournCurrencyBuyIns2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournCurrencyBuyIns2(const TournCurrencyBuyIns2&) = default;
			TournCurrencyBuyIns2& operator=(const TournCurrencyBuyIns2&) = default;
#endif
#endif
		};
		// HG_CLI_VER_1
		struct Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY
		{
			// 2[s|444<b>4<b>4<4>4<4>4<4>4<4>4<M(1bs4<1>4<4>4<b>)>4<M(444)>4<s4<M(444)>>b4] - errCode[errDesc|tournKnockoutPrize,tournMaxPlayers,numTournFastDealing<tournFastDealing>,numTournSyncBreaks<tournSyncBreaks>,numTournPayouts<tournPayouts>,numTournStartingChips<tournStartingChips>,numTournLevelLengths<tournLevelLengths>,numTournFormats<tournFormats>,numGameStructures<M(handType,isHiLo,description,numPotTypes<potTypes>,numTableSizes<tableSizes>,numMoneyTypes<moneyTypes>)>,numTournBuyInsPM<M(buyIn,rake,bounty)>,numCurrencyBuyIns<currency,numTournBuyInBodies<M(buyIn,rake,bounty)>>,isVoiceEnabled,numMaxDaysForTournCreation]
			INT16 errCode;

			PString errDesc;

			UINT32 tournKnockoutPrize;
			UINT32 tournMaxPlayers;
			ThinAtf::LAtfVector< bool, 4 > tournFastDealing;
			ThinAtf::LAtfVector< bool, 4 > tournSyncBreaks;
			ThinAtf::LAtfVector< UINT32, 4 > tournPayouts;
			ThinAtf::LAtfVector< UINT32, 4 > tournStartingChips;
			ThinAtf::LAtfVector< UINT32, 4 > tournLevelLengths;
			ThinAtf::LAtfVector< UINT32, 4 > tournFormats;

			ThinAtf::LAtfVector< GameStructure, 4 > gameStructures;
			ThinAtf::LAtfVector< TournBuyIn, 4 > tournBuyInsPM;
			ThinAtf::LAtfVector< TournCurrencyBuyIns, 4 > currencyBuyIns;
			bool isVoiceEnabled;

			UINT32 numMaxDaysForTournCreation;

			Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TOURN_STRUCTURES_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TOURN_STRUCTURES_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY(Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY&&);
			Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY& operator=(Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY(const Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY&) = default;
			Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY& operator=(const Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_TABLE_STRUCTURES
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_GET_CLUB_TABLE_STRUCTURES();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TABLE_STRUCTURES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TABLE_STRUCTURES; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TABLE_STRUCTURES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct TableParamsStruct
		{
			// b4bbs11444444s4 - isHiLo,tableSize,isFastDealing,isPlayMoney,currency,handType,potStruct,ante,cap,minBuyIn,maxBuyIn,stakesLow,stakesHigh,tableName,scalePM
			bool isHiLo;
			UINT32 tableSize;
			bool isFastDealing;
			bool isPlayMoney;
			PString currency;
			BYTE handType;
			BYTE potStruct;

			UINT32 ante;
			UINT32 cap;
			UINT32 minBuyIn;
			UINT32 maxBuyIn;
			UINT32 stakesLow;
			UINT32 stakesHigh;
			PString tableName;
			INT32 scalePM;

			TableParamsStruct();
			void clear();
			bool equals(const TableParamsStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableParamsStruct(TableParamsStruct&&);
			TableParamsStruct& operator=(TableParamsStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableParamsStruct(const TableParamsStruct&) = default;
			TableParamsStruct& operator=(const TableParamsStruct&) = default;
#endif
#endif
		};
		struct TableParams
		{
			// M(b4bbs11444444s4) - M(isHiLo,tableSize,isFastDealing,isPlayMoney,currency,handType,potStruct,ante,cap,minBuyIn,maxBuyIn,stakesLow,stakesHigh,tableName,scalePM)
			TableParamsStruct tableParamsStruct;

			TableParams();
			void clear();
			bool equals(const TableParams&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TableParams(TableParams&&);
			TableParams& operator=(TableParams&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TableParams(const TableParams&) = default;
			TableParams& operator=(const TableParams&) = default;
#endif
#endif
		};
		struct Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY
		{
			// 2[s|4<M(b4bbs11444444s4)>b] - errCode[errDesc|numTableParams<M(isHiLo,tableSize,isFastDealing,isPlayMoney,currency,handType,potStruct,ante,cap,minBuyIn,maxBuyIn,stakesLow,stakesHigh,tableName,scalePM)>,isVoceEnabled]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< TableParams, 4 > tableParams;
			bool isVoceEnabled;

			Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TABLE_STRUCTURES_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TABLE_STRUCTURES_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY(Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY&&);
			Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY& operator=(Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY(const Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY&) = default;
			Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY& operator=(const Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY&) = default;
#endif
#endif
		};

		struct CreateTournParams
		{
			// 4ssbb4bbs114b444444211114 - clubId,tournamentLobbyText,gameName,countTowardsClubStandings,isHiLo,tableSize,isFastDealing,isPlayMoney,currency,handType,potStruct,buyIn,isSyncBreaksOn,tournFormat,payout,startingChips,levelLength,tournKnockoutPrize,tournMaxPlayers,year,month,day,hour,minute,scalePM
			UINT32 clubId;
			PString tournamentLobbyText;
			PString gameName;
			bool countTowardsClubStandings;

			bool isHiLo;
			UINT32 tableSize;
			bool isFastDealing;
			bool isPlayMoney;
			PString currency;
			BYTE handType;
			BYTE potStruct;

			UINT32 buyIn;
			bool isSyncBreaksOn;
			UINT32 tournFormat;
			UINT32 payout;
			UINT32 startingChips;
			UINT32 levelLength;
			UINT32 tournKnockoutPrize;
			UINT32 tournMaxPlayers;
			UINT16 year;
			BYTE month;
			BYTE day;
			BYTE hour;
			BYTE minute;
			INT32 scalePM;

			CreateTournParams();
			void clear();
			bool equals(const CreateTournParams&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			CreateTournParams(CreateTournParams&&);
			CreateTournParams& operator=(CreateTournParams&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			CreateTournParams(const CreateTournParams&) = default;
			CreateTournParams& operator=(const CreateTournParams&) = default;
#endif
#endif
		};
		struct Protocol_HG_CREATE_CLUB_TOURN
		{
			//! 4ssbb4bbs114b44444421111444d <FIXME_COND_IF> M(4b) <FIXME_COND_ELSE> M(44) <FIXME_COND_ELSE> M(1144) <FIXME_COND_ENDIF> 4 - clubId,tournamentLobbyText,gameName,countTowardsClubStandings,isHiLo,tableSize,isFastDealing,isPlayMoney,currency,handType,potStruct,buyIn,isSyncBreaksOn,tournFormat,payout,startingChips,levelLength,tournKnockoutPrize,tournMaxPlayers,year,month,day,hour,minute,scalePM,recurringPatternType,nbOccurences,endDate <FIXME_COND_IF> ,M(numberOfDays,everyWeekday) <FIXME_COND_ELSE> ,M(numberOfWeeks,recurringDays) <FIXME_COND_ELSE> ,M(dayOfMonth,numberMonths,whichRecurringDay,recurringDay) <FIXME_COND_ENDIF> ,nbConsecutiveCancellation
			CreateTournParams createTournParams;
			UINT32 recurringPatternType;
			UINT32 nbOccurences;
			SrvDate endDate;	// no limit

			UINT32 numberOfDays;
			bool everyWeekday;

			UINT32 numberOfWeeks;
			UINT32 recurringDays;

			BYTE dayOfMonth;	// can be 0
			BYTE numberMonths;
			UINT32 whichRecurringDay;
			UINT32 recurringDay;

			UINT32 nbConsecutiveCancellation;

			Protocol_HG_CREATE_CLUB_TOURN();
			void clear();
			bool equals(const Protocol_HG_CREATE_CLUB_TOURN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CREATE_CLUB_TOURN; }
			static const char *getMsgIdString() { return "HG_CREATE_CLUB_TOURN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CREATE_CLUB_TOURN(Protocol_HG_CREATE_CLUB_TOURN&&);
			Protocol_HG_CREATE_CLUB_TOURN& operator=(Protocol_HG_CREATE_CLUB_TOURN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CREATE_CLUB_TOURN(const Protocol_HG_CREATE_CLUB_TOURN&) = default;
			Protocol_HG_CREATE_CLUB_TOURN& operator=(const Protocol_HG_CREATE_CLUB_TOURN&) = default;
#endif
#endif

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody1(CommMsgParser& _parser);
			static void validateAnonymousMsgBody1(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody2(CommMsgParser& _parser);
			static void validateAnonymousMsgBody2(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_CREATE_CLUB_TOURN_REPLY
		{
			// 2[s|s4s] - errCode[errDesc|socialToken,tournId,restartWarning]
			INT16 errCode;

			PString errDesc;

			PString socialToken;
			UINT32 tournId;
			PString restartWarning;

			Protocol_HG_CREATE_CLUB_TOURN_REPLY();
			void clear();
			bool equals(const Protocol_HG_CREATE_CLUB_TOURN_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CREATE_CLUB_TOURN_REPLY; }
			static const char *getMsgIdString() { return "HG_CREATE_CLUB_TOURN_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CREATE_CLUB_TOURN_REPLY(Protocol_HG_CREATE_CLUB_TOURN_REPLY&&);
			Protocol_HG_CREATE_CLUB_TOURN_REPLY& operator=(Protocol_HG_CREATE_CLUB_TOURN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CREATE_CLUB_TOURN_REPLY(const Protocol_HG_CREATE_CLUB_TOURN_REPLY&) = default;
			Protocol_HG_CREATE_CLUB_TOURN_REPLY& operator=(const Protocol_HG_CREATE_CLUB_TOURN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CREATE_CLUB_TABLE
		{
			// 4b4bbs11444444s4b - clubId,isHiLo,tableSize,isFastDealing,isPlayMoney,currency,handType,potStruct,ante,cap,minBuyIn,maxBuyIn,stakesLow,stakesHigh,tableName,scalePM,voiceEnabled
			UINT32 clubId;
			TableParamsStruct tableParamsStruct;
			bool voiceEnabled;

			Protocol_HG_CREATE_CLUB_TABLE();
			void clear();
			bool equals(const Protocol_HG_CREATE_CLUB_TABLE&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CREATE_CLUB_TABLE; }
			static const char *getMsgIdString() { return "HG_CREATE_CLUB_TABLE"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CREATE_CLUB_TABLE(Protocol_HG_CREATE_CLUB_TABLE&&);
			Protocol_HG_CREATE_CLUB_TABLE& operator=(Protocol_HG_CREATE_CLUB_TABLE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CREATE_CLUB_TABLE(const Protocol_HG_CREATE_CLUB_TABLE&) = default;
			Protocol_HG_CREATE_CLUB_TABLE& operator=(const Protocol_HG_CREATE_CLUB_TABLE&) = default;
#endif
#endif
		};
		struct Protocol_HG_CREATE_CLUB_TABLE_REPLY
		{
			// 2[s|s4s8] - errCode[errDesc|socialToken,tableId32,restartWarning,tableId]
			INT16 errCode;

			PString errDesc;

			PString socialToken;
			UINT32 tableId32;
			PString restartWarning;
			UINT64 tableId;

			Protocol_HG_CREATE_CLUB_TABLE_REPLY();
			void clear();
			bool equals(const Protocol_HG_CREATE_CLUB_TABLE_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CREATE_CLUB_TABLE_REPLY; }
			static const char *getMsgIdString() { return "HG_CREATE_CLUB_TABLE_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CREATE_CLUB_TABLE_REPLY(Protocol_HG_CREATE_CLUB_TABLE_REPLY&&);
			Protocol_HG_CREATE_CLUB_TABLE_REPLY& operator=(Protocol_HG_CREATE_CLUB_TABLE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CREATE_CLUB_TABLE_REPLY(const Protocol_HG_CREATE_CLUB_TABLE_REPLY&) = default;
			Protocol_HG_CREATE_CLUB_TABLE_REPLY& operator=(const Protocol_HG_CREATE_CLUB_TABLE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_UPDATE_MEMBERSHIP_FLAGS
		{
			// 4s44 - clubId,userId,flags,mask
			UINT32 clubId;
			PString userId;
			UINT32 flags;
			UINT32 mask;

			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS();
			void clear();
			bool equals(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_UPDATE_MEMBERSHIP_FLAGS; }
			static const char *getMsgIdString() { return "HG_UPDATE_MEMBERSHIP_FLAGS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS(Protocol_HG_UPDATE_MEMBERSHIP_FLAGS&&);
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS& operator=(Protocol_HG_UPDATE_MEMBERSHIP_FLAGS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS&) = default;
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS& operator=(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS&) = default;
#endif
#endif
		};
		struct Protocol_HG_UPDATE_MEMBERSHIP_FLAGS_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS_REPLY();
			void clear();
			bool equals(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_UPDATE_MEMBERSHIP_FLAGS_REPLY; }
			static const char *getMsgIdString() { return "HG_UPDATE_MEMBERSHIP_FLAGS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS_REPLY(Protocol_HG_UPDATE_MEMBERSHIP_FLAGS_REPLY&&);
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS_REPLY& operator=(Protocol_HG_UPDATE_MEMBERSHIP_FLAGS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS_REPLY(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS_REPLY&) = default;
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS_REPLY& operator=(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CANCEL_CLUB_TOURNAMENT
		{
			// 44b - clubId,tournId,cancelRecurrence
			UINT32 clubId;
			UINT32 tournId;
			bool cancelRecurrence;

			Protocol_HG_CANCEL_CLUB_TOURNAMENT();
			void clear();
			bool equals(const Protocol_HG_CANCEL_CLUB_TOURNAMENT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CANCEL_CLUB_TOURNAMENT; }
			static const char *getMsgIdString() { return "HG_CANCEL_CLUB_TOURNAMENT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_CANCEL_CLUB_TOURNAMENT_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_CANCEL_CLUB_TOURNAMENT_REPLY();
			void clear();
			bool equals(const Protocol_HG_CANCEL_CLUB_TOURNAMENT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CANCEL_CLUB_TOURNAMENT_REPLY; }
			static const char *getMsgIdString() { return "HG_CANCEL_CLUB_TOURNAMENT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CANCEL_CLUB_TOURNAMENT_REPLY(Protocol_HG_CANCEL_CLUB_TOURNAMENT_REPLY&&);
			Protocol_HG_CANCEL_CLUB_TOURNAMENT_REPLY& operator=(Protocol_HG_CANCEL_CLUB_TOURNAMENT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CANCEL_CLUB_TOURNAMENT_REPLY(const Protocol_HG_CANCEL_CLUB_TOURNAMENT_REPLY&) = default;
			Protocol_HG_CANCEL_CLUB_TOURNAMENT_REPLY& operator=(const Protocol_HG_CANCEL_CLUB_TOURNAMENT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CANCEL_CLUB_TABLE
		{
			// 448 - clubId,tableId32,tableId
			UINT32 clubId;
			UINT32 tableId32;
			UINT64 tableId;

			Protocol_HG_CANCEL_CLUB_TABLE();
			void clear();
			bool equals(const Protocol_HG_CANCEL_CLUB_TABLE&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CANCEL_CLUB_TABLE; }
			static const char *getMsgIdString() { return "HG_CANCEL_CLUB_TABLE"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_CANCEL_CLUB_TABLE_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_CANCEL_CLUB_TABLE_REPLY();
			void clear();
			bool equals(const Protocol_HG_CANCEL_CLUB_TABLE_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CANCEL_CLUB_TABLE_REPLY; }
			static const char *getMsgIdString() { return "HG_CANCEL_CLUB_TABLE_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CANCEL_CLUB_TABLE_REPLY(Protocol_HG_CANCEL_CLUB_TABLE_REPLY&&);
			Protocol_HG_CANCEL_CLUB_TABLE_REPLY& operator=(Protocol_HG_CANCEL_CLUB_TABLE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CANCEL_CLUB_TABLE_REPLY(const Protocol_HG_CANCEL_CLUB_TABLE_REPLY&) = default;
			Protocol_HG_CANCEL_CLUB_TABLE_REPLY& operator=(const Protocol_HG_CANCEL_CLUB_TABLE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_TRANSLATE_SOCIAL_EVENT
		{
			// s - socialEventToken
			PString socialEventToken;

			Protocol_HG_TRANSLATE_SOCIAL_EVENT();
			void clear();
			bool equals(const Protocol_HG_TRANSLATE_SOCIAL_EVENT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_TRANSLATE_SOCIAL_EVENT; }
			static const char *getMsgIdString() { return "HG_TRANSLATE_SOCIAL_EVENT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_TRANSLATE_SOCIAL_EVENT(Protocol_HG_TRANSLATE_SOCIAL_EVENT&&);
			Protocol_HG_TRANSLATE_SOCIAL_EVENT& operator=(Protocol_HG_TRANSLATE_SOCIAL_EVENT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_TRANSLATE_SOCIAL_EVENT(const Protocol_HG_TRANSLATE_SOCIAL_EVENT&) = default;
			Protocol_HG_TRANSLATE_SOCIAL_EVENT& operator=(const Protocol_HG_TRANSLATE_SOCIAL_EVENT&) = default;
#endif
#endif
		};
		struct Protocol_HG_TRANSLATE_SOCIAL_EVENT_REPLY
		{
			// 2[s|s] - errCode[errDesc|encUrl]
			INT16 errCode;

			PString errDesc;

			PString encUrl;

			Protocol_HG_TRANSLATE_SOCIAL_EVENT_REPLY();
			void clear();
			bool equals(const Protocol_HG_TRANSLATE_SOCIAL_EVENT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_TRANSLATE_SOCIAL_EVENT_REPLY; }
			static const char *getMsgIdString() { return "HG_TRANSLATE_SOCIAL_EVENT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_TRANSLATE_SOCIAL_EVENT_REPLY(Protocol_HG_TRANSLATE_SOCIAL_EVENT_REPLY&&);
			Protocol_HG_TRANSLATE_SOCIAL_EVENT_REPLY& operator=(Protocol_HG_TRANSLATE_SOCIAL_EVENT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_TRANSLATE_SOCIAL_EVENT_REPLY(const Protocol_HG_TRANSLATE_SOCIAL_EVENT_REPLY&) = default;
			Protocol_HG_TRANSLATE_SOCIAL_EVENT_REPLY& operator=(const Protocol_HG_TRANSLATE_SOCIAL_EVENT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_TABLE_INFO
		{
			// 4448 - tableId32,tournId,clubId,tableId
			UINT32 tableId32;
			UINT32 tournId;
			UINT32 clubId;
			UINT64 tableId;

			Protocol_HG_GET_CLUB_TABLE_INFO();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TABLE_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TABLE_INFO; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TABLE_INFO"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_CLUB_TABLE_INFO_REPLY
		{
			// 2[s|sss1144] - errCode[errDesc|server,serverObject,clubName,game,maxPlayers,memberRole,memberFlags]
			INT16 errCode;

			PString errDesc;

			PString server;
			PString serverObject;
			PString clubName;
			BYTE game;
			BYTE maxPlayers;
			UINT32 memberRole;
			UINT32 memberFlags;

			Protocol_HG_GET_CLUB_TABLE_INFO_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TABLE_INFO_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TABLE_INFO_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TABLE_INFO_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_TABLE_INFO_REPLY(Protocol_HG_GET_CLUB_TABLE_INFO_REPLY&&);
			Protocol_HG_GET_CLUB_TABLE_INFO_REPLY& operator=(Protocol_HG_GET_CLUB_TABLE_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_TABLE_INFO_REPLY(const Protocol_HG_GET_CLUB_TABLE_INFO_REPLY&) = default;
			Protocol_HG_GET_CLUB_TABLE_INFO_REPLY& operator=(const Protocol_HG_GET_CLUB_TABLE_INFO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_TOURN_INFO
		{
			// 44 - tourId,clubId
			UINT32 tourId;
			UINT32 clubId;

			Protocol_HG_GET_CLUB_TOURN_INFO();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TOURN_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TOURN_INFO; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TOURN_INFO"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_CLUB_TOURN_INFO_REPLY
		{
			// 2[s|sss44] - errCode[errDesc|server,serverObject,clubName,memberRole,memberFlags]
			INT16 errCode;

			PString errDesc;

			PString server;
			PString serverObject;
			PString clubName;
			UINT32 memberRole;
			UINT32 memberFlags;

			Protocol_HG_GET_CLUB_TOURN_INFO_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TOURN_INFO_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TOURN_INFO_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TOURN_INFO_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_TOURN_INFO_REPLY(Protocol_HG_GET_CLUB_TOURN_INFO_REPLY&&);
			Protocol_HG_GET_CLUB_TOURN_INFO_REPLY& operator=(Protocol_HG_GET_CLUB_TOURN_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_TOURN_INFO_REPLY(const Protocol_HG_GET_CLUB_TOURN_INFO_REPLY&) = default;
			Protocol_HG_GET_CLUB_TOURN_INFO_REPLY& operator=(const Protocol_HG_GET_CLUB_TOURN_INFO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_INFO
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_GET_CLUB_INFO();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_INFO; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_INFO"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_CLUB_INFO_REPLY
		{
			// 2[s|sss44sss] - errCode[errDesc|clubName,tablePubName,tournPubName,memberRole,memberFlags,wallPubName,announcePubName,membershipPubName]
			INT16 errCode;

			PString errDesc;

			PString clubName;
			PString tablePubName;
			PString tournPubName;
			UINT32 memberRole;
			UINT32 memberFlags;
			PString wallPubName;
			PString announcePubName;
			PString membershipPubName;

			Protocol_HG_GET_CLUB_INFO_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_INFO_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_INFO_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_INFO_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_INFO_REPLY(Protocol_HG_GET_CLUB_INFO_REPLY&&);
			Protocol_HG_GET_CLUB_INFO_REPLY& operator=(Protocol_HG_GET_CLUB_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_INFO_REPLY(const Protocol_HG_GET_CLUB_INFO_REPLY&) = default;
			Protocol_HG_GET_CLUB_INFO_REPLY& operator=(const Protocol_HG_GET_CLUB_INFO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_SCHEDULED_GAMES
		{

			Protocol_HG_GET_SCHEDULED_GAMES();
			void clear();
			bool equals(const Protocol_HG_GET_SCHEDULED_GAMES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_SCHEDULED_GAMES; }
			static const char *getMsgIdString() { return "HG_GET_SCHEDULED_GAMES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct ScheduledTourn
		{
			// M(t4s4s1b4444b1sb44ss44) - M(startTime,clubId,clubName,tournId,tournName,gameType,isHiLo,buyin,rake,knockoutBounty,numPlayers,isRegistered,limit,currency,isPlayMoney,maxPlayers,tournState,server,serverObject,flags,scalePM)
			SrvTime startTime;
			UINT32 clubId;
			PString clubName;
			UINT32 tournId;
			PString tournName;
			BYTE gameType;
			bool isHiLo;
			UINT32 buyin;
			UINT32 rake;
			UINT32 knockoutBounty;
			UINT32 numPlayers;
			bool isRegistered;
			BYTE limit;
			PString currency;
			bool isPlayMoney;
			UINT32 maxPlayers;
			UINT32 tournState;
			PString server;
			PString serverObject;
			UINT32 flags;
			UINT32 scalePM;

			ScheduledTourn();
			void clear();
			bool equals(const ScheduledTourn&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ScheduledTourn(ScheduledTourn&&);
			ScheduledTourn& operator=(ScheduledTourn&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ScheduledTourn(const ScheduledTourn&) = default;
			ScheduledTourn& operator=(const ScheduledTourn&) = default;
#endif
#endif
		};
		struct ScheduledRingGame
		{
			// M(4s4s1b44b1sb44s44484) - M(clubId,clubName,tableId32,tableName,gameType,isHiLo,buyin,numPlayers,isSeated,limit,currency,isPlayMoney,lowStake,highStake,tableObject,maxNumPlayers,playersSeated,flags,tableId,scalePM)
			UINT32 clubId;
			PString clubName;
			UINT32 tableId32;
			PString tableName;
			BYTE gameType;
			bool isHiLo;
			UINT32 buyin;
			UINT32 numPlayers;
			bool isSeated;
			BYTE limit;
			PString currency;
			bool isPlayMoney;
			UINT32 lowStake;
			UINT32 highStake;
			PString tableObject;
			UINT32 maxNumPlayers;
			UINT32 playersSeated;
			UINT32 flags;
			UINT64 tableId;
			INT32 scalePM;

			ScheduledRingGame();
			void clear();
			bool equals(const ScheduledRingGame&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ScheduledRingGame(ScheduledRingGame&&);
			ScheduledRingGame& operator=(ScheduledRingGame&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ScheduledRingGame(const ScheduledRingGame&) = default;
			ScheduledRingGame& operator=(const ScheduledRingGame&) = default;
#endif
#endif
		};
		struct Protocol_HG_GET_SCHEDULED_GAMES_REPLY
		{
			// 2[s|4<M(t4s4s1b4444b1sb44ss44)>4<M(4s4s1b44b1sb44s44484)>s] - errCode[errDesc|numTourns<M(startTime,clubId,clubName,tournId,tournName,gameType,isHiLo,buyin,rake,knockoutBounty,numPlayers,isRegistered,limit,currency,isPlayMoney,maxPlayers,tournState,server,serverObject,flags,scalePM)>,numRingGames<M(clubId,clubName,tableId32,tableName,gameType,isHiLo,buyin,numPlayers,isSeated,limit,currency,isPlayMoney,lowStake,highStake,tableObject,maxNumPlayers,playersSeated,flags,tableId,scalePM)>,msgBoard]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< ScheduledTourn, 4 > tourns;
			ThinAtf::LAtfVector< ScheduledRingGame, 4 > ringGames;
			PString msgBoard;

			Protocol_HG_GET_SCHEDULED_GAMES_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_SCHEDULED_GAMES_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_SCHEDULED_GAMES_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_SCHEDULED_GAMES_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_SCHEDULED_GAMES_REPLY(Protocol_HG_GET_SCHEDULED_GAMES_REPLY&&);
			Protocol_HG_GET_SCHEDULED_GAMES_REPLY& operator=(Protocol_HG_GET_SCHEDULED_GAMES_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_SCHEDULED_GAMES_REPLY(const Protocol_HG_GET_SCHEDULED_GAMES_REPLY&) = default;
			Protocol_HG_GET_SCHEDULED_GAMES_REPLY& operator=(const Protocol_HG_GET_SCHEDULED_GAMES_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_FOUNDER_GET_CLUB_PASSWORD
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_FOUNDER_GET_CLUB_PASSWORD();
			void clear();
			bool equals(const Protocol_HG_FOUNDER_GET_CLUB_PASSWORD&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_FOUNDER_GET_CLUB_PASSWORD; }
			static const char *getMsgIdString() { return "HG_FOUNDER_GET_CLUB_PASSWORD"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_FOUNDER_GET_CLUB_PASSWORD_REPLY
		{
			// 2[s|s] - errCode[errDesc|password]
			INT16 errCode;

			PString errDesc;

			PString password;

			Protocol_HG_FOUNDER_GET_CLUB_PASSWORD_REPLY();
			void clear();
			bool equals(const Protocol_HG_FOUNDER_GET_CLUB_PASSWORD_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_FOUNDER_GET_CLUB_PASSWORD_REPLY; }
			static const char *getMsgIdString() { return "HG_FOUNDER_GET_CLUB_PASSWORD_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_FOUNDER_GET_CLUB_PASSWORD_REPLY(Protocol_HG_FOUNDER_GET_CLUB_PASSWORD_REPLY&&);
			Protocol_HG_FOUNDER_GET_CLUB_PASSWORD_REPLY& operator=(Protocol_HG_FOUNDER_GET_CLUB_PASSWORD_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_FOUNDER_GET_CLUB_PASSWORD_REPLY(const Protocol_HG_FOUNDER_GET_CLUB_PASSWORD_REPLY&) = default;
			Protocol_HG_FOUNDER_GET_CLUB_PASSWORD_REPLY& operator=(const Protocol_HG_FOUNDER_GET_CLUB_PASSWORD_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN();
			void clear();
			bool equals(const Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_RECRUIT_SOCIAL_TOKEN; }
			static const char *getMsgIdString() { return "HG_GET_RECRUIT_SOCIAL_TOKEN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY
		{
			// 2[s|s] - errCode[errDesc|sotialToken]
			INT16 errCode;

			PString errDesc;

			PString sotialToken;

			Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY(Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY&&);
			Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY& operator=(Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY(const Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY&) = default;
			Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY& operator=(const Protocol_HG_GET_RECRUIT_SOCIAL_TOKEN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CLOSE_CLUB_BY_FOUNDER
		{
			// 444s - clubId,playerStatus,dummy,userId
			UINT32 clubId;
			// the information below is not parsed/used by server
			UINT32 playerStatus;	// value=eHgRemovePlayer
			UINT32 dummy;	// value=1
			PString userId;

			Protocol_HG_CLOSE_CLUB_BY_FOUNDER();
			void clear();
			bool equals(const Protocol_HG_CLOSE_CLUB_BY_FOUNDER&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CLOSE_CLUB_BY_FOUNDER; }
			static const char *getMsgIdString() { return "HG_CLOSE_CLUB_BY_FOUNDER"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CLOSE_CLUB_BY_FOUNDER(Protocol_HG_CLOSE_CLUB_BY_FOUNDER&&);
			Protocol_HG_CLOSE_CLUB_BY_FOUNDER& operator=(Protocol_HG_CLOSE_CLUB_BY_FOUNDER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CLOSE_CLUB_BY_FOUNDER(const Protocol_HG_CLOSE_CLUB_BY_FOUNDER&) = default;
			Protocol_HG_CLOSE_CLUB_BY_FOUNDER& operator=(const Protocol_HG_CLOSE_CLUB_BY_FOUNDER&) = default;
#endif
#endif
		};
		struct Protocol_HG_CLOSE_CLUB_BY_FOUNDER_REPLY
		{
			// 2s - errCode,errDesc
			INT16 errCode;
			PString errDesc;

			Protocol_HG_CLOSE_CLUB_BY_FOUNDER_REPLY();
			void clear();
			bool equals(const Protocol_HG_CLOSE_CLUB_BY_FOUNDER_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CLOSE_CLUB_BY_FOUNDER_REPLY; }
			static const char *getMsgIdString() { return "HG_CLOSE_CLUB_BY_FOUNDER_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CLOSE_CLUB_BY_FOUNDER_REPLY(Protocol_HG_CLOSE_CLUB_BY_FOUNDER_REPLY&&);
			Protocol_HG_CLOSE_CLUB_BY_FOUNDER_REPLY& operator=(Protocol_HG_CLOSE_CLUB_BY_FOUNDER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CLOSE_CLUB_BY_FOUNDER_REPLY(const Protocol_HG_CLOSE_CLUB_BY_FOUNDER_REPLY&) = default;
			Protocol_HG_CLOSE_CLUB_BY_FOUNDER_REPLY& operator=(const Protocol_HG_CLOSE_CLUB_BY_FOUNDER_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CHANGE_SEASON_NAME
		{
			// 44s - clubId,seasonId,seasonName
			UINT32 clubId;
			UINT32 seasonId;
			PString seasonName;

			Protocol_HG_CHANGE_SEASON_NAME();
			void clear();
			bool equals(const Protocol_HG_CHANGE_SEASON_NAME&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_SEASON_NAME; }
			static const char *getMsgIdString() { return "HG_CHANGE_SEASON_NAME"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_SEASON_NAME(Protocol_HG_CHANGE_SEASON_NAME&&);
			Protocol_HG_CHANGE_SEASON_NAME& operator=(Protocol_HG_CHANGE_SEASON_NAME&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_SEASON_NAME(const Protocol_HG_CHANGE_SEASON_NAME&) = default;
			Protocol_HG_CHANGE_SEASON_NAME& operator=(const Protocol_HG_CHANGE_SEASON_NAME&) = default;
#endif
#endif
		};
		struct Protocol_HG_CHANGE_SEASON_NAME_REPLY
		{
			// 2s - errCode,errDesc
			INT16 errCode;
			PString errDesc;

			Protocol_HG_CHANGE_SEASON_NAME_REPLY();
			void clear();
			bool equals(const Protocol_HG_CHANGE_SEASON_NAME_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CHANGE_SEASON_NAME_REPLY; }
			static const char *getMsgIdString() { return "HG_CHANGE_SEASON_NAME_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CHANGE_SEASON_NAME_REPLY(Protocol_HG_CHANGE_SEASON_NAME_REPLY&&);
			Protocol_HG_CHANGE_SEASON_NAME_REPLY& operator=(Protocol_HG_CHANGE_SEASON_NAME_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CHANGE_SEASON_NAME_REPLY(const Protocol_HG_CHANGE_SEASON_NAME_REPLY&) = default;
			Protocol_HG_CHANGE_SEASON_NAME_REPLY& operator=(const Protocol_HG_CHANGE_SEASON_NAME_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_PROCESS_SEASON_CLOSED
		{
			// 4ttb4s4 - seasonId,timeFrom,timeTo,closed,seasonType,seasonName,clubId
			UINT32 seasonId;
			SrvTime timeFrom;
			SrvTime timeTo;
			bool closed;
			UINT32 seasonType;
			PString seasonName;

			UINT32 clubId;

			Protocol_HG_PROCESS_SEASON_CLOSED();
			void clear();
			bool equals(const Protocol_HG_PROCESS_SEASON_CLOSED&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_PROCESS_SEASON_CLOSED; }
			static const char *getMsgIdString() { return "HG_PROCESS_SEASON_CLOSED"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_PROCESS_SEASON_CLOSED(Protocol_HG_PROCESS_SEASON_CLOSED&&);
			Protocol_HG_PROCESS_SEASON_CLOSED& operator=(Protocol_HG_PROCESS_SEASON_CLOSED&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_PROCESS_SEASON_CLOSED(const Protocol_HG_PROCESS_SEASON_CLOSED&) = default;
			Protocol_HG_PROCESS_SEASON_CLOSED& operator=(const Protocol_HG_PROCESS_SEASON_CLOSED&) = default;
#endif
#endif
		};
		struct Protocol_HG_PROCESS_SEASON_CLOSED_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_PROCESS_SEASON_CLOSED_REPLY();
			void clear();
			bool equals(const Protocol_HG_PROCESS_SEASON_CLOSED_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_PROCESS_SEASON_CLOSED_REPLY; }
			static const char *getMsgIdString() { return "HG_PROCESS_SEASON_CLOSED_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_PROCESS_SEASON_CLOSED_REPLY(Protocol_HG_PROCESS_SEASON_CLOSED_REPLY&&);
			Protocol_HG_PROCESS_SEASON_CLOSED_REPLY& operator=(Protocol_HG_PROCESS_SEASON_CLOSED_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_PROCESS_SEASON_CLOSED_REPLY(const Protocol_HG_PROCESS_SEASON_CLOSED_REPLY&) = default;
			Protocol_HG_PROCESS_SEASON_CLOSED_REPLY& operator=(const Protocol_HG_PROCESS_SEASON_CLOSED_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_MODIFY_MEMBERSHIP_FLAGS
		{
			// 44 - clubId,flags
			UINT32 clubId;
			UINT32 flags;

			Protocol_HG_MODIFY_MEMBERSHIP_FLAGS();
			void clear();
			bool equals(const Protocol_HG_MODIFY_MEMBERSHIP_FLAGS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_MODIFY_MEMBERSHIP_FLAGS; }
			static const char *getMsgIdString() { return "HG_MODIFY_MEMBERSHIP_FLAGS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_MODIFY_MEMBERSHIP_FLAGS_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_MODIFY_MEMBERSHIP_FLAGS_REPLY();
			void clear();
			bool equals(const Protocol_HG_MODIFY_MEMBERSHIP_FLAGS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_MODIFY_MEMBERSHIP_FLAGS_REPLY; }
			static const char *getMsgIdString() { return "HG_MODIFY_MEMBERSHIP_FLAGS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_MODIFY_MEMBERSHIP_FLAGS_REPLY(Protocol_HG_MODIFY_MEMBERSHIP_FLAGS_REPLY&&);
			Protocol_HG_MODIFY_MEMBERSHIP_FLAGS_REPLY& operator=(Protocol_HG_MODIFY_MEMBERSHIP_FLAGS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_MODIFY_MEMBERSHIP_FLAGS_REPLY(const Protocol_HG_MODIFY_MEMBERSHIP_FLAGS_REPLY&) = default;
			Protocol_HG_MODIFY_MEMBERSHIP_FLAGS_REPLY& operator=(const Protocol_HG_MODIFY_MEMBERSHIP_FLAGS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_SET_FAVORITE_CLUB
		{
			// 4b - clubId,isFavoriteClub
			UINT32 clubId;
			bool isFavoriteClub;

			Protocol_HG_SET_FAVORITE_CLUB();
			void clear();
			bool equals(const Protocol_HG_SET_FAVORITE_CLUB&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_SET_FAVORITE_CLUB; }
			static const char *getMsgIdString() { return "HG_SET_FAVORITE_CLUB"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_SET_FAVORITE_CLUB_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_SET_FAVORITE_CLUB_REPLY();
			void clear();
			bool equals(const Protocol_HG_SET_FAVORITE_CLUB_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_SET_FAVORITE_CLUB_REPLY; }
			static const char *getMsgIdString() { return "HG_SET_FAVORITE_CLUB_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_SET_FAVORITE_CLUB_REPLY(Protocol_HG_SET_FAVORITE_CLUB_REPLY&&);
			Protocol_HG_SET_FAVORITE_CLUB_REPLY& operator=(Protocol_HG_SET_FAVORITE_CLUB_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_SET_FAVORITE_CLUB_REPLY(const Protocol_HG_SET_FAVORITE_CLUB_REPLY&) = default;
			Protocol_HG_SET_FAVORITE_CLUB_REPLY& operator=(const Protocol_HG_SET_FAVORITE_CLUB_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_TABLE_SOCIAL_TOKEN
		{
			// 448 - clubId,tableId32,tableId
			UINT32 clubId;
			UINT32 tableId32;
			UINT64 tableId;

			Protocol_HG_TABLE_SOCIAL_TOKEN();
			void clear();
			bool equals(const Protocol_HG_TABLE_SOCIAL_TOKEN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_TABLE_SOCIAL_TOKEN; }
			static const char *getMsgIdString() { return "HG_TABLE_SOCIAL_TOKEN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_TABLE_SOCIAL_TOKEN_REPLY
		{
			// 2[s|s] - errCode[errDesc|socialToken]
			INT16 errCode;

			PString errDesc;

			PString socialToken;

			Protocol_HG_TABLE_SOCIAL_TOKEN_REPLY();
			void clear();
			bool equals(const Protocol_HG_TABLE_SOCIAL_TOKEN_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_TABLE_SOCIAL_TOKEN_REPLY; }
			static const char *getMsgIdString() { return "HG_TABLE_SOCIAL_TOKEN_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_TABLE_SOCIAL_TOKEN_REPLY(Protocol_HG_TABLE_SOCIAL_TOKEN_REPLY&&);
			Protocol_HG_TABLE_SOCIAL_TOKEN_REPLY& operator=(Protocol_HG_TABLE_SOCIAL_TOKEN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_TABLE_SOCIAL_TOKEN_REPLY(const Protocol_HG_TABLE_SOCIAL_TOKEN_REPLY&) = default;
			Protocol_HG_TABLE_SOCIAL_TOKEN_REPLY& operator=(const Protocol_HG_TABLE_SOCIAL_TOKEN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_TOURN_SOCIAL_TOKEN
		{
			// 44 - clubId,tournId
			UINT32 clubId;
			UINT32 tournId;

			Protocol_HG_TOURN_SOCIAL_TOKEN();
			void clear();
			bool equals(const Protocol_HG_TOURN_SOCIAL_TOKEN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_TOURN_SOCIAL_TOKEN; }
			static const char *getMsgIdString() { return "HG_TOURN_SOCIAL_TOKEN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_TOURN_SOCIAL_TOKEN_REPLY
		{
			// 2[s|s] - errCode[errDesc|socialToken]
			INT16 errCode;

			PString errDesc;

			PString socialToken;

			Protocol_HG_TOURN_SOCIAL_TOKEN_REPLY();
			void clear();
			bool equals(const Protocol_HG_TOURN_SOCIAL_TOKEN_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_TOURN_SOCIAL_TOKEN_REPLY; }
			static const char *getMsgIdString() { return "HG_TOURN_SOCIAL_TOKEN_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_TOURN_SOCIAL_TOKEN_REPLY(Protocol_HG_TOURN_SOCIAL_TOKEN_REPLY&&);
			Protocol_HG_TOURN_SOCIAL_TOKEN_REPLY& operator=(Protocol_HG_TOURN_SOCIAL_TOKEN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_TOURN_SOCIAL_TOKEN_REPLY(const Protocol_HG_TOURN_SOCIAL_TOKEN_REPLY&) = default;
			Protocol_HG_TOURN_SOCIAL_TOKEN_REPLY& operator=(const Protocol_HG_TOURN_SOCIAL_TOKEN_REPLY&) = default;
#endif
#endif
		};

		struct ClubMessageData
		{
			// 484484tssb44 - type,id,clubId,pinnedPos,parentId,userIntId,created,userId,content,obsolete,roleFlags,flags
			UINT32 type;
			UINT64 id;
			UINT32 clubId;
			UINT32 pinnedPos;
			UINT64 parentId;
			UINT32 userIntId;
			SrvTime created;
			PString userId;
			PString content;
			bool obsolete;
			UINT32 roleFlags;
			UINT32 flags;

			ClubMessageData();
			void clear();
			bool equals(const ClubMessageData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ClubMessageData(ClubMessageData&&);
			ClubMessageData& operator=(ClubMessageData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ClubMessageData(const ClubMessageData&) = default;
			ClubMessageData& operator=(const ClubMessageData&) = default;
#endif
#endif
		};
		struct Protocol_HG_SAVE_CLUB_MESSAGE
		{
			// 484484tssb44 - type,id,clubId,pinnedPos,parentId,userIntId,created,userId,content,obsolete,roleFlags,flags
			ClubMessageData clubMessageData;

			Protocol_HG_SAVE_CLUB_MESSAGE();
			void clear();
			bool equals(const Protocol_HG_SAVE_CLUB_MESSAGE&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_SAVE_CLUB_MESSAGE; }
			static const char *getMsgIdString() { return "HG_SAVE_CLUB_MESSAGE"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_SAVE_CLUB_MESSAGE(Protocol_HG_SAVE_CLUB_MESSAGE&&);
			Protocol_HG_SAVE_CLUB_MESSAGE& operator=(Protocol_HG_SAVE_CLUB_MESSAGE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_SAVE_CLUB_MESSAGE(const Protocol_HG_SAVE_CLUB_MESSAGE&) = default;
			Protocol_HG_SAVE_CLUB_MESSAGE& operator=(const Protocol_HG_SAVE_CLUB_MESSAGE&) = default;
#endif
#endif
		};
		struct Protocol_HG_SAVE_CLUB_MESSAGE_REPLY
		{
			// 2[s|484484tssb44] - errCode[errDesc|type,id,clubId,pinnedPos,parentId,userIntId,created,userId,content,obsolete,roleFlags,flags]
			INT16 errCode;

			PString errDesc;

			ClubMessageData clubMessageData;

			Protocol_HG_SAVE_CLUB_MESSAGE_REPLY();
			void clear();
			bool equals(const Protocol_HG_SAVE_CLUB_MESSAGE_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_SAVE_CLUB_MESSAGE_REPLY; }
			static const char *getMsgIdString() { return "HG_SAVE_CLUB_MESSAGE_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_SAVE_CLUB_MESSAGE_REPLY(Protocol_HG_SAVE_CLUB_MESSAGE_REPLY&&);
			Protocol_HG_SAVE_CLUB_MESSAGE_REPLY& operator=(Protocol_HG_SAVE_CLUB_MESSAGE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_SAVE_CLUB_MESSAGE_REPLY(const Protocol_HG_SAVE_CLUB_MESSAGE_REPLY&) = default;
			Protocol_HG_SAVE_CLUB_MESSAGE_REPLY& operator=(const Protocol_HG_SAVE_CLUB_MESSAGE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CLUB_LOGIN
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_CLUB_LOGIN();
			void clear();
			bool equals(const Protocol_HG_CLUB_LOGIN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CLUB_LOGIN; }
			static const char *getMsgIdString() { return "HG_CLUB_LOGIN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_CLUB_LOGIN_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_CLUB_LOGIN_REPLY();
			void clear();
			bool equals(const Protocol_HG_CLUB_LOGIN_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CLUB_LOGIN_REPLY; }
			static const char *getMsgIdString() { return "HG_CLUB_LOGIN_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CLUB_LOGIN_REPLY(Protocol_HG_CLUB_LOGIN_REPLY&&);
			Protocol_HG_CLUB_LOGIN_REPLY& operator=(Protocol_HG_CLUB_LOGIN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CLUB_LOGIN_REPLY(const Protocol_HG_CLUB_LOGIN_REPLY&) = default;
			Protocol_HG_CLUB_LOGIN_REPLY& operator=(const Protocol_HG_CLUB_LOGIN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_CLUB_LOGOUT
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_CLUB_LOGOUT();
			void clear();
			bool equals(const Protocol_HG_CLUB_LOGOUT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CLUB_LOGOUT; }
			static const char *getMsgIdString() { return "HG_CLUB_LOGOUT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_CLUB_LOGOUT_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_CLUB_LOGOUT_REPLY();
			void clear();
			bool equals(const Protocol_HG_CLUB_LOGOUT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CLUB_LOGOUT_REPLY; }
			static const char *getMsgIdString() { return "HG_CLUB_LOGOUT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CLUB_LOGOUT_REPLY(Protocol_HG_CLUB_LOGOUT_REPLY&&);
			Protocol_HG_CLUB_LOGOUT_REPLY& operator=(Protocol_HG_CLUB_LOGOUT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CLUB_LOGOUT_REPLY(const Protocol_HG_CLUB_LOGOUT_REPLY&) = default;
			Protocol_HG_CLUB_LOGOUT_REPLY& operator=(const Protocol_HG_CLUB_LOGOUT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2
		{
			// 4444<s> - clubId,flags,mask,numUserIds<userId>
			UINT32 clubId;
			UINT32 flags;
			UINT32 mask;
			ThinAtf::LAtfVector< UserId, 4 > userIds;

			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2();
			void clear();
			bool equals(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_UPDATE_MEMBERSHIP_FLAGS2; }
			static const char *getMsgIdString() { return "HG_UPDATE_MEMBERSHIP_FLAGS2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2(Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2&&);
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2& operator=(Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2&) = default;
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2& operator=(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2&) = default;
#endif
#endif
		};
		struct Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY();
			void clear();
			bool equals(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY; }
			static const char *getMsgIdString() { return "HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY(Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY&&);
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY& operator=(Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY&) = default;
			Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY& operator=(const Protocol_HG_UPDATE_MEMBERSHIP_FLAGS2_REPLY&) = default;
#endif
#endif
		};

		struct RecurringTournament
		{
			//! M(44d <FIXME_COND_IF> M(4b) <FIXME_COND_ELSE> M(44) <FIXME_COND_ELSE> M(1144) <FIXME_COND_ENDIF> 4) - M(recurringPatternType,nbOccurences,endDate <FIXME_COND_IF> ,M(numberOfDays,everyWeekday) <FIXME_COND_ELSE> ,M(numberOfWeeks,recurringDays) <FIXME_COND_ELSE> ,M(dayOfMonth,numberMonths,whichRecurringDay,recurringDay) <FIXME_COND_ENDIF> ,nbConsecutiveCancellation)
			UINT32 recurringPatternType;
			UINT32 nbOccurences;
			SrvDate endDate;

			UINT32 numberOfDays;
			bool everyWeekday;

			UINT32 numberOfWeeks;
			UINT32 recurringDays;

			BYTE dayOfMonth;	// can be 0
			BYTE numberMonths;
			UINT32 whichRecurringDay;
			UINT32 recurringDay;

			UINT32 nbConsecutiveCancellation;

			RecurringTournament();
			void clear();
			bool equals(const RecurringTournament&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody1(CommMsgParser& _parser);
			static void validateAnonymousMsgBody1(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody2(CommMsgParser& _parser);
			static void validateAnonymousMsgBody2(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
		struct CreateTournParams2
		{
			// M(4ssbb4bbs114b444444211114b) - M(clubId,tournamentLobbyText,gameName,countTowardsClubStandings,isHiLo,tableSize,isFastDealing,isPlayMoney,currency,handType,potStruct,buyIn,isSyncBreaksOn,tournFormat,payout,startingChips,levelLength,tournKnockoutPrize,tournMaxPlayers,year,month,day,hour,minute,scalePM,voiceEnabled)
			CreateTournParams createTournParams;
			bool voiceEnabled;

			CreateTournParams2();
			void clear();
			bool equals(const CreateTournParams2&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			CreateTournParams2(CreateTournParams2&&);
			CreateTournParams2& operator=(CreateTournParams2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			CreateTournParams2(const CreateTournParams2&) = default;
			CreateTournParams2& operator=(const CreateTournParams2&) = default;
#endif
#endif
		};

		// HG_CLI_VER_1
		struct Protocol_HG_CREATE_CLUB_TOURN2
		{
			//! M(4ssbb4bbs114b444444211114b)M(44d <FIXME_COND_IF> M(4b) <FIXME_COND_ELSE> M(44) <FIXME_COND_ELSE> M(1144) <FIXME_COND_ENDIF> 4) - M(clubId,tournamentLobbyText,gameName,countTowardsClubStandings,isHiLo,tableSize,isFastDealing,isPlayMoney,currency,handType,potStruct,buyIn,isSyncBreaksOn,tournFormat,payout,startingChips,levelLength,tournKnockoutPrize,tournMaxPlayers,year,month,day,hour,minute,scalePM,voiceEnabled),M(recurringPatternType,nbOccurences,endDate <FIXME_COND_IF> ,M(numberOfDays,everyWeekday) <FIXME_COND_ELSE> ,M(numberOfWeeks,recurringDays) <FIXME_COND_ELSE> ,M(dayOfMonth,numberMonths,whichRecurringDay,recurringDay) <FIXME_COND_ENDIF> ,nbConsecutiveCancellation)
			CreateTournParams2 createTournParams2;
			RecurringTournament recurringTournament;

			Protocol_HG_CREATE_CLUB_TOURN2();
			void clear();
			bool equals(const Protocol_HG_CREATE_CLUB_TOURN2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CREATE_CLUB_TOURN2; }
			static const char *getMsgIdString() { return "HG_CREATE_CLUB_TOURN2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CREATE_CLUB_TOURN2(Protocol_HG_CREATE_CLUB_TOURN2&&);
			Protocol_HG_CREATE_CLUB_TOURN2& operator=(Protocol_HG_CREATE_CLUB_TOURN2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CREATE_CLUB_TOURN2(const Protocol_HG_CREATE_CLUB_TOURN2&) = default;
			Protocol_HG_CREATE_CLUB_TOURN2& operator=(const Protocol_HG_CREATE_CLUB_TOURN2&) = default;
#endif
#endif
		};
		struct Protocol_HG_CREATE_CLUB_TOURN_REPLY2
		{
			// 2[s|s4s] - errCode[errDesc|socialToken,tournId,restartWarning]
			INT16 errCode;

			PString errDesc;

			PString socialToken;
			UINT32 tournId;
			PString restartWarning;

			Protocol_HG_CREATE_CLUB_TOURN_REPLY2();
			void clear();
			bool equals(const Protocol_HG_CREATE_CLUB_TOURN_REPLY2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CREATE_CLUB_TOURN_REPLY2; }
			static const char *getMsgIdString() { return "HG_CREATE_CLUB_TOURN_REPLY2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CREATE_CLUB_TOURN_REPLY2(Protocol_HG_CREATE_CLUB_TOURN_REPLY2&&);
			Protocol_HG_CREATE_CLUB_TOURN_REPLY2& operator=(Protocol_HG_CREATE_CLUB_TOURN_REPLY2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CREATE_CLUB_TOURN_REPLY2(const Protocol_HG_CREATE_CLUB_TOURN_REPLY2&) = default;
			Protocol_HG_CREATE_CLUB_TOURN_REPLY2& operator=(const Protocol_HG_CREATE_CLUB_TOURN_REPLY2&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES
		{
			// b - isNewBehavior
			bool isNewBehavior;

			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES();
			void clear();
			bool equals(const Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUBS_AND_SCHEDULED_GAMES; }
			static const char *getMsgIdString() { return "HG_GET_CLUBS_AND_SCHEDULED_GAMES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY
		{
			// 2[s|4<M(4s4444b4)>4<M(t4s4s1b4444b1sb44ss44)>4<M(4s4s1b44b1sb44s44484)>s] - errCode[errDesc|numClubInfoListForClient<M(clubId,clubName,nbMembers,roleForUser,memberFlags,ordinal,favoriteClub,clubNameColor)>,numTourns<M(startTime,clubId,clubName,tournId,tournName,gameType,isHiLo,buyin,rake,knockoutBounty,numPlayers,isRegistered,limit,currency,isPlayMoney,maxPlayers,tournState,server,serverObject,flags,scalePM)>,numRingGames<M(clubId,clubName,tableId32,tableName,gameType,isHiLo,buyin,numPlayers,isSeated,limit,currency,isPlayMoney,lowStake,highStake,tableObject,maxNumPlayers,playersSeated,flags,tableId,scalePM)>,msgBoard]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< HgClubInfo, 4 > clubInfoListForClient;
			ThinAtf::LAtfVector< ScheduledTourn, 4 > tourns;
			ThinAtf::LAtfVector< ScheduledRingGame, 4 > ringGames;
			PString msgBoard;

			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY();
			void clear();
			bool equals(const Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY; }
			static const char *getMsgIdString() { return "HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY(Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY&&);
			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY& operator=(Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY(const Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY&) = default;
			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY& operator=(const Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_SET_ARCHIVE_PENDING
		{
			// t4<4> - archiveDate,numClubIds<clubIds>
			SrvTime archiveDate;	// no limit
			ThinAtf::LAtfVector< UINT32, 4 > clubIds;

			Protocol_HG_SET_ARCHIVE_PENDING();
			void clear();
			bool equals(const Protocol_HG_SET_ARCHIVE_PENDING&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_SET_ARCHIVE_PENDING; }
			static const char *getMsgIdString() { return "HG_SET_ARCHIVE_PENDING"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_SET_ARCHIVE_PENDING(Protocol_HG_SET_ARCHIVE_PENDING&&);
			Protocol_HG_SET_ARCHIVE_PENDING& operator=(Protocol_HG_SET_ARCHIVE_PENDING&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_SET_ARCHIVE_PENDING(const Protocol_HG_SET_ARCHIVE_PENDING&) = default;
			Protocol_HG_SET_ARCHIVE_PENDING& operator=(const Protocol_HG_SET_ARCHIVE_PENDING&) = default;
#endif
#endif
		};
		struct Protocol_HG_SET_ARCHIVE_PENDING_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_SET_ARCHIVE_PENDING_REPLY();
			void clear();
			bool equals(const Protocol_HG_SET_ARCHIVE_PENDING_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_SET_ARCHIVE_PENDING_REPLY; }
			static const char *getMsgIdString() { return "HG_SET_ARCHIVE_PENDING_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_SET_ARCHIVE_PENDING_REPLY(Protocol_HG_SET_ARCHIVE_PENDING_REPLY&&);
			Protocol_HG_SET_ARCHIVE_PENDING_REPLY& operator=(Protocol_HG_SET_ARCHIVE_PENDING_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_SET_ARCHIVE_PENDING_REPLY(const Protocol_HG_SET_ARCHIVE_PENDING_REPLY&) = default;
			Protocol_HG_SET_ARCHIVE_PENDING_REPLY& operator=(const Protocol_HG_SET_ARCHIVE_PENDING_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_ARCHIVE_CLUBS
		{
			// 4<4> - numClubIds<clubIds>
			ThinAtf::LAtfVector< UINT32, 4 > clubIds;

			Protocol_HG_ARCHIVE_CLUBS();
			void clear();
			bool equals(const Protocol_HG_ARCHIVE_CLUBS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_ARCHIVE_CLUBS; }
			static const char *getMsgIdString() { return "HG_ARCHIVE_CLUBS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_ARCHIVE_CLUBS(Protocol_HG_ARCHIVE_CLUBS&&);
			Protocol_HG_ARCHIVE_CLUBS& operator=(Protocol_HG_ARCHIVE_CLUBS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_ARCHIVE_CLUBS(const Protocol_HG_ARCHIVE_CLUBS&) = default;
			Protocol_HG_ARCHIVE_CLUBS& operator=(const Protocol_HG_ARCHIVE_CLUBS&) = default;
#endif
#endif
		};
		struct Protocol_HG_ARCHIVE_CLUBS_REPLY
		{
			// 2[s] - errCode[errDesc]
			INT16 errCode;

			PString errDesc;

			Protocol_HG_ARCHIVE_CLUBS_REPLY();
			void clear();
			bool equals(const Protocol_HG_ARCHIVE_CLUBS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_ARCHIVE_CLUBS_REPLY; }
			static const char *getMsgIdString() { return "HG_ARCHIVE_CLUBS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_ARCHIVE_CLUBS_REPLY(Protocol_HG_ARCHIVE_CLUBS_REPLY&&);
			Protocol_HG_ARCHIVE_CLUBS_REPLY& operator=(Protocol_HG_ARCHIVE_CLUBS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_ARCHIVE_CLUBS_REPLY(const Protocol_HG_ARCHIVE_CLUBS_REPLY&) = default;
			Protocol_HG_ARCHIVE_CLUBS_REPLY& operator=(const Protocol_HG_ARCHIVE_CLUBS_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_TABLE_STRUCTURES2
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_GET_CLUB_TABLE_STRUCTURES2();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TABLE_STRUCTURES2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TABLE_STRUCTURES2; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TABLE_STRUCTURES2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY2
		{
			// 2[s|4<M(b4bbs11444444s4)>b] - errCode[errDesc|numTableParams<M(isHiLo,tableSize,isFastDealing,isPlayMoney,currency,handType,potStruct,ante,cap,minBuyIn,maxBuyIn,stakesLow,stakesHigh,tableName,scalePM)>,isVoceEnabled]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< TableParams, 4 > tableParams;
			bool isVoceEnabled;

			Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY2();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TABLE_STRUCTURES_REPLY2; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TABLE_STRUCTURES_REPLY2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY2(Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY2&&);
			Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY2& operator=(Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY2(const Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY2&) = default;
			Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY2& operator=(const Protocol_HG_GET_CLUB_TABLE_STRUCTURES_REPLY2&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES2
		{
			// b - isNewBehavior
			bool isNewBehavior;

			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES2();
			void clear();
			bool equals(const Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUBS_AND_SCHEDULED_GAMES2; }
			static const char *getMsgIdString() { return "HG_GET_CLUBS_AND_SCHEDULED_GAMES2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2
		{
			// 2[s|4<M(4s4444b4)>4<M(t4s4s1b4444b1sb44ss44)>4<M(4s4s1b44b1sb44s44484)>s] - errCode[errDesc|numClubInfoListForClient<M(clubId,clubName,nbMembers,roleForUser,memberFlags,ordinal,favoriteClub,clubNameColor)>,numTourns<M(startTime,clubId,clubName,tournId,tournName,gameType,isHiLo,buyin,rake,knockoutBounty,numPlayers,isRegistered,limit,currency,isPlayMoney,maxPlayers,tournState,server,serverObject,flags,scalePM)>,numRingGames<M(clubId,clubName,tableId32,tableName,gameType,isHiLo,buyin,numPlayers,isSeated,limit,currency,isPlayMoney,lowStake,highStake,tableObject,maxNumPlayers,playersSeated,flags,tableId,scalePM)>,msgBoard]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< HgClubInfo, 4 > clubInfoListForClient;
			ThinAtf::LAtfVector< ScheduledTourn, 4 > tourns;
			ThinAtf::LAtfVector< ScheduledRingGame, 4 > ringGames;
			PString msgBoard;

			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2();
			void clear();
			bool equals(const Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2; }
			static const char *getMsgIdString() { return "HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2(Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2&&);
			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2& operator=(Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2(const Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2&) = default;
			Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2& operator=(const Protocol_HG_GET_CLUBS_AND_SCHEDULED_GAMES_REPLY2&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_SCHEDULED_GAMES2
		{

			Protocol_HG_GET_SCHEDULED_GAMES2();
			void clear();
			bool equals(const Protocol_HG_GET_SCHEDULED_GAMES2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_SCHEDULED_GAMES2; }
			static const char *getMsgIdString() { return "HG_GET_SCHEDULED_GAMES2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_SCHEDULED_GAMES_REPLY2
		{
			// 2[s|4<M(t4s4s1b4444b1sb44ss44)>4<M(4s4s1b44b1sb44s44484)>s] - errCode[errDesc|numTourns<M(startTime,clubId,clubName,tournId,tournName,gameType,isHiLo,buyin,rake,knockoutBounty,numPlayers,isRegistered,limit,currency,isPlayMoney,maxPlayers,tournState,server,serverObject,flags,scalePM)>,numRingGames<M(clubId,clubName,tableId32,tableName,gameType,isHiLo,buyin,numPlayers,isSeated,limit,currency,isPlayMoney,lowStake,highStake,tableObject,maxNumPlayers,playersSeated,flags,tableId,scalePM)>,msgBoard]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< ScheduledTourn, 4 > tourns;
			ThinAtf::LAtfVector< ScheduledRingGame, 4 > ringGames;
			PString msgBoard;

			Protocol_HG_GET_SCHEDULED_GAMES_REPLY2();
			void clear();
			bool equals(const Protocol_HG_GET_SCHEDULED_GAMES_REPLY2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_SCHEDULED_GAMES_REPLY2; }
			static const char *getMsgIdString() { return "HG_GET_SCHEDULED_GAMES_REPLY2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_SCHEDULED_GAMES_REPLY2(Protocol_HG_GET_SCHEDULED_GAMES_REPLY2&&);
			Protocol_HG_GET_SCHEDULED_GAMES_REPLY2& operator=(Protocol_HG_GET_SCHEDULED_GAMES_REPLY2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_SCHEDULED_GAMES_REPLY2(const Protocol_HG_GET_SCHEDULED_GAMES_REPLY2&) = default;
			Protocol_HG_GET_SCHEDULED_GAMES_REPLY2& operator=(const Protocol_HG_GET_SCHEDULED_GAMES_REPLY2&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_TOURN_STRUCTURES2
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_GET_CLUB_TOURN_STRUCTURES2();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TOURN_STRUCTURES2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TOURN_STRUCTURES2; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TOURN_STRUCTURES2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		// HG_CLI_VER_2
		struct Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY2
		{
			// 2[s|444<b>4<b>4<4>4<4>4<4>4<4>4<M(1bs4<1>4<4>4<b>)>4<M(4444)>4<s4<M(4444)>>b4] - errCode[errDesc|tournKnockoutPrize,tournMaxPlayers,numTournFastDealing<tournFastDealing>,numTournSyncBreaks<tournSyncBreaks>,numTournPayouts<tournPayouts>,numTournStartingChips<tournStartingChips>,numTournLevelLengths<tournLevelLengths>,numTournFormats<tournFormats>,numGameStructures<M(handType,isHiLo,description,numPotTypes<potTypes>,numTableSizes<tableSizes>,numMoneyTypes<moneyTypes>)>,numTournBuyInsPM<M(buyIn,rake,bounty,scalePM)>,numCurrencyBuyIns<currency,numTournBuyInBodies<M(buyIn,rake,bounty,scalePM)>>,isVoiceEnabled,numMaxDaysForTournCreation]
			INT16 errCode;

			PString errDesc;

			UINT32 tournKnockoutPrize;
			UINT32 tournMaxPlayers;
			ThinAtf::LAtfVector< bool, 4 > tournFastDealing;
			ThinAtf::LAtfVector< bool, 4 > tournSyncBreaks;
			ThinAtf::LAtfVector< UINT32, 4 > tournPayouts;
			ThinAtf::LAtfVector< UINT32, 4 > tournStartingChips;
			ThinAtf::LAtfVector< UINT32, 4 > tournLevelLengths;
			ThinAtf::LAtfVector< UINT32, 4 > tournFormats;

			ThinAtf::LAtfVector< GameStructure, 4 > gameStructures;
			ThinAtf::LAtfVector< TournBuyIn2, 4 > tournBuyInsPM;
			ThinAtf::LAtfVector< TournCurrencyBuyIns2, 4 > currencyBuyIns;
			bool isVoiceEnabled;

			UINT32 numMaxDaysForTournCreation;

			Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY2();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_TOURN_STRUCTURES_REPLY2; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_TOURN_STRUCTURES_REPLY2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY2(Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY2&&);
			Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY2& operator=(Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY2(const Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY2&) = default;
			Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY2& operator=(const Protocol_HG_GET_CLUB_TOURN_STRUCTURES_REPLY2&) = default;
#endif
#endif
		};

		// HG_CLI_VER_2
		struct Protocol_HG_CREATE_CLUB_TOURN3
		{
			//! M(4ssbb4bbs114b444444211114b)M(44d <FIXME_COND_IF> M(4b) <FIXME_COND_ELSE> M(44) <FIXME_COND_ELSE> M(1144) <FIXME_COND_ENDIF> 4) - M(clubId,tournamentLobbyText,gameName,countTowardsClubStandings,isHiLo,tableSize,isFastDealing,isPlayMoney,currency,handType,potStruct,buyIn,isSyncBreaksOn,tournFormat,payout,startingChips,levelLength,tournKnockoutPrize,tournMaxPlayers,year,month,day,hour,minute,scalePM,voiceEnabled),M(recurringPatternType,nbOccurences,endDate <FIXME_COND_IF> ,M(numberOfDays,everyWeekday) <FIXME_COND_ELSE> ,M(numberOfWeeks,recurringDays) <FIXME_COND_ELSE> ,M(dayOfMonth,numberMonths,whichRecurringDay,recurringDay) <FIXME_COND_ENDIF> ,nbConsecutiveCancellation)
			CreateTournParams2 createTournParams2;
			RecurringTournament recurringTournament;

			Protocol_HG_CREATE_CLUB_TOURN3();
			void clear();
			bool equals(const Protocol_HG_CREATE_CLUB_TOURN3&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CREATE_CLUB_TOURN3; }
			static const char *getMsgIdString() { return "HG_CREATE_CLUB_TOURN3"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CREATE_CLUB_TOURN3(Protocol_HG_CREATE_CLUB_TOURN3&&);
			Protocol_HG_CREATE_CLUB_TOURN3& operator=(Protocol_HG_CREATE_CLUB_TOURN3&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CREATE_CLUB_TOURN3(const Protocol_HG_CREATE_CLUB_TOURN3&) = default;
			Protocol_HG_CREATE_CLUB_TOURN3& operator=(const Protocol_HG_CREATE_CLUB_TOURN3&) = default;
#endif
#endif
		};
		struct Protocol_HG_CREATE_CLUB_TOURN_REPLY3
		{
			// 2[s|s4s] - errCode[errDesc|socialToken,tournId,restartWarning]
			INT16 errCode;

			PString errDesc;

			PString socialToken;
			UINT32 tournId;
			PString restartWarning;

			Protocol_HG_CREATE_CLUB_TOURN_REPLY3();
			void clear();
			bool equals(const Protocol_HG_CREATE_CLUB_TOURN_REPLY3&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_CREATE_CLUB_TOURN_REPLY3; }
			static const char *getMsgIdString() { return "HG_CREATE_CLUB_TOURN_REPLY3"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_CREATE_CLUB_TOURN_REPLY3(Protocol_HG_CREATE_CLUB_TOURN_REPLY3&&);
			Protocol_HG_CREATE_CLUB_TOURN_REPLY3& operator=(Protocol_HG_CREATE_CLUB_TOURN_REPLY3&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_CREATE_CLUB_TOURN_REPLY3(const Protocol_HG_CREATE_CLUB_TOURN_REPLY3&) = default;
			Protocol_HG_CREATE_CLUB_TOURN_REPLY3& operator=(const Protocol_HG_CREATE_CLUB_TOURN_REPLY3&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_RECENT_TOURN_SUMMARIES2
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_GET_RECENT_TOURN_SUMMARIES2();
			void clear();
			bool equals(const Protocol_HG_GET_RECENT_TOURN_SUMMARIES2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_RECENT_TOURN_SUMMARIES2; }
			static const char *getMsgIdString() { return "HG_GET_RECENT_TOURN_SUMMARIES2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY2
		{
			// 2[s|4<M(4sstt484b44b4)>] - errCode[errDesc|numSummaries<M(tournId,tournName,currency,started,closed,numPlayers,prizePool,seasonId,playMoney,rebuys,rebuyRake,countingToStats,scalePM)>]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< ClubRecentTournamentSummary, 4 > summaries;

			Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY2();
			void clear();
			bool equals(const Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_RECENT_TOURN_SUMMARIES_REPLY2; }
			static const char *getMsgIdString() { return "HG_GET_RECENT_TOURN_SUMMARIES_REPLY2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY2(Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY2&&);
			Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY2& operator=(Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY2(const Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY2&) = default;
			Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY2& operator=(const Protocol_HG_GET_RECENT_TOURN_SUMMARIES_REPLY2&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_RECENT_TOURN_RESULTS2
		{
			// 4 - tournId
			UINT32 tournId;

			Protocol_HG_GET_RECENT_TOURN_RESULTS2();
			void clear();
			bool equals(const Protocol_HG_GET_RECENT_TOURN_RESULTS2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_RECENT_TOURN_RESULTS2; }
			static const char *getMsgIdString() { return "HG_GET_RECENT_TOURN_RESULTS2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY2
		{
			// 2[s|4<M(4s444444)>] - errCode[errDesc|numTournResults<M(tournRank,userId,place,placeTo,prize,pointsEarned,knockouts,scalePM)>]
			INT16 errCode;

			PString errDesc;

			ThinAtf::LAtfVector< ClubRecentTournPlayerResult, 4 > tournResults;

			Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY2();
			void clear();
			bool equals(const Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_RECENT_TOURN_RESULTS_REPLY2; }
			static const char *getMsgIdString() { return "HG_GET_RECENT_TOURN_RESULTS_REPLY2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY2(Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY2&&);
			Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY2& operator=(Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY2(const Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY2&) = default;
			Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY2& operator=(const Protocol_HG_GET_RECENT_TOURN_RESULTS_REPLY2&) = default;
#endif
#endif
		};

		struct Protocol_HG_GET_CLUB_INFO2
		{
			// 4 - clubId
			UINT32 clubId;

			Protocol_HG_GET_CLUB_INFO2();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_INFO2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_INFO2; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_INFO2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_HG_GET_CLUB_INFO_REPLY2
		{
			// 2[s|sss44sss] - errCode[errDesc|clubName,tablePubName,tournPubName,memberRole,memberFlags,wallPubName,announcePubName,membershipPubName]
			INT16 errCode;

			PString errDesc;

			PString clubName;
			PString tablePubName;
			PString tournPubName;
			UINT32 memberRole;
			UINT32 memberFlags;
			PString wallPubName;
			PString announcePubName;
			PString membershipPubName;

			Protocol_HG_GET_CLUB_INFO_REPLY2();
			void clear();
			bool equals(const Protocol_HG_GET_CLUB_INFO_REPLY2&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return HG_GET_CLUB_INFO_REPLY2; }
			static const char *getMsgIdString() { return "HG_GET_CLUB_INFO_REPLY2"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_HG_GET_CLUB_INFO_REPLY2(Protocol_HG_GET_CLUB_INFO_REPLY2&&);
			Protocol_HG_GET_CLUB_INFO_REPLY2& operator=(Protocol_HG_GET_CLUB_INFO_REPLY2&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_HG_GET_CLUB_INFO_REPLY2(const Protocol_HG_GET_CLUB_INFO_REPLY2&) = default;
			Protocol_HG_GET_CLUB_INFO_REPLY2& operator=(const Protocol_HG_GET_CLUB_INFO_REPLY2&) = default;
#endif
#endif
		};
	};
};

#endif
