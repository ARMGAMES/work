#include "gamedefs.h"
#include "brands.h"
#include "sites.h"
#include "SeatFinderShared.h"
#include "i18n.localedef.h"
#include "../storm/TableCommonStructs${ATF_THIN_FILENAME_SUFFIX}.h"
#include "../mtlobby/NStackTournInfo${ATF_THIN_FILENAME_SUFFIX}.h"
#include "PBitmask.h"

#if defined(PROTOCOL_CLIENT_ONLY) && !defined(MLOBBY_CLIENT_PROTOCOL_VERSION)
#define MLOBBY_CLIENT_PROTOCOL_VERSION 10
#endif

#include "mlobby.h"

#define TOP_LEVEL_NAMESPACE MLobby

namespace cli
{
	MsgBodyStruct Filter
	{
		BYTE version;
		UINT32 locale max MAX_LOCALES;
		PString country maxlen 3;
		UINT32 siteId min PokerStars_SiteUnknown max PokerStars_Last;
		BYTE game min HandTypeNone max HandType_Last;
		BYTE hiLo max 1;
		BYTE limit min StructNonDefined max PotStruct_Last;
		UINT32 minStake max 2000000000;
		UINT32 maxStake max 2000000000;
		UINT32 buyInMask min SelectionFilter::Cash max SelectionFilter::BuyInMask_Last;
		UINT32 minBuyIn max 2000000000;
		UINT32 maxBuyIn max 2000000000;
		UINT32 maxPlayers max SelectionFilter::MaxPlayers_Mask_Max;
		BYTE minSeated max 10;
		BYTE minAvailable max 10;
		BYTE speed max (2*SelectionFilter::TourneySpeed_Last-1);
		UINT32 currencies; // client can send -1, so no limit
		UINT32 format max (2*SelectionFilter::Format_Last-1);
		UINT32 startingSoon; // TODO: waiting for help from mobile client team
		UINT32 state max (2*SelectionFilter::State_Last-1);
		BYTE order max SelectionFilter::TableOrder_Last;
		
		if( version >= 2 )
		{
			bool realMoney;
		}
		
		if( version >= 3 )
		{
			UINT32 minEntrants max 1000000;
			UINT32 maxEntrants max 1000000;
		}
		
		if( version >= 4 )
		{
			UINT32 zoomTournaments min SelectionFilter::zoom_Exclude max SelectionFilter::ZoomTournaments_Last;
			UINT32 multiplierPM; // TODO: waiting for help from mobile client team
			UINT32 features min SelectionFilter::feature_None max (2*SelectionFilter::ClientFeaturesMobile_Last-1);
		}
		
		if( version >= 5 )
		{
			bool tableStarters;
		}
		
		if( version >= 6 )
		{
			PString nameCriteria maxlen 1000;
			UINT32 specialSearchMode min SelectionFilter::specialSearchMode_None max SelectionFilter::specialSearchMode_tournByNameOnly;
		}
		
		if( version >= 7 )
		{
			UINT32 clientSortingSeed; // Mask - no need to limit
		}
		
		if( version >= 8 )
		{
			UINT32 brandMask min BrandType_None max BrandType_Last;
		}
        
        if (version == 9)
        {
            INT8 notUsed parseEndOptB4Me; // client sends it, but server does not parse/use it
        }        

		if( version >= 10 )
		{
			INT8 seatFindersAndBlitzes min SelectionFilter::SeatFindersAndBlitzes_Both max SelectionFilter::SeatFindersAndBlitzes_Last;
		}
	};
	
	Message MSG_MLOBBY_FIND_RINGGAMES
	{
		Filter filter;
		UINT32 maxItems max 500000;
	};
/*	
	MsgBodyStruct SharedTableStaticInfo
	{
		UINT32 tableId;
		PString name;
		PString server;
		PString serverObject;
		UINT32 tableFlags;
		BYTE isOneOnOne;
		BYTE isPlayMoney;
		BYTE maxPlayers;
		BYTE game;
		BYTE isHiLo;
		UINT32 loBet;
		UINT32 hiBet;
		BYTE structure;
		PString specialName;
		UINT32 visibilityMask;
		UINT16 chatLang;
		PString currency;
		UINT32 minChipsLimit;
		INT32 maxBuyIn;
		UINT32 ante;
		UINT32 restrictedCountriesSize;
		if (restrictedCountriesSize)
		{
			bool countryRestrictionInverted;
			PString[restrictedCountriesSize] restrictedCountries;
		}
		PSiteMask visibilityMaskEx parseEndOptB4Me;
	};
	
	MsgBodyStruct SharedTableDynamicInfo
	{
	};
	
	Message MSG_MLOBBY_FIND_RINGGAMES_REPLY
	{
		INT16 err;
		UINT32 totalItems;
		UINT32 maxItems;
	};
*/	
	
	Message MSG_MLOBBY_FIND_TOURNAMENTS
	{
		Filter filter;
		UINT32 maxItems max 500000;
	};

/*	
	Message MSG_MLOBBY_FIND_TOURNAMENTS_REPLY
	{
		INT16 err;
	};
*/
	
	Message MSG_MLOBBY_FIND_TABLE_OLD
	{
		Filter filter;
		vector<UINT32> excludedTables maxsize 1024 parseEndOptB4Me;
	};
	
/*	
	Message MSG_MLOBBY_FIND_TABLE_OLD_REPLY
	{
		INT16 err;
	};
*/	
	
	Message MSG_MLOBBY_FIND_TABLE64
	{
		Filter filter;
		vector<UINT64> excludedTables maxsize 1024 parseEndOptB4Me;
	};

/*	
	Message MSG_MLOBBY_FIND_TABLE64_REPLY
	{
		INT16 err;
	};
*/	
	
	Message MSG_MLOBBY_FIND_BLITZ
	{
		Filter filter;
		UINT32 maxItems max 500000;
	};

/*	
	Message MSG_MLOBBY_FIND_BLITZ_REPLY
	{
		INT16 err;
	};
*/	
	
	Message MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES
	{
		Filter filter;
		UINT32 maxItems max 500000;
		vector<UINT32> excludedFinders maxsize 1024;
	};
	
/*
	Message MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES_REPLY
	{
		INT16 err;
	};
*/	

/*
	struct BaseSelectionFilter
	{
		BYTE version;
		PString country;
		UINT32 siteId min PokerStars_SiteUnknown max PokerStars_Last;
		UINT32 brandId min BrandType_None max BrandType_Last;
		UINT64 gameMask min (UINT64)MobileGameTypes::MobileGame_NLHoldem max (UINT64)MobileGameTypes::MobileGame_Last; // MobileGameTypes
		UINT32 buyInMask min MobileBuyIn_Cash max MobileBuyIn_Last; // MobileBuyInMask
		UINT64 minBuyIn;
		UINT64 maxBuyIn;
		UINT32 multiplierPM max 2000000000; // TODO: waiting for help from mobile client team
		UINT32 currencyMask min MobileCurrency_USD max MobileCurrency_Last; // MobileCurrencyTypes
		UINT32 sortOrder min MobileSortOrder_None max MobileSortOrder_Last; // sorting order
	};
*/

	
	
	MsgBodyStruct TableSelectionFilter
	{
		BYTE version;
		PString country;
		UINT32 siteId min PokerStars_SiteUnknown max (2*PokerStars_Last-1);
		UINT32 brandId min BrandType_None max (2*BrandType_Last-1);
		UINT64 gameMask max (2*(UINT64)MobileGameTypes::MobileGame_Last-1); // MobileGameTypes
		UINT32 buyInMask max (2*MobileBuyIn_Last-1); // MobileBuyInMask
		UINT64 minBuyIn max 2000000000;
		UINT64 maxBuyIn max 2000000000;
		UINT32 multiplierPM max 2000000000; // TODO: waiting for help from mobile client team
		UINT32 currencyMask max (2*MobileCurrency_Last-1); // MobileCurrencyTypes
		UINT32 sortOrder min MobileSortOrder_None max MobileSortOrder_Last; // sorting order
		UINT32 maxPlayerMask max (2*MobileMaxPlayer_Last-1); // MobileMaxPlayerTypes
		UINT32 clientSortingSeed; //PYR-3292
		bool standardFormatOnly; // Buyin of max 100 Big Blinds and No CAP and No Ante
	};
	
	MsgBodyStruct TournSelectionFilter
	{
		BYTE version;
		PString country maxlen 3;
		UINT32 siteId min PokerStars_SiteUnknown max (2*PokerStars_Last-1);
		UINT32 brandId min BrandType_None max (2*BrandType_Last-1);
		UINT64 gameMask max (2*(UINT64)MobileGameTypes::MobileGame_Last-1); // MobileGameTypes
		UINT32 buyInMask max (2*MobileBuyIn_Last-1); // MobileBuyInMask
		UINT64 minBuyIn max 2000000000;
		UINT64 maxBuyIn max 2000000000;
		UINT32 multiplierPM max 2000000000; // TODO: waiting for help from mobile client team
		UINT32 currencyMask max (2*MobileCurrency_Last-1); // MobileCurrencyTypes
		UINT32 sortOrder min MobileSortOrder_None max MobileSortOrder_Last; // sorting order
		UINT32 locale max MAX_LOCALES;
		UINT32 speedMask max (2*MobileTournSpeed_Last-1); // TournSpeedTypes
		UINT32 gameVariantMask max (2*MobileGameVariant_Last-1); // TournVariantTypes
		UINT32 startingWithin max 1440; 	// starting soon in minutes, or 0 if not used
		bool registeringOnly;				// if true, show only tourns still registering
		PString tournName maxlen 1000;		// search tournaments by name
		UINT32 tableSize min MobileTournTableSize_None max (2*MobileTournTableSize_Last-1);
		vector< PString > visibilityStrings maxsize 100 parseEndOptB4Me;
		vector<PString> tournLobbies maxsize 1024 parseEndOptB4Me;
	};
	
	MsgBodyStruct FinderAndBlitzSelectionFilter
	{
		BYTE version;
		PString country maxlen 3;
		UINT32 siteId min PokerStars_SiteUnknown max (2*PokerStars_Last-1);
		UINT32 brandId min BrandType_None max (2*BrandType_Last-1);
		UINT64 gameMask max (2*(UINT64)MobileGameTypes::MobileGame_Last-1); // MobileGameTypes
		UINT32 buyInMask max (2*MobileBuyIn_Last-1); // MobileBuyInMask
		UINT64 minBuyIn max 2000000000;
		UINT64 maxBuyIn max 2000000000;
		UINT32 multiplierPM max 2000000000; // TODO: waiting for help from mobile client team
		UINT32 currencyMask max (2*MobileCurrency_Last-1); // MobileCurrencyTypes
		UINT32 order max SelectionFilter::TableOrder_Last; // sorting order
		UINT32 maxPlayerMask max (2*MobileMaxPlayer_Last-1); // MobileMaxPlayerTypes
		UINT32 clientSortingSeed; //PYR-3292
		bool standardFormatOnly; // Buyin of max 100 Big Blinds and No CAP and No Ante
		INT8 seatFindersAndBlitzes min SelectionFilter::SeatFindersAndBlitzes_Both max SelectionFilter::SeatFindersAndBlitzes_Last;
	};
	
	MsgBodyStruct RingStaticData
	{
		UINT32 tableId32;
		PString name;
		PString server;
		PString serverObject;
		UINT32 tableFlags;
		BYTE isOneOnOne;
		BYTE isPlayMoney;
		BYTE maxPlayers;
		BYTE game;
		BYTE isHiLo;
		UINT32 loBet;
		UINT32 hiBet;
		BYTE structure;
		PString specialName;
		UINT32 visibilityMask;
		UINT16 chatLang;
		PString currency;
		UINT32 minChipsLimit;
		INT32 maxBuyIn;
		UINT32 ante;
		bool  countryRestrictionInverted;
		vector< PString > restrictedCountries;
		UINT32  cap;
		BYTE  icon;
		BYTE  filter;
		UINT32  tableInstanceFlags;
		bool  isTableStarter;
		UINT64  tableFlags2;
		UINT32  tableTypeId;
		UINT32 scalePM;
		UINT32  defaultBuyIn;
		UINT64 tableId;
		UINT32  brandMask;
		INT32  poolBlockMinHands;
		PString visibilityCriteria;
		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes parseEndOptB4Me;
		vector<INT64> variableAntes parseEndOptB4Me;
		PSiteMask visibilityMaskEx parseEndOptB4Me;
	};
	
	MsgBodyStruct FppFactorStruct
	{
		UINT16 fppFactor;
		UINT32 sites;
		UINT32 gameCategory; // #22626
		UINT32 number; // PYR-23500
		SrvTime endT; // PYR-24398
		PSiteMask sitesEx parseEndOptB4Me;
	};
	
	MsgBodyStruct RingDynaData
	{
		BYTE  numPlayers;
		BYTE  wait;
		BYTE  playersPerFlop;
		UINT32  potSize;
		UINT16  handsPerHour;
		BYTE  publProp;
		UINT32  averageStackSize;
		BYTE  vpip;
		vector<FppFactorStruct> fppFactors;
		bool  isTableDealingCards;
	};
	
	MsgBodyStruct RingDataStruct
	{
		RingStaticData staticData;
		RingDynaData dynamicData;
	};
	
	
	MsgBodyStruct HybridLobbySelectionFilter
	{
		BYTE version;
		PString country maxlen 3;
		UINT32 siteId min PokerStars_SiteUnknown max (2*PokerStars_Last-1);
		UINT32 brandId min BrandType_None max (2*BrandType_Last-1);
		UINT64 gameMask max (2*(UINT64)MobileGameTypes::MobileGame_Last-1); // MobileGameTypes
		UINT32 buyInMask max (2*MobileBuyIn_Last-1); // MobileBuyInMask
		UINT64 minBuyIn max 2000000000;
		UINT64 maxBuyIn max 2000000000;
		UINT32 multiplierPM max 2000000000; // TODO: waiting for help from mobile client team
		UINT32 currencyMask max (2*MobileCurrency_Last-1); // MobileCurrencyTypes
		UINT32 order max SelectionFilter::TableOrder_Last; // sorting order
		UINT32 maxPlayerMask max (2*MobileMaxPlayer_Last-1); // MobileMaxPlayerTypes
		UINT32 clientSortingSeed; //PYR-3292
		bool standardFormatOnly; // Buyin of max 100 Big Blinds and No CAP and No Ante
		UINT32 gameTypes min MobileHybridLobbyGameTypes_None max (2*MobileHybridLobbyGameTypes_Last-1);
		bool showStealthTables default true parseEndOptB4Me; 
	};
	
	Message MSG_MLOBBY_FIND_RINGGAMES2
	{
		TableSelectionFilter filter;
		UINT32 maxItems max 500000;
		vector<UINT64> excludedTables maxsize 1024 parseEndOptB4Me;
		UINT32 context parseEndOptB4Me; // for tracing mlobby requests
		PString installId maxlen 128 parseEndOptB4Me; // for tracing mlobby requests
	};


	Message MSG_MLOBBY_FIND_RINGGAMES2_REPLY
	{
		UINT32 totalItems;
		vector<RingDataStruct> tables;
	};
	

	MsgBodyStruct TournStaticData
	{
		UINT32  tournamentId;
		PString  server;
		PString  targetServer;
		PString  hasSatellite;
		SrvTime  whenStart;
		UINT32  buyIn;
		UINT32  rake;
		UINT32  fppBuyIn;
		BYTE  isRestricted;
		BYTE  isPwdProtected;
		PString  name;
		PString  admissionId;
		BYTE  isPlayMoney;
		UINT32  satelliteTarget;
		UINT32  minPlayers;
		UINT32  tournFlags;
		BYTE  game;
		BYTE  isHiLo;
		BYTE  structure;
		UINT32  tournMask;
		UINT32  tournSites;
		UINT32  whenStartInt;
		UINT32  tournMask2;
		SrvTime  targetWhenStart;
		UINT32  tournMask3;
		UINT32  tournMask4;
		UINT32  maxPerTable;
		bool  countryRestrictionInverted;
		vector< PString > restrictedCountries;
		BYTE hasDayTwoStart;
		UINT32 dayTwoStartSec;
		SrvTime dayTwoStart;
		I18nPString shortText;
		UINT16  chatLang;
		PString  currency;
		UINT32  tournFlagsServInt;
		UINT32  knockout;
		PString satelliteTargetReference;
		UINT16 satelliteTargetReferenceLock;
		UINT32 maxPlayers;
		BYTE speedDisplay;
		I18nPString nameSnG;
		BYTE  step;
		BYTE timedTournType;
		UINT16 timedTournTime;
		BYTE timedTournPayout;
		bool  isFlightTourn;
		PString tournBrand;
		UINT32 scalePM;
		BYTE progressiveKnockout;
		BYTE awardScheme;
		UINT16 numReentries;
		PString internalReference;
		PString favReference;
		PString satelliteTargetName;
		INT64 admissionPrice;
		UINT64 tournFlags2;
		SrvTime regEndAbs;
		UINT32 regEndAbsInt;
		bool  doNotAllowToUnreg;
		TournClient${ATF_THIN_NAMESPACE_SUFFIX}::NStackTournInfoStruct nStackInfo;
		UINT32  tournMask5;
		UINT32  tournMask6;
		PString satelliteTargetNameMTT;
		UINT32  liveEventMask;
		BYTE  timedTournPlayersPercent;
		UINT32 dummy1;
		BYTE  rmPmLobby;
		UINT32  brandAccessMask;
		UINT32  activeFlags;
		UINT32  sngScriptId;
		PString customSpeedDisplayName;
		PSiteMask tournSitesEx parseEndOptB4Me;
	};
	
	MsgBodyStruct TournDynaData
	{
		UINT32  fakeStatus;
		UINT32  entrants;
		BYTE  publProp;
		UINT32 prizePoolToPublish;
		BYTE prizePoolUnit;

		vector<FppFactorStruct> happyHoursMultipliers;

		UINT32 goldenSnGMilestoneAwardStub; //obsolete
		UINT32 dummy1;
		bool goldenSnGEligibleStub; //obsolete
		UINT32 goldenSnGTotalAddonStub; //obsolete
		UINT32 prizePoolMoneyToPublish;
		UINT32  timedTournPlayersThreshold;
		INT8 mixTournSatellite;
	};
	
	MsgBodyStruct TournDataStruct
	{
		TournStaticData staticData;
		TournDynaData dynamicData;
	};
	
	
	Message MSG_MLOBBY_FIND_TOURNAMENTS2
	{
		TournSelectionFilter filter;
		UINT32 maxItems max 500000;
		UINT32 context parseEndOptB4Me; // for tracing mlobby requests
		PString installId maxlen 128 parseEndOptB4Me; // for tracing mlobby requests
	};

	Message MSG_MLOBBY_FIND_TOURNAMENTS2_REPLY
	{
		UINT32 totalItems;
		vector<TournDataStruct> tourns;
	};

	
	Message MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2
	{
		FinderAndBlitzSelectionFilter filter;
		UINT32 maxItems max 500000;
		vector<UINT32> excludedFinders maxsize 1024;
		UINT32 context parseEndOptB4Me; // for tracing mlobby requests
		PString installId maxlen 128 parseEndOptB4Me; // for tracing mlobby requests
	};
	

	Message MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2_REPLY
	{
		SortedSeatFindersAndBlitzes sortedSeatFindersAndBlitzes;
		
		@override bool equals(const Protocol_MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2_REPLY& _o) const 
		{ 
			return false; // not implemented
		}
		
		@override const char *asTraceString(PString& _buf) const
		{
			_buf.cut(0);
			_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2_REPLY).append(")");
			_buf.append(',');
			_buf.append("sortedSeatFindersAndBlitzes= NOT IMPLEMENTED!!!!");
			return _buf.c_str();
		}

		@override const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
		{	
			_buf.cut(0);
			_buf.append("<message>");
			_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_MLOBBY_FIND_SEATFINDERS_AND_BLITZES2_REPLY).append("</msgid>");
			if(_timestampTicks)
				_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
			if(_msgTime)	
				_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
			_buf.append("<struct>");
			_buf.append("NOT IMPLEMENTED!!!!");
			_buf.append("</struct>");
			_buf.append("</message>");
			return _buf.c_str();
		}
		
		@override bool loadFromXmlString(const PString& _xmlString)
		{
			return false;
		}
		
		@override const char *asJSONString(PString& _buf) const
		{
			return"";
		}
		
		@override void loadFromJSONString(const PString& _jsonString)
		{
		}
		
		@override static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
		{
		}
		
		@override static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent) 
		{}
		
	};

	Message MSG_MLOBBY_FIND_TABLE64_2
	{
		TableSelectionFilter filter;
		UINT32 maxItems max 500000;
		vector<UINT64> excludedTables maxsize 1024 parseEndOptB4Me;
		UINT32 context parseEndOptB4Me; // for tracing mlobby requests
		PString installId maxlen 128 parseEndOptB4Me; // for tracing mlobby requests
	};


	Message MSG_MLOBBY_FIND_TABLE64_2_REPLY
	{
		UINT32 totalItems;
		vector<RingDataStruct> tables;
	};
	

	MsgBodyStruct Game
	{
		BYTE handType min HandTypeNone max HandType_Last;
		BYTE structure min StructNonDefined max PotStruct_Last;
		BYTE hiLo max 1;
	};

	MsgBodyStruct MorphLobbySelectionFilter
	{
		BYTE version;
		PString country maxlen 3;
		UINT32 siteId min PokerStars_SiteUnknown max (2*PokerStars_Last-1);
		UINT32 brandId min BrandType_None max (2*BrandType_Last-1);
		BYTE game min HandTypeNone max HandType_Last;
		BYTE hiLo max 1;
		BYTE limit min StructNonDefined max PotStruct_Last;
		UINT32 currencyMask max (2*MobileCurrency_Last-1); // MobileCurrencyTypes
		bool isPM;
		vector<Game> games maxsize 128 parseEndOptB4Me; 
		bool showStealthTables default true parseEndOptB4Me; 
	};

	MsgBodyStruct SeatFinderStruct
	{
		// static data
		UINT32			id;
		BYTE			game;
		BYTE			structure;
		BYTE			isHiLo;
		BYTE			maxPlayersPerTable;
		INT32			loBet;
		INT32			hiBet;
		INT32			ante;
		INT32			cap;
		PString			currency;
		INT32			minChipsLimit;
		INT32			maxBuyIn;
		UINT32			visibilityMask;
		INT32			defaultBuyIn;
		PString			specialName;
		bool			countryRestrictionInverted;
		vector<PString> restrictedCountries;
		PString 		replayerAddress;
		PString 		replayerInstance;
		INT8 			minPlayersPerTable;
		bool 			isPasswordProtected;
		INT32 			poolBlockMinHands;
		vector<INT32> 	poolBlockTimePenalty;
		UINT32 			flags;
		UINT64 			flags2;
		bool			isPM;
		UINT32			scalePM;

		// dynamic data
		INT32			handsPerHour;
		INT32			avgPotSize;
		INT32			avgStackSize;
		INT32			numPlayers;
		INT32 			numTables;
		INT32 			numFullTables;

		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes parseEndOptB4Me;
		vector<INT64>	variableAntes parseEndOptB4Me;
		PSiteMask		visibilityMaskEx parseEndOptB4Me;
	};
	
	
	MsgBodyStruct TableTypeStaticDataStruct
	{
		UINT32 id;
		BYTE isPlayMoney;
		BYTE game;
		BYTE isHiLo;
		BYTE maxPlayers;
		UINT32 visibilityMask;
		BYTE structure;
		UINT32 loBet;
		UINT32 hiBet;
		UINT32 ante;
		UINT32 cap;
		PString currency;
		UINT32 minChipsLimit;
		UINT32 maxBuyIn;
		bool countryRestrictionInverted;
		vector<PString> restrictedCountries;
		bool visible;
		UINT32 scalePM;
		UINT32 defaultBuyIn;
		UINT32 brandMask;
		UINT32 seatFinderId;
		INT32 poolBlockMinHands;
		vector<INT32> poolBlockTimePenalty;
		bool isPasswordProtected;
		bool isMorphLobby;
		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes;
		vector<INT64> variableAntes;
		PString specialName;
		PSiteMask visibilityMaskEx parseEndOptB4Me;
	};
	
	MsgBodyStruct TableTypeDynaDataStruct
	{
		UINT32 numPlayers;
		UINT32 numTables;
	};
		
	MsgBodyStruct TableTypeDataStruct
	{
		TableTypeStaticDataStruct staticData;
		TableTypeDynaDataStruct dynamicData;
	};
	
	MsgBodyStruct ZoomStaticDataStruct
	{
		// static data
		UINT32			id;
		BYTE			game;
		BYTE			structure;
		BYTE			isHiLo;
		BYTE			maxPlayersPerTable;
		INT32			loBet;
		INT32			hiBet;
		INT32			ante;
		INT32			cap;
		PString			currency;
		INT32			minChipsLimit;
		INT32			maxBuyIn;
		UINT32			visibilityMask;
		INT32			defaultBuyIn;
		PString			specialName;
		bool			countryRestrictionInverted;
		vector<PString> restrictedCountries;
		BYTE			isPlayMoney;
		bool			isMorphLobby;
		UINT32			scalePM;
		PString 		server;
		PString 		name;
		PString 		replayerInstance;
		BYTE 			isOneOnOne;
		UINT32 			tableFlags;
		UINT16 			chatLang;
		bool 			quickLobbyVisible; // #22042
		UINT32			blitzFlags;
		UINT32 			brandMask; // PYR-40190
		PString 		serverObj;
		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes parseEndOptB4Me;
		PSiteMask		visibilityMaskEx parseEndOptB4Me;
		UINT64			tableFlags2 parseEndOptB4Me;
	};
	
	MsgBodyStruct EarlyBirdMultiplier
	{
		UINT32 licenseId;
		UINT32 multiplier;
	};
	
	MsgBodyStruct ZoomDynaDataStruct
	{
		// dynamic data
		INT32			handsPerHour;
		INT32			avgPotSize;
		INT32			avgStackSize;
		INT32			numPlayers;
		BYTE 			publProp;
		BYTE 			avgPlayers;
		BYTE 			avgVpip;
		vector<FppFactorStruct> fppFactors;
		INT32			earlyBirdMins parseEndOptB4Me; // if > 0, early bird eligible
		vector<EarlyBirdMultiplier> earlyBirdMultipliers parseEndOptB4Me; // PYR-114224, if client license has multiplier > 0 then early bird eligible
	};
	
	MsgBodyStruct ZoomDataStruct
	{
		ZoomStaticDataStruct staticData;
		ZoomDynaDataStruct dynamicData;
	};
	
	MsgBodyStruct SeatFinderStaticDataStruct
	{
		// static data
		UINT32			id;
		BYTE			game;
		BYTE			structure;
		BYTE			isHiLo;
		BYTE			maxPlayersPerTable;
		INT32			loBet;
		INT32			hiBet;
		INT32			ante;
		INT32			cap;
		PString			currency;
		INT32			minChipsLimit;
		INT32			maxBuyIn;
		UINT32			visibilityMask;
		INT32			defaultBuyIn;
		PString			specialName;
		bool			countryRestrictionInverted;
		vector<PString> restrictedCountries;
		PString 		replayerAddress;
		PString 		replayerInstance;
		INT8 			minPlayersPerTable;
		bool 			isPasswordProtected;
		INT32 			poolBlockMinHands;
		vector<INT32> 	poolBlockTimePenalty;
		UINT32 			flags;
		UINT64 			flags2;
		bool			isPM;
		UINT32			scalePM;
		TableCommon${ATF_THIN_NAMESPACE_SUFFIX}::TableStakes tableStakes parseEndOptB4Me;
		vector<INT64>		variableAntes parseEndOptB4Me;
		PSiteMask		visibilityMaskEx parseEndOptB4Me;
	};
	
	MsgBodyStruct SeatFinderDynaDataStruct
	{
		// dynamic data
		INT32			handsPerHour;
		INT32			avgPotSize;
		INT32			avgStackSize;
		INT32			numPlayers;
		INT32 			numTables;
		INT32 			numFullTables;
	};
	
	MsgBodyStruct SeatFinderDataStruct
	{
		SeatFinderStaticDataStruct staticData;
		SeatFinderDynaDataStruct dynamicData;
	};
	
	
	Message MSG_MLOBBY_FIND_MORPH_LOBBIES
	{
		MorphLobbySelectionFilter filter;
		UINT32 maxItems max 500000;
		vector<UINT32> excludedFinders maxsize 1024;
		UINT32 context; // for tracing mlobby requests
		PString installId maxlen 128 parseEndOptB4Me; // for tracing mlobby requests
	};
	
	Message MSG_MLOBBY_FIND_MORPH_LOBBIES_REPLY
	{
		UINT32 totalItems;
		vector<SeatFinderStruct> sf;
	};
	
	
	
	Message MSG_MLOBBY_FIND_HYBRID_GAMES
	{
		HybridLobbySelectionFilter filter;
		UINT32 maxItems max 500000;
		vector<UINT32> excludedFinders maxsize 1024;
		UINT32 context; // for tracing mlobby requests
		PString installId maxlen 128; // for tracing mlobby requests
	};
	
	Message MSG_MLOBBY_FIND_HYBRID_GAMES_REPLY
	{
		UINT32 totalItems;
		vector<SeatFinderDataStruct> sfs;
		vector<ZoomDataStruct> blitzes;
		vector<TableTypeDataStruct> tableTypes;
		vector<UINT32> gameOrder; // MobileHybridLobbyGameTypes
	};
	
	Message MSG_MLOBBY_FIND_RING_GAME_BY_TYPE
	{
		UINT32 tableTypeId;
		UINT32 maxItems max 500000;
		UINT32 order max SelectionFilter::TableOrder_Last; // sorting order
		UINT32 context; // for tracing mlobby requests
		PString installId maxlen 128; // for tracing mlobby requests
	};


	Message MSG_MLOBBY_FIND_RING_GAME_BY_TYPE_REPLY
	{
		UINT32 totalItems;
		vector<RingDataStruct> tables;
	};
};
