/**
 * personalization_atf_thin.h
 *
 * This file was auto-generated from personalization_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin personalization_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_PERSONALIZATION_ATF_THIN_H
#define ATF_PROTOCOL_DEFFILE_PERSONALIZATION_ATF_THIN_H

// ===========================================================
// Copyright (C) 2018 Stars Technologies Services  All rights reserved.
// ===========================================================

#include "personalization.h"
#include "mlobbyNG_atf_thin.h"


#include "ThinAtfUserDefStructs.h"

namespace PersonalizationATF
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	namespace cli
	{
		struct TournTicketInfo
		{
			// M(4sb4stt4) - M(ticketId,ticketName,multiTourn,price,currency,issued,expireAt,tournNumber)
			UINT32 ticketId;
			PString ticketName;
			bool multiTourn;
			UINT32 price;
			PString currency;
			SrvTime issued;
			SrvTime expireAt;
			INT32 tournNumber;

			TournTicketInfo();
			void clear();
			bool equals(const TournTicketInfo&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournTicketInfo(TournTicketInfo&&);
			TournTicketInfo& operator=(TournTicketInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournTicketInfo(const TournTicketInfo&) = default;
			TournTicketInfo& operator=(const TournTicketInfo&) = default;
#endif
#endif
		};

		struct TournCountFilter
		{
			// M(8) - M(gameMask)
			UINT64 gameMask;	// NGGameTypes

			TournCountFilter();
			void clear();
			bool equals(const TournCountFilter&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_PS_Q_GET_RECENT_GAME_LIST
		{
			// 4b - gameTypes,isPM
			UINT32 gameTypes;	// enum GameCategoryTypes
			bool isPM;

			Protocol_PS_Q_GET_RECENT_GAME_LIST();
			void clear();
			bool equals(const Protocol_PS_Q_GET_RECENT_GAME_LIST&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_Q_GET_RECENT_GAME_LIST; }
			static const char *getMsgIdString() { return "PS_Q_GET_RECENT_GAME_LIST"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_PS_A_GET_RECENT_GAME_LIST
		{
			//! 4< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::TableDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SngDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SagDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SeatFinderDataStruct</FIXME> >4<4>4< <FIXME>MLobbyNG::cli::PPPDataStruct</FIXME> > - numTourns< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >,numTableTypes< <FIXME>MLobbyNG::cli::TableDataStruct</FIXME> >,numSngTypes< <FIXME>MLobbyNG::cli::SngDataStruct</FIXME> >,numSagTypes< <FIXME>MLobbyNG::cli::SagDataStruct</FIXME> >,numZoomTypes< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> >,numSeatFinders< <FIXME>MLobbyNG::cli::SeatFinderDataStruct</FIXME> >,numGameOrder<gameOrder>,numPppTypes< <FIXME>MLobbyNG::cli::PPPDataStruct</FIXME> >
			ThinAtf::LAtfVector< MLobbyNG::cli::TournDataStruct, 4 > tourns;
			ThinAtf::LAtfVector< MLobbyNG::cli::TableDataStruct, 4 > tableTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SngDataStruct, 4 > sngTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SagDataStruct, 4 > sagTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::ZoomDataStruct, 4 > zoomTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SeatFinderDataStruct, 4 > seatFinders;
			ThinAtf::LAtfVector< UINT32, 4 > gameOrder;
			ThinAtf::LAtfVector< MLobbyNG::cli::PPPDataStruct, 4 > pppTypes;	// PYR-123925

			Protocol_PS_A_GET_RECENT_GAME_LIST();
			void clear();
			bool equals(const Protocol_PS_A_GET_RECENT_GAME_LIST&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_A_GET_RECENT_GAME_LIST; }
			static const char *getMsgIdString() { return "PS_A_GET_RECENT_GAME_LIST"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_A_GET_RECENT_GAME_LIST(Protocol_PS_A_GET_RECENT_GAME_LIST&&);
			Protocol_PS_A_GET_RECENT_GAME_LIST& operator=(Protocol_PS_A_GET_RECENT_GAME_LIST&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_A_GET_RECENT_GAME_LIST(const Protocol_PS_A_GET_RECENT_GAME_LIST&) = default;
			Protocol_PS_A_GET_RECENT_GAME_LIST& operator=(const Protocol_PS_A_GET_RECENT_GAME_LIST&) = default;
#endif
#endif
		};

		struct Protocol_PS_Q_ADMIN_GET_RECENT_GAME_LIST
		{
			//! 44 <FIXME>MLobbyNG::cli::GameListFilter</FIXME>  - gameTypes,userIntId, <FIXME>filter</FIXME> 
			UINT32 gameTypes;	// enum GameCategoryTypes
			UINT32 userIntId;
			MLobbyNG::cli::GameListFilter filter;

			Protocol_PS_Q_ADMIN_GET_RECENT_GAME_LIST();
			void clear();
			bool equals(const Protocol_PS_Q_ADMIN_GET_RECENT_GAME_LIST&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_Q_ADMIN_GET_RECENT_GAME_LIST; }
			static const char *getMsgIdString() { return "PS_Q_ADMIN_GET_RECENT_GAME_LIST"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_Q_ADMIN_GET_RECENT_GAME_LIST(Protocol_PS_Q_ADMIN_GET_RECENT_GAME_LIST&&);
			Protocol_PS_Q_ADMIN_GET_RECENT_GAME_LIST& operator=(Protocol_PS_Q_ADMIN_GET_RECENT_GAME_LIST&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_Q_ADMIN_GET_RECENT_GAME_LIST(const Protocol_PS_Q_ADMIN_GET_RECENT_GAME_LIST&) = default;
			Protocol_PS_Q_ADMIN_GET_RECENT_GAME_LIST& operator=(const Protocol_PS_Q_ADMIN_GET_RECENT_GAME_LIST&) = default;
#endif
#endif
		};

		struct Protocol_PS_A_ADMIN_GET_RECENT_GAME_LIST
		{
			//! 2[s|4< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::TableDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SngDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SagDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SeatFinderDataStruct</FIXME> >4<4>4< <FIXME>MLobbyNG::cli::PPPDataStruct</FIXME> >] - errCode[errMsg|numTourns< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >,numTableTypes< <FIXME>MLobbyNG::cli::TableDataStruct</FIXME> >,numSngTypes< <FIXME>MLobbyNG::cli::SngDataStruct</FIXME> >,numSagTypes< <FIXME>MLobbyNG::cli::SagDataStruct</FIXME> >,numZoomTypes< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> >,numSeatFinders< <FIXME>MLobbyNG::cli::SeatFinderDataStruct</FIXME> >,numGameOrder<gameOrder>,numPppTypes< <FIXME>MLobbyNG::cli::PPPDataStruct</FIXME> >]
			INT16 errCode;

			PString errMsg;

			ThinAtf::LAtfVector< MLobbyNG::cli::TournDataStruct, 4 > tourns;
			ThinAtf::LAtfVector< MLobbyNG::cli::TableDataStruct, 4 > tableTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SngDataStruct, 4 > sngTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SagDataStruct, 4 > sagTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::ZoomDataStruct, 4 > zoomTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SeatFinderDataStruct, 4 > seatFinders;
			ThinAtf::LAtfVector< UINT32, 4 > gameOrder;
			ThinAtf::LAtfVector< MLobbyNG::cli::PPPDataStruct, 4 > pppTypes;	// PYR-123925

			Protocol_PS_A_ADMIN_GET_RECENT_GAME_LIST();
			void clear();
			bool equals(const Protocol_PS_A_ADMIN_GET_RECENT_GAME_LIST&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_A_ADMIN_GET_RECENT_GAME_LIST; }
			static const char *getMsgIdString() { return "PS_A_ADMIN_GET_RECENT_GAME_LIST"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_A_ADMIN_GET_RECENT_GAME_LIST(Protocol_PS_A_ADMIN_GET_RECENT_GAME_LIST&&);
			Protocol_PS_A_ADMIN_GET_RECENT_GAME_LIST& operator=(Protocol_PS_A_ADMIN_GET_RECENT_GAME_LIST&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_A_ADMIN_GET_RECENT_GAME_LIST(const Protocol_PS_A_ADMIN_GET_RECENT_GAME_LIST&) = default;
			Protocol_PS_A_ADMIN_GET_RECENT_GAME_LIST& operator=(const Protocol_PS_A_ADMIN_GET_RECENT_GAME_LIST&) = default;
#endif
#endif
		};

		struct Protocol_PS_U_GET_CURRENTLY_SEATED_AT
		{
			//! b4< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::TableData</FIXME> >4< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> > - joined,numTourns< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >,numTables< <FIXME>MLobbyNG::cli::TableData</FIXME> >,numZoomTypes< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> >
			bool joined;	// true means joined table/tourn/zoom, false means they left
			ThinAtf::LAtfVector< MLobbyNG::cli::TournDataStruct, 4 > tourns;
			ThinAtf::LAtfVector< MLobbyNG::cli::TableData, 4 > tables;
			ThinAtf::LAtfVector< MLobbyNG::cli::ZoomDataStruct, 4 > zoomTypes;

			Protocol_PS_U_GET_CURRENTLY_SEATED_AT();
			void clear();
			bool equals(const Protocol_PS_U_GET_CURRENTLY_SEATED_AT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_U_GET_CURRENTLY_SEATED_AT; }
			static const char *getMsgIdString() { return "PS_U_GET_CURRENTLY_SEATED_AT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_U_GET_CURRENTLY_SEATED_AT(Protocol_PS_U_GET_CURRENTLY_SEATED_AT&&);
			Protocol_PS_U_GET_CURRENTLY_SEATED_AT& operator=(Protocol_PS_U_GET_CURRENTLY_SEATED_AT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_U_GET_CURRENTLY_SEATED_AT(const Protocol_PS_U_GET_CURRENTLY_SEATED_AT&) = default;
			Protocol_PS_U_GET_CURRENTLY_SEATED_AT& operator=(const Protocol_PS_U_GET_CURRENTLY_SEATED_AT&) = default;
#endif
#endif
		};

		struct Protocol_PS_Q_GET_TICKET_TOURNS
		{
			// 4<s>44b - numTicketNames<ticketNames>,gameCategoryMask,ticketTournRequestMask,isPM
			ThinAtf::LAtfVector< PString, 4 > ticketNames;
			UINT32 gameCategoryMask;	// enum GameCategoryTypes
			UINT32 ticketTournRequestMask;	// enum TicketTournRequestTypes
			bool isPM;

			Protocol_PS_Q_GET_TICKET_TOURNS();
			void clear();
			bool equals(const Protocol_PS_Q_GET_TICKET_TOURNS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_Q_GET_TICKET_TOURNS; }
			static const char *getMsgIdString() { return "PS_Q_GET_TICKET_TOURNS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_Q_GET_TICKET_TOURNS(Protocol_PS_Q_GET_TICKET_TOURNS&&);
			Protocol_PS_Q_GET_TICKET_TOURNS& operator=(Protocol_PS_Q_GET_TICKET_TOURNS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_Q_GET_TICKET_TOURNS(const Protocol_PS_Q_GET_TICKET_TOURNS&) = default;
			Protocol_PS_Q_GET_TICKET_TOURNS& operator=(const Protocol_PS_Q_GET_TICKET_TOURNS&) = default;
#endif
#endif
		};

		struct Protocol_PS_A_GET_TICKET_TOURNS
		{
			//! 4< <FIXME>MLobbyNG::cli::OrderedTicketTournInfo</FIXME> > - numTicketInfos< <FIXME>MLobbyNG::cli::OrderedTicketTournInfo</FIXME> >
			ThinAtf::LAtfVector< MLobbyNG::cli::OrderedTicketTournInfo, 4 > ticketInfos;

			Protocol_PS_A_GET_TICKET_TOURNS();
			void clear();
			bool equals(const Protocol_PS_A_GET_TICKET_TOURNS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_A_GET_TICKET_TOURNS; }
			static const char *getMsgIdString() { return "PS_A_GET_TICKET_TOURNS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_A_GET_TICKET_TOURNS(Protocol_PS_A_GET_TICKET_TOURNS&&);
			Protocol_PS_A_GET_TICKET_TOURNS& operator=(Protocol_PS_A_GET_TICKET_TOURNS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_A_GET_TICKET_TOURNS(const Protocol_PS_A_GET_TICKET_TOURNS&) = default;
			Protocol_PS_A_GET_TICKET_TOURNS& operator=(const Protocol_PS_A_GET_TICKET_TOURNS&) = default;
#endif
#endif
		};

		struct Protocol_PS_Q_FILTER_GAMES
		{
			//!  <FIXME>MLobbyNG::cli::FilterGamesSelectionFilter</FIXME>  <FIXME>MLobbyNG::cli::FilterGamesResultCriteria</FIXME>  <FIXME>MLobbyNG::cli::ClientMarkers</FIXME>  -  <FIXME>filter</FIXME> , <FIXME>criteria</FIXME> , <FIXME>clientMarkers</FIXME> 
			MLobbyNG::cli::FilterGamesSelectionFilter filter;
			MLobbyNG::cli::FilterGamesResultCriteria criteria;
			MLobbyNG::cli::ClientMarkers clientMarkers;

			Protocol_PS_Q_FILTER_GAMES();
			void clear();
			bool equals(const Protocol_PS_Q_FILTER_GAMES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_Q_FILTER_GAMES; }
			static const char *getMsgIdString() { return "PS_Q_FILTER_GAMES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_Q_FILTER_GAMES(Protocol_PS_Q_FILTER_GAMES&&);
			Protocol_PS_Q_FILTER_GAMES& operator=(Protocol_PS_Q_FILTER_GAMES&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_Q_FILTER_GAMES(const Protocol_PS_Q_FILTER_GAMES&) = default;
			Protocol_PS_Q_FILTER_GAMES& operator=(const Protocol_PS_Q_FILTER_GAMES&) = default;
#endif
#endif
		};

		struct Protocol_PS_A_FILTER_GAMES
		{
			//! 4< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::TableDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SngDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SagDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SeatFinderDataStruct</FIXME> >4<4>488 <FIXME>MLobbyNG::cli::ResultRanges</FIXME>  - numTourns< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >,numTableTypes< <FIXME>MLobbyNG::cli::TableDataStruct</FIXME> >,numSngTypes< <FIXME>MLobbyNG::cli::SngDataStruct</FIXME> >,numSagTypes< <FIXME>MLobbyNG::cli::SagDataStruct</FIXME> >,numZoomTypes< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> >,numSeatFinders< <FIXME>MLobbyNG::cli::SeatFinderDataStruct</FIXME> >,numGameOrder<gameOrder>,totalItems,minBuyIn,maxBuyIn, <FIXME>resultRanges</FIXME> 
			ThinAtf::LAtfVector< MLobbyNG::cli::TournDataStruct, 4 > tourns;
			ThinAtf::LAtfVector< MLobbyNG::cli::TableDataStruct, 4 > tableTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SngDataStruct, 4 > sngTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SagDataStruct, 4 > sagTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::ZoomDataStruct, 4 > zoomTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SeatFinderDataStruct, 4 > seatFinders;
			ThinAtf::LAtfVector< UINT32, 4 > gameOrder;
			INT32 totalItems;
			INT64 minBuyIn;
			INT64 maxBuyIn;
			MLobbyNG::cli::ResultRanges resultRanges;

			Protocol_PS_A_FILTER_GAMES();
			void clear();
			bool equals(const Protocol_PS_A_FILTER_GAMES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_A_FILTER_GAMES; }
			static const char *getMsgIdString() { return "PS_A_FILTER_GAMES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_A_FILTER_GAMES(Protocol_PS_A_FILTER_GAMES&&);
			Protocol_PS_A_FILTER_GAMES& operator=(Protocol_PS_A_FILTER_GAMES&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_A_FILTER_GAMES(const Protocol_PS_A_FILTER_GAMES&) = default;
			Protocol_PS_A_FILTER_GAMES& operator=(const Protocol_PS_A_FILTER_GAMES&) = default;
#endif
#endif
		};

		struct Protocol_PS_Q_GET_BRANDED_LOBBIES
		{
			// 4sb - currencyMask,country,isPM
			UINT32 currencyMask;
			PString country;
			bool isPM;

			Protocol_PS_Q_GET_BRANDED_LOBBIES();
			void clear();
			bool equals(const Protocol_PS_Q_GET_BRANDED_LOBBIES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_Q_GET_BRANDED_LOBBIES; }
			static const char *getMsgIdString() { return "PS_Q_GET_BRANDED_LOBBIES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_Q_GET_BRANDED_LOBBIES(Protocol_PS_Q_GET_BRANDED_LOBBIES&&);
			Protocol_PS_Q_GET_BRANDED_LOBBIES& operator=(Protocol_PS_Q_GET_BRANDED_LOBBIES&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_Q_GET_BRANDED_LOBBIES(const Protocol_PS_Q_GET_BRANDED_LOBBIES&) = default;
			Protocol_PS_Q_GET_BRANDED_LOBBIES& operator=(const Protocol_PS_Q_GET_BRANDED_LOBBIES&) = default;
#endif
#endif
		};

		struct Protocol_PS_A_GET_BRANDED_LOBBIES
		{
			//! 4< <FIXME>MLobbyNG::cli::BrandedLobbyInfo</FIXME> > - numLobbies< <FIXME>MLobbyNG::cli::BrandedLobbyInfo</FIXME> >
			ThinAtf::LAtfVector< MLobbyNG::cli::BrandedLobbyInfo, 4 > lobbies;

			Protocol_PS_A_GET_BRANDED_LOBBIES();
			void clear();
			bool equals(const Protocol_PS_A_GET_BRANDED_LOBBIES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_A_GET_BRANDED_LOBBIES; }
			static const char *getMsgIdString() { return "PS_A_GET_BRANDED_LOBBIES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_A_GET_BRANDED_LOBBIES(Protocol_PS_A_GET_BRANDED_LOBBIES&&);
			Protocol_PS_A_GET_BRANDED_LOBBIES& operator=(Protocol_PS_A_GET_BRANDED_LOBBIES&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_A_GET_BRANDED_LOBBIES(const Protocol_PS_A_GET_BRANDED_LOBBIES&) = default;
			Protocol_PS_A_GET_BRANDED_LOBBIES& operator=(const Protocol_PS_A_GET_BRANDED_LOBBIES&) = default;
#endif
#endif
		};

		struct Protocol_PS_Q_INIT_BRANDED_LOBBIES
		{

			Protocol_PS_Q_INIT_BRANDED_LOBBIES();
			void clear();
			bool equals(const Protocol_PS_Q_INIT_BRANDED_LOBBIES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_Q_INIT_BRANDED_LOBBIES; }
			static const char *getMsgIdString() { return "PS_Q_INIT_BRANDED_LOBBIES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_PS_A_INIT_BRANDED_LOBBIES
		{
			//! 4< <FIXME>MLobbyNG::cli::FullBrandedLobbyInfo</FIXME> > - numLobbies< <FIXME>MLobbyNG::cli::FullBrandedLobbyInfo</FIXME> >
			ThinAtf::LAtfVector< MLobbyNG::cli::FullBrandedLobbyInfo, 4 > lobbies;

			Protocol_PS_A_INIT_BRANDED_LOBBIES();
			void clear();
			bool equals(const Protocol_PS_A_INIT_BRANDED_LOBBIES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_A_INIT_BRANDED_LOBBIES; }
			static const char *getMsgIdString() { return "PS_A_INIT_BRANDED_LOBBIES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_A_INIT_BRANDED_LOBBIES(Protocol_PS_A_INIT_BRANDED_LOBBIES&&);
			Protocol_PS_A_INIT_BRANDED_LOBBIES& operator=(Protocol_PS_A_INIT_BRANDED_LOBBIES&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_A_INIT_BRANDED_LOBBIES(const Protocol_PS_A_INIT_BRANDED_LOBBIES&) = default;
			Protocol_PS_A_INIT_BRANDED_LOBBIES& operator=(const Protocol_PS_A_INIT_BRANDED_LOBBIES&) = default;
#endif
#endif
		};

		struct Protocol_PS_Q_ADMIN_UPDATE_LOBBIES
		{

			Protocol_PS_Q_ADMIN_UPDATE_LOBBIES();
			void clear();
			bool equals(const Protocol_PS_Q_ADMIN_UPDATE_LOBBIES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_Q_ADMIN_UPDATE_LOBBIES; }
			static const char *getMsgIdString() { return "PS_Q_ADMIN_UPDATE_LOBBIES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_PS_A_ADMIN_UPDATE_LOBBIES
		{
			// 2[s] - errCode[errMsg]
			INT16 errCode;

			PString errMsg;

			Protocol_PS_A_ADMIN_UPDATE_LOBBIES();
			void clear();
			bool equals(const Protocol_PS_A_ADMIN_UPDATE_LOBBIES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_A_ADMIN_UPDATE_LOBBIES; }
			static const char *getMsgIdString() { return "PS_A_ADMIN_UPDATE_LOBBIES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_A_ADMIN_UPDATE_LOBBIES(Protocol_PS_A_ADMIN_UPDATE_LOBBIES&&);
			Protocol_PS_A_ADMIN_UPDATE_LOBBIES& operator=(Protocol_PS_A_ADMIN_UPDATE_LOBBIES&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_A_ADMIN_UPDATE_LOBBIES(const Protocol_PS_A_ADMIN_UPDATE_LOBBIES&) = default;
			Protocol_PS_A_ADMIN_UPDATE_LOBBIES& operator=(const Protocol_PS_A_ADMIN_UPDATE_LOBBIES&) = default;
#endif
#endif
		};

		struct Protocol_PS_Q_GET_SUGGESTED_GAMES
		{
			//!  <FIXME>MLobbyNG::cli::SuggestedGames2SelectionFilter</FIXME>  <FIXME>MLobbyNG::cli::ClientMarkers</FIXME>  -  <FIXME>filter</FIXME> , <FIXME>clientMarkers</FIXME> 
			MLobbyNG::cli::SuggestedGames2SelectionFilter filter;
			MLobbyNG::cli::ClientMarkers clientMarkers;

			Protocol_PS_Q_GET_SUGGESTED_GAMES();
			void clear();
			bool equals(const Protocol_PS_Q_GET_SUGGESTED_GAMES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_Q_GET_SUGGESTED_GAMES; }
			static const char *getMsgIdString() { return "PS_Q_GET_SUGGESTED_GAMES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_Q_GET_SUGGESTED_GAMES(Protocol_PS_Q_GET_SUGGESTED_GAMES&&);
			Protocol_PS_Q_GET_SUGGESTED_GAMES& operator=(Protocol_PS_Q_GET_SUGGESTED_GAMES&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_Q_GET_SUGGESTED_GAMES(const Protocol_PS_Q_GET_SUGGESTED_GAMES&) = default;
			Protocol_PS_Q_GET_SUGGESTED_GAMES& operator=(const Protocol_PS_Q_GET_SUGGESTED_GAMES&) = default;
#endif
#endif
		};

		struct Protocol_PS_A_GET_SUGGESTED_GAMES
		{
			//! 4< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::TableDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SngDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SagDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SeatFinderDataStruct</FIXME> >4<4> - numTourns< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >,numTableTypes< <FIXME>MLobbyNG::cli::TableDataStruct</FIXME> >,numSngTypes< <FIXME>MLobbyNG::cli::SngDataStruct</FIXME> >,numSagTypes< <FIXME>MLobbyNG::cli::SagDataStruct</FIXME> >,numZoomTypes< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> >,numSeatFinders< <FIXME>MLobbyNG::cli::SeatFinderDataStruct</FIXME> >,numGameOrder<gameOrder>
			ThinAtf::LAtfVector< MLobbyNG::cli::TournDataStruct, 4 > tourns;
			ThinAtf::LAtfVector< MLobbyNG::cli::TableDataStruct, 4 > tableTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SngDataStruct, 4 > sngTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SagDataStruct, 4 > sagTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::ZoomDataStruct, 4 > zoomTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SeatFinderDataStruct, 4 > seatFinders;
			ThinAtf::LAtfVector< UINT32, 4 > gameOrder;

			Protocol_PS_A_GET_SUGGESTED_GAMES();
			void clear();
			bool equals(const Protocol_PS_A_GET_SUGGESTED_GAMES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_A_GET_SUGGESTED_GAMES; }
			static const char *getMsgIdString() { return "PS_A_GET_SUGGESTED_GAMES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_A_GET_SUGGESTED_GAMES(Protocol_PS_A_GET_SUGGESTED_GAMES&&);
			Protocol_PS_A_GET_SUGGESTED_GAMES& operator=(Protocol_PS_A_GET_SUGGESTED_GAMES&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_A_GET_SUGGESTED_GAMES(const Protocol_PS_A_GET_SUGGESTED_GAMES&) = default;
			Protocol_PS_A_GET_SUGGESTED_GAMES& operator=(const Protocol_PS_A_GET_SUGGESTED_GAMES&) = default;
#endif
#endif
		};

		struct Protocol_PS_Q_SEARCH_BY_NAME
		{
			//!  <FIXME>MLobbyNG::cli::NameSearchSelectionFilter</FIXME>  <FIXME>MLobbyNG::cli::FilterGamesResultCriteria</FIXME>  <FIXME>MLobbyNG::cli::ClientMarkers</FIXME>  -  <FIXME>filter</FIXME> , <FIXME>criteria</FIXME> , <FIXME>clientMarkers</FIXME> 
			MLobbyNG::cli::NameSearchSelectionFilter filter;
			MLobbyNG::cli::FilterGamesResultCriteria criteria;
			MLobbyNG::cli::ClientMarkers clientMarkers;

			Protocol_PS_Q_SEARCH_BY_NAME();
			void clear();
			bool equals(const Protocol_PS_Q_SEARCH_BY_NAME&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_Q_SEARCH_BY_NAME; }
			static const char *getMsgIdString() { return "PS_Q_SEARCH_BY_NAME"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_Q_SEARCH_BY_NAME(Protocol_PS_Q_SEARCH_BY_NAME&&);
			Protocol_PS_Q_SEARCH_BY_NAME& operator=(Protocol_PS_Q_SEARCH_BY_NAME&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_Q_SEARCH_BY_NAME(const Protocol_PS_Q_SEARCH_BY_NAME&) = default;
			Protocol_PS_Q_SEARCH_BY_NAME& operator=(const Protocol_PS_Q_SEARCH_BY_NAME&) = default;
#endif
#endif
		};

		struct Protocol_PS_A_SEARCH_BY_NAME
		{
			//! 4< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::TableDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SngDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SagDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> >4< <FIXME>MLobbyNG::cli::SeatFinderDataStruct</FIXME> >4<4> - numTourns< <FIXME>MLobbyNG::cli::TournDataStruct</FIXME> >,numTableTypes< <FIXME>MLobbyNG::cli::TableDataStruct</FIXME> >,numSngTypes< <FIXME>MLobbyNG::cli::SngDataStruct</FIXME> >,numSagTypes< <FIXME>MLobbyNG::cli::SagDataStruct</FIXME> >,numZoomTypes< <FIXME>MLobbyNG::cli::ZoomDataStruct</FIXME> >,numSeatFinders< <FIXME>MLobbyNG::cli::SeatFinderDataStruct</FIXME> >,numGameOrder<gameOrder>
			ThinAtf::LAtfVector< MLobbyNG::cli::TournDataStruct, 4 > tourns;
			ThinAtf::LAtfVector< MLobbyNG::cli::TableDataStruct, 4 > tableTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SngDataStruct, 4 > sngTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SagDataStruct, 4 > sagTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::ZoomDataStruct, 4 > zoomTypes;
			ThinAtf::LAtfVector< MLobbyNG::cli::SeatFinderDataStruct, 4 > seatFinders;
			ThinAtf::LAtfVector< UINT32, 4 > gameOrder;

			Protocol_PS_A_SEARCH_BY_NAME();
			void clear();
			bool equals(const Protocol_PS_A_SEARCH_BY_NAME&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_A_SEARCH_BY_NAME; }
			static const char *getMsgIdString() { return "PS_A_SEARCH_BY_NAME"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_A_SEARCH_BY_NAME(Protocol_PS_A_SEARCH_BY_NAME&&);
			Protocol_PS_A_SEARCH_BY_NAME& operator=(Protocol_PS_A_SEARCH_BY_NAME&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_A_SEARCH_BY_NAME(const Protocol_PS_A_SEARCH_BY_NAME&) = default;
			Protocol_PS_A_SEARCH_BY_NAME& operator=(const Protocol_PS_A_SEARCH_BY_NAME&) = default;
#endif
#endif
		};

		struct Protocol_PS_Q_GET_TICKET_COUNTS
		{
			// M(8) - M(gameMask)
			TournCountFilter filter;

			Protocol_PS_Q_GET_TICKET_COUNTS();
			void clear();
			bool equals(const Protocol_PS_Q_GET_TICKET_COUNTS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_Q_GET_TICKET_COUNTS; }
			static const char *getMsgIdString() { return "PS_Q_GET_TICKET_COUNTS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_PS_A_GET_TICKET_COUNTS
		{
			// 4<M(4sb4stt4)> - numTickets<M(ticketId,ticketName,multiTourn,price,currency,issued,expireAt,tournNumber)>
			ThinAtf::LAtfVector< TournTicketInfo, 4 > tickets;

			Protocol_PS_A_GET_TICKET_COUNTS();
			void clear();
			bool equals(const Protocol_PS_A_GET_TICKET_COUNTS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return PS_A_GET_TICKET_COUNTS; }
			static const char *getMsgIdString() { return "PS_A_GET_TICKET_COUNTS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_PS_A_GET_TICKET_COUNTS(Protocol_PS_A_GET_TICKET_COUNTS&&);
			Protocol_PS_A_GET_TICKET_COUNTS& operator=(Protocol_PS_A_GET_TICKET_COUNTS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_PS_A_GET_TICKET_COUNTS(const Protocol_PS_A_GET_TICKET_COUNTS&) = default;
			Protocol_PS_A_GET_TICKET_COUNTS& operator=(const Protocol_PS_A_GET_TICKET_COUNTS&) = default;
#endif
#endif
		};
	};
};

#endif
