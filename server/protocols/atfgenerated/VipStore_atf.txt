#include "VipStoreCommon.h"
#include "cashier.h"
#include "FppStoreOrder.h"

#define TOP_LEVEL_NAMESPACE VipStore

namespace cli
{
	struct VipStoreAlternateClientAddress
	{
		UINT32 addrId;
		PString userId maxlen 20;
		PString fullName maxlen 321;
		PString addr1 maxlen 321;
		PString addr2 maxlen 80;
		PString city maxlen 81;
		PString state maxlen 20;
		PString country maxlen 20;
		PString code maxlen 10;
		PString phone maxlen 100;
		PString fiscalCode maxlen 100 parseEndOptB4Me;
	};

	struct FppStoreOrder
	{
		UINT32 orderId;
		UINT32 price;
		PString userId;
		PString itemDescr;
		PString status;
		PString trackingId;
		PString comment;
		CommSrvTime when;
		vector<PString> specs;
		UINT32 itemId;
		PString shipper;
		PString trackingUrl;
		UINT32 itemQuantity;
		UINT32 cartId;
		UINT32 fulfillmentId;
		VipStoreAlternateClientAddress altAddr; 
		UINT32 flags;
	};

	struct OrderHistoryDigestData
	{
		UINT32 itemId;
		UINT32 numPurchased;
	};

	Message MSG_VIPSTORE_USER_ORDER_HISTORY2
	{
		PString notUsedStr maxlen 20; // used to be userid
	};

	Message MSG_VIPSTORE_USER_ORDER_HISTORY2_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errStr;
		}
		else
		{
			vector<FppStoreOrder> orders;
			vector<FppStoreOrder> preMidgrationOrders;
		}
	};


	Message MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST
	{
		PString userid maxlen 20;
	};

	Message MSG_VIPSTORE_USER_ORDER_HISTORY_DIGEST_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errStr;
		}
		else
		{
			vector<OrderHistoryDigestData> data;
		}
	};


	Message MSG_VIPSTORE_PREPURCHASE_ITEM
	{
		PString notUsedStr maxlen 20; // used to be userid
		UINT32 itemId;
		PString couponCode maxlen 40; // client does not limit the length correctly (should be 20 max)
		UINT32 itemQuantity min 1 max 2000;
		VipStoreAlternateClientAddress alternateAddress parseEndOptB4Me;
	};

	Message MSG_VIPSTORE_PREPURCHASE_ITEM_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errStr;
		}
		else
		{
			UINT32 itemCost;
			UINT32 couponDiscount;
			UINT32 refund; // not sure what this should be called?
		}
	};

	Message MSG_VIPSTORE_PURCHASE_ITEM
	{
		PString parsedUserId maxlen 20;
		UINT32 itemId;
		vector<PString> specs maxsize 1024;
		PString userPhone maxlen 100;
		PString couponCode maxlen 40; // client does not limit the length correctly (should be 20 max)
		UINT32 itemQuantity min 1 max 2000;
		VipStoreAlternateClientAddress alternateAddress parseEndOptB4Me;
	};

	Message MSG_VIPSTORE_PURCHASE_ITEM_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errStr;
		}
		else
		{
			UINT64 fppBalance;
			UINT32 totalCost;
			UINT32 discount;
			UINT32 couponRemainder;
			UINT32 giftCardSpecialType;
			bool isInstantBonus;
		}
	};


	MsgBodyStruct InvItemStockCli2
	{
		bool available;
		INT32 stockCount;
		bool unlimitedStock;
		vector<PString> specs;
	};

	Message MSG_VIPSTORE_INV_GET_ITEM_STOCK2
	{
		UINT32 itemId;
		UINT32 specialType min eFppStoreRegular max eFppStoreRegular;
		PString unusedCouponCode maxlen 21 parseEndOptB4Me; // this string is not used by server any more but current client still sends it
	};

	Message MSG_VIPSTORE_INV_GET_ITEM_STOCK2_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errStr;
		}
		else
		{
			vector<InvItemStockCli2> stocks;
		}
	};


	Message MSG_VIPSTORE_USER_CANCEL_ORDER
	{
		PString parsedUserId maxlen 20;
		UINT32 orderId;
	};

	// this may not be correct
	Message MSG_VIPSTORE_USER_CANCEL_ORDER_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errStr;
		}
		else
		{
			UINT32 userIntId;
		}
	};


	Message MSG_VIPSTORE_USER_CANCEL_ORDERS
	{
		PString parsedUserId maxlen 20;
		vector<UINT32> orderIds maxsize 1024;
	};

	// this may not be correct
	Message MSG_VIPSTORE_USER_CANCEL_ORDERS_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errStr;
		}
		else
		{
			UINT32 userIntId;
		}
	};


	Message VIPSTORE_GET_USER_ALT_ADDRESSES
	{
	};

	Message VIPSTORE_GET_USER_ALT_ADDRESSES_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errStr;
		}
		else
		{
			UINT32 maxSuggestedAltAddrLimit;
			vector<VipStoreAlternateClientAddress> altAddresses;
		}
	};


	Message VIPSTORE_GET_USER_ALT_ADDRESSES2
	{
		PString unusedStr maxlen 20 parseEndOptB4Me; // this string is not used by server any more but current client still sends it
	};

	Message VIPSTORE_GET_USER_ALT_ADDRESSES2_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errStr;
		}
		else
		{
			UINT32 maxSuggestedAltAddrLimit;
			vector<VipStoreAlternateClientAddress> altAddresses;
		}
	};


	Message VIPSTORE_OBSOLETE_USER_ALT_ADDRESS
	{
		UINT32 addrId;
	};

	Message VIPSTORE_OBSOLETE_USER_ALT_ADDRESS_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errStr;
		}
	};
};