/**
 * Common_atf_thin.h
 *
 * This file was auto-generated from Common_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin Common_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_COMMON_ATF_THIN_H
#define ATF_PROTOCOL_DEFFILE_COMMON_ATF_THIN_H

#include "clientplatforms.h"
#include "lobby.h"
#include "dbm.h"
#include "loginhelper.h"
#include "PBitmask.h"
#include "sitemasks.h"
#include "licensemask.h"


#define ATF_USER_NAME_MAX_LENGTH (USER_NAME_LEN-1)
#define ATF_TICKET_ADMISSION_MAX_LENGTH  50
#define ATF_MAX_PM_SCALE_LL              1000000000LL  	// 1e9
#define ATF_MAX_RESERVED_TICKETS         100           	// max of games in Sag (5)  and Sng (100)
#define MAX_VALUE_clientExtraInfoMask ((UINT32(cliExtraInfoMask_Last)<<1)-1) 	// enum ClientExtraInfoMask

#include "ThinAtfUserDefStructs.h"

namespace CommonThin
{
	namespace AtfShared
	{
		struct ConvRatesAndMarginsStruct	// ??? pending limits  // ??? and what about the format? Check it!!!
		{
			// 88884444s44s8844 - rateSrc,rateDst,rateMid,rateFin,mgnVal,amtMgnSrc,amtMgnDst,amtMgnUS,curSrc,amtSrc,amtSrcUS,curDst,amtDst,amtDstNoMgn,amtDstUS,intActionType
			UINT64 rateSrc;
			UINT64 rateDst;
			UINT64 rateMid;
			UINT64 rateFin;
			INT32 mgnVal;
			INT32 amtMgnSrc;
			INT32 amtMgnDst;
			INT32 amtMgnUS;
			PString curSrc;
			INT32 amtSrc;
			INT32 amtSrcUS;
			PString curDst;
			INT64 amtDst;
			INT64 amtDstNoMgn;
			INT32 amtDstUS;
			UINT32 intActionType;

			ConvRatesAndMarginsStruct();
			void clear();
			bool equals(const ConvRatesAndMarginsStruct&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			ConvRatesAndMarginsStruct(ConvRatesAndMarginsStruct&&);
			ConvRatesAndMarginsStruct& operator=(ConvRatesAndMarginsStruct&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			ConvRatesAndMarginsStruct(const ConvRatesAndMarginsStruct&) = default;
			ConvRatesAndMarginsStruct& operator=(const ConvRatesAndMarginsStruct&) = default;
#endif
#endif
		};

		struct CurrencyContextOptionalMsgBody
		{
			// M(t4<88884444s44s8844>) - M(srvTime,numConvRatesAndMargins<rateSrc,rateDst,rateMid,rateFin,mgnVal,amtMgnSrc,amtMgnDst,amtMgnUS,curSrc,amtSrc,amtSrcUS,curDst,amtDst,amtDstNoMgn,amtDstUS,intActionType>)
			SrvTime srvTime;
			ThinAtf::LAtfVector< ConvRatesAndMarginsStruct, 4 > convRatesAndMargins;	// ??? pending maxsize

			CurrencyContextOptionalMsgBody();
			void clear();
			bool equals(const CurrencyContextOptionalMsgBody&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			CurrencyContextOptionalMsgBody(CurrencyContextOptionalMsgBody&&);
			CurrencyContextOptionalMsgBody& operator=(CurrencyContextOptionalMsgBody&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			CurrencyContextOptionalMsgBody(const CurrencyContextOptionalMsgBody&) = default;
			CurrencyContextOptionalMsgBody& operator=(const CurrencyContextOptionalMsgBody&) = default;
#endif
#endif
		};

		struct UserTicketDataBase
		{
			// s4 - admissionId,reserved
			PString admissionId;
			UINT32 reserved;

			UserTicketDataBase();
			void clear();
			bool equals(const UserTicketDataBase&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UserTicketDataBase(UserTicketDataBase&&);
			UserTicketDataBase& operator=(UserTicketDataBase&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UserTicketDataBase(const UserTicketDataBase&) = default;
			UserTicketDataBase& operator=(const UserTicketDataBase&) = default;
#endif
#endif
		};

		struct LoginExtra
		{
			// M(ssssss444444s4444sss) - M(macAddr,volumeLabel,installId,machineGuid,adapterGuid,userExtraId,clientSiteId,clientPlatform,clientExtraInfoMask,clientType,clientDevice,clientVersion,routerMacAddr,clientBrand,osId,appTypeId,productId,installId2,operatorId,osVersion)

			PString macAddr;
			PString volumeLabel;
			PString installId;
			PString machineGuid;
			PString adapterGuid;
			PString userExtraId;
			UINT32 clientSiteId;	// enum Sites in sites.h
			UINT32 clientPlatform;	// enum ClientPlatform in clientplatforms.h
			UINT32 clientExtraInfoMask;	// enum ClientExtraInfoMask

			// PYR-24582
			UINT32 clientType;	// enum ClientType in clientplatforms.h
			UINT32 clientDevice;	// enum ClientDevice in clientplatforms.h

			// PYR-25260
			UINT32 clientVersion;

			// PYR-29604
			PString routerMacAddr;

			// PYR-37793
			UINT32 clientBrand;	// enum BrandTypes in brands.h

			// PYR-38296
			UINT32 osId;
			UINT32 appTypeId;	// enum AppTypeId in clientplatforms.h
			UINT32 productId;	// enum ProductId in clientplatforms.h

			// PYR-51188
			PString installId2;

			// PYR-52000
			PString operatorId;

			// PYR-52518
			PString osVersion;

			LoginExtra();
			void clear();
			bool equals(const LoginExtra&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

			// @Override
			LoginExtra( const ClientLoginExtras2& loginExtras_ );

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			LoginExtra(LoginExtra&&);
			LoginExtra& operator=(LoginExtra&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			LoginExtra(const LoginExtra&) = default;
			LoginExtra& operator=(const LoginExtra&) = default;
#endif
#endif
		};

		struct UserPropertyBody
		{
			// M(44st) - M(propType,propInt,propStr,propWhen)
			INT32 propType;	// eUserPropertyType
			INT32 propInt;
			PString propStr;
			CommSrvTime propWhen;

			UserPropertyBody();
			void clear();
			bool equals(const UserPropertyBody&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UserPropertyBody(UserPropertyBody&&);
			UserPropertyBody& operator=(UserPropertyBody&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UserPropertyBody(const UserPropertyBody&) = default;
			UserPropertyBody& operator=(const UserPropertyBody&) = default;
#endif
#endif
		};
		// MG: moved from regulator_atf.txt in 2019.Main.07 to be used in other components.
		// Legacy struct to support existing client requests
		// all new requests/replies to use Common::AtfShared::UserPropertyBody
		struct UserPropertyLegacy	// request
		{
			// 44st - propType,propInt,propStr,propWhen
			INT32 propType;	// eUserPropertyType
			INT32 propInt;
			PString propStr;
			CommSrvTime propWhen;

			UserPropertyLegacy();
			void clear();
			bool equals(const UserPropertyLegacy&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UserPropertyLegacy(UserPropertyLegacy&&);
			UserPropertyLegacy& operator=(UserPropertyLegacy&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UserPropertyLegacy(const UserPropertyLegacy&) = default;
			UserPropertyLegacy& operator=(const UserPropertyLegacy&) = default;
#endif
#endif
		};

		struct UserCurrencyAccount
		{
			// s4444 - currency,chips,owedChips,tChips,wChips
			PString currency;
			INT32 chips;
			INT32 owedChips;
			INT32 tChips;
			INT32 wChips;

			UserCurrencyAccount();
			void clear();
			bool equals(const UserCurrencyAccount&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UserCurrencyAccount(UserCurrencyAccount&&);
			UserCurrencyAccount& operator=(UserCurrencyAccount&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UserCurrencyAccount(const UserCurrencyAccount&) = default;
			UserCurrencyAccount& operator=(const UserCurrencyAccount&) = default;
#endif
#endif
		};

		struct UserCurrencyAccounts
		{
			// s44444<s4444> - currency,chips,owedChips,tChips,wChips,numExAccounts<currency,chips,owedChips,tChips,wChips>
			UserCurrencyAccount defaultAccount;
			ThinAtf::LAtfVector< UserCurrencyAccount, 4 > exAccounts;

			UserCurrencyAccounts();
			void clear();
			bool equals(const UserCurrencyAccounts&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UserCurrencyAccounts(UserCurrencyAccounts&&);
			UserCurrencyAccounts& operator=(UserCurrencyAccounts&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UserCurrencyAccounts(const UserCurrencyAccounts&) = default;
			UserCurrencyAccounts& operator=(const UserCurrencyAccounts&) = default;
#endif
#endif
		};

		struct PaysystemMask
		{
			// 4488 - mask,mask2,mask3,mask4
			UINT32 mask;	// USERS.DEPOSITMASK
			UINT32 mask2;	// USERS.DEPOSITMASK2
			UINT64 mask3;	// USERS.DEPOSITMASK3
			UINT64 mask4;	// USERS.DEPOSITMASK4

			PaysystemMask();
			void clear();
			bool equals(const PaysystemMask&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct PlayerPointsProgram
		{
			// 888d4 - lt,yr,mo,statusSet,milliCent
			// counters: lifeTime, yearly, monthly; Not expected to ever exceed 2B boundary; DB storage is 32 bits - LZ OKed
			INT64 lt;
			INT64 yr;
			INT64 mo;
			SrvDate statusSet;
			INT32 milliCent;	// PYR-34330 stored in DB as SmallInt, never exceeds 1000

			PlayerPointsProgram();
			void clear();
			bool equals(const PlayerPointsProgram&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct User
		{
			// ss44444sssssssss44s442t4sst4s44444tt44d4844s4ssss4t8222484s44444<s4444>88sss44M(4488)M(4488)M(4488)4444d4884s8M(888d4)M(888d4)844M(m4)M(2s) - id,dummy,privileges,chips_dummy,playChips32,tChips_dummy,wChips_dummy,fullName,email,addr_1,addr_2,city,state,country,zipCode,userInstallId,imageId,flags,prevUserId,fpp_,ltFpp_,unique,registered,userIntId,category,phone,firstDeposit,hybridSiteId,sid,visited,fppCents_,vipStatus,vipCounter1_,vipCounter2_,vipStatusSet,firstTransfer,owedChips_dummy,depositMask32,birthDate,locale,privileges2,clearedMask32,emLocale,encrPwd,timezone,currency_dummy,firstName,lastName,fiscalCode,licenseId,gracePeriodUntil_dummy,flags2,ltFppCents_,vipCounter1Cents_,vipCounter2Cents_,adminFlags,overcreditMask64,originalUserIntId,currency,chips,owedChips,tChips,wChips,numExAccounts<currency,chips,owedChips,tChips,wChips>,depositMask64,clearedMask64,sex,normalizedUserId,mobile,licenseSpecificLimit1,licenseSpecificCounter2,M(mask,mask2,mask3,mask4),M(mask,mask2,mask3,mask4),M(mask,mask2,mask3,mask4),vipCounter3InCents_,beMoneyIn,beMoneyOut,licenseSpecificAmount3,vipStatusUntil,platformsUsed,facebookIntId,playChips,blockingCode,idExtension,privileges3,M(lt,yr,mo,statusSet,milliCent),M(lt,yr,mo,statusSet,milliCent),flags3,brandsUsed,nac2,M(visitedEx,regSiteId),M(operatorId,promoName)
			// From User::_parseUserOlap
			PString id;
			PString dummy;
			UINT32 privileges;
			INT32 chips_dummy;
			INT32 playChips32;
			INT32 tChips_dummy;
			INT32 wChips_dummy;
			PString fullName;
			PString email;
			PString addr_1;
			PString addr_2;
			PString city;
			PString state;
			PString country;
			PString zipCode;
			PString userInstallId;
			UINT32 imageId;
			UINT32 flags;
			PString prevUserId;
			INT32 fpp_;
			INT32 ltFpp_;
			INT16 unique;
			SrvTime registered;
			UINT32 userIntId;
			PString category;
			PString phone;
			SrvTime firstDeposit;
			UINT32 hybridSiteId;	//	PYR-113404.
			PString sid;
			UINT32 visited;
			INT32 fppCents_;
			INT32 vipStatus;
			INT32 vipCounter1_;
			INT32 vipCounter2_;
			SrvTime vipStatusSet;
			SrvTime firstTransfer;
			INT32 owedChips_dummy;
			UINT32 depositMask32;
			SrvDate birthDate;
			UINT32 locale;
			UINT64 privileges2;
			UINT32 clearedMask32;
			UINT32 emLocale;
			PString encrPwd;
			UINT32 timezone;
			PString currency_dummy;
			PString firstName;
			PString lastName;
			PString fiscalCode;
			UINT32 licenseId;
			SrvTime gracePeriodUntil_dummy;
			UINT64 flags2;
			INT16 ltFppCents_;
			INT16 vipCounter1Cents_;
			INT16 vipCounter2Cents_;
			UINT32 adminFlags;
			UINT64 overcreditMask64;
			UINT32 originalUserIntId;
			UserCurrencyAccounts balance;
			UINT64 depositMask64;
			UINT64 clearedMask64;
			PString sex;
			PString normalizedUserId;
			PString mobile;
			INT32 licenseSpecificLimit1;
			INT32 licenseSpecificCounter2;
			PaysystemMask depositMask;

			PaysystemMask clearedMask;

			PaysystemMask overcreditMask;

			INT32 vipCounter3InCents_;
			INT32 beMoneyIn;
			INT32 beMoneyOut;
			INT32 licenseSpecificAmount3;
			SrvDate vipStatusUntil;
			UINT32 platformsUsed;
			UINT64 facebookIntId;
			INT64 playChips;
			UINT32 blockingCode;
			PString idExtension;
			UINT64 privileges3;
			PlayerPointsProgram cpp;

			PlayerPointsProgram spp;

			UINT64 flags3;
			UINT32 brandsUsed;
			INT32 nac2;

			PSiteMask visitedEx;
			UINT32 regSiteId;	//	PYR-113404.

			// #ATTENTION: Conditionally parse all new elements

			// From User::_parseUserExtraInfo

			INT16 operatorId;
			PString promoName;

			// #ATTENTION: Conditionally parse all new elements

			// #ATTENTION: Do not add elements here!
			User();
			void clear();
			bool equals(const User&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			User(User&&);
			User& operator=(User&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			User(const User&) = default;
			User& operator=(const User&) = default;
#endif
#endif

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody1(CommMsgParser& _parser);
			static void validateAnonymousMsgBody1(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody2(CommMsgParser& _parser);
			static void validateAnonymousMsgBody2(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody3(CommMsgParser& _parser);
			static void validateAnonymousMsgBody3(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody4(CommMsgParser& _parser);
			static void validateAnonymousMsgBody4(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody5(CommMsgParser& _parser);
			static void validateAnonymousMsgBody5(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody6(CommMsgParser& _parser);
			static void validateAnonymousMsgBody6(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct UserWithProperties
		{
			// M(ss44444sssssssss44s442t4sst4s44444tt44d4844s4ssss4t8222484s44444<s4444>88sss44M(4488)M(4488)M(4488)4444d4884s8M(888d4)M(888d4)844M(m4)M(2s))M(4<44st>) - M(id,dummy,privileges,chips_dummy,playChips32,tChips_dummy,wChips_dummy,fullName,email,addr_1,addr_2,city,state,country,zipCode,userInstallId,imageId,flags,prevUserId,fpp_,ltFpp_,unique,registered,userIntId,category,phone,firstDeposit,hybridSiteId,sid,visited,fppCents_,vipStatus,vipCounter1_,vipCounter2_,vipStatusSet,firstTransfer,owedChips_dummy,depositMask32,birthDate,locale,privileges2,clearedMask32,emLocale,encrPwd,timezone,currency_dummy,firstName,lastName,fiscalCode,licenseId,gracePeriodUntil_dummy,flags2,ltFppCents_,vipCounter1Cents_,vipCounter2Cents_,adminFlags,overcreditMask64,originalUserIntId,currency,chips,owedChips,tChips,wChips,numExAccounts<currency,chips,owedChips,tChips,wChips>,depositMask64,clearedMask64,sex,normalizedUserId,mobile,licenseSpecificLimit1,licenseSpecificCounter2,M(mask,mask2,mask3,mask4),M(mask,mask2,mask3,mask4),M(mask,mask2,mask3,mask4),vipCounter3InCents_,beMoneyIn,beMoneyOut,licenseSpecificAmount3,vipStatusUntil,platformsUsed,facebookIntId,playChips,blockingCode,idExtension,privileges3,M(lt,yr,mo,statusSet,milliCent),M(lt,yr,mo,statusSet,milliCent),flags3,brandsUsed,nac2,M(visitedEx,regSiteId),M(operatorId,promoName)),M(numUserProps<propType,propInt,propStr,propWhen>)

			User user;

			ThinAtf::LAtfVector< UserPropertyLegacy, 4 > userProps;

			UserWithProperties();
			void clear();
			bool equals(const UserWithProperties&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UserWithProperties(UserWithProperties&&);
			UserWithProperties& operator=(UserWithProperties&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UserWithProperties(const UserWithProperties&) = default;
			UserWithProperties& operator=(const UserWithProperties&) = default;
#endif
#endif

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
			void parseAnonymousMsgBody1(CommMsgParser& _parser);
			static void validateAnonymousMsgBody1(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};
	};
};

#endif
