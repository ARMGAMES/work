/**
 * zoomreplay_atf_thin.cpp
 *
 * This file was auto-generated from zoomreplay_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin zoomreplay_atf.txt
 */
 
#include "zoomreplay_atf_thin.h"

//=================================================================
//                Protocol_MSG_TABLE_LOGIN
//=================================================================

ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN::Protocol_MSG_TABLE_LOGIN()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN::Protocol_MSG_TABLE_LOGIN(Protocol_MSG_TABLE_LOGIN&& _o)
	: user(std::move(_o.user))
	, clientSiteId(std::move(_o.clientSiteId))
	, notShowWhenAllIn(std::move(_o.notShowWhenAllIn))
	, sitOutNextHand(std::move(_o.sitOutNextHand))
	, useAllInitStacks(std::move(_o.useAllInitStacks))
{
}

ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN& ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN::operator=(Protocol_MSG_TABLE_LOGIN&& _o)
{
	if(this != &_o)
	{
		user = std::move(_o.user);
		clientSiteId = std::move(_o.clientSiteId);
		notShowWhenAllIn = std::move(_o.notShowWhenAllIn);
		sitOutNextHand = std::move(_o.sitOutNextHand);
		useAllInitStacks = std::move(_o.useAllInitStacks);
	}
	return *this;
}

#endif

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN::clear()
{
	user.clear();
	clientSiteId = 0;
	notShowWhenAllIn = false;
	sitOutNextHand = false;
	useAllInitStacks = false;
}

bool ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN::equals(const Protocol_MSG_TABLE_LOGIN& _o) const
{
	return user.equals(_o.user) &&
		clientSiteId == _o.clientSiteId &&
		notShowWhenAllIn == _o.notShowWhenAllIn &&
		sitOutNextHand == _o.sitOutNextHand &&
		useAllInitStacks == _o.useAllInitStacks;
}

const char *ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_LOGIN).append(")");
	_buf.append(',');
	_buf.append("user=");
	_buf.append(user);
	_buf.append(',');
	_buf.append("clientSiteId=");
	_buf.appendUint(clientSiteId);
	_buf.append(',');
	_buf.append("notShowWhenAllIn=");
	_buf.appendUint(notShowWhenAllIn);
	_buf.append(',');
	_buf.append("sitOutNextHand=");
	_buf.appendUint(sitOutNextHand);
	_buf.append(',');
	_buf.append("useAllInitStacks=");
	_buf.appendUint(useAllInitStacks);
	return _buf.c_str();
}

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(user);
	_msg.composeUINT32(clientSiteId);
	_msg.composeBOOL(notShowWhenAllIn);
	_msg.composeBOOL(sitOutNextHand);
	_msg.composeBOOL(useAllInitStacks);
}

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(user);
	_parser.parseUINT32(clientSiteId);
	_parser.parseBOOL(notShowWhenAllIn);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(sitOutNextHand);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(useAllInitStacks);
}

/*static*/ void ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_LOGIN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "user"); size_t szUser = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "user", szUser, 20, _checker, __FILE__, __LINE__);
	UINT32 clientSiteId; _parser.parseUINT32(clientSiteId);
	AtfValidator::validateIntMax(_descr, "clientSiteId", clientSiteId, PokerStars_Last, _checker, __FILE__, __LINE__);
	bool notShowWhenAllIn; _parser.parseBOOL(notShowWhenAllIn);
	AtfValidator::validateInt(_descr, "notShowWhenAllIn", notShowWhenAllIn, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool sitOutNextHand; _parser.parseBOOL(sitOutNextHand);
	AtfValidator::validateInt(_descr, "sitOutNextHand", sitOutNextHand, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool useAllInitStacks; _parser.parseBOOL(useAllInitStacks);
	AtfValidator::validateInt(_descr, "useAllInitStacks", useAllInitStacks, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_LOGIN_REPLY
//=================================================================

ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN_REPLY::Protocol_MSG_TABLE_LOGIN_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN_REPLY::Protocol_MSG_TABLE_LOGIN_REPLY(Protocol_MSG_TABLE_LOGIN_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, seat(std::move(_o.seat))
	, sittingOut(std::move(_o.sittingOut))
	, clientIP(std::move(_o.clientIP))
	, privilege(std::move(_o.privilege))
	, clientMsg_txtEx(std::move(_o.clientMsg_txtEx))
	, autoRebuyOptions(std::move(_o.autoRebuyOptions))
	, autoRebuyBigBets(std::move(_o.autoRebuyBigBets))
	, autoRebuyFallUnderBigBets(std::move(_o.autoRebuyFallUnderBigBets))
	, autoRebuyFallUnderPercents(std::move(_o.autoRebuyFallUnderPercents))
	, playerRITFavored(std::move(_o.playerRITFavored))
	, campingPreventionEnabled(std::move(_o.campingPreventionEnabled))
	, isTableDealingHands(std::move(_o.isTableDealingHands))
	, campingCountingDownSec(std::move(_o.campingCountingDownSec))
{
}

ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN_REPLY& ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN_REPLY::operator=(Protocol_MSG_TABLE_LOGIN_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		seat = std::move(_o.seat);
		sittingOut = std::move(_o.sittingOut);
		clientIP = std::move(_o.clientIP);
		privilege = std::move(_o.privilege);
		clientMsg_txtEx = std::move(_o.clientMsg_txtEx);
		autoRebuyOptions = std::move(_o.autoRebuyOptions);
		autoRebuyBigBets = std::move(_o.autoRebuyBigBets);
		autoRebuyFallUnderBigBets = std::move(_o.autoRebuyFallUnderBigBets);
		autoRebuyFallUnderPercents = std::move(_o.autoRebuyFallUnderPercents);
		playerRITFavored = std::move(_o.playerRITFavored);
		campingPreventionEnabled = std::move(_o.campingPreventionEnabled);
		isTableDealingHands = std::move(_o.isTableDealingHands);
		campingCountingDownSec = std::move(_o.campingCountingDownSec);
	}
	return *this;
}

#endif

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
	seat = 0;
	sittingOut = 0;
	clientIP.clear();
	privilege = 0;
	clientMsg_txtEx.clear();
	autoRebuyOptions = 0;
	autoRebuyBigBets = 0;
	autoRebuyFallUnderBigBets = 0;
	autoRebuyFallUnderPercents = 0;
	playerRITFavored = false;
	campingPreventionEnabled = false;
	isTableDealingHands = false;
	campingCountingDownSec = 0;
}

bool ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN_REPLY::equals(const Protocol_MSG_TABLE_LOGIN_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		seat == _o.seat &&
		sittingOut == _o.sittingOut &&
		privilege == _o.privilege &&
		clientMsg_txtEx.equals(_o.clientMsg_txtEx) &&
		autoRebuyOptions == _o.autoRebuyOptions &&
		autoRebuyBigBets == _o.autoRebuyBigBets &&
		autoRebuyFallUnderBigBets == _o.autoRebuyFallUnderBigBets &&
		autoRebuyFallUnderPercents == _o.autoRebuyFallUnderPercents &&
		playerRITFavored == _o.playerRITFavored &&
		campingPreventionEnabled == _o.campingPreventionEnabled &&
		isTableDealingHands == _o.isTableDealingHands &&
		campingCountingDownSec == _o.campingCountingDownSec;
}

const char *ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_LOGIN_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendUint(errCode);
	_buf.append(',');
	_buf.append("errStr=");
	_buf.append(errStr);
	_buf.append(',');
	_buf.append("seat=");
	_buf.appendInt(seat);
	_buf.append(',');
	_buf.append("sittingOut=");
	_buf.appendUint(sittingOut);
	_buf.append(',');
	_buf.append("clientIP=");
	_buf.append(clientIP);
	_buf.append(',');
	_buf.append("privilege=");
	_buf.appendUint(privilege);
	_buf.append(',');
	_buf.append("clientMsg_txtEx=");
	clientMsg_txtEx.toTraceString(_buf);
	_buf.append(',');
	_buf.append("autoRebuyOptions=");
	_buf.appendInt(autoRebuyOptions);
	_buf.append(',');
	_buf.append("autoRebuyBigBets=");
	_buf.appendUint(autoRebuyBigBets);
	_buf.append(',');
	_buf.append("autoRebuyFallUnderBigBets=");
	_buf.appendUint(autoRebuyFallUnderBigBets);
	_buf.append(',');
	_buf.append("autoRebuyFallUnderPercents=");
	_buf.appendUint(autoRebuyFallUnderPercents);
	_buf.append(',');
	_buf.append("playerRITFavored=");
	_buf.appendUint(playerRITFavored);
	_buf.append(',');
	_buf.append("campingPreventionEnabled=");
	_buf.appendUint(campingPreventionEnabled);
	_buf.append(',');
	_buf.append("isTableDealingHands=");
	_buf.appendUint(isTableDealingHands);
	_buf.append(',');
	_buf.append("campingCountingDownSec=");
	_buf.appendUint(campingCountingDownSec);
	return _buf.c_str();
}

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errCode);
	_msg.composeString(errStr);
	_msg.composeINT8(seat);
	_msg.composeBYTE(sittingOut);
	_msg.composeString(clientIP);
	_msg.composeUINT32(privilege);
	_msg.composeMsgBody(clientMsg_txtEx);
	_msg.composeINT8(autoRebuyOptions);
	_msg.composeUINT16(autoRebuyBigBets);
	_msg.composeUINT16(autoRebuyFallUnderBigBets);
	_msg.composeUINT16(autoRebuyFallUnderPercents);
	_msg.composeBOOL(playerRITFavored);
	_msg.composeBOOL(campingPreventionEnabled);
	_msg.composeBOOL(isTableDealingHands);
	_msg.composeUINT16(campingCountingDownSec);
}

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errCode);
	_parser.parseStringP(errStr);
	_parser.parseINT8(seat);
	_parser.parseBYTE(sittingOut);
	_parser.parseStringP(clientIP);
	_parser.parseUINT32(privilege);
	_parser.parseMsgBody(clientMsg_txtEx);
	_parser.parseINT8(autoRebuyOptions);
	_parser.parseUINT16(autoRebuyBigBets);
	_parser.parseUINT16(autoRebuyFallUnderBigBets);
	_parser.parseUINT16(autoRebuyFallUnderPercents);
	_parser.parseBOOL(playerRITFavored);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(campingPreventionEnabled);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(isTableDealingHands);
	if(_parser.parseEnded()) return;
	_parser.parseUINT16(campingCountingDownSec);
}

/*static*/ void ZoomReplay::cli::Protocol_MSG_TABLE_LOGIN_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_LOGIN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errCode; _parser.parseBYTE(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	INT8 seat; _parser.parseINT8(seat);
	AtfValidator::validateInt(_descr, "seat", seat, _checker, __FILE__, __LINE__);
	BYTE sittingOut; _parser.parseBYTE(sittingOut);
	AtfValidator::validateInt(_descr, "sittingOut", sittingOut, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "clientIP"); size_t szClientIP = strlen(_dummy);
	AtfValidator::validateInt(_descr, "clientIP", szClientIP, _checker, __FILE__, __LINE__);
	UINT32 privilege; _parser.parseUINT32(privilege);
	AtfValidator::validateInt(_descr, "privilege", privilege, _checker, __FILE__, __LINE__);
	size_t szClientMsg_txtEx; _parser.skipMsgBody(szClientMsg_txtEx);  /*clientMsg_txtEx*/
	AtfValidator::validateInt(_descr, "clientMsg_txtEx", szClientMsg_txtEx, _checker, __FILE__, __LINE__);
	INT8 autoRebuyOptions; _parser.parseINT8(autoRebuyOptions);
	AtfValidator::validateInt(_descr, "autoRebuyOptions", autoRebuyOptions, _checker, __FILE__, __LINE__);
	UINT16 autoRebuyBigBets; _parser.parseUINT16(autoRebuyBigBets);
	AtfValidator::validateInt(_descr, "autoRebuyBigBets", autoRebuyBigBets, _checker, __FILE__, __LINE__);
	UINT16 autoRebuyFallUnderBigBets; _parser.parseUINT16(autoRebuyFallUnderBigBets);
	AtfValidator::validateInt(_descr, "autoRebuyFallUnderBigBets", autoRebuyFallUnderBigBets, _checker, __FILE__, __LINE__);
	UINT16 autoRebuyFallUnderPercents; _parser.parseUINT16(autoRebuyFallUnderPercents);
	AtfValidator::validateInt(_descr, "autoRebuyFallUnderPercents", autoRebuyFallUnderPercents, _checker, __FILE__, __LINE__);
	bool playerRITFavored; _parser.parseBOOL(playerRITFavored);
	AtfValidator::validateInt(_descr, "playerRITFavored", playerRITFavored, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool campingPreventionEnabled; _parser.parseBOOL(campingPreventionEnabled);
	AtfValidator::validateInt(_descr, "campingPreventionEnabled", campingPreventionEnabled, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	bool isTableDealingHands; _parser.parseBOOL(isTableDealingHands);
	AtfValidator::validateInt(_descr, "isTableDealingHands", isTableDealingHands, _checker, __FILE__, __LINE__);
	if(_parser.parseEnded()) return;
	UINT16 campingCountingDownSec; _parser.parseUINT16(campingCountingDownSec);
	AtfValidator::validateInt(_descr, "campingCountingDownSec", campingCountingDownSec, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_LOGOUT
//=================================================================

ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT::Protocol_MSG_TABLE_LOGOUT()
{
	clear();
}

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT::clear()
{
}

bool ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT::equals(const Protocol_MSG_TABLE_LOGOUT& _o) const
{
	return true;
}

const char *ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_LOGOUT).append(")");
	return _buf.c_str();
}

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT::composeMsg(CommMsgBody& _msg) const
{
}

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_LOGOUT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_LOGOUT_REPLY
//=================================================================

ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT_REPLY::Protocol_MSG_TABLE_LOGOUT_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT_REPLY::Protocol_MSG_TABLE_LOGOUT_REPLY(Protocol_MSG_TABLE_LOGOUT_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
{
}

ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT_REPLY& ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT_REPLY::operator=(Protocol_MSG_TABLE_LOGOUT_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
	}
	return *this;
}

#endif

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT_REPLY::clear()
{
	errCode = 0;
	errStr.clear();
}

bool ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT_REPLY::equals(const Protocol_MSG_TABLE_LOGOUT_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errStr.equals(_o.errStr);
}

const char *ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_LOGOUT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendUint(errCode);
	_buf.append(',');
	_buf.append("errStr=");
	_buf.append(errStr);
	return _buf.c_str();
}

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(errCode);
	_msg.composeString(errStr);
}

void ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(errCode);
	_parser.parseStringP(errStr);
}

/*static*/ void ZoomReplay::cli::Protocol_MSG_TABLE_LOGOUT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_LOGOUT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	BYTE errCode; _parser.parseBYTE(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_CHAT2
//=================================================================

ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2::Protocol_MSG_TABLE_CHAT2()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2::Protocol_MSG_TABLE_CHAT2(Protocol_MSG_TABLE_CHAT2&& _o)
	: chat(std::move(_o.chat))
{
}

ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2& ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2::operator=(Protocol_MSG_TABLE_CHAT2&& _o)
{
	if(this != &_o)
	{
		chat = std::move(_o.chat);
	}
	return *this;
}

#endif

void ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2::clear()
{
	chat.clear();
}

bool ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2::equals(const Protocol_MSG_TABLE_CHAT2& _o) const
{
	return chat.equals(_o.chat);
}

const char *ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_CHAT2).append(")");
	_buf.append(',');
	_buf.append("chat=");
	_buf.append(chat);
	return _buf.c_str();
}

void ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(chat);
}

void ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(chat);
}

/*static*/ void ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_CHAT2";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "chat"); size_t szChat = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "chat", szChat, MAX_CHAT_LEN, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_TABLE_CHAT2_REPLY
//=================================================================

ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2_REPLY::Protocol_MSG_TABLE_CHAT2_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2_REPLY::Protocol_MSG_TABLE_CHAT2_REPLY(Protocol_MSG_TABLE_CHAT2_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errMsgBody(std::move(_o.errMsgBody))
	, chatMsg(std::move(_o.chatMsg))
{
}

ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2_REPLY& ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2_REPLY::operator=(Protocol_MSG_TABLE_CHAT2_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errMsgBody = std::move(_o.errMsgBody);
		chatMsg = std::move(_o.chatMsg);
	}
	return *this;
}

#endif

void ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2_REPLY::clear()
{
	errCode = 0;
	errMsgBody.clear();
	chatMsg.clear();
}

bool ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2_REPLY::equals(const Protocol_MSG_TABLE_CHAT2_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errMsgBody.equals(_o.errMsgBody) &&
		chatMsg.equals(_o.chatMsg);
}

const char *ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_TABLE_CHAT2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendUint(errCode);
	_buf.append(',');
	_buf.append("errMsgBody=");
	errMsgBody.toTraceString(_buf);
	_buf.append(',');
	_buf.append("chatMsg=");
	_buf.append(chatMsg);
	return _buf.c_str();
}

void ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(errCode);
	_msg.composeMsgBody(errMsgBody);
	_msg.composeString(chatMsg);
}

void ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(errCode);
	_parser.parseMsgBody(errMsgBody);
	_parser.parseStringP(chatMsg);
}

/*static*/ void ZoomReplay::cli::Protocol_MSG_TABLE_CHAT2_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_TABLE_CHAT2_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT16 errCode; _parser.parseUINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	size_t szErrMsgBody; _parser.skipMsgBody(szErrMsgBody);  /*errMsgBody*/
	AtfValidator::validateInt(_descr, "errMsgBody", szErrMsgBody, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "chatMsg"); size_t szChatMsg = strlen(_dummy);
	AtfValidator::validateInt(_descr, "chatMsg", szChatMsg, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool ZoomReplay::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "cli"))
	{
		switch(_msgId)
		{
			case MSG_TABLE_CHAT2: cli::Protocol_MSG_TABLE_CHAT2::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_CHAT2_REPLY: cli::Protocol_MSG_TABLE_CHAT2_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_LOGIN: cli::Protocol_MSG_TABLE_LOGIN::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_LOGIN_REPLY: cli::Protocol_MSG_TABLE_LOGIN_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_LOGOUT: cli::Protocol_MSG_TABLE_LOGOUT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_TABLE_LOGOUT_REPLY: cli::Protocol_MSG_TABLE_LOGOUT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

