#include "MsgAuthPlayer.h"
#include "auth.h"

#define TOP_LEVEL_NAMESPACE Authserver

/*
	IMPORTANT: All the reply messages (*_A_*) are not tested by either creator of this file or QA.
	If client wants to use them, they must be thoroughly tested. Also server's notification messages
	to client are not included.
*/

namespace cli
{
	Message AUTH_Q_LOGIN_RSA
	{
		PString rsaPin maxlen 10;
		PString rsaCode maxlen 10;
	};
	Message AUTH_A_LOGIN_RSA
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	Message AUTH_Q_LOGIN_OTP
	{
		PString otp maxlen 100;
		PString pin maxlen 10 parseEndOptB4Me;
	};
	Message AUTH_A_LOGIN_OTP
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	Message AUTH_Q_LOGIN_LTD
	{
	};
	Message AUTH_A_LOGIN_LTD
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	Message AUTH_U_LOGOUT_NOW
	{		
	};
	// no reply
	
	// NOT SENT BY CLIENT
	Message AUTH_Q_GET_LOGIN_METHOD
	{		
	};
	Message AUTH_A_GET_LOGIN_METHOD
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			UINT32 loginMethod;
			UINT32 loginPriv;
		}
	};	
	
    // no longer sent by native client
	Message AUTH_Q_SET_LOGIN_METHOD
	{
		UINT32 loginMethod max AUTH_LOGINTYPE_MAX;
		PString password maxlen 50;
		PString sid maxlen 20;
		PString rsaPin maxlen 10;
		PString rsaCode maxlen 10;
	};
	Message AUTH_A_SET_LOGIN_METHOD
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	Message AUTH_Q_SET_LOGIN_METHOD_EX
	{
		UINT32 loginMethod max AUTH_LOGINTYPE_MAX;
		PString password maxlen 200; // hashed pwd
		PString sid maxlen 20;
		PString rsaPin maxlen 10;
		PString rsaCode maxlen 10;
	};

	Message AUTH_Q_SET_NEWINSTALL_VALIDATION
	{
		bool enable;
	};
	Message AUTH_A_SET_NEWINSTALL_VALIDATION
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};	
	
	Message AUTH_Q_GENERATE_PSP
	{		
	};
	Message AUTH_A_GENERATE_PSP
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};

	Message AUTH_Q_SET_PSP
	{
		PString newPsp minlen PSP_MIN_LENGTH maxlen PSP_MAX_LENGTH;
	};
	Message AUTH_A_SET_PSP
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};

	Message AUTH_Q_CHANGE_PSP
	{
		PString oldPsp minlen PSP_MIN_LENGTH maxlen PSP_MAX_LENGTH;
		PString newPsp minlen PSP_MIN_LENGTH maxlen PSP_MAX_LENGTH;
	};
	Message AUTH_A_CHANGE_PSP
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};

	Message AUTH_Q_ACTIVATE_RSA
	{
		UINT32 serialNumber; // no limit
		PString rsaPin maxlen 10;
		PString rsaCode maxlen 10;
	};
	Message AUTH_A_ACTIVATE_RSA
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};	

	Message AUTH_Q_CHECK_RSA
	{
		UINT32 serialNumber; // no limit
	};
	Message AUTH_A_CHECK_RSA
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};
	
	Message AUTH_Q_GENERATE_OTP
	{
	};
	Message AUTH_A_GENERATE_OTP
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
		else
		{
			PString mobileNum;
		}
	};
	
	Message AUTH_Q_LOGIN_EMAIL_NOTIFICATION
	{
		bool setOrRemove;
	};
	Message AUTH_A_LOGIN_EMAIL_NOTIFICATION
	{
		INT16 errCode;
		if(errCode)
		{
			PString errDescr;
		}
	};	
};

