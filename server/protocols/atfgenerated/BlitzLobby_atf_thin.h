/**
 * BlitzLobby_atf_thin.h
 *
 * This file was auto-generated from BlitzLobby_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin BlitzLobby_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_BLITZLOBBY_ATF_THIN_H
#define ATF_PROTOCOL_DEFFILE_BLITZLOBBY_ATF_THIN_H

#include "Common_atf_thin.h"
#include "lobby.h"
#include "../storm/TableCommonStructs_thin.h"


#include "ThinAtfUserDefStructs.h"

namespace BlitzLobby
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	namespace cli
	{
		struct Accounts
		{
			// M(s84444) - M(currency,convRate,chips,tChips,chipsDst,tChipsDst)
			PString currency;
			INT64 convRate;	// 10^12 (one trillion) equals to 100M base multiplied by 100K (so far Iranian Rial has the worst ratio - 20K to 1USD)
			INT32 chips;
			INT32 tChips;
			INT32 chipsDst;
			INT32 tChipsDst;

			Accounts();
			void clear();
			bool equals(const Accounts&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Accounts(Accounts&&);
			Accounts& operator=(Accounts&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Accounts(const Accounts&) = default;
			Accounts& operator=(const Accounts&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_BUYIN
		{
			// 4M() - buyIn,M()
			INT32 buyIn;
			ThinAtf::CopyableMsgBody currencyContext;	// server not using it

			Protocol_BL_USER_BUYIN();
			void clear();
			bool equals(const Protocol_BL_USER_BUYIN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_BUYIN; }
			static const char *getMsgIdString() { return "BL_USER_BUYIN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_BUYIN(Protocol_BL_USER_BUYIN&&);
			Protocol_BL_USER_BUYIN& operator=(Protocol_BL_USER_BUYIN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_BUYIN(const Protocol_BL_USER_BUYIN&) = default;
			Protocol_BL_USER_BUYIN& operator=(const Protocol_BL_USER_BUYIN&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_BUYIN_REPLY
		{
			// 2[s|4ssb4bbb14] - errCode[errDescrForUser|entry,thisAddress,tableObjectName,sittingOut,chips,sitOutNextBlind,state3Plus,isTablePublicationOverConnection,numPlayingEntries,chipsAfter]
			INT16 errCode;

			PString errDescrForUser;

			UINT32 entry;
			PString thisAddress;
			PString tableObjectName;
			bool sittingOut;
			UINT32 chips;
			bool sitOutNextBlind;
			bool state3Plus;
			bool isTablePublicationOverConnection;
			BYTE numPlayingEntries;
			INT32 chipsAfter;

			Protocol_BL_USER_BUYIN_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_BUYIN_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_BUYIN_REPLY; }
			static const char *getMsgIdString() { return "BL_USER_BUYIN_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_BUYIN_REPLY(Protocol_BL_USER_BUYIN_REPLY&&);
			Protocol_BL_USER_BUYIN_REPLY& operator=(Protocol_BL_USER_BUYIN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_BUYIN_REPLY(const Protocol_BL_USER_BUYIN_REPLY&) = default;
			Protocol_BL_USER_BUYIN_REPLY& operator=(const Protocol_BL_USER_BUYIN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_OUT
		{
			// 4 - entryId
			UINT32 entryId;	// id - no need to limit

			Protocol_BL_USER_OUT();
			void clear();
			bool equals(const Protocol_BL_USER_OUT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_OUT; }
			static const char *getMsgIdString() { return "BL_USER_OUT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct BetInfo
		{
			// M(88) - M(sumOfBets,wonAmount)
			INT64 sumOfBets;
			INT64 wonAmount;

			BetInfo();
			void clear();
			bool equals(const BetInfo&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_BL_USER_OUT_REPLY
		{
			// 42[s|M(88)] - entryId,err[errDescr|M(sumOfBets,wonAmount)]
			UINT32 entryId;
			INT16 err;

			PString errDescr;

			BetInfo betInfo;

			Protocol_BL_USER_OUT_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_OUT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_OUT_REPLY; }
			static const char *getMsgIdString() { return "BL_USER_OUT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_OUT_REPLY(Protocol_BL_USER_OUT_REPLY&&);
			Protocol_BL_USER_OUT_REPLY& operator=(Protocol_BL_USER_OUT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_OUT_REPLY(const Protocol_BL_USER_OUT_REPLY&) = default;
			Protocol_BL_USER_OUT_REPLY& operator=(const Protocol_BL_USER_OUT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_ADDON
		{
			// 44M() - entryId,addOn,M()
			UINT32 entryId;	// id - no need to limit
			INT32 addOn;
			ThinAtf::CopyableMsgBody currencyContext;	// Server doesn't use it.

			Protocol_BL_USER_ADDON();
			void clear();
			bool equals(const Protocol_BL_USER_ADDON&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_ADDON; }
			static const char *getMsgIdString() { return "BL_USER_ADDON"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_ADDON(Protocol_BL_USER_ADDON&&);
			Protocol_BL_USER_ADDON& operator=(Protocol_BL_USER_ADDON&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_ADDON(const Protocol_BL_USER_ADDON&) = default;
			Protocol_BL_USER_ADDON& operator=(const Protocol_BL_USER_ADDON&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_ADDON_REPLY
		{
			// 2[s]4 - err[errDescr],entryId
			INT16 err;

			PString errDescr;

			UINT32 entryId;

			Protocol_BL_USER_ADDON_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_ADDON_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_ADDON_REPLY; }
			static const char *getMsgIdString() { return "BL_USER_ADDON_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_ADDON_REPLY(Protocol_BL_USER_ADDON_REPLY&&);
			Protocol_BL_USER_ADDON_REPLY& operator=(Protocol_BL_USER_ADDON_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_ADDON_REPLY(const Protocol_BL_USER_ADDON_REPLY&) = default;
			Protocol_BL_USER_ADDON_REPLY& operator=(const Protocol_BL_USER_ADDON_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_SITIN
		{
			// 4 - entryId
			UINT32 entryId;	// id - no need to limit

			Protocol_BL_USER_SITIN();
			void clear();
			bool equals(const Protocol_BL_USER_SITIN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_SITIN; }
			static const char *getMsgIdString() { return "BL_USER_SITIN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_BL_USER_SITIN_REPLY
		{
			// 42[s|ssb4bbb] - entryId,err[errDescr|thisAddress,tableObjectName,sittingOut,chips,sitOutNextBlind,state3Plus,isTablePublicationOverConnection]
			UINT32 entryId;
			INT16 err;

			PString errDescr;

			PString thisAddress;
			PString tableObjectName;
			bool sittingOut;
			UINT32 chips;
			bool sitOutNextBlind;
			bool state3Plus;
			bool isTablePublicationOverConnection;

			Protocol_BL_USER_SITIN_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_SITIN_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_SITIN_REPLY; }
			static const char *getMsgIdString() { return "BL_USER_SITIN_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_SITIN_REPLY(Protocol_BL_USER_SITIN_REPLY&&);
			Protocol_BL_USER_SITIN_REPLY& operator=(Protocol_BL_USER_SITIN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_SITIN_REPLY(const Protocol_BL_USER_SITIN_REPLY&) = default;
			Protocol_BL_USER_SITIN_REPLY& operator=(const Protocol_BL_USER_SITIN_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_GET_ENTRIES
		{
			// empty message

			Protocol_BL_USER_GET_ENTRIES();
			void clear();
			bool equals(const Protocol_BL_USER_GET_ENTRIES&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_GET_ENTRIES; }
			static const char *getMsgIdString() { return "BL_USER_GET_ENTRIES"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct EntryBody
		{
			// M(4ssb41222bb) - M(entryId,thisAddress,tableObjectName,sittingOut,chips,autoRebuyOpt,autoRebuyBigBets,fallUnderBigBets,fallUnderPercents,sitOutNextBlind,state3Plus)
			UINT32 entryId;
			PString thisAddress;
			PString tableObjectName;
			bool sittingOut;
			UINT32 chips;
			INT8 autoRebuyOpt;
			UINT16 autoRebuyBigBets;
			UINT16 fallUnderBigBets;
			UINT16 fallUnderPercents;
			bool sitOutNextBlind;
			bool state3Plus;

			EntryBody();
			void clear();
			bool equals(const EntryBody&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			EntryBody(EntryBody&&);
			EntryBody& operator=(EntryBody&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			EntryBody(const EntryBody&) = default;
			EntryBody& operator=(const EntryBody&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_GET_ENTRIES_REPLY
		{
			// 4<M(4ssb41222bb)> - numEntryBodies<M(entryId,thisAddress,tableObjectName,sittingOut,chips,autoRebuyOpt,autoRebuyBigBets,fallUnderBigBets,fallUnderPercents,sitOutNextBlind,state3Plus)>
			ThinAtf::LAtfVector< EntryBody, 4 > entryBodies;

			Protocol_BL_USER_GET_ENTRIES_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_GET_ENTRIES_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_GET_ENTRIES_REPLY; }
			static const char *getMsgIdString() { return "BL_USER_GET_ENTRIES_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_GET_ENTRIES_REPLY(Protocol_BL_USER_GET_ENTRIES_REPLY&&);
			Protocol_BL_USER_GET_ENTRIES_REPLY& operator=(Protocol_BL_USER_GET_ENTRIES_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_GET_ENTRIES_REPLY(const Protocol_BL_USER_GET_ENTRIES_REPLY&) = default;
			Protocol_BL_USER_GET_ENTRIES_REPLY& operator=(const Protocol_BL_USER_GET_ENTRIES_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_WHERE_REPLY
		{
			// 42[s|ssb4bsb4b] - entryId,err[errStr|thisAddress,tableObjectName,sittingOut,chips,sitOutNextBlind,italianSessionId,state3Plus,scalePM,privatePubl]
			UINT32 entryId;
			INT16 err;

			PString errStr;

			PString thisAddress;
			PString tableObjectName;
			bool sittingOut;
			UINT32 chips;
			bool sitOutNextBlind;
			PString italianSessionId;
			bool state3Plus;
			UINT32 scalePM;
			bool privatePubl;

			Protocol_BL_USER_WHERE_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_WHERE_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_WHERE_REPLY; }
			static const char *getMsgIdString() { return "UWR"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_WHERE_REPLY(Protocol_BL_USER_WHERE_REPLY&&);
			Protocol_BL_USER_WHERE_REPLY& operator=(Protocol_BL_USER_WHERE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_WHERE_REPLY(const Protocol_BL_USER_WHERE_REPLY&) = default;
			Protocol_BL_USER_WHERE_REPLY& operator=(const Protocol_BL_USER_WHERE_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_GET_BUYIN_INFO
		{
			// 4 - entryId
			UINT32 entryId;	// id - no need to limit

			Protocol_BL_USER_GET_BUYIN_INFO();
			void clear();
			bool equals(const Protocol_BL_USER_GET_BUYIN_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_GET_BUYIN_INFO; }
			static const char *getMsgIdString() { return "BL_USER_GET_BUYIN_INFO"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct OneAccount
		{
			// M(s84444) - M(currency,convRate,chips,tChips,chipsDst,tChipsDst)
			PString currency;
			INT64 convRate;
			INT32 chips;
			INT32 tChips;
			INT32 chipsDst;
			INT32 tChipsDst;

			OneAccount();
			void clear();
			bool equals(const OneAccount&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			OneAccount(OneAccount&&);
			OneAccount& operator=(OneAccount&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			OneAccount(const OneAccount&) = default;
			OneAccount& operator=(const OneAccount&) = default;
#endif
#endif
		};

		struct MoneyAvailInfo
		{
			// M(s444<M(s84444)>48444) - M(currencyDst,availForSpendingDst,unclearedDst,numAccounts<M(currency,convRate,chips,tChips,chipsDst,tChipsDst)>,flags,flags2,userRollId,rollAmount,availWithoutConv)
			PString currencyDst;
			INT32 availForSpendingDst;
			INT32 unclearedDst;
			ThinAtf::LAtfVector< OneAccount, 4 > accounts;
			UINT32 flags;
			UINT64 flags2;
			UINT32 userRollId;
			INT32 rollAmount;
			INT32 availWithoutConv;

			MoneyAvailInfo();
			void clear();
			bool equals(const MoneyAvailInfo&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			MoneyAvailInfo(MoneyAvailInfo&&);
			MoneyAvailInfo& operator=(MoneyAvailInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			MoneyAvailInfo(const MoneyAvailInfo&) = default;
			MoneyAvailInfo& operator=(const MoneyAvailInfo&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_GET_BUYIN_INFO_REPLY
		{
			// 2[ss4b|444414M(s444<M(s84444)>48444)144b448414] - errCode[errDescrForUser,currency,minChipsLimit,enoughOnAllAccounts|chips,chipsMin,maxBuyIn,chipsQuantum,playAddB,playAddU,M(currencyDst,availForSpendingDst,unclearedDst,numAccounts<M(currency,convRate,chips,tChips,chipsDst,tChipsDst)>,flags,flags2,userRollId,rollAmount,availWithoutConv),entriesLeft,entryId,chipsInPlay,enoughMoneyInOtherCurrencies,maxRebuyChips,totalRebuyChips,playChips64,scalePM,clientServiceFlag,defaultBuyIn]
			INT16 errCode;

			PString errDescrForUser;
			PString currency;
			UINT32 minChipsLimit;
			bool enoughOnAllAccounts;

			INT32 chips;
			INT32 chipsMin;
			INT32 maxBuyIn;
			INT32 chipsQuantum;
			BYTE playAddB;
			INT32 playAddU;
			MoneyAvailInfo clientCurrencyContext;
			INT8 entriesLeft;
			UINT32 entryId;
			INT32 chipsInPlay;
			bool enoughMoneyInOtherCurrencies;
			INT32 maxRebuyChips;
			INT32 totalRebuyChips;
			INT64 playChips64;
			INT32 scalePM;
			BYTE clientServiceFlag;
			INT32 defaultBuyIn;

			Protocol_BL_USER_GET_BUYIN_INFO_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_GET_BUYIN_INFO_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_GET_BUYIN_INFO_REPLY; }
			static const char *getMsgIdString() { return "BL_USER_GET_BUYIN_INFO_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_GET_BUYIN_INFO_REPLY(Protocol_BL_USER_GET_BUYIN_INFO_REPLY&&);
			Protocol_BL_USER_GET_BUYIN_INFO_REPLY& operator=(Protocol_BL_USER_GET_BUYIN_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_GET_BUYIN_INFO_REPLY(const Protocol_BL_USER_GET_BUYIN_INFO_REPLY&) = default;
			Protocol_BL_USER_GET_BUYIN_INFO_REPLY& operator=(const Protocol_BL_USER_GET_BUYIN_INFO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_GET_INFO
		{
			// empty message

			Protocol_BL_USER_GET_INFO();
			void clear();
			bool equals(const Protocol_BL_USER_GET_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_GET_INFO; }
			static const char *getMsgIdString() { return "BL_USER_GET_INFO"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_BL_USER_GET_INFO_REPLY
		{
			//! s11111441442s444sb44 <FIXME>TableCommonThin::TableStakes</FIXME>  - name,isOneToOne,isPlayMoney,nMaxPlayersPerTable,game,hiLo,smartLoBet,highBet,structure,cap,tableFlags,chatLang,currency,minChipsLimit,maxBuyIn,ante,itId,shortHanded,scalePM,noVppGainSites, <FIXME>tableStakes</FIXME> 
			PString name;
			BYTE isOneToOne;
			BYTE isPlayMoney;
			BYTE nMaxPlayersPerTable;
			BYTE game;
			BYTE hiLo;
			UINT32 smartLoBet;
			UINT32 highBet;
			BYTE structure;
			UINT32 cap;
			UINT32 tableFlags;
			UINT16 chatLang;
			PString currency;
			UINT32 minChipsLimit;
			UINT32 maxBuyIn;
			UINT32 ante;
			PString itId;
			bool shortHanded;
			UINT32 scalePM;
			UINT32 noVppGainSites;
			TableCommonThin::TableStakes tableStakes;

			Protocol_BL_USER_GET_INFO_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_GET_INFO_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_GET_INFO_REPLY; }
			static const char *getMsgIdString() { return "BL_USER_GET_INFO_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_GET_INFO_REPLY(Protocol_BL_USER_GET_INFO_REPLY&&);
			Protocol_BL_USER_GET_INFO_REPLY& operator=(Protocol_BL_USER_GET_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_GET_INFO_REPLY(const Protocol_BL_USER_GET_INFO_REPLY&) = default;
			Protocol_BL_USER_GET_INFO_REPLY& operator=(const Protocol_BL_USER_GET_INFO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_SET_AUTOREBUY
		{
			// 41222 - entryId,autoRebuyOpt,autoRebuyBigBets,fallUnderBigBets,fallUnderPercents
			UINT32 entryId;	// id - no need to limit
			INT8 autoRebuyOpt;
			UINT16 autoRebuyBigBets;
			UINT16 fallUnderBigBets;
			UINT16 fallUnderPercents;

			Protocol_BL_USER_SET_AUTOREBUY();
			void clear();
			bool equals(const Protocol_BL_USER_SET_AUTOREBUY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_SET_AUTOREBUY; }
			static const char *getMsgIdString() { return "BL_USER_SET_AUTOREBUY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_BL_USER_SET_AUTOREBUY_REPLY
		{
			// 42[s] - entryId,err[errDescr]
			UINT32 entryId;
			INT16 err;

			PString errDescr;

			Protocol_BL_USER_SET_AUTOREBUY_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_SET_AUTOREBUY_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_SET_AUTOREBUY_REPLY; }
			static const char *getMsgIdString() { return "BL_USER_SET_AUTOREBUY_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_SET_AUTOREBUY_REPLY(Protocol_BL_USER_SET_AUTOREBUY_REPLY&&);
			Protocol_BL_USER_SET_AUTOREBUY_REPLY& operator=(Protocol_BL_USER_SET_AUTOREBUY_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_SET_AUTOREBUY_REPLY(const Protocol_BL_USER_SET_AUTOREBUY_REPLY&) = default;
			Protocol_BL_USER_SET_AUTOREBUY_REPLY& operator=(const Protocol_BL_USER_SET_AUTOREBUY_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_SITOUT
		{
			// 4 - entryId
			UINT32 entryId;	// id - no need to limit

			Protocol_BL_USER_SITOUT();
			void clear();
			bool equals(const Protocol_BL_USER_SITOUT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_SITOUT; }
			static const char *getMsgIdString() { return "BL_USER_SITOUT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_BL_USER_SITOUT_REPLY
		{
			// 42[s] - entryId,err[errDescr]
			UINT32 entryId;
			INT16 err;

			PString errDescr;

			Protocol_BL_USER_SITOUT_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_SITOUT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_SITOUT_REPLY; }
			static const char *getMsgIdString() { return "BL_USER_SITOUT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_SITOUT_REPLY(Protocol_BL_USER_SITOUT_REPLY&&);
			Protocol_BL_USER_SITOUT_REPLY& operator=(Protocol_BL_USER_SITOUT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_SITOUT_REPLY(const Protocol_BL_USER_SITOUT_REPLY&) = default;
			Protocol_BL_USER_SITOUT_REPLY& operator=(const Protocol_BL_USER_SITOUT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_SITOUT_NEXTBB
		{
			// 4b - entryId,sitoutBB
			UINT32 entryId;	// id - no need to limit
			bool sitoutBB;

			Protocol_BL_USER_SITOUT_NEXTBB();
			void clear();
			bool equals(const Protocol_BL_USER_SITOUT_NEXTBB&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_SITOUT_NEXTBB; }
			static const char *getMsgIdString() { return "BL_USER_SITOUT_NEXTBB"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_BL_USER_SITOUT_NEXTBB_REPLY
		{
			// 42[s|b] - entryId,err[errDescr|sitOutNextBlind]
			UINT32 entryId;
			INT16 err;

			PString errDescr;

			bool sitOutNextBlind;

			Protocol_BL_USER_SITOUT_NEXTBB_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_SITOUT_NEXTBB_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_SITOUT_NEXTBB_REPLY; }
			static const char *getMsgIdString() { return "BL_USER_SITOUT_NEXTBB_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_SITOUT_NEXTBB_REPLY(Protocol_BL_USER_SITOUT_NEXTBB_REPLY&&);
			Protocol_BL_USER_SITOUT_NEXTBB_REPLY& operator=(Protocol_BL_USER_SITOUT_NEXTBB_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_SITOUT_NEXTBB_REPLY(const Protocol_BL_USER_SITOUT_NEXTBB_REPLY&) = default;
			Protocol_BL_USER_SITOUT_NEXTBB_REPLY& operator=(const Protocol_BL_USER_SITOUT_NEXTBB_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_BL_USER_SET_3PLUS
		{
			// 4b - entryId,state3Plus
			UINT32 entryId;	// id - no need to limit
			bool state3Plus;

			Protocol_BL_USER_SET_3PLUS();
			void clear();
			bool equals(const Protocol_BL_USER_SET_3PLUS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_SET_3PLUS; }
			static const char *getMsgIdString() { return "BL_USER_SET_3PLUS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_BL_USER_SET_3PLUS_REPLY
		{
			// 42[s|b] - entryId,err[errDescr|state3Plus]
			UINT32 entryId;
			INT16 err;

			PString errDescr;

			bool state3Plus;

			Protocol_BL_USER_SET_3PLUS_REPLY();
			void clear();
			bool equals(const Protocol_BL_USER_SET_3PLUS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return BL_USER_SET_3PLUS_REPLY; }
			static const char *getMsgIdString() { return "BL_USER_SET_3PLUS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_BL_USER_SET_3PLUS_REPLY(Protocol_BL_USER_SET_3PLUS_REPLY&&);
			Protocol_BL_USER_SET_3PLUS_REPLY& operator=(Protocol_BL_USER_SET_3PLUS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_BL_USER_SET_3PLUS_REPLY(const Protocol_BL_USER_SET_3PLUS_REPLY&) = default;
			Protocol_BL_USER_SET_3PLUS_REPLY& operator=(const Protocol_BL_USER_SET_3PLUS_REPLY&) = default;
#endif
#endif
		};
	};
};

#endif
