// ===========================================================
// Copyright (C) 2018 Stars Technologies Services  All rights reserved.
// =========================================================== 

#include "personalization.h"
#include "mlobbyNG_atf${ATF_THIN_FILENAME_SUFFIX}.h"

#define TOP_LEVEL_NAMESPACE PersonalizationATF

namespace cli
{
	MsgBodyStruct TournTicketInfo
	{
		UINT32 ticketId;
		PString ticketName;
		bool multiTourn;
		UINT32 price;
		PString currency;
		SrvTime issued;
		SrvTime expireAt;
		INT32 tournNumber;
	};
	
	MsgBodyStruct TournCountFilter
	{
		UINT64 gameMask max (2*(UINT64)NGGameTypes::NGGame_Last-1) default (2*(UINT64)NGGameTypes::NGGame_Last-1); // NGGameTypes
	};
	
	Message PS_Q_GET_RECENT_GAME_LIST
	{
		UINT32 gameTypes max (2*GameCategory_Last-1);		// enum GameCategoryTypes
		bool isPM;
	};
	
	Message PS_A_GET_RECENT_GAME_LIST
	{
		vector<MLobbyNG::cli::TournDataStruct> tourns;
		vector<MLobbyNG::cli::TableDataStruct> tableTypes;
		vector<MLobbyNG::cli::SngDataStruct> sngTypes;
		vector<MLobbyNG::cli::SagDataStruct> sagTypes;
		vector<MLobbyNG::cli::ZoomDataStruct> zoomTypes;
		vector<MLobbyNG::cli::SeatFinderDataStruct> seatFinders;
		vector<UINT32> gameOrder;
		vector<MLobbyNG::cli::PPPDataStruct> pppTypes parseEndOptB4Me;  // PYR-123925
	};
	
	Message PS_Q_ADMIN_GET_RECENT_GAME_LIST
	{
		UINT32 gameTypes;		// enum GameCategoryTypes
		UINT32 userIntId;
		MLobbyNG::cli::GameListFilter filter;
	};
	
	Message PS_A_ADMIN_GET_RECENT_GAME_LIST
	{
		INT16 errCode;
		
		if( errCode )
		{
			PString errMsg;
		}
		else
		{
			vector<MLobbyNG::cli::TournDataStruct> tourns;
			vector<MLobbyNG::cli::TableDataStruct> tableTypes;
			vector<MLobbyNG::cli::SngDataStruct> sngTypes;
			vector<MLobbyNG::cli::SagDataStruct> sagTypes;
			vector<MLobbyNG::cli::ZoomDataStruct> zoomTypes;
			vector<MLobbyNG::cli::SeatFinderDataStruct> seatFinders;
			vector<UINT32> gameOrder;
			vector<MLobbyNG::cli::PPPDataStruct> pppTypes parseEndOptB4Me; // PYR-123925
		}
	};
	
	Message PS_U_GET_CURRENTLY_SEATED_AT
	{
		bool joined; // true means joined table/tourn/zoom, false means they left
		vector<MLobbyNG::cli::TournDataStruct> tourns;
		vector<MLobbyNG::cli::TableData> tables;
		vector<MLobbyNG::cli::ZoomDataStruct> zoomTypes;
	};
	
	Message PS_Q_GET_TICKET_TOURNS
	{
		vector<PString> ticketNames maxsize 100;
		UINT32 gameCategoryMask max (2*GameCategory_Last-1);			// enum GameCategoryTypes
		UINT32 ticketTournRequestMask max (2*TicketTournRequest_Last-1);	// enum TicketTournRequestTypes
		bool isPM;
	};
	
	Message PS_A_GET_TICKET_TOURNS
	{
		vector<MLobbyNG::cli::OrderedTicketTournInfo> ticketInfos;
	};
	
	Message PS_Q_FILTER_GAMES
	{
		MLobbyNG::cli::FilterGamesSelectionFilter filter;
		MLobbyNG::cli::FilterGamesResultCriteria criteria;
		MLobbyNG::cli::ClientMarkers clientMarkers;
	};
	
	Message PS_A_FILTER_GAMES
	{
		vector<MLobbyNG::cli::TournDataStruct> tourns;
		vector<MLobbyNG::cli::TableDataStruct> tableTypes;
		vector<MLobbyNG::cli::SngDataStruct> sngTypes;
		vector<MLobbyNG::cli::SagDataStruct> sagTypes;
		vector<MLobbyNG::cli::ZoomDataStruct> zoomTypes;
		vector<MLobbyNG::cli::SeatFinderDataStruct> seatFinders;
		vector<UINT32> gameOrder;
		INT32 totalItems;
		INT64 minBuyIn;
		INT64 maxBuyIn;
		MLobbyNG::cli::ResultRanges resultRanges;
	};
	
	message PS_Q_GET_BRANDED_LOBBIES
	{
		UINT32 currencyMask parseEndOptB4Me;
		PString country parseEndOptB4Me;
		bool isPM parseEndOptB4Me;
	};
	
	message PS_A_GET_BRANDED_LOBBIES
	{
		vector<MLobbyNG::cli::BrandedLobbyInfo> lobbies;
	};
	
	message PS_Q_INIT_BRANDED_LOBBIES
	{
	};
	
	message PS_A_INIT_BRANDED_LOBBIES
	{
		vector<MLobbyNG::cli::FullBrandedLobbyInfo> lobbies;
	};
	
	Message PS_Q_ADMIN_UPDATE_LOBBIES
	{
	};
	
	Message PS_A_ADMIN_UPDATE_LOBBIES
	{
		INT16 errCode;
		
		if( errCode )
		{
			PString errMsg;
		}
	};
	
	Message PS_Q_GET_SUGGESTED_GAMES
	{
		MLobbyNG::cli::SuggestedGames2SelectionFilter filter;
		MLobbyNG::cli::ClientMarkers clientMarkers;
	};
	
	Message PS_A_GET_SUGGESTED_GAMES
	{
		vector<MLobbyNG::cli::TournDataStruct> tourns;
		vector<MLobbyNG::cli::TableDataStruct> tableTypes;
		vector<MLobbyNG::cli::SngDataStruct> sngTypes;
		vector<MLobbyNG::cli::SagDataStruct> sagTypes;
		vector<MLobbyNG::cli::ZoomDataStruct> zoomTypes;
		vector<MLobbyNG::cli::SeatFinderDataStruct> seatFinders;
		vector<UINT32> gameOrder;
	};
	
	Message PS_Q_SEARCH_BY_NAME
	{
		MLobbyNG::cli::NameSearchSelectionFilter filter;
		MLobbyNG::cli::FilterGamesResultCriteria criteria;
		MLobbyNG::cli::ClientMarkers clientMarkers;
	};
	
	Message PS_A_SEARCH_BY_NAME
	{
		vector<MLobbyNG::cli::TournDataStruct> tourns;
		vector<MLobbyNG::cli::TableDataStruct> tableTypes;
		vector<MLobbyNG::cli::SngDataStruct> sngTypes;
		vector<MLobbyNG::cli::SagDataStruct> sagTypes;
		vector<MLobbyNG::cli::ZoomDataStruct> zoomTypes;
		vector<MLobbyNG::cli::SeatFinderDataStruct> seatFinders;
		vector<UINT32> gameOrder;
	};
	
	message PS_Q_GET_TICKET_COUNTS
	{
		TournCountFilter filter parseEndOptB4Me;
	};
	
	message PS_A_GET_TICKET_COUNTS
	{
		vector<TournTicketInfo> tickets;
	};
};


