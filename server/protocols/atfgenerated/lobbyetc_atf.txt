#include "lobby.h"
#include "LobbyEtc.h"
#include "UserDefStructs.h"
#include "Common_atf${ATF_THIN_FILENAME_SUFFIX}.h"
#include "i18n.localedef.h"
#include "newsmessages.h"
#include "brands.h"
#include "dbm.h"
#include "timezone.h"
#include "brandimgs${ATF_THIN_FILENAME_SUFFIX}.h"
#include "auxHandHistory.h"

#define TOP_LEVEL_NAMESPACE LobbyEtc

namespace cli_Unauth
{
	struct Publication
	{
		PString name maxlen 1000;
	};

	Message MSG_LOBBY_CHECK_PUBLICATIONS
	{
		vector<Publication> publications maxsize 1000 parseEndOptB4Me;
	};
	Message MSG_LOBBY_CHECK_PUBLICATIONS_REPLY
	{
		vector<bool> publicationExist;
	};

	struct UserId
	{
		PString userId maxlen 20;
	};

	Message MSG_LOBBYETC_GET_USER_IMAGE
	{
		vector<UserId> userIds maxsize 1000; // the limit from the code
	};

	struct UserImageData
	{
		PString userId;
		INT16 errCode;
		UINT32 imageid;
		bool isTeamPro;
	};

	Message MSG_LOBBYETC_GET_USER_IMAGE_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDescr;
		}
		else
		{
			vector<UserImageData> images;
		}
	};

	Message MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY
	{
		UINT32 siteId max PokerStars_Last;
		UINT32 brandId max BrandType_Last;
		UINT32 locale max MAX_LOCALES;
	};

	MsgBodyStruct ImageBody
	{
		UINT32 imageId;
		PString imageDescr;
	};

	MsgBodyStruct SubcatBody
	{
		PString subCatName;
		vector<UINT32> imageIds;
	};

	MsgBodyStruct CatBody
	{
		PString catName;
		vector<UINT32> imageIds;
		vector<SubcatBody> subCats;
	};

	Message MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			vector<ImageBody> images;
			vector<CatBody> cats;
		}
	};

	Message MSG_LOBBYETC_CLI_GET_DEFAULT_GALLERY_IMAGEID
	{
		UINT32 cliSiteId max PokerStars_Last;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra cliBody;
		UINT32 locale max MAX_LOCALES;
		PString countryCode maxlen COUNTRY_CODE_LEN;
	};
	

	Message MSG_LOBBYETC_CLI_GET_DEFAULT_GALLERY_IMAGEID_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			UINT32 imageId;
		}
	};

	MsgBodyStruct LoginExtraDataBody
	{
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra extraData parseEndOptB4Me; // optional
	};

	Message MSG_LOBBYETC_SIGNAL_EVENT_INSTALLATION
	{
		PString installIdDeprecated maxlen 1000;
		PString promo maxlen 1000;
		UINT32 cliSiteId max PokerStars_Last;
		UINT32 platformId max Client_Last;
		UINT32 clientVersion;
		PString tiVer maxlen 1000;
		PString tinfoText maxlen 1000;
		PString refDomain maxlen 1000;
		PString mobileAppId maxlen 1000 parseEndOptB4Me;
		Common${ATF_THIN_NAMESPACE_SUFFIX}::AtfShared::LoginExtra extraData parseEndOptB4Me;
		bool lat parseEndOptB4Me;
	};

	Message MSG_LOBBYETC_SIGNAL_EVENT_INSTALLATION_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
	};
	
	Message MSG_LOBBYETC_ADX_EVENT
	{
		PString userWebId maxlen WEB_ID_LEN;
		SrvTime when;
		UINT32 eventType max eMobileEventType_LAST;
		UINT32 license max eLicenceLast;
		UINT32 platformId max Client_Last;
		UINT32 device max ClientDevice_Last;
		PString deviceId maxlen ADXEVENT_DEVICE_ID_LEN;
		PString network maxlen ADXEVENT_NETWORK_LEN;
		PString reference maxlen ADXEVENT_REFERENCE_LEN;
	};

	Message MSG_LOBBYETC_ADX_EVENT_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
	};

	Message MSG_LOBBYETC_CONVERT_USERINTIDS
	{
		vector<UINT32> userIntIds maxsize 10240;
	};

	struct UserData
	{
		UINT32 userIntId;
		PString userId;
	};

	Message MSG_LOBBYETC_CONVERT_USERINTIDS_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			vector<UserData> users;
		}
	};
}; // namespace cli_Unauth

namespace cli
{
	Message MSG_LOBBYETC_W2G_AUDIT
	{
		PString notUsedStr maxlen 20;
		PString password maxlen 100; 
		INT32 year max 2099;
	};

	Message MSG_LOBBYETC_W2G_AUDIT_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
	};

	Message MSG_LOBBYETC_FPP_HISTORY_AUDIT
	{
		PString notUsedStr maxlen 20;
		SrvDate startDate;
		SrvDate endDate;
		UINT32 eReportFormat max 100; // defined as eReportFormat under srvshared/crmserver.h
		PString password maxlen 100;
		bool isHtmlForClient;
		bool vipStepsOnly;
	};

	Message MSG_LOBBYETC_FPP_HISTORY_AUDIT_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
	};

	Message MSG_LOBBYETC_CLI_ICE_SET_ALL_USER_BOARD_PREF
	{
		bool eligible;
	};

	Message MSG_LOBBYETC_CLI_ICE_SET_ALL_USER_BOARD_PREF_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
	};

	Message MSG_LOBBYETC_CLIENT_REPORT
	{
		UINT32 reportType max eClientReportType_Last;
		if( reportType == eClientReportType_EsAccountHistory )
		{
			CommMsgBody
			{
				SrvDate startDate;
				SrvDate endDate;
				PString password maxlen 100; 
				UINT32 reportFormat max 100; // see eReportFormat in crmserver.h (max 3 now)
				bool isHtmlForClient;
			};
		}
	};

	Message MSG_LOBBYETC_CLIENT_REPORT_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
	};
			
	Message MSG_LOBBYETC_LOCALE_SET
	{
		UINT32 locale max MAX_LOCALES;
	};

	Message MSG_LOBBYETC_LOCALE_SET_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			UINT32 locale;
			UINT32 emLocale;
		}
	};
		
	Message MSG_LOBBYETC_EMLOCALE_SET
	{
		UINT32 emLocale max MAX_LOCALES;
		UINT32 emLocale2 max LOCALE_INVALID; // can be LOCALE_INVALID
		UINT32 emLocale3 max LOCALE_INVALID; // can be LOCALE_INVALID
	};

	Message MSG_LOBBYETC_EMLOCALE_SET_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			UINT32 locale;
			UINT32 emLocale;
			UINT32 emLocale2;
			UINT32 emLocale3;
		}
	};

	Message MSG_LOBBYETC_EMLOCALE_GET
	{
	};

	Message MSG_LOBBYETC_EMLOCALE_GET_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			UINT32 userLocale;
			UINT32 userEmLocale;
			UINT32 userEmLocale2;
			UINT32 userEmLocale3;
		}
	};
	
	MsgBodyStruct OneLimitBody
	{
		INT32 limit;
		PString limitCurrency;
		BYTE lmitType;
		bool hadPrevLimit;
	};

	MsgBodyStruct oneCurrBody
	{
		PString currency;
	};

	Message MSG_LOBBY_GET_TABLE_LIMITS
	{
		PString notUsedStr maxlen 20;
	};

	Message MSG_LOBBY_GET_TABLE_LIMITS_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString;
		}
		else
		{
			INT32 obsoleteNLlimit;
			vector<OneLimitBody> limits;
			vector<oneCurrBody> currencies;
			INT32 autoLimitHour;
			INT32 waitingIncreaseNLLimitDays;
			INT32 waitingIncreaseFLLimitDays;
		}
	};

	Message MSG_LOBBY_GET_TOURN_LIMITS
	{
		PString notUsedStr maxlen 20;
	};

	Message MSG_LOBBY_GET_TOURN_LIMITS_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString;
		}
		else
		{
			vector<OneLimitBody> limits;
			vector<oneCurrBody> currencies;
			INT32 autoLimitHour;
			INT32 waitingIncreaseTournLimitDays;
			INT32 waitingIncreaseSNGLimitDays;
		}
	};

	MsgBodyStruct OneCasinoLimitBody
	{
		INT64 limit;
		PString limitCurrency;
		BYTE lmitType;
	};

	Message MSG_LOBBYETC_GET_CASINO_LIMITS
	{
	};

	Message MSG_LOBBYETC_GET_CASINO_LIMITS_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			vector<OneCasinoLimitBody> limits;
			vector<oneCurrBody> currencies;
			INT32 autoApproveHours;
			INT32 waitingIncreaseBlackjackLimitDays;
			bool hadPrevLimitUK;
			INT32 waitingIncreaseRouletteLimitDays;
			INT32 waitingIncreaseSlotsLimitDays;
			INT32 waitingIncreaseOthersLimitDays;
		}
	};
	
	MsgBodyStruct OneSportLimitBody
	{
		BYTE eLimitType;
		INT64 amount;
		PString currency;
		INT32 autoApproveHours;
		INT32 waitingIncreaseLimitDays;
		bool hadPrevLimitUK;
	};

	Message MSG_LOBBYETC_GET_SPORT_LIMITS
	{
	};

	Message MSG_LOBBYETC_GET_SPORT_LIMITS_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			vector<OneSportLimitBody> limits;
		}
	};

	MsgBodyStruct OneGameLimitBody
	{
		BYTE limType;
		INT64 amount;
		PString currency;
		INT32 autoApproveHours;
		INT32 waitingIncreaseLimitDays;
		bool hadPrevLimitUK;
		CommSrvTime scheduled;
		INT32 remaining;
	};

	Message MSG_LOBBYETC_GET_ALL_APPROVED_GAME_LIMITS
	{
	};

	Message MSG_LOBBYETC_GET_ALL_APPROVED_GAME_LIMITS_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			vector<OneGameLimitBody> limits;
		}
	};
			
	Message MSG_LOBBYETC_GET_USER_PROPS
	{
	};

	Message MSG_LOBBYETC_GET_USER_PROPS_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			UINT32 privileges;
			UINT32 flags;
			UINT32 locale;
			PString country;
			UINT64 privileges2;
			UINT32 vipStatus;
			UINT32 timeZone;
			UINT32 userIntId;
			UINT64 flags2;
			UINT64 privileges3;

			CommMsgBody
			{
				UINT64 clientFeatureVisibilityOnMask;
				UINT64 clientFeatureVisibilityOffMask;
				UINT64 clientFeatureVisibilityOnMask2;
				UINT64 clientFeatureVisibilityOffMask2;
			};

			UINT32 originalUserIntId;
			PString fiscalCode;
		}
	};

	MsgBodyStruct UserFppBundleSingleLevelBody
	{
		INT32 accVpp;
		INT32 fppReward;
		INT16 targetType;
		INT16 penalty;
		INT32 vipOrd;
	};

	Message MSG_LOBBYETC_GET_FPP_BUNDLES_FOR_USER
	{
	};

	Message MSG_LOBBYETC_GET_FPP_BUNDLES_FOR_USER_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			UINT64 vppMonthly;
			UINT64 vppYearly;
			INT16 vipStatus;
			UINT32 fpp;
			INT32 warningDays;
			INT32 rewardPercent;
			INT32 notificationPercent;
			vector<UserFppBundleSingleLevelBody> vipLevelBundles;
			INT32 nextLevelRewardPercent;
			INT32 vppMonthlyCentsOnly;
			INT32 vppYearlyCentsOnly;
			INT8 supernovaFlags;
		}
	};

	Message MSG_LOBBYETC_GET_SPORT_ACCUMULATED_LIMIT
	{
	};

	Message MSG_LOBBYETC_GET_SPORT_ACCUMULATED_LIMIT_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			vector<OneSportLimitBody> limits;
		}
	};

	struct HistoryBody
	{
		CommSrvTime loginTime;
		PString isp;
		PString ipCountry;
		PString ipAddress;
	};

	Message MSG_LOBBYETC_GET_LOGIN_HISTORY
	{
		PString notUsedStr maxlen 20;
	};
		
	Message MSG_LOBBYETC_GET_LOGIN_HISTORY_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			vector<HistoryBody> histories;
		}
	};

	Message MSG_LOBBYETC_GET_REALITY_CHECK_FREQ
	{
	};

	Message MSG_LOBBYETC_GET_REALITY_CHECK_FREQ_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			bool found;
			INT32 propType;
		}
	};

	Message MSG_LOBBYETC_SET_REALITY_CHECK_FREQ
	{
		INT32 minutes min -1 max 144000; // 144000 - 100 days
	};

	Message MSG_LOBBYETC_SET_REALITY_CHECK_FREQ_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
	};

	Message MSG_LOBBY_PLAYING_HISTORY_AUDIT
	{
		PString notUsedStr maxlen 20;
		SrvDate startDate;
		SrvDate endDate;
		PString password notrace maxlen 1000;
		bool includeFPP;
		UINT32 reportFormat max 100; // defined as eReportFormat under srvshared/crmserver.h
		bool isHtmlForClient;
	};

	Message MSG_LOBBY_PLAYING_HISTORY_AUDIT_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDescr;
		}
	};
		
	Message MSG_LOBBY_INIT_NETVERIFY_SESSION
	{
		PString redirectorUrl maxlen 10000;
	};

	Message MSG_LOBBY_INIT_NETVERIFY_SESSION_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDescr;
		}
		else
		{
			PString url;
		}
	};
			
	Message MSG_LOBBYETC_CLI_ICE_GET_UPDATES
	{
	};

	Message MSG_LOBBYETC_CLI_ICE_GET_UPDATES_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			INT32 numChanges;
			UINT32 flags;
			PString toolTip;
		}
	};

	MsgBodyStruct SetLimitBody
	{
		INT64 amount min -1 max MAX_BANKROLL_SIZE; // -1 means no limit
		PString currency maxlen 5;
		BYTE limType min eTableLimitTypeAny max numLimitTypes;
	};

	MsgBodyStruct SetLimitReplyBody
	{
		BYTE limType;
		INT16 errCode;
		// NOTE: not completed reply body
	};

	Message MSG_LOBBYETC_SET_GAME_LIMITS2
	{
		vector<SetLimitBody> limits maxsize 10240;
	};

	Message MSG_LOBBYETC_SET_GAME_LIMITS2_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			vector<SetLimitReplyBody> setReplies;
		}
	};
	
	
	Message MSG_LOBBYETC_LOGOUT_USER_INFO
	{
	};

	MsgBodyStruct EmptyBody
	{
	};

	Message MSG_LOBBYETC_LOGOUT_USER_INFO_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			EmptyBody emptyBody;
			INT32 numOfRequests;
		}
	};
	
	Message MSG_LOBBYETC_FIND_TOURN_IT
	{
		PString notUsedStr maxlen 20;
	};
	
	MsgBodyStruct ReacquisitionBody
	{
		PString aamsTicketId;
		SrvTime when;
		UINT32 reacquisition;
		UINT32 cost;
	};

	MsgBodyStruct ItTournBody
	{
		vector<ReacquisitionBody> reacquisitions;
	};

	struct ItTournData
	{
		UINT32 tournId;
		ItTournBody infoBody;
	};

	MsgBodyStruct AddOnBody
	{
		PString ticketId;
		SrvTime when;
		UINT32 reacquisitionType;
		UINT32 addOn;
	};

	MsgBodyStruct ItRingGameBody
	{
		vector<AddOnBody> addOns;
	};

	struct ItRingGameData
	{
		UINT32 tableId;
		ItRingGameBody infoBody;
	};

	Message MSG_LOBBYETC_FIND_TOURN_IT_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errDescr;
		}
		else
		{
			vector<ItTournData> tourns;
			vector<ItRingGameData> ringGames;
		}
	};

	
	Message MSG_LOBBYETC_CLIENT_HISTORY_REQUEST
	{
		PString notUsed maxlen 20;
		INT8 type min HAND_HISTORY_LAST_HANDS max HAND_HISTORY_TOURNAMENT; //see: HAND_HISTORY_* defines in dbm.h  These values could be changed to an enum.
		if(type == HAND_HISTORY_LAST_HANDS)
		{
			UINT64 param min 1 max MAX_HANDS_ALLOWED; //see: dbm.h
		}
        else if (type == HAND_HISTORY_LAST_SECONDS)
        {
            UINT64 param min 1 max 604800; // 1 week
        }
        else if (type == HAND_HISTORY_TOURNAMENT)
        {
            UINT64 param; // no limit for tournid
        } 
		else if (type == HAND_HISTORY_HAND_IDS)
		{
			UINT32 numRequested min 1 max 1; //1 only valid value
			UINT64 handId64 parseEndOptB4Me; // no limit
		}
		UINT32 locale min LOCALE_DEFAULT max MAX_LOCALES parseEndOptB4Me; //see: i18n.localedef.h
	};
	
	Message MSG_LOBBYETC_CLIENT_HISTORY_REQUEST_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDescr;
		}
		else
		{
			PString email;
		}
	};

	Message MSG_LOBBYETC_USER_TOURNTICKETS2
	{
		PString notUsedStr maxlen 20;
	};

	MsgBodyStruct TicketBody
	{
		UINT32 ticketId;
		PString admissionCode;
		bool isMulti;
		UINT32 ticketTypeValue;
		SrvTime issued;
		SrvTime expTime;
		PString currency;
		UINT32 ticketTypeFlags;
	};

	Message MSG_LOBBYETC_USER_TOURNTICKETS2_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString;
		}
		else
		{
			vector<TicketBody> tickets;
		}
	};

	Message MSG_LOBBYETC_CLI_SET_USER_GALLERY_IMAGE
	{
		UINT32 imageId; // no limits
	};

	Message MSG_LOBBYETC_CLI_SET_USER_GALLERY_IMAGE_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString;
		}
	};

	Message MSG_LOBBYETC_GET_LOGIN_LIMIT_INFO
	{
	};

	Message MSG_LOBBYETC_GET_LOGIN_LIMIT_INFO_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString;
		}
		else
		{
			UINT32 loginTotal;
			UINT32 loginTotalLimit;
			UINT32 loginTimeTotalSec;
			UINT32 loginTimeLimitMin;
			SrvTime userSessionStartTime;
		}
	};

	Message MSG_LOBBYETC_CLI_GET_IMAGE_USER_APPROVALS
	{
	};

	MsgBodyStruct ImageAprovalBody
	{
		UINT32 imgId;
		UINT32 userIntId;
		UINT32 flags;
		SrvTime whenApproved;
	};

	Message MSG_LOBBYETC_CLI_GET_IMAGE_USER_APPROVALS_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString;
		}
		else
		{
			vector<ImageAprovalBody> approvals;
			UINT32 nRemaining;
			UINT32 currentImageId;
			bool isGallery;
		}
	};

	Message MSG_LOBBYETC_CLI_DELETE_IMAGE_APPROVAL
	{
		UINT32 imageId; // no limit
	};

	Message MSG_LOBBYETC_CLI_DELETE_IMAGE_APPROVAL_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString;
		}
	};
	
	Message MSG_LOBBY_GET_CLIENT_OPTIONS
	{
		UINT32 optionType min eUserPropertyVipBarOptions max eClientCustomOptionsEnd parseEndOptB4Me;
	};

	Message MSG_LOBBY_GET_CLIENT_OPTIONS_REPLY
	{
		INT16 errCode;
		if ( errCode )
		{
			PString errDesc;
		}
		else
		{
			CommMsgBody
			{
				PBlock encodedPropStr;
			};
		}
	};

	Message MSG_LOBBY_SET_CLIENT_OPTIONS
	{
		CommMsgBody body maxsize USER_PROPERTYSTR_LEN; // server does not know the format and saves it to DB directly
		UINT32 propType min eUserPropertyVipBarOptions max eClientCustomOptionsEnd parseEndOptB4Me;
	};
	Message MSG_LOBBY_SET_CLIENT_OPTIONS_REPLY
	{
		INT16 errCode;
		if ( errCode )
		{
			PString errDesc;
		}
	};

	Message MSG_LOBBYETC_CLI_DISPLAY_ADS
	{
		// empty message
	};

	Message MSG_LOBBYETC_CLI_DISPLAY_ADS_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString;
		}
		else
		{
			bool displayAds;
		}
	};
		
	Message MSG_LOBBY_GET_ARJEL_EVENTS
	{
		// the message should be empty for new clients.
		// this is for old clients only:
		PString notUsedUserId maxlen 20 parseEndOptB4Me;
		UINT32 notUsedUserIntId parseEndOptB4Me; 
		UINT32 notUsedlocale min LOCALE_DEFAULT max MAX_LOCALES parseEndOptB4Me;
		UINT32 notUsedlicenseId max eLicenceLast parseEndOptB4Me;
		PString notUsedipAddr maxlen 1000 parseEndOptB4Me; 
		PString frArjelUserHash maxlen 1000 parseEndOptB4Me;
	};
		
	Message MSG_LOBBY_GET_ARJEL_EVENTS_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString;
		}
	};

	Message MSG_LOBBY_TARGET_NEWS_DESKTOP
	{
		bool onlyTargetBanner parseEndOptB4Me;
		UINT32 newsTypeMask min eTargetNewsGeneral max eTargetNewsAll parseEndOptB4Me;
	};

	Message MSG_LOBBY_TARGET_NEWS_MOBILE
	{
		UINT32 clientDownloadSource; // flag, no limit on it
		UINT32 newsProductMask min eTargetNewsGeneral max eTargetNewsAll parseEndOptB4Me;
	};

	Message MSG_LOBBY_GET_USER_CAPS_REPLY
	{
	};

	Message MSG_LOBBYETC_U_UPDATE_FLAGS_PRIV
	{
		UINT32 flags;
		UINT64 flags2;
		UINT64 flags3;
		UINT32 privileges;
		UINT64 privileges2;
		UINT64 privileges3;
	};
	
	// PYR-54689
	Message MSG_LOBBYETC_CLI_SET_GAME_AVATAR
	{
		BrandProt${ATF_THIN_NAMESPACE_SUFFIX}::AvatarImg gameAvatar;
	};
	
	// PYR-54689
	Message MSG_LOBBYETC_CLI_SET_GAME_AVATAR_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString;
		}
	};

	// client to server
	Message MSG_LOBBY_ADMIN_INFO_REPLY
	{
		// empty message without response
	};

	Message MSG_LOBBYETC_GET_USER_SPORT_BOOK_INFO
	{
		// empty message
	};

	Message MSG_LOBBYETC_GET_USER_SPORT_BOOK_INFO_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString;
		}
		else
		{
			UINT32 freeBetCount;
		}
	};
	
	struct PlayingHistoryMetadata
	{
		SrvDate startDate;
		SrvDate endDate;
		PString password notrace maxlen 1000;
		bool includeFPP;
		UINT32 reportFormat max 100; // defined as eReportFormat under srvshared/crmserver.h
		bool isHtmlForClient;
	};
	
	struct HandHistoryMetadata
	{
		INT8 type min HAND_HISTORY_LAST_HANDS max HAND_HISTORY_TOURNAMENT; //see: HAND_HISTORY_* defines in dbm.h  These values could be changed to an enum.
		if(type == HAND_HISTORY_LAST_HANDS)
		{
			UINT64 param min 1 max MAX_HANDS_ALLOWED; //see: dbm.h
		}
		else if (type == HAND_HISTORY_LAST_SECONDS)
		{
			UINT64 param min 1 max 604800; // 1 week
		}
		else if (type == HAND_HISTORY_TOURNAMENT)
		{
			UINT64 param; // no limit for tournid
		} 
		else if (type == HAND_HISTORY_HAND_IDS)
		{
			UINT32 numRequested min 1 max 1; //1 only valid value
			UINT64 handId64 parseEndOptB4Me; // no limit
		}
		UINT32 locale min LOCALE_DEFAULT max MAX_LOCALES parseEndOptB4Me; //see: i18n.localedef.h
		PString password maxlen 1000 parseEndOptB4Me;
	};
	
	struct AuxHandHistoryMetadata
	{
		INT32 locale min LOCALE_DEFAULT max MAX_LOCALES ;
		UINT32 timezone min eTzUTC max (eTzNumber-1); // enum eTimeZone in timezone.h 
		UINT8 criteriaType min aux::AUX_HH_BY_NUM_OF_HANDS max aux::AUX_HH_BY_HANDID; // 1: by last hands. 2: by last hours. 3: by hand id  
		if (criteriaType == aux::AUX_HH_BY_NUM_OF_HANDS)
		{
			UINT64 param min 1 max AUX_HH_MAX_HANDS_ALLOWED;
		}
		else if (criteriaType == aux::AUX_HH_BY_TIME)
		{
			UINT64 param min 1 max 604800; // 1 week
		}
		else if (criteriaType == aux::AUX_HH_BY_HANDID)
		{
			UINT32 numRequested min 1 max 1; //1 only valid value
			UINT64 handId64 parseEndOptB4Me; // no limit
		}
		PString password notrace maxlen 1000 ;
	};
	
	Message MSG_LOBBYETC_PLAYING_HISTORY_AUDIT2
	{
		PlayingHistoryMetadata metadata;
	};
	
	Message MSG_LOBBYETC_PLAYING_HISTORY_AUDIT2_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDescr;
		}
	};
	
	Message MSG_LOBBYETC_U_CLI_NOTIFY_PLAY_HISTORY_REPORT
	{
		INT32 reqType; // enum ePlayHistoryRequestType in LobbyEtc.h
		INT32 status; // enum ePlayHistoryRequestStatus in LobbyEtc.h
		if (reqType == 1)
		{
			PlayingHistoryMetadata metadata;
		}
		else if (reqType == 2)
		{
			HandHistoryMetadata hhMetadata;
		}
		else if (reqType == 3)
		{
			AuxHandHistoryMetadata auxHhMetadata;
		}
		PString uri;
		INT32 deliveryMethod; // enum eReportDeliveryMethod in LobbyEtc.h
	};
	
	Message MSG_LOBBYETC_GET_LAST_PLAYING_AUDIT_REPORT
	{
		// empty message
	};
	
	Message MSG_LOBBYETC_GET_LAST_PLAYING_AUDIT_REPORT_REPLY
	{
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
		else
		{
			INT32 status; // enum ePlayHistoryRequestStatus in LobbyEtc.h
			PlayingHistoryMetadata metadata;
			PString uri;
			bool showNudge;
			INT32 deliveryMethod; // enum eReportDeliveryMethod in LobbyEtc.h
		}
	};
	
	Message MSG_LOBBYETC_PLAYING_AUDIT_CLEAR_NUDGE
	{
		PlayingHistoryMetadata metadata;
	};
	
	Message MSG_LOBBYETC_PLAYING_AUDIT_CLEAR_NUDGE_REPLY
	{
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
	};
	
	Message MSG_LOBBYETC_CLIENT_HAND_HISTORY_REQUEST
	{
		HandHistoryMetadata metadata;
	};
	
	Message MSG_LOBBYETC_CLIENT_HAND_HISTORY_REQUEST_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDescr;
		}
	};
	
	Message MSG_LOBBYETC_GET_LAST_HAND_HISTORY_REPORT
	{
		// empty message
	};
	
	Message MSG_LOBBYETC_GET_LAST_HAND_HISTORY_REPORT_REPLY
	{
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
		else
		{
			INT32 status; // enum ePlayHistoryRequestStatus in LobbyEtc.h
			HandHistoryMetadata metadata;
			PString uri;
			bool showNudge;
			INT32 deliveryMethod; // enum eReportDeliveryMethod in LobbyEtc.h
		}
	};
	
	Message MSG_LOBBYETC_HAND_HISTORY_CLEAR_NUDGE
	{
		HandHistoryMetadata metadata;
	};
	
	Message MSG_LOBBYETC_HAND_HISTORY_CLEAR_NUDGE_REPLY
	{
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
	};
	
	Message MSG_LOBBYETC_PREDICTOR_GET_TICKETS
	{
		// empty message
	};
	
	Message MSG_LOBBYETC_U_CLI_NOTIFY_PREDICTOR_TICKETS
	{
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
		else
		{
			bool hasNudge;
			INT32 newTicketCount;
		}
	};
	
	Message MSG_LOBBYETC_GET_LAST_AUX_HAND_HISTORY_REPORT
	{
		// empty message
	};
	
	Message MSG_LOBBYETC_GET_LAST_AUX_HAND_HISTORY_REPORT_REPLY
	{
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
		else
		{
			INT32 status; // enum ePlayHistoryRequestStatus in LobbyEtc.h
			AuxHandHistoryMetadata metadata;
			PString uri;
			bool showNudge;
			INT32 deliveryMethod; // enum eReportDeliveryMethod in LobbyEtc.h
		}
	};
	
	Message MSG_LOBBYETC_AUX_HAND_HISTORY_CLEAR_NUDGE
	{
		AuxHandHistoryMetadata metadata;
	};
	
	Message MSG_LOBBYETC_AUX_HAND_HISTORY_CLEAR_NUDGE_REPLY
	{
		INT16 err;
		if (err)
		{
			PString errDescr;
		}
	};
	
	Message MSG_LOBBYETC_CLIENT_AUX_HAND_HISTORY_REQUEST
	{
		AuxHandHistoryMetadata metadata;
	};
	
	Message MSG_LOBBYETC_CLIENT_AUX_HAND_HISTORY_REQUEST_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDescr;
		}
	};
	
	Message MSG_LOBBYETC_CLI_TOURN_STATS
	{
		BYTE type min TOURN_STATS_TOURN_ID max TOURN_STATS_TOURN_ID_NOSTAT;
		UINT32 tournIdOrCount; // Id is not limited
	};
	
	Message MSG_LOBBYETC_CLI_TOURN_STATS_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDescr;
		}
		else
		{
			PString email;
		}
	};
	
	Message MSG_LOBBYETC_VERIFY_PWD
	{
		PString pwd notrace maxlen 1000;
		PString ssn4 notrace maxlen 4 parseEndOptB4Me;	//	PYR-79369
	};
	Message MSG_LOBBYETC_VERIFY_PWD_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDescr;
		}
	};
	
	Message MSG_LOBBY_RESPONSIBLE_GAMING_HISTORY_AUDIT
	{
		PString notUsedStr maxlen 20;
		SrvDate startDate;
		SrvDate endDate;
		PString password notrace maxlen 1000;
		UINT32 reportFormat max 100;
	};

	// LobbyEtc -> RAM middle tier
	Message MSG_LOBBYETC_GEOCOMPLY_LOCATE_REPLY_CONFIRM
	{
		INT16 errCode;
	};

	// PYR-77065
	// LobbyEtc->clients notifications
	Message MSG_LOBBYETC_CLI_SE_SESSION_NOTIF
	{
		UINT32 sessionDurationSec;
		INT64 sessionWinLoss; // positive - win, negative - loss
		PString currency;
	};

	// PYR-77065
	Message MSG_LOBBYETC_CLI_GET_SESSION_POPUP_INTERVAL
	{
		// empty message
	};

	// PYR-77065
	Message MSG_LOBBYETC_CLI_GET_SESSION_POPUP_INTERVAL_REPLY
	{
		INT16 errCode;
		if (errCode != 0)
		{
			PString errString;
		}
		else
		{
			INT32 intervalMin;
		}
	};

	// PYR-77065
	Message MSG_LOBBYETC_CLI_SET_SESSION_POPUP_INTERVAL
	{
		INT32 intervalMin min 10 max 1000; 
	};

	// PYR-77065
	Message MSG_LOBBYETC_CLI_SET_SESSION_POPUP_INTERVAL_REPLY
	{
		INT16 errCode;
		if (errCode != 0)
		{
			PString errString;
		}
		else
		{
			INT32 intervalMin;
		}
	};

	// PYR-78513
	Message MSG_LOBBYETC_GET_SESSION_WINLOSS_DATA
	{
		// empty
	};

	// PYR-78513
	Message MSG_LOBBYETC_GET_SESSION_WINLOSS_DATA_REPLY
	{
		INT16 errCode;
		if (errCode != 0)
		{
			PString errString;
		}
		else
		{
			SrvTime prevLoginTime;
			INT64 winLoss;
			PString currency;
			bool isFirstLoginSession; // PYR-83695
		}
	};

	// PYR-82345
	Message MSG_LOBBYETC_SIGNAL_EVENT_LOGIN
	{
		PString appsFlyerId maxlen 100;
		PString mobileAppId maxlen 256;
		bool lat parseEndOptB4Me;
	};

	// PYR-82345
	Message MSG_LOBBYETC_SIGNAL_EVENT_LOGIN_REPLY
	{
		INT16 errCode;
		if (errCode != 0)
		{
			PString errString;
		}
	};
	
	Message MSG_LOBBYETC_GET_MY_STARS_COUNTERS
	{
		// empty message
	};

	Message MSG_LOBBYETC_GET_MY_STARS_COUNTERS_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errString;
		}
		else
		{
			INT32 freeSpinCounter;
			INT32 instantBonusCounter;
			INT32 freeBetCounter;
			INT32 prizeGameCounter;
		}
	};
	Message MSG_LOBBYETC_CLI_GET_ASSETS
	{
		vector<PString> assetTypes maxsize 100; // sanity check
	};

}; // end of namespace cli

namespace geo
{
	// client to server
	Message MSG_LOBBYETC_CLI_NOTIF_MOBILE_VERIFIED
	{
	};

	// client to server
	Message MSG_LOBBYETC_GEOCOMPLY_LOCATE_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString maxlen 1000;
		}
		else
		{
			PString responseStr maxlen 10000;
		}
	};

	// client to server
	Message MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString maxlen 1000;
		}
	};
}; // namespace geo

namespace starsCrm
{
	// PYR-106825: StarsCRM to LobbyEtc
	Message MSG_LOBBYETC_REQ_RM_BLOCKED_COUNTRIES_STATES
	{
		// empty
	};

	// PYR-106825
	Message MSG_LOBBYETC_REQ_RM_BLOCKED_COUNTRIES_STATES_REPLY
	{
		INT16 errCode;
		if(errCode)
		{
			PString errString maxlen 1000;
		}
		else
		{
			vector<PString> rmBlockedCountriesStates;
		}
	};
};
