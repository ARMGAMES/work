/**
 * WebTokenServer_atf_thin.h
 *
 * This file was auto-generated from WebTokenServer_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin WebTokenServer_atf.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_WEBTOKENSERVER_ATF_THIN_H
#define ATF_PROTOCOL_DEFFILE_WEBTOKENSERVER_ATF_THIN_H

#include "WebTokenServer.h"


#include "ThinAtfUserDefStructs.h"

namespace WebTokenServer
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	namespace cli
	{
		struct Protocol_WTS_Q_GET_TOKEN
		{
			// 4 - tokenType
			UINT32 tokenType;

			Protocol_WTS_Q_GET_TOKEN();
			void clear();
			bool equals(const Protocol_WTS_Q_GET_TOKEN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return WTS_Q_GET_TOKEN; }
			static const char *getMsgIdString() { return "WTS_Q_GET_TOKEN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_WTS_A_GET_TOKEN
		{
			// 2[s|ss] - errCode[errDescr|token,signature]
			INT16 errCode;

			PString errDescr;

			PString token;
			PString signature;

			Protocol_WTS_A_GET_TOKEN();
			void clear();
			bool equals(const Protocol_WTS_A_GET_TOKEN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return WTS_A_GET_TOKEN; }
			static const char *getMsgIdString() { return "WTS_A_GET_TOKEN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_WTS_A_GET_TOKEN(Protocol_WTS_A_GET_TOKEN&&);
			Protocol_WTS_A_GET_TOKEN& operator=(Protocol_WTS_A_GET_TOKEN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_WTS_A_GET_TOKEN(const Protocol_WTS_A_GET_TOKEN&) = default;
			Protocol_WTS_A_GET_TOKEN& operator=(const Protocol_WTS_A_GET_TOKEN&) = default;
#endif
#endif
		};

		struct Protocol_WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN
		{
			// s - tokenStr
			PString tokenStr;

			Protocol_WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN();
			void clear();
			bool equals(const Protocol_WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN; }
			static const char *getMsgIdString() { return "WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN(Protocol_WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN&&);
			Protocol_WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN& operator=(Protocol_WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN(const Protocol_WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN&) = default;
			Protocol_WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN& operator=(const Protocol_WTS_Q_REMOVE_WEBACCOUNTSERVICE_TOKEN&) = default;
#endif
#endif
		};
		struct Protocol_WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN
		{
			// 2[s] - errCode[errDescr]
			INT16 errCode;

			PString errDescr;

			Protocol_WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN();
			void clear();
			bool equals(const Protocol_WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN; }
			static const char *getMsgIdString() { return "WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN(Protocol_WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN&&);
			Protocol_WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN& operator=(Protocol_WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN(const Protocol_WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN&) = default;
			Protocol_WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN& operator=(const Protocol_WTS_A_REMOVE_WEBACCOUNTSERVICE_TOKEN&) = default;
#endif
#endif
		};
	};

	namespace cli_unauth
	{
		struct Protocol_WTS_Q_GET_TOKEN_EXPIRY_TIME
		{
			// 4s - userIntId,tokenStr
			UINT32 userIntId;	// no need to check id
			PString tokenStr;

			Protocol_WTS_Q_GET_TOKEN_EXPIRY_TIME();
			void clear();
			bool equals(const Protocol_WTS_Q_GET_TOKEN_EXPIRY_TIME&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return WTS_Q_GET_TOKEN_EXPIRY_TIME; }
			static const char *getMsgIdString() { return "WTS_Q_GET_TOKEN_EXPIRY_TIME"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_WTS_Q_GET_TOKEN_EXPIRY_TIME(Protocol_WTS_Q_GET_TOKEN_EXPIRY_TIME&&);
			Protocol_WTS_Q_GET_TOKEN_EXPIRY_TIME& operator=(Protocol_WTS_Q_GET_TOKEN_EXPIRY_TIME&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_WTS_Q_GET_TOKEN_EXPIRY_TIME(const Protocol_WTS_Q_GET_TOKEN_EXPIRY_TIME&) = default;
			Protocol_WTS_Q_GET_TOKEN_EXPIRY_TIME& operator=(const Protocol_WTS_Q_GET_TOKEN_EXPIRY_TIME&) = default;
#endif
#endif
		};
		struct Protocol_WTS_A_GET_TOKEN_EXPIRY_TIME
		{
			// 2[s|4s] - errCode[errDescr|tokenValidTimeInSec,userId]
			INT16 errCode;

			PString errDescr;

			UINT32 tokenValidTimeInSec;
			PString userId;	//	PYR-72639

			Protocol_WTS_A_GET_TOKEN_EXPIRY_TIME();
			void clear();
			bool equals(const Protocol_WTS_A_GET_TOKEN_EXPIRY_TIME&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return WTS_A_GET_TOKEN_EXPIRY_TIME; }
			static const char *getMsgIdString() { return "WTS_A_GET_TOKEN_EXPIRY_TIME"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_WTS_A_GET_TOKEN_EXPIRY_TIME(Protocol_WTS_A_GET_TOKEN_EXPIRY_TIME&&);
			Protocol_WTS_A_GET_TOKEN_EXPIRY_TIME& operator=(Protocol_WTS_A_GET_TOKEN_EXPIRY_TIME&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_WTS_A_GET_TOKEN_EXPIRY_TIME(const Protocol_WTS_A_GET_TOKEN_EXPIRY_TIME&) = default;
			Protocol_WTS_A_GET_TOKEN_EXPIRY_TIME& operator=(const Protocol_WTS_A_GET_TOKEN_EXPIRY_TIME&) = default;
#endif
#endif
		};

		struct Protocol_WTS_Q_VERIFY_PSIP_TOKEN
		{
			// 4s - userIntId,tokenStr
			UINT32 userIntId;	// no need to check id
			PString tokenStr;

			Protocol_WTS_Q_VERIFY_PSIP_TOKEN();
			void clear();
			bool equals(const Protocol_WTS_Q_VERIFY_PSIP_TOKEN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return WTS_Q_VERIFY_PSIP_TOKEN; }
			static const char *getMsgIdString() { return "WTS_Q_VERIFY_PSIP_TOKEN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_WTS_Q_VERIFY_PSIP_TOKEN(Protocol_WTS_Q_VERIFY_PSIP_TOKEN&&);
			Protocol_WTS_Q_VERIFY_PSIP_TOKEN& operator=(Protocol_WTS_Q_VERIFY_PSIP_TOKEN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_WTS_Q_VERIFY_PSIP_TOKEN(const Protocol_WTS_Q_VERIFY_PSIP_TOKEN&) = default;
			Protocol_WTS_Q_VERIFY_PSIP_TOKEN& operator=(const Protocol_WTS_Q_VERIFY_PSIP_TOKEN&) = default;
#endif
#endif
		};
		struct Protocol_WTS_A_VERIFY_PSIP_TOKEN
		{
			// 2[s|s] - errCode[errDescr|userId]
			INT16 errCode;

			PString errDescr;

			PString userId;

			Protocol_WTS_A_VERIFY_PSIP_TOKEN();
			void clear();
			bool equals(const Protocol_WTS_A_VERIFY_PSIP_TOKEN&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return WTS_A_VERIFY_PSIP_TOKEN; }
			static const char *getMsgIdString() { return "WTS_A_VERIFY_PSIP_TOKEN"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_WTS_A_VERIFY_PSIP_TOKEN(Protocol_WTS_A_VERIFY_PSIP_TOKEN&&);
			Protocol_WTS_A_VERIFY_PSIP_TOKEN& operator=(Protocol_WTS_A_VERIFY_PSIP_TOKEN&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_WTS_A_VERIFY_PSIP_TOKEN(const Protocol_WTS_A_VERIFY_PSIP_TOKEN&) = default;
			Protocol_WTS_A_VERIFY_PSIP_TOKEN& operator=(const Protocol_WTS_A_VERIFY_PSIP_TOKEN&) = default;
#endif
#endif
		};
	};

	namespace notifications
	{
		struct Protocol_WTS_U_APP_SESSION_LOGOUT
		{
			// 84 - appSessionId,userIntId
			UINT64 appSessionId;
			UINT32 userIntId;

			Protocol_WTS_U_APP_SESSION_LOGOUT();
			void clear();
			bool equals(const Protocol_WTS_U_APP_SESSION_LOGOUT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return WTS_U_APP_SESSION_LOGOUT; }
			static const char *getMsgIdString() { return "WTS_U_APP_SESSION_LOGOUT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
	};
};

#endif
