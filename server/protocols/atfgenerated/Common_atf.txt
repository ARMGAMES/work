#include "clientplatforms.h"
#include "lobby.h"
#include "dbm.h"
#include "loginhelper.h"
#include "PBitmask.h"
#include "sitemasks.h"
#include "licensemask.h"

#define ATF_USER_NAME_MAX_LENGTH (USER_NAME_LEN-1)
#define ATF_TICKET_ADMISSION_MAX_LENGTH  50
#define ATF_MAX_PM_SCALE_LL              1000000000LL  // 1e9
#define ATF_MAX_RESERVED_TICKETS         100           // max of games in Sag (5)  and Sng (100)
#define MAX_VALUE_clientExtraInfoMask ((UINT32(cliExtraInfoMask_Last)<<1)-1) // enum ClientExtraInfoMask


#define TOP_LEVEL_NAMESPACE Common${ATF_THIN_NAMESPACE_SUFFIX}

namespace AtfShared
{
	struct ConvRatesAndMarginsStruct                                     // ??? pending limits  // ??? and what about the format? Check it!!!
	{
		UINT64 rateSrc;
		UINT64 rateDst;
		UINT64 rateMid;
		UINT64 rateFin;
		INT32 mgnVal;
		INT32 amtMgnSrc;
		INT32 amtMgnDst;
		INT32 amtMgnUS ;
		PString curSrc;
		INT32 amtSrc;
		INT32 amtSrcUS;
		PString curDst;
		INT64 amtDst;
		INT64 amtDstNoMgn;
		INT32 amtDstUS;
		UINT32 intActionType;
	};

	MsgBodyStruct CurrencyContextOptionalMsgBody
	{
		SrvTime srvTime parseEndOptB4Me;
		vector<ConvRatesAndMarginsStruct> convRatesAndMargins;        // ??? pending maxsize
	};
	
	struct UserTicketDataBase
	{
		PString admissionId maxlen ATF_TICKET_ADMISSION_MAX_LENGTH;
		UINT32 reserved min 0 max ATF_MAX_RESERVED_TICKETS;
	};	

	MsgBodyStruct LoginExtra
	{
		@Override LoginExtra( const ClientLoginExtras2& loginExtras_ )
		{
			macAddr = loginExtras_.macAddr;
			volumeLabel = loginExtras_.volumeLabel;
			installId = loginExtras_.installId;
			userExtraId = loginExtras_.userExtraId;
			clientSiteId = loginExtras_.clientSiteId;
			clientPlatform = loginExtras_.clientPlatform;
			clientExtraInfoMask = loginExtras_.clientExtraInfoMask;
			clientType = loginExtras_.clientType;
			clientDevice = loginExtras_.clientDevice;
			clientVersion = loginExtras_.clientVersion;
			routerMacAddr = loginExtras_.routerMacAddr;
			clientBrand = loginExtras_.brandId;
			osId = loginExtras_.osId;
			appTypeId = loginExtras_.appTypeId;
			productId = loginExtras_.productId;
			installId2 = loginExtras_.installId2;
			operatorId = loginExtras_.operatorId;
			osVersion = loginExtras_.osVersion;
		}
	
		PString macAddr maxlen MAC_ADDR_LEN parseEndOptB4Me;
		PString volumeLabel maxlen VOLUME_LABEL_LEN;
		PString installId maxlen USER_INSTALLID_LEN;
		PString machineGuid maxlen 1000;
		PString adapterGuid maxlen 1000;
		PString userExtraId maxlen 1000;
		UINT32 clientSiteId min PokerStars_SiteUnknown max PokerStars_Last; // enum Sites in sites.h
		UINT32 clientPlatform min Client_UnknownPlatform max Client_Last; // enum ClientPlatform in clientplatforms.h
		UINT32 clientExtraInfoMask max MAX_VALUE_clientExtraInfoMask; // enum ClientExtraInfoMask
		
		// PYR-24582
		UINT32 clientType min ClientType_Unknown max ClientType_Last default ClientType_Unknown parseEndOptB4Me; // enum ClientType in clientplatforms.h
		UINT32 clientDevice min ClientDevice_Unknown max ClientDevice_Last default ClientDevice_Unknown parseEndOptB4Me; // enum ClientDevice in clientplatforms.h
		
		// PYR-25260
		UINT32 clientVersion default 0 parseEndOptB4Me;
		
		// PYR-29604
		PString routerMacAddr default "" maxlen MAC_ADDR_LEN parseEndOptB4Me;
		
		// PYR-37793
		UINT32 clientBrand default BrandType_PokerStars min BrandType_None max BrandType_Last parseEndOptB4Me; // enum BrandTypes in brands.h
		
		// PYR-38296
		UINT32 osId default OSId_Unknown min OSId_Unknown max OsId_Last parseEndOptB4Me;
		UINT32 appTypeId default AppTypeId_Unknown min AppTypeId_Unknown max AppTypeId_Last; // enum AppTypeId in clientplatforms.h
		UINT32 productId default ProductId_Unknown min ProductId_Unknown max ProductId_Last; // enum ProductId in clientplatforms.h
		
		// PYR-51188
		PString installId2 default "" maxlen 100 parseEndOptB4Me;

		// PYR-52000
		PString operatorId default "" maxlen 32 parseEndOptB4Me;
		
		// PYR-52518
		PString osVersion default "" maxlen 20 parseEndOptB4Me;
	};

	MsgBodyStruct UserPropertyBody
	{
		INT32 propType min ePromoName max eClientCustomOptionsEnd; // eUserPropertyType
		INT32 propInt;
		PString propStr maxlen 10000;
		CommSrvTime propWhen;
	};
	// MG: moved from regulator_atf.txt in 2019.Main.07 to be used in other components.
	// Legacy struct to support existing client requests
	// all new requests/replies to use Common::AtfShared::UserPropertyBody
	struct UserPropertyLegacy // request
	{
		INT32 propType min ePromoName max eClientCustomOptionsEnd; // eUserPropertyType
		INT32 propInt;
		PString propStr maxlen 10000;
		CommSrvTime propWhen;
	};

	struct UserCurrencyAccount
	{
		PString currency default "USD";
		INT32 chips;
		INT32 owedChips;
		INT32 tChips;
		INT32 wChips;
	};

	struct UserCurrencyAccounts
	{
		UserCurrencyAccount defaultAccount;
		vector<UserCurrencyAccount> exAccounts;
	};

	struct PaysystemMask
	{
		UINT32 mask;  // USERS.DEPOSITMASK
		UINT32 mask2; // USERS.DEPOSITMASK2
		UINT64 mask3; // USERS.DEPOSITMASK3
		UINT64 mask4; // USERS.DEPOSITMASK4
	};

	struct PlayerPointsProgram
	{
		// counters: lifeTime, yearly, monthly; Not expected to ever exceed 2B boundary; DB storage is 32 bits - LZ OKed
		INT64 lt;
		INT64 yr;
		INT64 mo;
		SrvDate statusSet;
		INT32 milliCent; // PYR-34330 stored in DB as SmallInt, never exceeds 1000
	};

	struct User
	{
		// From User::_parseUserOlap
		PString id;
		PString dummy;
		UINT32 privileges;
		INT32 chips_dummy;
		INT32 playChips32;
		INT32 tChips_dummy;
		INT32 wChips_dummy;
		PString fullName;
		PString email;
		PString addr_1;
		PString addr_2;
		PString city;
		PString state;
		PString country;
		PString zipCode;
		PString userInstallId;
		UINT32 imageId;
		UINT32 flags;
		PString prevUserId;
		INT32 fpp_;
		INT32 ltFpp_;
		INT16 unique;
		SrvTime registered;
		UINT32 userIntId;
		PString category;
		PString phone;
		SrvTime firstDeposit;
		UINT32 hybridSiteId;		//	PYR-113404.
		PString sid;
		UINT32 visited;
		INT32 fppCents_;
		INT32 vipStatus;
		INT32 vipCounter1_;
		INT32 vipCounter2_;
		SrvTime vipStatusSet;
		SrvTime firstTransfer;
		INT32 owedChips_dummy;
		UINT32 depositMask32;
		SrvDate birthDate;
		UINT32 locale;
		UINT64 privileges2;
		UINT32 clearedMask32;
		UINT32 emLocale;
		PString encrPwd;
		UINT32 timezone;
		PString currency_dummy;
		PString firstName;
		PString lastName;
		PString fiscalCode;
		UINT32 licenseId;
		SrvTime gracePeriodUntil_dummy;
		UINT64 flags2;
		INT16 ltFppCents_;
		INT16 vipCounter1Cents_;
		INT16 vipCounter2Cents_;
		UINT32 adminFlags;
		UINT64 overcreditMask64;
		UINT32 originalUserIntId;
		UserCurrencyAccounts balance;
		UINT64 depositMask64;
		UINT64 clearedMask64;
		PString sex;
		PString normalizedUserId;
		PString mobile;
		INT32 licenseSpecificLimit1;
		INT32 licenseSpecificCounter2;
		CommMsgBody { PaysystemMask depositMask; };
		CommMsgBody { PaysystemMask clearedMask; };
		CommMsgBody { PaysystemMask overcreditMask; };
		INT32 vipCounter3InCents_;
		INT32 beMoneyIn;
		INT32 beMoneyOut;
		INT32 licenseSpecificAmount3;
		SrvDate vipStatusUntil;
		UINT32 platformsUsed;
		UINT64 facebookIntId;
		INT64 playChips;
		UINT32 blockingCode;
		PString idExtension;
		UINT64 privileges3;
		CommMsgBody { PlayerPointsProgram cpp; };
		CommMsgBody { PlayerPointsProgram spp; };
		UINT64 flags3;
		UINT32 brandsUsed;
		INT32 nac2;
		CommMsgBody
		{
			PSiteMask visitedEx;
			UINT32 regSiteId parseEndOptB4Me;	//	PYR-113404.
			// #ATTENTION: Conditionally parse all new elements
		};
		// From User::_parseUserExtraInfo
		CommMsgBody
		{
			INT16 operatorId;
			PString promoName;
			// #ATTENTION: Conditionally parse all new elements
		};
		// #ATTENTION: Do not add elements here!
	};

	struct UserWithProperties
	{
		CommMsgBody
		{
			User user;
		};
		CommMsgBody
		{
			vector<UserPropertyLegacy> userProps;
		};
	};
};