#include "dbm.h"
#include "brandimgs${ATF_THIN_FILENAME_SUFFIX}.h"

#define TOP_LEVEL_NAMESPACE dbm

namespace admin
{
	// This message MUST be prepend with MessageInfoStruct
	Message DBM_Q_SET_FRAUDULENT_ACCOUNT_FLAG
	{
		UINT32 userIntId;
		UINT32 reasons min eFraudulentAccountReasons_Min max eFraudulentAccountReasons_Max;
		INT32 updateType; // type*SetFraudulentAccountFlag
		PString comment maxlen (USER_COMMENTS_LEN-1); // In DB field name is 'USERCOMMENTS.COMMENT'
	};

	Message DBM_A_SET_FRAUDULENT_ACCOUNT_FLAG
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDesc;
		}
	};

	// This message MUST be prepend with MessageInfoStruct
	Message DBM_Q_CLEAR_FRAUDULENT_ACCOUNT_FLAG
	{
		UINT32 userIntId;
		INT32 updateType; // type*ClearFraudulentAccountFlag
		PString comment maxlen (USER_COMMENTS_LEN-1); // In DB field name is 'USERCOMMENTS.COMMENT'
	};

	Message DBM_A_CLEAR_FRAUDULENT_ACCOUNT_FLAG
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDesc;
		}
	};
};

namespace ArchiveManager
{
	MsgBodyStruct RelatedUsers
	{
		PString groupId;
		UINT32 severity;
		CommSrvTime userWhen;
		PString userComment;
		UINT32 otherIntId;
		PString otherUserId;
		CommSrvTime otherWhen;
		PString otherComment;
		UINT32 otherAdminIntId;
	};

	Message DBM_Q_ARCH_GET_RELATEDUSERS		// archivemanager -> OLAP
	{
		PString userId;
	};

	Message DBM_A_ARCH_GET_RELATEDUSERS
	{
		INT16 errCode;
		if(errCode == 0)
		{
			vector<RelatedUsers> relatedUsers;
		}
		else
		{
			PString errString;
		}
	};

	Message DBM_Q_UNARCHIVE_INSERT_RELATEDUSERS		// archivemanager -> dbm
	{
		UINT32 userIntId;
		PString userId;
		vector<RelatedUsers> relatedUsers;
	};

	Message DBM_A_UNARCHIVE_INSERT_RELATEDUSERS
	{
		INT16 errCode;
		if(errCode != 0)
		{
			PString errString;
		}
	};
};

Message DBM_Q_USER_INFO
{
	PString userId;
	PString countryByIp;
	PString stateByIp;
};

struct P_UserProperty
{
	INT32 propType;
	INT32 propInt;
	PString propStr;
	SrvTime propWhen;
};

Message DBM_A_USER_INFO
{
	INT16 errcode;
	if( errcode )
	{
		PString errstr;
	}
	else
	{
		PString fullName;
		PString email;
		PString addr_1;
		PString addr_2;
		PString city;
		PString state;
		PString country;
		PString zipCode;
		PBlock image; // deprecated and not filled out it appears
		UINT32 privileges;
		UINT32 correctedUserFlags;
		UINT32 effectivePrivileges;
		UINT32 imageIdUser; // duplicated field with later imageId?
		UINT32 bonus;
		UINT32 fppToEarn;
		UINT32 availAmount;
		PString phone;
		SrvDate birthDate;
		UINT64 privileges2;
		UINT64 effectivePrivileges2;
		UINT32 daysExclActual;
		SrvTime srvExclFrom;
		SrvTime srvExclUntil;
		PString firstName;
		PString lastName;
		PString fiscalCode;
		vector<P_UserProperty> userProps;
		UINT32 vipCounter1;
		UINT16 vipCounter1Cents;
		UINT32 vipCounter2;
		UINT16 vipCounter2Cents;
		UINT64 correctedUserFlags2;
		UINT32 imageId;
		PString sex;
		PString mobile;
		bool addressStateLocked;
		SrvTime registered;
		PString promoName;
		UINT32 blockingCode;
		UINT64 privileges3;
		UINT64 effectivePrivileges3;
		INT8 missedMonths;
		SrvDate vipStatusUntil;
		INT8 missableMonthsYearly;
		UINT64 correctedUserFlags3;
		BrandProt${ATF_THIN_NAMESPACE_SUFFIX}::BrandImageList brandImages;
		UINT32 hallOfFameLevel;
		UINT32 licenseId;
	}
};

