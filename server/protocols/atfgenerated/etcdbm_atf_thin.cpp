/**
 * etcdbm_atf_thin.cpp
 *
 * This file was auto-generated from etcdbm_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin etcdbm_atf.txt
 */
 
#include "etcdbm_atf_thin.h"

//=================================================================
//                    UserActivity
//=================================================================

EtcDbmATF::UserActivity::UserActivity()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

EtcDbmATF::UserActivity::UserActivity(UserActivity&& _o)
	: gameId(std::move(_o.gameId))
	, userIntId(std::move(_o.userIntId))
	, eventTime(std::move(_o.eventTime))
	, gameCategory(std::move(_o.gameCategory))
	, handType(std::move(_o.handType))
	, limit(std::move(_o.limit))
	, minPlayers(std::move(_o.minPlayers))
	, maxPlayers(std::move(_o.maxPlayers))
	, playersPerTable(std::move(_o.playersPerTable))
	, loBet(std::move(_o.loBet))
	, hiBet(std::move(_o.hiBet))
	, buyIn(std::move(_o.buyIn))
	, speed(std::move(_o.speed))
	, tournVariant(std::move(_o.tournVariant))
	, strRef(std::move(_o.strRef))
	, flags(std::move(_o.flags))
	, currency(std::move(_o.currency))
{
}

EtcDbmATF::UserActivity& EtcDbmATF::UserActivity::operator=(UserActivity&& _o)
{
	if(this != &_o)
	{
		gameId = std::move(_o.gameId);
		userIntId = std::move(_o.userIntId);
		eventTime = std::move(_o.eventTime);
		gameCategory = std::move(_o.gameCategory);
		handType = std::move(_o.handType);
		limit = std::move(_o.limit);
		minPlayers = std::move(_o.minPlayers);
		maxPlayers = std::move(_o.maxPlayers);
		playersPerTable = std::move(_o.playersPerTable);
		loBet = std::move(_o.loBet);
		hiBet = std::move(_o.hiBet);
		buyIn = std::move(_o.buyIn);
		speed = std::move(_o.speed);
		tournVariant = std::move(_o.tournVariant);
		strRef = std::move(_o.strRef);
		flags = std::move(_o.flags);
		currency = std::move(_o.currency);
	}
	return *this;
}

#endif

void EtcDbmATF::UserActivity::clear()
{
	gameId = 0;
	userIntId = 0;
	eventTime.setNull();
	gameCategory = 0;
	handType = 0;
	limit = 0;
	minPlayers = 0;
	maxPlayers = 0;
	playersPerTable = 0;
	loBet = 0;
	hiBet = 0;
	buyIn = 0;
	speed = 0;
	tournVariant = 0;
	strRef.clear();
	flags = 0;
	currency.clear();
}

bool EtcDbmATF::UserActivity::equals(const UserActivity& _o) const
{
	return gameId == _o.gameId &&
		userIntId == _o.userIntId &&
		eventTime.equals(_o.eventTime) &&
		gameCategory == _o.gameCategory &&
		handType == _o.handType &&
		limit == _o.limit &&
		minPlayers == _o.minPlayers &&
		maxPlayers == _o.maxPlayers &&
		playersPerTable == _o.playersPerTable &&
		loBet == _o.loBet &&
		hiBet == _o.hiBet &&
		buyIn == _o.buyIn &&
		speed == _o.speed &&
		tournVariant == _o.tournVariant &&
		strRef.equals(_o.strRef) &&
		flags == _o.flags &&
		currency.equals(_o.currency);
}

const char *EtcDbmATF::UserActivity::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("gameId=");
	_buf.appendUint64(gameId);
	_buf.append(',');
	_buf.append("userIntId=");
	_buf.appendUint(userIntId);
	_buf.append(',');
	_buf.append("eventTime=");
	ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, eventTime);
	_buf.append(',');
	_buf.append("gameCategory=");
	_buf.appendUint(gameCategory);
	_buf.append(',');
	_buf.append("handType=");
	_buf.appendUint(handType);
	_buf.append(',');
	_buf.append("limit=");
	_buf.appendUint(limit);
	_buf.append(',');
	_buf.append("minPlayers=");
	_buf.appendUint(minPlayers);
	_buf.append(',');
	_buf.append("maxPlayers=");
	_buf.appendUint(maxPlayers);
	_buf.append(',');
	_buf.append("playersPerTable=");
	_buf.appendUint(playersPerTable);
	_buf.append(',');
	_buf.append("loBet=");
	_buf.appendUint(loBet);
	_buf.append(',');
	_buf.append("hiBet=");
	_buf.appendUint(hiBet);
	_buf.append(',');
	_buf.append("buyIn=");
	_buf.appendUint64(buyIn);
	_buf.append(',');
	_buf.append("speed=");
	_buf.appendUint(speed);
	_buf.append(',');
	_buf.append("tournVariant=");
	_buf.appendUint(tournVariant);
	_buf.append(',');
	_buf.append("strRef=");
	_buf.append(strRef);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append('}');
	return _buf.c_str();
}

void EtcDbmATF::UserActivity::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(UserActivity())) // not empty
	{
		_body.composeUINT64(gameId);
		_body.composeUINT32(userIntId);
		_body.composeSrvTime(eventTime);
		_body.composeUINT32(gameCategory);
		_body.composeBYTE(handType);
		_body.composeBYTE(limit);
		_body.composeUINT32(minPlayers);
		_body.composeUINT32(maxPlayers);
		_body.composeUINT16(playersPerTable);
		_body.composeUINT32(loBet);
		_body.composeUINT32(hiBet);
		_body.composeUINT64(buyIn);
		_body.composeUINT16(speed);
		_body.composeUINT32(tournVariant);
		_body.composeString(strRef);
		_body.composeUINT32(flags);
		_body.composeString(currency);
	}

	_msg.composeMsgBody(_body);
}

void EtcDbmATF::UserActivity::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(gameId);
	_parser0.parseUINT32(userIntId);
	_parser0.parseSrvTime(eventTime);
	_parser0.parseUINT32(gameCategory);
	_parser0.parseBYTE(handType);
	_parser0.parseBYTE(limit);
	_parser0.parseUINT32(minPlayers);
	_parser0.parseUINT32(maxPlayers);
	_parser0.parseUINT16(playersPerTable);
	_parser0.parseUINT32(loBet);
	_parser0.parseUINT32(hiBet);
	_parser0.parseUINT64(buyIn);
	_parser0.parseUINT16(speed);
	_parser0.parseUINT32(tournVariant);
	_parser0.parseStringP(strRef);
	_parser0.parseUINT32(flags);
	_parser0.parseStringP(currency);
}

/*static*/ void EtcDbmATF::UserActivity::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	UINT64 gameId; _parser0.parseUINT64(gameId);
	AtfValidator::validateUint(_descr, "gameId", gameId, _checker, __FILE__, __LINE__);
	UINT32 userIntId; _parser0.parseUINT32(userIntId);
	AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	SrvTime eventTime; _parser0.parseSrvTime(eventTime);
	AtfValidator::validateSrvDateTime(_descr, "eventTime", eventTime, _checker, __FILE__, __LINE__);
	UINT32 gameCategory; _parser0.parseUINT32(gameCategory);
	AtfValidator::validateInt(_descr, "gameCategory", gameCategory, _checker, __FILE__, __LINE__);
	BYTE handType; _parser0.parseBYTE(handType);
	AtfValidator::validateInt(_descr, "handType", handType, _checker, __FILE__, __LINE__);
	BYTE limit; _parser0.parseBYTE(limit);
	AtfValidator::validateInt(_descr, "limit", limit, _checker, __FILE__, __LINE__);
	UINT32 minPlayers; _parser0.parseUINT32(minPlayers);
	AtfValidator::validateInt(_descr, "minPlayers", minPlayers, _checker, __FILE__, __LINE__);
	UINT32 maxPlayers; _parser0.parseUINT32(maxPlayers);
	AtfValidator::validateInt(_descr, "maxPlayers", maxPlayers, _checker, __FILE__, __LINE__);
	UINT16 playersPerTable; _parser0.parseUINT16(playersPerTable);
	AtfValidator::validateInt(_descr, "playersPerTable", playersPerTable, _checker, __FILE__, __LINE__);
	UINT32 loBet; _parser0.parseUINT32(loBet);
	AtfValidator::validateInt(_descr, "loBet", loBet, _checker, __FILE__, __LINE__);
	UINT32 hiBet; _parser0.parseUINT32(hiBet);
	AtfValidator::validateInt(_descr, "hiBet", hiBet, _checker, __FILE__, __LINE__);
	UINT64 buyIn; _parser0.parseUINT64(buyIn);
	AtfValidator::validateUint(_descr, "buyIn", buyIn, _checker, __FILE__, __LINE__);
	UINT16 speed; _parser0.parseUINT16(speed);
	AtfValidator::validateInt(_descr, "speed", speed, _checker, __FILE__, __LINE__);
	UINT32 tournVariant; _parser0.parseUINT32(tournVariant);
	AtfValidator::validateInt(_descr, "tournVariant", tournVariant, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "strRef"); size_t szStrRef = strlen(_dummy);
	AtfValidator::validateInt(_descr, "strRef", szStrRef, _checker, __FILE__, __LINE__);
	UINT32 flags; _parser0.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "currency"); size_t szCurrency = strlen(_dummy);
	AtfValidator::validateInt(_descr, "currency", szCurrency, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_ETCDBM_Q_GET_USER_ACTIVITY
//=================================================================

EtcDbmATF::Protocol_ETCDBM_Q_GET_USER_ACTIVITY::Protocol_ETCDBM_Q_GET_USER_ACTIVITY()
{
	clear();
}

void EtcDbmATF::Protocol_ETCDBM_Q_GET_USER_ACTIVITY::clear()
{
	userIntId = 0;
}

bool EtcDbmATF::Protocol_ETCDBM_Q_GET_USER_ACTIVITY::equals(const Protocol_ETCDBM_Q_GET_USER_ACTIVITY& _o) const
{
	return userIntId == _o.userIntId;
}

const char *EtcDbmATF::Protocol_ETCDBM_Q_GET_USER_ACTIVITY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(ETCDBM_Q_GET_USER_ACTIVITY).append(")");
	_buf.append(',');
	_buf.append("userIntId=");
	_buf.appendUint(userIntId);
	return _buf.c_str();
}

void EtcDbmATF::Protocol_ETCDBM_Q_GET_USER_ACTIVITY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(userIntId);
}

void EtcDbmATF::Protocol_ETCDBM_Q_GET_USER_ACTIVITY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(userIntId);
}

/*static*/ void EtcDbmATF::Protocol_ETCDBM_Q_GET_USER_ACTIVITY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "ETCDBM_Q_GET_USER_ACTIVITY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 userIntId; _parser.parseUINT32(userIntId);
	AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_ETCDBM_A_GET_USER_ACTIVITY
//=================================================================

EtcDbmATF::Protocol_ETCDBM_A_GET_USER_ACTIVITY::Protocol_ETCDBM_A_GET_USER_ACTIVITY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

EtcDbmATF::Protocol_ETCDBM_A_GET_USER_ACTIVITY::Protocol_ETCDBM_A_GET_USER_ACTIVITY(Protocol_ETCDBM_A_GET_USER_ACTIVITY&& _o)
	: errCode(std::move(_o.errCode))
	, errDesc(std::move(_o.errDesc))
	, userActivity(std::move(_o.userActivity))
{
}

EtcDbmATF::Protocol_ETCDBM_A_GET_USER_ACTIVITY& EtcDbmATF::Protocol_ETCDBM_A_GET_USER_ACTIVITY::operator=(Protocol_ETCDBM_A_GET_USER_ACTIVITY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDesc = std::move(_o.errDesc);
		userActivity = std::move(_o.userActivity);
	}
	return *this;
}

#endif

void EtcDbmATF::Protocol_ETCDBM_A_GET_USER_ACTIVITY::clear()
{
	errCode = 0;
	errDesc.clear();
	userActivity.clear();
}

bool EtcDbmATF::Protocol_ETCDBM_A_GET_USER_ACTIVITY::equals(const Protocol_ETCDBM_A_GET_USER_ACTIVITY& _o) const
{
	return errCode == _o.errCode &&
		errDesc.equals(_o.errDesc) &&
		userActivity.equals(_o.userActivity);
}

const char *EtcDbmATF::Protocol_ETCDBM_A_GET_USER_ACTIVITY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(ETCDBM_A_GET_USER_ACTIVITY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendUint(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
	}
	else
	{
		_buf.append(',');
		_buf.append("userActivity=");
		userActivity.toTraceString(_buf);
	}
	return _buf.c_str();
}

void EtcDbmATF::Protocol_ETCDBM_A_GET_USER_ACTIVITY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errDesc);
	}
	else
	{
		userActivity.composeMsg(_msg);
	}
}

void EtcDbmATF::Protocol_ETCDBM_A_GET_USER_ACTIVITY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errDesc);
	}
	else
	{
		userActivity.parseMsg(_parser);
	}
}

/*static*/ void EtcDbmATF::Protocol_ETCDBM_A_GET_USER_ACTIVITY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "ETCDBM_A_GET_USER_ACTIVITY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT16 errCode = 0;
	_parser.parseUINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szUserActivity = ThinAtf::LAtfVector< UserActivity, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("userActivity"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "userActivity", szUserActivity, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY
//=================================================================

EtcDbmATF::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

EtcDbmATF::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY(Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY&& _o)
	: activity(std::move(_o.activity))
{
}

EtcDbmATF::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY& EtcDbmATF::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY::operator=(Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY&& _o)
{
	if(this != &_o)
	{
		activity = std::move(_o.activity);
	}
	return *this;
}

#endif

void EtcDbmATF::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY::clear()
{
	activity.clear();
}

bool EtcDbmATF::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY::equals(const Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY& _o) const
{
	return activity.equals(_o.activity);
}

const char *EtcDbmATF::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(ETCDBM_Q_INSERT_USER_ACTIVITY).append(")");
	_buf.append(',');
	_buf.append("activity=");
	activity.toTraceString(_buf);
	return _buf.c_str();
}

void EtcDbmATF::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY::composeMsg(CommMsgBody& _msg) const
{
	activity.composeMsg(_msg);
}

void EtcDbmATF::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY::parseMsg(CommMsgParser& _parser)
{
	activity.parseMsg(_parser);
}

/*static*/ void EtcDbmATF::Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "ETCDBM_Q_INSERT_USER_ACTIVITY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	UserActivity::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("activity"), _fieldsWithUnparsedContent);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_ETCDBM_A_INSERT_USER_ACTIVITY
//=================================================================

EtcDbmATF::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

EtcDbmATF::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY(Protocol_ETCDBM_A_INSERT_USER_ACTIVITY&& _o)
	: errCode(std::move(_o.errCode))
	, errDesc(std::move(_o.errDesc))
{
}

EtcDbmATF::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY& EtcDbmATF::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY::operator=(Protocol_ETCDBM_A_INSERT_USER_ACTIVITY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errDesc = std::move(_o.errDesc);
	}
	return *this;
}

#endif

void EtcDbmATF::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY::clear()
{
	errCode = 0;
	errDesc.clear();
}

bool EtcDbmATF::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY::equals(const Protocol_ETCDBM_A_INSERT_USER_ACTIVITY& _o) const
{
	return errCode == _o.errCode &&
		errDesc.equals(_o.errDesc);
}

const char *EtcDbmATF::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(ETCDBM_A_INSERT_USER_ACTIVITY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendUint(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errDesc=");
		_buf.append(errDesc);
	}
	return _buf.c_str();
}

void EtcDbmATF::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errDesc);
	}
}

void EtcDbmATF::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errDesc);
	}
}

/*static*/ void EtcDbmATF::Protocol_ETCDBM_A_INSERT_USER_ACTIVITY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "ETCDBM_A_INSERT_USER_ACTIVITY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT16 errCode = 0;
	_parser.parseUINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errDesc"); size_t szErrDesc = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errDesc", szErrDesc, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool EtcDbmATF::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, ""))
	{
		switch(_msgId)
		{
			case ETCDBM_A_GET_USER_ACTIVITY: Protocol_ETCDBM_A_GET_USER_ACTIVITY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case ETCDBM_A_INSERT_USER_ACTIVITY: Protocol_ETCDBM_A_INSERT_USER_ACTIVITY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case ETCDBM_Q_GET_USER_ACTIVITY: Protocol_ETCDBM_Q_GET_USER_ACTIVITY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case ETCDBM_Q_INSERT_USER_ACTIVITY: Protocol_ETCDBM_Q_INSERT_USER_ACTIVITY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

