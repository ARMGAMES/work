//------------------------------------------------------------------------------
//	PPP (progressive plus pool) starter <-> Client Protocol
//------------------------------------------------------------------------------
//
// Copyright (C) 2019 Stars Technologies Services All rights reserved.
//
//------------------------------------------------------------------------------

#include "UserDefStructs.h"
#include "mtlobby/TournCommonStructs${ATF_THIN_FILENAME_SUFFIX}.h"
#include "sitemasks.h"
#include "pyrtime.h"
#include "lobby.h"
#include "dbm.h"

//------------------------------------------------------------------------------

#define TOP_LEVEL_NAMESPACE PPPClient // overwrite the default top level namespace

//------------------------------------------------------------------------------

namespace publication
{
	MsgBodyStruct PppBuyInTierInfo
	{
		UINT32 buyInTierId;
		INT64 buyIn;
		INT64 rake;
	};

	MsgBodyStruct PppVisibility
	{
		UINT32 brandMask; // visibility mask
		PSiteMask siteMask; // visibility mask
		CommMsgBody
		{
			bool excludeCountries;
			vector< PString > countries; // country inclusion/exclusion list
		};
		PString criteria; // criteria name to look up in Help Support Portal
	};

	// TODO @move_only_no_copy?
	Struct PppStaticLeaf // Leaf { 0, n, 0 }
	{
		bool visible;

		if( visible )
		{
			UINT32 pppId;		// unique identifier for this progressive plus pool
			UINT32 seqId;		// pool definition version

			bool regOpen;

			I18nPString name;

			PppVisibility visibility;

			bool isPlayMoney;
			PString currency;

			vector<PppBuyInTierInfo> buyInTiers;

			BYTE handType;
			BYTE structure;
			bool isHiLo;

			INT32 maxEntriesPerPlayer;

			INT64 winnerCashoutThreshold parseEndOptB4Me; // players returning to the pool after a tournament win with >= this amount are cashed out as winners
			
			// add any other info needed by client to the end
		}
	};

	MsgBodyStruct PppFeaturedTable
	{
		UINT64  tournId;        // tournId of MTLobby object where featured table is
		PString mtLobbyAddress; // address of MTLobby object where featured table is
		PString mtLobbyObject;  // instance of MTLobby object where featured table is
		PString tableAddress;   // address of featured table owned by MTLobby object
		PString tableObject;    // instance of featured table owned by MTLobby object
	};

	MsgBodyStruct PppFeaturedKO
	{
		PString userId;              // userId of player who knocked out another player
		INT64 winAmount;             // amount won by userId for knocking out other player
		INT64 knockedOutPlayerValue; // value of knocked out player
	};

	MsgBodyStruct PppFeaturedFinisher
	{
		PString userId;			
		INT64 cashoutAmount; // amount cashed out by the player
		INT64 totalKOAmount; // total knockout values won
	};

	// TODO @move_only_no_copy?
	Struct PppDynamicLeaf // Leaf { 0, n, 1 }
	{
		PppFeaturedTable featuredTable;                  // featured table info
		vector< PppFeaturedKO > featuredKOs;             // featured KOs info
		vector< PppFeaturedFinisher > featuredFinishers; // featured finishers info
	};
};

namespace client
{
	Message MSG_PPP_REG_INFO
	{
		UINT32 pppId;		// progressive plus pool id to request reg info for
		UINT32 seqId;		// version of pool definition shown to player - request will fail if it differs from current definition
		UINT32 buyInTierId;	// buyin tier id for buyin requested
	};

	Message MSG_PPP_REG_INFO_REPLY
	{
		INT16 errCode;
		if( errCode == ERR_INSUFFICIENT_FUNDS )
		{
			PString errDescr;
			TournCommon${ATF_THIN_NAMESPACE_SUFFIX}::Error_InsufficientFunds errInfo;
		}
		else if( errCode )
		{
			PString errDescr;
			PString currency;
			INT64 buyInPlusRake;
			bool enoughMoneyInOtherCurrency;
		}
		else
		{
			//entry parameters
			INT64 buyIn;
			INT64 rake;
			PString currency;
			bool isPlayMoney;

			PString admissionId;
			INT64 admPrice;
			INT32 numTickets; //total of that kind at user's disposal

			PString name; //similar to tournamentName

			//user standing
			INT64 userRmBalance;
			INT64 userPmBalance;
			INT64 userTChipsBalance;
			bool enoughMoneyInOtherCurrency;
			CommMsgBody currencyContext;
			CommMsgBody clientCurrencyContext;

			//convenience stuff
			BYTE speed;
			INT32 minPlayers;
			INT32 maxPlayers;
			BYTE maxPerTable;
			UINT32 tournFlags;
			UINT64 tournFlags2;
			BYTE handType;
			BYTE structure;
			bool isHiLo;
			PString preRegMsg;
		}
	};

	Message MSG_PPP_REGISTER_USER
	{
		UINT32 pppId;		// progressive plus pool id to request reg info for
		UINT32 seqId;		// version of pool definition shown to player - request will fail if it differs from current definition
		UINT32 buyInTierId;	// buyin tier id for buyin requested
		INT64 buyInRM;
		INT64 buyInTChips;
		INT64 buyInPM;
		bool useTicket;
		CommMsgBody currencyContext;
	};

	Message MSG_PPP_REGISTER_USER_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDescr;
		}
		else
		{
			UINT64 pppEntryId;
			// TODO - what else is needed?
			/*
			INT16 maxAllins;
			PString registrationMsg;
			bool seatsAvailable; // TODO: check name is appropriate
			PString clientNotification;
			*/
		}
	};

	Message MSG_PPP_UNREGISTER_USER
	{
		UINT32 pppId;
		UINT64 pppEntryId;
	};

	Message MSG_PPP_UNREGISTER_USER_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errDescr;
		}
		else
		{
			INT32 refund;
			INT64 refundPlay;
			INT32 refundTChips;
			PString tournamentCurrency;
			PString refundCurrency;
		}
	};

	enum ePppEntryStatus
	{
		ePppEntryStatus_Inactive = 0, // entry is inactive and not available for matchmaking
		ePppEntryStatus_Ready = 1,    // entry is eligible for matchmaking
		ePppEntryStatus_InUse = 2,    // entry is currently allocated to a tournament
	};

	MsgBodyStruct PppEntry
	{
		UINT32 pppId;		// identifier for the Progressive Plus Pool
		UINT64 pppEntryId;	// identifier for the player's entry within the pool
		INT16 status; // ePppEntryStatus_*
		INT64 amountOnHead;	// current value of this entry
		bool canUnregister;	// set if this entry is eligible for unregistration
		// TODO - additional stats like num tourns played, num knockouts, winnings so far, etc?
		UINT64 tournId;		// tournId this entry is currently registered in, or 0 if inactive/matchmaking
		UINT32 buyInTierId parseEndOptB4Me; // buyin tier at which this entry originally registered into the pool
	};

	Message MSG_PPP_GET_ENTRIES
	{
		// empty msg
	};

	Message MSG_PPP_GET_ENTRIES_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errMsg;
		}
		else
		{
			vector<PppEntry> entries;
		}
	};

	Message MSG_PPP_SET_ENTRY_STATUS
	{
		UINT32 pppId;
		UINT64 pppEntryId;
		INT16 newStatus; // one of ePppEntryStatus_Inactive or ePppEntryStatus_Ready
	};

	Message MSG_PPP_SET_ENTRY_STATUS_REPLY
	{
		INT16 errCode;
		if( errCode )
		{
			PString errMsg;
		}
	};
};

