/**
 * itGatewayProtocols_thin.cpp
 *
 * This file was auto-generated from itGatewayProtocols.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin itGatewayProtocols.txt
 */
 
#include "itGatewayProtocols_thin.h"

//=================================================================
//                Protocol_IT_Q_GET_SW_MODULES
//=================================================================

ItGateway::SwModules::Protocol_IT_Q_GET_SW_MODULES::Protocol_IT_Q_GET_SW_MODULES()
{
	clear();
}

void ItGateway::SwModules::Protocol_IT_Q_GET_SW_MODULES::clear()
{
}

bool ItGateway::SwModules::Protocol_IT_Q_GET_SW_MODULES::equals(const Protocol_IT_Q_GET_SW_MODULES& _o) const
{
	return true;
}

const char *ItGateway::SwModules::Protocol_IT_Q_GET_SW_MODULES::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(IT_Q_GET_SW_MODULES).append(")");
	return _buf.c_str();
}

void ItGateway::SwModules::Protocol_IT_Q_GET_SW_MODULES::composeMsg(CommMsgBody& _msg) const
{
}

void ItGateway::SwModules::Protocol_IT_Q_GET_SW_MODULES::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void ItGateway::SwModules::Protocol_IT_Q_GET_SW_MODULES::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "IT_Q_GET_SW_MODULES";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    Module
//=================================================================

ItGateway::SwModules::Module::Module()
{
	clear();
}

void ItGateway::SwModules::Module::clear()
{
	sha1.clear();
	filename.clear();
}

bool ItGateway::SwModules::Module::equals(const Module& _o) const
{
	return sha1.equals(_o.sha1) &&
		filename.equals(_o.filename);
}

const char *ItGateway::SwModules::Module::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("sha1=");
	_buf.append(sha1);
	_buf.append(',');
	_buf.append("filename=");
	_buf.append(filename);
	_buf.append('}');
	return _buf.c_str();
}

void ItGateway::SwModules::Module::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(Module())) // not empty
	{
		_body.composeString(sha1);
		_body.composeString(filename);
	}

	_msg.composeMsgBody(_body);
}

void ItGateway::SwModules::Module::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(sha1);
	_parser0.parseStringP(filename);
}

/*static*/ void ItGateway::SwModules::Module::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "sha1"); size_t szSha1 = strlen(_dummy);
	AtfValidator::validateInt(_descr, "sha1", szSha1, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "filename"); size_t szFilename = strlen(_dummy);
	AtfValidator::validateInt(_descr, "filename", szFilename, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    SwModule
//=================================================================

ItGateway::SwModules::SwModule::SwModule()
{
	clear();
}

void ItGateway::SwModules::SwModule::clear()
{
	productCategory = 0;
	active = false;
	code = 0;
	type = 0;
	name.clear();
	version = 0;
	subVersion = 0;
	lastReportStatus = 0;
	modules.clear();
}

bool ItGateway::SwModules::SwModule::equals(const SwModule& _o) const
{
	return productCategory == _o.productCategory &&
		active == _o.active &&
		code == _o.code &&
		type == _o.type &&
		name.equals(_o.name) &&
		version == _o.version &&
		subVersion == _o.subVersion &&
		lastReportStatus == _o.lastReportStatus &&
		modules.equals(_o.modules);
}

const char *ItGateway::SwModules::SwModule::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("productCategory=");
	_buf.appendUint(productCategory);
	_buf.append(',');
	_buf.append("active=");
	_buf.appendUint(active);
	_buf.append(',');
	_buf.append("code=");
	_buf.appendUint(code);
	_buf.append(',');
	_buf.append("type=");
	_buf.appendUint(type);
	_buf.append(',');
	_buf.append("name=");
	_buf.append(name);
	_buf.append(',');
	_buf.append("version=");
	_buf.appendUint(version);
	_buf.append(',');
	_buf.append("subVersion=");
	_buf.appendUint(subVersion);
	_buf.append(',');
	_buf.append("lastReportStatus=");
	_buf.appendUint(lastReportStatus);
	_buf.append(',');
	_buf.append("modules=");
	modules.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void ItGateway::SwModules::SwModule::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(SwModule())) // not empty
	{
		_body.composeUINT32(productCategory);
		_body.composeBOOL(active);
		_body.composeUINT32(code);
		_body.composeUINT32(type);
		_body.composeString(name);
		_body.composeUINT32(version);
		_body.composeUINT32(subVersion);
		_body.composeUINT32(lastReportStatus);
		modules.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void ItGateway::SwModules::SwModule::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(productCategory);
	_parser0.parseBOOL(active);
	_parser0.parseUINT32(code);
	_parser0.parseUINT32(type);
	_parser0.parseStringP(name);
	_parser0.parseUINT32(version);
	_parser0.parseUINT32(subVersion);
	_parser0.parseUINT32(lastReportStatus);
	modules.parseMsg(_parser0);
}

/*static*/ void ItGateway::SwModules::SwModule::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	UINT32 productCategory; _parser0.parseUINT32(productCategory);
	AtfValidator::validateInt(_descr, "productCategory", productCategory, _checker, __FILE__, __LINE__);
	bool active; _parser0.parseBOOL(active);
	AtfValidator::validateInt(_descr, "active", active, _checker, __FILE__, __LINE__);
	UINT32 code; _parser0.parseUINT32(code);
	AtfValidator::validateInt(_descr, "code", code, _checker, __FILE__, __LINE__);
	UINT32 type; _parser0.parseUINT32(type);
	AtfValidator::validateInt(_descr, "type", type, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "name"); size_t szName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "name", szName, _checker, __FILE__, __LINE__);
	UINT32 version; _parser0.parseUINT32(version);
	AtfValidator::validateInt(_descr, "version", version, _checker, __FILE__, __LINE__);
	UINT32 subVersion; _parser0.parseUINT32(subVersion);
	AtfValidator::validateInt(_descr, "subVersion", subVersion, _checker, __FILE__, __LINE__);
	UINT32 lastReportStatus; _parser0.parseUINT32(lastReportStatus);
	AtfValidator::validateInt(_descr, "lastReportStatus", lastReportStatus, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szModules = ThinAtf::LAtfVector< Module, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("modules"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "modules", szModules, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_IT_A_GET_SW_MODULES
//=================================================================

ItGateway::SwModules::Protocol_IT_A_GET_SW_MODULES::Protocol_IT_A_GET_SW_MODULES()
{
	clear();
}

void ItGateway::SwModules::Protocol_IT_A_GET_SW_MODULES::clear()
{
	errCode = 0;
	errString.clear();
	swModules.clear();
}

bool ItGateway::SwModules::Protocol_IT_A_GET_SW_MODULES::equals(const Protocol_IT_A_GET_SW_MODULES& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		swModules.equals(_o.swModules);
}

const char *ItGateway::SwModules::Protocol_IT_A_GET_SW_MODULES::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(IT_A_GET_SW_MODULES).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("swModules=");
		swModules.toTraceString(_buf);
	}
	return _buf.c_str();
}

void ItGateway::SwModules::Protocol_IT_A_GET_SW_MODULES::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
	}
	else
	{
		swModules.composeMsg(_msg);
	}
}

void ItGateway::SwModules::Protocol_IT_A_GET_SW_MODULES::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringP(errString);
	}
	else
	{
		swModules.parseMsg(_parser);
	}
}

/*static*/ void ItGateway::SwModules::Protocol_IT_A_GET_SW_MODULES::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "IT_A_GET_SW_MODULES";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szSwModules = ThinAtf::LAtfVector< SwModule, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("swModules"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "swModules", szSwModules, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    ModuleVersion
//=================================================================

ItGateway::SwModules::ModuleVersion::ModuleVersion()
{
	clear();
}

void ItGateway::SwModules::ModuleVersion::clear()
{
	type = 0;
	code = 0;
	newVersion = 0;
	newSubVersion = 0;
	adminComment.clear();
}

bool ItGateway::SwModules::ModuleVersion::equals(const ModuleVersion& _o) const
{
	return type == _o.type &&
		code == _o.code &&
		newVersion == _o.newVersion &&
		newSubVersion == _o.newSubVersion &&
		adminComment.equals(_o.adminComment);
}

const char *ItGateway::SwModules::ModuleVersion::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("type=");
	_buf.appendUint(type);
	_buf.append(',');
	_buf.append("code=");
	_buf.appendUint(code);
	_buf.append(',');
	_buf.append("newVersion=");
	_buf.appendUint(newVersion);
	_buf.append(',');
	_buf.append("newSubVersion=");
	_buf.appendUint(newSubVersion);
	_buf.append(',');
	_buf.append("adminComment=");
	_buf.append(adminComment);
	_buf.append('}');
	return _buf.c_str();
}

void ItGateway::SwModules::ModuleVersion::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(ModuleVersion())) // not empty
	{
		_body.composeUINT32(type);
		_body.composeUINT32(code);
		_body.composeUINT32(newVersion);
		_body.composeUINT32(newSubVersion);
		_body.composeString(adminComment);
	}

	_msg.composeMsgBody(_body);
}

void ItGateway::SwModules::ModuleVersion::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(type);
	_parser0.parseUINT32(code);
	_parser0.parseUINT32(newVersion);
	_parser0.parseUINT32(newSubVersion);
	_parser0.parseStringP(adminComment);
}

/*static*/ void ItGateway::SwModules::ModuleVersion::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	UINT32 type; _parser0.parseUINT32(type);
	AtfValidator::validateInt(_descr, "type", type, _checker, __FILE__, __LINE__);
	UINT32 code; _parser0.parseUINT32(code);
	AtfValidator::validateInt(_descr, "code", code, _checker, __FILE__, __LINE__);
	UINT32 newVersion; _parser0.parseUINT32(newVersion);
	AtfValidator::validateInt(_descr, "newVersion", newVersion, _checker, __FILE__, __LINE__);
	UINT32 newSubVersion; _parser0.parseUINT32(newSubVersion);
	AtfValidator::validateInt(_descr, "newSubVersion", newSubVersion, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "adminComment"); size_t szAdminComment = strlen(_dummy);
	AtfValidator::validateInt(_descr, "adminComment", szAdminComment, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_IT_Q_UPDATE_SW_MODULES_VER
//=================================================================

ItGateway::SwModules::Protocol_IT_Q_UPDATE_SW_MODULES_VER::Protocol_IT_Q_UPDATE_SW_MODULES_VER()
{
	clear();
}

void ItGateway::SwModules::Protocol_IT_Q_UPDATE_SW_MODULES_VER::clear()
{
	modulesToUpdate.clear();
}

bool ItGateway::SwModules::Protocol_IT_Q_UPDATE_SW_MODULES_VER::equals(const Protocol_IT_Q_UPDATE_SW_MODULES_VER& _o) const
{
	return modulesToUpdate.equals(_o.modulesToUpdate);
}

const char *ItGateway::SwModules::Protocol_IT_Q_UPDATE_SW_MODULES_VER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(IT_Q_UPDATE_SW_MODULES_VER).append(")");
	_buf.append(',');
	_buf.append("modulesToUpdate=");
	modulesToUpdate.toTraceString(_buf);
	return _buf.c_str();
}

void ItGateway::SwModules::Protocol_IT_Q_UPDATE_SW_MODULES_VER::composeMsg(CommMsgBody& _msg) const
{
	modulesToUpdate.composeMsg(_msg);
}

void ItGateway::SwModules::Protocol_IT_Q_UPDATE_SW_MODULES_VER::parseMsg(CommMsgParser& _parser)
{
	modulesToUpdate.parseMsg(_parser);
}

/*static*/ void ItGateway::SwModules::Protocol_IT_Q_UPDATE_SW_MODULES_VER::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "IT_Q_UPDATE_SW_MODULES_VER";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	PString _descbuf;
	int szModulesToUpdate = ThinAtf::LAtfVector< ModuleVersion, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("modulesToUpdate"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "modulesToUpdate", szModulesToUpdate, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_IT_A_UPDATE_SW_MODULES_VER
//=================================================================

ItGateway::SwModules::Protocol_IT_A_UPDATE_SW_MODULES_VER::Protocol_IT_A_UPDATE_SW_MODULES_VER()
{
	clear();
}

void ItGateway::SwModules::Protocol_IT_A_UPDATE_SW_MODULES_VER::clear()
{
	errCode = 0;
	aggregatedErrorDescr.clear();
}

bool ItGateway::SwModules::Protocol_IT_A_UPDATE_SW_MODULES_VER::equals(const Protocol_IT_A_UPDATE_SW_MODULES_VER& _o) const
{
	return errCode == _o.errCode &&
		aggregatedErrorDescr.equals(_o.aggregatedErrorDescr);
}

const char *ItGateway::SwModules::Protocol_IT_A_UPDATE_SW_MODULES_VER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(IT_A_UPDATE_SW_MODULES_VER).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("aggregatedErrorDescr=");
		_buf.append(aggregatedErrorDescr);
	}
	return _buf.c_str();
}

void ItGateway::SwModules::Protocol_IT_A_UPDATE_SW_MODULES_VER::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(aggregatedErrorDescr);
	}
}

void ItGateway::SwModules::Protocol_IT_A_UPDATE_SW_MODULES_VER::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringP(aggregatedErrorDescr);
	}
}

/*static*/ void ItGateway::SwModules::Protocol_IT_A_UPDATE_SW_MODULES_VER::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "IT_A_UPDATE_SW_MODULES_VER";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "aggregatedErrorDescr"); size_t szAggregatedErrorDescr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "aggregatedErrorDescr", szAggregatedErrorDescr, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool ItGateway::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "SwModules"))
	{
		switch(_msgId)
		{
			case IT_A_GET_SW_MODULES: SwModules::Protocol_IT_A_GET_SW_MODULES::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case IT_A_UPDATE_SW_MODULES_VER: SwModules::Protocol_IT_A_UPDATE_SW_MODULES_VER::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case IT_Q_GET_SW_MODULES: SwModules::Protocol_IT_Q_GET_SW_MODULES::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case IT_Q_UPDATE_SW_MODULES_VER: SwModules::Protocol_IT_Q_UPDATE_SW_MODULES_VER::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

