//------------------------------------------------------------------------------
//	inixor.cpp
//------------------------------------------------------------------------------
//
//	Copyright (c) 2001-2011 PYR Software Ltd. All rights reserved. This document 
//	is for the use of licensed users only and is subject to the terms and 
//	conditions of the accompanying and/or applicable license between you and 
//	PYR Software Ltd, including without limitation those terms and conditions 
//	prohibiting unauthorized translation, reverse engineering, decompilation, 
//	disassembly, and other inappropriate use of any software provided. Any 
//	unauthorized use, copying, modification, distribution, publication or 
//	disclosure of information is a violation of copyright laws. No reproduction 
//	in whole or in part of this document may be made without express written 
//	consent of PYR Software Ltd.
//
//
//------------------------------------------------------------------------------

#include "inixor.h"
#include "commssl.h"

//------------------------------------------------------------------------------

void ZipXor::checkSignature( PBlock& buf, const PBlock* keyPubl_ )
{
	static const BYTE _keyPubl[] =
	{
		0x30, 0x82, 0x01, 0x08, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc2, 0x37, 0xc5, 0x9f, 0x73, 0xb0, 0x6d,
		0xb1, 0x8d, 0x18, 0xc1, 0x3e, 0xbf, 0x8c, 0xfd, 0x09, 0x34, 0x04, 0x3f, 0x1a, 0xdc, 0x97, 0xb6,
		0x75, 0xd6, 0x71, 0x2b, 0x08, 0xc7, 0x77, 0x2c, 0x26, 0x5d, 0xd7, 0xaa, 0x11, 0xc6, 0x61, 0x45,
		0x3c, 0x30, 0x2f, 0x13, 0x4e, 0x4f, 0x82, 0xf2, 0x24, 0xc8, 0xdb, 0xc1, 0x00, 0xfa, 0xd4, 0x68,
		0x4f, 0x0a, 0xf5, 0xf5, 0x7e, 0xcc, 0x46, 0x9e, 0xd5, 0x9e, 0x00, 0x77, 0x29, 0x6b, 0xe3, 0xf2,
		0xf5, 0x48, 0x28, 0x7d, 0x96, 0x51, 0xdf, 0xb7, 0xfb, 0xae, 0xa7, 0x34, 0x48, 0xfb, 0xe5, 0x3c,
		0x55, 0xb4, 0xfa, 0xa7, 0x03, 0xa9, 0x2f, 0x9f, 0x27, 0xc8, 0x41, 0x60, 0x6d, 0xf9, 0x24, 0x56,
		0x5e, 0xb7, 0x0a, 0xb4, 0xa0, 0xb7, 0x85, 0x67, 0xb5, 0xcf, 0x67, 0x8e, 0x18, 0x5e, 0x9b, 0xff,
		0xb8, 0xc8, 0xd9, 0x63, 0xed, 0xa4, 0x4d, 0x59, 0x0d, 0x80, 0xf8, 0x80, 0x89, 0xe8, 0x58, 0x80,
		0x4a, 0x20, 0xb0, 0xbf, 0xcc, 0x45, 0x8f, 0xe4, 0x1c, 0xcc, 0x60, 0x50, 0x5e, 0x0a, 0x6c, 0x03,
		0xa8, 0xea, 0x12, 0xea, 0xd8, 0x75, 0xb4, 0xe2, 0xc4, 0x06, 0x01, 0xa4, 0x97, 0x2b, 0xdb, 0x91,
		0x90, 0xc2, 0x1e, 0xef, 0x79, 0x4a, 0xe0, 0x70, 0x4f, 0x6d, 0xcd, 0x23, 0x2e, 0x5b, 0x05, 0xa6,
		0x74, 0xc3, 0xe5, 0x3f, 0xa3, 0x6c, 0xe8, 0xaf, 0x6e, 0xd9, 0xaa, 0xe7, 0x51, 0xb6, 0x48, 0xda,
		0x59, 0xea, 0x64, 0x44, 0x83, 0x43, 0x40, 0x47, 0x34, 0x15, 0xf8, 0xec, 0x6e, 0x79, 0x69, 0xaa,
		0x55, 0x19, 0xb0, 0x13, 0xc5, 0x6a, 0xb9, 0x13, 0x25, 0xc6, 0xf6, 0xc3, 0x78, 0x48, 0xe1, 0x3e,
		0x6b, 0x7a, 0xda, 0x0e, 0x64, 0x05, 0xaa, 0x23, 0x8c, 0xb0, 0x5d, 0x5a, 0xba, 0xde, 0xff, 0x29,
		0x7c, 0x97, 0xa9, 0xcb, 0x2c, 0x55, 0x53, 0xbf, 0x17, 0x02, 0x01, 0x23,
	};

	const BYTE* keyPubl = keyPubl_ ? keyPubl_->ptr() : _keyPubl;
	const size_t keySize = keyPubl_ ? keyPubl_->size() : sizeof( _keyPubl );

	for( size_t i = 0; i < buf.size(); ++i )
	{
		if( buf.ptr()[ i ] == '\n' )
		{
			buf.ptr()[ i ] = 0;

			const char* signatureStr = ( const char* )buf.ptr();
			const size_t signatureSize = strlen( signatureStr ) + 1;

			if( *signatureStr == '#' )
				++signatureStr;

			PBlock signature;
			CommSSLBase64::decode( signature, signatureStr );

			CommSSLVerify verify;
			verify.setPublicKey( keyPubl, keySize );
			verify.addData( buf.ptr() + signatureSize, buf.size() - signatureSize );
			verify.verifyData( signature.ptr(), signature.size() );

			memmove( buf.ptr(), buf.ptr() + signatureSize, buf.size() - signatureSize );
			buf.cut( buf.size() - signatureSize );

			return;
		}
	}

	PASSERT( 0 );
}

//------------------------------------------------------------------------------

bool XorIniFile::xorLoad( const char* fileName, const PStringEncoding* encString, bool checkSignature, const PBlock* keyPubl )
{
	PBlock buf;
	if( fromFile( buf, fileName, encString ) )
	{
		return xorLoadBlock( buf, checkSignature, keyPubl );
	}

	return false;
}

//------------------------------------------------------------------------------

bool XorIniFile::xorLoadBlock( PBlock& buf, bool checkSignature, const PBlock* keyPubl )
{
	if( !ZipXor::unZipXor( buf ) )
		return false;

	if( checkSignature )
		ZipXor::checkSignature( buf, keyPubl );

	load( buf.ptr(), buf.size() );

	return true;
}

//------------------------------------------------------------------------------
