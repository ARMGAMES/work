/**
 * socialcasino_atf_thin.cpp
 *
 * This file was auto-generated from socialcasino_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin socialcasino_atf.txt
 */
 
#include "socialcasino_atf_thin.h"

//=================================================================
//                Protocol_MSG_SOCIALCASINO_DEBITPM
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::Protocol_MSG_SOCIALCASINO_DEBITPM()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::Protocol_MSG_SOCIALCASINO_DEBITPM(Protocol_MSG_SOCIALCASINO_DEBITPM&& _o)
	: vendorId(std::move(_o.vendorId))
	, gameId(std::move(_o.gameId))
	, scExternalTransactId(std::move(_o.scExternalTransactId))
	, playMoneyAmount(std::move(_o.playMoneyAmount))
{
}

SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM& SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::operator=(Protocol_MSG_SOCIALCASINO_DEBITPM&& _o)
{
	if(this != &_o)
	{
		vendorId = std::move(_o.vendorId);
		gameId = std::move(_o.gameId);
		scExternalTransactId = std::move(_o.scExternalTransactId);
		playMoneyAmount = std::move(_o.playMoneyAmount);
	}
	return *this;
}

#endif

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::clear()
{
	vendorId = 0;
	gameId = 0;
	scExternalTransactId.clear();
	playMoneyAmount = 0;
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::equals(const Protocol_MSG_SOCIALCASINO_DEBITPM& _o) const
{
	return vendorId == _o.vendorId &&
		gameId == _o.gameId &&
		scExternalTransactId.equals(_o.scExternalTransactId) &&
		playMoneyAmount == _o.playMoneyAmount;
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_DEBITPM).append(")");
	_buf.append(',');
	_buf.append("vendorId=");
	_buf.appendUint64(vendorId);
	_buf.append(',');
	_buf.append("gameId=");
	_buf.appendUint64(gameId);
	_buf.append(',');
	_buf.append("scExternalTransactId=");
	_buf.append(scExternalTransactId);
	_buf.append(',');
	_buf.append("playMoneyAmount=");
	_buf.appendInt64(playMoneyAmount);
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(vendorId);
	_msg.composeUINT64(gameId);
	_msg.composeString(scExternalTransactId);
	_msg.composeINT64(playMoneyAmount);
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(vendorId);
	_parser.parseUINT64(gameId);
	_parser.parseStringP(scExternalTransactId);
	_parser.parseINT64(playMoneyAmount);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_DEBITPM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT64 vendorId; _parser.parseUINT64(vendorId);
	AtfValidator::validateUint(_descr, "vendorId", vendorId, _checker, __FILE__, __LINE__);
	UINT64 gameId; _parser.parseUINT64(gameId);
	AtfValidator::validateUint(_descr, "gameId", gameId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "scExternalTransactId"); size_t szScExternalTransactId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "scExternalTransactId", szScExternalTransactId, 32, _checker, __FILE__, __LINE__);
	INT64 playMoneyAmount; _parser.parseINT64(playMoneyAmount);
	AtfValidator::validateInt(_descr, "playMoneyAmount", playMoneyAmount, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY(Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY&& _o)
	: scExternalTransactId(std::move(_o.scExternalTransactId))
{
}

SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY& SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::operator=(Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY&& _o)
{
	if(this != &_o)
	{
		scExternalTransactId = std::move(_o.scExternalTransactId);
	}
	return *this;
}

#endif

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::clear()
{
	scExternalTransactId.clear();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::equals(const Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY& _o) const
{
	return scExternalTransactId.equals(_o.scExternalTransactId);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_DEBITPM_REPLY).append(")");
	_buf.append(',');
	_buf.append("scExternalTransactId=");
	_buf.append(scExternalTransactId);
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(scExternalTransactId);
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(scExternalTransactId);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_DEBITPM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "scExternalTransactId"); size_t szScExternalTransactId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "scExternalTransactId", szScExternalTransactId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_SOCIALCASINO_CREDITPM
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::Protocol_MSG_SOCIALCASINO_CREDITPM()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::Protocol_MSG_SOCIALCASINO_CREDITPM(Protocol_MSG_SOCIALCASINO_CREDITPM&& _o)
	: userIntId(std::move(_o.userIntId))
	, vendorId(std::move(_o.vendorId))
	, gameId(std::move(_o.gameId))
	, scExternalTransactId(std::move(_o.scExternalTransactId))
	, playMoneyAmount(std::move(_o.playMoneyAmount))
	, refExternalTransactId(std::move(_o.refExternalTransactId))
{
}

SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM& SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::operator=(Protocol_MSG_SOCIALCASINO_CREDITPM&& _o)
{
	if(this != &_o)
	{
		userIntId = std::move(_o.userIntId);
		vendorId = std::move(_o.vendorId);
		gameId = std::move(_o.gameId);
		scExternalTransactId = std::move(_o.scExternalTransactId);
		playMoneyAmount = std::move(_o.playMoneyAmount);
		refExternalTransactId = std::move(_o.refExternalTransactId);
	}
	return *this;
}

#endif

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::clear()
{
	userIntId = 0;
	vendorId = 0;
	gameId = 0;
	scExternalTransactId.clear();
	playMoneyAmount = 0;
	refExternalTransactId.clear();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::equals(const Protocol_MSG_SOCIALCASINO_CREDITPM& _o) const
{
	return userIntId == _o.userIntId &&
		vendorId == _o.vendorId &&
		gameId == _o.gameId &&
		scExternalTransactId.equals(_o.scExternalTransactId) &&
		playMoneyAmount == _o.playMoneyAmount &&
		refExternalTransactId.equals(_o.refExternalTransactId);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_CREDITPM).append(")");
	_buf.append(',');
	_buf.append("userIntId=");
	_buf.appendUint(userIntId);
	_buf.append(',');
	_buf.append("vendorId=");
	_buf.appendUint64(vendorId);
	_buf.append(',');
	_buf.append("gameId=");
	_buf.appendUint64(gameId);
	_buf.append(',');
	_buf.append("scExternalTransactId=");
	_buf.append(scExternalTransactId);
	_buf.append(',');
	_buf.append("playMoneyAmount=");
	_buf.appendInt64(playMoneyAmount);
	_buf.append(',');
	_buf.append("refExternalTransactId=");
	_buf.append(refExternalTransactId);
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(userIntId);
	_msg.composeUINT64(vendorId);
	_msg.composeUINT64(gameId);
	_msg.composeString(scExternalTransactId);
	_msg.composeINT64(playMoneyAmount);
	_msg.composeString(refExternalTransactId);
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(userIntId);
	_parser.parseUINT64(vendorId);
	_parser.parseUINT64(gameId);
	_parser.parseStringP(scExternalTransactId);
	_parser.parseINT64(playMoneyAmount);
	_parser.parseStringP(refExternalTransactId);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_CREDITPM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 userIntId; _parser.parseUINT32(userIntId);
	AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	UINT64 vendorId; _parser.parseUINT64(vendorId);
	AtfValidator::validateUint(_descr, "vendorId", vendorId, _checker, __FILE__, __LINE__);
	UINT64 gameId; _parser.parseUINT64(gameId);
	AtfValidator::validateUint(_descr, "gameId", gameId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "scExternalTransactId"); size_t szScExternalTransactId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "scExternalTransactId", szScExternalTransactId, 32, _checker, __FILE__, __LINE__);
	INT64 playMoneyAmount; _parser.parseINT64(playMoneyAmount);
	AtfValidator::validateInt(_descr, "playMoneyAmount", playMoneyAmount, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "refExternalTransactId"); size_t szRefExternalTransactId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "refExternalTransactId", szRefExternalTransactId, 32, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY(Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY&& _o)
	: scExternalTransactId(std::move(_o.scExternalTransactId))
{
}

SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY& SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::operator=(Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY&& _o)
{
	if(this != &_o)
	{
		scExternalTransactId = std::move(_o.scExternalTransactId);
	}
	return *this;
}

#endif

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::clear()
{
	scExternalTransactId.clear();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::equals(const Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY& _o) const
{
	return scExternalTransactId.equals(_o.scExternalTransactId);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_CREDITPM_REPLY).append(")");
	_buf.append(',');
	_buf.append("scExternalTransactId=");
	_buf.append(scExternalTransactId);
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(scExternalTransactId);
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(scExternalTransactId);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_CREDITPM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "scExternalTransactId"); size_t szScExternalTransactId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "scExternalTransactId", szScExternalTransactId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_SOCIALCASINO_USERINFO
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::Protocol_MSG_SOCIALCASINO_USERINFO()
{
	clear();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::clear()
{
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::equals(const Protocol_MSG_SOCIALCASINO_USERINFO& _o) const
{
	return true;
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_USERINFO).append(")");
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::composeMsg(CommMsgBody& _msg) const
{
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_USERINFO";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    PlayerInfoWarning
//=================================================================

SocialCasino::PlayerInfoWarning::PlayerInfoWarning()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SocialCasino::PlayerInfoWarning::PlayerInfoWarning(PlayerInfoWarning&& _o)
	: warningCode(std::move(_o.warningCode))
	, warningString(std::move(_o.warningString))
{
}

SocialCasino::PlayerInfoWarning& SocialCasino::PlayerInfoWarning::operator=(PlayerInfoWarning&& _o)
{
	if(this != &_o)
	{
		warningCode = std::move(_o.warningCode);
		warningString = std::move(_o.warningString);
	}
	return *this;
}

#endif

void SocialCasino::PlayerInfoWarning::clear()
{
	warningCode = 0;
	warningString.clear();
}

bool SocialCasino::PlayerInfoWarning::equals(const PlayerInfoWarning& _o) const
{
	return warningCode == _o.warningCode &&
		warningString.equals(_o.warningString);
}

const char *SocialCasino::PlayerInfoWarning::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("warningCode=");
	_buf.appendInt(warningCode);
	_buf.append(',');
	_buf.append("warningString=");
	_buf.append(warningString);
	_buf.append('}');
	return _buf.c_str();
}

void SocialCasino::PlayerInfoWarning::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PlayerInfoWarning())) // not empty
	{
		_body.composeINT16(warningCode);
		_body.composeString(warningString);
	}

	_msg.composeMsgBody(_body);
}

void SocialCasino::PlayerInfoWarning::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT16(warningCode);
	_parser0.parseStringP(warningString);
}

/*static*/ void SocialCasino::PlayerInfoWarning::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	INT16 warningCode; _parser0.parseINT16(warningCode);
	AtfValidator::validateInt(_descr, "warningCode", warningCode, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "warningString"); size_t szWarningString = strlen(_dummy);
	AtfValidator::validateInt(_descr, "warningString", szWarningString, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_SOCIALCASINO_USERINFO_REPLY
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY(Protocol_MSG_SOCIALCASINO_USERINFO_REPLY&& _o)
	: userId(std::move(_o.userId))
	, imageId(std::move(_o.imageId))
	, country(std::move(_o.country))
	, playMoneyBalance(std::move(_o.playMoneyBalance))
	, site(std::move(_o.site))
	, language(std::move(_o.language))
	, warnings(std::move(_o.warnings))
{
}

SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY& SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::operator=(Protocol_MSG_SOCIALCASINO_USERINFO_REPLY&& _o)
{
	if(this != &_o)
	{
		userId = std::move(_o.userId);
		imageId = std::move(_o.imageId);
		country = std::move(_o.country);
		playMoneyBalance = std::move(_o.playMoneyBalance);
		site = std::move(_o.site);
		language = std::move(_o.language);
		warnings = std::move(_o.warnings);
	}
	return *this;
}

#endif

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::clear()
{
	userId.clear();
	imageId = 0;
	country.clear();
	playMoneyBalance = 0;
	site.clear();
	language.clear();
	warnings.clear();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::equals(const Protocol_MSG_SOCIALCASINO_USERINFO_REPLY& _o) const
{
	return userId.equals(_o.userId) &&
		imageId == _o.imageId &&
		country.equals(_o.country) &&
		playMoneyBalance == _o.playMoneyBalance &&
		site.equals(_o.site) &&
		language.equals(_o.language) &&
		warnings.equals(_o.warnings);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_USERINFO_REPLY).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append(',');
	_buf.append("country=");
	_buf.append(country);
	_buf.append(',');
	_buf.append("playMoneyBalance=");
	_buf.appendInt64(playMoneyBalance);
	_buf.append(',');
	_buf.append("site=");
	_buf.append(site);
	_buf.append(',');
	_buf.append("language=");
	_buf.append(language);
	_buf.append(',');
	_buf.append("warnings=");
	warnings.toTraceString(_buf);
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId);
	_msg.composeUINT32(imageId);
	_msg.composeString(country);
	_msg.composeINT64(playMoneyBalance);
	_msg.composeString(site);
	_msg.composeString(language);
	warnings.composeMsg(_msg);
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseUINT32(imageId);
	_parser.parseStringP(country);
	_parser.parseINT64(playMoneyBalance);
	_parser.parseStringP(site);
	_parser.parseStringP(language);
	warnings.parseMsg(_parser);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_USERINFO_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	UINT32 imageId; _parser.parseUINT32(imageId);
	AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "country"); size_t szCountry = strlen(_dummy);
	AtfValidator::validateInt(_descr, "country", szCountry, _checker, __FILE__, __LINE__);
	INT64 playMoneyBalance; _parser.parseINT64(playMoneyBalance);
	AtfValidator::validateInt(_descr, "playMoneyBalance", playMoneyBalance, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "site"); size_t szSite = strlen(_dummy);
	AtfValidator::validateInt(_descr, "site", szSite, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "language"); size_t szLanguage = strlen(_dummy);
	AtfValidator::validateInt(_descr, "language", szLanguage, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szWarnings = ThinAtf::LAtfVector< PlayerInfoWarning, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("warnings"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "warnings", szWarnings, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool SocialCasino::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, ""))
	{
		switch(_msgId)
		{
			case MSG_SOCIALCASINO_CREDITPM: Protocol_MSG_SOCIALCASINO_CREDITPM::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_CREDITPM_REPLY: Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_DEBITPM: Protocol_MSG_SOCIALCASINO_DEBITPM::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_DEBITPM_REPLY: Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_USERINFO: Protocol_MSG_SOCIALCASINO_USERINFO::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_USERINFO_REPLY: Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

