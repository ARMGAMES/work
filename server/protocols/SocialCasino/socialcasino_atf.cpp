/**
 * socialcasino_atf.cpp
 *
 * This file was auto-generated from socialcasino_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: socialcasino_atf.txt
 */
 
#include "socialcasino_atf.h"

//=================================================================
//                Protocol_MSG_SOCIALCASINO_DEBITPM
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::Protocol_MSG_SOCIALCASINO_DEBITPM()
{
	clear();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::clear()
{
	vendorId = 0;
	gameId = 0;
	scExternalTransactId.clear();
	playMoneyAmount = 0;
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::equals(const Protocol_MSG_SOCIALCASINO_DEBITPM& _o) const
{
	return vendorId == _o.vendorId &&
		gameId == _o.gameId &&
		Atf::atfPStringEquals(scExternalTransactId, _o.scExternalTransactId) &&
		playMoneyAmount == _o.playMoneyAmount;
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_SOCIALCASINO_DEBITPM != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_SOCIALCASINO_DEBITPM*)_other));
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_DEBITPM).append(")");
	_buf.append(',');
	_buf.append("vendorId=");
	_buf.appendUint64(vendorId);
	_buf.append(',');
	_buf.append("gameId=");
	_buf.appendUint64(gameId);
	_buf.append(',');
	_buf.append("scExternalTransactId=");
	_buf.append(scExternalTransactId);
	_buf.append(',');
	_buf.append("playMoneyAmount=");
	_buf.appendInt64(playMoneyAmount);
	return _buf.c_str();
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_SOCIALCASINO_DEBITPM).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("vendorId", vendorId, _buf);
	Atf::XmlElement::encodeAsXmlElement("gameId", gameId, _buf);
	Atf::XmlElement::encodeAsXmlElement("scExternalTransactId", scExternalTransactId, _buf);
	Atf::XmlElement::encodeAsXmlElement("playMoneyAmount", playMoneyAmount, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("vendorId"))
			{
				vendorId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("gameId"))
			{
				gameId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("scExternalTransactId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, scExternalTransactId)) return false;
			}
			else if (_element.equals("playMoneyAmount"))
			{
				playMoneyAmount = (INT64)p_atoi64((const char *)_value.ptr());
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT64(vendorId);
	_msg.composeUINT64(gameId);
	_msg.composeString(scExternalTransactId);
	_msg.composeINT64(playMoneyAmount);
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(vendorId);
	_parser.parseUINT64(gameId);
	_parser.parseStringP(scExternalTransactId);
	_parser.parseINT64(playMoneyAmount);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("vendorId", vendorId);
	_jsonstr.compose("gameId", gameId);
	_jsonstr.compose("scExternalTransactId", scExternalTransactId);
	_jsonstr.compose("playMoneyAmount", playMoneyAmount);
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("vendorId", vendorId);
	_jparser.parseByNameThrow("gameId", gameId);
	_jparser.parseByNameThrow("scExternalTransactId", scExternalTransactId);
	_jparser.parseByNameThrow("playMoneyAmount", playMoneyAmount);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_DEBITPM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT64 vendorId; _jparser.validateByNameThrow("vendorId", vendorId);
	AtfValidator::validateUint(_descr, "vendorId", vendorId, _checker, __FILE__, __LINE__);
	UINT64 gameId; _jparser.validateByNameThrow("gameId", gameId);
	AtfValidator::validateUint(_descr, "gameId", gameId, _checker, __FILE__, __LINE__);
	PString scExternalTransactId; _jparser.validateByNameThrow("scExternalTransactId", scExternalTransactId);
	AtfValidator::validateIntMax(_descr, "scExternalTransactId", scExternalTransactId.length(), 32, _checker, __FILE__, __LINE__);
	INT64 playMoneyAmount; _jparser.validateByNameThrow("playMoneyAmount", playMoneyAmount);
	AtfValidator::validateInt(_descr, "playMoneyAmount", playMoneyAmount, _checker, __FILE__, __LINE__);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_DEBITPM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT64 vendorId; _parser.parseUINT64(vendorId);
	AtfValidator::validateUint(_descr, "vendorId", vendorId, _checker, __FILE__, __LINE__);
	UINT64 gameId; _parser.parseUINT64(gameId);
	AtfValidator::validateUint(_descr, "gameId", gameId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "scExternalTransactId"); size_t szScExternalTransactId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "scExternalTransactId", szScExternalTransactId, 32, _checker, __FILE__, __LINE__);
	INT64 playMoneyAmount; _parser.parseINT64(playMoneyAmount);
	AtfValidator::validateInt(_descr, "playMoneyAmount", playMoneyAmount, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY()
{
	clear();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::clear()
{
	scExternalTransactId.clear();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::equals(const Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY& _o) const
{
	return Atf::atfPStringEquals(scExternalTransactId, _o.scExternalTransactId);
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_SOCIALCASINO_DEBITPM_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY*)_other));
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_DEBITPM_REPLY).append(")");
	_buf.append(',');
	_buf.append("scExternalTransactId=");
	_buf.append(scExternalTransactId);
	return _buf.c_str();
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_SOCIALCASINO_DEBITPM_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("scExternalTransactId", scExternalTransactId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("scExternalTransactId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, scExternalTransactId)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(scExternalTransactId);
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(scExternalTransactId);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("scExternalTransactId", scExternalTransactId);
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("scExternalTransactId", scExternalTransactId);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_DEBITPM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString scExternalTransactId; _jparser.validateByNameThrow("scExternalTransactId", scExternalTransactId);
	AtfValidator::validateInt(_descr, "scExternalTransactId", scExternalTransactId.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_DEBITPM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "scExternalTransactId"); size_t szScExternalTransactId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "scExternalTransactId", szScExternalTransactId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_SOCIALCASINO_CREDITPM
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::Protocol_MSG_SOCIALCASINO_CREDITPM()
{
	clear();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::clear()
{
	userIntId = 0;
	vendorId = 0;
	gameId = 0;
	scExternalTransactId.clear();
	playMoneyAmount = 0;
	refExternalTransactId.clear();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::equals(const Protocol_MSG_SOCIALCASINO_CREDITPM& _o) const
{
	return userIntId == _o.userIntId &&
		vendorId == _o.vendorId &&
		gameId == _o.gameId &&
		Atf::atfPStringEquals(scExternalTransactId, _o.scExternalTransactId) &&
		playMoneyAmount == _o.playMoneyAmount &&
		Atf::atfPStringEquals(refExternalTransactId, _o.refExternalTransactId);
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_SOCIALCASINO_CREDITPM != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_SOCIALCASINO_CREDITPM*)_other));
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_CREDITPM).append(")");
	_buf.append(',');
	_buf.append("userIntId=");
	_buf.appendUint(userIntId);
	_buf.append(',');
	_buf.append("vendorId=");
	_buf.appendUint64(vendorId);
	_buf.append(',');
	_buf.append("gameId=");
	_buf.appendUint64(gameId);
	_buf.append(',');
	_buf.append("scExternalTransactId=");
	_buf.append(scExternalTransactId);
	_buf.append(',');
	_buf.append("playMoneyAmount=");
	_buf.appendInt64(playMoneyAmount);
	_buf.append(',');
	_buf.append("refExternalTransactId=");
	_buf.append(refExternalTransactId);
	return _buf.c_str();
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_SOCIALCASINO_CREDITPM).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("userIntId", userIntId, _buf);
	Atf::XmlElement::encodeAsXmlElement("vendorId", vendorId, _buf);
	Atf::XmlElement::encodeAsXmlElement("gameId", gameId, _buf);
	Atf::XmlElement::encodeAsXmlElement("scExternalTransactId", scExternalTransactId, _buf);
	Atf::XmlElement::encodeAsXmlElement("playMoneyAmount", playMoneyAmount, _buf);
	Atf::XmlElement::encodeAsXmlElement("refExternalTransactId", refExternalTransactId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("userIntId"))
			{
				userIntId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("vendorId"))
			{
				vendorId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("gameId"))
			{
				gameId = (UINT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("scExternalTransactId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, scExternalTransactId)) return false;
			}
			else if (_element.equals("playMoneyAmount"))
			{
				playMoneyAmount = (INT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("refExternalTransactId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, refExternalTransactId)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeUINT32(userIntId);
	_msg.composeUINT64(vendorId);
	_msg.composeUINT64(gameId);
	_msg.composeString(scExternalTransactId);
	_msg.composeINT64(playMoneyAmount);
	_msg.composeString(refExternalTransactId);
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(userIntId);
	_parser.parseUINT64(vendorId);
	_parser.parseUINT64(gameId);
	_parser.parseStringP(scExternalTransactId);
	_parser.parseINT64(playMoneyAmount);
	_parser.parseStringP(refExternalTransactId);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userIntId", userIntId);
	_jsonstr.compose("vendorId", vendorId);
	_jsonstr.compose("gameId", gameId);
	_jsonstr.compose("scExternalTransactId", scExternalTransactId);
	_jsonstr.compose("playMoneyAmount", playMoneyAmount);
	_jsonstr.compose("refExternalTransactId", refExternalTransactId);
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userIntId", userIntId);
	_jparser.parseByNameThrow("vendorId", vendorId);
	_jparser.parseByNameThrow("gameId", gameId);
	_jparser.parseByNameThrow("scExternalTransactId", scExternalTransactId);
	_jparser.parseByNameThrow("playMoneyAmount", playMoneyAmount);
	_jparser.parseByNameThrow("refExternalTransactId", refExternalTransactId);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_CREDITPM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	UINT32 userIntId; _jparser.validateByNameThrow("userIntId", userIntId);
	AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	UINT64 vendorId; _jparser.validateByNameThrow("vendorId", vendorId);
	AtfValidator::validateUint(_descr, "vendorId", vendorId, _checker, __FILE__, __LINE__);
	UINT64 gameId; _jparser.validateByNameThrow("gameId", gameId);
	AtfValidator::validateUint(_descr, "gameId", gameId, _checker, __FILE__, __LINE__);
	PString scExternalTransactId; _jparser.validateByNameThrow("scExternalTransactId", scExternalTransactId);
	AtfValidator::validateIntMax(_descr, "scExternalTransactId", scExternalTransactId.length(), 32, _checker, __FILE__, __LINE__);
	INT64 playMoneyAmount; _jparser.validateByNameThrow("playMoneyAmount", playMoneyAmount);
	AtfValidator::validateInt(_descr, "playMoneyAmount", playMoneyAmount, _checker, __FILE__, __LINE__);
	PString refExternalTransactId; _jparser.validateByNameThrow("refExternalTransactId", refExternalTransactId);
	AtfValidator::validateIntMax(_descr, "refExternalTransactId", refExternalTransactId.length(), 32, _checker, __FILE__, __LINE__);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_CREDITPM";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 userIntId; _parser.parseUINT32(userIntId);
	AtfValidator::validateInt(_descr, "userIntId", userIntId, _checker, __FILE__, __LINE__);
	UINT64 vendorId; _parser.parseUINT64(vendorId);
	AtfValidator::validateUint(_descr, "vendorId", vendorId, _checker, __FILE__, __LINE__);
	UINT64 gameId; _parser.parseUINT64(gameId);
	AtfValidator::validateUint(_descr, "gameId", gameId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "scExternalTransactId"); size_t szScExternalTransactId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "scExternalTransactId", szScExternalTransactId, 32, _checker, __FILE__, __LINE__);
	INT64 playMoneyAmount; _parser.parseINT64(playMoneyAmount);
	AtfValidator::validateInt(_descr, "playMoneyAmount", playMoneyAmount, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "refExternalTransactId"); size_t szRefExternalTransactId = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "refExternalTransactId", szRefExternalTransactId, 32, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY()
{
	clear();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::clear()
{
	scExternalTransactId.clear();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::equals(const Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY& _o) const
{
	return Atf::atfPStringEquals(scExternalTransactId, _o.scExternalTransactId);
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_SOCIALCASINO_CREDITPM_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY*)_other));
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_CREDITPM_REPLY).append(")");
	_buf.append(',');
	_buf.append("scExternalTransactId=");
	_buf.append(scExternalTransactId);
	return _buf.c_str();
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_SOCIALCASINO_CREDITPM_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("scExternalTransactId", scExternalTransactId, _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("scExternalTransactId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, scExternalTransactId)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(scExternalTransactId);
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(scExternalTransactId);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("scExternalTransactId", scExternalTransactId);
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("scExternalTransactId", scExternalTransactId);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_CREDITPM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString scExternalTransactId; _jparser.validateByNameThrow("scExternalTransactId", scExternalTransactId);
	AtfValidator::validateInt(_descr, "scExternalTransactId", scExternalTransactId.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_CREDITPM_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "scExternalTransactId"); size_t szScExternalTransactId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "scExternalTransactId", szScExternalTransactId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_SOCIALCASINO_USERINFO
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::Protocol_MSG_SOCIALCASINO_USERINFO()
{
	clear();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::clear()
{
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::equals(const Protocol_MSG_SOCIALCASINO_USERINFO& _o) const
{
	return true;
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_SOCIALCASINO_USERINFO != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_SOCIALCASINO_USERINFO*)_other));
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_USERINFO).append(")");
	return _buf.c_str();
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_SOCIALCASINO_USERINFO).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::parseMsg(CommMsgParser& _parser)
{
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_USERINFO";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_USERINFO";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    PlayerInfoWarning
//=================================================================

SocialCasino::PlayerInfoWarning::PlayerInfoWarning()
{
	clear();
}

void SocialCasino::PlayerInfoWarning::clear()
{
	warningCode = 0;
	warningString.clear();
}

bool SocialCasino::PlayerInfoWarning::equals(const PlayerInfoWarning& _o) const
{
	return warningCode == _o.warningCode &&
		Atf::atfPStringEquals(warningString, _o.warningString);
}

const char *SocialCasino::PlayerInfoWarning::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("warningCode=");
	_buf.appendInt(warningCode);
	_buf.append(',');
	_buf.append("warningString=");
	_buf.append(warningString);
	_buf.append('}');
	return _buf.c_str();
}

const char *SocialCasino::PlayerInfoWarning::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("warningCode", warningCode, _buf);
	Atf::XmlElement::encodeAsXmlElement("warningString", warningString, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool SocialCasino::PlayerInfoWarning::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("warningCode"))
		{
			warningCode = (INT16)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("warningString"))
		{
			if(!Atf::XmlElement::movePBlockToPString(_value, warningString)) return false;
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void SocialCasino::PlayerInfoWarning::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	CommMsgBody _body;
	//if (!equals(PlayerInfoWarning())) // not empty
	{
		_body.composeINT16(warningCode);
		_body.composeString(warningString);
	}

	_msg.composeMsgBody(_body);
}

void SocialCasino::PlayerInfoWarning::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT16(warningCode);
	_parser0.parseStringP(warningString);
}

const char *SocialCasino::PlayerInfoWarning::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("warningCode", warningCode);
	_jsonstr.compose("warningString", warningString);
	return _buf.c_str();
}

void SocialCasino::PlayerInfoWarning::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("warningCode", warningCode);
	_jparser.parseByNameThrow("warningString", warningString);
}

/* static */ void SocialCasino::PlayerInfoWarning::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT16 warningCode; _jparser.validateByNameThrow("warningCode", warningCode);
	AtfValidator::validateInt(_descr, "warningCode", warningCode, _checker, __FILE__, __LINE__);
	PString warningString; _jparser.validateByNameThrow("warningString", warningString);
	AtfValidator::validateInt(_descr, "warningString", warningString.length(), _checker, __FILE__, __LINE__);
}

/*static*/ void SocialCasino::PlayerInfoWarning::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	INT16 warningCode; _parser0.parseINT16(warningCode);
	AtfValidator::validateInt(_descr, "warningCode", warningCode, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "warningString"); size_t szWarningString = strlen(_dummy);
	AtfValidator::validateInt(_descr, "warningString", szWarningString, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_SOCIALCASINO_USERINFO_REPLY
//=================================================================

SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY()
{
	clear();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::clear()
{
	userId.clear();
	imageId = 0;
	country.clear();
	playMoneyBalance = 0;
	site.clear();
	language.clear();
	warnings.clear();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::equals(const Protocol_MSG_SOCIALCASINO_USERINFO_REPLY& _o) const
{
	return Atf::atfPStringEquals(userId, _o.userId) &&
		imageId == _o.imageId &&
		Atf::atfPStringEquals(country, _o.country) &&
		playMoneyBalance == _o.playMoneyBalance &&
		Atf::atfPStringEquals(site, _o.site) &&
		Atf::atfPStringEquals(language, _o.language) &&
		warnings.equals(_o.warnings);
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_SOCIALCASINO_USERINFO_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_SOCIALCASINO_USERINFO_REPLY*)_other));
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SOCIALCASINO_USERINFO_REPLY).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append(',');
	_buf.append("country=");
	_buf.append(country);
	_buf.append(',');
	_buf.append("playMoneyBalance=");
	_buf.appendInt64(playMoneyBalance);
	_buf.append(',');
	_buf.append("site=");
	_buf.append(site);
	_buf.append(',');
	_buf.append("language=");
	_buf.append(language);
	_buf.append(',');
	_buf.append("warnings=");
	warnings.toTraceString(_buf);
	return _buf.c_str();
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_SOCIALCASINO_USERINFO_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	Atf::XmlElement::encodeAsXmlElement("imageId", imageId, _buf);
	Atf::XmlElement::encodeAsXmlElement("country", country, _buf);
	Atf::XmlElement::encodeAsXmlElement("playMoneyBalance", playMoneyBalance, _buf);
	Atf::XmlElement::encodeAsXmlElement("site", site, _buf);
	Atf::XmlElement::encodeAsXmlElement("language", language, _buf);
	warnings.toXmlString("warnings", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
        {
			if (_element.equals("userId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
			}
			else if (_element.equals("imageId"))
			{
				imageId = (UINT32)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("country"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, country)) return false;
			}
			else if (_element.equals("playMoneyBalance"))
			{
				playMoneyBalance = (INT64)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("site"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, site)) return false;
			}
			else if (_element.equals("language"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, language)) return false;
			}
			else if (_element.equals("warnings"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< PlayerInfoWarning, 4 > >::FromXmlString(_value, warnings)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userId);
	_msg.composeUINT32(imageId);
	_msg.composeString(country);
	_msg.composeINT64(playMoneyBalance);
	_msg.composeString(site);
	_msg.composeString(language);
	warnings.composeMsg(_msg, _ignoreJSON);
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseUINT32(imageId);
	_parser.parseStringP(country);
	_parser.parseINT64(playMoneyBalance);
	_parser.parseStringP(site);
	_parser.parseStringP(language);
	warnings.parseMsg(_parser);
}

const char *SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("imageId", imageId);
	_jsonstr.compose("country", country);
	_jsonstr.compose("playMoneyBalance", playMoneyBalance);
	_jsonstr.compose("site", site);
	_jsonstr.compose("language", language);
	_jsonstr.compose("warnings", warnings);
	return _buf.c_str();
}

void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("imageId", imageId);
	_jparser.parseByNameThrow("country", country);
	_jparser.parseByNameThrow("playMoneyBalance", playMoneyBalance);
	_jparser.parseByNameThrow("site", site);
	_jparser.parseByNameThrow("language", language);
	_jparser.parseByNameThrow("warnings", warnings);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_USERINFO_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	PString userId; _jparser.validateByNameThrow("userId", userId);
	AtfValidator::validateInt(_descr, "userId", userId.length(), _checker, __FILE__, __LINE__);
	UINT32 imageId; _jparser.validateByNameThrow("imageId", imageId);
	AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
	PString country; _jparser.validateByNameThrow("country", country);
	AtfValidator::validateInt(_descr, "country", country.length(), _checker, __FILE__, __LINE__);
	INT64 playMoneyBalance; _jparser.validateByNameThrow("playMoneyBalance", playMoneyBalance);
	AtfValidator::validateInt(_descr, "playMoneyBalance", playMoneyBalance, _checker, __FILE__, __LINE__);
	PString site; _jparser.validateByNameThrow("site", site);
	AtfValidator::validateInt(_descr, "site", site.length(), _checker, __FILE__, __LINE__);
	PString language; _jparser.validateByNameThrow("language", language);
	AtfValidator::validateInt(_descr, "language", language.length(), _checker, __FILE__, __LINE__);
	Atf::AtfVectorBase< PlayerInfoWarning > warnings; _jparser.validateByNameThrow("warnings", warnings);
	AtfValidator::validateInt(_descr, "warnings", warnings.size(), _checker, __FILE__, __LINE__);
}

/*static*/ void SocialCasino::Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_SOCIALCASINO_USERINFO_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "userId"); size_t szUserId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "userId", szUserId, _checker, __FILE__, __LINE__);
	UINT32 imageId; _parser.parseUINT32(imageId);
	AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "country"); size_t szCountry = strlen(_dummy);
	AtfValidator::validateInt(_descr, "country", szCountry, _checker, __FILE__, __LINE__);
	INT64 playMoneyBalance; _parser.parseINT64(playMoneyBalance);
	AtfValidator::validateInt(_descr, "playMoneyBalance", playMoneyBalance, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "site"); size_t szSite = strlen(_dummy);
	AtfValidator::validateInt(_descr, "site", szSite, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "language"); size_t szLanguage = strlen(_dummy);
	AtfValidator::validateInt(_descr, "language", szLanguage, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szWarnings = Atf::LAtfVector< PlayerInfoWarning, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("warnings"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "warnings", szWarnings, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ Atf::MessageProtocol* SocialCasino::ProtocolFactory::createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId)
{
	Atf::MessageProtocol *_obj = NULL;

	if(!strcmp(_nameSpace, ""))
	{
		switch(_msgId)
		{
			case MSG_SOCIALCASINO_CREDITPM: _obj = new Protocol_MSG_SOCIALCASINO_CREDITPM(); break;
			case MSG_SOCIALCASINO_CREDITPM_REPLY: _obj = new Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY(); break;
			case MSG_SOCIALCASINO_DEBITPM: _obj = new Protocol_MSG_SOCIALCASINO_DEBITPM(); break;
			case MSG_SOCIALCASINO_DEBITPM_REPLY: _obj = new Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY(); break;
			case MSG_SOCIALCASINO_USERINFO: _obj = new Protocol_MSG_SOCIALCASINO_USERINFO(); break;
			case MSG_SOCIALCASINO_USERINFO_REPLY: _obj = new Protocol_MSG_SOCIALCASINO_USERINFO_REPLY(); break;
		}
	}
	
	return _obj;
}

/* static */ bool SocialCasino::ProtocolFactory::validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, ""))
	{
		switch(_msgId)
		{
			case MSG_SOCIALCASINO_CREDITPM: Protocol_MSG_SOCIALCASINO_CREDITPM::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_CREDITPM_REPLY: Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_DEBITPM: Protocol_MSG_SOCIALCASINO_DEBITPM::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_DEBITPM_REPLY: Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_USERINFO: Protocol_MSG_SOCIALCASINO_USERINFO::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_USERINFO_REPLY: Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::validateJSONString(_jsonString, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

/* static */ bool SocialCasino::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, ""))
	{
		switch(_msgId)
		{
			case MSG_SOCIALCASINO_CREDITPM: Protocol_MSG_SOCIALCASINO_CREDITPM::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_CREDITPM_REPLY: Protocol_MSG_SOCIALCASINO_CREDITPM_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_DEBITPM: Protocol_MSG_SOCIALCASINO_DEBITPM::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_DEBITPM_REPLY: Protocol_MSG_SOCIALCASINO_DEBITPM_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_USERINFO: Protocol_MSG_SOCIALCASINO_USERINFO::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_SOCIALCASINO_USERINFO_REPLY: Protocol_MSG_SOCIALCASINO_USERINFO_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

