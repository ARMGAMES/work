/**
 * lobbyEtcClientProtocols_thin.h
 *
 * This file was auto-generated from lobbyEtcClientProtocols.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin lobbyEtcClientProtocols.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_LOBBYETCCLIENTPROTOCOLS_THIN_H
#define ATF_PROTOCOL_DEFFILE_LOBBYETCCLIENTPROTOCOLS_THIN_H

#include "ThinAtfUserDefStructs.h"
#include "LobbyEtc.h"
#include "sitemasks.h"
#include "licensemask.h"


namespace LobbyEtcClient
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	namespace player
	{
		struct Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF
		{
			// 2s - errCode,errString
			INT16 errCode;
			PString errString;

			Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF(Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF&&);
			Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF& operator=(Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF(const Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF&) = default;
			Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF& operator=(const Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID
		{
			// 42s - clientId,errCode,errString
			UINT32 clientId;
			INT16 errCode;
			PString errString;

			Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID(Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID&&);
			Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID& operator=(Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID(const Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID&) = default;
			Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID& operator=(const Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_CLI_RECONNECT
		{
			// empty message

			Protocol_MSG_LOBBYETC_CLI_RECONNECT();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_RECONNECT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_RECONNECT; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_RECONNECT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT
		{
			// 4s - result,resultStr
			UINT32 result;
			PString resultStr;

			Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT(Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT&&);
			Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT& operator=(Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT(const Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT&) = default;
			Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT& operator=(const Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE
		{
			// ssss - licenseKey,geoIPReason,encryptedUserIntId,mobileNum
			PString licenseKey;
			PString geoIPReason;
			PString encryptedUserIntId;
			PString mobileNum;

			Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_GEOCOMPLY_LOCATE; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_GEOCOMPLY_LOCATE"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE(Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE&&);
			Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE& operator=(Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE(const Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE&) = default;
			Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE& operator=(const Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION
		{
			// ssb - countryCode,phoneNumWithoutCountryCode,needVerify
			PString countryCode;
			PString phoneNumWithoutCountryCode;
			bool needVerify;

			Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION(Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION&&);
			Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION& operator=(Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION(const Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION&) = default;
			Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION& operator=(const Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS
		{
			// 4s - status,statusStr
			UINT32 status;
			PString statusStr;

			Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS(Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS&&);
			Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS& operator=(Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS(const Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS&) = default;
			Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS& operator=(const Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT
		{
			// empty message

			Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		// PYR-98733
		struct ThrowableElement
		{
			// M(44) - M(throwableTypeId,isEnabled)
			UINT32 throwableTypeId;	// enum Throwable::Type in Throwables.h
			UINT32 isEnabled;

			ThrowableElement();
			void clear();
			bool equals(const ThrowableElement&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct UnsolicitedNotification_Throwables
		{
			// 4<M(44)>4 - numThrowableEnablements<M(throwableTypeId,isEnabled)>,coolDownInterval
			ThinAtf::LAtfVector< ThrowableElement, 4 > throwableEnablements;
			INT32 coolDownInterval;

			UnsolicitedNotification_Throwables();
			void clear();
			bool equals(const UnsolicitedNotification_Throwables&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UnsolicitedNotification_Throwables(UnsolicitedNotification_Throwables&&);
			UnsolicitedNotification_Throwables& operator=(UnsolicitedNotification_Throwables&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UnsolicitedNotification_Throwables(const UnsolicitedNotification_Throwables&) = default;
			UnsolicitedNotification_Throwables& operator=(const UnsolicitedNotification_Throwables&) = default;
#endif
#endif
		};

		struct UnsolicitedNotificationType_WebNotification
		{
			// s - payload
			PString payload;	// JSON

			UnsolicitedNotificationType_WebNotification();
			void clear();
			bool equals(const UnsolicitedNotificationType_WebNotification&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			UnsolicitedNotificationType_WebNotification(UnsolicitedNotificationType_WebNotification&&);
			UnsolicitedNotificationType_WebNotification& operator=(UnsolicitedNotificationType_WebNotification&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			UnsolicitedNotificationType_WebNotification(const UnsolicitedNotificationType_WebNotification&) = default;
			UnsolicitedNotificationType_WebNotification& operator=(const UnsolicitedNotificationType_WebNotification&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION
		{
			// 4M() - notifType,M()
			UINT32 notifType;	// enum UnsolicitedNotificationType in LobbyEtc.h
			ThinAtf::CopyableMsgBody notifMsg;

			Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION(Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION&&);
			Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION& operator=(Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION(const Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION&) = default;
			Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION& operator=(const Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION&) = default;
#endif
#endif
		};

		// PYR-106819
		struct Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT
		{
			// dd1sb - startDate,endDate,reportFormat,password,isHtmlForClient
			SrvDate startDate;
			SrvDate endDate;
			BYTE reportFormat;	// enum eReportFormat in srvshared/crmserver.h
			PString password;
			bool isHtmlForClient;

			Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT(Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT&&);
			Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT& operator=(Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT(const Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT&) = default;
			Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT& operator=(const Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY(Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY&&);
			Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY& operator=(Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY(const Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY&) = default;
			Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY& operator=(const Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION
		{
			// 1 - boldChatType
			BYTE boldChatType;	// enum BoldChatType

			Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
	};

	// PYR-107053
	namespace MiniGameTickets
	{
		struct Attributes
		{
			// M(s4t44448) - M(gameTicketName,minigameId,expiration,userPreferredTimeZone,playsAvailable,minigameType,ticketTypeId,ticketId)
			PString gameTicketName;
			UINT32 minigameId;
			SrvTime expiration;
			INT32 userPreferredTimeZone;
			INT32 playsAvailable;
			UINT32 minigameType;	// enum GameType
			UINT32 ticketTypeId;
			UINT64 ticketId;

			Attributes();
			void clear();
			bool equals(const Attributes&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Attributes(Attributes&&);
			Attributes& operator=(Attributes&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Attributes(const Attributes&) = default;
			Attributes& operator=(const Attributes&) = default;
#endif
#endif
		};

		struct GameTicketNotifMsg
		{
			// M(ssssM(s4t44448)) - M(type,description,moreInfo,headerImageURL,M(gameTicketName,minigameId,expiration,userPreferredTimeZone,playsAvailable,minigameType,ticketTypeId,ticketId))
			PString type;
			PString description;
			PString moreInfo;
			PString headerImageURL;
			Attributes attributes;

			GameTicketNotifMsg();
			void clear();
			bool equals(const GameTicketNotifMsg&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			GameTicketNotifMsg(GameTicketNotifMsg&&);
			GameTicketNotifMsg& operator=(GameTicketNotifMsg&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			GameTicketNotifMsg(const GameTicketNotifMsg&) = default;
			GameTicketNotifMsg& operator=(const GameTicketNotifMsg&) = default;
#endif
#endif
		};

		// PYR-112602
		struct GameTicketWithTypeAndMiniGameData
		{
			// M(84tt44444ss4444mss) - M(gameTicketId,gameTicketTypeId,whenStarted,expiration,playsInitial,playsSpent,gameTicketBrandMask,minigameId,minigameType,minigameClientDisplayName,minigameClientDisplayInfo,minigameBrandMask,minigameSiteMask,status,costFpp1,minigameSiteMaskEx,moreInfo,headerImageURL)
			UINT64 gameTicketId;
			UINT32 gameTicketTypeId;
			SrvTime whenStarted;
			SrvTime expiration;
			INT32 playsInitial;
			INT32 playsSpent;
			UINT32 gameTicketBrandMask;
			UINT32 minigameId;
			UINT32 minigameType;
			PString minigameClientDisplayName;
			PString minigameClientDisplayInfo;
			UINT32 minigameBrandMask;
			UINT32 minigameSiteMask;	// deprecated. Replaced by minigameSiteMaskEx
			INT32 status;
			INT32 costFpp1;
			PSiteMask minigameSiteMaskEx;
			PString moreInfo;
			PString headerImageURL;

			GameTicketWithTypeAndMiniGameData();
			void clear();
			bool equals(const GameTicketWithTypeAndMiniGameData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			GameTicketWithTypeAndMiniGameData(GameTicketWithTypeAndMiniGameData&&);
			GameTicketWithTypeAndMiniGameData& operator=(GameTicketWithTypeAndMiniGameData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			GameTicketWithTypeAndMiniGameData(const GameTicketWithTypeAndMiniGameData&) = default;
			GameTicketWithTypeAndMiniGameData& operator=(const GameTicketWithTypeAndMiniGameData&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE
		{
			// 8 - requestId
			INT64 requestId;

			Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_GET_TICKETS_WITH_TYPE; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_GET_TICKETS_WITH_TYPE"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY
		{
			// 82[s|4<M(84tt44444ss4444mss)>] - requestId,errCode[errStr|numTicketsWithMinigames<M(gameTicketId,gameTicketTypeId,whenStarted,expiration,playsInitial,playsSpent,gameTicketBrandMask,minigameId,minigameType,minigameClientDisplayName,minigameClientDisplayInfo,minigameBrandMask,minigameSiteMask,status,costFpp1,minigameSiteMaskEx,moreInfo,headerImageURL)>]
			INT64 requestId;
			INT16 errCode;

			PString errStr;

			ThinAtf::LAtfVector< GameTicketWithTypeAndMiniGameData , 4 > ticketsWithMinigames;

			Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY(Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY&&);
			Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY& operator=(Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY(const Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY&) = default;
			Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY& operator=(const Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY&) = default;
#endif
#endif
		};

		// PYR-120600
		//  Prize types: Cash Instant_Bonus Free_Spins Freebets Tournament_Tickets/Tournament_Ticket_Bundles T-Money or TChips StarsCoin
		// Mini_Game_Tickets ICE_Puzzle_Image No_Prize MPC
		struct Prize
		{
			// M(ss4s) - M(imageURL,prizeName,prizeType,launchURL)

			PString imageURL;	// image URL from prize definition
			PString prizeName;	// name from prize definition
			INT32 prizeType;	// enum PrizeType
			PString launchURL;	// launch URL from prize definition

			Prize();
			void clear();
			bool equals(const Prize&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

			// @Override
			Prize(const PString& imageURL_, const PString& prizeName_, const INT32& prizeType_,  const PString& launchURL_);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Prize(Prize&&);
			Prize& operator=(Prize&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Prize(const Prize&) = default;
			Prize& operator=(const Prize&) = default;
#endif
#endif
		};

		// PYR-120600
		struct Winner
		{
			// M(ss) - M(prizeTitle,playerId)

			PString prizeTitle;	// what prize the player won
			PString playerId;	// userid

			Winner();
			void clear();
			bool equals(const Winner&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

			// @Override
			Winner(const PString& prizeTitle_, const PString& playerId_);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Winner(Winner&&);
			Winner& operator=(Winner&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Winner(const Winner&) = default;
			Winner& operator=(const Winner&) = default;
#endif
#endif
		};

		// PYR-120600
		struct FixedPrizeWonAttributes
		{
			// M(44t4444<M(ss4s)>4<M(ss)>) - M(numPrizes,numWinners,draw,userPreferredTimeZone,entryId,drawId,numPrizes<M(imageURL,prizeName,prizeType,launchURL)>,numWinners<M(prizeTitle,playerId)>)
			INT32 numPrizes;	//
			INT32 numWinners;	//
			SrvTime draw;	// draw time
			INT32 userPreferredTimeZone;	// from user
			UINT32 entryId;	// message id
			UINT32 drawId;	// minigameId
			ThinAtf::LAtfVector< Prize , 4 > prizes;
			ThinAtf::LAtfVector< Winner , 4 > winners;

			FixedPrizeWonAttributes();
			void clear();
			bool equals(const FixedPrizeWonAttributes&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			FixedPrizeWonAttributes(FixedPrizeWonAttributes&&);
			FixedPrizeWonAttributes& operator=(FixedPrizeWonAttributes&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			FixedPrizeWonAttributes(const FixedPrizeWonAttributes&) = default;
			FixedPrizeWonAttributes& operator=(const FixedPrizeWonAttributes&) = default;
#endif
#endif
		};

		// PYR-120600
		struct FixedPrizeLostAttributes
		{
			// M(44t4444<M(ss)>) - M(numPrizes,numWinners,draw,userPreferredTimeZone,entryId,drawId,numWinners<M(prizeTitle,playerId)>)
			INT32 numPrizes;	//
			INT32 numWinners;	//
			SrvTime draw;	// draw time
			INT32 userPreferredTimeZone;	// from user
			UINT32 entryId;	// message id
			UINT32 drawId;	// minigameId
			ThinAtf::LAtfVector< Winner , 4 > winners;

			FixedPrizeLostAttributes();
			void clear();
			bool equals(const FixedPrizeLostAttributes&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			FixedPrizeLostAttributes(FixedPrizeLostAttributes&&);
			FixedPrizeLostAttributes& operator=(FixedPrizeLostAttributes&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			FixedPrizeLostAttributes(const FixedPrizeLostAttributes&) = default;
			FixedPrizeLostAttributes& operator=(const FixedPrizeLostAttributes&) = default;
#endif
#endif
		};

		// PYR-120600
		struct FixedPrizeTicketAttributes
		{
			// M(4t444) - M(entries,draw,userPreferredTimeZone,entryId,drawId)
			INT32 entries;	// available on ticket and aggregated by minigameId on login
			SrvTime draw;	// draw time
			INT32 userPreferredTimeZone;	// from user
			UINT32 entryId;	// message id
			UINT32 drawId;	// minigameId

			FixedPrizeTicketAttributes();
			void clear();
			bool equals(const FixedPrizeTicketAttributes&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		// PYR-120600
		struct FixedPrizeTicketNotifMsg
		{
			// M(ssssssM(4t444)) - M(type,state,title,description,moreInfo,headerImageURL,M(entries,draw,userPreferredTimeZone,entryId,drawId))
			PString type;
			PString state;	// issued, won, lost
			PString title;	// from GameTicketTypeTemplateData::eGameTicketTypeI18nShort/ticket.gameTicketTypeName
			PString description;	// from GameTicketTypeTemplateData::eGameTicketTypeI18nLong
			PString moreInfo;	// from GameTicketTypeTemplateData::eGameTicketTypeInfo
			PString headerImageURL;	// from ticket.imageUrl

			FixedPrizeTicketAttributes attributes;

			FixedPrizeTicketNotifMsg();
			void clear();
			bool equals(const FixedPrizeTicketNotifMsg&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			FixedPrizeTicketNotifMsg(FixedPrizeTicketNotifMsg&&);
			FixedPrizeTicketNotifMsg& operator=(FixedPrizeTicketNotifMsg&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			FixedPrizeTicketNotifMsg(const FixedPrizeTicketNotifMsg&) = default;
			FixedPrizeTicketNotifMsg& operator=(const FixedPrizeTicketNotifMsg&) = default;
#endif
#endif
		};

		// PYR-120600
		struct FixedPrizeWonNotifMsg
		{
			// M(ssssM(44t4444<M(ss4s)>4<M(ss)>)) - M(type,state,title,headerImageURL,M(numPrizes,numWinners,draw,userPreferredTimeZone,entryId,drawId,numPrizes<M(imageURL,prizeName,prizeType,launchURL)>,numWinners<M(prizeTitle,playerId)>))
			PString type;
			PString state;	// issued, won, lost
			PString title;	// from GameTicketTypeTemplateData::eGameTicketTypeI18nShort/ticket.gameTicketTypeName
			PString headerImageURL;	// from ticket.imageUrl

			FixedPrizeWonAttributes attributes;

			FixedPrizeWonNotifMsg();
			void clear();
			bool equals(const FixedPrizeWonNotifMsg&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			FixedPrizeWonNotifMsg(FixedPrizeWonNotifMsg&&);
			FixedPrizeWonNotifMsg& operator=(FixedPrizeWonNotifMsg&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			FixedPrizeWonNotifMsg(const FixedPrizeWonNotifMsg&) = default;
			FixedPrizeWonNotifMsg& operator=(const FixedPrizeWonNotifMsg&) = default;
#endif
#endif
		};

		// PYR-120600
		struct FixedPrizeLostNotifMsg
		{
			// M(ssssM(44t4444<M(ss)>)) - M(type,state,title,headerImageURL,M(numPrizes,numWinners,draw,userPreferredTimeZone,entryId,drawId,numWinners<M(prizeTitle,playerId)>))
			PString type;
			PString state;	// issued, won, lost
			PString title;	// from GameTicketTypeTemplateData::eGameTicketTypeI18nShort/ticket.gameTicketTypeName
			PString headerImageURL;	// from ticket.imageUrl

			FixedPrizeLostAttributes attributes;

			FixedPrizeLostNotifMsg();
			void clear();
			bool equals(const FixedPrizeLostNotifMsg&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			FixedPrizeLostNotifMsg(FixedPrizeLostNotifMsg&&);
			FixedPrizeLostNotifMsg& operator=(FixedPrizeLostNotifMsg&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			FixedPrizeLostNotifMsg(const FixedPrizeLostNotifMsg&) = default;
			FixedPrizeLostNotifMsg& operator=(const FixedPrizeLostNotifMsg&) = default;
#endif
#endif
		};

		// PYR-123376
		struct MyStarsData
		{
			// M(ss4<M(ssssssM(4t444))>4<M(ssssM(44t4444<M(ss4s)>4<M(ss)>))>4<M(ssssM(44t4444<M(ss)>))>) - M(type,state,numTickets<M(type,state,title,description,moreInfo,headerImageURL,M(entries,draw,userPreferredTimeZone,entryId,drawId))>,numWins<M(type,state,title,headerImageURL,M(numPrizes,numWinners,draw,userPreferredTimeZone,entryId,drawId,numPrizes<M(imageURL,prizeName,prizeType,launchURL)>,numWinners<M(prizeTitle,playerId)>))>,numLosts<M(type,state,title,headerImageURL,M(numPrizes,numWinners,draw,userPreferredTimeZone,entryId,drawId,numWinners<M(prizeTitle,playerId)>))>)
			PString type;
			PString state;	//
			ThinAtf::LAtfVector< FixedPrizeTicketNotifMsg , 4 > tickets;	// aggergated
			ThinAtf::LAtfVector< FixedPrizeWonNotifMsg , 4 > wins;	// all wins
			ThinAtf::LAtfVector< FixedPrizeLostNotifMsg , 4 > losts;	// all losts

			MyStarsData();
			void clear();
			bool equals(const MyStarsData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			MyStarsData(MyStarsData&&);
			MyStarsData& operator=(MyStarsData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			MyStarsData(const MyStarsData&) = default;
			MyStarsData& operator=(const MyStarsData&) = default;
#endif
#endif
		};

		// PYR-123376
		struct Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA
		{
			// empty

			Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		// PYR-123376
		struct Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY
		{
			// s - json
			PString json;

			Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY(Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY&&);
			Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY& operator=(Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY(const Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY&) = default;
			Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY& operator=(const Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY&) = default;
#endif
#endif
		};
	};

	//	PYR-51006
	namespace ImageGallery
	{
		struct Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY
		{
			// 444 - siteId,brand,locale
			UINT32 siteId;
			UINT32 brand;
			UINT32 locale;

			Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Image
		{
			// M(4s) - M(imageId,descr)
			UINT32 imageId;
			PString descr;

			Image();
			void clear();
			bool equals(const Image&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Image(Image&&);
			Image& operator=(Image&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Image(const Image&) = default;
			Image& operator=(const Image&) = default;
#endif
#endif
		};
		struct SubCategory
		{
			// M(s4<4>) - M(name,numImageIds<imageIds>)
			PString name;
			ThinAtf::LAtfVector< UINT32, 4 > imageIds;

			SubCategory();
			void clear();
			bool equals(const SubCategory&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			SubCategory(SubCategory&&);
			SubCategory& operator=(SubCategory&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			SubCategory(const SubCategory&) = default;
			SubCategory& operator=(const SubCategory&) = default;
#endif
#endif
		};
		struct Category
		{
			// M(s4<4>4<M(s4<4>)>) - M(catName,numImageIds<imageIds>,numSubcategories<M(name,numImageIds<imageIds>)>)
			PString catName;
			ThinAtf::LAtfVector< UINT32, 4 > imageIds;
			ThinAtf::LAtfVector< SubCategory, 4 > subcategories;

			Category();
			void clear();
			bool equals(const Category&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Category(Category&&);
			Category& operator=(Category&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Category(const Category&) = default;
			Category& operator=(const Category&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY
		{
			// 2[s|4<M(4s)>4<M(s4<4>4<M(s4<4>)>)>] - errCode[errString|numImages<M(imageId,descr)>,numCategories<M(catName,numImageIds<imageIds>,numSubcategories<M(name,numImageIds<imageIds>)>)>]
			INT16 errCode;

			PString errString;

			ThinAtf::LAtfVector< Image, 4 > images;
			ThinAtf::LAtfVector< Category, 4 > categories;

			Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY(Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY&&);
			Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY& operator=(Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY(const Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY&) = default;
			Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY& operator=(const Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY&) = default;
#endif
#endif
		};
	};

	// PYR-108724
	namespace Twitch
	{
		// Check if user is connected to Twitch (has valid access token)
		struct Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS
		{
			// empty message

			Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};
		struct Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY
		{
			// 2[s|bs] - errCode[errString|status,twitchId]
			INT16 errCode;

			PString errString;

			bool status;	// true - connected, false - disconnected
			PString twitchId;	// not empty if connected. It's actually a display_name.

			Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY(Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY&&);
			Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY& operator=(Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY(const Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY&) = default;
			Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY& operator=(const Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY&) = default;
#endif
#endif
		};
		// This will generate and store access token from Twitch
		struct Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT
		{
			// s - authorizationCode
			PString authorizationCode;

			Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_TWITCH_CONNECT; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_TWITCH_CONNECT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT(Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT&&);
			Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT& operator=(Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT(const Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT&) = default;
			Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT& operator=(const Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY
		{
			// 2[s|s] - errCode[errString|twitchId]
			INT16 errCode;

			PString errString;

			PString twitchId;	// It's actually a display_name.

			Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY(Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY&&);
			Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY& operator=(Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY(const Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY&) = default;
			Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY& operator=(const Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT
		{
			// empty message

			Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_TWITCH_DISCONNECT; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_TWITCH_DISCONNECT"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
		};

		struct Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY();
			void clear();
			bool equals(const Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY; }
			static const char *getMsgIdString() { return "MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY(Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY&&);
			Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY& operator=(Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY(const Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY&) = default;
			Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY& operator=(const Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY&) = default;
#endif
#endif
		};
	};
};

#endif
