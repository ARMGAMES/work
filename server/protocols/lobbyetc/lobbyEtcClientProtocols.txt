#include "UserDefStructs.h"
#include "LobbyEtc.h"
#include "sitemasks.h"
#include "licensemask.h"

#define TOP_LEVEL_NAMESPACE LobbyEtcClient


namespace player
{
	Message MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF
	{
		INT16 errCode;
		PString errString;
	};

	Message MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID
	{
		UINT32 clientId;
		INT16 errCode;
		PString errString;
	};

	Message MSG_LOBBYETC_CLI_RECONNECT
	{
		// empty message
	};

	Message MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT
	{
		UINT32 result;
		PString resultStr;
	};
	

	Message MSG_LOBBYETC_GEOCOMPLY_LOCATE
	{
		PString licenseKey;
		PString geoIPReason;
		PString encryptedUserIntId;
		PString mobileNum;
	};

	Message MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION
	{
		PString countryCode;
		PString phoneNumWithoutCountryCode;
		bool needVerify;
	};

	Message MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS
	{
		UINT32 status;
		PString statusStr;
	};

	Message MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT
	{
		// empty message
	};
	
	// PYR-98733
	MsgBodyStruct ThrowableElement
	{
		UINT32 throwableTypeId; // enum Throwable::Type in Throwables.h
		UINT32 isEnabled;
	};

	struct UnsolicitedNotification_Throwables
	{		
		vector<ThrowableElement> throwableEnablements;
		INT32 coolDownInterval;
	};

	struct UnsolicitedNotificationType_WebNotification
	{
		PString payload; // JSON
	};

	Message MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION
	{
		UINT32 notifType; // enum UnsolicitedNotificationType in LobbyEtc.h
		CommMsgBody notifMsg;
	};

	// PYR-106819
	Message MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT
	{
		SrvDate startDate;
		SrvDate endDate;
		BYTE reportFormat max 100; // enum eReportFormat in srvshared/crmserver.h
		PString password notrace maxlen 1000;
		bool isHtmlForClient;
	};

	Message MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errString;
		}
	};	
	
	Message MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION
	{
		BYTE boldChatType; // enum BoldChatType
	};
};

// PYR-107053
namespace MiniGameTickets
{
	MsgBodyStruct Attributes
	{
		PString gameTicketName;
		UINT32 minigameId;
		SrvTime expiration;
		INT32 userPreferredTimeZone;
		INT32 playsAvailable;
		UINT32 minigameType; // enum GameType
		UINT32 ticketTypeId;
		UINT64 ticketId;
	};

	MsgBodyStruct GameTicketNotifMsg
	{
		PString type default "MiniGameTicket";
		PString description;
		PString moreInfo;
		PString headerImageURL;
		Attributes attributes;
	};

	// PYR-112602
	MsgBodyStruct GameTicketWithTypeAndMiniGameData
	{
		UINT64 gameTicketId;
		UINT32 gameTicketTypeId;
		SrvTime whenStarted;
		SrvTime expiration;
		INT32 playsInitial;
		INT32 playsSpent;
		UINT32 gameTicketBrandMask;
		UINT32 minigameId;
		UINT32 minigameType;
		PString minigameClientDisplayName;
		PString minigameClientDisplayInfo;
		UINT32 minigameBrandMask;
		UINT32 minigameSiteMask;	// deprecated. Replaced by minigameSiteMaskEx 
		INT32 status parseEndOptB4Me;
		INT32 costFpp1 parseEndOptB4Me;
		PSiteMask minigameSiteMaskEx parseEndOptB4Me;
		PString moreInfo parseEndOptB4Me;
		PString headerImageURL parseEndOptB4Me;
	};

	Message MSG_LOBBYETC_GET_TICKETS_WITH_TYPE
	{
		INT64 requestId;
	};

	Message MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY
	{
		INT64 requestId;
		INT16 errCode;
		if( errCode )
		{
			PString errStr;
		}
		else
		{
			vector< GameTicketWithTypeAndMiniGameData > ticketsWithMinigames;
		}
	};
		
	// PYR-120600 
	//  Prize types: Cash Instant_Bonus Free_Spins Freebets Tournament_Tickets/Tournament_Ticket_Bundles T-Money or TChips StarsCoin
	// Mini_Game_Tickets ICE_Puzzle_Image No_Prize MPC
	MsgBodyStruct Prize
	{
		@Override Prize(const PString& imageURL_, const PString& prizeName_, const INT32& prizeType_,  const PString& launchURL_)
		{
			imageURL = imageURL_;		
			prizeName = prizeName_;		
			prizeType = prizeType_;	
			launchURL = launchURL_;		
		}
		
		PString imageURL;						// image URL from prize definition
		PString prizeName;						// name from prize definition
		INT32	prizeType;						// enum PrizeType
		PString launchURL;						// launch URL from prize definition
	};

	// PYR-120600 
	MsgBodyStruct Winner
	{
		@Override Winner(const PString& prizeTitle_, const PString& playerId_)
		{
			prizeTitle = prizeTitle_;		
			playerId = playerId_;
		}
	
		PString prizeTitle;						// what prize the player won
		PString playerId;						// userid
	};

	// PYR-120600 
	MsgBodyStruct FixedPrizeWonAttributes
	{
		INT32 numPrizes;						// 
		INT32 numWinners;						// 
		SrvTime draw;							// draw time
		INT32 userPreferredTimeZone;			// from user 
		UINT32 entryId;							// message id
		UINT32 drawId;							// minigameId
		vector< Prize > prizes;
		vector< Winner > winners;
	};

	// PYR-120600 
	MsgBodyStruct FixedPrizeLostAttributes
	{
		INT32 numPrizes;						// 
		INT32 numWinners;						// 
		SrvTime draw;							// draw time
		INT32 userPreferredTimeZone;			// from user 
		UINT32 entryId;							// message id
		UINT32 drawId;							// minigameId
		vector< Winner > winners;
	};

	// PYR-120600 
	MsgBodyStruct FixedPrizeTicketAttributes
	{
		INT32 entries;							// available on ticket and aggregated by minigameId on login
		SrvTime draw;							// draw time
		INT32 userPreferredTimeZone;			// from user 
		UINT32 entryId;							// message id
		UINT32 drawId;							// minigameId
	};

	// PYR-120600 
	MsgBodyStruct FixedPrizeTicketNotifMsg
	{
		PString type default "FixedPrizeDraw";
		PString state default "issued";			// issued, won, lost
		PString title;							// from GameTicketTypeTemplateData::eGameTicketTypeI18nShort/ticket.gameTicketTypeName
		PString description;					// from GameTicketTypeTemplateData::eGameTicketTypeI18nLong
		PString moreInfo;						// from GameTicketTypeTemplateData::eGameTicketTypeInfo
		PString headerImageURL;					// from ticket.imageUrl
		
		FixedPrizeTicketAttributes attributes;
	};

	// PYR-120600 
	MsgBodyStruct FixedPrizeWonNotifMsg
	{
		PString type default "FixedPrizeDraw";
		PString state default "won";			// issued, won, lost
		PString title;							// from GameTicketTypeTemplateData::eGameTicketTypeI18nShort/ticket.gameTicketTypeName
		PString headerImageURL;					// from ticket.imageUrl

		FixedPrizeWonAttributes attributes;
	};

	// PYR-120600 
	MsgBodyStruct FixedPrizeLostNotifMsg
	{
		PString type default "FixedPrizeDraw";
		PString state default "lost";			// issued, won, lost
		PString title;							// from GameTicketTypeTemplateData::eGameTicketTypeI18nShort/ticket.gameTicketTypeName
		PString headerImageURL;					// from ticket.imageUrl

		FixedPrizeLostAttributes attributes;
	};

	// PYR-123376
	MsgBodyStruct MyStarsData
	{
		PString type default "FixedPrizeDraw";
		PString state default "mystars";			// 
		vector< FixedPrizeTicketNotifMsg > tickets; // aggergated
		vector< FixedPrizeWonNotifMsg > wins;		// all wins
		vector< FixedPrizeLostNotifMsg > losts;		// all losts
	};

	// PYR-123376
	Message MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA
	{
		// empty
	};

	// PYR-123376
	Message MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY
	{
		PString json;
	};
};

//	PYR-51006
namespace ImageGallery
{
	Message MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY
	{
		UINT32 siteId;
		UINT32 brand;
		UINT32 locale;
	};

	MsgBodyStruct Image
	{
		UINT32 imageId;
		PString descr;
	};
	MsgBodyStruct SubCategory
	{
		PString name;
		vector<UINT32> imageIds;
	};
	MsgBodyStruct Category
	{
		PString catName;
		vector<UINT32> imageIds;
		vector<SubCategory> subcategories;
	};
	
	Message MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY
	{
		INT16 errCode;
		if (errCode != 0)
		{
			PString errString;
		}
		else
		{
			vector<Image> images;
			vector<Category> categories;
		}
	};
};

// PYR-108724
namespace Twitch
{
	// Check if user is connected to Twitch (has valid access token)
	Message MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS
	{
		// empty message
	};
	Message MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errString;
		}
		else
		{
			bool status; // true - connected, false - disconnected
			PString twitchId; // not empty if connected. It's actually a display_name.
		}
	};
	// This will generate and store access token from Twitch
	Message MSG_LOBBYETC_CLI_TWITCH_CONNECT
	{
		PString authorizationCode;
	};

	Message MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errString;
		}
		else
		{
			PString twitchId; // It's actually a display_name.
		}
	};		

	Message MSG_LOBBYETC_CLI_TWITCH_DISCONNECT
	{
		// empty message
	};

	Message MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY
	{
		INT16 errCode;
		if( errCode != 0 )
		{
			PString errString;
		}
	};
};
