/**
 * lobbyEtcClientProtocols_thin.cpp
 *
 * This file was auto-generated from lobbyEtcClientProtocols.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin lobbyEtcClientProtocols.txt
 */
 
#include "lobbyEtcClientProtocols_thin.h"

//=================================================================
//                Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF(Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF&& _o)
	: errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
{
}

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF& LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF::operator=(Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
	}
	return *this;
}

#endif

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF::clear()
{
	errCode = 0;
	errString.clear();
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF::equals(const Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("errString=");
	_buf.append(errString);
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(errString);
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringP(errString);
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode; _parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID(Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID&& _o)
	: clientId(std::move(_o.clientId))
	, errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
{
}

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID& LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID::operator=(Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID&& _o)
{
	if(this != &_o)
	{
		clientId = std::move(_o.clientId);
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
	}
	return *this;
}

#endif

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID::clear()
{
	clientId = 0;
	errCode = 0;
	errString.clear();
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID::equals(const Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID& _o) const
{
	return clientId == _o.clientId &&
		errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID).append(")");
	_buf.append(',');
	_buf.append("clientId=");
	_buf.appendUint(clientId);
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("errString=");
	_buf.append(errString);
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(clientId);
	_msg.composeINT16(errCode);
	_msg.composeString(errString);
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(clientId);
	_parser.parseINT16(errCode);
	_parser.parseStringP(errString);
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 clientId; _parser.parseUINT32(clientId);
	AtfValidator::validateInt(_descr, "clientId", clientId, _checker, __FILE__, __LINE__);
	INT16 errCode; _parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
	AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_RECONNECT
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_RECONNECT::Protocol_MSG_LOBBYETC_CLI_RECONNECT()
{
	clear();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_RECONNECT::clear()
{
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_RECONNECT::equals(const Protocol_MSG_LOBBYETC_CLI_RECONNECT& _o) const
{
	return true;
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_RECONNECT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_RECONNECT).append(")");
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_RECONNECT::composeMsg(CommMsgBody& _msg) const
{
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_RECONNECT::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_RECONNECT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_RECONNECT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT(Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT&& _o)
	: result(std::move(_o.result))
	, resultStr(std::move(_o.resultStr))
{
}

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT& LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT::operator=(Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT&& _o)
{
	if(this != &_o)
	{
		result = std::move(_o.result);
		resultStr = std::move(_o.resultStr);
	}
	return *this;
}

#endif

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT::clear()
{
	result = 0;
	resultStr.clear();
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT::equals(const Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT& _o) const
{
	return result == _o.result &&
		resultStr.equals(_o.resultStr);
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT).append(")");
	_buf.append(',');
	_buf.append("result=");
	_buf.appendUint(result);
	_buf.append(',');
	_buf.append("resultStr=");
	_buf.append(resultStr);
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(result);
	_msg.composeString(resultStr);
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(result);
	_parser.parseStringP(resultStr);
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 result; _parser.parseUINT32(result);
	AtfValidator::validateInt(_descr, "result", result, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "resultStr"); size_t szResultStr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "resultStr", szResultStr, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE(Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE&& _o)
	: licenseKey(std::move(_o.licenseKey))
	, geoIPReason(std::move(_o.geoIPReason))
	, encryptedUserIntId(std::move(_o.encryptedUserIntId))
	, mobileNum(std::move(_o.mobileNum))
{
}

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE& LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE::operator=(Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE&& _o)
{
	if(this != &_o)
	{
		licenseKey = std::move(_o.licenseKey);
		geoIPReason = std::move(_o.geoIPReason);
		encryptedUserIntId = std::move(_o.encryptedUserIntId);
		mobileNum = std::move(_o.mobileNum);
	}
	return *this;
}

#endif

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE::clear()
{
	licenseKey.clear();
	geoIPReason.clear();
	encryptedUserIntId.clear();
	mobileNum.clear();
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE::equals(const Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE& _o) const
{
	return licenseKey.equals(_o.licenseKey) &&
		geoIPReason.equals(_o.geoIPReason) &&
		encryptedUserIntId.equals(_o.encryptedUserIntId) &&
		mobileNum.equals(_o.mobileNum);
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_GEOCOMPLY_LOCATE).append(")");
	_buf.append(',');
	_buf.append("licenseKey=");
	_buf.append(licenseKey);
	_buf.append(',');
	_buf.append("geoIPReason=");
	_buf.append(geoIPReason);
	_buf.append(',');
	_buf.append("encryptedUserIntId=");
	_buf.append(encryptedUserIntId);
	_buf.append(',');
	_buf.append("mobileNum=");
	_buf.append(mobileNum);
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(licenseKey);
	_msg.composeString(geoIPReason);
	_msg.composeString(encryptedUserIntId);
	_msg.composeString(mobileNum);
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(licenseKey);
	_parser.parseStringP(geoIPReason);
	_parser.parseStringP(encryptedUserIntId);
	_parser.parseStringP(mobileNum);
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_GEOCOMPLY_LOCATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "licenseKey"); size_t szLicenseKey = strlen(_dummy);
	AtfValidator::validateInt(_descr, "licenseKey", szLicenseKey, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "geoIPReason"); size_t szGeoIPReason = strlen(_dummy);
	AtfValidator::validateInt(_descr, "geoIPReason", szGeoIPReason, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "encryptedUserIntId"); size_t szEncryptedUserIntId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "encryptedUserIntId", szEncryptedUserIntId, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "mobileNum"); size_t szMobileNum = strlen(_dummy);
	AtfValidator::validateInt(_descr, "mobileNum", szMobileNum, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION(Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION&& _o)
	: countryCode(std::move(_o.countryCode))
	, phoneNumWithoutCountryCode(std::move(_o.phoneNumWithoutCountryCode))
	, needVerify(std::move(_o.needVerify))
{
}

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION& LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION::operator=(Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION&& _o)
{
	if(this != &_o)
	{
		countryCode = std::move(_o.countryCode);
		phoneNumWithoutCountryCode = std::move(_o.phoneNumWithoutCountryCode);
		needVerify = std::move(_o.needVerify);
	}
	return *this;
}

#endif

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION::clear()
{
	countryCode.clear();
	phoneNumWithoutCountryCode.clear();
	needVerify = false;
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION::equals(const Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION& _o) const
{
	return countryCode.equals(_o.countryCode) &&
		phoneNumWithoutCountryCode.equals(_o.phoneNumWithoutCountryCode) &&
		needVerify == _o.needVerify;
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION).append(")");
	_buf.append(',');
	_buf.append("countryCode=");
	_buf.append(countryCode);
	_buf.append(',');
	_buf.append("phoneNumWithoutCountryCode=");
	_buf.append(phoneNumWithoutCountryCode);
	_buf.append(',');
	_buf.append("needVerify=");
	_buf.appendUint(needVerify);
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(countryCode);
	_msg.composeString(phoneNumWithoutCountryCode);
	_msg.composeBOOL(needVerify);
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(countryCode);
	_parser.parseStringP(phoneNumWithoutCountryCode);
	_parser.parseBOOL(needVerify);
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "countryCode"); size_t szCountryCode = strlen(_dummy);
	AtfValidator::validateInt(_descr, "countryCode", szCountryCode, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "phoneNumWithoutCountryCode"); size_t szPhoneNumWithoutCountryCode = strlen(_dummy);
	AtfValidator::validateInt(_descr, "phoneNumWithoutCountryCode", szPhoneNumWithoutCountryCode, _checker, __FILE__, __LINE__);
	bool needVerify; _parser.parseBOOL(needVerify);
	AtfValidator::validateInt(_descr, "needVerify", needVerify, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS(Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS&& _o)
	: status(std::move(_o.status))
	, statusStr(std::move(_o.statusStr))
{
}

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS& LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS::operator=(Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS&& _o)
{
	if(this != &_o)
	{
		status = std::move(_o.status);
		statusStr = std::move(_o.statusStr);
	}
	return *this;
}

#endif

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS::clear()
{
	status = 0;
	statusStr.clear();
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS::equals(const Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS& _o) const
{
	return status == _o.status &&
		statusStr.equals(_o.statusStr);
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS).append(")");
	_buf.append(',');
	_buf.append("status=");
	_buf.appendUint(status);
	_buf.append(',');
	_buf.append("statusStr=");
	_buf.append(statusStr);
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(status);
	_msg.composeString(statusStr);
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(status);
	_parser.parseStringP(statusStr);
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	UINT32 status; _parser.parseUINT32(status);
	AtfValidator::validateInt(_descr, "status", status, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "statusStr"); size_t szStatusStr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "statusStr", szStatusStr, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT::Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT()
{
	clear();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT::clear()
{
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT::equals(const Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT& _o) const
{
	return true;
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT).append(")");
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT::composeMsg(CommMsgBody& _msg) const
{
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    ThrowableElement
//=================================================================

LobbyEtcClient::player::ThrowableElement::ThrowableElement()
{
	clear();
}

void LobbyEtcClient::player::ThrowableElement::clear()
{
	throwableTypeId = 0;
	isEnabled = 0;
}

bool LobbyEtcClient::player::ThrowableElement::equals(const ThrowableElement& _o) const
{
	return throwableTypeId == _o.throwableTypeId &&
		isEnabled == _o.isEnabled;
}

const char *LobbyEtcClient::player::ThrowableElement::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("throwableTypeId=");
	_buf.appendUint(throwableTypeId);
	_buf.append(',');
	_buf.append("isEnabled=");
	_buf.appendUint(isEnabled);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::player::ThrowableElement::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(ThrowableElement())) // not empty
	{
		_body.composeUINT32(throwableTypeId);
		_body.composeUINT32(isEnabled);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::player::ThrowableElement::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(throwableTypeId);
	_parser0.parseUINT32(isEnabled);
}

/*static*/ void LobbyEtcClient::player::ThrowableElement::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	UINT32 throwableTypeId; _parser0.parseUINT32(throwableTypeId);
	AtfValidator::validateInt(_descr, "throwableTypeId", throwableTypeId, _checker, __FILE__, __LINE__);
	UINT32 isEnabled; _parser0.parseUINT32(isEnabled);
	AtfValidator::validateInt(_descr, "isEnabled", isEnabled, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    UnsolicitedNotification_Throwables
//=================================================================

LobbyEtcClient::player::UnsolicitedNotification_Throwables::UnsolicitedNotification_Throwables()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::player::UnsolicitedNotification_Throwables::UnsolicitedNotification_Throwables(UnsolicitedNotification_Throwables&& _o)
	: throwableEnablements(std::move(_o.throwableEnablements))
	, coolDownInterval(std::move(_o.coolDownInterval))
{
}

LobbyEtcClient::player::UnsolicitedNotification_Throwables& LobbyEtcClient::player::UnsolicitedNotification_Throwables::operator=(UnsolicitedNotification_Throwables&& _o)
{
	if(this != &_o)
	{
		throwableEnablements = std::move(_o.throwableEnablements);
		coolDownInterval = std::move(_o.coolDownInterval);
	}
	return *this;
}

#endif

void LobbyEtcClient::player::UnsolicitedNotification_Throwables::clear()
{
	throwableEnablements.clear();
	coolDownInterval = 0;
}

bool LobbyEtcClient::player::UnsolicitedNotification_Throwables::equals(const UnsolicitedNotification_Throwables& _o) const
{
	return throwableEnablements.equals(_o.throwableEnablements) &&
		coolDownInterval == _o.coolDownInterval;
}

const char *LobbyEtcClient::player::UnsolicitedNotification_Throwables::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("throwableEnablements=");
	throwableEnablements.toTraceString(_buf);
	_buf.append(',');
	_buf.append("coolDownInterval=");
	_buf.appendInt(coolDownInterval);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::player::UnsolicitedNotification_Throwables::composeMsg(CommMsgBody& _msg) const
{
	throwableEnablements.composeMsg(_msg);
	_msg.composeINT32(coolDownInterval);
}

void LobbyEtcClient::player::UnsolicitedNotification_Throwables::parseMsg(CommMsgParser& _parser)
{
	throwableEnablements.parseMsg(_parser);
	_parser.parseINT32(coolDownInterval);
}

/*static*/ void LobbyEtcClient::player::UnsolicitedNotification_Throwables::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	PString _descbuf;
	int szThrowableEnablements = ThinAtf::LAtfVector< ThrowableElement, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("throwableEnablements"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "throwableEnablements", szThrowableEnablements, _checker, __FILE__, __LINE__);
	INT32 coolDownInterval; _parser.parseINT32(coolDownInterval);
	AtfValidator::validateInt(_descr, "coolDownInterval", coolDownInterval, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    UnsolicitedNotificationType_WebNotification
//=================================================================

LobbyEtcClient::player::UnsolicitedNotificationType_WebNotification::UnsolicitedNotificationType_WebNotification()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::player::UnsolicitedNotificationType_WebNotification::UnsolicitedNotificationType_WebNotification(UnsolicitedNotificationType_WebNotification&& _o)
	: payload(std::move(_o.payload))
{
}

LobbyEtcClient::player::UnsolicitedNotificationType_WebNotification& LobbyEtcClient::player::UnsolicitedNotificationType_WebNotification::operator=(UnsolicitedNotificationType_WebNotification&& _o)
{
	if(this != &_o)
	{
		payload = std::move(_o.payload);
	}
	return *this;
}

#endif

void LobbyEtcClient::player::UnsolicitedNotificationType_WebNotification::clear()
{
	payload.clear();
}

bool LobbyEtcClient::player::UnsolicitedNotificationType_WebNotification::equals(const UnsolicitedNotificationType_WebNotification& _o) const
{
	return payload.equals(_o.payload);
}

const char *LobbyEtcClient::player::UnsolicitedNotificationType_WebNotification::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("payload=");
	_buf.append(payload);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::player::UnsolicitedNotificationType_WebNotification::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(payload);
}

void LobbyEtcClient::player::UnsolicitedNotificationType_WebNotification::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(payload);
}

/*static*/ void LobbyEtcClient::player::UnsolicitedNotificationType_WebNotification::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "payload"); size_t szPayload = strlen(_dummy);
	AtfValidator::validateInt(_descr, "payload", szPayload, _checker, __FILE__, __LINE__);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION(Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION&& _o)
	: notifType(std::move(_o.notifType))
	, notifMsg(std::move(_o.notifMsg))
{
}

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION& LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION::operator=(Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION&& _o)
{
	if(this != &_o)
	{
		notifType = std::move(_o.notifType);
		notifMsg = std::move(_o.notifMsg);
	}
	return *this;
}

#endif

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION::clear()
{
	notifType = 0;
	notifMsg.clear();
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION::equals(const Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION& _o) const
{
	return notifType == _o.notifType &&
		notifMsg.equals(_o.notifMsg);
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION).append(")");
	_buf.append(',');
	_buf.append("notifType=");
	_buf.appendUint(notifType);
	_buf.append(',');
	_buf.append("notifMsg=");
	notifMsg.toTraceString(_buf);
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(notifType);
	_msg.composeMsgBody(notifMsg);
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(notifType);
	_parser.parseMsgBody(notifMsg);
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 notifType; _parser.parseUINT32(notifType);
	AtfValidator::validateInt(_descr, "notifType", notifType, _checker, __FILE__, __LINE__);
	size_t szNotifMsg; _parser.skipMsgBody(szNotifMsg);  /*notifMsg*/
	AtfValidator::validateInt(_descr, "notifMsg", szNotifMsg, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT(Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT&& _o)
	: startDate(std::move(_o.startDate))
	, endDate(std::move(_o.endDate))
	, reportFormat(std::move(_o.reportFormat))
	, password(std::move(_o.password))
	, isHtmlForClient(std::move(_o.isHtmlForClient))
{
}

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT& LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT::operator=(Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT&& _o)
{
	if(this != &_o)
	{
		startDate = std::move(_o.startDate);
		endDate = std::move(_o.endDate);
		reportFormat = std::move(_o.reportFormat);
		password = std::move(_o.password);
		isHtmlForClient = std::move(_o.isHtmlForClient);
	}
	return *this;
}

#endif

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT::clear()
{
	startDate.setNull();
	endDate.setNull();
	reportFormat = 0;
	password.clear();
	isHtmlForClient = false;
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT::equals(const Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT& _o) const
{
	return startDate.equals(_o.startDate) &&
		endDate.equals(_o.endDate) &&
		reportFormat == _o.reportFormat &&
		password.equals(_o.password) &&
		isHtmlForClient == _o.isHtmlForClient;
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT).append(")");
	_buf.append(',');
	_buf.append("startDate=");
	ThinAtf::AtfTempl<SrvDate>::ToTraceString(_buf, startDate);
	_buf.append(',');
	_buf.append("endDate=");
	ThinAtf::AtfTempl<SrvDate>::ToTraceString(_buf, endDate);
	_buf.append(',');
	_buf.append("reportFormat=");
	_buf.appendUint(reportFormat);
	_buf.append(',');
	_buf.append("password=");
	_buf.append("...");
	_buf.append(',');
	_buf.append("isHtmlForClient=");
	_buf.appendUint(isHtmlForClient);
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeSrvDate(startDate);
	_msg.composeSrvDate(endDate);
	_msg.composeBYTE(reportFormat);
	_msg.composeString(password);
	_msg.composeBOOL(isHtmlForClient);
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseSrvDate(startDate);
	_parser.parseSrvDate(endDate);
	_parser.parseBYTE(reportFormat);
	_parser.parseStringP(password);
	_parser.parseBOOL(isHtmlForClient);
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	SrvDate startDate; _parser.parseSrvDate(startDate);
	AtfValidator::validateSrvDateTime(_descr, "startDate", startDate, _checker, __FILE__, __LINE__);
	SrvDate endDate; _parser.parseSrvDate(endDate);
	AtfValidator::validateSrvDateTime(_descr, "endDate", endDate, _checker, __FILE__, __LINE__);
	BYTE reportFormat; _parser.parseBYTE(reportFormat);
	AtfValidator::validateIntMax(_descr, "reportFormat", reportFormat, 100, _checker, __FILE__, __LINE__);
	_parser.parseStringN(_dummy, 0, "password"); size_t szPassword = strlen(_dummy);
	AtfValidator::validateIntMax(_descr, "password", szPassword, 1000, _checker, __FILE__, __LINE__);
	bool isHtmlForClient; _parser.parseBOOL(isHtmlForClient);
	AtfValidator::validateInt(_descr, "isHtmlForClient", isHtmlForClient, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY(Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
{
}

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY& LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY::operator=(Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
	}
	return *this;
}

#endif

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY::clear()
{
	errCode = 0;
	errString.clear();
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY::equals(const Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode != 0 )
	{
		_msg.composeString(errString);
	}
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode != 0 )
	{
		_parser.parseStringP(errString);
	}
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION
//=================================================================

LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION::Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION()
{
	clear();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION::clear()
{
	boldChatType = 0;
}

bool LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION::equals(const Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION& _o) const
{
	return boldChatType == _o.boldChatType;
}

const char *LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION).append(")");
	_buf.append(',');
	_buf.append("boldChatType=");
	_buf.appendUint(boldChatType);
	return _buf.c_str();
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBYTE(boldChatType);
}

void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBYTE(boldChatType);
}

/*static*/ void LobbyEtcClient::player::Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	BYTE boldChatType; _parser.parseBYTE(boldChatType);
	AtfValidator::validateInt(_descr, "boldChatType", boldChatType, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    Attributes
//=================================================================

LobbyEtcClient::MiniGameTickets::Attributes::Attributes()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::Attributes::Attributes(Attributes&& _o)
	: gameTicketName(std::move(_o.gameTicketName))
	, minigameId(std::move(_o.minigameId))
	, expiration(std::move(_o.expiration))
	, userPreferredTimeZone(std::move(_o.userPreferredTimeZone))
	, playsAvailable(std::move(_o.playsAvailable))
	, minigameType(std::move(_o.minigameType))
	, ticketTypeId(std::move(_o.ticketTypeId))
	, ticketId(std::move(_o.ticketId))
{
}

LobbyEtcClient::MiniGameTickets::Attributes& LobbyEtcClient::MiniGameTickets::Attributes::operator=(Attributes&& _o)
{
	if(this != &_o)
	{
		gameTicketName = std::move(_o.gameTicketName);
		minigameId = std::move(_o.minigameId);
		expiration = std::move(_o.expiration);
		userPreferredTimeZone = std::move(_o.userPreferredTimeZone);
		playsAvailable = std::move(_o.playsAvailable);
		minigameType = std::move(_o.minigameType);
		ticketTypeId = std::move(_o.ticketTypeId);
		ticketId = std::move(_o.ticketId);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::Attributes::clear()
{
	gameTicketName.clear();
	minigameId = 0;
	expiration.setNull();
	userPreferredTimeZone = 0;
	playsAvailable = 0;
	minigameType = 0;
	ticketTypeId = 0;
	ticketId = 0;
}

bool LobbyEtcClient::MiniGameTickets::Attributes::equals(const Attributes& _o) const
{
	return gameTicketName.equals(_o.gameTicketName) &&
		minigameId == _o.minigameId &&
		expiration.equals(_o.expiration) &&
		userPreferredTimeZone == _o.userPreferredTimeZone &&
		playsAvailable == _o.playsAvailable &&
		minigameType == _o.minigameType &&
		ticketTypeId == _o.ticketTypeId &&
		ticketId == _o.ticketId;
}

const char *LobbyEtcClient::MiniGameTickets::Attributes::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("gameTicketName=");
	_buf.append(gameTicketName);
	_buf.append(',');
	_buf.append("minigameId=");
	_buf.appendUint(minigameId);
	_buf.append(',');
	_buf.append("expiration=");
	ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, expiration);
	_buf.append(',');
	_buf.append("userPreferredTimeZone=");
	_buf.appendInt(userPreferredTimeZone);
	_buf.append(',');
	_buf.append("playsAvailable=");
	_buf.appendInt(playsAvailable);
	_buf.append(',');
	_buf.append("minigameType=");
	_buf.appendUint(minigameType);
	_buf.append(',');
	_buf.append("ticketTypeId=");
	_buf.appendUint(ticketTypeId);
	_buf.append(',');
	_buf.append("ticketId=");
	_buf.appendUint64(ticketId);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::Attributes::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(Attributes())) // not empty
	{
		_body.composeString(gameTicketName);
		_body.composeUINT32(minigameId);
		_body.composeSrvTime(expiration);
		_body.composeINT32(userPreferredTimeZone);
		_body.composeINT32(playsAvailable);
		_body.composeUINT32(minigameType);
		_body.composeUINT32(ticketTypeId);
		_body.composeUINT64(ticketId);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::Attributes::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(gameTicketName);
	_parser0.parseUINT32(minigameId);
	_parser0.parseSrvTime(expiration);
	_parser0.parseINT32(userPreferredTimeZone);
	_parser0.parseINT32(playsAvailable);
	_parser0.parseUINT32(minigameType);
	_parser0.parseUINT32(ticketTypeId);
	_parser0.parseUINT64(ticketId);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::Attributes::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "gameTicketName"); size_t szGameTicketName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "gameTicketName", szGameTicketName, _checker, __FILE__, __LINE__);
	UINT32 minigameId; _parser0.parseUINT32(minigameId);
	AtfValidator::validateInt(_descr, "minigameId", minigameId, _checker, __FILE__, __LINE__);
	SrvTime expiration; _parser0.parseSrvTime(expiration);
	AtfValidator::validateSrvDateTime(_descr, "expiration", expiration, _checker, __FILE__, __LINE__);
	INT32 userPreferredTimeZone; _parser0.parseINT32(userPreferredTimeZone);
	AtfValidator::validateInt(_descr, "userPreferredTimeZone", userPreferredTimeZone, _checker, __FILE__, __LINE__);
	INT32 playsAvailable; _parser0.parseINT32(playsAvailable);
	AtfValidator::validateInt(_descr, "playsAvailable", playsAvailable, _checker, __FILE__, __LINE__);
	UINT32 minigameType; _parser0.parseUINT32(minigameType);
	AtfValidator::validateInt(_descr, "minigameType", minigameType, _checker, __FILE__, __LINE__);
	UINT32 ticketTypeId; _parser0.parseUINT32(ticketTypeId);
	AtfValidator::validateInt(_descr, "ticketTypeId", ticketTypeId, _checker, __FILE__, __LINE__);
	UINT64 ticketId; _parser0.parseUINT64(ticketId);
	AtfValidator::validateUint(_descr, "ticketId", ticketId, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    GameTicketNotifMsg
//=================================================================

LobbyEtcClient::MiniGameTickets::GameTicketNotifMsg::GameTicketNotifMsg()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::GameTicketNotifMsg::GameTicketNotifMsg(GameTicketNotifMsg&& _o)
	: type(std::move(_o.type))
	, description(std::move(_o.description))
	, moreInfo(std::move(_o.moreInfo))
	, headerImageURL(std::move(_o.headerImageURL))
	, attributes(std::move(_o.attributes))
{
}

LobbyEtcClient::MiniGameTickets::GameTicketNotifMsg& LobbyEtcClient::MiniGameTickets::GameTicketNotifMsg::operator=(GameTicketNotifMsg&& _o)
{
	if(this != &_o)
	{
		type = std::move(_o.type);
		description = std::move(_o.description);
		moreInfo = std::move(_o.moreInfo);
		headerImageURL = std::move(_o.headerImageURL);
		attributes = std::move(_o.attributes);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::GameTicketNotifMsg::clear()
{
	type = "MiniGameTicket";
	description.clear();
	moreInfo.clear();
	headerImageURL.clear();
	attributes.clear();
}

bool LobbyEtcClient::MiniGameTickets::GameTicketNotifMsg::equals(const GameTicketNotifMsg& _o) const
{
	return type.equals(_o.type) &&
		description.equals(_o.description) &&
		moreInfo.equals(_o.moreInfo) &&
		headerImageURL.equals(_o.headerImageURL) &&
		attributes.equals(_o.attributes);
}

const char *LobbyEtcClient::MiniGameTickets::GameTicketNotifMsg::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("type=");
	_buf.append(type);
	_buf.append(',');
	_buf.append("description=");
	_buf.append(description);
	_buf.append(',');
	_buf.append("moreInfo=");
	_buf.append(moreInfo);
	_buf.append(',');
	_buf.append("headerImageURL=");
	_buf.append(headerImageURL);
	_buf.append(',');
	_buf.append("attributes=");
	attributes.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::GameTicketNotifMsg::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(GameTicketNotifMsg())) // not empty
	{
		_body.composeString(type);
		_body.composeString(description);
		_body.composeString(moreInfo);
		_body.composeString(headerImageURL);
		attributes.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::GameTicketNotifMsg::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(type);
	_parser0.parseStringP(description);
	_parser0.parseStringP(moreInfo);
	_parser0.parseStringP(headerImageURL);
	attributes.parseMsg(_parser0);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::GameTicketNotifMsg::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "type"); size_t szType = strlen(_dummy);
	AtfValidator::validateInt(_descr, "type", szType, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "description"); size_t szDescription = strlen(_dummy);
	AtfValidator::validateInt(_descr, "description", szDescription, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "moreInfo"); size_t szMoreInfo = strlen(_dummy);
	AtfValidator::validateInt(_descr, "moreInfo", szMoreInfo, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "headerImageURL"); size_t szHeaderImageURL = strlen(_dummy);
	AtfValidator::validateInt(_descr, "headerImageURL", szHeaderImageURL, _checker, __FILE__, __LINE__);
	PString _descbuf;
	Attributes::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("attributes"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    GameTicketWithTypeAndMiniGameData
//=================================================================

LobbyEtcClient::MiniGameTickets::GameTicketWithTypeAndMiniGameData::GameTicketWithTypeAndMiniGameData()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::GameTicketWithTypeAndMiniGameData::GameTicketWithTypeAndMiniGameData(GameTicketWithTypeAndMiniGameData&& _o)
	: gameTicketId(std::move(_o.gameTicketId))
	, gameTicketTypeId(std::move(_o.gameTicketTypeId))
	, whenStarted(std::move(_o.whenStarted))
	, expiration(std::move(_o.expiration))
	, playsInitial(std::move(_o.playsInitial))
	, playsSpent(std::move(_o.playsSpent))
	, gameTicketBrandMask(std::move(_o.gameTicketBrandMask))
	, minigameId(std::move(_o.minigameId))
	, minigameType(std::move(_o.minigameType))
	, minigameClientDisplayName(std::move(_o.minigameClientDisplayName))
	, minigameClientDisplayInfo(std::move(_o.minigameClientDisplayInfo))
	, minigameBrandMask(std::move(_o.minigameBrandMask))
	, minigameSiteMask(std::move(_o.minigameSiteMask))
	, status(std::move(_o.status))
	, costFpp1(std::move(_o.costFpp1))
	, minigameSiteMaskEx(std::move(_o.minigameSiteMaskEx))
	, moreInfo(std::move(_o.moreInfo))
	, headerImageURL(std::move(_o.headerImageURL))
{
}

LobbyEtcClient::MiniGameTickets::GameTicketWithTypeAndMiniGameData& LobbyEtcClient::MiniGameTickets::GameTicketWithTypeAndMiniGameData::operator=(GameTicketWithTypeAndMiniGameData&& _o)
{
	if(this != &_o)
	{
		gameTicketId = std::move(_o.gameTicketId);
		gameTicketTypeId = std::move(_o.gameTicketTypeId);
		whenStarted = std::move(_o.whenStarted);
		expiration = std::move(_o.expiration);
		playsInitial = std::move(_o.playsInitial);
		playsSpent = std::move(_o.playsSpent);
		gameTicketBrandMask = std::move(_o.gameTicketBrandMask);
		minigameId = std::move(_o.minigameId);
		minigameType = std::move(_o.minigameType);
		minigameClientDisplayName = std::move(_o.minigameClientDisplayName);
		minigameClientDisplayInfo = std::move(_o.minigameClientDisplayInfo);
		minigameBrandMask = std::move(_o.minigameBrandMask);
		minigameSiteMask = std::move(_o.minigameSiteMask);
		status = std::move(_o.status);
		costFpp1 = std::move(_o.costFpp1);
		minigameSiteMaskEx = std::move(_o.minigameSiteMaskEx);
		moreInfo = std::move(_o.moreInfo);
		headerImageURL = std::move(_o.headerImageURL);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::GameTicketWithTypeAndMiniGameData::clear()
{
	gameTicketId = 0;
	gameTicketTypeId = 0;
	whenStarted.setNull();
	expiration.setNull();
	playsInitial = 0;
	playsSpent = 0;
	gameTicketBrandMask = 0;
	minigameId = 0;
	minigameType = 0;
	minigameClientDisplayName.clear();
	minigameClientDisplayInfo.clear();
	minigameBrandMask = 0;
	minigameSiteMask = 0;
	status = 0;
	costFpp1 = 0;
	minigameSiteMaskEx.clear();
	moreInfo.clear();
	headerImageURL.clear();
}

bool LobbyEtcClient::MiniGameTickets::GameTicketWithTypeAndMiniGameData::equals(const GameTicketWithTypeAndMiniGameData& _o) const
{
	return gameTicketId == _o.gameTicketId &&
		gameTicketTypeId == _o.gameTicketTypeId &&
		whenStarted.equals(_o.whenStarted) &&
		expiration.equals(_o.expiration) &&
		playsInitial == _o.playsInitial &&
		playsSpent == _o.playsSpent &&
		gameTicketBrandMask == _o.gameTicketBrandMask &&
		minigameId == _o.minigameId &&
		minigameType == _o.minigameType &&
		minigameClientDisplayName.equals(_o.minigameClientDisplayName) &&
		minigameClientDisplayInfo.equals(_o.minigameClientDisplayInfo) &&
		minigameBrandMask == _o.minigameBrandMask &&
		minigameSiteMask == _o.minigameSiteMask &&
		status == _o.status &&
		costFpp1 == _o.costFpp1 &&
		minigameSiteMaskEx.equals(_o.minigameSiteMaskEx) &&
		moreInfo.equals(_o.moreInfo) &&
		headerImageURL.equals(_o.headerImageURL);
}

const char *LobbyEtcClient::MiniGameTickets::GameTicketWithTypeAndMiniGameData::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("gameTicketId=");
	_buf.appendUint64(gameTicketId);
	_buf.append(',');
	_buf.append("gameTicketTypeId=");
	_buf.appendUint(gameTicketTypeId);
	_buf.append(',');
	_buf.append("whenStarted=");
	ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, whenStarted);
	_buf.append(',');
	_buf.append("expiration=");
	ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, expiration);
	_buf.append(',');
	_buf.append("playsInitial=");
	_buf.appendInt(playsInitial);
	_buf.append(',');
	_buf.append("playsSpent=");
	_buf.appendInt(playsSpent);
	_buf.append(',');
	_buf.append("gameTicketBrandMask=");
	_buf.appendUint(gameTicketBrandMask);
	_buf.append(',');
	_buf.append("minigameId=");
	_buf.appendUint(minigameId);
	_buf.append(',');
	_buf.append("minigameType=");
	_buf.appendUint(minigameType);
	_buf.append(',');
	_buf.append("minigameClientDisplayName=");
	_buf.append(minigameClientDisplayName);
	_buf.append(',');
	_buf.append("minigameClientDisplayInfo=");
	_buf.append(minigameClientDisplayInfo);
	_buf.append(',');
	_buf.append("minigameBrandMask=");
	_buf.appendUint(minigameBrandMask);
	_buf.append(',');
	_buf.append("minigameSiteMask=");
	_buf.appendUint(minigameSiteMask);
	_buf.append(',');
	_buf.append("status=");
	_buf.appendInt(status);
	_buf.append(',');
	_buf.append("costFpp1=");
	_buf.appendInt(costFpp1);
	_buf.append(',');
	_buf.append("minigameSiteMaskEx=");
	minigameSiteMaskEx.toTraceString(_buf);
	_buf.append(',');
	_buf.append("moreInfo=");
	_buf.append(moreInfo);
	_buf.append(',');
	_buf.append("headerImageURL=");
	_buf.append(headerImageURL);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::GameTicketWithTypeAndMiniGameData::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(GameTicketWithTypeAndMiniGameData())) // not empty
	{
		_body.composeUINT64(gameTicketId);
		_body.composeUINT32(gameTicketTypeId);
		_body.composeSrvTime(whenStarted);
		_body.composeSrvTime(expiration);
		_body.composeINT32(playsInitial);
		_body.composeINT32(playsSpent);
		_body.composeUINT32(gameTicketBrandMask);
		_body.composeUINT32(minigameId);
		_body.composeUINT32(minigameType);
		_body.composeString(minigameClientDisplayName);
		_body.composeString(minigameClientDisplayInfo);
		_body.composeUINT32(minigameBrandMask);
		_body.composeUINT32(minigameSiteMask);
		_body.composeINT32(status);
		_body.composeINT32(costFpp1);
		minigameSiteMaskEx.composeMsg(_body);
		_body.composeString(moreInfo);
		_body.composeString(headerImageURL);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::GameTicketWithTypeAndMiniGameData::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(gameTicketId);
	_parser0.parseUINT32(gameTicketTypeId);
	_parser0.parseSrvTime(whenStarted);
	_parser0.parseSrvTime(expiration);
	_parser0.parseINT32(playsInitial);
	_parser0.parseINT32(playsSpent);
	_parser0.parseUINT32(gameTicketBrandMask);
	_parser0.parseUINT32(minigameId);
	_parser0.parseUINT32(minigameType);
	_parser0.parseStringP(minigameClientDisplayName);
	_parser0.parseStringP(minigameClientDisplayInfo);
	_parser0.parseUINT32(minigameBrandMask);
	_parser0.parseUINT32(minigameSiteMask);
	if(_parser0.parseEnded()) return;
	_parser0.parseINT32(status);
	if(_parser0.parseEnded()) return;
	_parser0.parseINT32(costFpp1);
	if(_parser0.parseEnded()) return;
	minigameSiteMaskEx.parseMsg(_parser0);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringP(moreInfo);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringP(headerImageURL);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::GameTicketWithTypeAndMiniGameData::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	UINT64 gameTicketId; _parser0.parseUINT64(gameTicketId);
	AtfValidator::validateUint(_descr, "gameTicketId", gameTicketId, _checker, __FILE__, __LINE__);
	UINT32 gameTicketTypeId; _parser0.parseUINT32(gameTicketTypeId);
	AtfValidator::validateInt(_descr, "gameTicketTypeId", gameTicketTypeId, _checker, __FILE__, __LINE__);
	SrvTime whenStarted; _parser0.parseSrvTime(whenStarted);
	AtfValidator::validateSrvDateTime(_descr, "whenStarted", whenStarted, _checker, __FILE__, __LINE__);
	SrvTime expiration; _parser0.parseSrvTime(expiration);
	AtfValidator::validateSrvDateTime(_descr, "expiration", expiration, _checker, __FILE__, __LINE__);
	INT32 playsInitial; _parser0.parseINT32(playsInitial);
	AtfValidator::validateInt(_descr, "playsInitial", playsInitial, _checker, __FILE__, __LINE__);
	INT32 playsSpent; _parser0.parseINT32(playsSpent);
	AtfValidator::validateInt(_descr, "playsSpent", playsSpent, _checker, __FILE__, __LINE__);
	UINT32 gameTicketBrandMask; _parser0.parseUINT32(gameTicketBrandMask);
	AtfValidator::validateInt(_descr, "gameTicketBrandMask", gameTicketBrandMask, _checker, __FILE__, __LINE__);
	UINT32 minigameId; _parser0.parseUINT32(minigameId);
	AtfValidator::validateInt(_descr, "minigameId", minigameId, _checker, __FILE__, __LINE__);
	UINT32 minigameType; _parser0.parseUINT32(minigameType);
	AtfValidator::validateInt(_descr, "minigameType", minigameType, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "minigameClientDisplayName"); size_t szMinigameClientDisplayName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "minigameClientDisplayName", szMinigameClientDisplayName, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "minigameClientDisplayInfo"); size_t szMinigameClientDisplayInfo = strlen(_dummy);
	AtfValidator::validateInt(_descr, "minigameClientDisplayInfo", szMinigameClientDisplayInfo, _checker, __FILE__, __LINE__);
	UINT32 minigameBrandMask; _parser0.parseUINT32(minigameBrandMask);
	AtfValidator::validateInt(_descr, "minigameBrandMask", minigameBrandMask, _checker, __FILE__, __LINE__);
	UINT32 minigameSiteMask; _parser0.parseUINT32(minigameSiteMask);
	AtfValidator::validateInt(_descr, "minigameSiteMask", minigameSiteMask, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	INT32 status; _parser0.parseINT32(status);
	AtfValidator::validateInt(_descr, "status", status, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	INT32 costFpp1; _parser0.parseINT32(costFpp1);
	AtfValidator::validateInt(_descr, "costFpp1", costFpp1, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	PString _descbuf;
	PSiteMask::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("minigameSiteMaskEx"), _fieldsWithUnparsedContent);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringN(_dummy, 0, "moreInfo"); size_t szMoreInfo = strlen(_dummy);
	AtfValidator::validateInt(_descr, "moreInfo", szMoreInfo, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringN(_dummy, 0, "headerImageURL"); size_t szHeaderImageURL = strlen(_dummy);
	AtfValidator::validateInt(_descr, "headerImageURL", szHeaderImageURL, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE
//=================================================================

LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE()
{
	clear();
}

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE::clear()
{
	requestId = 0;
}

bool LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE::equals(const Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE& _o) const
{
	return requestId == _o.requestId;
}

const char *LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_GET_TICKETS_WITH_TYPE).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.appendInt64(requestId);
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT64(requestId);
}

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT64(requestId);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_GET_TICKETS_WITH_TYPE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	INT64 requestId; _parser.parseINT64(requestId);
	AtfValidator::validateInt(_descr, "requestId", requestId, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY
//=================================================================

LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY(Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY&& _o)
	: requestId(std::move(_o.requestId))
	, errCode(std::move(_o.errCode))
	, errStr(std::move(_o.errStr))
	, ticketsWithMinigames(std::move(_o.ticketsWithMinigames))
{
}

LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY& LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY::operator=(Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		errCode = std::move(_o.errCode);
		errStr = std::move(_o.errStr);
		ticketsWithMinigames = std::move(_o.ticketsWithMinigames);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY::clear()
{
	requestId = 0;
	errCode = 0;
	errStr.clear();
	ticketsWithMinigames.clear();
}

bool LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY::equals(const Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY& _o) const
{
	return requestId == _o.requestId &&
		errCode == _o.errCode &&
		errStr.equals(_o.errStr) &&
		ticketsWithMinigames.equals(_o.ticketsWithMinigames);
}

const char *LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.appendInt64(requestId);
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode )
	{
		_buf.append(',');
		_buf.append("errStr=");
		_buf.append(errStr);
	}
	else
	{
		_buf.append(',');
		_buf.append("ticketsWithMinigames=");
		ticketsWithMinigames.toTraceString(_buf);
	}
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT64(requestId);
	_msg.composeINT16(errCode);
	if( errCode )
	{
		_msg.composeString(errStr);
	}
	else
	{
		ticketsWithMinigames.composeMsg(_msg);
	}
}

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT64(requestId);
	_parser.parseINT16(errCode);
	if( errCode )
	{
		_parser.parseStringP(errStr);
	}
	else
	{
		ticketsWithMinigames.parseMsg(_parser);
	}
}

/*static*/ void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	INT64 requestId; _parser.parseINT64(requestId);
	AtfValidator::validateInt(_descr, "requestId", requestId, _checker, __FILE__, __LINE__);
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode )
	{
		_parser.parseStringN(_dummy, 0, "errStr"); size_t szErrStr = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errStr", szErrStr, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szTicketsWithMinigames = ThinAtf::LAtfVector< GameTicketWithTypeAndMiniGameData , 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("ticketsWithMinigames"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "ticketsWithMinigames", szTicketsWithMinigames, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    Prize
//=================================================================

// @Override
LobbyEtcClient::MiniGameTickets::Prize::Prize(const PString& imageURL_, const PString& prizeName_, const INT32& prizeType_,  const PString& launchURL_)
{
	imageURL = imageURL_;		
	prizeName = prizeName_;		
	prizeType = prizeType_;	
	launchURL = launchURL_;		
}

LobbyEtcClient::MiniGameTickets::Prize::Prize()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::Prize::Prize(Prize&& _o)
	: imageURL(std::move(_o.imageURL))
	, prizeName(std::move(_o.prizeName))
	, prizeType(std::move(_o.prizeType))
	, launchURL(std::move(_o.launchURL))
{
}

LobbyEtcClient::MiniGameTickets::Prize& LobbyEtcClient::MiniGameTickets::Prize::operator=(Prize&& _o)
{
	if(this != &_o)
	{
		imageURL = std::move(_o.imageURL);
		prizeName = std::move(_o.prizeName);
		prizeType = std::move(_o.prizeType);
		launchURL = std::move(_o.launchURL);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::Prize::clear()
{
	imageURL.clear();
	prizeName.clear();
	prizeType = 0;
	launchURL.clear();
}

bool LobbyEtcClient::MiniGameTickets::Prize::equals(const Prize& _o) const
{
	return imageURL.equals(_o.imageURL) &&
		prizeName.equals(_o.prizeName) &&
		prizeType == _o.prizeType &&
		launchURL.equals(_o.launchURL);
}

const char *LobbyEtcClient::MiniGameTickets::Prize::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("imageURL=");
	_buf.append(imageURL);
	_buf.append(',');
	_buf.append("prizeName=");
	_buf.append(prizeName);
	_buf.append(',');
	_buf.append("prizeType=");
	_buf.appendInt(prizeType);
	_buf.append(',');
	_buf.append("launchURL=");
	_buf.append(launchURL);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::Prize::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(Prize())) // not empty
	{
		_body.composeString(imageURL);
		_body.composeString(prizeName);
		_body.composeINT32(prizeType);
		_body.composeString(launchURL);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::Prize::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(imageURL);
	_parser0.parseStringP(prizeName);
	_parser0.parseINT32(prizeType);
	_parser0.parseStringP(launchURL);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::Prize::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "imageURL"); size_t szImageURL = strlen(_dummy);
	AtfValidator::validateInt(_descr, "imageURL", szImageURL, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "prizeName"); size_t szPrizeName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "prizeName", szPrizeName, _checker, __FILE__, __LINE__);
	INT32 prizeType; _parser0.parseINT32(prizeType);
	AtfValidator::validateInt(_descr, "prizeType", prizeType, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "launchURL"); size_t szLaunchURL = strlen(_dummy);
	AtfValidator::validateInt(_descr, "launchURL", szLaunchURL, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    Winner
//=================================================================

// @Override
LobbyEtcClient::MiniGameTickets::Winner::Winner(const PString& prizeTitle_, const PString& playerId_)
{
	prizeTitle = prizeTitle_;		
	playerId = playerId_;
}

LobbyEtcClient::MiniGameTickets::Winner::Winner()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::Winner::Winner(Winner&& _o)
	: prizeTitle(std::move(_o.prizeTitle))
	, playerId(std::move(_o.playerId))
{
}

LobbyEtcClient::MiniGameTickets::Winner& LobbyEtcClient::MiniGameTickets::Winner::operator=(Winner&& _o)
{
	if(this != &_o)
	{
		prizeTitle = std::move(_o.prizeTitle);
		playerId = std::move(_o.playerId);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::Winner::clear()
{
	prizeTitle.clear();
	playerId.clear();
}

bool LobbyEtcClient::MiniGameTickets::Winner::equals(const Winner& _o) const
{
	return prizeTitle.equals(_o.prizeTitle) &&
		playerId.equals(_o.playerId);
}

const char *LobbyEtcClient::MiniGameTickets::Winner::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("prizeTitle=");
	_buf.append(prizeTitle);
	_buf.append(',');
	_buf.append("playerId=");
	_buf.append(playerId);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::Winner::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(Winner())) // not empty
	{
		_body.composeString(prizeTitle);
		_body.composeString(playerId);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::Winner::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(prizeTitle);
	_parser0.parseStringP(playerId);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::Winner::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "prizeTitle"); size_t szPrizeTitle = strlen(_dummy);
	AtfValidator::validateInt(_descr, "prizeTitle", szPrizeTitle, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "playerId"); size_t szPlayerId = strlen(_dummy);
	AtfValidator::validateInt(_descr, "playerId", szPlayerId, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    FixedPrizeWonAttributes
//=================================================================

LobbyEtcClient::MiniGameTickets::FixedPrizeWonAttributes::FixedPrizeWonAttributes()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::FixedPrizeWonAttributes::FixedPrizeWonAttributes(FixedPrizeWonAttributes&& _o)
	: numPrizes(std::move(_o.numPrizes))
	, numWinners(std::move(_o.numWinners))
	, draw(std::move(_o.draw))
	, userPreferredTimeZone(std::move(_o.userPreferredTimeZone))
	, entryId(std::move(_o.entryId))
	, drawId(std::move(_o.drawId))
	, prizes(std::move(_o.prizes))
	, winners(std::move(_o.winners))
{
}

LobbyEtcClient::MiniGameTickets::FixedPrizeWonAttributes& LobbyEtcClient::MiniGameTickets::FixedPrizeWonAttributes::operator=(FixedPrizeWonAttributes&& _o)
{
	if(this != &_o)
	{
		numPrizes = std::move(_o.numPrizes);
		numWinners = std::move(_o.numWinners);
		draw = std::move(_o.draw);
		userPreferredTimeZone = std::move(_o.userPreferredTimeZone);
		entryId = std::move(_o.entryId);
		drawId = std::move(_o.drawId);
		prizes = std::move(_o.prizes);
		winners = std::move(_o.winners);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::FixedPrizeWonAttributes::clear()
{
	numPrizes = 0;
	numWinners = 0;
	draw.setNull();
	userPreferredTimeZone = 0;
	entryId = 0;
	drawId = 0;
	prizes.clear();
	winners.clear();
}

bool LobbyEtcClient::MiniGameTickets::FixedPrizeWonAttributes::equals(const FixedPrizeWonAttributes& _o) const
{
	return numPrizes == _o.numPrizes &&
		numWinners == _o.numWinners &&
		draw.equals(_o.draw) &&
		userPreferredTimeZone == _o.userPreferredTimeZone &&
		entryId == _o.entryId &&
		drawId == _o.drawId &&
		prizes.equals(_o.prizes) &&
		winners.equals(_o.winners);
}

const char *LobbyEtcClient::MiniGameTickets::FixedPrizeWonAttributes::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("numPrizes=");
	_buf.appendInt(numPrizes);
	_buf.append(',');
	_buf.append("numWinners=");
	_buf.appendInt(numWinners);
	_buf.append(',');
	_buf.append("draw=");
	ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, draw);
	_buf.append(',');
	_buf.append("userPreferredTimeZone=");
	_buf.appendInt(userPreferredTimeZone);
	_buf.append(',');
	_buf.append("entryId=");
	_buf.appendUint(entryId);
	_buf.append(',');
	_buf.append("drawId=");
	_buf.appendUint(drawId);
	_buf.append(',');
	_buf.append("prizes=");
	prizes.toTraceString(_buf);
	_buf.append(',');
	_buf.append("winners=");
	winners.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeWonAttributes::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(FixedPrizeWonAttributes())) // not empty
	{
		_body.composeINT32(numPrizes);
		_body.composeINT32(numWinners);
		_body.composeSrvTime(draw);
		_body.composeINT32(userPreferredTimeZone);
		_body.composeUINT32(entryId);
		_body.composeUINT32(drawId);
		prizes.composeMsg(_body);
		winners.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeWonAttributes::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(numPrizes);
	_parser0.parseINT32(numWinners);
	_parser0.parseSrvTime(draw);
	_parser0.parseINT32(userPreferredTimeZone);
	_parser0.parseUINT32(entryId);
	_parser0.parseUINT32(drawId);
	prizes.parseMsg(_parser0);
	winners.parseMsg(_parser0);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::FixedPrizeWonAttributes::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT32 numPrizes; _parser0.parseINT32(numPrizes);
	AtfValidator::validateInt(_descr, "numPrizes", numPrizes, _checker, __FILE__, __LINE__);
	INT32 numWinners; _parser0.parseINT32(numWinners);
	AtfValidator::validateInt(_descr, "numWinners", numWinners, _checker, __FILE__, __LINE__);
	SrvTime draw; _parser0.parseSrvTime(draw);
	AtfValidator::validateSrvDateTime(_descr, "draw", draw, _checker, __FILE__, __LINE__);
	INT32 userPreferredTimeZone; _parser0.parseINT32(userPreferredTimeZone);
	AtfValidator::validateInt(_descr, "userPreferredTimeZone", userPreferredTimeZone, _checker, __FILE__, __LINE__);
	UINT32 entryId; _parser0.parseUINT32(entryId);
	AtfValidator::validateInt(_descr, "entryId", entryId, _checker, __FILE__, __LINE__);
	UINT32 drawId; _parser0.parseUINT32(drawId);
	AtfValidator::validateInt(_descr, "drawId", drawId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szPrizes = ThinAtf::LAtfVector< Prize , 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("prizes"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "prizes", szPrizes, _checker, __FILE__, __LINE__);
	int szWinners = ThinAtf::LAtfVector< Winner , 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("winners"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "winners", szWinners, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    FixedPrizeLostAttributes
//=================================================================

LobbyEtcClient::MiniGameTickets::FixedPrizeLostAttributes::FixedPrizeLostAttributes()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::FixedPrizeLostAttributes::FixedPrizeLostAttributes(FixedPrizeLostAttributes&& _o)
	: numPrizes(std::move(_o.numPrizes))
	, numWinners(std::move(_o.numWinners))
	, draw(std::move(_o.draw))
	, userPreferredTimeZone(std::move(_o.userPreferredTimeZone))
	, entryId(std::move(_o.entryId))
	, drawId(std::move(_o.drawId))
	, winners(std::move(_o.winners))
{
}

LobbyEtcClient::MiniGameTickets::FixedPrizeLostAttributes& LobbyEtcClient::MiniGameTickets::FixedPrizeLostAttributes::operator=(FixedPrizeLostAttributes&& _o)
{
	if(this != &_o)
	{
		numPrizes = std::move(_o.numPrizes);
		numWinners = std::move(_o.numWinners);
		draw = std::move(_o.draw);
		userPreferredTimeZone = std::move(_o.userPreferredTimeZone);
		entryId = std::move(_o.entryId);
		drawId = std::move(_o.drawId);
		winners = std::move(_o.winners);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::FixedPrizeLostAttributes::clear()
{
	numPrizes = 0;
	numWinners = 0;
	draw.setNull();
	userPreferredTimeZone = 0;
	entryId = 0;
	drawId = 0;
	winners.clear();
}

bool LobbyEtcClient::MiniGameTickets::FixedPrizeLostAttributes::equals(const FixedPrizeLostAttributes& _o) const
{
	return numPrizes == _o.numPrizes &&
		numWinners == _o.numWinners &&
		draw.equals(_o.draw) &&
		userPreferredTimeZone == _o.userPreferredTimeZone &&
		entryId == _o.entryId &&
		drawId == _o.drawId &&
		winners.equals(_o.winners);
}

const char *LobbyEtcClient::MiniGameTickets::FixedPrizeLostAttributes::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("numPrizes=");
	_buf.appendInt(numPrizes);
	_buf.append(',');
	_buf.append("numWinners=");
	_buf.appendInt(numWinners);
	_buf.append(',');
	_buf.append("draw=");
	ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, draw);
	_buf.append(',');
	_buf.append("userPreferredTimeZone=");
	_buf.appendInt(userPreferredTimeZone);
	_buf.append(',');
	_buf.append("entryId=");
	_buf.appendUint(entryId);
	_buf.append(',');
	_buf.append("drawId=");
	_buf.appendUint(drawId);
	_buf.append(',');
	_buf.append("winners=");
	winners.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeLostAttributes::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(FixedPrizeLostAttributes())) // not empty
	{
		_body.composeINT32(numPrizes);
		_body.composeINT32(numWinners);
		_body.composeSrvTime(draw);
		_body.composeINT32(userPreferredTimeZone);
		_body.composeUINT32(entryId);
		_body.composeUINT32(drawId);
		winners.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeLostAttributes::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(numPrizes);
	_parser0.parseINT32(numWinners);
	_parser0.parseSrvTime(draw);
	_parser0.parseINT32(userPreferredTimeZone);
	_parser0.parseUINT32(entryId);
	_parser0.parseUINT32(drawId);
	winners.parseMsg(_parser0);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::FixedPrizeLostAttributes::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT32 numPrizes; _parser0.parseINT32(numPrizes);
	AtfValidator::validateInt(_descr, "numPrizes", numPrizes, _checker, __FILE__, __LINE__);
	INT32 numWinners; _parser0.parseINT32(numWinners);
	AtfValidator::validateInt(_descr, "numWinners", numWinners, _checker, __FILE__, __LINE__);
	SrvTime draw; _parser0.parseSrvTime(draw);
	AtfValidator::validateSrvDateTime(_descr, "draw", draw, _checker, __FILE__, __LINE__);
	INT32 userPreferredTimeZone; _parser0.parseINT32(userPreferredTimeZone);
	AtfValidator::validateInt(_descr, "userPreferredTimeZone", userPreferredTimeZone, _checker, __FILE__, __LINE__);
	UINT32 entryId; _parser0.parseUINT32(entryId);
	AtfValidator::validateInt(_descr, "entryId", entryId, _checker, __FILE__, __LINE__);
	UINT32 drawId; _parser0.parseUINT32(drawId);
	AtfValidator::validateInt(_descr, "drawId", drawId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szWinners = ThinAtf::LAtfVector< Winner , 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("winners"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "winners", szWinners, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    FixedPrizeTicketAttributes
//=================================================================

LobbyEtcClient::MiniGameTickets::FixedPrizeTicketAttributes::FixedPrizeTicketAttributes()
{
	clear();
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeTicketAttributes::clear()
{
	entries = 0;
	draw.setNull();
	userPreferredTimeZone = 0;
	entryId = 0;
	drawId = 0;
}

bool LobbyEtcClient::MiniGameTickets::FixedPrizeTicketAttributes::equals(const FixedPrizeTicketAttributes& _o) const
{
	return entries == _o.entries &&
		draw.equals(_o.draw) &&
		userPreferredTimeZone == _o.userPreferredTimeZone &&
		entryId == _o.entryId &&
		drawId == _o.drawId;
}

const char *LobbyEtcClient::MiniGameTickets::FixedPrizeTicketAttributes::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("entries=");
	_buf.appendInt(entries);
	_buf.append(',');
	_buf.append("draw=");
	ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, draw);
	_buf.append(',');
	_buf.append("userPreferredTimeZone=");
	_buf.appendInt(userPreferredTimeZone);
	_buf.append(',');
	_buf.append("entryId=");
	_buf.appendUint(entryId);
	_buf.append(',');
	_buf.append("drawId=");
	_buf.appendUint(drawId);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeTicketAttributes::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(FixedPrizeTicketAttributes())) // not empty
	{
		_body.composeINT32(entries);
		_body.composeSrvTime(draw);
		_body.composeINT32(userPreferredTimeZone);
		_body.composeUINT32(entryId);
		_body.composeUINT32(drawId);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeTicketAttributes::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(entries);
	_parser0.parseSrvTime(draw);
	_parser0.parseINT32(userPreferredTimeZone);
	_parser0.parseUINT32(entryId);
	_parser0.parseUINT32(drawId);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::FixedPrizeTicketAttributes::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	INT32 entries; _parser0.parseINT32(entries);
	AtfValidator::validateInt(_descr, "entries", entries, _checker, __FILE__, __LINE__);
	SrvTime draw; _parser0.parseSrvTime(draw);
	AtfValidator::validateSrvDateTime(_descr, "draw", draw, _checker, __FILE__, __LINE__);
	INT32 userPreferredTimeZone; _parser0.parseINT32(userPreferredTimeZone);
	AtfValidator::validateInt(_descr, "userPreferredTimeZone", userPreferredTimeZone, _checker, __FILE__, __LINE__);
	UINT32 entryId; _parser0.parseUINT32(entryId);
	AtfValidator::validateInt(_descr, "entryId", entryId, _checker, __FILE__, __LINE__);
	UINT32 drawId; _parser0.parseUINT32(drawId);
	AtfValidator::validateInt(_descr, "drawId", drawId, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    FixedPrizeTicketNotifMsg
//=================================================================

LobbyEtcClient::MiniGameTickets::FixedPrizeTicketNotifMsg::FixedPrizeTicketNotifMsg()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::FixedPrizeTicketNotifMsg::FixedPrizeTicketNotifMsg(FixedPrizeTicketNotifMsg&& _o)
	: type(std::move(_o.type))
	, state(std::move(_o.state))
	, title(std::move(_o.title))
	, description(std::move(_o.description))
	, moreInfo(std::move(_o.moreInfo))
	, headerImageURL(std::move(_o.headerImageURL))
	, attributes(std::move(_o.attributes))
{
}

LobbyEtcClient::MiniGameTickets::FixedPrizeTicketNotifMsg& LobbyEtcClient::MiniGameTickets::FixedPrizeTicketNotifMsg::operator=(FixedPrizeTicketNotifMsg&& _o)
{
	if(this != &_o)
	{
		type = std::move(_o.type);
		state = std::move(_o.state);
		title = std::move(_o.title);
		description = std::move(_o.description);
		moreInfo = std::move(_o.moreInfo);
		headerImageURL = std::move(_o.headerImageURL);
		attributes = std::move(_o.attributes);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::FixedPrizeTicketNotifMsg::clear()
{
	type = "FixedPrizeDraw";
	state = "issued";
	title.clear();
	description.clear();
	moreInfo.clear();
	headerImageURL.clear();
	attributes.clear();
}

bool LobbyEtcClient::MiniGameTickets::FixedPrizeTicketNotifMsg::equals(const FixedPrizeTicketNotifMsg& _o) const
{
	return type.equals(_o.type) &&
		state.equals(_o.state) &&
		title.equals(_o.title) &&
		description.equals(_o.description) &&
		moreInfo.equals(_o.moreInfo) &&
		headerImageURL.equals(_o.headerImageURL) &&
		attributes.equals(_o.attributes);
}

const char *LobbyEtcClient::MiniGameTickets::FixedPrizeTicketNotifMsg::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("type=");
	_buf.append(type);
	_buf.append(',');
	_buf.append("state=");
	_buf.append(state);
	_buf.append(',');
	_buf.append("title=");
	_buf.append(title);
	_buf.append(',');
	_buf.append("description=");
	_buf.append(description);
	_buf.append(',');
	_buf.append("moreInfo=");
	_buf.append(moreInfo);
	_buf.append(',');
	_buf.append("headerImageURL=");
	_buf.append(headerImageURL);
	_buf.append(',');
	_buf.append("attributes=");
	attributes.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeTicketNotifMsg::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(FixedPrizeTicketNotifMsg())) // not empty
	{
		_body.composeString(type);
		_body.composeString(state);
		_body.composeString(title);
		_body.composeString(description);
		_body.composeString(moreInfo);
		_body.composeString(headerImageURL);
		attributes.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeTicketNotifMsg::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(type);
	_parser0.parseStringP(state);
	_parser0.parseStringP(title);
	_parser0.parseStringP(description);
	_parser0.parseStringP(moreInfo);
	_parser0.parseStringP(headerImageURL);
	attributes.parseMsg(_parser0);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::FixedPrizeTicketNotifMsg::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "type"); size_t szType = strlen(_dummy);
	AtfValidator::validateInt(_descr, "type", szType, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "state"); size_t szState = strlen(_dummy);
	AtfValidator::validateInt(_descr, "state", szState, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "title"); size_t szTitle = strlen(_dummy);
	AtfValidator::validateInt(_descr, "title", szTitle, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "description"); size_t szDescription = strlen(_dummy);
	AtfValidator::validateInt(_descr, "description", szDescription, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "moreInfo"); size_t szMoreInfo = strlen(_dummy);
	AtfValidator::validateInt(_descr, "moreInfo", szMoreInfo, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "headerImageURL"); size_t szHeaderImageURL = strlen(_dummy);
	AtfValidator::validateInt(_descr, "headerImageURL", szHeaderImageURL, _checker, __FILE__, __LINE__);
	PString _descbuf;
	FixedPrizeTicketAttributes::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("attributes"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    FixedPrizeWonNotifMsg
//=================================================================

LobbyEtcClient::MiniGameTickets::FixedPrizeWonNotifMsg::FixedPrizeWonNotifMsg()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::FixedPrizeWonNotifMsg::FixedPrizeWonNotifMsg(FixedPrizeWonNotifMsg&& _o)
	: type(std::move(_o.type))
	, state(std::move(_o.state))
	, title(std::move(_o.title))
	, headerImageURL(std::move(_o.headerImageURL))
	, attributes(std::move(_o.attributes))
{
}

LobbyEtcClient::MiniGameTickets::FixedPrizeWonNotifMsg& LobbyEtcClient::MiniGameTickets::FixedPrizeWonNotifMsg::operator=(FixedPrizeWonNotifMsg&& _o)
{
	if(this != &_o)
	{
		type = std::move(_o.type);
		state = std::move(_o.state);
		title = std::move(_o.title);
		headerImageURL = std::move(_o.headerImageURL);
		attributes = std::move(_o.attributes);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::FixedPrizeWonNotifMsg::clear()
{
	type = "FixedPrizeDraw";
	state = "won";
	title.clear();
	headerImageURL.clear();
	attributes.clear();
}

bool LobbyEtcClient::MiniGameTickets::FixedPrizeWonNotifMsg::equals(const FixedPrizeWonNotifMsg& _o) const
{
	return type.equals(_o.type) &&
		state.equals(_o.state) &&
		title.equals(_o.title) &&
		headerImageURL.equals(_o.headerImageURL) &&
		attributes.equals(_o.attributes);
}

const char *LobbyEtcClient::MiniGameTickets::FixedPrizeWonNotifMsg::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("type=");
	_buf.append(type);
	_buf.append(',');
	_buf.append("state=");
	_buf.append(state);
	_buf.append(',');
	_buf.append("title=");
	_buf.append(title);
	_buf.append(',');
	_buf.append("headerImageURL=");
	_buf.append(headerImageURL);
	_buf.append(',');
	_buf.append("attributes=");
	attributes.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeWonNotifMsg::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(FixedPrizeWonNotifMsg())) // not empty
	{
		_body.composeString(type);
		_body.composeString(state);
		_body.composeString(title);
		_body.composeString(headerImageURL);
		attributes.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeWonNotifMsg::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(type);
	_parser0.parseStringP(state);
	_parser0.parseStringP(title);
	_parser0.parseStringP(headerImageURL);
	attributes.parseMsg(_parser0);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::FixedPrizeWonNotifMsg::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "type"); size_t szType = strlen(_dummy);
	AtfValidator::validateInt(_descr, "type", szType, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "state"); size_t szState = strlen(_dummy);
	AtfValidator::validateInt(_descr, "state", szState, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "title"); size_t szTitle = strlen(_dummy);
	AtfValidator::validateInt(_descr, "title", szTitle, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "headerImageURL"); size_t szHeaderImageURL = strlen(_dummy);
	AtfValidator::validateInt(_descr, "headerImageURL", szHeaderImageURL, _checker, __FILE__, __LINE__);
	PString _descbuf;
	FixedPrizeWonAttributes::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("attributes"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    FixedPrizeLostNotifMsg
//=================================================================

LobbyEtcClient::MiniGameTickets::FixedPrizeLostNotifMsg::FixedPrizeLostNotifMsg()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::FixedPrizeLostNotifMsg::FixedPrizeLostNotifMsg(FixedPrizeLostNotifMsg&& _o)
	: type(std::move(_o.type))
	, state(std::move(_o.state))
	, title(std::move(_o.title))
	, headerImageURL(std::move(_o.headerImageURL))
	, attributes(std::move(_o.attributes))
{
}

LobbyEtcClient::MiniGameTickets::FixedPrizeLostNotifMsg& LobbyEtcClient::MiniGameTickets::FixedPrizeLostNotifMsg::operator=(FixedPrizeLostNotifMsg&& _o)
{
	if(this != &_o)
	{
		type = std::move(_o.type);
		state = std::move(_o.state);
		title = std::move(_o.title);
		headerImageURL = std::move(_o.headerImageURL);
		attributes = std::move(_o.attributes);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::FixedPrizeLostNotifMsg::clear()
{
	type = "FixedPrizeDraw";
	state = "lost";
	title.clear();
	headerImageURL.clear();
	attributes.clear();
}

bool LobbyEtcClient::MiniGameTickets::FixedPrizeLostNotifMsg::equals(const FixedPrizeLostNotifMsg& _o) const
{
	return type.equals(_o.type) &&
		state.equals(_o.state) &&
		title.equals(_o.title) &&
		headerImageURL.equals(_o.headerImageURL) &&
		attributes.equals(_o.attributes);
}

const char *LobbyEtcClient::MiniGameTickets::FixedPrizeLostNotifMsg::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("type=");
	_buf.append(type);
	_buf.append(',');
	_buf.append("state=");
	_buf.append(state);
	_buf.append(',');
	_buf.append("title=");
	_buf.append(title);
	_buf.append(',');
	_buf.append("headerImageURL=");
	_buf.append(headerImageURL);
	_buf.append(',');
	_buf.append("attributes=");
	attributes.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeLostNotifMsg::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(FixedPrizeLostNotifMsg())) // not empty
	{
		_body.composeString(type);
		_body.composeString(state);
		_body.composeString(title);
		_body.composeString(headerImageURL);
		attributes.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::FixedPrizeLostNotifMsg::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(type);
	_parser0.parseStringP(state);
	_parser0.parseStringP(title);
	_parser0.parseStringP(headerImageURL);
	attributes.parseMsg(_parser0);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::FixedPrizeLostNotifMsg::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "type"); size_t szType = strlen(_dummy);
	AtfValidator::validateInt(_descr, "type", szType, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "state"); size_t szState = strlen(_dummy);
	AtfValidator::validateInt(_descr, "state", szState, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "title"); size_t szTitle = strlen(_dummy);
	AtfValidator::validateInt(_descr, "title", szTitle, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "headerImageURL"); size_t szHeaderImageURL = strlen(_dummy);
	AtfValidator::validateInt(_descr, "headerImageURL", szHeaderImageURL, _checker, __FILE__, __LINE__);
	PString _descbuf;
	FixedPrizeLostAttributes::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("attributes"), _fieldsWithUnparsedContent);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    MyStarsData
//=================================================================

LobbyEtcClient::MiniGameTickets::MyStarsData::MyStarsData()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::MyStarsData::MyStarsData(MyStarsData&& _o)
	: type(std::move(_o.type))
	, state(std::move(_o.state))
	, tickets(std::move(_o.tickets))
	, wins(std::move(_o.wins))
	, losts(std::move(_o.losts))
{
}

LobbyEtcClient::MiniGameTickets::MyStarsData& LobbyEtcClient::MiniGameTickets::MyStarsData::operator=(MyStarsData&& _o)
{
	if(this != &_o)
	{
		type = std::move(_o.type);
		state = std::move(_o.state);
		tickets = std::move(_o.tickets);
		wins = std::move(_o.wins);
		losts = std::move(_o.losts);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::MyStarsData::clear()
{
	type = "FixedPrizeDraw";
	state = "mystars";
	tickets.clear();
	wins.clear();
	losts.clear();
}

bool LobbyEtcClient::MiniGameTickets::MyStarsData::equals(const MyStarsData& _o) const
{
	return type.equals(_o.type) &&
		state.equals(_o.state) &&
		tickets.equals(_o.tickets) &&
		wins.equals(_o.wins) &&
		losts.equals(_o.losts);
}

const char *LobbyEtcClient::MiniGameTickets::MyStarsData::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("type=");
	_buf.append(type);
	_buf.append(',');
	_buf.append("state=");
	_buf.append(state);
	_buf.append(',');
	_buf.append("tickets=");
	tickets.toTraceString(_buf);
	_buf.append(',');
	_buf.append("wins=");
	wins.toTraceString(_buf);
	_buf.append(',');
	_buf.append("losts=");
	losts.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::MyStarsData::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(MyStarsData())) // not empty
	{
		_body.composeString(type);
		_body.composeString(state);
		tickets.composeMsg(_body);
		wins.composeMsg(_body);
		losts.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::MiniGameTickets::MyStarsData::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(type);
	_parser0.parseStringP(state);
	tickets.parseMsg(_parser0);
	wins.parseMsg(_parser0);
	losts.parseMsg(_parser0);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::MyStarsData::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "type"); size_t szType = strlen(_dummy);
	AtfValidator::validateInt(_descr, "type", szType, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "state"); size_t szState = strlen(_dummy);
	AtfValidator::validateInt(_descr, "state", szState, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szTickets = ThinAtf::LAtfVector< FixedPrizeTicketNotifMsg , 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("tickets"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "tickets", szTickets, _checker, __FILE__, __LINE__);
	int szWins = ThinAtf::LAtfVector< FixedPrizeWonNotifMsg , 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("wins"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "wins", szWins, _checker, __FILE__, __LINE__);
	int szLosts = ThinAtf::LAtfVector< FixedPrizeLostNotifMsg , 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("losts"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "losts", szLosts, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA
//=================================================================

LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA()
{
	clear();
}

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA::clear()
{
}

bool LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA::equals(const Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA& _o) const
{
	return true;
}

const char *LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA).append(")");
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA::composeMsg(CommMsgBody& _msg) const
{
}

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY
//=================================================================

LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY(Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY&& _o)
	: json(std::move(_o.json))
{
}

LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY& LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY::operator=(Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY&& _o)
{
	if(this != &_o)
	{
		json = std::move(_o.json);
	}
	return *this;
}

#endif

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY::clear()
{
	json.clear();
}

bool LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY::equals(const Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY& _o) const
{
	return json.equals(_o.json);
}

const char *LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY).append(")");
	_buf.append(',');
	_buf.append("json=");
	_buf.append(json);
	return _buf.c_str();
}

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(json);
}

void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(json);
}

/*static*/ void LobbyEtcClient::MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "json"); size_t szJson = strlen(_dummy);
	AtfValidator::validateInt(_descr, "json", szJson, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY
//=================================================================

LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY()
{
	clear();
}

void LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY::clear()
{
	siteId = 0;
	brand = 0;
	locale = 0;
}

bool LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY::equals(const Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY& _o) const
{
	return siteId == _o.siteId &&
		brand == _o.brand &&
		locale == _o.locale;
}

const char *LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY).append(")");
	_buf.append(',');
	_buf.append("siteId=");
	_buf.appendUint(siteId);
	_buf.append(',');
	_buf.append("brand=");
	_buf.appendUint(brand);
	_buf.append(',');
	_buf.append("locale=");
	_buf.appendUint(locale);
	return _buf.c_str();
}

void LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(siteId);
	_msg.composeUINT32(brand);
	_msg.composeUINT32(locale);
}

void LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(siteId);
	_parser.parseUINT32(brand);
	_parser.parseUINT32(locale);
}

/*static*/ void LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 siteId; _parser.parseUINT32(siteId);
	AtfValidator::validateInt(_descr, "siteId", siteId, _checker, __FILE__, __LINE__);
	UINT32 brand; _parser.parseUINT32(brand);
	AtfValidator::validateInt(_descr, "brand", brand, _checker, __FILE__, __LINE__);
	UINT32 locale; _parser.parseUINT32(locale);
	AtfValidator::validateInt(_descr, "locale", locale, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    Image
//=================================================================

LobbyEtcClient::ImageGallery::Image::Image()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::ImageGallery::Image::Image(Image&& _o)
	: imageId(std::move(_o.imageId))
	, descr(std::move(_o.descr))
{
}

LobbyEtcClient::ImageGallery::Image& LobbyEtcClient::ImageGallery::Image::operator=(Image&& _o)
{
	if(this != &_o)
	{
		imageId = std::move(_o.imageId);
		descr = std::move(_o.descr);
	}
	return *this;
}

#endif

void LobbyEtcClient::ImageGallery::Image::clear()
{
	imageId = 0;
	descr.clear();
}

bool LobbyEtcClient::ImageGallery::Image::equals(const Image& _o) const
{
	return imageId == _o.imageId &&
		descr.equals(_o.descr);
}

const char *LobbyEtcClient::ImageGallery::Image::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append(',');
	_buf.append("descr=");
	_buf.append(descr);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::ImageGallery::Image::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(Image())) // not empty
	{
		_body.composeUINT32(imageId);
		_body.composeString(descr);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::ImageGallery::Image::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(imageId);
	_parser0.parseStringP(descr);
}

/*static*/ void LobbyEtcClient::ImageGallery::Image::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	UINT32 imageId; _parser0.parseUINT32(imageId);
	AtfValidator::validateInt(_descr, "imageId", imageId, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "descr"); size_t szDescr = strlen(_dummy);
	AtfValidator::validateInt(_descr, "descr", szDescr, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    SubCategory
//=================================================================

LobbyEtcClient::ImageGallery::SubCategory::SubCategory()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::ImageGallery::SubCategory::SubCategory(SubCategory&& _o)
	: name(std::move(_o.name))
	, imageIds(std::move(_o.imageIds))
{
}

LobbyEtcClient::ImageGallery::SubCategory& LobbyEtcClient::ImageGallery::SubCategory::operator=(SubCategory&& _o)
{
	if(this != &_o)
	{
		name = std::move(_o.name);
		imageIds = std::move(_o.imageIds);
	}
	return *this;
}

#endif

void LobbyEtcClient::ImageGallery::SubCategory::clear()
{
	name.clear();
	imageIds.clear();
}

bool LobbyEtcClient::ImageGallery::SubCategory::equals(const SubCategory& _o) const
{
	return name.equals(_o.name) &&
		imageIds.equals(_o.imageIds);
}

const char *LobbyEtcClient::ImageGallery::SubCategory::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("name=");
	_buf.append(name);
	_buf.append(',');
	_buf.append("imageIds=");
	imageIds.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::ImageGallery::SubCategory::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(SubCategory())) // not empty
	{
		_body.composeString(name);
		imageIds.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::ImageGallery::SubCategory::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(name);
	imageIds.parseMsg(_parser0);
}

/*static*/ void LobbyEtcClient::ImageGallery::SubCategory::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "name"); size_t szName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "name", szName, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szImageIds = ThinAtf::LAtfVector< UINT32, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("imageIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "imageIds", szImageIds, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    Category
//=================================================================

LobbyEtcClient::ImageGallery::Category::Category()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::ImageGallery::Category::Category(Category&& _o)
	: catName(std::move(_o.catName))
	, imageIds(std::move(_o.imageIds))
	, subcategories(std::move(_o.subcategories))
{
}

LobbyEtcClient::ImageGallery::Category& LobbyEtcClient::ImageGallery::Category::operator=(Category&& _o)
{
	if(this != &_o)
	{
		catName = std::move(_o.catName);
		imageIds = std::move(_o.imageIds);
		subcategories = std::move(_o.subcategories);
	}
	return *this;
}

#endif

void LobbyEtcClient::ImageGallery::Category::clear()
{
	catName.clear();
	imageIds.clear();
	subcategories.clear();
}

bool LobbyEtcClient::ImageGallery::Category::equals(const Category& _o) const
{
	return catName.equals(_o.catName) &&
		imageIds.equals(_o.imageIds) &&
		subcategories.equals(_o.subcategories);
}

const char *LobbyEtcClient::ImageGallery::Category::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("catName=");
	_buf.append(catName);
	_buf.append(',');
	_buf.append("imageIds=");
	imageIds.toTraceString(_buf);
	_buf.append(',');
	_buf.append("subcategories=");
	subcategories.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void LobbyEtcClient::ImageGallery::Category::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(Category())) // not empty
	{
		_body.composeString(catName);
		imageIds.composeMsg(_body);
		subcategories.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void LobbyEtcClient::ImageGallery::Category::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(catName);
	imageIds.parseMsg(_parser0);
	subcategories.parseMsg(_parser0);
}

/*static*/ void LobbyEtcClient::ImageGallery::Category::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "catName"); size_t szCatName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "catName", szCatName, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szImageIds = ThinAtf::LAtfVector< UINT32, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("imageIds"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "imageIds", szImageIds, _checker, __FILE__, __LINE__);
	int szSubcategories = ThinAtf::LAtfVector< SubCategory, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("subcategories"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "subcategories", szSubcategories, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY
//=================================================================

LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY(Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
	, images(std::move(_o.images))
	, categories(std::move(_o.categories))
{
}

LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY& LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY::operator=(Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
		images = std::move(_o.images);
		categories = std::move(_o.categories);
	}
	return *this;
}

#endif

void LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	images.clear();
	categories.clear();
}

bool LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY::equals(const Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		images.equals(_o.images) &&
		categories.equals(_o.categories);
}

const char *LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("images=");
		images.toTraceString(_buf);
		_buf.append(',');
		_buf.append("categories=");
		categories.toTraceString(_buf);
	}
	return _buf.c_str();
}

void LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
	}
	else
	{
		images.composeMsg(_msg);
		categories.composeMsg(_msg);
	}
}

void LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringP(errString);
	}
	else
	{
		images.parseMsg(_parser);
		categories.parseMsg(_parser);
	}
}

/*static*/ void LobbyEtcClient::ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szImages = ThinAtf::LAtfVector< Image, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("images"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "images", szImages, _checker, __FILE__, __LINE__);
		int szCategories = ThinAtf::LAtfVector< Category, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("categories"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "categories", szCategories, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS
//=================================================================

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS()
{
	clear();
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS::clear()
{
}

bool LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS::equals(const Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS& _o) const
{
	return true;
}

const char *LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS).append(")");
	return _buf.c_str();
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS::composeMsg(CommMsgBody& _msg) const
{
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY
//=================================================================

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY(Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
	, status(std::move(_o.status))
	, twitchId(std::move(_o.twitchId))
{
}

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY& LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY::operator=(Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
		status = std::move(_o.status);
		twitchId = std::move(_o.twitchId);
	}
	return *this;
}

#endif

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	status = false;
	twitchId.clear();
}

bool LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY::equals(const Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		status == _o.status &&
		twitchId.equals(_o.twitchId);
}

const char *LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("status=");
		_buf.appendUint(status);
		_buf.append(',');
		_buf.append("twitchId=");
		_buf.append(twitchId);
	}
	return _buf.c_str();
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode != 0 )
	{
		_msg.composeString(errString);
	}
	else
	{
		_msg.composeBOOL(status);
		_msg.composeString(twitchId);
	}
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode != 0 )
	{
		_parser.parseStringP(errString);
	}
	else
	{
		_parser.parseBOOL(status);
		_parser.parseStringP(twitchId);
	}
}

/*static*/ void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	else
	{
		bool status; _parser.parseBOOL(status);
		AtfValidator::validateInt(_descr, "status", status, _checker, __FILE__, __LINE__);
		_parser.parseStringN(_dummy, 0, "twitchId"); size_t szTwitchId = strlen(_dummy);
		AtfValidator::validateInt(_descr, "twitchId", szTwitchId, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT
//=================================================================

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT(Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT&& _o)
	: authorizationCode(std::move(_o.authorizationCode))
{
}

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT& LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT::operator=(Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT&& _o)
{
	if(this != &_o)
	{
		authorizationCode = std::move(_o.authorizationCode);
	}
	return *this;
}

#endif

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT::clear()
{
	authorizationCode.clear();
}

bool LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT::equals(const Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT& _o) const
{
	return authorizationCode.equals(_o.authorizationCode);
}

const char *LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_TWITCH_CONNECT).append(")");
	_buf.append(',');
	_buf.append("authorizationCode=");
	_buf.append(authorizationCode);
	return _buf.c_str();
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(authorizationCode);
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(authorizationCode);
}

/*static*/ void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_TWITCH_CONNECT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	_parser.parseStringN(_dummy, 0, "authorizationCode"); size_t szAuthorizationCode = strlen(_dummy);
	AtfValidator::validateInt(_descr, "authorizationCode", szAuthorizationCode, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY
//=================================================================

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY(Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
	, twitchId(std::move(_o.twitchId))
{
}

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY& LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY::operator=(Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
		twitchId = std::move(_o.twitchId);
	}
	return *this;
}

#endif

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	twitchId.clear();
}

bool LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY::equals(const Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		twitchId.equals(_o.twitchId);
}

const char *LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("twitchId=");
		_buf.append(twitchId);
	}
	return _buf.c_str();
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode != 0 )
	{
		_msg.composeString(errString);
	}
	else
	{
		_msg.composeString(twitchId);
	}
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode != 0 )
	{
		_parser.parseStringP(errString);
	}
	else
	{
		_parser.parseStringP(twitchId);
	}
}

/*static*/ void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	else
	{
		_parser.parseStringN(_dummy, 0, "twitchId"); size_t szTwitchId = strlen(_dummy);
		AtfValidator::validateInt(_descr, "twitchId", szTwitchId, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT
//=================================================================

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT()
{
	clear();
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT::clear()
{
}

bool LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT::equals(const Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT& _o) const
{
	return true;
}

const char *LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_TWITCH_DISCONNECT).append(")");
	return _buf.c_str();
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT::composeMsg(CommMsgBody& _msg) const
{
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_TWITCH_DISCONNECT";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY
//=================================================================

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY(Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
{
}

LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY& LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY::operator=(Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
	}
	return *this;
}

#endif

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY::clear()
{
	errCode = 0;
	errString.clear();
}

bool LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY::equals(const Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if( errCode != 0 )
	{
		_msg.composeString(errString);
	}
}

void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if( errCode != 0 )
	{
		_parser.parseStringP(errString);
	}
}

/*static*/ void LobbyEtcClient::Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool LobbyEtcClient::ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, "ImageGallery"))
	{
		switch(_msgId)
		{
			case MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY: ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY: ImageGallery::Protocol_MSG_LOBBYETC_CLI_GET_IMAGE_GALLERY_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "MiniGameTickets"))
	{
		switch(_msgId)
		{
			case MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA: MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY: MiniGameTickets::Protocol_MSG_LOBBYETC_CLI_GET_MG_MY_STARS_DATA_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_GET_TICKETS_WITH_TYPE: MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY: MiniGameTickets::Protocol_MSG_LOBBYETC_GET_TICKETS_WITH_TYPE_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "Twitch"))
	{
		switch(_msgId)
		{
			case MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS: Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY: Twitch::Protocol_MSG_LOBBYETC_CLI_CHECK_TWITCH_CONNECTION_STATUS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_TWITCH_CONNECT: Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY: Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_CONNECT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_TWITCH_DISCONNECT: Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY: Twitch::Protocol_MSG_LOBBYETC_CLI_TWITCH_DISCONNECT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	else if(!strcmp(_nameSpace, "player"))
	{
		switch(_msgId)
		{
			case MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT: player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY: player::Protocol_MSG_LOBBYETC_CLI_MG_SIDEBET_HISTORY_AUDIT_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT: player::Protocol_MSG_LOBBYETC_CLI_NOTIF_GEOIP_RESULT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS: player::Protocol_MSG_LOBBYETC_CLI_NOTIF_MOBILE_REQUIRED_STATUS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION: player::Protocol_MSG_LOBBYETC_CLI_OUTBOUND_BOLDCHAT_NOTIFICATION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_RECONNECT: player::Protocol_MSG_LOBBYETC_CLI_RECONNECT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT: player::Protocol_MSG_LOBBYETC_CLI_REQUEST_USER_LOCAID_CONSENT::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION: player::Protocol_MSG_LOBBYETC_CLI_START_MOBILE_VERIFICATION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION: player::Protocol_MSG_LOBBYETC_CLI_UNSOLICITED_NOTIFICATION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF: player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_NOTIF::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID: player::Protocol_MSG_LOBBYETC_GENERAL_CLIENT_ERROR_WITH_CLIENT_ID::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_GEOCOMPLY_LOCATE: player::Protocol_MSG_LOBBYETC_GEOCOMPLY_LOCATE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

