/**
 * FppFactor_thin.cpp
 *
 * This file was auto-generated from FppFactor.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin FppFactor.txt
 */
 
#include "FppFactor_thin.h"

//=================================================================
//                    FppFactor
//=================================================================

TournClientThin::FppFactor::FppFactor()
{
	clear();
}

void TournClientThin::FppFactor::clear()
{
	fppFactor = 0;
	sites = 0;
	endT.setNull();
}

bool TournClientThin::FppFactor::equals(const FppFactor& _o) const
{
	return fppFactor == _o.fppFactor &&
		sites == _o.sites &&
		endT.equals(_o.endT);
}

const char *TournClientThin::FppFactor::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("fppFactor=");
	_buf.appendUint(fppFactor);
	_buf.append(',');
	_buf.append("sites=");
	_buf.appendUint(sites);
	_buf.append(',');
	_buf.append("endT=");
	ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, endT);
	_buf.append('}');
	return _buf.c_str();
}

void TournClientThin::FppFactor::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT16(fppFactor);
	_msg.composeUINT32(sites);
	_msg.composeSrvTime(endT);
}

void TournClientThin::FppFactor::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT16(fppFactor);
	_parser.parseUINT32(sites);
	_parser.parseSrvTime(endT);
}

/*static*/ void TournClientThin::FppFactor::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	UINT16 fppFactor; _parser.parseUINT16(fppFactor);
	AtfValidator::validateInt(_descr, "fppFactor", fppFactor, _checker, __FILE__, __LINE__);
	UINT32 sites; _parser.parseUINT32(sites);
	AtfValidator::validateInt(_descr, "sites", sites, _checker, __FILE__, __LINE__);
	SrvTime endT; _parser.parseSrvTime(endT);
	AtfValidator::validateSrvDateTime(_descr, "endT", endT, _checker, __FILE__, __LINE__);
}

//=================================================================
//                    FppFactorEx
//=================================================================

TournClientThin::FppFactorEx::FppFactorEx()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

TournClientThin::FppFactorEx::FppFactorEx(FppFactorEx&& _o)
	: fppFactor(std::move(_o.fppFactor))
	, sites(std::move(_o.sites))
	, endT(std::move(_o.endT))
{
}

TournClientThin::FppFactorEx& TournClientThin::FppFactorEx::operator=(FppFactorEx&& _o)
{
	if(this != &_o)
	{
		fppFactor = std::move(_o.fppFactor);
		sites = std::move(_o.sites);
		endT = std::move(_o.endT);
	}
	return *this;
}

#endif

void TournClientThin::FppFactorEx::clear()
{
	fppFactor = 0;
	sites.clear();
	endT.setNull();
}

bool TournClientThin::FppFactorEx::equals(const FppFactorEx& _o) const
{
	return fppFactor == _o.fppFactor &&
		sites.equals(_o.sites) &&
		endT.equals(_o.endT);
}

const char *TournClientThin::FppFactorEx::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("fppFactor=");
	_buf.appendUint(fppFactor);
	_buf.append(',');
	_buf.append("sites=");
	sites.toTraceString(_buf);
	_buf.append(',');
	_buf.append("endT=");
	ThinAtf::AtfTempl<SrvTime>::ToTraceString(_buf, endT);
	_buf.append('}');
	return _buf.c_str();
}

void TournClientThin::FppFactorEx::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(FppFactorEx())) // not empty
	{
		_body.composeUINT16(fppFactor);
		sites.composeMsg(_body);
		_body.composeSrvTime(endT);
	}

	_msg.composeMsgBody(_body);
}

void TournClientThin::FppFactorEx::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT16(fppFactor);
	sites.parseMsg(_parser0);
	_parser0.parseSrvTime(endT);
}

/*static*/ void TournClientThin::FppFactorEx::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	UINT16 fppFactor; _parser0.parseUINT16(fppFactor);
	AtfValidator::validateInt(_descr, "fppFactor", fppFactor, _checker, __FILE__, __LINE__);
	PString _descbuf;
	PSiteMask::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("sites"), _fieldsWithUnparsedContent);
	SrvTime endT; _parser0.parseSrvTime(endT);
	AtfValidator::validateSrvDateTime(_descr, "endT", endT, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

