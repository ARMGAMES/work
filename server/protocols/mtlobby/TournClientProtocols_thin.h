/**
 * TournClientProtocols_thin.h
 *
 * This file was auto-generated from TournClientProtocols.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin TournClientProtocols.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_TOURNCLIENTPROTOCOLS_THIN_H
#define ATF_PROTOCOL_DEFFILE_TOURNCLIENTPROTOCOLS_THIN_H

#include "ThinAtfUserDefStructs.h"
#include "TournCommonStructs_thin.h"
#include "atfgenerated/brandimgs_thin.h"
#include "storm/TableCommonStructs_thin.h"
#include "MultidayTourn_thin.h"
#include "NStackTournInfo_thin.h"
#include "tournmilestoneprize.h"
#include "FppFactor_thin.h"
#include "BlindLevelIntervalRule.h"
#include "mtlobby.h"
#include "lobby.h"


namespace TournClientThin
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	struct P_BreakPub
	{
		// 44 - breakTime,breakLength
		INT32 breakTime;
		UINT32 breakLength;

		P_BreakPub();
		void clear();
		bool equals(const P_BreakPub&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct P_TicketType
	{
		// 2s - ticketTypeId,name
		UINT16 ticketTypeId;
		PString name;

		P_TicketType();
		void clear();
		bool equals(const P_TicketType&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		P_TicketType(P_TicketType&&);
		P_TicketType& operator=(P_TicketType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		P_TicketType(const P_TicketType&) = default;
		P_TicketType& operator=(const P_TicketType&) = default;
#endif
#endif
	};

	struct P_FppReward
	{
		// M(44) - M(siteId,reward)
		UINT32 siteId;
		UINT32 reward;

		P_FppReward();
		void clear();
		bool equals(const P_FppReward&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct P_AwardRange
	{
		// 4444 - awardAmount,nextTournId,startPlace,endPlace
		UINT32 awardAmount;
		UINT32 nextTournId;
		UINT32 startPlace;
		UINT32 endPlace;

		P_AwardRange();
		void clear();
		bool equals(const P_AwardRange&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct P_AutopublishBody
	{
		// M(ss) - M(name,value)
		PString name;
		PString value;

		P_AutopublishBody();
		void clear();
		bool equals(const P_AutopublishBody&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		P_AutopublishBody(P_AutopublishBody&&);
		P_AutopublishBody& operator=(P_AutopublishBody&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		P_AutopublishBody(const P_AutopublishBody&) = default;
		P_AutopublishBody& operator=(const P_AutopublishBody&) = default;
#endif
#endif
	};

	struct TournSubscr_SpinGoPrize_TargetReference
	{
		// 8ssI - tournamentId,server,instance,name
		UINT64 tournamentId;
		PString server;
		PString instance;
		I18nPString name;

		TournSubscr_SpinGoPrize_TargetReference();
		void clear();
		bool equals(const TournSubscr_SpinGoPrize_TargetReference&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		TournSubscr_SpinGoPrize_TargetReference(TournSubscr_SpinGoPrize_TargetReference&&);
		TournSubscr_SpinGoPrize_TargetReference& operator=(TournSubscr_SpinGoPrize_TargetReference&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		TournSubscr_SpinGoPrize_TargetReference(const TournSubscr_SpinGoPrize_TargetReference&) = default;
		TournSubscr_SpinGoPrize_TargetReference& operator=(const TournSubscr_SpinGoPrize_TargetReference&) = default;
#endif
#endif
	};

	struct LobbyData_Betting
	{
		//! 1111 <FIXME>TableCommonThin::TableStakes</FIXME>  - blindsLevel,handType,structure,hilo, <FIXME>stakes</FIXME> 
		BYTE blindsLevel;
		BYTE handType;
		BYTE structure;
		BYTE hilo;
		TableCommonThin::TableStakes stakes;

		LobbyData_Betting();
		void clear();
		bool equals(const LobbyData_Betting&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		LobbyData_Betting(LobbyData_Betting&&);
		LobbyData_Betting& operator=(LobbyData_Betting&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		LobbyData_Betting(const LobbyData_Betting&) = default;
		LobbyData_Betting& operator=(const LobbyData_Betting&) = default;
#endif
#endif
	};

	struct LobbyData_MultidayTourn
	{
		//! M( <FIXME>MultidayTourn</FIXME> ) - M( <FIXME>mt</FIXME> )
		MultidayTourn mt;

		LobbyData_MultidayTourn();
		void clear();
		bool equals(const LobbyData_MultidayTourn&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		LobbyData_MultidayTourn(LobbyData_MultidayTourn&&);
		LobbyData_MultidayTourn& operator=(LobbyData_MultidayTourn&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		LobbyData_MultidayTourn(const LobbyData_MultidayTourn&) = default;
		LobbyData_MultidayTourn& operator=(const LobbyData_MultidayTourn&) = default;
#endif
#endif
	};

	struct P_ParticipantsInfo
	{
		// s444 - name,chips,payment0,payment1
		PString name;
		INT32 chips;
		INT32 payment0;
		INT32 payment1;

		P_ParticipantsInfo();
		void clear();
		bool equals(const P_ParticipantsInfo&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		P_ParticipantsInfo(P_ParticipantsInfo&&);
		P_ParticipantsInfo& operator=(P_ParticipantsInfo&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		P_ParticipantsInfo(const P_ParticipantsInfo&) = default;
		P_ParticipantsInfo& operator=(const P_ParticipantsInfo&) = default;
#endif
#endif
	};

	struct P_DealPayout
	{
		// 14 - position,noDealPayout
		INT8 position;
		INT32 noDealPayout;

		P_DealPayout();
		void clear();
		bool equals(const P_DealPayout&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct ExtraInfo_StakesLevel
	{
		//! M( <FIXME>TableCommonThin::TableStakes</FIXME> 44) - M( <FIXME>stakes</FIXME> ,levelTime,addTimeBank)
		TableCommonThin::TableStakes stakes;
		UINT32 levelTime;
		UINT32 addTimeBank;

		ExtraInfo_StakesLevel();
		void clear();
		bool equals(const ExtraInfo_StakesLevel&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		ExtraInfo_StakesLevel(ExtraInfo_StakesLevel&&);
		ExtraInfo_StakesLevel& operator=(ExtraInfo_StakesLevel&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		ExtraInfo_StakesLevel(const ExtraInfo_StakesLevel&) = default;
		ExtraInfo_StakesLevel& operator=(const ExtraInfo_StakesLevel&) = default;
#endif
#endif
	};

	struct TournExtraSubscr_Prize_Winner
	{
		// 41 - amount,percent
		INT32 amount;
		BYTE percent;

		TournExtraSubscr_Prize_Winner();
		void clear();
		bool equals(const TournExtraSubscr_Prize_Winner&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	};

	struct TournExtraSubscr_Prize_Prize
	{
		// 4444<41> - min,max,numTickets,numWinners<amount,percent>
		INT32 min;
		INT32 max;
		INT32 numTickets;
		ThinAtf::LAtfVector< TournExtraSubscr_Prize_Winner, 4 > winners;

		TournExtraSubscr_Prize_Prize();
		void clear();
		bool equals(const TournExtraSubscr_Prize_Prize&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		TournExtraSubscr_Prize_Prize(TournExtraSubscr_Prize_Prize&&);
		TournExtraSubscr_Prize_Prize& operator=(TournExtraSubscr_Prize_Prize&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		TournExtraSubscr_Prize_Prize(const TournExtraSubscr_Prize_Prize&) = default;
		TournExtraSubscr_Prize_Prize& operator=(const TournExtraSubscr_Prize_Prize&) = default;
#endif
#endif
	};

	namespace publication
	{
		struct TournSubscr_Static	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_STATIC_LEAF }
		{
			struct _BountiesType
			{
				ThinAtf::LAtfVector< UINT32, 4 > teamProBounties;
				ThinAtf::LAtfVector< UINT32, 4 > bountyMultipliers;
				mutable bool _is_empty_internal;

				_BountiesType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_BountiesType()); return _is_empty_internal; }
				bool equals(const _BountiesType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_BountiesType(_BountiesType&&);
				_BountiesType& operator=(_BountiesType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_BountiesType(const _BountiesType&) = default;
				_BountiesType& operator=(const _BountiesType&) = default;
#endif
#endif
			};

			//! 44444411tttt414411s444444444442144444414444444<2s>4I244s441444M(4<4>4<4>)1 <FIXME>MultidayTourn</FIXME> s24121b4<M(44)>1s44b1I24444ss88bM( <FIXME>NStackTournInfoStruct</FIXME> )ts44441414414441444444<M( <FIXME>MultidayTourn</FIXME> )>ss444<s>sm4ss - tournamentId,buyIn,rake,startingChips,maxPlayers,playersPerTable,gameType,isHiLo,startingTime,registrationStarts,registrationEnds,seatingStarts,minPlayers,restricted,fppReward,fppBuyIn,isRestricted,isPwdProtected,name,numRebuys,rebuyChips,_obsolete_1,rebuyMaxChips,numAddOns,addOnChips,_obsolete_2,addOnMaxChips,scriptPrizeAddOn,guaranteedPrizePool,tournFlags,maxAllIns,awardSchema,timeBank,unregistrationEnds_t,satelliteTarget,satelliteTargetBuyIn,rebuyFppPrice,addonFppPrice,isPlayMoney,startingTime_t,registrationStarts_t,registrationEnds_t,seatingStarts_t,tournFlagsServInt,tournProp2,numTicketTypes<ticketTypeId,name>,tableLogo,finalTableText,chatLang,lobbyRestricted,fppFraction,currency,rebuyFppReward,addOnFppReward,fppRewardPercent,nPublishLobbyPlayersLess,bounty,placeHolder,M(numTeamProBounties<teamProBounties>,numBountyMultipliers<bountyMultipliers>),publPropFlag, <FIXME>multiday</FIXME> ,satelliteTargetReference,satelliteTargetReferenceLock,clubId,timedTournType,timedTournLevelsOrMinutes,timedTournPayoutStructure,_obsolete_3,numVppToPublish<M(siteId,reward)>,speedDisplay,tournBrand,scalePM,blitzNormalDealingThreshold,_obsolete_4,progressiveKnockout,tableText,reEntryAllowed,tournMask,tournMask2,tournMask3,tournMask4,internalReference,favoriteReference,ticketPrice,tournFlags2,cannotUnregisterFromTarget,M( <FIXME>nStackInfoMsg</FIXME> ),targetWhenStarts,admission,siteMask,publStartLevel,tournMask5,tournMask6,dealExclusionType,dealExclusionValue,timedTournPlayersPercent,_obsolete_5,spinGoStartDelay,rmPmLobby,brandMask,playerKnockOutAddOn,totalKnockOutAddOn,knockOutAddOnProgressive,sitGoStarterGameId,numStandardButton,lateRegDelta,finalTablePlusOne,multidayIndex,numMultiDayVec<M( <FIXME>mt</FIXME> )>,criteria,groupReference,tournGroup,prizePool,numAdmissions<admissions>,pokerNgGroup,siteMaskEx,pppId,tableTrait,highlightColor
			UINT32 tournamentId;
			INT32 buyIn;
			INT32 rake;
			INT32 startingChips;
			INT32 maxPlayers;
			INT32 playersPerTable;
			BYTE gameType;
			BYTE isHiLo;
			SrvTime startingTime;
			SrvTime registrationStarts;
			SrvTime registrationEnds;
			SrvTime seatingStarts;
			INT32 minPlayers;
			BYTE restricted;
			INT32 fppReward;
			INT32 fppBuyIn;
			BYTE isRestricted;
			BYTE isPwdProtected;
			PString name;
			INT32 numRebuys;
			INT32 rebuyChips;
			INT32 _obsolete_1;
			INT32 rebuyMaxChips;
			INT32 numAddOns;
			INT32 addOnChips;
			INT32 _obsolete_2;
			INT32 addOnMaxChips;
			INT32 scriptPrizeAddOn;
			INT32 guaranteedPrizePool;
			UINT32 tournFlags;
			INT16 maxAllIns;
			BYTE awardSchema;
			UINT32 timeBank;
			INT32 unregistrationEnds_t;
			UINT32 satelliteTarget;
			INT32 satelliteTargetBuyIn;
			INT32 rebuyFppPrice;
			INT32 addonFppPrice;
			BYTE isPlayMoney;
			UINT32 startingTime_t;
			UINT32 registrationStarts_t;
			UINT32 registrationEnds_t;
			UINT32 seatingStarts_t;
			UINT32 tournFlagsServInt;
			UINT32 tournProp2;
			ThinAtf::LAtfVector< P_TicketType, 4 > ticketTypes;
			UINT32 tableLogo;
			I18nPString finalTableText;
			UINT16 chatLang;
			UINT32 lobbyRestricted;
			INT32 fppFraction;
			PString currency;
			INT32 rebuyFppReward;
			INT32 addOnFppReward;
			INT8 fppRewardPercent;
			UINT32 nPublishLobbyPlayersLess;
			INT32 bounty;
			UINT32 placeHolder;	// always 0 kept for client compatibility
			_BountiesType bounties;

			BYTE publPropFlag;
			MultidayTourn multiday;
			PString satelliteTargetReference;
			UINT16 satelliteTargetReferenceLock;
			UINT32 clubId;
			BYTE timedTournType;
			UINT16 timedTournLevelsOrMinutes;
			BYTE timedTournPayoutStructure;
			bool _obsolete_3;
			ThinAtf::LAtfVector< P_FppReward, 4 > vppToPublish;
			BYTE speedDisplay;
			PString tournBrand;
			INT32 scalePM;
			UINT32 blitzNormalDealingThreshold;
			bool _obsolete_4;
			BYTE progressiveKnockout;
			I18nPString tableText;
			UINT16 reEntryAllowed;
			UINT32 tournMask;
			UINT32 tournMask2;
			UINT32 tournMask3;
			UINT32 tournMask4;
			PString internalReference;
			PString favoriteReference;
			INT64 ticketPrice;
			UINT64 tournFlags2;
			bool cannotUnregisterFromTarget;

			NStackTournInfoStruct nStackInfoMsg;

			SrvTime targetWhenStarts;
			PString admission;
			UINT32 siteMask;
			UINT32 publStartLevel;
			UINT32 tournMask5;
			UINT32 tournMask6;
			BYTE dealExclusionType;
			INT32 dealExclusionValue;
			BYTE timedTournPlayersPercent;
			INT32 _obsolete_5;
			INT32 spinGoStartDelay;
			BYTE rmPmLobby;
			UINT32 brandMask;
			INT32 playerKnockOutAddOn;
			INT32 totalKnockOutAddOn;
			BYTE knockOutAddOnProgressive;
			UINT32 sitGoStarterGameId;
			UINT32 numStandardButton;
			INT32 lateRegDelta;
			INT32 finalTablePlusOne;
			INT32 multidayIndex;
			ThinAtf::LAtfVector< LobbyData_MultidayTourn, 4 > multiDayVec;
			PString criteria;
			PString groupReference;
			INT32 tournGroup;
			INT32 prizePool;
			ThinAtf::LAtfVector< PString, 4 > admissions;
			PString pokerNgGroup;
			PSiteMask siteMaskEx;
			UINT32 pppId;
			PString tableTrait;
			PString highlightColor;

			TournSubscr_Static();
			void clear();
			bool equals(const TournSubscr_Static&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Static(TournSubscr_Static&&);
			TournSubscr_Static& operator=(TournSubscr_Static&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Static(const TournSubscr_Static&) = default;
			TournSubscr_Static& operator=(const TournSubscr_Static&) = default;
#endif
#endif

		private: // helper functions
			void parseAnonymousMsgBody0(CommMsgParser& _parser);
			static void validateAnonymousMsgBody0(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_Betting	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_BETTING_LEAF }
		{
			// 44441411[444444t]2111 - loBet,hiBet,bringIn,smallBlind,structure,ante,blindsLevel,nextLevelOrdinal[nextAnte,nextSmallBlind,nextLoBet,nextHiBet,nextBringIn,nextLevelStart_t,nextLevelStart],olympicLevel,gameType,limit,isHiLo
			UINT32 loBet;
			UINT32 hiBet;
			UINT32 bringIn;
			UINT32 smallBlind;
			BYTE structure;
			UINT32 ante;
			BYTE blindsLevel;
			BYTE nextLevelOrdinal;

			UINT32 nextAnte;
			UINT32 nextSmallBlind;
			UINT32 nextLoBet;
			UINT32 nextHiBet;
			UINT32 nextBringIn;
			UINT32 nextLevelStart_t;
			SrvTime nextLevelStart;

			UINT16 olympicLevel;
			BYTE gameType;
			BYTE limit;
			BYTE isHiLo;

			TournSubscr_Betting();
			void clear();
			bool equals(const TournSubscr_Betting&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Betting(TournSubscr_Betting&&);
			TournSubscr_Betting& operator=(TournSubscr_Betting&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Betting(const TournSubscr_Betting&) = default;
			TournSubscr_Betting& operator=(const TournSubscr_Betting&) = default;
#endif
#endif
		};

		struct TournSubscr_BettingNew	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_BETTING_LEAF_NEW }
		{
			struct _CLevelType
			{
				LobbyData_Betting currentLevel;
				mutable bool _is_empty_internal;

				_CLevelType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_CLevelType()); return _is_empty_internal; }
				bool equals(const _CLevelType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_CLevelType(_CLevelType&&);
				_CLevelType& operator=(_CLevelType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_CLevelType(const _CLevelType&) = default;
				_CLevelType& operator=(const _CLevelType&) = default;
#endif
#endif
			};

			struct _NLevelType
			{
				LobbyData_Betting nextLevel;
				mutable bool _is_empty_internal;

				_NLevelType();
				void clear();
				bool isEmptyMsg() const { if(_is_empty_internal) _is_empty_internal = equals(_NLevelType()); return _is_empty_internal; }
				bool equals(const _NLevelType&) const;
				const char *toTraceString(PString& _str) const;
				void composeMsg(CommMsgBody& _msg) const;
				void parseMsg(CommMsgParser& _parser);
				static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
				_NLevelType(_NLevelType&&);
				_NLevelType& operator=(_NLevelType&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
				_NLevelType(const _NLevelType&) = default;
				_NLevelType& operator=(const _NLevelType&) = default;
#endif
#endif
			};

			//! M(1111 <FIXME>TableCommonThin::TableStakes</FIXME> )M(1111 <FIXME>TableCommonThin::TableStakes</FIXME> )4t2 - M(blindsLevel,handType,structure,hilo, <FIXME>stakes</FIXME> ),M(blindsLevel,handType,structure,hilo, <FIXME>stakes</FIXME> ),nextLevelStart,nextLevelStartTime,olympicLevel
			_CLevelType cLevel;
			_NLevelType nLevel;

			UINT32 nextLevelStart;
			SrvTime nextLevelStartTime;
			INT16 olympicLevel;

			TournSubscr_BettingNew();
			void clear();
			bool equals(const TournSubscr_BettingNew&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_BettingNew(TournSubscr_BettingNew&&);
			TournSubscr_BettingNew& operator=(TournSubscr_BettingNew&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_BettingNew(const TournSubscr_BettingNew&) = default;
			TournSubscr_BettingNew& operator=(const TournSubscr_BettingNew&) = default;
#endif
#endif
		};

		struct TournSubscr_Status	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_STATUS_LEAF }
		{
			// 4t4ssb4bb44b - status,newStartTimeFlightTourn,minutesLateFlightTourn,createdBy,cancelledBy,isBlitzTourn,timedTournPlayersThreshold,sameLevelFlightsAvailable,nextLevelFlightsAvailable,delayedPlaceDelta,activeFlags,isWinTheButtonTourn
			UINT32 status;
			SrvTime newStartTimeFlightTourn;
			UINT32 minutesLateFlightTourn;
			PString createdBy;
			PString cancelledBy;
			bool isBlitzTourn;
			UINT32 timedTournPlayersThreshold;
			bool sameLevelFlightsAvailable;
			bool nextLevelFlightsAvailable;
			INT32 delayedPlaceDelta;
			UINT32 activeFlags;
			bool isWinTheButtonTourn;

			TournSubscr_Status();
			void clear();
			bool equals(const TournSubscr_Status&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Status(TournSubscr_Status&&);
			TournSubscr_Status& operator=(TournSubscr_Status&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Status(const TournSubscr_Status&) = default;
			TournSubscr_Status& operator=(const TournSubscr_Status&) = default;
#endif
#endif
		};

		struct TournSubscr_Board	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_MSGBOARD_LEAF }
		{
			// s - itSessionId
			PString itSessionId;

			TournSubscr_Board();
			void clear();
			bool equals(const TournSubscr_Board&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Board(TournSubscr_Board&&);
			TournSubscr_Board& operator=(TournSubscr_Board&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Board(const TournSubscr_Board&) = default;
			TournSubscr_Board& operator=(const TournSubscr_Board&) = default;
#endif
#endif
		};

		struct TournSubscr_Break	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_BREAK_LEAF }
		{
			// tt444b4I - nextBreakStarts,currentBreakStops,currentBreakDuration,nextBreakStarts_t,currentBreakStops_t,addOnEligibleBreak,blitzTableRound,message
			SrvTime nextBreakStarts;
			SrvTime currentBreakStops;
			UINT32 currentBreakDuration;
			UINT32 nextBreakStarts_t;
			UINT32 currentBreakStops_t;
			bool addOnEligibleBreak;
			INT32 blitzTableRound;
			I18nPString message;

			TournSubscr_Break();
			void clear();
			bool equals(const TournSubscr_Break&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Break(TournSubscr_Break&&);
			TournSubscr_Break& operator=(TournSubscr_Break&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Break(const TournSubscr_Break&) = default;
			TournSubscr_Break& operator=(const TournSubscr_Break&) = default;
#endif
#endif
		};

		struct TournSubscr_Closed	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_CLOSED_LEAF }
		{
			// t - closed
			SrvTime closed;

			TournSubscr_Closed();
			void clear();
			bool equals(const TournSubscr_Closed&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_Awards	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_AWARDS_LEAF }
		{
			// 44<4>44<4>41 - effectivePrizePool,numPrizes<prizes>,nTickets,numNextTournIds<nextTournIds>,creditPlayer,mixTournSatellite
			INT32 effectivePrizePool;
			ThinAtf::LAtfVector< INT32, 4 > prizes;
			UINT32 nTickets;	// number of awards with non-0 nextTournIds
			ThinAtf::LAtfVector< UINT32, 4 > nextTournIds;
			INT32 creditPlayer;
			INT8 mixTournSatellite;

			TournSubscr_Awards();
			void clear();
			bool equals(const TournSubscr_Awards&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Awards(TournSubscr_Awards&&);
			TournSubscr_Awards& operator=(TournSubscr_Awards&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Awards(const TournSubscr_Awards&) = default;
			TournSubscr_Awards& operator=(const TournSubscr_Awards&) = default;
#endif
#endif
		};

		struct TournSubscr_AddOn	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_ADDON_LEAF }
		{
			// 1 - waiting
			BYTE waiting;

			TournSubscr_AddOn();
			void clear();
			bool equals(const TournSubscr_AddOn&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_Stakes	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_STAKES_LEAF }
		{
			// 444 - minStack,maxStack,avgStack
			UINT32 minStack;
			UINT32 maxStack;
			UINT32 avgStack;

			TournSubscr_Stakes();
			void clear();
			bool equals(const TournSubscr_Stakes&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_PrizePool	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_PRIZEPOOL_LEAF }
		{
			// 4444444 - numUsers,prizePoolToPublish,totalRebuysDone,totalAddonsDone,payouts,flightIntermediatePayoutPrizePool,flightIntermediatePayoutPerUser
			UINT32 numUsers;
			INT32 prizePoolToPublish;
			UINT32 totalRebuysDone;
			UINT32 totalAddonsDone;
			INT32 payouts;
			INT32 flightIntermediatePayoutPrizePool;
			INT32 flightIntermediatePayoutPerUser;

			TournSubscr_PrizePool();
			void clear();
			bool equals(const TournSubscr_PrizePool&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_NumRegistered	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_REGISTERED_LEAF }
		{
			// 4444 - userCount,isBlitz,numReg,totalReentriesMade
			UINT32 userCount;
			UINT32 isBlitz;
			UINT32 numReg;
			UINT32 totalReentriesMade;

			TournSubscr_NumRegistered();
			void clear();
			bool equals(const TournSubscr_NumRegistered&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_AwardsPrelim	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_PRELIM_AWARDS_LEAF }
		{
			// 4444<4444> - prelimAwards,numPaid,numTickets,numAwardRanges<awardAmount,nextTournId,startPlace,endPlace>
			UINT32 prelimAwards;
			UINT32 numPaid;
			UINT32 numTickets;
			ThinAtf::LAtfVector< P_AwardRange, 4 > awardRanges;

			TournSubscr_AwardsPrelim();
			void clear();
			bool equals(const TournSubscr_AwardsPrelim&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_AwardsPrelim(TournSubscr_AwardsPrelim&&);
			TournSubscr_AwardsPrelim& operator=(TournSubscr_AwardsPrelim&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_AwardsPrelim(const TournSubscr_AwardsPrelim&) = default;
			TournSubscr_AwardsPrelim& operator=(const TournSubscr_AwardsPrelim&) = default;
#endif
#endif
		};

		struct TournSubscr_TableBanner	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_TABLE_MSG_LEAF }
		{
			// 424It44Im - counter,duration,options,banner,when,flags,licenseMask,observerBanner,licenseMaskNew
			UINT32 counter;
			UINT16 duration;
			INT32 options;
			I18nPString banner;
			SrvTime when;
			UINT32 flags;
			UINT32 licenseMask;	// 32 bits
			I18nPString observerBanner;
			PLicenseMask licenseMaskNew;

			TournSubscr_TableBanner();
			void clear();
			bool equals(const TournSubscr_TableBanner&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_TableBanner(TournSubscr_TableBanner&&);
			TournSubscr_TableBanner& operator=(TournSubscr_TableBanner&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_TableBanner(const TournSubscr_TableBanner&) = default;
			TournSubscr_TableBanner& operator=(const TournSubscr_TableBanner&) = default;
#endif
#endif
		};

		struct TournSubscr_HappyHours	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_HAPPY_HOURS_LEAF }
		{
			//! 2< <FIXME>FppFactor</FIXME> > - numHappyHourMultipliers< <FIXME>FppFactor</FIXME> >
			ThinAtf::LAtfVector< FppFactor, 2 > happyHourMultipliers;

			TournSubscr_HappyHours();
			void clear();
			bool equals(const TournSubscr_HappyHours&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_HappyHours(TournSubscr_HappyHours&&);
			TournSubscr_HappyHours& operator=(TournSubscr_HappyHours&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_HappyHours(const TournSubscr_HappyHours&) = default;
			TournSubscr_HappyHours& operator=(const TournSubscr_HappyHours&) = default;
#endif
#endif
		};

		struct TournSubscr_HandByHand	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_HANDBYHAND_LEAF }
		{
			// b - handByHand
			bool handByHand;

			TournSubscr_HandByHand();
			void clear();
			bool equals(const TournSubscr_HandByHand&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_Bounty	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_BOUNTIES_LEAF }
		{
			// 444 - minBounty,maxBounty,averageBounty
			INT32 minBounty;
			INT32 maxBounty;
			INT32 averageBounty;

			TournSubscr_Bounty();
			void clear();
			bool equals(const TournSubscr_Bounty&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_Golden	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_GOLDEN_LEAF }
		{
			// 442b44484 - goldenSnGBuyinAddon,goldenSnGPrizepoolAddon,goldenSnGPrizepoolMultiplier,goldenSnGEligible,ppAddonForClient,goldenSnGPrizepoolEffectiveMultiplier1,goldenSnGMilestoneAddon,goldenSnGPrizepoolEffectiveMultiplier2,goldenSnGStartTime
			INT32 goldenSnGBuyinAddon;
			INT32 goldenSnGPrizepoolAddon;
			INT16 goldenSnGPrizepoolMultiplier;
			bool goldenSnGEligible;
			INT32 ppAddonForClient;
			INT32 goldenSnGPrizepoolEffectiveMultiplier1;
			INT32 goldenSnGMilestoneAddon;
			INT64 goldenSnGPrizepoolEffectiveMultiplier2;
			INT32 goldenSnGStartTime;

			TournSubscr_Golden();
			void clear();
			bool equals(const TournSubscr_Golden&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_Autopublish	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_AUTOPUBLISH_LEAF }
		{
			// 4<M(ss)> - numAutoPublishBodies<M(name,value)>
			ThinAtf::LAtfVector< P_AutopublishBody, 4 > autoPublishBodies;

			TournSubscr_Autopublish();
			void clear();
			bool equals(const TournSubscr_Autopublish&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_Autopublish(TournSubscr_Autopublish&&);
			TournSubscr_Autopublish& operator=(TournSubscr_Autopublish&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_Autopublish(const TournSubscr_Autopublish&) = default;
			TournSubscr_Autopublish& operator=(const TournSubscr_Autopublish&) = default;
#endif
#endif
		};

		struct TournSubscr_PrizePoolUnit	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_PRIZEPOOLUNIT_LEAF }
		{
			// 144 - prizePoolUnit,prizePoolToPublish,prizePoolMoneyToPublish
			BYTE prizePoolUnit;
			INT32 prizePoolToPublish;
			INT32 prizePoolMoneyToPublish;

			TournSubscr_PrizePoolUnit();
			void clear();
			bool equals(const TournSubscr_PrizePoolUnit&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_OptEarlyStart	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_OPTEARLYSTART_LEAF }
		{
			// 1 - options
			BYTE options;

			TournSubscr_OptEarlyStart();
			void clear();
			bool equals(const TournSubscr_OptEarlyStart&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_NextMilestoneEvent	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_MILESTONE_LEAF }
		{
			//! b444 <FIXME>TournMileStonePrize</FIXME>  - indicator,firstMilestone,nextMilestone,tables, <FIXME>prize</FIXME> 
			bool indicator;
			UINT32 firstMilestone;
			UINT32 nextMilestone;
			UINT32 tables;
			TournMileStonePrize prize;

			TournSubscr_NextMilestoneEvent();
			void clear();
			bool equals(const TournSubscr_NextMilestoneEvent&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_NextMilestoneEvent(TournSubscr_NextMilestoneEvent&&);
			TournSubscr_NextMilestoneEvent& operator=(TournSubscr_NextMilestoneEvent&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_NextMilestoneEvent(const TournSubscr_NextMilestoneEvent&) = default;
			TournSubscr_NextMilestoneEvent& operator=(const TournSubscr_NextMilestoneEvent&) = default;
#endif
#endif
		};

		struct TournSubscr_SpinGoPrize_Vector
		{
			// 4<4> - numPrizes<prizes>
			ThinAtf::LAtfVector< INT32, 4 > prizes;

			TournSubscr_SpinGoPrize_Vector();
			void clear();
			bool equals(const TournSubscr_SpinGoPrize_Vector&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_SpinGoPrize_Vector(TournSubscr_SpinGoPrize_Vector&&);
			TournSubscr_SpinGoPrize_Vector& operator=(TournSubscr_SpinGoPrize_Vector&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_SpinGoPrize_Vector(const TournSubscr_SpinGoPrize_Vector&) = default;
			TournSubscr_SpinGoPrize_Vector& operator=(const TournSubscr_SpinGoPrize_Vector&) = default;
#endif
#endif
		};

		struct TournSubscr_SpinGoPrize	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_SAG_LEAF }
		{
			// 4<8>44<I>44<8ssI>44<4<4>>4tbs4s48 - numSpinGoLevels<spinGoLevels>,spinGoMarker,numTickets<tickets>,level,numTargetReferences<tournamentId,server,instance,name>,spinGoMaxCashout,numSpinGoMaxLevels<numPrizes<prizes>>,animationType,animationEndTime,isJackpot,winner,freeBetStake,freeBetCurrency,freeBetsCampaignId,freeBetsCampaignId64
			ThinAtf::LAtfVector< INT64, 4 > spinGoLevels;
			UINT32 spinGoMarker;
			ThinAtf::LAtfVector< I18nPString, 4 > tickets;
			UINT32 level;
			ThinAtf::LAtfVector< TournSubscr_SpinGoPrize_TargetReference, 4 > targetReferences;
			INT32 spinGoMaxCashout;
			ThinAtf::LAtfVector< TournSubscr_SpinGoPrize_Vector, 4 > spinGoMaxLevels;
			UINT32 animationType;
			SrvTime animationEndTime;
			bool isJackpot;
			PString winner;
			INT32 freeBetStake;
			PString freeBetCurrency;
			UINT32 freeBetsCampaignId;
			UINT64 freeBetsCampaignId64;

			TournSubscr_SpinGoPrize();
			void clear();
			bool equals(const TournSubscr_SpinGoPrize&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_SpinGoPrize(TournSubscr_SpinGoPrize&&);
			TournSubscr_SpinGoPrize& operator=(TournSubscr_SpinGoPrize&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_SpinGoPrize(const TournSubscr_SpinGoPrize&) = default;
			TournSubscr_SpinGoPrize& operator=(const TournSubscr_SpinGoPrize&) = default;
#endif
#endif
		};

		struct TournSubscr_PerHand	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_PER_HAND }
		{
			// b444 - intervalInHands,currentHandInLevel,totalHandsInLevel,handsUntilAllInLevel
			bool intervalInHands;
			INT32 currentHandInLevel;
			INT32 totalHandsInLevel;
			INT32 handsUntilAllInLevel;

			TournSubscr_PerHand();
			void clear();
			bool equals(const TournSubscr_PerHand&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_BeatTheClock	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_BEATTHECLOCK }
		{
			// 2 - btcStartAnimation
			INT16 btcStartAnimation;

			TournSubscr_BeatTheClock();
			void clear();
			bool equals(const TournSubscr_BeatTheClock&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournSubscr_SpinGoSpinner	// Path { PUBL_TOURN2004_ROOT, PUBL_TOURN2004_DYNAMIC_TRIPLE_SPINNER }
		{
			// t44444bs - time,choice,spinner1,spinner2,spinner3,cashout,timeout,spinnerStr
			SrvTime time;
			INT32 choice;
			INT32 spinner1;
			INT32 spinner2;
			INT32 spinner3;
			INT32 cashout;
			bool timeout;
			PString spinnerStr;

			TournSubscr_SpinGoSpinner();
			void clear();
			bool equals(const TournSubscr_SpinGoSpinner&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSubscr_SpinGoSpinner(TournSubscr_SpinGoSpinner&&);
			TournSubscr_SpinGoSpinner& operator=(TournSubscr_SpinGoSpinner&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSubscr_SpinGoSpinner(const TournSubscr_SpinGoSpinner&) = default;
			TournSubscr_SpinGoSpinner& operator=(const TournSubscr_SpinGoSpinner&) = default;
#endif
#endif
		};

		struct TournSimpleAutoDealSubscr
		{
			// 41844<s444>411111s4<14> - dealGeneration,state,timeout,dealFailureState,numParticipantsInfo<name,chips,payment0,payment1>,dealExclusion,type0,type1,playerAgreedType,userAgreed0,userAgreed1,currency,numDealPayouts<position,noDealPayout>
			INT32 dealGeneration;
			INT8 state;
			INT64 timeout;
			INT32 dealFailureState;
			ThinAtf::LAtfVector< P_ParticipantsInfo, 4 > participantsInfo;
			INT32 dealExclusion;
			INT8 type0;
			INT8 type1;
			INT8 playerAgreedType;
			INT8 userAgreed0;
			INT8 userAgreed1;
			PString currency;
			ThinAtf::LAtfVector< P_DealPayout, 4 > dealPayouts;

			TournSimpleAutoDealSubscr();
			void clear();
			bool equals(const TournSimpleAutoDealSubscr&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSimpleAutoDealSubscr(TournSimpleAutoDealSubscr&&);
			TournSimpleAutoDealSubscr& operator=(TournSimpleAutoDealSubscr&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSimpleAutoDealSubscr(const TournSimpleAutoDealSubscr&) = default;
			TournSimpleAutoDealSubscr& operator=(const TournSimpleAutoDealSubscr&) = default;
#endif
#endif
		};

		struct TournExtraSubscr_Stakes	// Path { PUBL_TOURN_INFO_ROOT, PUBL_TOURN_INFO_NEWSTAKES_LEAF }
		{
			//! 4<M( <FIXME>TableCommonThin::TableStakes</FIXME> 44)>4444< <FIXME>BlindLevelIntervalRule</FIXME> > - numStakeLevels<M( <FIXME>stakes</FIXME> ,levelTime,addTimeBank)>,finalTableTimeBank,addRoundTimeBank,currRule,numNumRules< <FIXME>BlindLevelIntervalRule</FIXME> >
			ThinAtf::LAtfVector< ExtraInfo_StakesLevel, 4 > stakeLevels;
			UINT32 finalTableTimeBank;
			UINT32 addRoundTimeBank;
			INT32 currRule;
			ThinAtf::LAtfVector< BlindLevelIntervalRule, 4 > numRules;

			TournExtraSubscr_Stakes();
			void clear();
			bool equals(const TournExtraSubscr_Stakes&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_Stakes(TournExtraSubscr_Stakes&&);
			TournExtraSubscr_Stakes& operator=(TournExtraSubscr_Stakes&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_Stakes(const TournExtraSubscr_Stakes&) = default;
			TournExtraSubscr_Stakes& operator=(const TournExtraSubscr_Stakes&) = default;
#endif
#endif
		};

		struct TournExtraSubscr_Breaks	// Path { PUBL_TOURN_INFO_ROOT, PUBL_TOURN_INFO_BREAKS_LEAF }
		{
			// 4<44> - numBreaks<breakTime,breakLength>
			ThinAtf::LAtfVector< P_BreakPub, 4 > breaks;

			TournExtraSubscr_Breaks();
			void clear();
			bool equals(const TournExtraSubscr_Breaks&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_Breaks(TournExtraSubscr_Breaks&&);
			TournExtraSubscr_Breaks& operator=(TournExtraSubscr_Breaks&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_Breaks(const TournExtraSubscr_Breaks&) = default;
			TournExtraSubscr_Breaks& operator=(const TournExtraSubscr_Breaks&) = default;
#endif
#endif
		};

		struct TournExtraSubscr_HandByHand	// Path { PUBL_TOURN_INFO_ROOT, PUBL_TOURN_INFO_HANDBYHAND_LEAF }
		{
			//! 4< <FIXME>TournCommonThin::P_Event</FIXME> >sb4 - numHandByHandRanges< <FIXME>TournCommonThin::P_Event</FIXME> >,targetServer,isSatelliteData,fallBackSatTargetSize
			ThinAtf::LAtfVector< TournCommonThin::P_Event, 4 > handByHandRanges;
			PString targetServer;
			bool isSatelliteData;
			UINT32 fallBackSatTargetSize;

			TournExtraSubscr_HandByHand();
			void clear();
			bool equals(const TournExtraSubscr_HandByHand&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_HandByHand(TournExtraSubscr_HandByHand&&);
			TournExtraSubscr_HandByHand& operator=(TournExtraSubscr_HandByHand&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_HandByHand(const TournExtraSubscr_HandByHand&) = default;
			TournExtraSubscr_HandByHand& operator=(const TournExtraSubscr_HandByHand&) = default;
#endif
#endif
		};

		// TODO replace ExtraInfo_Prizes with corresponding data struct from TournScript
		struct TournExtraSubscr_Prize	// Path { PUBL_TOURN_INFO_ROOT, PUBL_TOURN_INFO_PRIZES_LEAF }
		{
			// 44444444<4444<41>> - zero,creditPlayer,returnBuyInValue,rebuyPrice,rebuyRake,addOnPrice,addOnRake,numPrizes<min,max,numTickets,numWinners<amount,percent>>
			UINT32 zero;
			UINT32 creditPlayer;
			UINT32 returnBuyInValue;
			INT32 rebuyPrice;
			INT32 rebuyRake;
			INT32 addOnPrice;
			INT32 addOnRake;
			ThinAtf::LAtfVector< TournExtraSubscr_Prize_Prize, 4 > prizes;

			TournExtraSubscr_Prize();
			void clear();
			bool equals(const TournExtraSubscr_Prize&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_Prize(TournExtraSubscr_Prize&&);
			TournExtraSubscr_Prize& operator=(TournExtraSubscr_Prize&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_Prize(const TournExtraSubscr_Prize&) = default;
			TournExtraSubscr_Prize& operator=(const TournExtraSubscr_Prize&) = default;
#endif
#endif
		};

		struct TournExtraSubscr_Rake_SitesPerCountry
		{
			// s4 - country,sites
			PString country;
			UINT32 sites;

			TournExtraSubscr_Rake_SitesPerCountry();
			void clear();
			bool equals(const TournExtraSubscr_Rake_SitesPerCountry&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_Rake_SitesPerCountry(TournExtraSubscr_Rake_SitesPerCountry&&);
			TournExtraSubscr_Rake_SitesPerCountry& operator=(TournExtraSubscr_Rake_SitesPerCountry&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_Rake_SitesPerCountry(const TournExtraSubscr_Rake_SitesPerCountry&) = default;
			TournExtraSubscr_Rake_SitesPerCountry& operator=(const TournExtraSubscr_Rake_SitesPerCountry&) = default;
#endif
#endif
		};

		struct TournExtraSubscr_Rake_SitesPerCountryEx
		{
			// sm - country,sitesEx
			PString country;
			PSiteMask sitesEx;

			TournExtraSubscr_Rake_SitesPerCountryEx();
			void clear();
			bool equals(const TournExtraSubscr_Rake_SitesPerCountryEx&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_Rake_SitesPerCountryEx(TournExtraSubscr_Rake_SitesPerCountryEx&&);
			TournExtraSubscr_Rake_SitesPerCountryEx& operator=(TournExtraSubscr_Rake_SitesPerCountryEx&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_Rake_SitesPerCountryEx(const TournExtraSubscr_Rake_SitesPerCountryEx&) = default;
			TournExtraSubscr_Rake_SitesPerCountryEx& operator=(const TournExtraSubscr_Rake_SitesPerCountryEx&) = default;
#endif
#endif
		};

		struct TournExtraSubscr_Rake	// Path { PUBL_TOURN_INFO_ROOT, PUBL_TOURN_INFO_REBUYRAKECOUNTRIES_LEAF }
		{
			// 444<s4>mm4<sm> - sites4AllCountries,sitesNoRake,numSitesPerCountry<country,sites>,sites4AllCountriesEx,sitesNoRakeEx,numSitesPerCountryEx<country,sitesEx>
			UINT32 sites4AllCountries;
			UINT32 sitesNoRake;
			ThinAtf::LAtfVector< TournExtraSubscr_Rake_SitesPerCountry , 4 > sitesPerCountry;

			PSiteMask sites4AllCountriesEx;
			PSiteMask sitesNoRakeEx;
			ThinAtf::LAtfVector< TournExtraSubscr_Rake_SitesPerCountryEx , 4 > sitesPerCountryEx;

			TournExtraSubscr_Rake();
			void clear();
			bool equals(const TournExtraSubscr_Rake&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournExtraSubscr_Rake(TournExtraSubscr_Rake&&);
			TournExtraSubscr_Rake& operator=(TournExtraSubscr_Rake&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournExtraSubscr_Rake(const TournExtraSubscr_Rake&) = default;
			TournExtraSubscr_Rake& operator=(const TournExtraSubscr_Rake&) = default;
#endif
#endif
		};

		struct TournStormSubscr
		{
			// b4<4>4<M()> - stormAllowed,numPowerCostBase<powerCostBase>,numPowers<M()>
			bool stormAllowed;
			ThinAtf::LAtfVector< INT32, 4 > powerCostBase;
			ThinAtf::LAtfVector< ThinAtf::CopyableMsgBody, 4 > powers;

			TournStormSubscr();
			void clear();
			bool equals(const TournStormSubscr&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournStormSubscr(TournStormSubscr&&);
			TournStormSubscr& operator=(TournStormSubscr&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournStormSubscr(const TournStormSubscr&) = default;
			TournStormSubscr& operator=(const TournStormSubscr&) = default;
#endif
#endif
		};

		struct TournSatelliteDataSubscr_Stat
		{
			// 4s444114411144s2s44481I84m - tournamentId,server,buyIn,rake,fppBuyIn,isRestricted,isPlayMoney,minPlayers,tournFlags,game,isHiLo,structure,tournSites,maxPerTable,admissionId,chatLang,currency,knockout,tournFlagsServInt,scalePM,admissionPrice,speedDisplay,name,tournFlags2,activeFlags,tournSitesEx
			UINT32 tournamentId;
			PString server;
			UINT32 buyIn;
			UINT32 rake;
			UINT32 fppBuyIn;
			BYTE isRestricted;
			BYTE isPlayMoney;
			UINT32 minPlayers;
			UINT32 tournFlags;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;
			UINT32 tournSites;
			UINT32 maxPerTable;
			PString admissionId;
			UINT16 chatLang;
			PString currency;
			UINT32 knockout;
			UINT32 tournFlagsServInt;
			UINT32 scalePM;
			INT64 admissionPrice;
			BYTE speedDisplay;
			I18nPString name;
			UINT64 tournFlags2;
			UINT32 activeFlags;
			PSiteMask tournSitesEx;

			TournSatelliteDataSubscr_Stat();
			void clear();
			bool equals(const TournSatelliteDataSubscr_Stat&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournSatelliteDataSubscr_Stat(TournSatelliteDataSubscr_Stat&&);
			TournSatelliteDataSubscr_Stat& operator=(TournSatelliteDataSubscr_Stat&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournSatelliteDataSubscr_Stat(const TournSatelliteDataSubscr_Stat&) = default;
			TournSatelliteDataSubscr_Stat& operator=(const TournSatelliteDataSubscr_Stat&) = default;
#endif
#endif
		};

		struct TournSatelliteDataSubscr_Dyna
		{
			// t441411 - whenStart,status,entrants,publProp,prizePoolToPublish,prizePoolUnit,mixTournSatellite
			SrvTime whenStart;
			UINT32 status;
			UINT32 entrants;
			BYTE publProp;
			UINT32 prizePoolToPublish;
			BYTE prizePoolUnit;
			INT8 mixTournSatellite;

			TournSatelliteDataSubscr_Dyna();
			void clear();
			bool equals(const TournSatelliteDataSubscr_Dyna&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		// PYR-61693: FTD-246
		struct LightTournData
		{
			// 4t4144 - status,whenStart,prizePoolToPublish,prizePoolUnit,prizePoolMoneyToPublish,numUsersReg
			UINT32 status;
			SrvTime whenStart;
			INT32 prizePoolToPublish;
			BYTE prizePoolUnit;
			INT32 prizePoolMoneyToPublish;
			UINT32 numUsersReg;

			LightTournData();
			void clear();
			bool equals(const LightTournData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournI18nSubscr_Name	// Path { PUBL_TOURN_I18N_ROOT, PUBL_TOURN_I18N_NAME_LEAF }
		{
			// s - name
			PString name;

			TournI18nSubscr_Name();
			void clear();
			bool equals(const TournI18nSubscr_Name&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournI18nSubscr_Name(TournI18nSubscr_Name&&);
			TournI18nSubscr_Name& operator=(TournI18nSubscr_Name&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournI18nSubscr_Name(const TournI18nSubscr_Name&) = default;
			TournI18nSubscr_Name& operator=(const TournI18nSubscr_Name&) = default;
#endif
#endif
		};

		struct TournPlayerDataSubscr_User	// path {0, playerNum, PUBL_USER_STATIC_LEAF}
		{
			//! ss4414s142 <FIXME>BrandProtThin::BrandImageList</FIXME> 8s448 - name,city,place,placeTo,publProp,bounty,country,showCity,imageId,entryNum, <FIXME>brandImageList</FIXME> ,tournId,admission,tChips,tournUsersFlags,pppEntryId
			PString name;
			PString city;
			INT32 place;
			INT32 placeTo;
			BYTE publProp;
			INT32 bounty;
			PString country;
			BYTE showCity;
			UINT32 imageId;
			UINT16 entryNum;
			BrandProtThin::BrandImageList brandImageList;
			UINT64 tournId;
			PString admission;
			INT32 tChips;
			UINT32 tournUsersFlags;
			UINT64 pppEntryId;

			TournPlayerDataSubscr_User();
			void clear();
			bool equals(const TournPlayerDataSubscr_User&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournPlayerDataSubscr_User(TournPlayerDataSubscr_User&&);
			TournPlayerDataSubscr_User& operator=(TournPlayerDataSubscr_User&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournPlayerDataSubscr_User(const TournPlayerDataSubscr_User&) = default;
			TournPlayerDataSubscr_User& operator=(const TournPlayerDataSubscr_User&) = default;
#endif
#endif
		};

		struct TournPlayerDataSubscr_Chips	// path {0, playerNum, PUBL_USER_DYNAMIC_LEAF}
		{
			// 424 - chips,rank,award
			UINT32 chips;
			UINT16 rank;
			UINT32 award;

			TournPlayerDataSubscr_Chips();
			void clear();
			bool equals(const TournPlayerDataSubscr_Chips&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournPlayerDataSubscr_Knockouts	// path {0, playerNum, PUBL_USER_KNOCKOUT_LEAF}
		{
			// 444 - knockouts,headBounty,collectedTotal
			INT32 knockouts;
			INT32 headBounty;
			INT32 collectedTotal;

			TournPlayerDataSubscr_Knockouts();
			void clear();
			bool equals(const TournPlayerDataSubscr_Knockouts&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournPlayerDataSubscr_Ticket	// path {0, playerNum, PUBL_USER_TICKET_LEAF}
		{
			// 4s - nextTournId,ticketAdmission
			UINT32 nextTournId;
			PString ticketAdmission;

			TournPlayerDataSubscr_Ticket();
			void clear();
			bool equals(const TournPlayerDataSubscr_Ticket&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournPlayerDataSubscr_Ticket(TournPlayerDataSubscr_Ticket&&);
			TournPlayerDataSubscr_Ticket& operator=(TournPlayerDataSubscr_Ticket&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournPlayerDataSubscr_Ticket(const TournPlayerDataSubscr_Ticket&) = default;
			TournPlayerDataSubscr_Ticket& operator=(const TournPlayerDataSubscr_Ticket&) = default;
#endif
#endif
		};

		struct TournTableData_Stat	// path {PUBL_TABLES_ROOT, tableNum, PUBL_TABLE_STATIC_LEAF}
		{
			// 4sss48 - tableId,name,server,serverObj,placeHolder,tableId64
			UINT32 tableId;
			PString name;
			PString server;
			PString serverObj;
			INT32 placeHolder;
			UINT64 tableId64;

			TournTableData_Stat();
			void clear();
			bool equals(const TournTableData_Stat&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournTableData_Stat(TournTableData_Stat&&);
			TournTableData_Stat& operator=(TournTableData_Stat&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournTableData_Stat(const TournTableData_Stat&) = default;
			TournTableData_Stat& operator=(const TournTableData_Stat&) = default;
#endif
#endif
		};

		struct TournTableData_Dyna	// path {PUBL_TABLES_ROOT, tableNum, PUBL_TABLE_DYNAMIC_LEAF}
		{
			// 444 - numUsers,minStack,maxStack
			UINT32 numUsers;
			UINT32 minStack;
			UINT32 maxStack;

			TournTableData_Dyna();
			void clear();
			bool equals(const TournTableData_Dyna&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
		};

		struct TournTablePlayerSubscr
		{
			//! M(1s4s11444 <FIXME>BrandProtThin::BrandImageList</FIXME> ) - M(position,userName,chips,cityData,showCity,publProp,headBounty,collectedBountyKnockouts,imageId, <FIXME>brandImageList</FIXME> )
			BYTE position;
			PString userName;
			INT32 chips;
			PString cityData;
			BYTE showCity;
			BYTE publProp;
			INT32 headBounty;
			INT32 collectedBountyKnockouts;
			UINT32 imageId;
			BrandProtThin::BrandImageList brandImageList;

			TournTablePlayerSubscr();
			void clear();
			bool equals(const TournTablePlayerSubscr&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournTablePlayerSubscr(TournTablePlayerSubscr&&);
			TournTablePlayerSubscr& operator=(TournTablePlayerSubscr&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournTablePlayerSubscr(const TournTablePlayerSubscr&) = default;
			TournTablePlayerSubscr& operator=(const TournTablePlayerSubscr&) = default;
#endif
#endif
		};

		struct TournTableWithPlayersSubscr	// path {PUBL_TABLES_ROOT, tableNum, 0}
		{
			//! 11<M(1s4s11444 <FIXME>BrandProtThin::BrandImageList</FIXME> )> - oldSubCount,numPlayers<M(position,userName,chips,cityData,showCity,publProp,headBounty,collectedBountyKnockouts,imageId, <FIXME>brandImageList</FIXME> )>
			BYTE oldSubCount;
			ThinAtf::LAtfVector< TournTablePlayerSubscr, 1 > players;

			TournTableWithPlayersSubscr();
			void clear();
			bool equals(const TournTableWithPlayersSubscr&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			TournTableWithPlayersSubscr(TournTableWithPlayersSubscr&&);
			TournTableWithPlayersSubscr& operator=(TournTableWithPlayersSubscr&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			TournTableWithPlayersSubscr(const TournTableWithPlayersSubscr&) = default;
			TournTableWithPlayersSubscr& operator=(const TournTableWithPlayersSubscr&) = default;
#endif
#endif
		};
	};

	namespace player
	{
		struct P_UserTicketData
		{
			// s44 - admissionId,totalCount,reserved
			PString admissionId;
			UINT32 totalCount;
			UINT32 reserved;

			P_UserTicketData();
			void clear();
			bool equals(const P_UserTicketData&) const;
			const char *toTraceString(PString& _str) const;
			void composeMsg(CommMsgBody& _msg) const;
			void parseMsg(CommMsgParser& _parser);
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			P_UserTicketData(P_UserTicketData&&);
			P_UserTicketData& operator=(P_UserTicketData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			P_UserTicketData(const P_UserTicketData&) = default;
			P_UserTicketData& operator=(const P_UserTicketData&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_TOURN_REG_INFO
		{
			// s44 - userId,tournId,tournRegInfoFlags
			PString userId;
			UINT32 tournId;
			UINT32 tournRegInfoFlags;

			Protocol_MSG_LOBBY_TOURN_REG_INFO();
			void clear();
			bool equals(const Protocol_MSG_LOBBY_TOURN_REG_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBY_TOURN_REG_INFO; }
			static const char *getMsgIdString() { return "MSG_LOBBY_TOURN_REG_INFO"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_TOURN_REG_INFO(Protocol_MSG_LOBBY_TOURN_REG_INFO&&);
			Protocol_MSG_LOBBY_TOURN_REG_INFO& operator=(Protocol_MSG_LOBBY_TOURN_REG_INFO&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_TOURN_REG_INFO(const Protocol_MSG_LOBBY_TOURN_REG_INFO&) = default;
			Protocol_MSG_LOBBY_TOURN_REG_INFO& operator=(const Protocol_MSG_LOBBY_TOURN_REG_INFO&) = default;
#endif
#endif
		};

		struct Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY
		{
			//! 2 <FIXME_COND_IF> s <FIXME>TournCommonThin::Error_InsufficientFunds32</FIXME>  <FIXME_COND_ELSE> ss4b <FIXME>TournCommonThin::TournSpendLimit</FIXME>  <FIXME_COND_ELSE> ss4b <FIXME_COND_ELSE> 444s11444444s111sbM()M()ts84144144b84<s44>8 <FIXME>TournCommonThin::TournSpendLimit</FIXME>  <FIXME_COND_ENDIF>  - errCode <FIXME_COND_IF> ,errDescr, <FIXME>errInfo</FIXME>  <FIXME_COND_ELSE> ,errDescr,currency,buyInAndRake,enoughMoneyInOtherCurrency, <FIXME>tournSpendLimit</FIXME>  <FIXME_COND_ELSE> ,errDescr,currency,buyInAndRake,enoughMoneyInOtherCurrency <FIXME_COND_ELSE> ,buyIn,rake,fpp,admissionId,isPlayMoney,isPwdProtected,userChips,userPlayChips,userFpp,numTickets,tChips,wChips,preRegMsg,game,isHiLo,structure,currency,enoughMoneyInOtherCurrency,M(),M(),whenStartAbs,tournName,playChips64,scalePM,speed,minPlayers,maxPlayers,maxPerTable,tournFlags,knockout,isProportional,admPrice,numEffectiveAdmissions<admissionId,totalCount,reserved>,tournFlags2, <FIXME>tournSpendLimit</FIXME>  <FIXME_COND_ENDIF> 
			INT16 errCode;

			PString errDescr;
			TournCommonThin::Error_InsufficientFunds32 errInfo;

			PString currency;
			UINT32 buyInAndRake;
			bool enoughMoneyInOtherCurrency;
			TournCommonThin::TournSpendLimit tournSpendLimit;

			UINT32 buyIn;
			UINT32 rake;
			UINT32 fpp;
			PString admissionId;
			BYTE isPlayMoney;
			BYTE isPwdProtected;
			UINT32 userChips;
			UINT32 userPlayChips;
			UINT32 userFpp;
			UINT32 numTickets;
			UINT32 tChips;
			UINT32 wChips;
			PString preRegMsg;
			BYTE game;
			BYTE isHiLo;
			BYTE structure;

			ThinAtf::CopyableMsgBody currencyContext;
			ThinAtf::CopyableMsgBody clientCurrencyContext;
			SrvTime whenStartAbs;
			PString tournName;
			UINT64 playChips64;
			INT32 scalePM;
			BYTE speed;
			UINT32 minPlayers;
			UINT32 maxPlayers;
			BYTE maxPerTable;
			UINT32 tournFlags;
			UINT32 knockout;
			bool isProportional;
			INT64 admPrice;
			ThinAtf::LAtfVector< P_UserTicketData, 4 > effectiveAdmissions;
			INT64 tournFlags2;

			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY();
			void clear();
			bool equals(const Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MSG_LOBBY_TOURN_REG_INFO_REPLY; }
			static const char *getMsgIdString() { return "MSG_LOBBY_TOURN_REG_INFO_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY(Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&&);
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY& operator=(Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY(const Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&) = default;
			Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY& operator=(const Protocol_MSG_LOBBY_TOURN_REG_INFO_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_REGISTER_USER
		{
			// s444s144M()s111t - userId,buyinRM,buyinPM,buyinFpp,password,useTicket,buyinTChips,buyinWChips,M(),currency,game,hiLo,structure,startTime
			PString userId;
			UINT32 buyinRM;
			UINT32 buyinPM;
			UINT32 buyinFpp;
			PString password;
			BYTE useTicket;
			UINT32 buyinTChips;
			UINT32 buyinWChips;
			ThinAtf::CopyableMsgBody currencyContext;
			// the following is not parsed/used by server
			PString currency;
			BYTE game;
			BYTE hiLo;
			BYTE structure;
			SrvTime startTime;

			Protocol_MTL_LOBBY_REGISTER_USER();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_REGISTER_USER&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_REGISTER_USER; }
			static const char *getMsgIdString() { return "MTL_LOBBY_REGISTER_USER"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_REGISTER_USER(Protocol_MTL_LOBBY_REGISTER_USER&&);
			Protocol_MTL_LOBBY_REGISTER_USER& operator=(Protocol_MTL_LOBBY_REGISTER_USER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_REGISTER_USER(const Protocol_MTL_LOBBY_REGISTER_USER&) = default;
			Protocol_MTL_LOBBY_REGISTER_USER& operator=(const Protocol_MTL_LOBBY_REGISTER_USER&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_REGISTER_USER_REPLY
		{
			//! 2s <FIXME_COND_IF> 2sbsss <FIXME_COND_ENDIF>  - errCode,errDescr <FIXME_COND_IF> ,maxAllins,registrationMsg,seatsAvailable,serverName,socialToken,clientNotification <FIXME_COND_ENDIF> 
			INT16 errCode;
			PString errDescr;

			INT16 maxAllins;
			PString registrationMsg;
			bool seatsAvailable;	// TODO: check name is appropriate
			PString serverName;
			PString socialToken;
			PString clientNotification;

			Protocol_MTL_LOBBY_REGISTER_USER_REPLY();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_REGISTER_USER_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_REGISTER_USER_REPLY; }
			static const char *getMsgIdString() { return "MTL_LOBBY_REGISTER_USER_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_REGISTER_USER_REPLY(Protocol_MTL_LOBBY_REGISTER_USER_REPLY&&);
			Protocol_MTL_LOBBY_REGISTER_USER_REPLY& operator=(Protocol_MTL_LOBBY_REGISTER_USER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_REGISTER_USER_REPLY(const Protocol_MTL_LOBBY_REGISTER_USER_REPLY&) = default;
			Protocol_MTL_LOBBY_REGISTER_USER_REPLY& operator=(const Protocol_MTL_LOBBY_REGISTER_USER_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_UNREGISTER_USER
		{
			// 4s - tournId,userName
			UINT32 tournId;	// TODO: need to introduce UINT64?
			PString userName;

			Protocol_MTL_LOBBY_UNREGISTER_USER();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_UNREGISTER_USER&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_UNREGISTER_USER; }
			static const char *getMsgIdString() { return "MTL_LOBBY_UNREGISTER_USER"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_UNREGISTER_USER(Protocol_MTL_LOBBY_UNREGISTER_USER&&);
			Protocol_MTL_LOBBY_UNREGISTER_USER& operator=(Protocol_MTL_LOBBY_UNREGISTER_USER&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_UNREGISTER_USER(const Protocol_MTL_LOBBY_UNREGISTER_USER&) = default;
			Protocol_MTL_LOBBY_UNREGISTER_USER& operator=(const Protocol_MTL_LOBBY_UNREGISTER_USER&) = default;
#endif
#endif
		};

		struct Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY
		{
			//! 2s <FIXME_COND_IF> 44444ss8 <FIXME_COND_ENDIF>  - errCode,errDescr <FIXME_COND_IF> ,refund,refundPlay,refundFpp,refundTChips,refundWChips,tournamentCurrency,refundCurrency,refundPlay64 <FIXME_COND_ENDIF> 
			INT16 errCode;
			PString errDescr;

			UINT32 refund;
			INT32 refundPlay;
			UINT32 refundFpp;
			UINT32 refundTChips;
			UINT32 refundWChips;
			PString tournamentCurrency;
			PString refundCurrency;
			UINT64 refundPlay64;

			Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY();
			void clear();
			bool equals(const Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_LOBBY_UNREGISTER_USER_REPLY; }
			static const char *getMsgIdString() { return "MTL_LOBBY_UNREGISTER_USER_REPLY"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY(Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY&&);
			Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY& operator=(Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY(const Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY&) = default;
			Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY& operator=(const Protocol_MTL_LOBBY_UNREGISTER_USER_REPLY&) = default;
#endif
#endif
		};

		struct Protocol_MTL_CLI_GOTO_FINISH
		{
			// 4ss4[t4s4s1b4444b1sb44ss44]b[Is]4444t4 - place,popupText,socialToken,nextScheduledTournId[startTime,clubId,clubName,tournId,tournName,gameType,isHiLo,buyin,rake,knockoutBounty,numPlayers,isRegistered,limit,currency,isPlayMoney,maxPlayers,tournState,server,serverObject,flags,scalePM],isNonFinalFlight[nextFlightLevelTargetTournName,nextFlightLevelTargetServer],headBounty,tournFinishUserFlags,award,collectedBountyAndKnockouts,eligibleForLateReEntryUntil,progressivePlusInitialBuyInTierId
			UINT32 place;
			PString popupText;
			PString socialToken;
			UINT32 nextScheduledTournId;

			SrvTime startTime;
			UINT32 clubId;
			PString clubName;
			UINT32 tournId;
			PString tournName;
			BYTE gameType;
			bool isHiLo;
			UINT32 buyin;
			UINT32 rake;
			UINT32 knockoutBounty;
			UINT32 numPlayers;
			bool isRegistered;
			BYTE limit;
			PString currency;
			bool isPlayMoney;
			UINT32 maxPlayers;
			UINT32 tournState;
			PString server;
			PString serverObject;
			UINT32 flags;
			INT32 scalePM;

			bool isNonFinalFlight;

			I18nPString nextFlightLevelTargetTournName;
			PString nextFlightLevelTargetServer;

			INT32 headBounty;
			UINT32 tournFinishUserFlags;
			INT32 award;
			INT32 collectedBountyAndKnockouts;
			SrvTime eligibleForLateReEntryUntil;
			UINT32 progressivePlusInitialBuyInTierId;

			Protocol_MTL_CLI_GOTO_FINISH();
			void clear();
			bool equals(const Protocol_MTL_CLI_GOTO_FINISH&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_CLI_GOTO_FINISH; }
			static const char *getMsgIdString() { return "MTL_CLI_GOTO_FINISH"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_CLI_GOTO_FINISH(Protocol_MTL_CLI_GOTO_FINISH&&);
			Protocol_MTL_CLI_GOTO_FINISH& operator=(Protocol_MTL_CLI_GOTO_FINISH&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_CLI_GOTO_FINISH(const Protocol_MTL_CLI_GOTO_FINISH&) = default;
			Protocol_MTL_CLI_GOTO_FINISH& operator=(const Protocol_MTL_CLI_GOTO_FINISH&) = default;
#endif
#endif
		};

		struct Protocol_MTL_CLI_GOTO_TABLE
		{
			// ssbs4b1b8424124 - serverAddr,serverObj,isPlayMoney,currency,chips,sittingIn,seat,onConnect,handId,stats,actionAmountOld,timeoutOld,action,actionAmount,timeout
			PString serverAddr;
			PString serverObj;
			bool isPlayMoney;
			PString currency;
			UINT32 chips;
			bool sittingIn;
			BYTE seat;
			bool onConnect;
			UINT64 handId;
			UINT32 stats;
			UINT16 actionAmountOld;	//???
			UINT32 timeoutOld;	//???
			BYTE action;
			UINT16 actionAmount;
			UINT32 timeout;

			Protocol_MTL_CLI_GOTO_TABLE();
			void clear();
			bool equals(const Protocol_MTL_CLI_GOTO_TABLE&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return MTL_CLI_GOTO_TABLE; }
			static const char *getMsgIdString() { return "MTL_CLI_GOTO_TABLE"; }
			static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_MTL_CLI_GOTO_TABLE(Protocol_MTL_CLI_GOTO_TABLE&&);
			Protocol_MTL_CLI_GOTO_TABLE& operator=(Protocol_MTL_CLI_GOTO_TABLE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_MTL_CLI_GOTO_TABLE(const Protocol_MTL_CLI_GOTO_TABLE&) = default;
			Protocol_MTL_CLI_GOTO_TABLE& operator=(const Protocol_MTL_CLI_GOTO_TABLE&) = default;
#endif
#endif
		};
	};
};

#endif
