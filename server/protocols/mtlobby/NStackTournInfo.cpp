/**
 * NStackTournInfo.cpp
 *
 * This file was auto-generated from NStackTournInfo.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor NStackTournInfo.txt
 */
 
#include "NStackTournInfo.h"

//=================================================================
//                    NStackTournInfoStruct
//=================================================================

TournClient::NStackTournInfoStruct::NStackTournInfoStruct()
{
	clear();
}

void TournClient::NStackTournInfoStruct::clear()
{
	initialStacks = 0;
	unitStackChips = 0;
	forceReloadAllStacksInLevel = 0;
	forceReloadAllStacksInMinutes = 0;
	reloadStacksOnlyWhenEmpty = false;
}

bool TournClient::NStackTournInfoStruct::equals(const NStackTournInfoStruct& _o) const
{
	return initialStacks == _o.initialStacks &&
		unitStackChips == _o.unitStackChips &&
		forceReloadAllStacksInLevel == _o.forceReloadAllStacksInLevel &&
		forceReloadAllStacksInMinutes == _o.forceReloadAllStacksInMinutes &&
		reloadStacksOnlyWhenEmpty == _o.reloadStacksOnlyWhenEmpty;
}

const char *TournClient::NStackTournInfoStruct::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("initialStacks=");
	_buf.appendInt(initialStacks);
	_buf.append(',');
	_buf.append("unitStackChips=");
	_buf.appendInt(unitStackChips);
	_buf.append(',');
	_buf.append("forceReloadAllStacksInLevel=");
	_buf.appendUint(forceReloadAllStacksInLevel);
	_buf.append(',');
	_buf.append("forceReloadAllStacksInMinutes=");
	_buf.appendUint(forceReloadAllStacksInMinutes);
	_buf.append(',');
	_buf.append("reloadStacksOnlyWhenEmpty=");
	_buf.appendUint(reloadStacksOnlyWhenEmpty);
	_buf.append('}');
	return _buf.c_str();
}

const char *TournClient::NStackTournInfoStruct::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("initialStacks", initialStacks, _buf);
	Atf::XmlElement::encodeAsXmlElement("unitStackChips", unitStackChips, _buf);
	Atf::XmlElement::encodeAsXmlElement("forceReloadAllStacksInLevel", forceReloadAllStacksInLevel, _buf);
	Atf::XmlElement::encodeAsXmlElement("forceReloadAllStacksInMinutes", forceReloadAllStacksInMinutes, _buf);
	Atf::XmlElement::encodeAsXmlElement("reloadStacksOnlyWhenEmpty", reloadStacksOnlyWhenEmpty, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool TournClient::NStackTournInfoStruct::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _str.length(), _element, _value, _type))
	{
		if (_element.equals("initialStacks"))
		{
			initialStacks = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("unitStackChips"))
		{
			unitStackChips = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("forceReloadAllStacksInLevel"))
		{
			forceReloadAllStacksInLevel = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("forceReloadAllStacksInMinutes"))
		{
			forceReloadAllStacksInMinutes = (UINT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("reloadStacksOnlyWhenEmpty"))
		{
			reloadStacksOnlyWhenEmpty = (*_value.ptr() == '1');
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void TournClient::NStackTournInfoStruct::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT32(initialStacks);
	_msg.composeINT32(unitStackChips);
	_msg.composeUINT32(forceReloadAllStacksInLevel);
	_msg.composeUINT32(forceReloadAllStacksInMinutes);
	_msg.composeBOOL(reloadStacksOnlyWhenEmpty);
}

void TournClient::NStackTournInfoStruct::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(initialStacks);
	_parser.parseINT32(unitStackChips);
	_parser.parseUINT32(forceReloadAllStacksInLevel);
	_parser.parseUINT32(forceReloadAllStacksInMinutes);
	_parser.parseBOOL(reloadStacksOnlyWhenEmpty);
}

const char *TournClient::NStackTournInfoStruct::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("initialStacks", initialStacks);
	_jsonstr.compose("unitStackChips", unitStackChips);
	_jsonstr.compose("forceReloadAllStacksInLevel", forceReloadAllStacksInLevel);
	_jsonstr.compose("forceReloadAllStacksInMinutes", forceReloadAllStacksInMinutes);
	_jsonstr.compose("reloadStacksOnlyWhenEmpty", reloadStacksOnlyWhenEmpty);
	return _buf.c_str();
}

void TournClient::NStackTournInfoStruct::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("initialStacks", initialStacks);
	_jparser.parseByNameThrow("unitStackChips", unitStackChips);
	_jparser.parseByNameThrow("forceReloadAllStacksInLevel", forceReloadAllStacksInLevel);
	_jparser.parseByNameThrow("forceReloadAllStacksInMinutes", forceReloadAllStacksInMinutes);
	_jparser.parseByNameThrow("reloadStacksOnlyWhenEmpty", reloadStacksOnlyWhenEmpty);
}

/* static */ void TournClient::NStackTournInfoStruct::validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	Atf::JSONStringValidatorWithChecker _jparser(_jsonString, _checker, _descr, _fieldsWithUnparsedContent);
	INT32 initialStacks; _jparser.validateByNameThrow("initialStacks", initialStacks);
	AtfValidator::validateInt(_descr, "initialStacks", initialStacks, _checker, __FILE__, __LINE__);
	INT32 unitStackChips; _jparser.validateByNameThrow("unitStackChips", unitStackChips);
	AtfValidator::validateInt(_descr, "unitStackChips", unitStackChips, _checker, __FILE__, __LINE__);
	UINT32 forceReloadAllStacksInLevel; _jparser.validateByNameThrow("forceReloadAllStacksInLevel", forceReloadAllStacksInLevel);
	AtfValidator::validateInt(_descr, "forceReloadAllStacksInLevel", forceReloadAllStacksInLevel, _checker, __FILE__, __LINE__);
	UINT32 forceReloadAllStacksInMinutes; _jparser.validateByNameThrow("forceReloadAllStacksInMinutes", forceReloadAllStacksInMinutes);
	AtfValidator::validateInt(_descr, "forceReloadAllStacksInMinutes", forceReloadAllStacksInMinutes, _checker, __FILE__, __LINE__);
	bool reloadStacksOnlyWhenEmpty; _jparser.validateByNameThrow("reloadStacksOnlyWhenEmpty", reloadStacksOnlyWhenEmpty);
	AtfValidator::validateInt(_descr, "reloadStacksOnlyWhenEmpty", reloadStacksOnlyWhenEmpty, _checker, __FILE__, __LINE__);
}

/*static*/ void TournClient::NStackTournInfoStruct::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	INT32 initialStacks; _parser.parseINT32(initialStacks);
	AtfValidator::validateInt(_descr, "initialStacks", initialStacks, _checker, __FILE__, __LINE__);
	INT32 unitStackChips; _parser.parseINT32(unitStackChips);
	AtfValidator::validateInt(_descr, "unitStackChips", unitStackChips, _checker, __FILE__, __LINE__);
	UINT32 forceReloadAllStacksInLevel; _parser.parseUINT32(forceReloadAllStacksInLevel);
	AtfValidator::validateInt(_descr, "forceReloadAllStacksInLevel", forceReloadAllStacksInLevel, _checker, __FILE__, __LINE__);
	UINT32 forceReloadAllStacksInMinutes; _parser.parseUINT32(forceReloadAllStacksInMinutes);
	AtfValidator::validateInt(_descr, "forceReloadAllStacksInMinutes", forceReloadAllStacksInMinutes, _checker, __FILE__, __LINE__);
	bool reloadStacksOnlyWhenEmpty; _parser.parseBOOL(reloadStacksOnlyWhenEmpty);
	AtfValidator::validateInt(_descr, "reloadStacksOnlyWhenEmpty", reloadStacksOnlyWhenEmpty, _checker, __FILE__, __LINE__);
}

