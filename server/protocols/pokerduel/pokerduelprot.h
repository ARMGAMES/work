/**
 * pokerduelprot.h
 *
 * This file was auto-generated from pokerduelprot.txt by ATF protocol generator. 
 * Do not edit this file directly!
 */

#ifndef ATF_PROTOCOL_DEFFILE_POKERDUELPROT_H
#define ATF_PROTOCOL_DEFFILE_POKERDUELPROT_H

#include "UserDefStructs.h"
#include "PokerDuel.h"
#include "ice/IceLobbyMsg.h"
#include "dbmmsg.h"
#include "i18n.strmap.h"


namespace pokerduel
{
	class ProtocolFactory
	{
	public:
		static Atf::MessageProtocol* createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId);
	};


	struct P_I18NLangStringPair
	{
		// 4s - locale,msg
		UINT32 locale;
		PString msg;

		P_I18NLangStringPair();
		void clear();
		bool equals(const P_I18NLangStringPair&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);
	};

	struct P_I18nPString
	{
		// 4<4s> - numV<locale,msg>
		Atf::LAtfVector< P_I18NLangStringPair, 4 > v;

		P_I18nPString();
		void clear();
		bool equals(const P_I18nPString&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);

		// @Override
		UINT32 size() const;

		// @Override
		const char* getPString(UINT32 locale = LOCALE_DEFAULT) const;

		// @Override
		void appendPString(const char* msg, UINT32 locale = LOCALE_DEFAULT);
	};

	struct XINT64	// use HEX string format in json
	{
		// 8 - value
		INT64 value;

		//@Override void parseMsg(Atf::MsgParserWithJSON& _parser)  // @no_thin_version
		//{
		//	PASSERT(false);   // not supported
		//}

		XINT64();
		void clear();
		bool equals(const XINT64&) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);

		// @Override
		const char *toTraceString(PString& _buf) const;

		// @Override
		const char *toJSONString(PString& _buf) const;

		// @Override
		void fromJSONString(const PString& _jsonString);

		// @Override
		operator INT64() const;

		// @Override
		operator UINT64() const;

		// @Override
		pokerduel::XINT64& operator=(INT64 v);

		// @Override
		pokerduel::XINT64& operator=(UINT64 v);
	};

	struct DuelTypeProperty
	{
		// 4s - id,value
		INT32 id;
		PString value;

		DuelTypeProperty();
		void clear();
		bool equals(const DuelTypeProperty&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);
	};

	struct DuelType
	{
		// M(44<4s>41444444488bs11144<s>44<4s>tt4444) - M(duelTypeId,numV<locale,msg>,siteMask,status,matchType,numHands,smallBlind,bigBlind,startingChips,timeToAct_Deprecated,timerBank,buyIn,rake,isPlayMoney,currency,game,structure,speedDisplay,tournFlags,numAdmissions<admissions>,destroyDelay_Deprecated,numProperties<id,value>,fromDate,toDate,timeBankIncrement,timeoutTimeBankIncrement,randomMatchTimeout,pendingChallengeTimeout)
		UINT32 duelTypeId;
		P_I18nPString name;
		UINT32 siteMask;
		BYTE status;	//	enum DuelTypeStatus
		INT32 matchType;	//	enum DuelMatchType
		INT32 numHands;
		INT32 smallBlind;
		INT32 bigBlind;
		INT32 startingChips;
		INT32 timeToAct_Deprecated;	//
		INT32 timerBank;	// in minutes
		INT64 buyIn;
		INT64 rake;
		bool isPlayMoney;
		PString currency;	// for RM only, empty for PM game
		BYTE game;	//	enum HandType from dbm.h
		BYTE structure;	//	enum PotStruct from NotifyMessageDefs.h
		BYTE speedDisplay;	//	enum SpeedDisplayOptions from lobby.h
		UINT32 tournFlags;	//	TOURSCRIPT_ flags from tourndef.h.  Currently only TOURSCRIPT_FLAG_USETICKETORBUYIN is used.
		Atf::LAtfVector< PString , 4 > admissions;
		INT32 destroyDelay_Deprecated;	//	deprecated (PYR-39339)
		Atf::LAtfVector< DuelTypeProperty , 4 > properties;	//	for PROP_TYPE_VPP_MULTIPLIERS
		CommSrvTime fromDate;
		CommSrvTime toDate;
		INT32 timeBankIncrement;
		INT32 timeoutTimeBankIncrement;
		INT32 randomMatchTimeout;	//	PYR-37120. Timeout in minutes for a 'Random Match'
		INT32 pendingChallengeTimeout;	//	PYR-37120. Timeout in minutes for a pending player-to-player direct challenge (either sent by the player or received by the player)

		DuelType();
		void clear();
		bool equals(const DuelType&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);
	};

	struct DuelPlayer
	{
		// M(s444444) - M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId)
		PString userId;
		UINT32 userIntId;
		UINT32 licenseId;
		INT32 timeBankInSec;
		UINT32 imageId;
		UINT32 playerFlag;	//	enum eDuelUserFlags
		INT32 myLastOrdinalId;

		DuelPlayer();
		void clear();
		bool equals(const DuelPlayer&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);
	};

	struct RunningDuel
	{
		// M(8M(s444444)M(s444444)484tt14sbb) - M(duelId,M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),dbmId,tableId,duelTypeId,startTime,whenClosed,status,lastChatOrdinal,vppMultipliers,ticketUsed1,ticketUsed2)
		UINT64 duelId;
		DuelPlayer player1;
		DuelPlayer player2;
		INT32 dbmId;
		UINT64 tableId;
		UINT32 duelTypeId;
		CommSrvTime startTime;	//	when duel started
		CommSrvTime whenClosed;
		BYTE status;	//	enum DuelStatus
		INT32 lastChatOrdinal;
		PString vppMultipliers;
		bool ticketUsed1;	//	PYR-36881. Ticket was used for buy in for player 1.
		bool ticketUsed2;	//	PYR-36881. Ticket was used for buy in for player 2.

		RunningDuel();
		void clear();
		bool equals(const RunningDuel&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);
	};

	struct DuelChallenge
	{
		// M(84s4s444tt8sb44) - M(challengeId,dbmId,player1,player1ImageId,player2,player2ImageId,duelTypeId,response,whenOffered,whenResponse,buyInPlusRake,currency,isPlayMoney,ticketId1,challengeType)
		UINT64 challengeId;	//	key
		INT32 dbmId;
		PString player1;	//	challenger
		UINT32 player1ImageId;
		PString player2;	//	challengee
		UINT32 player2ImageId;
		UINT32 duelTypeId;
		INT32 response;	//	enum ChallengeResponse
		CommSrvTime whenOffered;	//	when challenge was offered
		CommSrvTime whenResponse;	//	when response received
		INT64 buyInPlusRake;
		PString currency;
		bool isPlayMoney;
		UINT32 ticketId1;	//	PYR-36881
		INT32 challengeType;	//	PYR-41822, enum DuelMatchType

		DuelChallenge();
		void clear();
		bool equals(const DuelChallenge&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);
	};

	struct IceDuelsAchievement
	{
		// 44<8>sssss - achievementId,numLevels<levels>,title,descr,descr2,descr3,infoMsg
		INT32 achievementId;
		Atf::LAtfVector< INT64, 4 > levels;
		PString title;
		PString descr;
		PString descr2;
		PString descr3;
		PString infoMsg;

		IceDuelsAchievement();
		void clear();
		bool equals(const IceDuelsAchievement&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);
	};

	struct IceDuelUserStats
	{
		// 4444884448 - userIntId,duelsWon,duelsLost,duelsDraw,totalEarnedChips,totalStartChips,handsWon,handsPlayed,winStreak,value
		INT32 userIntId;
		INT32 duelsWon;
		INT32 duelsLost;
		INT32 duelsDraw;
		INT64 totalEarnedChips;
		INT64 totalStartChips;
		INT32 handsWon;
		INT32 handsPlayed;
		INT32 winStreak;
		XINT64 bestFive;

		IceDuelUserStats();
		void clear();
		bool equals(const IceDuelUserStats&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);
	};

	struct IceDuelUserPVPStats
	{
		// 44444 - userIntId1,userIntId2,duelsWon,duelsLost,duelsDraw
		INT32 userIntId1;
		INT32 userIntId2;
		INT32 duelsWon;
		INT32 duelsLost;
		INT32 duelsDraw;

		IceDuelUserPVPStats();
		void clear();
		bool equals(const IceDuelUserPVPStats&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);
	};

	struct IceDuelsUserAchievement
	{
		// 48 - achievementId,value
		INT32 achievementId;
		XINT64 counter1;
		//INT32 level;
		//INT32 numLevels;
		//INT64 nextLevelCounter1;

		IceDuelsUserAchievement();
		void clear();
		bool equals(const IceDuelsUserAchievement&) const;
		const char *toTraceString(PString& _str) const;
		const char *toXmlString(const char *_element, PString& _str) const;
		bool fromXmlString(const PString& _str);
		void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
		void parseMsg(CommMsgParser& _parser);
		const char *toJSONString(PString& _str) const;
		void fromJSONString(const PString& _str);
		void validateJSONString(const PString& _str);
		void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
		void parseMsg(Atf::MsgParserWithJSON& _parser);
		static void validateMsg(CommMsgParser& _parser);
	};

	namespace dbm
	{
		struct DbmInfo
		{
			// 4ssss - dbmId,dbmAddressRO,dbmInstanceRO,dbmAddressRW,dbmInstanceRW
			INT32 dbmId;
			PString dbmAddressRO;
			PString dbmInstanceRO;
			PString dbmAddressRW;
			PString dbmInstanceRW;

			DbmInfo();
			void clear();
			bool equals(const DbmInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct Protocol_DBM_Q_PDUEL_GET_INIT_DATA : public Atf::MessageProtocol	// DLobby -> DBM
		{
			// empty message body

			Protocol_DBM_Q_PDUEL_GET_INIT_DATA();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_GET_INIT_DATA&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_GET_INIT_DATA; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_GET_INIT_DATA"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_GET_INIT_DATA : public Atf::MessageProtocol	// DBM -> DLobby
		{
			// 2[s|4<4ssss>4<M(44<4s>41444444488bs11144<s>44<4s>tt4444)>4<M(8M(s444444)M(s444444)484tt14sbb)>4<M(84s4s444tt8sb44)>] - errCode[errString|numDbmList<dbmId,dbmAddressRO,dbmInstanceRO,dbmAddressRW,dbmInstanceRW>,numDuelTypes<M(duelTypeId,numV<locale,msg>,siteMask,status,matchType,numHands,smallBlind,bigBlind,startingChips,timeToAct_Deprecated,timerBank,buyIn,rake,isPlayMoney,currency,game,structure,speedDisplay,tournFlags,numAdmissions<admissions>,destroyDelay_Deprecated,numProperties<id,value>,fromDate,toDate,timeBankIncrement,timeoutTimeBankIncrement,randomMatchTimeout,pendingChallengeTimeout)>,numRunningDuels<M(duelId,M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),dbmId,tableId,duelTypeId,startTime,whenClosed,status,lastChatOrdinal,vppMultipliers,ticketUsed1,ticketUsed2)>,numChallenges<M(challengeId,dbmId,player1,player1ImageId,player2,player2ImageId,duelTypeId,response,whenOffered,whenResponse,buyInPlusRake,currency,isPlayMoney,ticketId1,challengeType)>]
			INT16 errCode;

			PString errString;

			Atf::LAtfVector< DbmInfo, 4 > dbmList;
			Atf::LAtfVector< DuelType, 4 > duelTypes;
			Atf::LAtfVector< RunningDuel, 4 > runningDuels;
			Atf::LAtfVector< DuelChallenge, 4 > challenges;

			Protocol_DBM_A_PDUEL_GET_INIT_DATA();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_GET_INIT_DATA&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_GET_INIT_DATA; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_GET_INIT_DATA"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct RunningState
		{
			// 4s14 - stateSeq,state,algorId,flags
			UINT32 stateSeq;
			PString state;
			BYTE algorId;	// returned from encryptor server
			UINT32 flags;	// whether it's compressed, encrypted, etc

			RunningState();
			void clear();
			bool equals(const RunningState&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct CreatedDuelInfo	//	Dbm -> DLobby
		{
			// 884<8>M(s444444)M(s444444)s - duelId,tableId,numHandIds<handIds>,M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),vppMultipliers
			UINT64 duelId;
			UINT64 tableId;
			Atf::LAtfVector< UINT64, 4 > handIds;
			DuelPlayer player1;
			DuelPlayer player2;
			PString vppMultipliers;

			CreatedDuelInfo();
			void clear();
			bool equals(const CreatedDuelInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE : public Atf::MessageProtocol
		{
			// 84s14 - duelId,stateSeq,state,algorId,flags
			UINT64 duelId;
			RunningState runningState;

			Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_SAVE_RUNNING_STATE; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_SAVE_RUNNING_STATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_SAVE_RUNNING_STATE; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_SAVE_RUNNING_STATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct SingleStateUpdate
		{
			// 44s - userIntId,stateKey,stateValue
			UINT32 userIntId;
			INT32 stateKey;
			PString stateValue;

			SingleStateUpdate();
			void clear();
			bool equals(const SingleStateUpdate&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE : public Atf::MessageProtocol	// DServer -> DBM
		{
			// 84<44s> - duelId,numStates<userIntId,stateKey,stateValue>
			UINT64 duelId;
			Atf::LAtfVector< SingleStateUpdate, 4 > states;

			Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_UPDATE_RUNNING_STATE; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_UPDATE_RUNNING_STATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE : public Atf::MessageProtocol	// DBM -> DServer
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_UPDATE_RUNNING_STATE; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_UPDATE_RUNNING_STATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE : public Atf::MessageProtocol	// DServer -> DBM
		{
			// 8 - duelId
			UINT64 duelId;

			Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_GET_RUNNING_STATE; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_GET_RUNNING_STATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_GET_RUNNING_STATE : public Atf::MessageProtocol	// DBM -> DServer
		{
			// 2[s|84<4s14>4<44s>] - errCode[errString|duelId,numRunningStates<stateSeq,state,algorId,flags>,numRunningStates2<userIntId,stateKey,stateValue>]
			INT16 errCode;

			PString errString;

			UINT64 duelId;
			Atf::LAtfVector< RunningState, 4 > runningStates;
			Atf::LAtfVector< SingleStateUpdate, 4 > runningStates2;

			Protocol_DBM_A_PDUEL_GET_RUNNING_STATE();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_GET_RUNNING_STATE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_GET_RUNNING_STATE; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_GET_RUNNING_STATE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES : public Atf::MessageProtocol	//	DLobby -> DBM
		{
			// 4<M(44<4s>41444444488bs11144<s>44<4s>tt4444)>s - numNewDuelTypes<M(duelTypeId,numV<locale,msg>,siteMask,status,matchType,numHands,smallBlind,bigBlind,startingChips,timeToAct_Deprecated,timerBank,buyIn,rake,isPlayMoney,currency,game,structure,speedDisplay,tournFlags,numAdmissions<admissions>,destroyDelay_Deprecated,numProperties<id,value>,fromDate,toDate,timeBankIncrement,timeoutTimeBankIncrement,randomMatchTimeout,pendingChallengeTimeout)>,adminUserId
			Atf::LAtfVector< DuelType, 4 > newDuelTypes;
			PString adminUserId;

			Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_ADD_DUEL_TYPES; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_ADD_DUEL_TYPES"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES : public Atf::MessageProtocol	//	DBM -> DLobby
		{
			// 2[s|4<4>] - errCode[errString|numDuelTypeIds<duelTypeIds>]
			INT16 errCode;

			PString errString;

			Atf::LAtfVector< UINT32, 4 > duelTypeIds;

			Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_ADD_DUEL_TYPES; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_ADD_DUEL_TYPES"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE : public Atf::MessageProtocol	//	DLobby -> DBM
		{
			// 4s - duelTypeId,adminUserId
			UINT32 duelTypeId;
			PString adminUserId;

			Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_CANCEL_DUEL_TYPE; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_CANCEL_DUEL_TYPE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE : public Atf::MessageProtocol	//	DBM -> DLobby
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_CANCEL_DUEL_TYPE; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_CANCEL_DUEL_TYPE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS : public Atf::MessageProtocol	//	DLobby -> DBM
		{
			// 44s - duelTypeId,newStatus,adminUserId
			UINT32 duelTypeId;
			INT32 newStatus;
			PString adminUserId;

			Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS : public Atf::MessageProtocol	//	DBM -> DLobby
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS : public Atf::MessageProtocol	//	DLobby -> DBM
		{
			// 84st - duelId,newStatus,adminId,when
			UINT64 duelId;
			INT32 newStatus;	//	enum DuelStatus
			PString adminId;
			CommSrvTime when;

			Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_UPDATE_DUEL_STATUS; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_UPDATE_DUEL_STATUS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS : public Atf::MessageProtocol	// DBM -> DLobby
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_UPDATE_DUEL_STATUS; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_UPDATE_DUEL_STATUS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE : public Atf::MessageProtocol	//	DLobby -> dbm
		{
			// s4s44t8sb44 - userId1,userIntId1,userId2,userIntId2,duelTypeId,whenOffered,buyInPlusRake,currency,isPlayMoney,ticketId1,challengeType
			PString userId1;
			UINT32 userIntId1;
			PString userId2;
			UINT32 userIntId2;
			UINT32 duelTypeId;
			CommSrvTime whenOffered;
			INT64 buyInPlusRake;
			PString currency;
			bool isPlayMoney;
			UINT32 ticketId1;
			INT32 challengeType;	//	PYR-41822

			Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_CREATE_CHALLENGE; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_CREATE_CHALLENGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_CREATE_CHALLENGE : public Atf::MessageProtocol	//	dbm -> DLobby
		{
			// 2[s|8b] - errCode[errString|challengeID,ticketUsed]
			INT16 errCode;

			PString errString;

			UINT64 challengeID;
			bool ticketUsed;

			Protocol_DBM_A_PDUEL_CREATE_CHALLENGE();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_CREATE_CHALLENGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_CREATE_CHALLENGE; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_CREATE_CHALLENGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE : public Atf::MessageProtocol	//	DLobby -> dbm
		{
			// 8t444s4s4 - challengeID,whenResponded,timeBankInSeconds,siteMask,numHands,vppMultipliers,ticketIdPlayer2,player2,userIntId2
			UINT64 challengeID;
			CommSrvTime whenResponded;
			INT32 timeBankInSeconds;
			UINT32 siteMask;
			INT32 numHands;
			PString vppMultipliers;
			UINT32 ticketIdPlayer2;
			PString player2;	//	PYR-41822. For random pool only.
			UINT32 userIntId2;	//	PYR-41822. For random pool only.

			Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_ACCEPT_CHALLENGE; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_ACCEPT_CHALLENGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE : public Atf::MessageProtocol	//	dbm -> DLobby
		{
			// 2[s|884<8>M(s444444)M(s444444)sb] - errCode[errString|duelId,tableId,numHandIds<handIds>,M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),vppMultipliers,player2TicketUsed]
			INT16 errCode;

			PString errString;

			CreatedDuelInfo newDuelInfo;
			bool player2TicketUsed;

			Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_ACCEPT_CHALLENGE; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_ACCEPT_CHALLENGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE : public Atf::MessageProtocol	//	DLobby -> dbm
		{
			// 84ts4 - challengeID,challengeResponse,whenResponded,adminUserId,adminUserIntId
			UINT64 challengeID;
			INT32 challengeResponse;	//	enum ChallengeResponse
			CommSrvTime whenResponded;
			PString adminUserId;	//	valid for challengeResponse == ChallengeResponse_DuelTypeCancelled, or ChallengeResponse_CancelledByAdmin
			UINT32 adminUserIntId;

			Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_CANCEL_CHALLENGE; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_CANCEL_CHALLENGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE : public Atf::MessageProtocol	//	dbm -> DLobby
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_CANCEL_CHALLENGE; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_CANCEL_CHALLENGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT : public Atf::MessageProtocol
		{
			// 8s4bs88b - duelId,playerUserId,playerScore,isPlaymoney,currency,award,fppReward,isLastUser
			UINT64 duelId;
			PString playerUserId;
			INT32 playerScore;
			bool isPlaymoney;
			PString currency;
			INT64 award;
			INT64 fppReward;
			bool isLastUser;

			Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_SAVE_DUEL_RESULT; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_SAVE_DUEL_RESULT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_SAVE_DUEL_RESULT; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_SAVE_DUEL_RESULT"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct PlayerTimeBank
		{
			// s4 - userId,timeBankInSec
			PString userId;
			INT32 timeBankInSec;

			PlayerTimeBank();
			void clear();
			bool equals(const PlayerTimeBank&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK : public Atf::MessageProtocol
		{
			// 84<s4> - duelId,numPlayers<userId,timeBankInSec>
			UINT64 duelId;
			Atf::LAtfVector< PlayerTimeBank, 4 > players;

			Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_CANCEL_DUEL : public Atf::MessageProtocol
		{
			// 84s4t4 - duelId,duelTypeId,adminUserId,adminUserIntId,when,dbmId
			UINT64 duelId;
			UINT32 duelTypeId;
			PString adminUserId;
			UINT32 adminUserIntId;
			CommSrvTime when;
			INT32 dbmId;

			Protocol_DBM_Q_PDUEL_CANCEL_DUEL();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_CANCEL_DUEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_CANCEL_DUEL; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_CANCEL_DUEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_DBM_A_PDUEL_CANCEL_DUEL : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_CANCEL_DUEL();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_CANCEL_DUEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_CANCEL_DUEL; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_CANCEL_DUEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_ALLOWED_AT_PLAY : public Atf::MessageProtocol
		{
			// 2[s8b|4]44 - errCode[errString,availChips,enoughOnAllAccounts|ticketId],userIntId,imageId
			INT16 errCode;

			PString errString;
			INT64 availChips;
			bool enoughOnAllAccounts;

			UINT32 ticketId;

			UINT32 userIntId;
			UINT32 imageId;

			Protocol_DBM_A_ALLOWED_AT_PLAY();
			void clear() override;
			bool equals(const Protocol_DBM_A_ALLOWED_AT_PLAY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_ALLOWED_AT_PLAY; }
			const char *getMsgIdString() const override { return "DBM_A_ALLOWED_AT_PLAY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION : public Atf::MessageProtocol
		{
			// 8s - duelId,logLocation
			UINT64 duelId;
			PString logLocation;

			Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION();
			void clear() override;
			bool equals(const Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_UPDATE_DUEL_LOGLOCATION; }
			const char *getMsgIdString() const override { return "DBM_Q_UPDATE_DUEL_LOGLOCATION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION();
			void clear() override;
			bool equals(const Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_UPDATE_DUEL_LOGLOCATION; }
			const char *getMsgIdString() const override { return "DBM_A_UPDATE_DUEL_LOGLOCATION"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL : public Atf::MessageProtocol
		{
			// 8 - duelId
			UINT64 duelId;

			Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_UNPUBLISH_DUEL; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_UNPUBLISH_DUEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_UNPUBLISH_DUEL; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_UNPUBLISH_DUEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL : public Atf::MessageProtocol
		{
			// 8 - duelId
			UINT64 duelId;

			Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_GET_LASTCHATORDINAL; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_GET_LASTCHATORDINAL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL : public Atf::MessageProtocol
		{
			// 2[s|84] - errCode[errString|duelId,lastChatOrdinal]
			INT16 errCode;	// if no such record found, please do not return error, just set lastChatOrdinal = 0

			PString errString;

			UINT64 duelId;
			INT32 lastChatOrdinal;

			Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_GET_LASTCHATORDINAL; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_GET_LASTCHATORDINAL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS : public Atf::MessageProtocol
		{
			// 8844 - duelId,tableId,from,to
			UINT64 duelId;
			UINT64 tableId;
			INT32 from;	// start chat ordinal (inclusive)
			INT32 to;	// end chat ordinal (exclusive), could be -1

			Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_LOAD_CHAT_ITEMS; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_LOAD_CHAT_ITEMS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct DuelChatItem
		{
			// 4sts - ordinal,userId,when,content
			INT32 ordinal;
			PString userId;
			CommSrvTime when;
			PString content;

			DuelChatItem();
			void clear();
			bool equals(const DuelChatItem&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS : public Atf::MessageProtocol
		{
			// 2[s|84<4sts>] - errCode[errString|duelId,numChats<ordinal,userId,when,content>]
			INT16 errCode;

			PString errString;

			UINT64 duelId;
			Atf::LAtfVector< DuelChatItem , 4 > chats;

			Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_LOAD_CHAT_ITEMS; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_LOAD_CHAT_ITEMS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL : public Atf::MessageProtocol
		{
			// 8s4 - duelId,userId,clientChatLastOrdinal
			UINT64 duelId;
			PString userId;
			UINT32 clientChatLastOrdinal;

			Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE : public Atf::MessageProtocol
		{
			// 444<s>s - duelTypeId,tournFlags,numAdmissions<admissions>,adminUserId
			UINT32 duelTypeId;
			UINT32 tournFlags;
			Atf::LAtfVector< PString, 4 > admissions;
			PString adminUserId;

			Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE();
			void clear() override;
			bool equals(const Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_Q_PDUEL_UPDATE_DUELTYPE; }
			const char *getMsgIdString() const override { return "DBM_Q_PDUEL_UPDATE_DUELTYPE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE : public Atf::MessageProtocol
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE();
			void clear() override;
			bool equals(const Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return DBM_A_PDUEL_UPDATE_DUELTYPE; }
			const char *getMsgIdString() const override { return "DBM_A_PDUEL_UPDATE_DUELTYPE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

	};

	namespace dserver
	{
		struct DServerInitMsg
		{
			// ss - dlobbyAddress,dlobbyInstance
			PString dlobbyAddress;
			PString dlobbyInstance;

			DServerInitMsg();
			void clear();
			bool equals(const DServerInitMsg&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct Protocol_MSG_DUEL_SERVER_CONNECTED : public Atf::MessageProtocol	// DServer -> DLobby
		{

			Protocol_MSG_DUEL_SERVER_CONNECTED();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_SERVER_CONNECTED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_SERVER_CONNECTED; }
			const char *getMsgIdString() const override { return "MSG_DUEL_SERVER_CONNECTED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY : public Atf::MessageProtocol	// DLobby -> DServer
		{
			// empty body

			Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_SERVER_CONNECTED_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_SERVER_CONNECTED_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_SERVER_CREATE_REQUEST : public Atf::MessageProtocol	// DLobby -> DServer
		{
			// 88ssssssb444444444888bs44<8>M(s444444)M(s444444) - duelId,tableId,dbmAddress,dbmInstance,entropyAddress,entropyInstance,encryptorAddress,encryptorInstance,isPlayMoney,numHands,smallBlind,bigBlind,startingChips,initTimeBankSecs,timeBankIncrementSecs,timeOutTimeBankIncrementSecs,handResultShowSecs,duelTypeId,buyIn,rake,challengeId,areFriends,currency,siteMask,numHandIds<handIds>,M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId)
			UINT64 duelId;
			UINT64 tableId;

			PString dbmAddress;
			PString dbmInstance;
			PString entropyAddress;
			PString entropyInstance;
			PString encryptorAddress;
			PString encryptorInstance;

			bool isPlayMoney;
			INT32 numHands;
			INT32 smallBlind;
			INT32 bigBlind;
			INT32 startingChips;
			//INT32 timeToActSecs;
			INT32 initTimeBankSecs;
			INT32 timeBankIncrementSecs;
			INT32 timeOutTimeBankIncrementSecs;
			INT32 handResultShowSecs;

			UINT32 duelTypeId;
			INT64 buyIn;
			INT64 rake;
			UINT64 challengeId;
			bool areFriends;
			PString currency;
			UINT32 siteMask;

			Atf::LAtfVector< UINT64, 4 > handIds;

			DuelPlayer player1;
			DuelPlayer player2;

			Protocol_MSG_DUEL_SERVER_CREATE_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_SERVER_CREATE_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_SERVER_CREATE_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_SERVER_CREATE_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_SERVER_CREATE_REPLY : public Atf::MessageProtocol	// DServer -> DLobby
		{
			// 2s8 - errCode,errString,duelId
			INT16 errCode;
			PString errString;
			UINT64 duelId;

			Protocol_MSG_DUEL_SERVER_CREATE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_SERVER_CREATE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_SERVER_CREATE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_SERVER_CREATE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK : public Atf::MessageProtocol	// DLobby -> DServer
		{
			// empty body

			Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_SERVER_CREATE_REPLY_ACK; }
			const char *getMsgIdString() const override { return "MSG_DUEL_SERVER_CREATE_REPLY_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST : public Atf::MessageProtocol	// DLobby -> DServer
		{
			// 8ssssss44M(s444444)M(s444444) - duelId,dbmAddress,dbmInstance,entropyAddress,entropyInstance,encryptorAddress,encryptorInstance,handResultShowSecs,status,M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId)
			UINT64 duelId;

			PString dbmAddress;
			PString dbmInstance;
			PString entropyAddress;
			PString entropyInstance;
			PString encryptorAddress;
			PString encryptorInstance;
			INT32 handResultShowSecs;
			INT32 status;	//	enum DuelStatus

			DuelPlayer player1;
			DuelPlayer player2;

			Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_RESTORE_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_RESTORE_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY : public Atf::MessageProtocol	// DServer -> DLobby
		{
			// 2s8 - errCode,errString,duelId
			INT16 errCode;
			PString errString;
			UINT64 duelId;

			Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_RESTORE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_RESTORE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK : public Atf::MessageProtocol	// DLobby -> DServer
		{
			// empty body

			Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_RESTORE_REPLY_ACK; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_RESTORE_REPLY_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST : public Atf::MessageProtocol	// DServer -> DLobby
		{
			// 8s4s4 - duelId,player1,player1Score,player2,player2Score
			UINT64 duelId;
			PString player1;
			INT32 player1Score;
			PString player2;
			INT32 player2Score;

			Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY : public Atf::MessageProtocol	// DLobby-> DServer
		{
			// 2s8 - errCode,errString,duelId
			INT16 errCode;
			PString errString;
			UINT64 duelId;

			Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST : public Atf::MessageProtocol	// DServer -> DLobby
		{
			// 84 - duelId,secondsAfterDuelResultReported
			UINT64 duelId;
			INT32 secondsAfterDuelResultReported;

			Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY : public Atf::MessageProtocol	// DLobby -> DServer
		{
			// 2s8 - errCode,errString,duelId
			INT16 errCode;
			PString errString;
			UINT64 duelId;

			Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST : public Atf::MessageProtocol	//	DLobby -> DServer
		{
			// 84 - duelId,newStatus
			UINT64 duelId;
			INT32 newStatus;	//	enum DuelStatus

			Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY : public Atf::MessageProtocol	//	DServer -> DLobby
		{
			// 2[s|8] - errCode[errString|duelId]
			INT16 errCode;

			PString errString;

			UINT64 duelId;

			Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK : public Atf::MessageProtocol	//	DLobby -> DServer
		{
			//	empty body

			Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED : public Atf::MessageProtocol	// 	DServer -> DLobby
		{
			// 8s4884b - duelId,userId,pendingActionType,startTime,expiryTime,timeRemainingMins,isRestoredNotif
			UINT64 duelId;
			PString userId;
			UINT32 pendingActionType;	// eDuelNotifType_YourTurn or eDuelNotifType_YourTurnReminder
			UINT64 startTime;	// server local time, game action request start time.
			UINT64 expiryTime;	// server local time, game action expiry time.
			INT32 timeRemainingMins;
			bool isRestoredNotif;	// true only when this pending action was already sent before system restart

			Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY : public Atf::MessageProtocol	// 	DLobby -> DServer
		{
			// 2sb - errCode,errString,isPlayerOnline
			INT16 errCode;
			PString errString;
			bool isPlayerOnline;

			Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED : public Atf::MessageProtocol	// 	DServer -> DLobby
		{
			// 8s - duelId,userId
			UINT64 duelId;
			PString userId;

			Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY : public Atf::MessageProtocol	// 	DLobby -> DServer
		{

			Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST : public Atf::MessageProtocol	// 	DServer -> DLObby
		{
			// 8s44444 - duelId,userId,myScore,opponentScore,myRealScore,opponentRealScore,numHandsRemaining
			UINT64 duelId;
			PString userId;
			INT32 myScore;
			INT32 opponentScore;
			INT32 myRealScore;
			INT32 opponentRealScore;
			INT32 numHandsRemaining;

			Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY : public Atf::MessageProtocol	// 	DLObby -> DServer
		{

			Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST : public Atf::MessageProtocol	// 	DServer -> DLObby
		{
			// 8st - duelId,userId,actionTime
			UINT64 duelId;
			PString userId;
			CommSrvTime actionTime;

			Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY : public Atf::MessageProtocol	// 	DLObby -> DServer
		{

			Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST : public Atf::MessageProtocol	//	DL -> DS
		{

			Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY : public Atf::MessageProtocol	//	DS -> DL
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK : public Atf::MessageProtocol	//	DL -> DS
		{

			Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK; }
			const char *getMsgIdString() const override { return "MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST : public Atf::MessageProtocol	// DL -> DS
		{
			// 84M() - duelId,maxReplayWaitSecs,M()
			UINT64 duelId;
			INT32 maxReplayWaitSecs;
			Atf::CopyableMsgBody duelHistory;	//	duel history as composed by DBM_Q_PDUEL_GET_HISTORY_BY_DUELID

			Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY : public Atf::MessageProtocol	// DS -> DL
		{
			// 2s8 - errCode,errString,duelId
			INT16 errCode;
			PString errString;
			UINT64 duelId;

			Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK : public Atf::MessageProtocol	// DL -> DS
		{
			// empty msg

			Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST : public Atf::MessageProtocol	// DS -> DL
		{
			// 8 - duelId
			UINT64 duelId;

			Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY : public Atf::MessageProtocol	// DL -> DS
		{
			// empty msg

			Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST : public Atf::MessageProtocol	//	DL -> DS
		{
			// 8 - duelId
			UINT64 duelId;

			Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY : public Atf::MessageProtocol	//	DS -> DL
		{
			// 2[s] - errCode[errString]
			INT16 errCode;

			PString errString;

			Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK : public Atf::MessageProtocol	//	DL -> DS
		{

			Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL : public Atf::MessageProtocol	//	DS -> DL
		{
			// 8s - duelId,userId
			UINT64 duelId;
			PString userId;

			Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY : public Atf::MessageProtocol	//	DL -> DS
		{

			Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		//Message MSG_DUEL_DSERVER_BETTING_COMPLETE			//	DS -> DL
		//{
		//	UINT64 duelId;
		//};

		//Message MSG_DUEL_DSERVER_BETTING_COMPLETE_REPLY			//	DL -> DS
		//{
		//};

		struct Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER : public Atf::MessageProtocol	// DS -> DL
		{
			// 8s4s - duelId,userId,gameMsgId,gameJSON
			UINT64 duelId;
			PString userId;
			UINT32 gameMsgId;
			PString gameJSON;

			Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY : public Atf::MessageProtocol	//	DL -> DS
		{
			// 2ss - errCode,errString,userId
			INT16 errCode;
			PString errString;
			PString userId;

			Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER : public Atf::MessageProtocol	// DL -> DS
		{
			// 8s4M() - duelId,userId,gameMsgId,M()
			UINT64 duelId;
			PString userId;
			UINT32 gameMsgId;
			Atf::CopyableMsgBody gameMsgBody;

			Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

	};

	namespace dchat
	{
		struct Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED : public Atf::MessageProtocol	// DLobby -> DChat
		{
			// 4<4ssss> - numDbmList<dbmId,dbmAddressRO,dbmInstanceRO,dbmAddressRW,dbmInstanceRW>
			Atf::LAtfVector< dbm::DbmInfo , 4 > dbmList;

			Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_DCHAT_CONNECTED; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_DCHAT_CONNECTED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY : public Atf::MessageProtocol	// DChat -> DLobby
		{

			Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST : public Atf::MessageProtocol	// DChat -> DLobby
		{
			// 8 - duelId
			UINT64 duelId;

			Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY : public Atf::MessageProtocol	// DLobby -> DChat
		{
			// 884ss4bt - duelId,tableId,dbmId,player1,player2,lastChatOrdinal,isPlayMoney,duelCloseTime
			UINT64 duelId;
			UINT64 tableId;
			INT32 dbmId;
			PString player1;
			PString player2;
			INT32 lastChatOrdinal;
			bool isPlayMoney;
			CommSrvTime duelCloseTime;

			Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK : public Atf::MessageProtocol	// DChat -> DLobby   (GConnection ack)
		{

			Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME : public Atf::MessageProtocol	//	DLobby -> DChat
		{
			// 8t - duelId,duelCloseTime
			UINT64 duelId;
			CommSrvTime duelCloseTime;

			Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY : public Atf::MessageProtocol	//	DChat -> DLobby
		{

			Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
	};

	namespace client
	{
		enum PlayerSnapshotStatus
		{
			PlayerSnapshotStatus_ActionRequired = 1,
			PlayerSnapshotStatus_WaitingForOpponent = 2,
		};

		struct ClientRandomPool
		{
			// M(4tb) - M(duelTypeId,whenJoined,ticketUsed)
			UINT32 duelTypeId;
			CommSrvTime whenJoined;
			bool ticketUsed;

			ClientRandomPool();
			void clear();
			bool equals(const ClientRandomPool&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		//enum ClientDuelFlags		//	PYR-40604
		//{
		//	ClientDuelFlags_None = 0,
		//	ClientDuelFlags_BetsCompleted = 1 << 0, // 1
		//};
		struct ClientRunningDuel
		{
			// M(8M(s444444)M(s444444)84t14t444) - M(duelId,M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),tableId,duelTypeId,startTime,duelStatus,playerStatus,expiryTime,myScore,opponentScore,lastChatOrdinal)
			UINT64 duelId;
			DuelPlayer player1;
			DuelPlayer player2;
			UINT64 tableId;
			UINT32 duelTypeId;
			CommSrvTime startTime;	//	when duel started
			BYTE duelStatus;	//	enum DuelStatus
			INT32 playerStatus;	//	enum PlayerSnapshotStatus
			CommSrvTime expiryTime;	//	Action required expiry time. Applicable to the player who's action it is.
			INT32 myScore;
			INT32 opponentScore;
			INT32 lastChatOrdinal;
			//UINT32 clientDuelFlags;		//	ClientDuelFlags

			ClientRunningDuel();
			void clear();
			bool equals(const ClientRunningDuel&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct ClientDuelChallengePlayer	//	TODO: remove as soon as older clients are gone
		{
			// s4b - userId,imageId,isOnline
			PString userId;
			UINT32 imageId;
			bool isOnline;

			ClientDuelChallengePlayer();
			void clear();
			bool equals(const ClientDuelChallengePlayer&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct ClientDuelChallenge	//	TODO: remove as soon as older clients are gone
		{
			// M(8s4bs4b44ttt) - M(challengeId,userId,imageId,isOnline,userId,imageId,isOnline,duelTypeId,response,whenOffered,whenResponse,whenExpires)
			UINT64 challengeId;	//	key
			ClientDuelChallengePlayer player1;	//	challenger
			ClientDuelChallengePlayer player2;	//	challengee
			UINT32 duelTypeId;
			INT32 response;	//	enum ChallengeResponse
			CommSrvTime whenOffered;	//	when challenge was offered
			CommSrvTime whenResponse;	//	when response received
			CommSrvTime whenExpires;	//	when challenge expires

			ClientDuelChallenge();
			void clear();
			bool equals(const ClientDuelChallenge&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct ClientDuelChallengePlayer2
		{
			// M(s44) - M(userId,imageId,playerFlag)
			PString userId;
			UINT32 imageId;
			UINT32 playerFlag;	//	enum eDuelUserFlags

			ClientDuelChallengePlayer2();
			void clear();
			bool equals(const ClientDuelChallengePlayer2&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct ClientDuelChallenge2
		{
			// M(8M(s44)M(s44)44tttb) - M(challengeId,M(userId,imageId,playerFlag),M(userId,imageId,playerFlag),duelTypeId,response,whenOffered,whenResponse,whenExpires,player1UsedTicket)
			UINT64 challengeId;	//	key
			ClientDuelChallengePlayer2 player1;	//	challenger
			ClientDuelChallengePlayer2 player2;	//	challengee
			UINT32 duelTypeId;
			INT32 response;	//	enum ChallengeResponse
			CommSrvTime whenOffered;	//	when challenge was offered
			CommSrvTime whenResponse;	//	when response received
			CommSrvTime whenExpires;	//	when challenge expires
			bool player1UsedTicket;

			ClientDuelChallenge2();
			void clear();
			bool equals(const ClientDuelChallenge2&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER : public Atf::MessageProtocol	// C->S:  HTML5 -> Native Client Host -> DLobby
		{
			//! 8s4 <FIXME>MsgBodyWithJSON</FIXME>  - duelId,userId,gameMsgId, <FIXME>gameMsg</FIXME> 
			UINT64 duelId;
			PString userId;
			UINT32 gameMsgId;
			Atf::MsgBodyWithJSON gameMsg;	// the concrete game message is transparent to the DLobby

			Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER; }
			const char *getMsgIdString() const override { return "MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER : public Atf::MessageProtocol	// S->C:   DLobby -> Native Client Host -> HTML5
		{
			//! 8s4 <FIXME>MsgBodyWithJSON</FIXME>  - duelId,userId,gameMsgId, <FIXME>gameMsg</FIXME> 
			UINT64 duelId;
			PString userId;
			UINT32 gameMsgId;
			Atf::MsgBodyWithJSON gameMsg;	// the concrete game message

			Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_DLOBBY_POST_TO_PLAYER; }
			const char *getMsgIdString() const override { return "MSG_DUEL_DLOBBY_POST_TO_PLAYER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		//	TODO: remove as soon as older clients are gone
		struct Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS : public Atf::MessageProtocol	//	C -> DLobby
		{
			// empty message body

			Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_RUNNING_DUELS; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_RUNNING_DUELS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		//	TODO: remove as soon as older clients are gone
		struct Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY : public Atf::MessageProtocol	//	DLobby -> C
		{
			// 2[s|4<M(8M(s444444)M(s444444)84t14t444)>4<M(8s4bs4b44ttt)>4<M(4tb)>4<M(44<4s>41444444488bs11144<s>44<4s>tt4444)>] - errCode[errString|numRunningDuels<M(duelId,M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),tableId,duelTypeId,startTime,duelStatus,playerStatus,expiryTime,myScore,opponentScore,lastChatOrdinal)>,numChallenges<M(challengeId,userId,imageId,isOnline,userId,imageId,isOnline,duelTypeId,response,whenOffered,whenResponse,whenExpires)>,numRandomPoolEntries<M(duelTypeId,whenJoined,ticketUsed)>,numDuelTypes<M(duelTypeId,numV<locale,msg>,siteMask,status,matchType,numHands,smallBlind,bigBlind,startingChips,timeToAct_Deprecated,timerBank,buyIn,rake,isPlayMoney,currency,game,structure,speedDisplay,tournFlags,numAdmissions<admissions>,destroyDelay_Deprecated,numProperties<id,value>,fromDate,toDate,timeBankIncrement,timeoutTimeBankIncrement,randomMatchTimeout,pendingChallengeTimeout)>]
			INT16 errCode;

			PString errString;

			Atf::LAtfVector< ClientRunningDuel , 4 > runningDuels;
			Atf::LAtfVector< ClientDuelChallenge , 4 > challenges;
			Atf::LAtfVector< ClientRandomPool , 4 > randomPoolEntries;
			Atf::LAtfVector< DuelType , 4 > duelTypes;	//	Duel types relevant for this snapshot only. This is NOT the complete duel type list.

			Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2 : public Atf::MessageProtocol	//	C -> DLobby
		{
			// empty message body

			Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_RUNNING_DUELS2; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_RUNNING_DUELS2"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY : public Atf::MessageProtocol	//	DLobby -> C
		{
			// 2[ss|4<M(8M(s444444)M(s444444)84t14t444)>4<M(8M(s44)M(s44)44tttb)>4<M(4tb)>4<M(44<4s>41444444488bs11144<s>44<4s>tt4444)>] - errCode[errString,errTitle|numRunningDuels<M(duelId,M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),M(userId,userIntId,licenseId,timeBankInSec,imageId,playerFlag,myLastOrdinalId),tableId,duelTypeId,startTime,duelStatus,playerStatus,expiryTime,myScore,opponentScore,lastChatOrdinal)>,numChallenges<M(challengeId,M(userId,imageId,playerFlag),M(userId,imageId,playerFlag),duelTypeId,response,whenOffered,whenResponse,whenExpires,player1UsedTicket)>,numRandomPoolEntries<M(duelTypeId,whenJoined,ticketUsed)>,numDuelTypes<M(duelTypeId,numV<locale,msg>,siteMask,status,matchType,numHands,smallBlind,bigBlind,startingChips,timeToAct_Deprecated,timerBank,buyIn,rake,isPlayMoney,currency,game,structure,speedDisplay,tournFlags,numAdmissions<admissions>,destroyDelay_Deprecated,numProperties<id,value>,fromDate,toDate,timeBankIncrement,timeoutTimeBankIncrement,randomMatchTimeout,pendingChallengeTimeout)>]
			INT16 errCode;

			PString errString;
			PString errTitle;

			Atf::LAtfVector< ClientRunningDuel , 4 > runningDuels;
			Atf::LAtfVector< ClientDuelChallenge2 , 4 > challenges;
			Atf::LAtfVector< ClientRandomPool , 4 > randomPoolEntries;
			Atf::LAtfVector< DuelType , 4 > duelTypes;	//	Duel types relevant for this snapshot only. This is NOT the complete duel type list.

			Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_GET_DUELTYPES : public Atf::MessageProtocol	//	C -> DLobby
		{
			// empty message body

			Protocol_MSG_POKERDUEL_GET_DUELTYPES();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_DUELTYPES&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_DUELTYPES; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_DUELTYPES"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY : public Atf::MessageProtocol	//	DLobby -> C
		{
			// 2[ss|4<M(44<4s>41444444488bs11144<s>44<4s>tt4444)>] - errCode[errString,errTitle|numDuelTypes<M(duelTypeId,numV<locale,msg>,siteMask,status,matchType,numHands,smallBlind,bigBlind,startingChips,timeToAct_Deprecated,timerBank,buyIn,rake,isPlayMoney,currency,game,structure,speedDisplay,tournFlags,numAdmissions<admissions>,destroyDelay_Deprecated,numProperties<id,value>,fromDate,toDate,timeBankIncrement,timeoutTimeBankIncrement,randomMatchTimeout,pendingChallengeTimeout)>]
			INT16 errCode;

			PString errString;
			PString errTitle;

			Atf::LAtfVector< DuelType , 4 > duelTypes;

			Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_DUELTYPES_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_DUELTYPES_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST : public Atf::MessageProtocol	//	Client -> DLobby
		{
			// s4 - opponentUserId,duelTypeId
			PString opponentUserId;
			UINT32 duelTypeId;

			Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_CHALLENGE_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_CHALLENGE_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// 2[ss|8] - errCode[errString,errTitle|challengeId]
			INT16 errCode;	//	enum PDuelErrorCodes

			PString errString;
			PString errTitle;

			UINT64 challengeId;

			Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		//	DLobby -> Client. DLobby forwards challenge request.
		struct Protocol_MSG_POKERDUEL_CHALLENGE_OFFER : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// s484 - challengerUserId,challengerImageId,challengeId,duelTypeId
			PString challengerUserId;
			UINT32 challengerImageId;
			UINT64 challengeId;
			UINT32 duelTypeId;

			Protocol_MSG_POKERDUEL_CHALLENGE_OFFER();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_CHALLENGE_OFFER&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_CHALLENGE_OFFER; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_CHALLENGE_OFFER"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE : public Atf::MessageProtocol	//	Client -> DLobby
		{
			// 84 - challengeId,answer
			UINT64 challengeId;
			INT32 answer;	//	enum ChallengeResponse

			Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// 2[ss|8] - errCode[errString,errTitle|duelId]
			INT16 errCode;	//	enum PDuelErrorCodes

			PString errString;
			PString errTitle;

			UINT64 duelId;

			Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// 884 - challengeId,duelId,answer
			UINT64 challengeId;
			UINT64 duelId;	//	0 if challenge refused
			INT32 answer;	//	enum ChallengeResponse

			Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_START_RANDOM_DUEL : public Atf::MessageProtocol	//	Client -> DLobby
		{
			// 4 - duelTypeId
			UINT32 duelTypeId;

			Protocol_MSG_POKERDUEL_START_RANDOM_DUEL();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_START_RANDOM_DUEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_START_RANDOM_DUEL; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_START_RANDOM_DUEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// 2[ss|8s] - errCode[errString,errTitle|duelId,opponentUserId]
			INT16 errCode;	//	enum PDuelErrorCodes

			PString errString;
			PString errTitle;

			UINT64 duelId;	//	0 if no opponent available
			PString opponentUserId;	//	blank if no opponent available

			Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_START_RANDOM_DUEL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_START_RANDOM_DUEL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// 48s - duelTypeId,duelId,opponentUserId
			UINT32 duelTypeId;
			UINT64 duelId;
			PString opponentUserId;

			Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_RANDOM_OPPONENT_FOUND; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_RANDOM_OPPONENT_FOUND"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE : public Atf::MessageProtocol	//	Client -> DLobby
		{
			// 8 - challengeId
			UINT64 challengeId;

			Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_CANCEL_CHALLENGE; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_CANCEL_CHALLENGE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// 2[ss] - errCode[errString,errTitle]
			INT16 errCode;

			PString errString;
			PString errTitle;

			Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL : public Atf::MessageProtocol	//	Client -> DLobby
		{
			// 4 - duelTypeId
			UINT32 duelTypeId;

			Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_LEAVE_RANDOM_POOL; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_LEAVE_RANDOM_POOL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// 2[ss] - errCode[errString,errTitle]
			INT16 errCode;

			PString errString;
			PString errTitle;

			Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// 84 - duelId,newStatus
			UINT64 duelId;
			INT32 newStatus;	//	enum DuelStatus

			Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_SERVER_RESTARTING : public Atf::MessageProtocol	//	DLobby -> Client
		{

			Protocol_MSG_POKERDUEL_SERVER_RESTARTING();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_SERVER_RESTARTING&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_SERVER_RESTARTING; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_SERVER_RESTARTING"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_PROFILE_REQUEST : public Atf::MessageProtocol	//	Client -> DLobby
		{
			// s - userId
			PString userId;

			Protocol_MSG_POKERDUEL_PROFILE_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_PROFILE_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_PROFILE_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_PROFILE_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		enum ProfileDataType
		{
			ProfileDataType_userInfo = 0,				//	Image id, country, pending challenges, etc.
			ProfileDataType_friendData,
			ProfileDataType_statsPlayer,				//	personal player stats
			ProfileDataType_statsPVP,					//	player vs player stats
			ProfileDataType_achievements
		};

		struct ProfileResponse_userInfo	//	ProfileDataType_userInfo
		{
			// 4sb4444<8>4<8> - imageId,country,isOnline,numChallengesFromMeToFriend,numChallengesFromFriendToMe,playerFlag,numChallengeIdsFromMeToFriend<challengeIdsFromMeToFriend>,numChallengeIdsFromFriendToMe<challengeIdsFromFriendToMe>
			UINT32 imageId;
			PString country;
			bool isOnline;	//	deprecated - use playerFlag below
			INT32 numChallengesFromMeToFriend;	//	deprecated - use challengeIdsFromMeToFriend.size()
			INT32 numChallengesFromFriendToMe;	//	deprecated - use challengeIdsFromFriendToMe.size()

			UINT32 playerFlag;	//	enum eDuelUserFlags
			Atf::LAtfVector< UINT64 , 4 > challengeIdsFromMeToFriend;	//	For friend profile only.
			Atf::LAtfVector< UINT64 , 4 > challengeIdsFromFriendToMe;	//	For friend profile only.

			ProfileResponse_userInfo();
			void clear();
			bool equals(const ProfileResponse_userInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};
		struct ProfileResponse_Friend
		{
			// 4b44 - numFriends,isOnline,frdRelation,playerFlag
			INT32 numFriends;

			//	If requesting another userId's profile
			bool isOnline;	//	deprecated - use playerFlag below
			UINT32 frdRelation;

			UINT32 playerFlag;	//	enum eDuelUserFlags

			ProfileResponse_Friend();
			void clear();
			bool equals(const ProfileResponse_Friend&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};
		struct IceUserAchievementsVector
		{
			// 4<48> - numUserAchievements<achievementId,value>
			Atf::LAtfVector< IceDuelsUserAchievement, 4 > userAchievements;

			IceUserAchievementsVector();
			void clear();
			bool equals(const IceUserAchievementsVector&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};
		struct Protocol_MSG_POKERDUEL_PROFILE_RESPONSE : public Atf::MessageProtocol	//	DLobby -> Client
		{
			//! s4 <FIXME>MsgBodyWithJSON</FIXME>  - userId,profileDataType, <FIXME>data</FIXME> 
			PString userId;
			INT32 profileDataType;	//	enum ProfileDataType

			Atf::MsgBodyWithJSON data;	//	content depends on profileDataType, see below

			//	ProfileDataType_userInfo 		: 	ProfileResponse_userInfo
			//	ProfileDataType_friendData		:	ProfileResponse_Friend
			//	ProfileDataType_statsPlayer		:	IceDuelUserStats
			//	ProfileDataType_statsPVP		:	IceDuelUserPVPStats
			//	ProfileDataType_achievements	:	IceUserAchievementsVector

			Protocol_MSG_POKERDUEL_PROFILE_RESPONSE();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_PROFILE_RESPONSE&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_PROFILE_RESPONSE; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_PROFILE_RESPONSE"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS : public Atf::MessageProtocol
		{

			Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct AllAchievements
		{
			// 4<44<8>sssss> - numAchievements<achievementId,numLevels<levels>,title,descr,descr2,descr3,infoMsg>
			Atf::LAtfVector< IceDuelsAchievement, 4 > achievements;

			AllAchievements();
			void clear();
			bool equals(const AllAchievements&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};
		struct Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY : public Atf::MessageProtocol	//	Client -> DLobby
		{
			//! 2[ss| <FIXME>MsgBodyWithJSON</FIXME> ] - errCode[errString,errTitle| <FIXME>allAchievements</FIXME> ]
			INT16 errCode;

			PString errString;
			PString errTitle;

			Atf::MsgBodyWithJSON allAchievements;	//	content == Struct AllAchievements

			Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		enum DuelResult
		{
			DuelResult_Won = 1,
			DuelResult_Lost,
			DuelResult_Draw,
			DuelResult_DuelCancelled
		};
		struct CompletedDuel
		{
			// M(84ts4bs844444b) - M(duelId,duelTypeId,whenClosed,opponentUserId,result,isPlayMoney,currency,amountWonLost,siteMask,opponentImageId,opponentPlayerFlag,lastChatOrdinal,myLastOrdinalId,ticketUsedForBuyin)
			UINT64 duelId;
			UINT32 duelTypeId;
			CommSrvTime whenClosed;
			PString opponentUserId;
			INT32 result;	//	enum DuelResult
			bool isPlayMoney;
			PString currency;
			INT64 amountWonLost;
			UINT32 siteMask;
			UINT32 opponentImageId;
			UINT32 opponentPlayerFlag;	//	enum eDuelUserFlags
			INT32 lastChatOrdinal;
			INT32 myLastOrdinalId;
			bool ticketUsedForBuyin;	//	PYR-36881

			CompletedDuel();
			void clear();
			bool equals(const CompletedDuel&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};
		struct CancelledChallenge
		{
			// M(84s4tbs848) - M(challengeId,duelTypeId,opponentUserId,challengeResponse,whenResponse,isPlayMoney,currency,amountRefunded,siteMask,ticketAmount)
			UINT64 challengeId;
			UINT32 duelTypeId;
			PString opponentUserId;
			INT32 challengeResponse;	//	enum ChallengeResponse
			CommSrvTime whenResponse;
			bool isPlayMoney;
			PString currency;
			INT64 amountRefunded;
			UINT32 siteMask;
			INT64 ticketAmount;	//	PYR-36881

			CancelledChallenge();
			void clear();
			bool equals(const CancelledChallenge&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		enum CancelledRandomPoolReason
		{
			CancelledRandomPoolReason_Timeout,
			CancelledRandomPoolReason_UserCancelled,
			CancelledRandomPoolReason_AdminCancelled,
		};
		struct CancelledRandomPoolEntry
		{
			// M(4t4bs848) - M(duelTypeId,whenCancelled,reason,isPlayMoney,currency,amountRefunded,siteMask,ticketAmount)
			UINT32 duelTypeId;
			CommSrvTime whenCancelled;
			INT32 reason;	//	enum CancelledRandomPoolReason
			bool isPlayMoney;
			PString currency;
			INT64 amountRefunded;
			UINT32 siteMask;
			INT64 ticketAmount;	//	PYR-36881

			CancelledRandomPoolEntry();
			void clear();
			bool equals(const CancelledRandomPoolEntry&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_GETHISTORY : public Atf::MessageProtocol
		{
			// 4 - numEvents
			INT32 numEvents;	//	last number of events to retrieve

			Protocol_MSG_POKERDUEL_GETHISTORY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GETHISTORY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GETHISTORY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GETHISTORY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_POKERDUEL_GETHISTORY_REPLY : public Atf::MessageProtocol
		{
			// 2[ss|b4<M(84ts4bs844444b)>4<M(84s4tbs848)>4<M(4t4bs848)>] - errCode[errString,errTitle|moreEventsAvailable,numDuels<M(duelId,duelTypeId,whenClosed,opponentUserId,result,isPlayMoney,currency,amountWonLost,siteMask,opponentImageId,opponentPlayerFlag,lastChatOrdinal,myLastOrdinalId,ticketUsedForBuyin)>,numCancelledChallenges<M(challengeId,duelTypeId,opponentUserId,challengeResponse,whenResponse,isPlayMoney,currency,amountRefunded,siteMask,ticketAmount)>,numCancelledRandomPoolEntries<M(duelTypeId,whenCancelled,reason,isPlayMoney,currency,amountRefunded,siteMask,ticketAmount)>]
			INT16 errCode;

			PString errString;
			PString errTitle;

			bool moreEventsAvailable;
			Atf::LAtfVector< CompletedDuel , 4 > duels;
			Atf::LAtfVector< CancelledChallenge , 4 > cancelledChallenges;
			Atf::LAtfVector< CancelledRandomPoolEntry , 4 > cancelledRandomPoolEntries;

			Protocol_MSG_POKERDUEL_GETHISTORY_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GETHISTORY_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GETHISTORY_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GETHISTORY_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_REPLAY_DUEL : public Atf::MessageProtocol
		{
			// 8 - duelId
			UINT64 duelId;

			Protocol_MSG_POKERDUEL_REPLAY_DUEL();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_REPLAY_DUEL&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_REPLAY_DUEL; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_REPLAY_DUEL"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY : public Atf::MessageProtocol
		{
			// 2[ss|4] - errCode[errString,errTitle|lastChatOrdinal_deprecated]
			INT16 errCode;

			PString errString;
			PString errTitle;

			INT32 lastChatOrdinal_deprecated;

			Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_REPLAY_DUEL_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_REPLAY_DUEL_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		//	PYR-42718
		enum PreconfirmationCheckContext
		{
			PreconfirmationCheckContext_Unknown,						//	older clients
			PreconfirmationCheckContext_FriendChallengePlayer1,			//	Player offering challenge
			PreconfirmationCheckContext_FriendChallengePlayer2,			//	Player accepting challenge
			PreconfirmationCheckContext_RandomPool,
		};
		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK : public Atf::MessageProtocol
		{
			// 444 - duelTypeId,matchType_deprecated,context
			UINT32 duelTypeId;
			INT32 matchType_deprecated;	//	enum DuelMatchType (friend challenge or random) - deprecated, use 'context'
			INT32 context;	//	enum PreconfirmationCheckContext

			Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_PRECONFIRMATION_CHECK; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_PRECONFIRMATION_CHECK"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY : public Atf::MessageProtocol
		{
			//! 2[s <FIXME>MsgBodyWithJSON</FIXME> s] - errCode[errString, <FIXME>extraErrorInfo</FIXME> ,errTitle]
			INT16 errCode;	//	enum PDuelErrorCodes

			PString errString;
			Atf::MsgBodyWithJSON extraErrorInfo;

			//	Client should parse extraErrorInfo as follows:
			//
			//	INT64 availableBalance;
			//	bool haveEnoughOnAllAcounts;		//	Composed for both PM/RM, but valid only for RM
			//	CommMsgParser parser( exraErrorInfo );
			//
			//	switch ( errCode )
			//	{
			//	case PDuelErr_Not_Enough_Chips:
			//		parser.parseINT64( availableBalance ).parseBOOL( haveEnoughOnAllAcounts );
			//		break;
			//
			//	case PDuelErr_Account_Not_Found:
			//		parser.parseBOOL( haveEnoughOnAllAcounts );
			//		break;
			//	}

			PString errTitle;

			Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED : public Atf::MessageProtocol	//	DLobby -> Client, unsolicited connection. Sent to challengee (player 2)
		{
			// 84 - challengeId,reason
			UINT64 challengeId;
			INT32 reason;	//	enum ChallengeResponse

			Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		//  for Duel Open Chat
		struct DuelClientChatItem
		{
			// 4s8s - ordinal,userId,time,chat
			INT32 ordinal;	// sequential number starting from 1, unique in the scope of one duel
			PString userId;	// user who spoke the chat content
			UINT64 time;	// chat time (server local time)
			PString chat;	// chat content, up to 250 bytes

			DuelClientChatItem();
			void clear();
			bool equals(const DuelClientChatItem&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct Protocol_MSG_DUEL_CHAT_REQUEST : public Atf::MessageProtocol	// Client -> DLobby -> DChat
		{
			// 8ss - duelId,userId,chat
			UINT64 duelId;
			PString userId;
			PString chat;

			Protocol_MSG_DUEL_CHAT_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_CHAT_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_CHAT_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_CHAT_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_CHAT_BROADCAST : public Atf::MessageProtocol	// DChat -> DLobby -> Client, this message is the reply of the MSG_DUEL_CHAT_REQUEST msg, but DLobby should broadcast this message to both players.
		{
			// 844s8s - duelId,lastChatOrdinal,ordinal,userId,time,chat
			UINT64 duelId;
			INT32 lastChatOrdinal;
			DuelClientChatItem chat;

			Protocol_MSG_DUEL_CHAT_BROADCAST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_CHAT_BROADCAST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_CHAT_BROADCAST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_CHAT_BROADCAST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_CHAT_SYNC_REQUEST : public Atf::MessageProtocol	// Client -> DLobby -> DChat
		{
			// 844 - duelId,start,size
			UINT64 duelId;
			INT32 start;	// start ordinal id, any positive integer or 0 or -1
			INT32 size;	// positive value: from start and beyond, negative value: from start and backward, also could be zero

			Protocol_MSG_DUEL_CHAT_SYNC_REQUEST();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_CHAT_SYNC_REQUEST&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_CHAT_SYNC_REQUEST; }
			const char *getMsgIdString() const override { return "MSG_DUEL_CHAT_SYNC_REQUEST"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_CHAT_SYNC_REPLY : public Atf::MessageProtocol	// DChat -> DLobby -> Client
		{
			// 844<4s8s> - duelId,lastChatOrdinal,numChats<ordinal,userId,time,chat>
			UINT64 duelId;
			INT32 lastChatOrdinal;
			Atf::LAtfVector< DuelClientChatItem , 4 > chats;

			Protocol_MSG_DUEL_CHAT_SYNC_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_CHAT_SYNC_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_CHAT_SYNC_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_CHAT_SYNC_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID : public Atf::MessageProtocol	// Client -> DLobby
		{
			// 84 - duelId,myLastOrdinalId
			UINT64 duelId;
			INT32 myLastOrdinalId;

			Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID; }
			const char *getMsgIdString() const override { return "MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		// !!! WARNING !!! If you modify this message, please let testautomation team know.
		struct Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO : public Atf::MessageProtocol	//	Client -> DLobby
		{
			// s - userId
			PString userId;

			Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// 2[ss|4<8>4<8>] - errCode[errString,errTitle|numToFriendChallenges<toFriendChallenges>,numFromFriendChallenges<fromFriendChallenges>]
			INT16 errCode;

			PString errString;
			PString errTitle;

			Atf::LAtfVector< UINT64, 4 > toFriendChallenges;
			Atf::LAtfVector< UINT64, 4 > fromFriendChallenges;

			Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// 4 - duelTypeId
			UINT32 duelTypeId;

			Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_RANDOM_ENTRY_REVOKED; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_RANDOM_ENTRY_REVOKED"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES : public Atf::MessageProtocol	//	Client -> Dlobby
		{

			Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_ICE_CHALLENGES; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_ICE_CHALLENGES"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY : public Atf::MessageProtocol	// DLobby -> Client
		{
			// 2[ss|4] - errCode[errString,errTitle|numAvailableIceChallenges]
			INT16 errCode;

			PString errString;
			PString errTitle;

			INT32 numAvailableIceChallenges;

			Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_GET_DUEL_INFO : public Atf::MessageProtocol	//	Client -> DLobby
		{
			// 8 - duelId
			UINT64 duelId;

			Protocol_MSG_POKERDUEL_GET_DUEL_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_DUEL_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_DUEL_INFO; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_DUEL_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY : public Atf::MessageProtocol	//	DLobby -> Client
		{
			//! 2[ss|b <FIXME>MsgBodyWithJSON</FIXME> ] - errCode[errString,errTitle|isRunningNotCompleted, <FIXME>duelInfo</FIXME> ]
			INT16 errCode;

			PString errString;
			PString errTitle;

			bool isRunningNotCompleted;
			Atf::MsgBodyWithJSON duelInfo;

			//	Client should parse duelInfo as follows:
			//
			//	CommMsgParser parser( duelInfo );
			//
			//	if ( isRunningNotCompleted )
			//	{
			//		pokerduel::client::ClientRunningDuel rd;
			//		rd.parse( parser );
			//	}
			//	else
			//	{
			//		pokerduel::client::CompletedDuel cd;
			//		cd.parse( parser );
			//	}

			Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_DUEL_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_DUEL_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO : public Atf::MessageProtocol	//	Client -> DLobby
		{
			//	empty

			Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_RANDOM_POOL_INFO; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_RANDOM_POOL_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY : public Atf::MessageProtocol	//	DLobby -> Client
		{
			// 2[ss|4<M(4tb)>] - errCode[errString,errTitle|numRandomPoolEntries<M(duelTypeId,whenJoined,ticketUsed)>]
			INT16 errCode;

			PString errString;
			PString errTitle;

			Atf::LAtfVector< ClientRandomPool , 4 > randomPoolEntries;

			Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

		struct Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO : public Atf::MessageProtocol	//	Client -> DLobby
		{
			// 8b - challengeId,supportsConvertedToDuel
			UINT64 challengeId;
			bool supportsConvertedToDuel;

			Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_CHALLENGE_INFO; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_CHALLENGE_INFO"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		enum ChallengeType
		{
			ChallengeType_Pending,
			ChallengeType_Cancelled,
			ChallengeType_ConvertedToDuel,
		};
		struct Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY : public Atf::MessageProtocol	//	DLobby -> Client
		{
			//! 2[ss|b <FIXME>MsgBodyWithJSON</FIXME> 4] - errCode[errString,errTitle|isPendingNotCancelled_deprecated, <FIXME>challengeInfo</FIXME> ,challengeType]
			INT16 errCode;

			PString errString;
			PString errTitle;

			bool isPendingNotCancelled_deprecated;	//	Deprecated - use challengeType
			Atf::MsgBodyWithJSON challengeInfo;
			INT32 challengeType;	//	enum ChallengeType

			//	Client should parse challengeInfo as follows:
			//
			//	CommMsgParser parser( challengeInfo );
			//
			//	switch ( challengeType )
			//	{
			//		case ChallengeType_Pending:
			//		{
			//			pokerduel::client::ClientDuelChallenge2 pendingChallenge;
			//			pendingChallenge.parse( parser );
			//			break;
			//		}
			//
			//		case ChallengeType_Cancelled:
			//		{
			//			pokerduel::client::CancelledChallenge cancelledChallenge;
			//			cancelledChallenge.parse( parser );
			//			break;
			//		}
			//
			//		case ChallengeType_ConvertedToDuel:
			//		{
			//			UINT64 duelId;
			//			parser.parseUINT64( duelId );
			//			break;
			//		}
			// 	}

			Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY; }
			const char *getMsgIdString() const override { return "MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};

	};
};

#endif
