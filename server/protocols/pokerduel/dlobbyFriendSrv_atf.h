/**
 * dlobbyFriendSrv_atf.h
 *
 * This file was auto-generated from dlobbyFriendSrv_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 */

#ifndef ATF_PROTOCOL_DEFFILE_DLOBBYFRIENDSRV_ATF_H
#define ATF_PROTOCOL_DEFFILE_DLOBBYFRIENDSRV_ATF_H

#include "UserDefStructs.h"

#include "pokerduel/pokerduel.h"


namespace pduelServer
{
	class ProtocolFactory
	{
	public:
		static Atf::MessageProtocol* createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId);
	};


	namespace friendServer
	{
		struct FriendChallengeInfo
		{
			// 4444 - numRMChallengesTo,numRMChallengesFrom,numPMChallengesTo,numPMChallengesFrom
			INT32 numRMChallengesTo;	//	num real money challenges 'To' friend
			INT32 numRMChallengesFrom;	//	num real money challenges 'From' friend

			INT32 numPMChallengesTo;	//	num play money challenges 'To' friend
			INT32 numPMChallengesFrom;	//	num play money challenges 'From' friend

			FriendChallengeInfo();
			void clear();
			bool equals(const FriendChallengeInfo&) const;
			const char *toTraceString(PString& _str) const;
			const char *toXmlString(const char *_element, PString& _str) const;
			bool fromXmlString(const PString& _str);
			void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
			void parseMsg(CommMsgParser& _parser);
			const char *toJSONString(PString& _str) const;
			void fromJSONString(const PString& _str);
			void validateJSONString(const PString& _str);
			void composeMsg(Atf::MsgBodyWithJSON& _msg) const { _msg.compose(*this); }
			void parseMsg(Atf::MsgParserWithJSON& _parser);
			static void validateMsg(CommMsgParser& _parser);
		};

		struct Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES : public Atf::MessageProtocol
		{
			// s4<s> - userId,numFriendUserIds<friendUserIds>
			PString userId;
			Atf::LAtfVector< PString , 4 > friendUserIds;

			Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES; }
			const char *getMsgIdString() const override { return "MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
		struct Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY : public Atf::MessageProtocol
		{
			// 2[s|4<4444>] - errCode[errMsg|numFriendChallengeInfo<numRMChallengesTo,numRMChallengesFrom,numPMChallengesTo,numPMChallengesFrom>]
			INT16 errCode;

			PString errMsg;

			Atf::LAtfVector< FriendChallengeInfo, 4 > friendChallengeInfo;

			Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY();
			void clear() override;
			bool equals(const Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY&) const;
			bool equals(Atf::MessageProtocol* _other) const override;
			const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
			const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
			bool loadFromXmlString(const PString& _xmlString) override;
			const char *asTraceString(PString& _buf) const override;
			void parseMsg(CommMsgParser& _parser) override;
			void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
			UINT32 getMsgId() const override { return MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY; }
			const char *getMsgIdString() const override { return "MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY"; }
			const char *asJSONString(PString& _buf) const override;
			void loadFromJSONString(const PString& _jsonString) override;
			void validateJSONString(const PString& _jsonString) override;
			void validateMsg(CommMsgParser& _parser) override;
		};
	};
};

#endif
