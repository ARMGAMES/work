/**
 * pokerduelprot_thin.cpp
 *
 * This file was auto-generated from pokerduelprot.txt by ATF protocol generator. 
 * Do not edit this file directly!
 */
 
#include "pokerduelprot_thin.h"

//=================================================================
//                    P_I18NLangStringPair
//=================================================================

pokerduel::P_I18NLangStringPair::P_I18NLangStringPair()
{
	clear();
}

void pokerduel::P_I18NLangStringPair::clear()
{
	locale = 0;
	msg.clear();
}

bool pokerduel::P_I18NLangStringPair::equals(const P_I18NLangStringPair& _o) const
{
	return locale == _o.locale &&
		msg.equals(_o.msg);
}

const char *pokerduel::P_I18NLangStringPair::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("locale=");
	_buf.appendUint(locale);
	_buf.append(',');
	_buf.append("msg=");
	_buf.append(msg);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::P_I18NLangStringPair::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(locale);
	_msg.composeString(msg);
}

void pokerduel::P_I18NLangStringPair::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(locale);
	_parser.parseStringPN(msg, 0, "msg");
}

/*static*/ void pokerduel::P_I18NLangStringPair::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*locale*/
	_parser.parseStringN(_dummy, 0, "msg");  /*msg*/
}

//=================================================================
//                    P_I18nPString
//=================================================================

// @Override
UINT32 pokerduel::P_I18nPString::size() const
{
	return v.size();
}

// @Override
const char* pokerduel::P_I18nPString::getPString(UINT32 locale) const
{
	for(vector<P_I18NLangStringPair>::const_iterator cit = v.begin(); cit != v.end(); ++cit)
	{
		if(cit->locale == locale)
		{
			return cit->msg;
		}
	}

	if(locale != LOCALE_DEFAULT)
	{
		return getPString(LOCALE_DEFAULT);
	}
	else
	{
		return "";
	}
}

// @Override
void pokerduel::P_I18nPString::appendPString(const char* msg, UINT32 locale)
{
	for(vector<P_I18NLangStringPair>::iterator it = v.begin(); it != v.end(); ++it)
	{
		if(it->locale == locale)
		{
			it->msg.append(msg);
			return;
		}
	}

	P_I18NLangStringPair p;
	p.locale = locale;
	p.msg = msg;
	v.push_back(p);
}

pokerduel::P_I18nPString::P_I18nPString()
{
	clear();
}

void pokerduel::P_I18nPString::clear()
{
	v.clear();
}

bool pokerduel::P_I18nPString::equals(const P_I18nPString& _o) const
{
	return v.equals(_o.v);
}

const char *pokerduel::P_I18nPString::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("v=");
	v.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::P_I18nPString::composeMsg(CommMsgBody& _msg) const
{
	v.composeMsg(_msg);
}

void pokerduel::P_I18nPString::parseMsg(CommMsgParser& _parser)
{
	v.parseMsg(_parser);
}

/*static*/ void pokerduel::P_I18nPString::validateMsg(CommMsgParser& _parser)
{
	ThinAtf::LAtfVector< P_I18NLangStringPair, 4 >::validateMsg(_parser);  /*v*/
}

//=================================================================
//                    XINT64
//=================================================================

// @Override
const char *pokerduel::XINT64::toTraceString(PString& _buf) const
{
	return _buf.append("0x").appendHexInt64(value);
}

// @Override
const char *pokerduel::XINT64::toJSONString(PString& _buf) const
{
	return _buf.append("\"0x").appendHexInt64(value).append('\"');
}

// @Override
void pokerduel::XINT64::fromJSONString(const PString& _jsonString)
{
	if(_jsonString.startsWith("0x") || _jsonString.startsWith("0X"))
	{
		value = p_atohex64(_jsonString.c_str() + 2);
	}
	else
	{
		value = p_atohex64(_jsonString);
	}
}

// @Override
pokerduel::XINT64::operator INT64() const
{
	return value;
}

// @Override
pokerduel::XINT64::operator UINT64() const
{
	return (UINT64)value;
}

// @Override
pokerduel::XINT64& pokerduel::XINT64::operator=(INT64 v)
{
	value = v;
	return *this;
}

// @Override
pokerduel::XINT64& pokerduel::XINT64::operator=(UINT64 v)
{
	value = (INT64)v;
	return *this;
}

pokerduel::XINT64::XINT64()
{
	clear();
}

void pokerduel::XINT64::clear()
{
	value = 0;
}

bool pokerduel::XINT64::equals(const XINT64& _o) const
{
	return value == _o.value;
}

void pokerduel::XINT64::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT64(value);
}

void pokerduel::XINT64::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT64(value);
}

/*static*/ void pokerduel::XINT64::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*value*/
}

//=================================================================
//                    DuelTypeProperty
//=================================================================

pokerduel::DuelTypeProperty::DuelTypeProperty()
{
	clear();
}

void pokerduel::DuelTypeProperty::clear()
{
	id = 0;
	value.clear();
}

bool pokerduel::DuelTypeProperty::equals(const DuelTypeProperty& _o) const
{
	return id == _o.id &&
		value.equals(_o.value);
}

const char *pokerduel::DuelTypeProperty::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("id=");
	_buf.appendInt(id);
	_buf.append(',');
	_buf.append("value=");
	_buf.append(value);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::DuelTypeProperty::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(id);
	_msg.composeString(value);
}

void pokerduel::DuelTypeProperty::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(id);
	_parser.parseStringPN(value, 0, "value");
}

/*static*/ void pokerduel::DuelTypeProperty::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*id*/
	_parser.parseStringN(_dummy, 0, "value");  /*value*/
}

//=================================================================
//                    DuelType
//=================================================================

pokerduel::DuelType::DuelType()
{
	clear();
}

void pokerduel::DuelType::clear()
{
	duelTypeId = 0;
	name.clear();
	siteMask = 0;
	status = 0;
	matchType = 0;
	numHands = 0;
	smallBlind = 0;
	bigBlind = 0;
	startingChips = 0;
	timeToAct_Deprecated = 0;
	timerBank = 0;
	buyIn = 0;
	rake = 0;
	isPlayMoney = false;
	currency.clear();
	game = 0;
	structure = 0;
	speedDisplay = 0;
	tournFlags = 0;
	admissions.clear();
	destroyDelay_Deprecated = 0;
	properties.clear();
	fromDate.setNull();
	toDate.setNull();
	timeBankIncrement = 0;
	timeoutTimeBankIncrement = 0;
	randomMatchTimeout = 0;
	pendingChallengeTimeout = 0;
}

bool pokerduel::DuelType::equals(const DuelType& _o) const
{
	return duelTypeId == _o.duelTypeId &&
		name.equals(_o.name) &&
		siteMask == _o.siteMask &&
		status == _o.status &&
		matchType == _o.matchType &&
		numHands == _o.numHands &&
		smallBlind == _o.smallBlind &&
		bigBlind == _o.bigBlind &&
		startingChips == _o.startingChips &&
		timeToAct_Deprecated == _o.timeToAct_Deprecated &&
		timerBank == _o.timerBank &&
		buyIn == _o.buyIn &&
		rake == _o.rake &&
		isPlayMoney == _o.isPlayMoney &&
		currency.equals(_o.currency) &&
		game == _o.game &&
		structure == _o.structure &&
		speedDisplay == _o.speedDisplay &&
		tournFlags == _o.tournFlags &&
		admissions.equals(_o.admissions) &&
		destroyDelay_Deprecated == _o.destroyDelay_Deprecated &&
		properties.equals(_o.properties) &&
		fromDate.equals(_o.fromDate) &&
		toDate.equals(_o.toDate) &&
		timeBankIncrement == _o.timeBankIncrement &&
		timeoutTimeBankIncrement == _o.timeoutTimeBankIncrement &&
		randomMatchTimeout == _o.randomMatchTimeout &&
		pendingChallengeTimeout == _o.pendingChallengeTimeout;
}

const char *pokerduel::DuelType::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("name=");
	name.toTraceString(_buf);
	_buf.append(',');
	_buf.append("siteMask=");
	_buf.appendUint(siteMask);
	_buf.append(',');
	_buf.append("status=");
	_buf.appendUint(status);
	_buf.append(',');
	_buf.append("matchType=");
	_buf.appendInt(matchType);
	_buf.append(',');
	_buf.append("numHands=");
	_buf.appendInt(numHands);
	_buf.append(',');
	_buf.append("smallBlind=");
	_buf.appendInt(smallBlind);
	_buf.append(',');
	_buf.append("bigBlind=");
	_buf.appendInt(bigBlind);
	_buf.append(',');
	_buf.append("startingChips=");
	_buf.appendInt(startingChips);
	_buf.append(',');
	_buf.append("timeToAct_Deprecated=");
	_buf.appendInt(timeToAct_Deprecated);
	_buf.append(',');
	_buf.append("timerBank=");
	_buf.appendInt(timerBank);
	_buf.append(',');
	_buf.append("buyIn=");
	_buf.appendInt64(buyIn);
	_buf.append(',');
	_buf.append("rake=");
	_buf.appendInt64(rake);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("game=");
	_buf.appendUint(game);
	_buf.append(',');
	_buf.append("structure=");
	_buf.appendUint(structure);
	_buf.append(',');
	_buf.append("speedDisplay=");
	_buf.appendUint(speedDisplay);
	_buf.append(',');
	_buf.append("tournFlags=");
	_buf.appendUint(tournFlags);
	_buf.append(',');
	_buf.append("admissions=");
	admissions.toTraceString(_buf);
	_buf.append(',');
	_buf.append("destroyDelay_Deprecated=");
	_buf.appendInt(destroyDelay_Deprecated);
	_buf.append(',');
	_buf.append("properties=");
	properties.toTraceString(_buf);
	_buf.append(',');
	_buf.append("fromDate=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, fromDate);
	_buf.append(',');
	_buf.append("toDate=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, toDate);
	_buf.append(',');
	_buf.append("timeBankIncrement=");
	_buf.appendInt(timeBankIncrement);
	_buf.append(',');
	_buf.append("timeoutTimeBankIncrement=");
	_buf.appendInt(timeoutTimeBankIncrement);
	_buf.append(',');
	_buf.append("randomMatchTimeout=");
	_buf.appendInt(randomMatchTimeout);
	_buf.append(',');
	_buf.append("pendingChallengeTimeout=");
	_buf.appendInt(pendingChallengeTimeout);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::DuelType::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(DuelType())) // not empty
	{
		_body.composeUINT32(duelTypeId);
		name.composeMsg(_body);
		_body.composeUINT32(siteMask);
		_body.composeBYTE(status);
		_body.composeINT32(matchType);
		_body.composeINT32(numHands);
		_body.composeINT32(smallBlind);
		_body.composeINT32(bigBlind);
		_body.composeINT32(startingChips);
		_body.composeINT32(timeToAct_Deprecated);
		_body.composeINT32(timerBank);
		_body.composeINT64(buyIn);
		_body.composeINT64(rake);
		_body.composeBOOL(isPlayMoney);
		_body.composeString(currency);
		_body.composeBYTE(game);
		_body.composeBYTE(structure);
		_body.composeBYTE(speedDisplay);
		_body.composeUINT32(tournFlags);
		admissions.composeMsg(_body);
		_body.composeINT32(destroyDelay_Deprecated);
		properties.composeMsg(_body);
		_body.composeSrvTime(fromDate);
		_body.composeSrvTime(toDate);
		_body.composeINT32(timeBankIncrement);
		_body.composeINT32(timeoutTimeBankIncrement);
		_body.composeINT32(randomMatchTimeout);
		_body.composeINT32(pendingChallengeTimeout);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::DuelType::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(duelTypeId);
	name.parseMsg(_parser0);
	_parser0.parseUINT32(siteMask);
	_parser0.parseBYTE(status);
	_parser0.parseINT32(matchType);
	_parser0.parseINT32(numHands);
	_parser0.parseINT32(smallBlind);
	_parser0.parseINT32(bigBlind);
	_parser0.parseINT32(startingChips);
	_parser0.parseINT32(timeToAct_Deprecated);
	_parser0.parseINT32(timerBank);
	_parser0.parseINT64(buyIn);
	_parser0.parseINT64(rake);
	_parser0.parseBOOL(isPlayMoney);
	_parser0.parseStringPN(currency, 0, "currency");
	_parser0.parseBYTE(game);
	_parser0.parseBYTE(structure);
	_parser0.parseBYTE(speedDisplay);
	_parser0.parseUINT32(tournFlags);
	admissions.parseMsg(_parser0);
	_parser0.parseINT32(destroyDelay_Deprecated);
	properties.parseMsg(_parser0);
	_parser0.parseSrvTime(fromDate);
	_parser0.parseSrvTime(toDate);
	_parser0.parseINT32(timeBankIncrement);
	_parser0.parseINT32(timeoutTimeBankIncrement);
	_parser0.parseINT32(randomMatchTimeout);
	_parser0.parseINT32(pendingChallengeTimeout);
}

/*static*/ void pokerduel::DuelType::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy;
	_parser0.skip(4);  /*duelTypeId*/
	P_I18nPString::validateMsg(_parser0);  /*name*/
	_parser0.skip(4);  /*siteMask*/
	_parser0.skip(1);  /*status*/
	_parser0.skip(4);  /*matchType*/
	_parser0.skip(4);  /*numHands*/
	_parser0.skip(4);  /*smallBlind*/
	_parser0.skip(4);  /*bigBlind*/
	_parser0.skip(4);  /*startingChips*/
	_parser0.skip(4);  /*timeToAct_Deprecated*/
	_parser0.skip(4);  /*timerBank*/
	_parser0.skip(8);  /*buyIn*/
	_parser0.skip(8);  /*rake*/
	bool isPlayMoney; _parser0.parseBOOL(isPlayMoney);
	_parser0.parseStringN(_dummy, 0, "currency");  /*currency*/
	_parser0.skip(1);  /*game*/
	_parser0.skip(1);  /*structure*/
	_parser0.skip(1);  /*speedDisplay*/
	_parser0.skip(4);  /*tournFlags*/
	ThinAtf::LAtfVector< PString , 4 >::validateMsg(_parser0);  /*admissions*/
	_parser0.skip(4);  /*destroyDelay_Deprecated*/
	ThinAtf::LAtfVector< DuelTypeProperty , 4 >::validateMsg(_parser0);  /*properties*/
	_parser0.skip(8);  /*fromDate*/
	_parser0.skip(8);  /*toDate*/
	_parser0.skip(4);  /*timeBankIncrement*/
	_parser0.skip(4);  /*timeoutTimeBankIncrement*/
	_parser0.skip(4);  /*randomMatchTimeout*/
	_parser0.skip(4);  /*pendingChallengeTimeout*/
	AtfValidator::validateEmbeddedMsgbodyParser("DuelType", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                    DuelPlayer
//=================================================================

pokerduel::DuelPlayer::DuelPlayer()
{
	clear();
}

void pokerduel::DuelPlayer::clear()
{
	userId.clear();
	userIntId = 0;
	licenseId = 0;
	timeBankInSec = 0;
	imageId = 0;
	playerFlag = 0;
	myLastOrdinalId = 0;
}

bool pokerduel::DuelPlayer::equals(const DuelPlayer& _o) const
{
	return userId.equals(_o.userId) &&
		userIntId == _o.userIntId &&
		licenseId == _o.licenseId &&
		timeBankInSec == _o.timeBankInSec &&
		imageId == _o.imageId &&
		playerFlag == _o.playerFlag &&
		myLastOrdinalId == _o.myLastOrdinalId;
}

const char *pokerduel::DuelPlayer::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("userIntId=");
	_buf.appendUint(userIntId);
	_buf.append(',');
	_buf.append("licenseId=");
	_buf.appendUint(licenseId);
	_buf.append(',');
	_buf.append("timeBankInSec=");
	_buf.appendInt(timeBankInSec);
	_buf.append(',');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append(',');
	_buf.append("playerFlag=");
	_buf.appendUint(playerFlag);
	_buf.append(',');
	_buf.append("myLastOrdinalId=");
	_buf.appendInt(myLastOrdinalId);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::DuelPlayer::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(DuelPlayer())) // not empty
	{
		_body.composeString(userId);
		_body.composeUINT32(userIntId);
		_body.composeUINT32(licenseId);
		_body.composeINT32(timeBankInSec);
		_body.composeUINT32(imageId);
		_body.composeUINT32(playerFlag);
		_body.composeINT32(myLastOrdinalId);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::DuelPlayer::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringPN(userId, 0, "userId");
	_parser0.parseUINT32(userIntId);
	_parser0.parseUINT32(licenseId);
	_parser0.parseINT32(timeBankInSec);
	_parser0.parseUINT32(imageId);
	_parser0.parseUINT32(playerFlag);
	_parser0.parseINT32(myLastOrdinalId);
}

/*static*/ void pokerduel::DuelPlayer::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy;
	_parser0.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser0.skip(4);  /*userIntId*/
	_parser0.skip(4);  /*licenseId*/
	_parser0.skip(4);  /*timeBankInSec*/
	_parser0.skip(4);  /*imageId*/
	_parser0.skip(4);  /*playerFlag*/
	_parser0.skip(4);  /*myLastOrdinalId*/
	AtfValidator::validateEmbeddedMsgbodyParser("DuelPlayer", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                    RunningDuel
//=================================================================

pokerduel::RunningDuel::RunningDuel()
{
	clear();
}

void pokerduel::RunningDuel::clear()
{
	duelId = 0;
	player1.clear();
	player2.clear();
	dbmId = 0;
	tableId = 0;
	duelTypeId = 0;
	startTime.setNull();
	whenClosed.setNull();
	status = 0;
	lastChatOrdinal = 0;
	vppMultipliers.clear();
	ticketUsed1 = false;
	ticketUsed2 = false;
}

bool pokerduel::RunningDuel::equals(const RunningDuel& _o) const
{
	return duelId == _o.duelId &&
		player1.equals(_o.player1) &&
		player2.equals(_o.player2) &&
		dbmId == _o.dbmId &&
		tableId == _o.tableId &&
		duelTypeId == _o.duelTypeId &&
		startTime.equals(_o.startTime) &&
		whenClosed.equals(_o.whenClosed) &&
		status == _o.status &&
		lastChatOrdinal == _o.lastChatOrdinal &&
		vppMultipliers.equals(_o.vppMultipliers) &&
		ticketUsed1 == _o.ticketUsed1 &&
		ticketUsed2 == _o.ticketUsed2;
}

const char *pokerduel::RunningDuel::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("player1=");
	player1.toTraceString(_buf);
	_buf.append(',');
	_buf.append("player2=");
	player2.toTraceString(_buf);
	_buf.append(',');
	_buf.append("dbmId=");
	_buf.appendInt(dbmId);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("startTime=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, startTime);
	_buf.append(',');
	_buf.append("whenClosed=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenClosed);
	_buf.append(',');
	_buf.append("status=");
	_buf.appendUint(status);
	_buf.append(',');
	_buf.append("lastChatOrdinal=");
	_buf.appendInt(lastChatOrdinal);
	_buf.append(',');
	_buf.append("vppMultipliers=");
	_buf.append(vppMultipliers);
	_buf.append(',');
	_buf.append("ticketUsed1=");
	_buf.appendUint(ticketUsed1);
	_buf.append(',');
	_buf.append("ticketUsed2=");
	_buf.appendUint(ticketUsed2);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::RunningDuel::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(RunningDuel())) // not empty
	{
		_body.composeUINT64(duelId);
		player1.composeMsg(_body);
		player2.composeMsg(_body);
		_body.composeINT32(dbmId);
		_body.composeUINT64(tableId);
		_body.composeUINT32(duelTypeId);
		_body.composeSrvTime(startTime);
		_body.composeSrvTime(whenClosed);
		_body.composeBYTE(status);
		_body.composeINT32(lastChatOrdinal);
		_body.composeString(vppMultipliers);
		_body.composeBOOL(ticketUsed1);
		_body.composeBOOL(ticketUsed2);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::RunningDuel::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(duelId);
	player1.parseMsg(_parser0);
	player2.parseMsg(_parser0);
	_parser0.parseINT32(dbmId);
	_parser0.parseUINT64(tableId);
	_parser0.parseUINT32(duelTypeId);
	_parser0.parseSrvTime(startTime);
	_parser0.parseSrvTime(whenClosed);
	_parser0.parseBYTE(status);
	_parser0.parseINT32(lastChatOrdinal);
	_parser0.parseStringPN(vppMultipliers, 0, "vppMultipliers");
	_parser0.parseBOOL(ticketUsed1);
	_parser0.parseBOOL(ticketUsed2);
}

/*static*/ void pokerduel::RunningDuel::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy;
	_parser0.skip(8);  /*duelId*/
	DuelPlayer::validateMsg(_parser0);  /*player1*/
	DuelPlayer::validateMsg(_parser0);  /*player2*/
	_parser0.skip(4);  /*dbmId*/
	_parser0.skip(8);  /*tableId*/
	_parser0.skip(4);  /*duelTypeId*/
	_parser0.skip(8);  /*startTime*/
	_parser0.skip(8);  /*whenClosed*/
	_parser0.skip(1);  /*status*/
	_parser0.skip(4);  /*lastChatOrdinal*/
	_parser0.parseStringN(_dummy, 0, "vppMultipliers");  /*vppMultipliers*/
	bool ticketUsed1; _parser0.parseBOOL(ticketUsed1);
	bool ticketUsed2; _parser0.parseBOOL(ticketUsed2);
	AtfValidator::validateEmbeddedMsgbodyParser("RunningDuel", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                    DuelChallenge
//=================================================================

pokerduel::DuelChallenge::DuelChallenge()
{
	clear();
}

void pokerduel::DuelChallenge::clear()
{
	challengeId = 0;
	dbmId = 0;
	player1.clear();
	player1ImageId = 0;
	player2.clear();
	player2ImageId = 0;
	duelTypeId = 0;
	response = 0;
	whenOffered.setNull();
	whenResponse.setNull();
	buyInPlusRake = 0;
	currency.clear();
	isPlayMoney = false;
	ticketId1 = 0;
	challengeType = 0;
}

bool pokerduel::DuelChallenge::equals(const DuelChallenge& _o) const
{
	return challengeId == _o.challengeId &&
		dbmId == _o.dbmId &&
		player1.equals(_o.player1) &&
		player1ImageId == _o.player1ImageId &&
		player2.equals(_o.player2) &&
		player2ImageId == _o.player2ImageId &&
		duelTypeId == _o.duelTypeId &&
		response == _o.response &&
		whenOffered.equals(_o.whenOffered) &&
		whenResponse.equals(_o.whenResponse) &&
		buyInPlusRake == _o.buyInPlusRake &&
		currency.equals(_o.currency) &&
		isPlayMoney == _o.isPlayMoney &&
		ticketId1 == _o.ticketId1 &&
		challengeType == _o.challengeType;
}

const char *pokerduel::DuelChallenge::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("challengeId=");
	_buf.appendUint64(challengeId);
	_buf.append(',');
	_buf.append("dbmId=");
	_buf.appendInt(dbmId);
	_buf.append(',');
	_buf.append("player1=");
	_buf.append(player1);
	_buf.append(',');
	_buf.append("player1ImageId=");
	_buf.appendUint(player1ImageId);
	_buf.append(',');
	_buf.append("player2=");
	_buf.append(player2);
	_buf.append(',');
	_buf.append("player2ImageId=");
	_buf.appendUint(player2ImageId);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("response=");
	_buf.appendInt(response);
	_buf.append(',');
	_buf.append("whenOffered=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenOffered);
	_buf.append(',');
	_buf.append("whenResponse=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenResponse);
	_buf.append(',');
	_buf.append("buyInPlusRake=");
	_buf.appendInt64(buyInPlusRake);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("ticketId1=");
	_buf.appendUint(ticketId1);
	_buf.append(',');
	_buf.append("challengeType=");
	_buf.appendInt(challengeType);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::DuelChallenge::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(DuelChallenge())) // not empty
	{
		_body.composeUINT64(challengeId);
		_body.composeINT32(dbmId);
		_body.composeString(player1);
		_body.composeUINT32(player1ImageId);
		_body.composeString(player2);
		_body.composeUINT32(player2ImageId);
		_body.composeUINT32(duelTypeId);
		_body.composeINT32(response);
		_body.composeSrvTime(whenOffered);
		_body.composeSrvTime(whenResponse);
		_body.composeINT64(buyInPlusRake);
		_body.composeString(currency);
		_body.composeBOOL(isPlayMoney);
		_body.composeUINT32(ticketId1);
		_body.composeINT32(challengeType);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::DuelChallenge::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(challengeId);
	_parser0.parseINT32(dbmId);
	_parser0.parseStringPN(player1, 0, "player1");
	_parser0.parseUINT32(player1ImageId);
	_parser0.parseStringPN(player2, 0, "player2");
	_parser0.parseUINT32(player2ImageId);
	_parser0.parseUINT32(duelTypeId);
	_parser0.parseINT32(response);
	_parser0.parseSrvTime(whenOffered);
	_parser0.parseSrvTime(whenResponse);
	_parser0.parseINT64(buyInPlusRake);
	_parser0.parseStringPN(currency, 0, "currency");
	_parser0.parseBOOL(isPlayMoney);
	_parser0.parseUINT32(ticketId1);
	_parser0.parseINT32(challengeType);
}

/*static*/ void pokerduel::DuelChallenge::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy;
	_parser0.skip(8);  /*challengeId*/
	_parser0.skip(4);  /*dbmId*/
	_parser0.parseStringN(_dummy, 0, "player1");  /*player1*/
	_parser0.skip(4);  /*player1ImageId*/
	_parser0.parseStringN(_dummy, 0, "player2");  /*player2*/
	_parser0.skip(4);  /*player2ImageId*/
	_parser0.skip(4);  /*duelTypeId*/
	_parser0.skip(4);  /*response*/
	_parser0.skip(8);  /*whenOffered*/
	_parser0.skip(8);  /*whenResponse*/
	_parser0.skip(8);  /*buyInPlusRake*/
	_parser0.parseStringN(_dummy, 0, "currency");  /*currency*/
	bool isPlayMoney; _parser0.parseBOOL(isPlayMoney);
	_parser0.skip(4);  /*ticketId1*/
	_parser0.skip(4);  /*challengeType*/
	AtfValidator::validateEmbeddedMsgbodyParser("DuelChallenge", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                    IceDuelsAchievement
//=================================================================

pokerduel::IceDuelsAchievement::IceDuelsAchievement()
{
	clear();
}

void pokerduel::IceDuelsAchievement::clear()
{
	achievementId = 0;
	levels.clear();
	title.clear();
	descr.clear();
	descr2.clear();
	descr3.clear();
	infoMsg.clear();
}

bool pokerduel::IceDuelsAchievement::equals(const IceDuelsAchievement& _o) const
{
	return achievementId == _o.achievementId &&
		levels.equals(_o.levels) &&
		title.equals(_o.title) &&
		descr.equals(_o.descr) &&
		descr2.equals(_o.descr2) &&
		descr3.equals(_o.descr3) &&
		infoMsg.equals(_o.infoMsg);
}

const char *pokerduel::IceDuelsAchievement::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("achievementId=");
	_buf.appendInt(achievementId);
	_buf.append(',');
	_buf.append("levels=");
	levels.toTraceString(_buf);
	_buf.append(',');
	_buf.append("title=");
	_buf.append(title);
	_buf.append(',');
	_buf.append("descr=");
	_buf.append(descr);
	_buf.append(',');
	_buf.append("descr2=");
	_buf.append(descr2);
	_buf.append(',');
	_buf.append("descr3=");
	_buf.append(descr3);
	_buf.append(',');
	_buf.append("infoMsg=");
	_buf.append(infoMsg);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::IceDuelsAchievement::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(achievementId);
	levels.composeMsg(_msg);
	_msg.composeString(title);
	_msg.composeString(descr);
	_msg.composeString(descr2);
	_msg.composeString(descr3);
	_msg.composeString(infoMsg);
}

void pokerduel::IceDuelsAchievement::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(achievementId);
	levels.parseMsg(_parser);
	_parser.parseStringPN(title, 0, "title");
	_parser.parseStringPN(descr, 0, "descr");
	_parser.parseStringPN(descr2, 0, "descr2");
	_parser.parseStringPN(descr3, 0, "descr3");
	_parser.parseStringPN(infoMsg, 0, "infoMsg");
}

/*static*/ void pokerduel::IceDuelsAchievement::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*achievementId*/
	ThinAtf::LAtfVector< INT64, 4 >::validateMsg(_parser);  /*levels*/
	_parser.parseStringN(_dummy, 0, "title");  /*title*/
	_parser.parseStringN(_dummy, 0, "descr");  /*descr*/
	_parser.parseStringN(_dummy, 0, "descr2");  /*descr2*/
	_parser.parseStringN(_dummy, 0, "descr3");  /*descr3*/
	_parser.parseStringN(_dummy, 0, "infoMsg");  /*infoMsg*/
}

//=================================================================
//                    IceDuelUserStats
//=================================================================

pokerduel::IceDuelUserStats::IceDuelUserStats()
{
	clear();
}

void pokerduel::IceDuelUserStats::clear()
{
	userIntId = 0;
	duelsWon = 0;
	duelsLost = 0;
	duelsDraw = 0;
	totalEarnedChips = 0;
	totalStartChips = 0;
	handsWon = 0;
	handsPlayed = 0;
	winStreak = 0;
	bestFive.clear();
}

bool pokerduel::IceDuelUserStats::equals(const IceDuelUserStats& _o) const
{
	return userIntId == _o.userIntId &&
		duelsWon == _o.duelsWon &&
		duelsLost == _o.duelsLost &&
		duelsDraw == _o.duelsDraw &&
		totalEarnedChips == _o.totalEarnedChips &&
		totalStartChips == _o.totalStartChips &&
		handsWon == _o.handsWon &&
		handsPlayed == _o.handsPlayed &&
		winStreak == _o.winStreak &&
		bestFive.equals(_o.bestFive);
}

const char *pokerduel::IceDuelUserStats::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userIntId=");
	_buf.appendInt(userIntId);
	_buf.append(',');
	_buf.append("duelsWon=");
	_buf.appendInt(duelsWon);
	_buf.append(',');
	_buf.append("duelsLost=");
	_buf.appendInt(duelsLost);
	_buf.append(',');
	_buf.append("duelsDraw=");
	_buf.appendInt(duelsDraw);
	_buf.append(',');
	_buf.append("totalEarnedChips=");
	_buf.appendInt64(totalEarnedChips);
	_buf.append(',');
	_buf.append("totalStartChips=");
	_buf.appendInt64(totalStartChips);
	_buf.append(',');
	_buf.append("handsWon=");
	_buf.appendInt(handsWon);
	_buf.append(',');
	_buf.append("handsPlayed=");
	_buf.appendInt(handsPlayed);
	_buf.append(',');
	_buf.append("winStreak=");
	_buf.appendInt(winStreak);
	_buf.append(',');
	_buf.append("bestFive=");
	bestFive.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::IceDuelUserStats::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(userIntId);
	_msg.composeINT32(duelsWon);
	_msg.composeINT32(duelsLost);
	_msg.composeINT32(duelsDraw);
	_msg.composeINT64(totalEarnedChips);
	_msg.composeINT64(totalStartChips);
	_msg.composeINT32(handsWon);
	_msg.composeINT32(handsPlayed);
	_msg.composeINT32(winStreak);
	bestFive.composeMsg(_msg);
}

void pokerduel::IceDuelUserStats::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(userIntId);
	_parser.parseINT32(duelsWon);
	_parser.parseINT32(duelsLost);
	_parser.parseINT32(duelsDraw);
	_parser.parseINT64(totalEarnedChips);
	_parser.parseINT64(totalStartChips);
	_parser.parseINT32(handsWon);
	_parser.parseINT32(handsPlayed);
	_parser.parseINT32(winStreak);
	bestFive.parseMsg(_parser);
}

/*static*/ void pokerduel::IceDuelUserStats::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(4);  /*userIntId*/
	_parser.skip(4);  /*duelsWon*/
	_parser.skip(4);  /*duelsLost*/
	_parser.skip(4);  /*duelsDraw*/
	_parser.skip(8);  /*totalEarnedChips*/
	_parser.skip(8);  /*totalStartChips*/
	_parser.skip(4);  /*handsWon*/
	_parser.skip(4);  /*handsPlayed*/
	_parser.skip(4);  /*winStreak*/
	XINT64::validateMsg(_parser);  /*bestFive*/
}

//=================================================================
//                    IceDuelUserPVPStats
//=================================================================

pokerduel::IceDuelUserPVPStats::IceDuelUserPVPStats()
{
	clear();
}

void pokerduel::IceDuelUserPVPStats::clear()
{
	userIntId1 = 0;
	userIntId2 = 0;
	duelsWon = 0;
	duelsLost = 0;
	duelsDraw = 0;
}

bool pokerduel::IceDuelUserPVPStats::equals(const IceDuelUserPVPStats& _o) const
{
	return userIntId1 == _o.userIntId1 &&
		userIntId2 == _o.userIntId2 &&
		duelsWon == _o.duelsWon &&
		duelsLost == _o.duelsLost &&
		duelsDraw == _o.duelsDraw;
}

const char *pokerduel::IceDuelUserPVPStats::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userIntId1=");
	_buf.appendInt(userIntId1);
	_buf.append(',');
	_buf.append("userIntId2=");
	_buf.appendInt(userIntId2);
	_buf.append(',');
	_buf.append("duelsWon=");
	_buf.appendInt(duelsWon);
	_buf.append(',');
	_buf.append("duelsLost=");
	_buf.appendInt(duelsLost);
	_buf.append(',');
	_buf.append("duelsDraw=");
	_buf.appendInt(duelsDraw);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::IceDuelUserPVPStats::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(userIntId1);
	_msg.composeINT32(userIntId2);
	_msg.composeINT32(duelsWon);
	_msg.composeINT32(duelsLost);
	_msg.composeINT32(duelsDraw);
}

void pokerduel::IceDuelUserPVPStats::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(userIntId1);
	_parser.parseINT32(userIntId2);
	_parser.parseINT32(duelsWon);
	_parser.parseINT32(duelsLost);
	_parser.parseINT32(duelsDraw);
}

/*static*/ void pokerduel::IceDuelUserPVPStats::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(4);  /*userIntId1*/
	_parser.skip(4);  /*userIntId2*/
	_parser.skip(4);  /*duelsWon*/
	_parser.skip(4);  /*duelsLost*/
	_parser.skip(4);  /*duelsDraw*/
}

//=================================================================
//                    IceDuelsUserAchievement
//=================================================================

pokerduel::IceDuelsUserAchievement::IceDuelsUserAchievement()
{
	clear();
}

void pokerduel::IceDuelsUserAchievement::clear()
{
	achievementId = 0;
	counter1.clear();
}

bool pokerduel::IceDuelsUserAchievement::equals(const IceDuelsUserAchievement& _o) const
{
	return achievementId == _o.achievementId &&
		counter1.equals(_o.counter1);
}

const char *pokerduel::IceDuelsUserAchievement::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("achievementId=");
	_buf.appendInt(achievementId);
	_buf.append(',');
	_buf.append("counter1=");
	counter1.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::IceDuelsUserAchievement::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(achievementId);
	counter1.composeMsg(_msg);
}

void pokerduel::IceDuelsUserAchievement::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(achievementId);
	counter1.parseMsg(_parser);
}

/*static*/ void pokerduel::IceDuelsUserAchievement::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(4);  /*achievementId*/
	XINT64::validateMsg(_parser);  /*counter1*/
}

//=================================================================
//                    DbmInfo
//=================================================================

pokerduel::dbm::DbmInfo::DbmInfo()
{
	clear();
}

void pokerduel::dbm::DbmInfo::clear()
{
	dbmId = 0;
	dbmAddressRO.clear();
	dbmInstanceRO.clear();
	dbmAddressRW.clear();
	dbmInstanceRW.clear();
}

bool pokerduel::dbm::DbmInfo::equals(const DbmInfo& _o) const
{
	return dbmId == _o.dbmId &&
		dbmAddressRO.equals(_o.dbmAddressRO) &&
		dbmInstanceRO.equals(_o.dbmInstanceRO) &&
		dbmAddressRW.equals(_o.dbmAddressRW) &&
		dbmInstanceRW.equals(_o.dbmInstanceRW);
}

const char *pokerduel::dbm::DbmInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("dbmId=");
	_buf.appendInt(dbmId);
	_buf.append(',');
	_buf.append("dbmAddressRO=");
	_buf.append(dbmAddressRO);
	_buf.append(',');
	_buf.append("dbmInstanceRO=");
	_buf.append(dbmInstanceRO);
	_buf.append(',');
	_buf.append("dbmAddressRW=");
	_buf.append(dbmAddressRW);
	_buf.append(',');
	_buf.append("dbmInstanceRW=");
	_buf.append(dbmInstanceRW);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::dbm::DbmInfo::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(dbmId);
	_msg.composeString(dbmAddressRO);
	_msg.composeString(dbmInstanceRO);
	_msg.composeString(dbmAddressRW);
	_msg.composeString(dbmInstanceRW);
}

void pokerduel::dbm::DbmInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(dbmId);
	_parser.parseStringPN(dbmAddressRO, 0, "dbmAddressRO");
	_parser.parseStringPN(dbmInstanceRO, 0, "dbmInstanceRO");
	_parser.parseStringPN(dbmAddressRW, 0, "dbmAddressRW");
	_parser.parseStringPN(dbmInstanceRW, 0, "dbmInstanceRW");
}

/*static*/ void pokerduel::dbm::DbmInfo::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*dbmId*/
	_parser.parseStringN(_dummy, 0, "dbmAddressRO");  /*dbmAddressRO*/
	_parser.parseStringN(_dummy, 0, "dbmInstanceRO");  /*dbmInstanceRO*/
	_parser.parseStringN(_dummy, 0, "dbmAddressRW");  /*dbmAddressRW*/
	_parser.parseStringN(_dummy, 0, "dbmInstanceRW");  /*dbmInstanceRW*/
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_GET_INIT_DATA
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_INIT_DATA::Protocol_DBM_Q_PDUEL_GET_INIT_DATA()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_INIT_DATA::clear()
{
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_INIT_DATA::equals(const Protocol_DBM_Q_PDUEL_GET_INIT_DATA& _o) const
{
	return true;
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_INIT_DATA::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_GET_INIT_DATA).append(")");
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_INIT_DATA::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_INIT_DATA::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_INIT_DATA::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_DBM_A_PDUEL_GET_INIT_DATA
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_INIT_DATA::Protocol_DBM_A_PDUEL_GET_INIT_DATA()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_INIT_DATA::clear()
{
	errCode = 0;
	errString.clear();
	dbmList.clear();
	duelTypes.clear();
	runningDuels.clear();
	challenges.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_INIT_DATA::equals(const Protocol_DBM_A_PDUEL_GET_INIT_DATA& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		dbmList.equals(_o.dbmList) &&
		duelTypes.equals(_o.duelTypes) &&
		runningDuels.equals(_o.runningDuels) &&
		challenges.equals(_o.challenges);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_INIT_DATA::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_GET_INIT_DATA).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("dbmList=");
		dbmList.toTraceString(_buf);
		_buf.append(',');
		_buf.append("duelTypes=");
		duelTypes.toTraceString(_buf);
		_buf.append(',');
		_buf.append("runningDuels=");
		runningDuels.toTraceString(_buf);
		_buf.append(',');
		_buf.append("challenges=");
		challenges.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_INIT_DATA::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
	else
	{
		dbmList.composeMsg(_msg);
		duelTypes.composeMsg(_msg);
		runningDuels.composeMsg(_msg);
		challenges.composeMsg(_msg);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_INIT_DATA::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
	else
	{
		dbmList.parseMsg(_parser);
		duelTypes.parseMsg(_parser);
		runningDuels.parseMsg(_parser);
		challenges.parseMsg(_parser);
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_INIT_DATA::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
	else
	{
		ThinAtf::LAtfVector< DbmInfo, 4 >::validateMsg(_parser);  /*dbmList*/
		ThinAtf::LAtfVector< DuelType, 4 >::validateMsg(_parser);  /*duelTypes*/
		ThinAtf::LAtfVector< RunningDuel, 4 >::validateMsg(_parser);  /*runningDuels*/
		ThinAtf::LAtfVector< DuelChallenge, 4 >::validateMsg(_parser);  /*challenges*/
	}
}

//=================================================================
//                    RunningState
//=================================================================

pokerduel::dbm::RunningState::RunningState()
{
	clear();
}

void pokerduel::dbm::RunningState::clear()
{
	stateSeq = 0;
	state.clear();
	algorId = 0;
	flags = 0;
}

bool pokerduel::dbm::RunningState::equals(const RunningState& _o) const
{
	return stateSeq == _o.stateSeq &&
		state.equals(_o.state) &&
		algorId == _o.algorId &&
		flags == _o.flags;
}

const char *pokerduel::dbm::RunningState::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("stateSeq=");
	_buf.appendUint(stateSeq);
	_buf.append(',');
	_buf.append("state=");
	_buf.append(state);
	_buf.append(',');
	_buf.append("algorId=");
	_buf.appendUint(algorId);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::dbm::RunningState::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(stateSeq);
	_msg.composeString(state);
	_msg.composeBYTE(algorId);
	_msg.composeUINT32(flags);
}

void pokerduel::dbm::RunningState::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(stateSeq);
	_parser.parseStringPN(state, 0, "state");
	_parser.parseBYTE(algorId);
	_parser.parseUINT32(flags);
}

/*static*/ void pokerduel::dbm::RunningState::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*stateSeq*/
	_parser.parseStringN(_dummy, 0, "state");  /*state*/
	_parser.skip(1);  /*algorId*/
	_parser.skip(4);  /*flags*/
}

//=================================================================
//                    CreatedDuelInfo
//=================================================================

pokerduel::dbm::CreatedDuelInfo::CreatedDuelInfo()
{
	clear();
}

void pokerduel::dbm::CreatedDuelInfo::clear()
{
	duelId = 0;
	tableId = 0;
	handIds.clear();
	player1.clear();
	player2.clear();
	vppMultipliers.clear();
}

bool pokerduel::dbm::CreatedDuelInfo::equals(const CreatedDuelInfo& _o) const
{
	return duelId == _o.duelId &&
		tableId == _o.tableId &&
		handIds.equals(_o.handIds) &&
		player1.equals(_o.player1) &&
		player2.equals(_o.player2) &&
		vppMultipliers.equals(_o.vppMultipliers);
}

const char *pokerduel::dbm::CreatedDuelInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	_buf.append(',');
	_buf.append("handIds=");
	handIds.toTraceString(_buf);
	_buf.append(',');
	_buf.append("player1=");
	player1.toTraceString(_buf);
	_buf.append(',');
	_buf.append("player2=");
	player2.toTraceString(_buf);
	_buf.append(',');
	_buf.append("vppMultipliers=");
	_buf.append(vppMultipliers);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::dbm::CreatedDuelInfo::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeUINT64(tableId);
	handIds.composeMsg(_msg);
	player1.composeMsg(_msg);
	player2.composeMsg(_msg);
	_msg.composeString(vppMultipliers);
}

void pokerduel::dbm::CreatedDuelInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseUINT64(tableId);
	handIds.parseMsg(_parser);
	player1.parseMsg(_parser);
	player2.parseMsg(_parser);
	_parser.parseStringPN(vppMultipliers, 0, "vppMultipliers");
}

/*static*/ void pokerduel::dbm::CreatedDuelInfo::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.skip(8);  /*tableId*/
	ThinAtf::LAtfVector< UINT64, 4 >::validateMsg(_parser);  /*handIds*/
	DuelPlayer::validateMsg(_parser);  /*player1*/
	DuelPlayer::validateMsg(_parser);  /*player2*/
	_parser.parseStringN(_dummy, 0, "vppMultipliers");  /*vppMultipliers*/
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE::Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE::clear()
{
	duelId = 0;
	runningState.clear();
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE::equals(const Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE& _o) const
{
	return duelId == _o.duelId &&
		runningState.equals(_o.runningState);
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_SAVE_RUNNING_STATE).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("runningState=");
	runningState.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	runningState.composeMsg(_msg);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	runningState.parseMsg(_parser);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_RUNNING_STATE::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	RunningState::validateMsg(_parser);  /*runningState*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE::Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE::equals(const Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_SAVE_RUNNING_STATE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_RUNNING_STATE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                    SingleStateUpdate
//=================================================================

pokerduel::dbm::SingleStateUpdate::SingleStateUpdate()
{
	clear();
}

void pokerduel::dbm::SingleStateUpdate::clear()
{
	userIntId = 0;
	stateKey = 0;
	stateValue.clear();
}

bool pokerduel::dbm::SingleStateUpdate::equals(const SingleStateUpdate& _o) const
{
	return userIntId == _o.userIntId &&
		stateKey == _o.stateKey &&
		stateValue.equals(_o.stateValue);
}

const char *pokerduel::dbm::SingleStateUpdate::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userIntId=");
	_buf.appendUint(userIntId);
	_buf.append(',');
	_buf.append("stateKey=");
	_buf.appendInt(stateKey);
	_buf.append(',');
	_buf.append("stateValue=");
	_buf.append(stateValue);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::dbm::SingleStateUpdate::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(userIntId);
	_msg.composeINT32(stateKey);
	_msg.composeString(stateValue);
}

void pokerduel::dbm::SingleStateUpdate::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(userIntId);
	_parser.parseINT32(stateKey);
	_parser.parseStringPN(stateValue, 0, "stateValue");
}

/*static*/ void pokerduel::dbm::SingleStateUpdate::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*userIntId*/
	_parser.skip(4);  /*stateKey*/
	_parser.parseStringN(_dummy, 0, "stateValue");  /*stateValue*/
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE::Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE::clear()
{
	duelId = 0;
	states.clear();
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE::equals(const Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE& _o) const
{
	return duelId == _o.duelId &&
		states.equals(_o.states);
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_UPDATE_RUNNING_STATE).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("states=");
	states.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	states.composeMsg(_msg);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	states.parseMsg(_parser);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_RUNNING_STATE::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	ThinAtf::LAtfVector< SingleStateUpdate, 4 >::validateMsg(_parser);  /*states*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE::Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE::equals(const Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_UPDATE_RUNNING_STATE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_RUNNING_STATE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE::Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE::clear()
{
	duelId = 0;
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE::equals(const Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE& _o) const
{
	return duelId == _o.duelId;
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_GET_RUNNING_STATE).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_RUNNING_STATE::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_GET_RUNNING_STATE
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_RUNNING_STATE::Protocol_DBM_A_PDUEL_GET_RUNNING_STATE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_RUNNING_STATE::clear()
{
	errCode = 0;
	errString.clear();
	duelId = 0;
	runningStates.clear();
	runningStates2.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_RUNNING_STATE::equals(const Protocol_DBM_A_PDUEL_GET_RUNNING_STATE& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		duelId == _o.duelId &&
		runningStates.equals(_o.runningStates) &&
		runningStates2.equals(_o.runningStates2);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_RUNNING_STATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_GET_RUNNING_STATE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("duelId=");
		_buf.appendUint64(duelId);
		_buf.append(',');
		_buf.append("runningStates=");
		runningStates.toTraceString(_buf);
		_buf.append(',');
		_buf.append("runningStates2=");
		runningStates2.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_RUNNING_STATE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
	else
	{
		_msg.composeUINT64(duelId);
		runningStates.composeMsg(_msg);
		runningStates2.composeMsg(_msg);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_RUNNING_STATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
	else
	{
		_parser.parseUINT64(duelId);
		runningStates.parseMsg(_parser);
		if(_parser.parseEnded()) return;
		runningStates2.parseMsg(_parser);
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_RUNNING_STATE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
	else
	{
		_parser.skip(8);  /*duelId*/
		ThinAtf::LAtfVector< RunningState, 4 >::validateMsg(_parser);  /*runningStates*/
		if(_parser.parseEnded()) return;
		ThinAtf::LAtfVector< SingleStateUpdate, 4 >::validateMsg(_parser);  /*runningStates2*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES::Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES::clear()
{
	newDuelTypes.clear();
	adminUserId.clear();
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES::equals(const Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES& _o) const
{
	return newDuelTypes.equals(_o.newDuelTypes) &&
		adminUserId.equals(_o.adminUserId);
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_ADD_DUEL_TYPES).append(")");
	_buf.append(',');
	_buf.append("newDuelTypes=");
	newDuelTypes.toTraceString(_buf);
	_buf.append(',');
	_buf.append("adminUserId=");
	_buf.append(adminUserId);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES::composeMsg(CommMsgBody& _msg) const
{
	newDuelTypes.composeMsg(_msg);
	_msg.composeString(adminUserId);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES::parseMsg(CommMsgParser& _parser)
{
	newDuelTypes.parseMsg(_parser);
	_parser.parseStringPN(adminUserId, 0, "adminUserId");
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_ADD_DUEL_TYPES::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	ThinAtf::LAtfVector< DuelType, 4 >::validateMsg(_parser);  /*newDuelTypes*/
	_parser.parseStringN(_dummy, 0, "adminUserId");  /*adminUserId*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES::Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES::clear()
{
	errCode = 0;
	errString.clear();
	duelTypeIds.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES::equals(const Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		duelTypeIds.equals(_o.duelTypeIds);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_ADD_DUEL_TYPES).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("duelTypeIds=");
		duelTypeIds.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
	else
	{
		duelTypeIds.composeMsg(_msg);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
	else
	{
		duelTypeIds.parseMsg(_parser);
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_ADD_DUEL_TYPES::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
	else
	{
		ThinAtf::LAtfVector< UINT32, 4 >::validateMsg(_parser);  /*duelTypeIds*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE::Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE::clear()
{
	duelTypeId = 0;
	adminUserId.clear();
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE::equals(const Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE& _o) const
{
	return duelTypeId == _o.duelTypeId &&
		adminUserId.equals(_o.adminUserId);
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_CANCEL_DUEL_TYPE).append(")");
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("adminUserId=");
	_buf.append(adminUserId);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(duelTypeId);
	_msg.composeString(adminUserId);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(duelTypeId);
	_parser.parseStringPN(adminUserId, 0, "adminUserId");
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL_TYPE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*duelTypeId*/
	_parser.parseStringN(_dummy, 0, "adminUserId");  /*adminUserId*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE::Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE::equals(const Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_CANCEL_DUEL_TYPE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL_TYPE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS::clear()
{
	duelTypeId = 0;
	newStatus = 0;
	adminUserId.clear();
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS::equals(const Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS& _o) const
{
	return duelTypeId == _o.duelTypeId &&
		newStatus == _o.newStatus &&
		adminUserId.equals(_o.adminUserId);
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS).append(")");
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("newStatus=");
	_buf.appendInt(newStatus);
	_buf.append(',');
	_buf.append("adminUserId=");
	_buf.append(adminUserId);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(duelTypeId);
	_msg.composeINT32(newStatus);
	_msg.composeString(adminUserId);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(duelTypeId);
	_parser.parseINT32(newStatus);
	_parser.parseStringPN(adminUserId, 0, "adminUserId");
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE_STATUS::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*duelTypeId*/
	_parser.skip(4);  /*newStatus*/
	_parser.parseStringN(_dummy, 0, "adminUserId");  /*adminUserId*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS::equals(const Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE_STATUS::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS::Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS::clear()
{
	duelId = 0;
	newStatus = 0;
	adminId.clear();
	when.setNull();
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS::equals(const Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS& _o) const
{
	return duelId == _o.duelId &&
		newStatus == _o.newStatus &&
		adminId.equals(_o.adminId) &&
		when.equals(_o.when);
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_UPDATE_DUEL_STATUS).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("newStatus=");
	_buf.appendInt(newStatus);
	_buf.append(',');
	_buf.append("adminId=");
	_buf.append(adminId);
	_buf.append(',');
	_buf.append("when=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, when);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeINT32(newStatus);
	_msg.composeString(adminId);
	_msg.composeSrvTime(when);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseINT32(newStatus);
	_parser.parseStringPN(adminId, 0, "adminId");
	_parser.parseSrvTime(when);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUEL_STATUS::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.skip(4);  /*newStatus*/
	_parser.parseStringN(_dummy, 0, "adminId");  /*adminId*/
	_parser.skip(8);  /*when*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS::Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS::equals(const Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_UPDATE_DUEL_STATUS).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUEL_STATUS::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE::Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE::clear()
{
	userId1.clear();
	userIntId1 = 0;
	userId2.clear();
	userIntId2 = 0;
	duelTypeId = 0;
	whenOffered.setNull();
	buyInPlusRake = 0;
	currency.clear();
	isPlayMoney = false;
	ticketId1 = 0;
	challengeType = 0;
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE::equals(const Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE& _o) const
{
	return userId1.equals(_o.userId1) &&
		userIntId1 == _o.userIntId1 &&
		userId2.equals(_o.userId2) &&
		userIntId2 == _o.userIntId2 &&
		duelTypeId == _o.duelTypeId &&
		whenOffered.equals(_o.whenOffered) &&
		buyInPlusRake == _o.buyInPlusRake &&
		currency.equals(_o.currency) &&
		isPlayMoney == _o.isPlayMoney &&
		ticketId1 == _o.ticketId1 &&
		challengeType == _o.challengeType;
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_CREATE_CHALLENGE).append(")");
	_buf.append(',');
	_buf.append("userId1=");
	_buf.append(userId1);
	_buf.append(',');
	_buf.append("userIntId1=");
	_buf.appendUint(userIntId1);
	_buf.append(',');
	_buf.append("userId2=");
	_buf.append(userId2);
	_buf.append(',');
	_buf.append("userIntId2=");
	_buf.appendUint(userIntId2);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("whenOffered=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenOffered);
	_buf.append(',');
	_buf.append("buyInPlusRake=");
	_buf.appendInt64(buyInPlusRake);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("ticketId1=");
	_buf.appendUint(ticketId1);
	_buf.append(',');
	_buf.append("challengeType=");
	_buf.appendInt(challengeType);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId1);
	_msg.composeUINT32(userIntId1);
	_msg.composeString(userId2);
	_msg.composeUINT32(userIntId2);
	_msg.composeUINT32(duelTypeId);
	_msg.composeSrvTime(whenOffered);
	_msg.composeINT64(buyInPlusRake);
	_msg.composeString(currency);
	_msg.composeBOOL(isPlayMoney);
	_msg.composeUINT32(ticketId1);
	_msg.composeINT32(challengeType);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringPN(userId1, 0, "userId1");
	_parser.parseUINT32(userIntId1);
	_parser.parseStringPN(userId2, 0, "userId2");
	_parser.parseUINT32(userIntId2);
	_parser.parseUINT32(duelTypeId);
	_parser.parseSrvTime(whenOffered);
	_parser.parseINT64(buyInPlusRake);
	_parser.parseStringPN(currency, 0, "currency");
	_parser.parseBOOL(isPlayMoney);
	_parser.parseUINT32(ticketId1);
	_parser.parseINT32(challengeType);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CREATE_CHALLENGE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.parseStringN(_dummy, 0, "userId1");  /*userId1*/
	_parser.skip(4);  /*userIntId1*/
	_parser.parseStringN(_dummy, 0, "userId2");  /*userId2*/
	_parser.skip(4);  /*userIntId2*/
	_parser.skip(4);  /*duelTypeId*/
	_parser.skip(8);  /*whenOffered*/
	_parser.skip(8);  /*buyInPlusRake*/
	_parser.parseStringN(_dummy, 0, "currency");  /*currency*/
	bool isPlayMoney; _parser.parseBOOL(isPlayMoney);
	_parser.skip(4);  /*ticketId1*/
	_parser.skip(4);  /*challengeType*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_CREATE_CHALLENGE
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_CREATE_CHALLENGE::Protocol_DBM_A_PDUEL_CREATE_CHALLENGE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CREATE_CHALLENGE::clear()
{
	errCode = 0;
	errString.clear();
	challengeID = 0;
	ticketUsed = false;
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_CREATE_CHALLENGE::equals(const Protocol_DBM_A_PDUEL_CREATE_CHALLENGE& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		challengeID == _o.challengeID &&
		ticketUsed == _o.ticketUsed;
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_CREATE_CHALLENGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_CREATE_CHALLENGE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("challengeID=");
		_buf.appendUint64(challengeID);
		_buf.append(',');
		_buf.append("ticketUsed=");
		_buf.appendUint(ticketUsed);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CREATE_CHALLENGE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
	else
	{
		_msg.composeUINT64(challengeID);
		_msg.composeBOOL(ticketUsed);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CREATE_CHALLENGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
	else
	{
		_parser.parseUINT64(challengeID);
		_parser.parseBOOL(ticketUsed);
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_CREATE_CHALLENGE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
	else
	{
		_parser.skip(8);  /*challengeID*/
		bool ticketUsed; _parser.parseBOOL(ticketUsed);
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE::Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE::clear()
{
	challengeID = 0;
	whenResponded.setNull();
	timeBankInSeconds = 0;
	siteMask = 0;
	numHands = 0;
	vppMultipliers.clear();
	ticketIdPlayer2 = 0;
	player2.clear();
	userIntId2 = 0;
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE::equals(const Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE& _o) const
{
	return challengeID == _o.challengeID &&
		whenResponded.equals(_o.whenResponded) &&
		timeBankInSeconds == _o.timeBankInSeconds &&
		siteMask == _o.siteMask &&
		numHands == _o.numHands &&
		vppMultipliers.equals(_o.vppMultipliers) &&
		ticketIdPlayer2 == _o.ticketIdPlayer2 &&
		player2.equals(_o.player2) &&
		userIntId2 == _o.userIntId2;
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_ACCEPT_CHALLENGE).append(")");
	_buf.append(',');
	_buf.append("challengeID=");
	_buf.appendUint64(challengeID);
	_buf.append(',');
	_buf.append("whenResponded=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenResponded);
	_buf.append(',');
	_buf.append("timeBankInSeconds=");
	_buf.appendInt(timeBankInSeconds);
	_buf.append(',');
	_buf.append("siteMask=");
	_buf.appendUint(siteMask);
	_buf.append(',');
	_buf.append("numHands=");
	_buf.appendInt(numHands);
	_buf.append(',');
	_buf.append("vppMultipliers=");
	_buf.append(vppMultipliers);
	_buf.append(',');
	_buf.append("ticketIdPlayer2=");
	_buf.appendUint(ticketIdPlayer2);
	_buf.append(',');
	_buf.append("player2=");
	_buf.append(player2);
	_buf.append(',');
	_buf.append("userIntId2=");
	_buf.appendUint(userIntId2);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(challengeID);
	_msg.composeSrvTime(whenResponded);
	_msg.composeINT32(timeBankInSeconds);
	_msg.composeUINT32(siteMask);
	_msg.composeINT32(numHands);
	_msg.composeString(vppMultipliers);
	_msg.composeUINT32(ticketIdPlayer2);
	_msg.composeString(player2);
	_msg.composeUINT32(userIntId2);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(challengeID);
	_parser.parseSrvTime(whenResponded);
	_parser.parseINT32(timeBankInSeconds);
	_parser.parseUINT32(siteMask);
	_parser.parseINT32(numHands);
	_parser.parseStringPN(vppMultipliers, 0, "vppMultipliers");
	_parser.parseUINT32(ticketIdPlayer2);
	_parser.parseStringPN(player2, 0, "player2");
	_parser.parseUINT32(userIntId2);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_ACCEPT_CHALLENGE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*challengeID*/
	_parser.skip(8);  /*whenResponded*/
	_parser.skip(4);  /*timeBankInSeconds*/
	_parser.skip(4);  /*siteMask*/
	_parser.skip(4);  /*numHands*/
	_parser.parseStringN(_dummy, 0, "vppMultipliers");  /*vppMultipliers*/
	_parser.skip(4);  /*ticketIdPlayer2*/
	_parser.parseStringN(_dummy, 0, "player2");  /*player2*/
	_parser.skip(4);  /*userIntId2*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE::Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE::clear()
{
	errCode = 0;
	errString.clear();
	newDuelInfo.clear();
	player2TicketUsed = false;
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE::equals(const Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		newDuelInfo.equals(_o.newDuelInfo) &&
		player2TicketUsed == _o.player2TicketUsed;
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_ACCEPT_CHALLENGE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("newDuelInfo=");
		newDuelInfo.toTraceString(_buf);
		_buf.append(',');
		_buf.append("player2TicketUsed=");
		_buf.appendUint(player2TicketUsed);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
	else
	{
		newDuelInfo.composeMsg(_msg);
		_msg.composeBOOL(player2TicketUsed);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
	else
	{
		newDuelInfo.parseMsg(_parser);
		_parser.parseBOOL(player2TicketUsed);
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_ACCEPT_CHALLENGE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
	else
	{
		CreatedDuelInfo::validateMsg(_parser);  /*newDuelInfo*/
		bool player2TicketUsed; _parser.parseBOOL(player2TicketUsed);
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE::Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE::clear()
{
	challengeID = 0;
	challengeResponse = 0;
	whenResponded.setNull();
	adminUserId.clear();
	adminUserIntId = 0;
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE::equals(const Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE& _o) const
{
	return challengeID == _o.challengeID &&
		challengeResponse == _o.challengeResponse &&
		whenResponded.equals(_o.whenResponded) &&
		adminUserId.equals(_o.adminUserId) &&
		adminUserIntId == _o.adminUserIntId;
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_CANCEL_CHALLENGE).append(")");
	_buf.append(',');
	_buf.append("challengeID=");
	_buf.appendUint64(challengeID);
	_buf.append(',');
	_buf.append("challengeResponse=");
	_buf.appendInt(challengeResponse);
	_buf.append(',');
	_buf.append("whenResponded=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenResponded);
	_buf.append(',');
	_buf.append("adminUserId=");
	_buf.append(adminUserId);
	_buf.append(',');
	_buf.append("adminUserIntId=");
	_buf.appendUint(adminUserIntId);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(challengeID);
	_msg.composeINT32(challengeResponse);
	_msg.composeSrvTime(whenResponded);
	_msg.composeString(adminUserId);
	_msg.composeUINT32(adminUserIntId);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(challengeID);
	_parser.parseINT32(challengeResponse);
	_parser.parseSrvTime(whenResponded);
	_parser.parseStringPN(adminUserId, 0, "adminUserId");
	_parser.parseUINT32(adminUserIntId);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_CHALLENGE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*challengeID*/
	_parser.skip(4);  /*challengeResponse*/
	_parser.skip(8);  /*whenResponded*/
	_parser.parseStringN(_dummy, 0, "adminUserId");  /*adminUserId*/
	_parser.skip(4);  /*adminUserIntId*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE::Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE::equals(const Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_CANCEL_CHALLENGE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_CHALLENGE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT::Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT::clear()
{
	duelId = 0;
	playerUserId.clear();
	playerScore = 0;
	isPlaymoney = false;
	currency.clear();
	award = 0;
	fppReward = 0;
	isLastUser = false;
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT::equals(const Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT& _o) const
{
	return duelId == _o.duelId &&
		playerUserId.equals(_o.playerUserId) &&
		playerScore == _o.playerScore &&
		isPlaymoney == _o.isPlaymoney &&
		currency.equals(_o.currency) &&
		award == _o.award &&
		fppReward == _o.fppReward &&
		isLastUser == _o.isLastUser;
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_SAVE_DUEL_RESULT).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("playerUserId=");
	_buf.append(playerUserId);
	_buf.append(',');
	_buf.append("playerScore=");
	_buf.appendInt(playerScore);
	_buf.append(',');
	_buf.append("isPlaymoney=");
	_buf.appendUint(isPlaymoney);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("award=");
	_buf.appendInt64(award);
	_buf.append(',');
	_buf.append("fppReward=");
	_buf.appendInt64(fppReward);
	_buf.append(',');
	_buf.append("isLastUser=");
	_buf.appendUint(isLastUser);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(playerUserId);
	_msg.composeINT32(playerScore);
	_msg.composeBOOL(isPlaymoney);
	_msg.composeString(currency);
	_msg.composeINT64(award);
	_msg.composeINT64(fppReward);
	_msg.composeBOOL(isLastUser);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(playerUserId, 0, "playerUserId");
	_parser.parseINT32(playerScore);
	_parser.parseBOOL(isPlaymoney);
	_parser.parseStringPN(currency, 0, "currency");
	_parser.parseINT64(award);
	_parser.parseINT64(fppReward);
	_parser.parseBOOL(isLastUser);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_SAVE_DUEL_RESULT::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "playerUserId");  /*playerUserId*/
	_parser.skip(4);  /*playerScore*/
	bool isPlaymoney; _parser.parseBOOL(isPlaymoney);
	_parser.parseStringN(_dummy, 0, "currency");  /*currency*/
	_parser.skip(8);  /*award*/
	_parser.skip(8);  /*fppReward*/
	bool isLastUser; _parser.parseBOOL(isLastUser);
}

//=================================================================
//                Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT::Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT::equals(const Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_SAVE_DUEL_RESULT).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_SAVE_DUEL_RESULT::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                    PlayerTimeBank
//=================================================================

pokerduel::dbm::PlayerTimeBank::PlayerTimeBank()
{
	clear();
}

void pokerduel::dbm::PlayerTimeBank::clear()
{
	userId.clear();
	timeBankInSec = 0;
}

bool pokerduel::dbm::PlayerTimeBank::equals(const PlayerTimeBank& _o) const
{
	return userId.equals(_o.userId) &&
		timeBankInSec == _o.timeBankInSec;
}

const char *pokerduel::dbm::PlayerTimeBank::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("timeBankInSec=");
	_buf.appendInt(timeBankInSec);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::dbm::PlayerTimeBank::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId);
	_msg.composeINT32(timeBankInSec);
}

void pokerduel::dbm::PlayerTimeBank::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseINT32(timeBankInSec);
}

/*static*/ void pokerduel::dbm::PlayerTimeBank::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(4);  /*timeBankInSec*/
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK::Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK::clear()
{
	duelId = 0;
	players.clear();
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK::equals(const Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK& _o) const
{
	return duelId == _o.duelId &&
		players.equals(_o.players);
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("players=");
	players.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	players.composeMsg(_msg);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	players.parseMsg(_parser);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_PLAYER_TIMEBANK::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	ThinAtf::LAtfVector< PlayerTimeBank, 4 >::validateMsg(_parser);  /*players*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK::Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK::equals(const Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_PLAYER_TIMEBANK::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_CANCEL_DUEL
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL::Protocol_DBM_Q_PDUEL_CANCEL_DUEL()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL::clear()
{
	duelId = 0;
	duelTypeId = 0;
	adminUserId.clear();
	adminUserIntId = 0;
	when.setNull();
	dbmId = 0;
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL::equals(const Protocol_DBM_Q_PDUEL_CANCEL_DUEL& _o) const
{
	return duelId == _o.duelId &&
		duelTypeId == _o.duelTypeId &&
		adminUserId.equals(_o.adminUserId) &&
		adminUserIntId == _o.adminUserIntId &&
		when.equals(_o.when) &&
		dbmId == _o.dbmId;
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_CANCEL_DUEL).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("adminUserId=");
	_buf.append(adminUserId);
	_buf.append(',');
	_buf.append("adminUserIntId=");
	_buf.appendUint(adminUserIntId);
	_buf.append(',');
	_buf.append("when=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, when);
	_buf.append(',');
	_buf.append("dbmId=");
	_buf.appendInt(dbmId);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeUINT32(duelTypeId);
	_msg.composeString(adminUserId);
	_msg.composeUINT32(adminUserIntId);
	_msg.composeSrvTime(when);
	_msg.composeINT32(dbmId);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseUINT32(duelTypeId);
	_parser.parseStringPN(adminUserId, 0, "adminUserId");
	_parser.parseUINT32(adminUserIntId);
	_parser.parseSrvTime(when);
	_parser.parseINT32(dbmId);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_CANCEL_DUEL::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.skip(4);  /*duelTypeId*/
	_parser.parseStringN(_dummy, 0, "adminUserId");  /*adminUserId*/
	_parser.skip(4);  /*adminUserIntId*/
	_parser.skip(8);  /*when*/
	_parser.skip(4);  /*dbmId*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_CANCEL_DUEL
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL::Protocol_DBM_A_PDUEL_CANCEL_DUEL()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL::equals(const Protocol_DBM_A_PDUEL_CANCEL_DUEL& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_CANCEL_DUEL).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_CANCEL_DUEL::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_DBM_A_ALLOWED_AT_PLAY
//=================================================================

pokerduel::dbm::Protocol_DBM_A_ALLOWED_AT_PLAY::Protocol_DBM_A_ALLOWED_AT_PLAY()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_ALLOWED_AT_PLAY::clear()
{
	errCode = 0;
	errString.clear();
	availChips = 0;
	enoughOnAllAccounts = false;
	ticketId = 0;
	userIntId = 0;
	imageId = 0;
}

bool pokerduel::dbm::Protocol_DBM_A_ALLOWED_AT_PLAY::equals(const Protocol_DBM_A_ALLOWED_AT_PLAY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		availChips == _o.availChips &&
		enoughOnAllAccounts == _o.enoughOnAllAccounts &&
		ticketId == _o.ticketId &&
		userIntId == _o.userIntId &&
		imageId == _o.imageId;
}

const char *pokerduel::dbm::Protocol_DBM_A_ALLOWED_AT_PLAY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_ALLOWED_AT_PLAY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("availChips=");
		_buf.appendInt64(availChips);
		_buf.append(',');
		_buf.append("enoughOnAllAccounts=");
		_buf.appendUint(enoughOnAllAccounts);
	}
	else
	{
		_buf.append(',');
		_buf.append("ticketId=");
		_buf.appendUint(ticketId);
	}
	_buf.append(',');
	_buf.append("userIntId=");
	_buf.appendUint(userIntId);
	_buf.append(',');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_ALLOWED_AT_PLAY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeINT64(availChips);
		_msg.composeBOOL(enoughOnAllAccounts);
	}
	else
	{
		_msg.composeUINT32(ticketId);
	}
	_msg.composeUINT32(userIntId);
	_msg.composeUINT32(imageId);
}

void pokerduel::dbm::Protocol_DBM_A_ALLOWED_AT_PLAY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseINT64(availChips);
		_parser.parseBOOL(enoughOnAllAccounts);
	}
	else
	{
		_parser.parseUINT32(ticketId);
	}
	_parser.parseUINT32(userIntId);
	_parser.parseUINT32(imageId);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_ALLOWED_AT_PLAY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.skip(8);  /*availChips*/
		bool enoughOnAllAccounts; _parser.parseBOOL(enoughOnAllAccounts);
	}
	else
	{
		_parser.skip(4);  /*ticketId*/
	}
	_parser.skip(4);  /*userIntId*/
	_parser.skip(4);  /*imageId*/
}

//=================================================================
//                Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION::Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION::clear()
{
	duelId = 0;
	logLocation.clear();
}

bool pokerduel::dbm::Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION::equals(const Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION& _o) const
{
	return duelId == _o.duelId &&
		logLocation.equals(_o.logLocation);
}

const char *pokerduel::dbm::Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_UPDATE_DUEL_LOGLOCATION).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("logLocation=");
	_buf.append(logLocation);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(logLocation);
}

void pokerduel::dbm::Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(logLocation, 0, "logLocation");
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_UPDATE_DUEL_LOGLOCATION::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "logLocation");  /*logLocation*/
}

//=================================================================
//                Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION
//=================================================================

pokerduel::dbm::Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION::Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION::equals(const Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_UPDATE_DUEL_LOGLOCATION).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_UPDATE_DUEL_LOGLOCATION::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL::Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL::clear()
{
	duelId = 0;
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL::equals(const Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL& _o) const
{
	return duelId == _o.duelId;
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_UNPUBLISH_DUEL).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UNPUBLISH_DUEL::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL::Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL::equals(const Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_UNPUBLISH_DUEL).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_UNPUBLISH_DUEL::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL::Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL::clear()
{
	duelId = 0;
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL::equals(const Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL& _o) const
{
	return duelId == _o.duelId;
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_GET_LASTCHATORDINAL).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_GET_LASTCHATORDINAL::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL::Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL::clear()
{
	errCode = 0;
	errString.clear();
	duelId = 0;
	lastChatOrdinal = 0;
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL::equals(const Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		duelId == _o.duelId &&
		lastChatOrdinal == _o.lastChatOrdinal;
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_GET_LASTCHATORDINAL).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("duelId=");
		_buf.appendUint64(duelId);
		_buf.append(',');
		_buf.append("lastChatOrdinal=");
		_buf.appendInt(lastChatOrdinal);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode)
	{
		_msg.composeString(errString);
	}
	else
	{
		_msg.composeUINT64(duelId);
		_msg.composeINT32(lastChatOrdinal);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
	else
	{
		_parser.parseUINT64(duelId);
		_parser.parseINT32(lastChatOrdinal);
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_GET_LASTCHATORDINAL::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
	else
	{
		_parser.skip(8);  /*duelId*/
		_parser.skip(4);  /*lastChatOrdinal*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS::Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS::clear()
{
	duelId = 0;
	tableId = 0;
	from = 0;
	to = 0;
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS::equals(const Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS& _o) const
{
	return duelId == _o.duelId &&
		tableId == _o.tableId &&
		from == _o.from &&
		to == _o.to;
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_LOAD_CHAT_ITEMS).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	_buf.append(',');
	_buf.append("from=");
	_buf.appendInt(from);
	_buf.append(',');
	_buf.append("to=");
	_buf.appendInt(to);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeUINT64(tableId);
	_msg.composeINT32(from);
	_msg.composeINT32(to);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseUINT64(tableId);
	_parser.parseINT32(from);
	_parser.parseINT32(to);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_LOAD_CHAT_ITEMS::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	_parser.skip(8);  /*tableId*/
	_parser.skip(4);  /*from*/
	_parser.skip(4);  /*to*/
}

//=================================================================
//                    DuelChatItem
//=================================================================

pokerduel::dbm::DuelChatItem::DuelChatItem()
{
	clear();
}

void pokerduel::dbm::DuelChatItem::clear()
{
	ordinal = 0;
	userId.clear();
	when.setNull();
	content.clear();
}

bool pokerduel::dbm::DuelChatItem::equals(const DuelChatItem& _o) const
{
	return ordinal == _o.ordinal &&
		userId.equals(_o.userId) &&
		when.equals(_o.when) &&
		content.equals(_o.content);
}

const char *pokerduel::dbm::DuelChatItem::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("ordinal=");
	_buf.appendInt(ordinal);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("when=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, when);
	_buf.append(',');
	_buf.append("content=");
	_buf.append(content);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::dbm::DuelChatItem::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(ordinal);
	_msg.composeString(userId);
	_msg.composeSrvTime(when);
	_msg.composeString(content);
}

void pokerduel::dbm::DuelChatItem::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(ordinal);
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseSrvTime(when);
	_parser.parseStringPN(content, 0, "content");
}

/*static*/ void pokerduel::dbm::DuelChatItem::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*ordinal*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(8);  /*when*/
	_parser.parseStringN(_dummy, 0, "content");  /*content*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS::Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS::clear()
{
	errCode = 0;
	errString.clear();
	duelId = 0;
	chats.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS::equals(const Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		duelId == _o.duelId &&
		chats.equals(_o.chats);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_LOAD_CHAT_ITEMS).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("duelId=");
		_buf.appendUint64(duelId);
		_buf.append(',');
		_buf.append("chats=");
		chats.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode)
	{
		_msg.composeString(errString);
	}
	else
	{
		_msg.composeUINT64(duelId);
		chats.composeMsg(_msg);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
	else
	{
		_parser.parseUINT64(duelId);
		chats.parseMsg(_parser);
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_LOAD_CHAT_ITEMS::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
	else
	{
		_parser.skip(8);  /*duelId*/
		ThinAtf::LAtfVector< DuelChatItem , 4 >::validateMsg(_parser);  /*chats*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL::Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL::clear()
{
	duelId = 0;
	userId.clear();
	clientChatLastOrdinal = 0;
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL::equals(const Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL& _o) const
{
	return duelId == _o.duelId &&
		userId.equals(_o.userId) &&
		clientChatLastOrdinal == _o.clientChatLastOrdinal;
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("clientChatLastOrdinal=");
	_buf.appendUint(clientChatLastOrdinal);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(userId);
	_msg.composeUINT32(clientChatLastOrdinal);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseUINT32(clientChatLastOrdinal);
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_CLIENTCHATORDINAL::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(4);  /*clientChatLastOrdinal*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL::Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL::equals(const Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_CLIENTCHATORDINAL::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE
//=================================================================

pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE::clear()
{
	duelTypeId = 0;
	tournFlags = 0;
	admissions.clear();
	adminUserId.clear();
}

bool pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE::equals(const Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE& _o) const
{
	return duelTypeId == _o.duelTypeId &&
		tournFlags == _o.tournFlags &&
		admissions.equals(_o.admissions) &&
		adminUserId.equals(_o.adminUserId);
}

const char *pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_Q_PDUEL_UPDATE_DUELTYPE).append(")");
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("tournFlags=");
	_buf.appendUint(tournFlags);
	_buf.append(',');
	_buf.append("admissions=");
	admissions.toTraceString(_buf);
	_buf.append(',');
	_buf.append("adminUserId=");
	_buf.append(adminUserId);
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(duelTypeId);
	_msg.composeUINT32(tournFlags);
	admissions.composeMsg(_msg);
	_msg.composeString(adminUserId);
}

void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(duelTypeId);
	_parser.parseUINT32(tournFlags);
	admissions.parseMsg(_parser);
	_parser.parseStringPN(adminUserId, 0, "adminUserId");
}

/*static*/ void pokerduel::dbm::Protocol_DBM_Q_PDUEL_UPDATE_DUELTYPE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*duelTypeId*/
	_parser.skip(4);  /*tournFlags*/
	ThinAtf::LAtfVector< PString, 4 >::validateMsg(_parser);  /*admissions*/
	_parser.parseStringN(_dummy, 0, "adminUserId");  /*adminUserId*/
}

//=================================================================
//                Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE
//=================================================================

pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE()
{
	clear();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE::equals(const Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(DBM_A_PDUEL_UPDATE_DUELTYPE).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dbm::Protocol_DBM_A_PDUEL_UPDATE_DUELTYPE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                    DServerInitMsg
//=================================================================

pokerduel::dserver::DServerInitMsg::DServerInitMsg()
{
	clear();
}

void pokerduel::dserver::DServerInitMsg::clear()
{
	dlobbyAddress.clear();
	dlobbyInstance.clear();
}

bool pokerduel::dserver::DServerInitMsg::equals(const DServerInitMsg& _o) const
{
	return dlobbyAddress.equals(_o.dlobbyAddress) &&
		dlobbyInstance.equals(_o.dlobbyInstance);
}

const char *pokerduel::dserver::DServerInitMsg::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("dlobbyAddress=");
	_buf.append(dlobbyAddress);
	_buf.append(',');
	_buf.append("dlobbyInstance=");
	_buf.append(dlobbyInstance);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::dserver::DServerInitMsg::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(dlobbyAddress);
	_msg.composeString(dlobbyInstance);
}

void pokerduel::dserver::DServerInitMsg::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringPN(dlobbyAddress, 0, "dlobbyAddress");
	_parser.parseStringPN(dlobbyInstance, 0, "dlobbyInstance");
}

/*static*/ void pokerduel::dserver::DServerInitMsg::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.parseStringN(_dummy, 0, "dlobbyAddress");  /*dlobbyAddress*/
	_parser.parseStringN(_dummy, 0, "dlobbyInstance");  /*dlobbyInstance*/
}

//=================================================================
//                Protocol_MSG_DUEL_SERVER_CONNECTED
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED::Protocol_MSG_DUEL_SERVER_CONNECTED()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED::equals(const Protocol_MSG_DUEL_SERVER_CONNECTED& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_SERVER_CONNECTED).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY::Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY::equals(const Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_SERVER_CONNECTED_REPLY).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CONNECTED_REPLY::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_SERVER_CREATE_REQUEST
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REQUEST::Protocol_MSG_DUEL_SERVER_CREATE_REQUEST()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REQUEST::clear()
{
	duelId = 0;
	tableId = 0;
	dbmAddress.clear();
	dbmInstance.clear();
	entropyAddress.clear();
	entropyInstance.clear();
	encryptorAddress.clear();
	encryptorInstance.clear();
	isPlayMoney = false;
	numHands = 0;
	smallBlind = 0;
	bigBlind = 0;
	startingChips = 0;
	initTimeBankSecs = 0;
	timeBankIncrementSecs = 0;
	timeOutTimeBankIncrementSecs = 0;
	handResultShowSecs = 0;
	duelTypeId = 0;
	buyIn = 0;
	rake = 0;
	challengeId = 0;
	areFriends = false;
	currency.clear();
	siteMask = 0;
	handIds.clear();
	player1.clear();
	player2.clear();
}

bool pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REQUEST::equals(const Protocol_MSG_DUEL_SERVER_CREATE_REQUEST& _o) const
{
	return duelId == _o.duelId &&
		tableId == _o.tableId &&
		dbmAddress.equals(_o.dbmAddress) &&
		dbmInstance.equals(_o.dbmInstance) &&
		entropyAddress.equals(_o.entropyAddress) &&
		entropyInstance.equals(_o.entropyInstance) &&
		encryptorAddress.equals(_o.encryptorAddress) &&
		encryptorInstance.equals(_o.encryptorInstance) &&
		isPlayMoney == _o.isPlayMoney &&
		numHands == _o.numHands &&
		smallBlind == _o.smallBlind &&
		bigBlind == _o.bigBlind &&
		startingChips == _o.startingChips &&
		initTimeBankSecs == _o.initTimeBankSecs &&
		timeBankIncrementSecs == _o.timeBankIncrementSecs &&
		timeOutTimeBankIncrementSecs == _o.timeOutTimeBankIncrementSecs &&
		handResultShowSecs == _o.handResultShowSecs &&
		duelTypeId == _o.duelTypeId &&
		buyIn == _o.buyIn &&
		rake == _o.rake &&
		challengeId == _o.challengeId &&
		areFriends == _o.areFriends &&
		currency.equals(_o.currency) &&
		siteMask == _o.siteMask &&
		handIds.equals(_o.handIds) &&
		player1.equals(_o.player1) &&
		player2.equals(_o.player2);
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_SERVER_CREATE_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	_buf.append(',');
	_buf.append("dbmAddress=");
	_buf.append(dbmAddress);
	_buf.append(',');
	_buf.append("dbmInstance=");
	_buf.append(dbmInstance);
	_buf.append(',');
	_buf.append("entropyAddress=");
	_buf.append(entropyAddress);
	_buf.append(',');
	_buf.append("entropyInstance=");
	_buf.append(entropyInstance);
	_buf.append(',');
	_buf.append("encryptorAddress=");
	_buf.append(encryptorAddress);
	_buf.append(',');
	_buf.append("encryptorInstance=");
	_buf.append(encryptorInstance);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("numHands=");
	_buf.appendInt(numHands);
	_buf.append(',');
	_buf.append("smallBlind=");
	_buf.appendInt(smallBlind);
	_buf.append(',');
	_buf.append("bigBlind=");
	_buf.appendInt(bigBlind);
	_buf.append(',');
	_buf.append("startingChips=");
	_buf.appendInt(startingChips);
	_buf.append(',');
	_buf.append("initTimeBankSecs=");
	_buf.appendInt(initTimeBankSecs);
	_buf.append(',');
	_buf.append("timeBankIncrementSecs=");
	_buf.appendInt(timeBankIncrementSecs);
	_buf.append(',');
	_buf.append("timeOutTimeBankIncrementSecs=");
	_buf.appendInt(timeOutTimeBankIncrementSecs);
	_buf.append(',');
	_buf.append("handResultShowSecs=");
	_buf.appendInt(handResultShowSecs);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("buyIn=");
	_buf.appendInt64(buyIn);
	_buf.append(',');
	_buf.append("rake=");
	_buf.appendInt64(rake);
	_buf.append(',');
	_buf.append("challengeId=");
	_buf.appendUint64(challengeId);
	_buf.append(',');
	_buf.append("areFriends=");
	_buf.appendUint(areFriends);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("siteMask=");
	_buf.appendUint(siteMask);
	_buf.append(',');
	_buf.append("handIds=");
	handIds.toTraceString(_buf);
	_buf.append(',');
	_buf.append("player1=");
	player1.toTraceString(_buf);
	_buf.append(',');
	_buf.append("player2=");
	player2.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeUINT64(tableId);
	_msg.composeString(dbmAddress);
	_msg.composeString(dbmInstance);
	_msg.composeString(entropyAddress);
	_msg.composeString(entropyInstance);
	_msg.composeString(encryptorAddress);
	_msg.composeString(encryptorInstance);
	_msg.composeBOOL(isPlayMoney);
	_msg.composeINT32(numHands);
	_msg.composeINT32(smallBlind);
	_msg.composeINT32(bigBlind);
	_msg.composeINT32(startingChips);
	_msg.composeINT32(initTimeBankSecs);
	_msg.composeINT32(timeBankIncrementSecs);
	_msg.composeINT32(timeOutTimeBankIncrementSecs);
	_msg.composeINT32(handResultShowSecs);
	_msg.composeUINT32(duelTypeId);
	_msg.composeINT64(buyIn);
	_msg.composeINT64(rake);
	_msg.composeUINT64(challengeId);
	_msg.composeBOOL(areFriends);
	_msg.composeString(currency);
	_msg.composeUINT32(siteMask);
	handIds.composeMsg(_msg);
	player1.composeMsg(_msg);
	player2.composeMsg(_msg);
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseUINT64(tableId);
	_parser.parseStringPN(dbmAddress, 0, "dbmAddress");
	_parser.parseStringPN(dbmInstance, 0, "dbmInstance");
	_parser.parseStringPN(entropyAddress, 0, "entropyAddress");
	_parser.parseStringPN(entropyInstance, 0, "entropyInstance");
	_parser.parseStringPN(encryptorAddress, 0, "encryptorAddress");
	_parser.parseStringPN(encryptorInstance, 0, "encryptorInstance");
	_parser.parseBOOL(isPlayMoney);
	_parser.parseINT32(numHands);
	_parser.parseINT32(smallBlind);
	_parser.parseINT32(bigBlind);
	_parser.parseINT32(startingChips);
	_parser.parseINT32(initTimeBankSecs);
	_parser.parseINT32(timeBankIncrementSecs);
	_parser.parseINT32(timeOutTimeBankIncrementSecs);
	_parser.parseINT32(handResultShowSecs);
	_parser.parseUINT32(duelTypeId);
	_parser.parseINT64(buyIn);
	_parser.parseINT64(rake);
	_parser.parseUINT64(challengeId);
	_parser.parseBOOL(areFriends);
	_parser.parseStringPN(currency, 0, "currency");
	_parser.parseUINT32(siteMask);
	handIds.parseMsg(_parser);
	player1.parseMsg(_parser);
	player2.parseMsg(_parser);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REQUEST::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.skip(8);  /*tableId*/
	_parser.parseStringN(_dummy, 0, "dbmAddress");  /*dbmAddress*/
	_parser.parseStringN(_dummy, 0, "dbmInstance");  /*dbmInstance*/
	_parser.parseStringN(_dummy, 0, "entropyAddress");  /*entropyAddress*/
	_parser.parseStringN(_dummy, 0, "entropyInstance");  /*entropyInstance*/
	_parser.parseStringN(_dummy, 0, "encryptorAddress");  /*encryptorAddress*/
	_parser.parseStringN(_dummy, 0, "encryptorInstance");  /*encryptorInstance*/
	bool isPlayMoney; _parser.parseBOOL(isPlayMoney);
	_parser.skip(4);  /*numHands*/
	_parser.skip(4);  /*smallBlind*/
	_parser.skip(4);  /*bigBlind*/
	_parser.skip(4);  /*startingChips*/
	_parser.skip(4);  /*initTimeBankSecs*/
	_parser.skip(4);  /*timeBankIncrementSecs*/
	_parser.skip(4);  /*timeOutTimeBankIncrementSecs*/
	_parser.skip(4);  /*handResultShowSecs*/
	_parser.skip(4);  /*duelTypeId*/
	_parser.skip(8);  /*buyIn*/
	_parser.skip(8);  /*rake*/
	_parser.skip(8);  /*challengeId*/
	bool areFriends; _parser.parseBOOL(areFriends);
	_parser.parseStringN(_dummy, 0, "currency");  /*currency*/
	_parser.skip(4);  /*siteMask*/
	ThinAtf::LAtfVector< UINT64, 4 >::validateMsg(_parser);  /*handIds*/
	DuelPlayer::validateMsg(_parser);  /*player1*/
	DuelPlayer::validateMsg(_parser);  /*player2*/
}

//=================================================================
//                Protocol_MSG_DUEL_SERVER_CREATE_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY::Protocol_MSG_DUEL_SERVER_CREATE_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	duelId = 0;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY::equals(const Protocol_MSG_DUEL_SERVER_CREATE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		duelId == _o.duelId;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_SERVER_CREATE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("errString=");
	_buf.append(errString);
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(errString);
	_msg.composeUINT64(duelId);
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringPN(errString, 0, "errString");
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(2);  /*errCode*/
	_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK::Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK::equals(const Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_SERVER_CREATE_REPLY_ACK).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_SERVER_CREATE_REPLY_ACK::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST::Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST::clear()
{
	duelId = 0;
	dbmAddress.clear();
	dbmInstance.clear();
	entropyAddress.clear();
	entropyInstance.clear();
	encryptorAddress.clear();
	encryptorInstance.clear();
	handResultShowSecs = 0;
	status = 0;
	player1.clear();
	player2.clear();
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST::equals(const Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST& _o) const
{
	return duelId == _o.duelId &&
		dbmAddress.equals(_o.dbmAddress) &&
		dbmInstance.equals(_o.dbmInstance) &&
		entropyAddress.equals(_o.entropyAddress) &&
		entropyInstance.equals(_o.entropyInstance) &&
		encryptorAddress.equals(_o.encryptorAddress) &&
		encryptorInstance.equals(_o.encryptorInstance) &&
		handResultShowSecs == _o.handResultShowSecs &&
		status == _o.status &&
		player1.equals(_o.player1) &&
		player2.equals(_o.player2);
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_RESTORE_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("dbmAddress=");
	_buf.append(dbmAddress);
	_buf.append(',');
	_buf.append("dbmInstance=");
	_buf.append(dbmInstance);
	_buf.append(',');
	_buf.append("entropyAddress=");
	_buf.append(entropyAddress);
	_buf.append(',');
	_buf.append("entropyInstance=");
	_buf.append(entropyInstance);
	_buf.append(',');
	_buf.append("encryptorAddress=");
	_buf.append(encryptorAddress);
	_buf.append(',');
	_buf.append("encryptorInstance=");
	_buf.append(encryptorInstance);
	_buf.append(',');
	_buf.append("handResultShowSecs=");
	_buf.appendInt(handResultShowSecs);
	_buf.append(',');
	_buf.append("status=");
	_buf.appendInt(status);
	_buf.append(',');
	_buf.append("player1=");
	player1.toTraceString(_buf);
	_buf.append(',');
	_buf.append("player2=");
	player2.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(dbmAddress);
	_msg.composeString(dbmInstance);
	_msg.composeString(entropyAddress);
	_msg.composeString(entropyInstance);
	_msg.composeString(encryptorAddress);
	_msg.composeString(encryptorInstance);
	_msg.composeINT32(handResultShowSecs);
	_msg.composeINT32(status);
	player1.composeMsg(_msg);
	player2.composeMsg(_msg);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(dbmAddress, 0, "dbmAddress");
	_parser.parseStringPN(dbmInstance, 0, "dbmInstance");
	_parser.parseStringPN(entropyAddress, 0, "entropyAddress");
	_parser.parseStringPN(entropyInstance, 0, "entropyInstance");
	_parser.parseStringPN(encryptorAddress, 0, "encryptorAddress");
	_parser.parseStringPN(encryptorInstance, 0, "encryptorInstance");
	_parser.parseINT32(handResultShowSecs);
	_parser.parseINT32(status);
	player1.parseMsg(_parser);
	player2.parseMsg(_parser);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REQUEST::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "dbmAddress");  /*dbmAddress*/
	_parser.parseStringN(_dummy, 0, "dbmInstance");  /*dbmInstance*/
	_parser.parseStringN(_dummy, 0, "entropyAddress");  /*entropyAddress*/
	_parser.parseStringN(_dummy, 0, "entropyInstance");  /*entropyInstance*/
	_parser.parseStringN(_dummy, 0, "encryptorAddress");  /*encryptorAddress*/
	_parser.parseStringN(_dummy, 0, "encryptorInstance");  /*encryptorInstance*/
	_parser.skip(4);  /*handResultShowSecs*/
	_parser.skip(4);  /*status*/
	DuelPlayer::validateMsg(_parser);  /*player1*/
	DuelPlayer::validateMsg(_parser);  /*player2*/
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	duelId = 0;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY::equals(const Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		duelId == _o.duelId;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_RESTORE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("errString=");
	_buf.append(errString);
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(errString);
	_msg.composeUINT64(duelId);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringPN(errString, 0, "errString");
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(2);  /*errCode*/
	_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK::equals(const Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_RESTORE_REPLY_ACK).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_RESTORE_REPLY_ACK::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST::clear()
{
	duelId = 0;
	player1.clear();
	player1Score = 0;
	player2.clear();
	player2Score = 0;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST::equals(const Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST& _o) const
{
	return duelId == _o.duelId &&
		player1.equals(_o.player1) &&
		player1Score == _o.player1Score &&
		player2.equals(_o.player2) &&
		player2Score == _o.player2Score;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("player1=");
	_buf.append(player1);
	_buf.append(',');
	_buf.append("player1Score=");
	_buf.appendInt(player1Score);
	_buf.append(',');
	_buf.append("player2=");
	_buf.append(player2);
	_buf.append(',');
	_buf.append("player2Score=");
	_buf.appendInt(player2Score);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(player1);
	_msg.composeINT32(player1Score);
	_msg.composeString(player2);
	_msg.composeINT32(player2Score);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(player1, 0, "player1");
	_parser.parseINT32(player1Score);
	_parser.parseStringPN(player2, 0, "player2");
	_parser.parseINT32(player2Score);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REQUEST::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "player1");  /*player1*/
	_parser.skip(4);  /*player1Score*/
	_parser.parseStringN(_dummy, 0, "player2");  /*player2*/
	_parser.skip(4);  /*player2Score*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	duelId = 0;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY::equals(const Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		duelId == _o.duelId;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("errString=");
	_buf.append(errString);
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(errString);
	_msg.composeUINT64(duelId);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringPN(errString, 0, "errString");
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_AWARD_WINNERS_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(2);  /*errCode*/
	_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST::clear()
{
	duelId = 0;
	secondsAfterDuelResultReported = 0;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST::equals(const Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST& _o) const
{
	return duelId == _o.duelId &&
		secondsAfterDuelResultReported == _o.secondsAfterDuelResultReported;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("secondsAfterDuelResultReported=");
	_buf.appendInt(secondsAfterDuelResultReported);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeINT32(secondsAfterDuelResultReported);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseINT32(secondsAfterDuelResultReported);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REQUEST::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	_parser.skip(4);  /*secondsAfterDuelResultReported*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	duelId = 0;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY::equals(const Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		duelId == _o.duelId;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("errString=");
	_buf.append(errString);
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(errString);
	_msg.composeUINT64(duelId);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringPN(errString, 0, "errString");
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_DUEL_COMPLETE_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(2);  /*errCode*/
	_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST::clear()
{
	duelId = 0;
	newStatus = 0;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST::equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST& _o) const
{
	return duelId == _o.duelId &&
		newStatus == _o.newStatus;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("newStatus=");
	_buf.appendInt(newStatus);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeINT32(newStatus);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseINT32(newStatus);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REQUEST::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	_parser.skip(4);  /*newStatus*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	duelId = 0;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY::equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		duelId == _o.duelId;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("duelId=");
		_buf.appendUint64(duelId);
	}
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
	else
	{
		_msg.composeUINT64(duelId);
	}
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
	else
	{
		_parser.parseUINT64(duelId);
	}
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
	else
	{
		_parser.skip(8);  /*duelId*/
	}
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK::equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_DUEL_STATUS_REPLY_ACK::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED::clear()
{
	duelId = 0;
	userId.clear();
	pendingActionType = 0;
	startTime = 0;
	expiryTime = 0;
	timeRemainingMins = 0;
	isRestoredNotif = false;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED::equals(const Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED& _o) const
{
	return duelId == _o.duelId &&
		userId.equals(_o.userId) &&
		pendingActionType == _o.pendingActionType &&
		startTime == _o.startTime &&
		expiryTime == _o.expiryTime &&
		timeRemainingMins == _o.timeRemainingMins &&
		isRestoredNotif == _o.isRestoredNotif;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("pendingActionType=");
	_buf.appendUint(pendingActionType);
	_buf.append(',');
	_buf.append("startTime=");
	_buf.appendUint64(startTime);
	_buf.append(',');
	_buf.append("expiryTime=");
	_buf.appendUint64(expiryTime);
	_buf.append(',');
	_buf.append("timeRemainingMins=");
	_buf.appendInt(timeRemainingMins);
	_buf.append(',');
	_buf.append("isRestoredNotif=");
	_buf.appendUint(isRestoredNotif);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(userId);
	_msg.composeUINT32(pendingActionType);
	_msg.composeUINT64(startTime);
	_msg.composeUINT64(expiryTime);
	_msg.composeINT32(timeRemainingMins);
	_msg.composeBOOL(isRestoredNotif);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseUINT32(pendingActionType);
	_parser.parseUINT64(startTime);
	_parser.parseUINT64(expiryTime);
	_parser.parseINT32(timeRemainingMins);
	_parser.parseBOOL(isRestoredNotif);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(4);  /*pendingActionType*/
	_parser.skip(8);  /*startTime*/
	_parser.skip(8);  /*expiryTime*/
	_parser.skip(4);  /*timeRemainingMins*/
	bool isRestoredNotif; _parser.parseBOOL(isRestoredNotif);
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	isPlayerOnline = false;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY::equals(const Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		isPlayerOnline == _o.isPlayerOnline;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("errString=");
	_buf.append(errString);
	_buf.append(',');
	_buf.append("isPlayerOnline=");
	_buf.appendUint(isPlayerOnline);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(errString);
	_msg.composeBOOL(isPlayerOnline);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringPN(errString, 0, "errString");
	_parser.parseBOOL(isPlayerOnline);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_ADDED_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(2);  /*errCode*/
	_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	bool isPlayerOnline; _parser.parseBOOL(isPlayerOnline);
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED::clear()
{
	duelId = 0;
	userId.clear();
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED::equals(const Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED& _o) const
{
	return duelId == _o.duelId &&
		userId.equals(_o.userId);
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(userId);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(userId, 0, "userId");
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY::equals(const Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_PENDING_GAME_ACTION_REMOVED_REPLY::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST::clear()
{
	duelId = 0;
	userId.clear();
	myScore = 0;
	opponentScore = 0;
	myRealScore = 0;
	opponentRealScore = 0;
	numHandsRemaining = 0;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST::equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST& _o) const
{
	return duelId == _o.duelId &&
		userId.equals(_o.userId) &&
		myScore == _o.myScore &&
		opponentScore == _o.opponentScore &&
		myRealScore == _o.myRealScore &&
		opponentRealScore == _o.opponentRealScore &&
		numHandsRemaining == _o.numHandsRemaining;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("myScore=");
	_buf.appendInt(myScore);
	_buf.append(',');
	_buf.append("opponentScore=");
	_buf.appendInt(opponentScore);
	_buf.append(',');
	_buf.append("myRealScore=");
	_buf.appendInt(myRealScore);
	_buf.append(',');
	_buf.append("opponentRealScore=");
	_buf.appendInt(opponentRealScore);
	_buf.append(',');
	_buf.append("numHandsRemaining=");
	_buf.appendInt(numHandsRemaining);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(userId);
	_msg.composeINT32(myScore);
	_msg.composeINT32(opponentScore);
	_msg.composeINT32(myRealScore);
	_msg.composeINT32(opponentRealScore);
	_msg.composeINT32(numHandsRemaining);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseINT32(myScore);
	_parser.parseINT32(opponentScore);
	_parser.parseINT32(myRealScore);
	_parser.parseINT32(opponentRealScore);
	_parser.parseINT32(numHandsRemaining);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REQUEST::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(4);  /*myScore*/
	_parser.skip(4);  /*opponentScore*/
	_parser.skip(4);  /*myRealScore*/
	_parser.skip(4);  /*opponentRealScore*/
	_parser.skip(4);  /*numHandsRemaining*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY::equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_SCORES_REPLY::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST::clear()
{
	duelId = 0;
	userId.clear();
	actionTime.setNull();
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST::equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST& _o) const
{
	return duelId == _o.duelId &&
		userId.equals(_o.userId) &&
		actionTime.equals(_o.actionTime);
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("actionTime=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, actionTime);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(userId);
	_msg.composeSrvTime(actionTime);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseSrvTime(actionTime);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REQUEST::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(8);  /*actionTime*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY::equals(const Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DLOBBY_UPDATE_PLAYER_ACTION_TIME_REPLY::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST::equals(const Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY::equals(const Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK::equals(const Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_LOBBY_DSERVER_SHUTDOWN_REQUEST_REPLY_ACK::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST::clear()
{
	duelId = 0;
	maxReplayWaitSecs = 0;
	duelHistory.clear();
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST::equals(const Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST& _o) const
{
	return duelId == _o.duelId &&
		maxReplayWaitSecs == _o.maxReplayWaitSecs &&
		duelHistory.equals(_o.duelHistory);
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("maxReplayWaitSecs=");
	_buf.appendInt(maxReplayWaitSecs);
	_buf.append(',');
	_buf.append("duelHistory=");
	duelHistory.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeINT32(maxReplayWaitSecs);
	_msg.composeMsgBody(duelHistory);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseINT32(maxReplayWaitSecs);
	_parser.parseMsgBody(duelHistory);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REQUEST::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	_parser.skip(4);  /*maxReplayWaitSecs*/
	_parser.skipMsgBody();  /*duelHistory*/
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	duelId = 0;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY::equals(const Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		duelId == _o.duelId;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("errString=");
	_buf.append(errString);
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(errString);
	_msg.composeUINT64(duelId);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringPN(errString, 0, "errString");
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(2);  /*errCode*/
	_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK::equals(const Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CREATE_FINISHEDDUEL_FOR_REPLAY_REPLY_ACK::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST
//=================================================================

pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST::clear()
{
	duelId = 0;
}

bool pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST::equals(const Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST& _o) const
{
	return duelId == _o.duelId;
}

const char *pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
}

void pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REQUEST::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY::equals(const Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DLOBBY_FINISHEDDUEL_REPLAY_DONE_REPLY::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST::clear()
{
	duelId = 0;
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST::equals(const Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST& _o) const
{
	return duelId == _o.duelId;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY::clear()
{
	errCode = 0;
	errString.clear();
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY::equals(const Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
	}
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK::equals(const Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_CLOSE_DUEL_REQUEST_REPLY_ACK::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL::clear()
{
	duelId = 0;
	userId.clear();
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL::equals(const Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL& _o) const
{
	return duelId == _o.duelId &&
		userId.equals(_o.userId);
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(userId);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(userId, 0, "userId");
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY::clear()
{
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY::equals(const Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY& _o) const
{
	return true;
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY).append(")");
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_PLAYER_LAST_REVEAL_REPLY::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER::clear()
{
	duelId = 0;
	userId.clear();
	gameMsgId = 0;
	gameJSON.clear();
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER::equals(const Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER& _o) const
{
	return duelId == _o.duelId &&
		userId.equals(_o.userId) &&
		gameMsgId == _o.gameMsgId &&
		gameJSON.equals(_o.gameJSON);
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("gameMsgId=");
	_buf.appendUint(gameMsgId);
	_buf.append(',');
	_buf.append("gameJSON=");
	_buf.append(gameJSON);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(userId);
	_msg.composeUINT32(gameMsgId);
	_msg.composeString(gameJSON);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseUINT32(gameMsgId);
	_parser.parseStringPN(gameJSON, 0, "gameJSON");
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(4);  /*gameMsgId*/
	_parser.parseStringN(_dummy, 0, "gameJSON");  /*gameJSON*/
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	userId.clear();
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY::equals(const Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		userId.equals(_o.userId);
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	_buf.append(',');
	_buf.append("errString=");
	_buf.append(errString);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	_msg.composeString(errString);
	_msg.composeString(userId);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	_parser.parseStringPN(errString, 0, "errString");
	_parser.parseStringPN(userId, 0, "userId");
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_TO_PLAYER_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(2);  /*errCode*/
	_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
}

//=================================================================
//                Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER
//=================================================================

pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER()
{
	clear();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER::clear()
{
	duelId = 0;
	userId.clear();
	gameMsgId = 0;
	gameMsgBody.clear();
}

bool pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER::equals(const Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER& _o) const
{
	return duelId == _o.duelId &&
		userId.equals(_o.userId) &&
		gameMsgId == _o.gameMsgId &&
		gameMsgBody.equals(_o.gameMsgBody);
}

const char *pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("gameMsgId=");
	_buf.appendUint(gameMsgId);
	_buf.append(',');
	_buf.append("gameMsgBody=");
	gameMsgBody.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(userId);
	_msg.composeUINT32(gameMsgId);
	_msg.composeMsgBody(gameMsgBody);
}

void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseUINT32(gameMsgId);
	_parser.parseMsgBody(gameMsgBody);
}

/*static*/ void pokerduel::dserver::Protocol_MSG_DUEL_DSERVER_GAME_MESSAGE_FROM_PLAYER::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(4);  /*gameMsgId*/
	_parser.skipMsgBody();  /*gameMsgBody*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED
//=================================================================

pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED()
{
	clear();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED::clear()
{
	dbmList.clear();
}

bool pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED::equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED& _o) const
{
	return dbmList.equals(_o.dbmList);
}

const char *pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_DCHAT_CONNECTED).append(")");
	_buf.append(',');
	_buf.append("dbmList=");
	dbmList.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED::composeMsg(CommMsgBody& _msg) const
{
	dbmList.composeMsg(_msg);
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED::parseMsg(CommMsgParser& _parser)
{
	dbmList.parseMsg(_parser);
}

/*static*/ void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED::validateMsg(CommMsgParser& _parser)
{
	ThinAtf::LAtfVector< dbm::DbmInfo , 4 >::validateMsg(_parser);  /*dbmList*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY
//=================================================================

pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY()
{
	clear();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY::clear()
{
}

bool pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY::equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY& _o) const
{
	return true;
}

const char *pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY).append(")");
	return _buf.c_str();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_CONNECTED_REPLY::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST
//=================================================================

pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST()
{
	clear();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST::clear()
{
	duelId = 0;
}

bool pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST::equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST& _o) const
{
	return duelId == _o.duelId;
}

const char *pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REQUEST::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY
//=================================================================

pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY()
{
	clear();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY::clear()
{
	duelId = 0;
	tableId = 0;
	dbmId = 0;
	player1.clear();
	player2.clear();
	lastChatOrdinal = 0;
	isPlayMoney = false;
	duelCloseTime.setNull();
}

bool pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY::equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY& _o) const
{
	return duelId == _o.duelId &&
		tableId == _o.tableId &&
		dbmId == _o.dbmId &&
		player1.equals(_o.player1) &&
		player2.equals(_o.player2) &&
		lastChatOrdinal == _o.lastChatOrdinal &&
		isPlayMoney == _o.isPlayMoney &&
		duelCloseTime.equals(_o.duelCloseTime);
}

const char *pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	_buf.append(',');
	_buf.append("dbmId=");
	_buf.appendInt(dbmId);
	_buf.append(',');
	_buf.append("player1=");
	_buf.append(player1);
	_buf.append(',');
	_buf.append("player2=");
	_buf.append(player2);
	_buf.append(',');
	_buf.append("lastChatOrdinal=");
	_buf.appendInt(lastChatOrdinal);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("duelCloseTime=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, duelCloseTime);
	return _buf.c_str();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeUINT64(tableId);
	_msg.composeINT32(dbmId);
	_msg.composeString(player1);
	_msg.composeString(player2);
	_msg.composeINT32(lastChatOrdinal);
	_msg.composeBOOL(isPlayMoney);
	_msg.composeSrvTime(duelCloseTime);
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseUINT64(tableId);
	_parser.parseINT32(dbmId);
	_parser.parseStringPN(player1, 0, "player1");
	_parser.parseStringPN(player2, 0, "player2");
	_parser.parseINT32(lastChatOrdinal);
	_parser.parseBOOL(isPlayMoney);
	_parser.parseSrvTime(duelCloseTime);
}

/*static*/ void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.skip(8);  /*tableId*/
	_parser.skip(4);  /*dbmId*/
	_parser.parseStringN(_dummy, 0, "player1");  /*player1*/
	_parser.parseStringN(_dummy, 0, "player2");  /*player2*/
	_parser.skip(4);  /*lastChatOrdinal*/
	bool isPlayMoney; _parser.parseBOOL(isPlayMoney);
	_parser.skip(8);  /*duelCloseTime*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK
//=================================================================

pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK()
{
	clear();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK::clear()
{
}

bool pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK::equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK& _o) const
{
	return true;
}

const char *pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK).append(")");
	return _buf.c_str();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_GET_DUELINFO_REPLY_ACK::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME
//=================================================================

pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME()
{
	clear();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME::clear()
{
	duelId = 0;
	duelCloseTime.setNull();
}

bool pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME::equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME& _o) const
{
	return duelId == _o.duelId &&
		duelCloseTime.equals(_o.duelCloseTime);
}

const char *pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("duelCloseTime=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, duelCloseTime);
	return _buf.c_str();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeSrvTime(duelCloseTime);
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseSrvTime(duelCloseTime);
}

/*static*/ void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	_parser.skip(8);  /*duelCloseTime*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY
//=================================================================

pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY()
{
	clear();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY::clear()
{
}

bool pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY::equals(const Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY& _o) const
{
	return true;
}

const char *pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY).append(")");
	return _buf.c_str();
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::dchat::Protocol_MSG_DUEL_DLOBBY_DCHAT_UPDATE_DUELCLOSETIME_REPLY::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                    ClientRandomPool
//=================================================================

pokerduel::client::ClientRandomPool::ClientRandomPool()
{
	clear();
}

void pokerduel::client::ClientRandomPool::clear()
{
	duelTypeId = 0;
	whenJoined.setNull();
	ticketUsed = false;
}

bool pokerduel::client::ClientRandomPool::equals(const ClientRandomPool& _o) const
{
	return duelTypeId == _o.duelTypeId &&
		whenJoined.equals(_o.whenJoined) &&
		ticketUsed == _o.ticketUsed;
}

const char *pokerduel::client::ClientRandomPool::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("whenJoined=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenJoined);
	_buf.append(',');
	_buf.append("ticketUsed=");
	_buf.appendUint(ticketUsed);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::ClientRandomPool::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(ClientRandomPool())) // not empty
	{
		_body.composeUINT32(duelTypeId);
		_body.composeSrvTime(whenJoined);
		_body.composeBOOL(ticketUsed);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::client::ClientRandomPool::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(duelTypeId);
	_parser0.parseSrvTime(whenJoined);
	_parser0.parseBOOL(ticketUsed);
}

/*static*/ void pokerduel::client::ClientRandomPool::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	_parser0.skip(4);  /*duelTypeId*/
	_parser0.skip(8);  /*whenJoined*/
	bool ticketUsed; _parser0.parseBOOL(ticketUsed);
	AtfValidator::validateEmbeddedMsgbodyParser("client::ClientRandomPool", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                    ClientRunningDuel
//=================================================================

pokerduel::client::ClientRunningDuel::ClientRunningDuel()
{
	clear();
}

void pokerduel::client::ClientRunningDuel::clear()
{
	duelId = 0;
	player1.clear();
	player2.clear();
	tableId = 0;
	duelTypeId = 0;
	startTime.setNull();
	duelStatus = 0;
	playerStatus = 0;
	expiryTime.setNull();
	myScore = 0;
	opponentScore = 0;
	lastChatOrdinal = 0;
}

bool pokerduel::client::ClientRunningDuel::equals(const ClientRunningDuel& _o) const
{
	return duelId == _o.duelId &&
		player1.equals(_o.player1) &&
		player2.equals(_o.player2) &&
		tableId == _o.tableId &&
		duelTypeId == _o.duelTypeId &&
		startTime.equals(_o.startTime) &&
		duelStatus == _o.duelStatus &&
		playerStatus == _o.playerStatus &&
		expiryTime.equals(_o.expiryTime) &&
		myScore == _o.myScore &&
		opponentScore == _o.opponentScore &&
		lastChatOrdinal == _o.lastChatOrdinal;
}

const char *pokerduel::client::ClientRunningDuel::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("player1=");
	player1.toTraceString(_buf);
	_buf.append(',');
	_buf.append("player2=");
	player2.toTraceString(_buf);
	_buf.append(',');
	_buf.append("tableId=");
	_buf.appendUint64(tableId);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("startTime=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, startTime);
	_buf.append(',');
	_buf.append("duelStatus=");
	_buf.appendUint(duelStatus);
	_buf.append(',');
	_buf.append("playerStatus=");
	_buf.appendInt(playerStatus);
	_buf.append(',');
	_buf.append("expiryTime=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, expiryTime);
	_buf.append(',');
	_buf.append("myScore=");
	_buf.appendInt(myScore);
	_buf.append(',');
	_buf.append("opponentScore=");
	_buf.appendInt(opponentScore);
	_buf.append(',');
	_buf.append("lastChatOrdinal=");
	_buf.appendInt(lastChatOrdinal);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::ClientRunningDuel::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(ClientRunningDuel())) // not empty
	{
		_body.composeUINT64(duelId);
		player1.composeMsg(_body);
		player2.composeMsg(_body);
		_body.composeUINT64(tableId);
		_body.composeUINT32(duelTypeId);
		_body.composeSrvTime(startTime);
		_body.composeBYTE(duelStatus);
		_body.composeINT32(playerStatus);
		_body.composeSrvTime(expiryTime);
		_body.composeINT32(myScore);
		_body.composeINT32(opponentScore);
		_body.composeINT32(lastChatOrdinal);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::client::ClientRunningDuel::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(duelId);
	player1.parseMsg(_parser0);
	player2.parseMsg(_parser0);
	_parser0.parseUINT64(tableId);
	_parser0.parseUINT32(duelTypeId);
	_parser0.parseSrvTime(startTime);
	_parser0.parseBYTE(duelStatus);
	_parser0.parseINT32(playerStatus);
	_parser0.parseSrvTime(expiryTime);
	_parser0.parseINT32(myScore);
	_parser0.parseINT32(opponentScore);
	_parser0.parseINT32(lastChatOrdinal);
}

/*static*/ void pokerduel::client::ClientRunningDuel::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	_parser0.skip(8);  /*duelId*/
	DuelPlayer::validateMsg(_parser0);  /*player1*/
	DuelPlayer::validateMsg(_parser0);  /*player2*/
	_parser0.skip(8);  /*tableId*/
	_parser0.skip(4);  /*duelTypeId*/
	_parser0.skip(8);  /*startTime*/
	_parser0.skip(1);  /*duelStatus*/
	_parser0.skip(4);  /*playerStatus*/
	_parser0.skip(8);  /*expiryTime*/
	_parser0.skip(4);  /*myScore*/
	_parser0.skip(4);  /*opponentScore*/
	_parser0.skip(4);  /*lastChatOrdinal*/
	AtfValidator::validateEmbeddedMsgbodyParser("client::ClientRunningDuel", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                    ClientDuelChallengePlayer
//=================================================================

pokerduel::client::ClientDuelChallengePlayer::ClientDuelChallengePlayer()
{
	clear();
}

void pokerduel::client::ClientDuelChallengePlayer::clear()
{
	userId.clear();
	imageId = 0;
	isOnline = false;
}

bool pokerduel::client::ClientDuelChallengePlayer::equals(const ClientDuelChallengePlayer& _o) const
{
	return userId.equals(_o.userId) &&
		imageId == _o.imageId &&
		isOnline == _o.isOnline;
}

const char *pokerduel::client::ClientDuelChallengePlayer::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append(',');
	_buf.append("isOnline=");
	_buf.appendUint(isOnline);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::ClientDuelChallengePlayer::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId);
	_msg.composeUINT32(imageId);
	_msg.composeBOOL(isOnline);
}

void pokerduel::client::ClientDuelChallengePlayer::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseUINT32(imageId);
	_parser.parseBOOL(isOnline);
}

/*static*/ void pokerduel::client::ClientDuelChallengePlayer::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(4);  /*imageId*/
	bool isOnline; _parser.parseBOOL(isOnline);
}

//=================================================================
//                    ClientDuelChallenge
//=================================================================

pokerduel::client::ClientDuelChallenge::ClientDuelChallenge()
{
	clear();
}

void pokerduel::client::ClientDuelChallenge::clear()
{
	challengeId = 0;
	player1.clear();
	player2.clear();
	duelTypeId = 0;
	response = 0;
	whenOffered.setNull();
	whenResponse.setNull();
	whenExpires.setNull();
}

bool pokerduel::client::ClientDuelChallenge::equals(const ClientDuelChallenge& _o) const
{
	return challengeId == _o.challengeId &&
		player1.equals(_o.player1) &&
		player2.equals(_o.player2) &&
		duelTypeId == _o.duelTypeId &&
		response == _o.response &&
		whenOffered.equals(_o.whenOffered) &&
		whenResponse.equals(_o.whenResponse) &&
		whenExpires.equals(_o.whenExpires);
}

const char *pokerduel::client::ClientDuelChallenge::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("challengeId=");
	_buf.appendUint64(challengeId);
	_buf.append(',');
	_buf.append("player1=");
	player1.toTraceString(_buf);
	_buf.append(',');
	_buf.append("player2=");
	player2.toTraceString(_buf);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("response=");
	_buf.appendInt(response);
	_buf.append(',');
	_buf.append("whenOffered=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenOffered);
	_buf.append(',');
	_buf.append("whenResponse=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenResponse);
	_buf.append(',');
	_buf.append("whenExpires=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenExpires);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::ClientDuelChallenge::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(ClientDuelChallenge())) // not empty
	{
		_body.composeUINT64(challengeId);
		player1.composeMsg(_body);
		player2.composeMsg(_body);
		_body.composeUINT32(duelTypeId);
		_body.composeINT32(response);
		_body.composeSrvTime(whenOffered);
		_body.composeSrvTime(whenResponse);
		_body.composeSrvTime(whenExpires);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::client::ClientDuelChallenge::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(challengeId);
	player1.parseMsg(_parser0);
	player2.parseMsg(_parser0);
	_parser0.parseUINT32(duelTypeId);
	_parser0.parseINT32(response);
	_parser0.parseSrvTime(whenOffered);
	_parser0.parseSrvTime(whenResponse);
	_parser0.parseSrvTime(whenExpires);
}

/*static*/ void pokerduel::client::ClientDuelChallenge::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	_parser0.skip(8);  /*challengeId*/
	ClientDuelChallengePlayer::validateMsg(_parser0);  /*player1*/
	ClientDuelChallengePlayer::validateMsg(_parser0);  /*player2*/
	_parser0.skip(4);  /*duelTypeId*/
	_parser0.skip(4);  /*response*/
	_parser0.skip(8);  /*whenOffered*/
	_parser0.skip(8);  /*whenResponse*/
	_parser0.skip(8);  /*whenExpires*/
	AtfValidator::validateEmbeddedMsgbodyParser("client::ClientDuelChallenge", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                    ClientDuelChallengePlayer2
//=================================================================

pokerduel::client::ClientDuelChallengePlayer2::ClientDuelChallengePlayer2()
{
	clear();
}

void pokerduel::client::ClientDuelChallengePlayer2::clear()
{
	userId.clear();
	imageId = 0;
	playerFlag = 0;
}

bool pokerduel::client::ClientDuelChallengePlayer2::equals(const ClientDuelChallengePlayer2& _o) const
{
	return userId.equals(_o.userId) &&
		imageId == _o.imageId &&
		playerFlag == _o.playerFlag;
}

const char *pokerduel::client::ClientDuelChallengePlayer2::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append(',');
	_buf.append("playerFlag=");
	_buf.appendUint(playerFlag);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::ClientDuelChallengePlayer2::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(ClientDuelChallengePlayer2())) // not empty
	{
		_body.composeString(userId);
		_body.composeUINT32(imageId);
		_body.composeUINT32(playerFlag);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::client::ClientDuelChallengePlayer2::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringPN(userId, 0, "userId");
	_parser0.parseUINT32(imageId);
	_parser0.parseUINT32(playerFlag);
}

/*static*/ void pokerduel::client::ClientDuelChallengePlayer2::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy;
	_parser0.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser0.skip(4);  /*imageId*/
	_parser0.skip(4);  /*playerFlag*/
	AtfValidator::validateEmbeddedMsgbodyParser("client::ClientDuelChallengePlayer2", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                    ClientDuelChallenge2
//=================================================================

pokerduel::client::ClientDuelChallenge2::ClientDuelChallenge2()
{
	clear();
}

void pokerduel::client::ClientDuelChallenge2::clear()
{
	challengeId = 0;
	player1.clear();
	player2.clear();
	duelTypeId = 0;
	response = 0;
	whenOffered.setNull();
	whenResponse.setNull();
	whenExpires.setNull();
	player1UsedTicket = false;
}

bool pokerduel::client::ClientDuelChallenge2::equals(const ClientDuelChallenge2& _o) const
{
	return challengeId == _o.challengeId &&
		player1.equals(_o.player1) &&
		player2.equals(_o.player2) &&
		duelTypeId == _o.duelTypeId &&
		response == _o.response &&
		whenOffered.equals(_o.whenOffered) &&
		whenResponse.equals(_o.whenResponse) &&
		whenExpires.equals(_o.whenExpires) &&
		player1UsedTicket == _o.player1UsedTicket;
}

const char *pokerduel::client::ClientDuelChallenge2::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("challengeId=");
	_buf.appendUint64(challengeId);
	_buf.append(',');
	_buf.append("player1=");
	player1.toTraceString(_buf);
	_buf.append(',');
	_buf.append("player2=");
	player2.toTraceString(_buf);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("response=");
	_buf.appendInt(response);
	_buf.append(',');
	_buf.append("whenOffered=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenOffered);
	_buf.append(',');
	_buf.append("whenResponse=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenResponse);
	_buf.append(',');
	_buf.append("whenExpires=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenExpires);
	_buf.append(',');
	_buf.append("player1UsedTicket=");
	_buf.appendUint(player1UsedTicket);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::ClientDuelChallenge2::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(ClientDuelChallenge2())) // not empty
	{
		_body.composeUINT64(challengeId);
		player1.composeMsg(_body);
		player2.composeMsg(_body);
		_body.composeUINT32(duelTypeId);
		_body.composeINT32(response);
		_body.composeSrvTime(whenOffered);
		_body.composeSrvTime(whenResponse);
		_body.composeSrvTime(whenExpires);
		_body.composeBOOL(player1UsedTicket);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::client::ClientDuelChallenge2::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(challengeId);
	player1.parseMsg(_parser0);
	player2.parseMsg(_parser0);
	_parser0.parseUINT32(duelTypeId);
	_parser0.parseINT32(response);
	_parser0.parseSrvTime(whenOffered);
	_parser0.parseSrvTime(whenResponse);
	_parser0.parseSrvTime(whenExpires);
	_parser0.parseBOOL(player1UsedTicket);
}

/*static*/ void pokerduel::client::ClientDuelChallenge2::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	_parser0.skip(8);  /*challengeId*/
	ClientDuelChallengePlayer2::validateMsg(_parser0);  /*player1*/
	ClientDuelChallengePlayer2::validateMsg(_parser0);  /*player2*/
	_parser0.skip(4);  /*duelTypeId*/
	_parser0.skip(4);  /*response*/
	_parser0.skip(8);  /*whenOffered*/
	_parser0.skip(8);  /*whenResponse*/
	_parser0.skip(8);  /*whenExpires*/
	bool player1UsedTicket; _parser0.parseBOOL(player1UsedTicket);
	AtfValidator::validateEmbeddedMsgbodyParser("client::ClientDuelChallenge2", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER
//=================================================================

pokerduel::client::Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER::Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER()
{
	clear();
}

void pokerduel::client::Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER::clear()
{
	duelId = 0;
	userId.clear();
	gameMsgId = 0;
	gameMsg.clear();
}

bool pokerduel::client::Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER::equals(const Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER& _o) const
{
	return duelId == _o.duelId &&
		userId.equals(_o.userId) &&
		gameMsgId == _o.gameMsgId &&
		gameMsg.equals(_o.gameMsg);
}

const char *pokerduel::client::Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("gameMsgId=");
	_buf.appendUint(gameMsgId);
	_buf.append(',');
	_buf.append("gameMsg=");
	gameMsg.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(userId);
	_msg.composeUINT32(gameMsgId);
	_msg.composeMsgBody(gameMsg);
}

void pokerduel::client::Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseUINT32(gameMsgId);
	_parser.parseMsgBody(gameMsg);
}

/*static*/ void pokerduel::client::Protocol_MSG_DUEL_USER_GAME_MESSAGE_TO_SERVER::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(4);  /*gameMsgId*/
	_parser.skipMsgBody();  /*gameMsg*/
}

//=================================================================
//                Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER
//=================================================================

pokerduel::client::Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER::Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER()
{
	clear();
}

void pokerduel::client::Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER::clear()
{
	duelId = 0;
	userId.clear();
	gameMsgId = 0;
	gameMsg.clear();
}

bool pokerduel::client::Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER::equals(const Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER& _o) const
{
	return duelId == _o.duelId &&
		userId.equals(_o.userId) &&
		gameMsgId == _o.gameMsgId &&
		gameMsg.equals(_o.gameMsg);
}

const char *pokerduel::client::Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_DLOBBY_POST_TO_PLAYER).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("gameMsgId=");
	_buf.appendUint(gameMsgId);
	_buf.append(',');
	_buf.append("gameMsg=");
	gameMsg.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(userId);
	_msg.composeUINT32(gameMsgId);
	_msg.composeMsgBody(gameMsg);
}

void pokerduel::client::Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseUINT32(gameMsgId);
	_parser.parseMsgBody(gameMsg);
}

/*static*/ void pokerduel::client::Protocol_MSG_DUEL_DLOBBY_POST_TO_PLAYER::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(4);  /*gameMsgId*/
	_parser.skipMsgBody();  /*gameMsg*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS::clear()
{
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS::equals(const Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS& _o) const
{
	return true;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_RUNNING_DUELS).append(")");
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	runningDuels.clear();
	challenges.clear();
	randomPoolEntries.clear();
	duelTypes.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY::equals(const Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		runningDuels.equals(_o.runningDuels) &&
		challenges.equals(_o.challenges) &&
		randomPoolEntries.equals(_o.randomPoolEntries) &&
		duelTypes.equals(_o.duelTypes);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("runningDuels=");
		runningDuels.toTraceString(_buf);
		_buf.append(',');
		_buf.append("challenges=");
		challenges.toTraceString(_buf);
		_buf.append(',');
		_buf.append("randomPoolEntries=");
		randomPoolEntries.toTraceString(_buf);
		_buf.append(',');
		_buf.append("duelTypes=");
		duelTypes.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
	}
	else
	{
		runningDuels.composeMsg(_msg);
		challenges.composeMsg(_msg);
		randomPoolEntries.composeMsg(_msg);
		duelTypes.composeMsg(_msg);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
	}
	else
	{
		runningDuels.parseMsg(_parser);
		challenges.parseMsg(_parser);
		randomPoolEntries.parseMsg(_parser);
		duelTypes.parseMsg(_parser);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
	}
	else
	{
		ThinAtf::LAtfVector< ClientRunningDuel , 4 >::validateMsg(_parser);  /*runningDuels*/
		ThinAtf::LAtfVector< ClientDuelChallenge , 4 >::validateMsg(_parser);  /*challenges*/
		ThinAtf::LAtfVector< ClientRandomPool , 4 >::validateMsg(_parser);  /*randomPoolEntries*/
		ThinAtf::LAtfVector< DuelType , 4 >::validateMsg(_parser);  /*duelTypes*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2::clear()
{
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2::equals(const Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2& _o) const
{
	return true;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_RUNNING_DUELS2).append(")");
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	runningDuels.clear();
	challenges.clear();
	randomPoolEntries.clear();
	duelTypes.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY::equals(const Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		runningDuels.equals(_o.runningDuels) &&
		challenges.equals(_o.challenges) &&
		randomPoolEntries.equals(_o.randomPoolEntries) &&
		duelTypes.equals(_o.duelTypes);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("runningDuels=");
		runningDuels.toTraceString(_buf);
		_buf.append(',');
		_buf.append("challenges=");
		challenges.toTraceString(_buf);
		_buf.append(',');
		_buf.append("randomPoolEntries=");
		randomPoolEntries.toTraceString(_buf);
		_buf.append(',');
		_buf.append("duelTypes=");
		duelTypes.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		runningDuels.composeMsg(_msg);
		challenges.composeMsg(_msg);
		randomPoolEntries.composeMsg(_msg);
		duelTypes.composeMsg(_msg);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		runningDuels.parseMsg(_parser);
		challenges.parseMsg(_parser);
		randomPoolEntries.parseMsg(_parser);
		duelTypes.parseMsg(_parser);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RUNNING_DUELS2_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		ThinAtf::LAtfVector< ClientRunningDuel , 4 >::validateMsg(_parser);  /*runningDuels*/
		ThinAtf::LAtfVector< ClientDuelChallenge2 , 4 >::validateMsg(_parser);  /*challenges*/
		ThinAtf::LAtfVector< ClientRandomPool , 4 >::validateMsg(_parser);  /*randomPoolEntries*/
		ThinAtf::LAtfVector< DuelType , 4 >::validateMsg(_parser);  /*duelTypes*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_DUELTYPES
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES::Protocol_MSG_POKERDUEL_GET_DUELTYPES()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES::clear()
{
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES::equals(const Protocol_MSG_POKERDUEL_GET_DUELTYPES& _o) const
{
	return true;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_DUELTYPES).append(")");
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY::Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	duelTypes.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY::equals(const Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		duelTypes.equals(_o.duelTypes);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_DUELTYPES_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("duelTypes=");
		duelTypes.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		duelTypes.composeMsg(_msg);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		duelTypes.parseMsg(_parser);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUELTYPES_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		ThinAtf::LAtfVector< DuelType , 4 >::validateMsg(_parser);  /*duelTypes*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST::clear()
{
	opponentUserId.clear();
	duelTypeId = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST::equals(const Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST& _o) const
{
	return opponentUserId.equals(_o.opponentUserId) &&
		duelTypeId == _o.duelTypeId;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_CHALLENGE_REQUEST).append(")");
	_buf.append(',');
	_buf.append("opponentUserId=");
	_buf.append(opponentUserId);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(opponentUserId);
	_msg.composeUINT32(duelTypeId);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringPN(opponentUserId, 0, "opponentUserId");
	_parser.parseUINT32(duelTypeId);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.parseStringN(_dummy, 0, "opponentUserId");  /*opponentUserId*/
	_parser.skip(4);  /*duelTypeId*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	challengeId = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY::equals(const Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		challengeId == _o.challengeId;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("challengeId=");
		_buf.appendUint64(challengeId);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		_msg.composeUINT64(challengeId);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		_parser.parseUINT64(challengeId);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		_parser.skip(8);  /*challengeId*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_CHALLENGE_OFFER
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER::clear()
{
	challengerUserId.clear();
	challengerImageId = 0;
	challengeId = 0;
	duelTypeId = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER::equals(const Protocol_MSG_POKERDUEL_CHALLENGE_OFFER& _o) const
{
	return challengerUserId.equals(_o.challengerUserId) &&
		challengerImageId == _o.challengerImageId &&
		challengeId == _o.challengeId &&
		duelTypeId == _o.duelTypeId;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_CHALLENGE_OFFER).append(")");
	_buf.append(',');
	_buf.append("challengerUserId=");
	_buf.append(challengerUserId);
	_buf.append(',');
	_buf.append("challengerImageId=");
	_buf.appendUint(challengerImageId);
	_buf.append(',');
	_buf.append("challengeId=");
	_buf.appendUint64(challengeId);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(challengerUserId);
	_msg.composeUINT32(challengerImageId);
	_msg.composeUINT64(challengeId);
	_msg.composeUINT32(duelTypeId);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringPN(challengerUserId, 0, "challengerUserId");
	_parser.parseUINT32(challengerImageId);
	_parser.parseUINT64(challengeId);
	_parser.parseUINT32(duelTypeId);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.parseStringN(_dummy, 0, "challengerUserId");  /*challengerUserId*/
	_parser.skip(4);  /*challengerImageId*/
	_parser.skip(8);  /*challengeId*/
	_parser.skip(4);  /*duelTypeId*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE::clear()
{
	challengeId = 0;
	answer = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE::equals(const Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE& _o) const
{
	return challengeId == _o.challengeId &&
		answer == _o.answer;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE).append(")");
	_buf.append(',');
	_buf.append("challengeId=");
	_buf.appendUint64(challengeId);
	_buf.append(',');
	_buf.append("answer=");
	_buf.appendInt(answer);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(challengeId);
	_msg.composeINT32(answer);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(challengeId);
	_parser.parseINT32(answer);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*challengeId*/
	_parser.skip(4);  /*answer*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	duelId = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY::equals(const Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		duelId == _o.duelId;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("duelId=");
		_buf.appendUint64(duelId);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		_msg.composeUINT64(duelId);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		_parser.parseUINT64(duelId);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_OFFER_RESPONSE_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		_parser.skip(8);  /*duelId*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE::clear()
{
	challengeId = 0;
	duelId = 0;
	answer = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE::equals(const Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE& _o) const
{
	return challengeId == _o.challengeId &&
		duelId == _o.duelId &&
		answer == _o.answer;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE).append(")");
	_buf.append(',');
	_buf.append("challengeId=");
	_buf.appendUint64(challengeId);
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("answer=");
	_buf.appendInt(answer);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(challengeId);
	_msg.composeUINT64(duelId);
	_msg.composeINT32(answer);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(challengeId);
	_parser.parseUINT64(duelId);
	_parser.parseINT32(answer);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_CHALLENGE_REQUEST_RESPONSE::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*challengeId*/
	_parser.skip(8);  /*duelId*/
	_parser.skip(4);  /*answer*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_START_RANDOM_DUEL
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL::clear()
{
	duelTypeId = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL::equals(const Protocol_MSG_POKERDUEL_START_RANDOM_DUEL& _o) const
{
	return duelTypeId == _o.duelTypeId;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_START_RANDOM_DUEL).append(")");
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(duelTypeId);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(duelTypeId);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(4);  /*duelTypeId*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	duelId = 0;
	opponentUserId.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY::equals(const Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		duelId == _o.duelId &&
		opponentUserId.equals(_o.opponentUserId);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_START_RANDOM_DUEL_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("duelId=");
		_buf.appendUint64(duelId);
		_buf.append(',');
		_buf.append("opponentUserId=");
		_buf.append(opponentUserId);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		_msg.composeUINT64(duelId);
		_msg.composeString(opponentUserId);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		_parser.parseUINT64(duelId);
		_parser.parseStringPN(opponentUserId, 0, "opponentUserId");
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_START_RANDOM_DUEL_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		_parser.skip(8);  /*duelId*/
		_parser.parseStringN(_dummy, 0, "opponentUserId");  /*opponentUserId*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND::Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND::clear()
{
	duelTypeId = 0;
	duelId = 0;
	opponentUserId.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND::equals(const Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND& _o) const
{
	return duelTypeId == _o.duelTypeId &&
		duelId == _o.duelId &&
		opponentUserId.equals(_o.opponentUserId);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_RANDOM_OPPONENT_FOUND).append(")");
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("opponentUserId=");
	_buf.append(opponentUserId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(duelTypeId);
	_msg.composeUINT64(duelId);
	_msg.composeString(opponentUserId);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(duelTypeId);
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(opponentUserId, 0, "opponentUserId");
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_OPPONENT_FOUND::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*duelTypeId*/
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "opponentUserId");  /*opponentUserId*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE::clear()
{
	challengeId = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE::equals(const Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE& _o) const
{
	return challengeId == _o.challengeId;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_CANCEL_CHALLENGE).append(")");
	_buf.append(',');
	_buf.append("challengeId=");
	_buf.appendUint64(challengeId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(challengeId);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(challengeId);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*challengeId*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY::equals(const Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_CANCEL_CHALLENGE_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if(errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL::clear()
{
	duelTypeId = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL::equals(const Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL& _o) const
{
	return duelTypeId == _o.duelTypeId;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_LEAVE_RANDOM_POOL).append(")");
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(duelTypeId);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(duelTypeId);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(4);  /*duelTypeId*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY::equals(const Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_LEAVE_RANDOM_POOL_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN::Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN::clear()
{
	duelId = 0;
	newStatus = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN::equals(const Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN& _o) const
{
	return duelId == _o.duelId &&
		newStatus == _o.newStatus;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("newStatus=");
	_buf.appendInt(newStatus);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeINT32(newStatus);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseINT32(newStatus);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_DUEL_STATUS_CHANGE_BY_ADMIN::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	_parser.skip(4);  /*newStatus*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_SERVER_RESTARTING
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_SERVER_RESTARTING::Protocol_MSG_POKERDUEL_SERVER_RESTARTING()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_SERVER_RESTARTING::clear()
{
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_SERVER_RESTARTING::equals(const Protocol_MSG_POKERDUEL_SERVER_RESTARTING& _o) const
{
	return true;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_SERVER_RESTARTING::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_SERVER_RESTARTING).append(")");
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_SERVER_RESTARTING::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::client::Protocol_MSG_POKERDUEL_SERVER_RESTARTING::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_SERVER_RESTARTING::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_POKERDUEL_PROFILE_REQUEST
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_REQUEST::Protocol_MSG_POKERDUEL_PROFILE_REQUEST()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_REQUEST::clear()
{
	userId.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_REQUEST::equals(const Protocol_MSG_POKERDUEL_PROFILE_REQUEST& _o) const
{
	return userId.equals(_o.userId);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_PROFILE_REQUEST).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringPN(userId, 0, "userId");
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_REQUEST::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
}

//=================================================================
//                    ProfileResponse_userInfo
//=================================================================

pokerduel::client::ProfileResponse_userInfo::ProfileResponse_userInfo()
{
	clear();
}

void pokerduel::client::ProfileResponse_userInfo::clear()
{
	imageId = 0;
	country.clear();
	isOnline = false;
	numChallengesFromMeToFriend = 0;
	numChallengesFromFriendToMe = 0;
	playerFlag = 0;
	challengeIdsFromMeToFriend.clear();
	challengeIdsFromFriendToMe.clear();
}

bool pokerduel::client::ProfileResponse_userInfo::equals(const ProfileResponse_userInfo& _o) const
{
	return imageId == _o.imageId &&
		country.equals(_o.country) &&
		isOnline == _o.isOnline &&
		numChallengesFromMeToFriend == _o.numChallengesFromMeToFriend &&
		numChallengesFromFriendToMe == _o.numChallengesFromFriendToMe &&
		playerFlag == _o.playerFlag &&
		challengeIdsFromMeToFriend.equals(_o.challengeIdsFromMeToFriend) &&
		challengeIdsFromFriendToMe.equals(_o.challengeIdsFromFriendToMe);
}

const char *pokerduel::client::ProfileResponse_userInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("imageId=");
	_buf.appendUint(imageId);
	_buf.append(',');
	_buf.append("country=");
	_buf.append(country);
	_buf.append(',');
	_buf.append("isOnline=");
	_buf.appendUint(isOnline);
	_buf.append(',');
	_buf.append("numChallengesFromMeToFriend=");
	_buf.appendInt(numChallengesFromMeToFriend);
	_buf.append(',');
	_buf.append("numChallengesFromFriendToMe=");
	_buf.appendInt(numChallengesFromFriendToMe);
	_buf.append(',');
	_buf.append("playerFlag=");
	_buf.appendUint(playerFlag);
	_buf.append(',');
	_buf.append("challengeIdsFromMeToFriend=");
	challengeIdsFromMeToFriend.toTraceString(_buf);
	_buf.append(',');
	_buf.append("challengeIdsFromFriendToMe=");
	challengeIdsFromFriendToMe.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::ProfileResponse_userInfo::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(imageId);
	_msg.composeString(country);
	_msg.composeBOOL(isOnline);
	_msg.composeINT32(numChallengesFromMeToFriend);
	_msg.composeINT32(numChallengesFromFriendToMe);
	_msg.composeUINT32(playerFlag);
	challengeIdsFromMeToFriend.composeMsg(_msg);
	challengeIdsFromFriendToMe.composeMsg(_msg);
}

void pokerduel::client::ProfileResponse_userInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(imageId);
	_parser.parseStringPN(country, 0, "country");
	_parser.parseBOOL(isOnline);
	_parser.parseINT32(numChallengesFromMeToFriend);
	_parser.parseINT32(numChallengesFromFriendToMe);
	_parser.parseUINT32(playerFlag);
	challengeIdsFromMeToFriend.parseMsg(_parser);
	challengeIdsFromFriendToMe.parseMsg(_parser);
}

/*static*/ void pokerduel::client::ProfileResponse_userInfo::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*imageId*/
	_parser.parseStringN(_dummy, 0, "country");  /*country*/
	bool isOnline; _parser.parseBOOL(isOnline);
	_parser.skip(4);  /*numChallengesFromMeToFriend*/
	_parser.skip(4);  /*numChallengesFromFriendToMe*/
	_parser.skip(4);  /*playerFlag*/
	ThinAtf::LAtfVector< UINT64 , 4 >::validateMsg(_parser);  /*challengeIdsFromMeToFriend*/
	ThinAtf::LAtfVector< UINT64 , 4 >::validateMsg(_parser);  /*challengeIdsFromFriendToMe*/
}

//=================================================================
//                    ProfileResponse_Friend
//=================================================================

pokerduel::client::ProfileResponse_Friend::ProfileResponse_Friend()
{
	clear();
}

void pokerduel::client::ProfileResponse_Friend::clear()
{
	numFriends = 0;
	isOnline = false;
	frdRelation = 0;
	playerFlag = 0;
}

bool pokerduel::client::ProfileResponse_Friend::equals(const ProfileResponse_Friend& _o) const
{
	return numFriends == _o.numFriends &&
		isOnline == _o.isOnline &&
		frdRelation == _o.frdRelation &&
		playerFlag == _o.playerFlag;
}

const char *pokerduel::client::ProfileResponse_Friend::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("numFriends=");
	_buf.appendInt(numFriends);
	_buf.append(',');
	_buf.append("isOnline=");
	_buf.appendUint(isOnline);
	_buf.append(',');
	_buf.append("frdRelation=");
	_buf.appendUint(frdRelation);
	_buf.append(',');
	_buf.append("playerFlag=");
	_buf.appendUint(playerFlag);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::ProfileResponse_Friend::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(numFriends);
	_msg.composeBOOL(isOnline);
	_msg.composeUINT32(frdRelation);
	_msg.composeUINT32(playerFlag);
}

void pokerduel::client::ProfileResponse_Friend::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(numFriends);
	_parser.parseBOOL(isOnline);
	_parser.parseUINT32(frdRelation);
	_parser.parseUINT32(playerFlag);
}

/*static*/ void pokerduel::client::ProfileResponse_Friend::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(4);  /*numFriends*/
	bool isOnline; _parser.parseBOOL(isOnline);
	_parser.skip(4);  /*frdRelation*/
	_parser.skip(4);  /*playerFlag*/
}

//=================================================================
//                    IceUserAchievementsVector
//=================================================================

pokerduel::client::IceUserAchievementsVector::IceUserAchievementsVector()
{
	clear();
}

void pokerduel::client::IceUserAchievementsVector::clear()
{
	userAchievements.clear();
}

bool pokerduel::client::IceUserAchievementsVector::equals(const IceUserAchievementsVector& _o) const
{
	return userAchievements.equals(_o.userAchievements);
}

const char *pokerduel::client::IceUserAchievementsVector::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("userAchievements=");
	userAchievements.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::IceUserAchievementsVector::composeMsg(CommMsgBody& _msg) const
{
	userAchievements.composeMsg(_msg);
}

void pokerduel::client::IceUserAchievementsVector::parseMsg(CommMsgParser& _parser)
{
	userAchievements.parseMsg(_parser);
}

/*static*/ void pokerduel::client::IceUserAchievementsVector::validateMsg(CommMsgParser& _parser)
{
	ThinAtf::LAtfVector< IceDuelsUserAchievement, 4 >::validateMsg(_parser);  /*userAchievements*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_PROFILE_RESPONSE
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_RESPONSE::Protocol_MSG_POKERDUEL_PROFILE_RESPONSE()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_RESPONSE::clear()
{
	userId.clear();
	profileDataType = 0;
	data.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_RESPONSE::equals(const Protocol_MSG_POKERDUEL_PROFILE_RESPONSE& _o) const
{
	return userId.equals(_o.userId) &&
		profileDataType == _o.profileDataType &&
		data.equals(_o.data);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_RESPONSE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_PROFILE_RESPONSE).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("profileDataType=");
	_buf.appendInt(profileDataType);
	_buf.append(',');
	_buf.append("data=");
	data.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_RESPONSE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId);
	_msg.composeINT32(profileDataType);
	_msg.composeMsgBody(data);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_RESPONSE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseINT32(profileDataType);
	_parser.parseMsgBody(data);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_PROFILE_RESPONSE::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(4);  /*profileDataType*/
	_parser.skipMsgBody();  /*data*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS::clear()
{
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS::equals(const Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS& _o) const
{
	return true;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS).append(")");
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                    AllAchievements
//=================================================================

pokerduel::client::AllAchievements::AllAchievements()
{
	clear();
}

void pokerduel::client::AllAchievements::clear()
{
	achievements.clear();
}

bool pokerduel::client::AllAchievements::equals(const AllAchievements& _o) const
{
	return achievements.equals(_o.achievements);
}

const char *pokerduel::client::AllAchievements::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("achievements=");
	achievements.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::AllAchievements::composeMsg(CommMsgBody& _msg) const
{
	achievements.composeMsg(_msg);
}

void pokerduel::client::AllAchievements::parseMsg(CommMsgParser& _parser)
{
	achievements.parseMsg(_parser);
}

/*static*/ void pokerduel::client::AllAchievements::validateMsg(CommMsgParser& _parser)
{
	ThinAtf::LAtfVector< IceDuelsAchievement, 4 >::validateMsg(_parser);  /*achievements*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	allAchievements.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY::equals(const Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		allAchievements.equals(_o.allAchievements);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("allAchievements=");
		allAchievements.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		_msg.composeMsgBody(allAchievements);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		_parser.parseMsgBody(allAchievements);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ALL_ACHIEVEMENTS_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		_parser.skipMsgBody();  /*allAchievements*/
	}
}

//=================================================================
//                    CompletedDuel
//=================================================================

pokerduel::client::CompletedDuel::CompletedDuel()
{
	clear();
}

void pokerduel::client::CompletedDuel::clear()
{
	duelId = 0;
	duelTypeId = 0;
	whenClosed.setNull();
	opponentUserId.clear();
	result = 0;
	isPlayMoney = false;
	currency.clear();
	amountWonLost = 0;
	siteMask = 0;
	opponentImageId = 0;
	opponentPlayerFlag = 0;
	lastChatOrdinal = 0;
	myLastOrdinalId = 0;
	ticketUsedForBuyin = false;
}

bool pokerduel::client::CompletedDuel::equals(const CompletedDuel& _o) const
{
	return duelId == _o.duelId &&
		duelTypeId == _o.duelTypeId &&
		whenClosed.equals(_o.whenClosed) &&
		opponentUserId.equals(_o.opponentUserId) &&
		result == _o.result &&
		isPlayMoney == _o.isPlayMoney &&
		currency.equals(_o.currency) &&
		amountWonLost == _o.amountWonLost &&
		siteMask == _o.siteMask &&
		opponentImageId == _o.opponentImageId &&
		opponentPlayerFlag == _o.opponentPlayerFlag &&
		lastChatOrdinal == _o.lastChatOrdinal &&
		myLastOrdinalId == _o.myLastOrdinalId &&
		ticketUsedForBuyin == _o.ticketUsedForBuyin;
}

const char *pokerduel::client::CompletedDuel::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("whenClosed=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenClosed);
	_buf.append(',');
	_buf.append("opponentUserId=");
	_buf.append(opponentUserId);
	_buf.append(',');
	_buf.append("result=");
	_buf.appendInt(result);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("amountWonLost=");
	_buf.appendInt64(amountWonLost);
	_buf.append(',');
	_buf.append("siteMask=");
	_buf.appendUint(siteMask);
	_buf.append(',');
	_buf.append("opponentImageId=");
	_buf.appendUint(opponentImageId);
	_buf.append(',');
	_buf.append("opponentPlayerFlag=");
	_buf.appendUint(opponentPlayerFlag);
	_buf.append(',');
	_buf.append("lastChatOrdinal=");
	_buf.appendInt(lastChatOrdinal);
	_buf.append(',');
	_buf.append("myLastOrdinalId=");
	_buf.appendInt(myLastOrdinalId);
	_buf.append(',');
	_buf.append("ticketUsedForBuyin=");
	_buf.appendUint(ticketUsedForBuyin);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::CompletedDuel::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(CompletedDuel())) // not empty
	{
		_body.composeUINT64(duelId);
		_body.composeUINT32(duelTypeId);
		_body.composeSrvTime(whenClosed);
		_body.composeString(opponentUserId);
		_body.composeINT32(result);
		_body.composeBOOL(isPlayMoney);
		_body.composeString(currency);
		_body.composeINT64(amountWonLost);
		_body.composeUINT32(siteMask);
		_body.composeUINT32(opponentImageId);
		_body.composeUINT32(opponentPlayerFlag);
		_body.composeINT32(lastChatOrdinal);
		_body.composeINT32(myLastOrdinalId);
		_body.composeBOOL(ticketUsedForBuyin);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::client::CompletedDuel::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(duelId);
	_parser0.parseUINT32(duelTypeId);
	_parser0.parseSrvTime(whenClosed);
	_parser0.parseStringPN(opponentUserId, 0, "opponentUserId");
	_parser0.parseINT32(result);
	_parser0.parseBOOL(isPlayMoney);
	_parser0.parseStringPN(currency, 0, "currency");
	_parser0.parseINT64(amountWonLost);
	_parser0.parseUINT32(siteMask);
	_parser0.parseUINT32(opponentImageId);
	_parser0.parseUINT32(opponentPlayerFlag);
	_parser0.parseINT32(lastChatOrdinal);
	_parser0.parseINT32(myLastOrdinalId);
	_parser0.parseBOOL(ticketUsedForBuyin);
}

/*static*/ void pokerduel::client::CompletedDuel::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy;
	_parser0.skip(8);  /*duelId*/
	_parser0.skip(4);  /*duelTypeId*/
	_parser0.skip(8);  /*whenClosed*/
	_parser0.parseStringN(_dummy, 0, "opponentUserId");  /*opponentUserId*/
	_parser0.skip(4);  /*result*/
	bool isPlayMoney; _parser0.parseBOOL(isPlayMoney);
	_parser0.parseStringN(_dummy, 0, "currency");  /*currency*/
	_parser0.skip(8);  /*amountWonLost*/
	_parser0.skip(4);  /*siteMask*/
	_parser0.skip(4);  /*opponentImageId*/
	_parser0.skip(4);  /*opponentPlayerFlag*/
	_parser0.skip(4);  /*lastChatOrdinal*/
	_parser0.skip(4);  /*myLastOrdinalId*/
	bool ticketUsedForBuyin; _parser0.parseBOOL(ticketUsedForBuyin);
	AtfValidator::validateEmbeddedMsgbodyParser("client::CompletedDuel", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                    CancelledChallenge
//=================================================================

pokerduel::client::CancelledChallenge::CancelledChallenge()
{
	clear();
}

void pokerduel::client::CancelledChallenge::clear()
{
	challengeId = 0;
	duelTypeId = 0;
	opponentUserId.clear();
	challengeResponse = 0;
	whenResponse.setNull();
	isPlayMoney = false;
	currency.clear();
	amountRefunded = 0;
	siteMask = 0;
	ticketAmount = 0;
}

bool pokerduel::client::CancelledChallenge::equals(const CancelledChallenge& _o) const
{
	return challengeId == _o.challengeId &&
		duelTypeId == _o.duelTypeId &&
		opponentUserId.equals(_o.opponentUserId) &&
		challengeResponse == _o.challengeResponse &&
		whenResponse.equals(_o.whenResponse) &&
		isPlayMoney == _o.isPlayMoney &&
		currency.equals(_o.currency) &&
		amountRefunded == _o.amountRefunded &&
		siteMask == _o.siteMask &&
		ticketAmount == _o.ticketAmount;
}

const char *pokerduel::client::CancelledChallenge::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("challengeId=");
	_buf.appendUint64(challengeId);
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("opponentUserId=");
	_buf.append(opponentUserId);
	_buf.append(',');
	_buf.append("challengeResponse=");
	_buf.appendInt(challengeResponse);
	_buf.append(',');
	_buf.append("whenResponse=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenResponse);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("amountRefunded=");
	_buf.appendInt64(amountRefunded);
	_buf.append(',');
	_buf.append("siteMask=");
	_buf.appendUint(siteMask);
	_buf.append(',');
	_buf.append("ticketAmount=");
	_buf.appendInt64(ticketAmount);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::CancelledChallenge::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(CancelledChallenge())) // not empty
	{
		_body.composeUINT64(challengeId);
		_body.composeUINT32(duelTypeId);
		_body.composeString(opponentUserId);
		_body.composeINT32(challengeResponse);
		_body.composeSrvTime(whenResponse);
		_body.composeBOOL(isPlayMoney);
		_body.composeString(currency);
		_body.composeINT64(amountRefunded);
		_body.composeUINT32(siteMask);
		_body.composeINT64(ticketAmount);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::client::CancelledChallenge::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(challengeId);
	_parser0.parseUINT32(duelTypeId);
	_parser0.parseStringPN(opponentUserId, 0, "opponentUserId");
	_parser0.parseINT32(challengeResponse);
	_parser0.parseSrvTime(whenResponse);
	_parser0.parseBOOL(isPlayMoney);
	_parser0.parseStringPN(currency, 0, "currency");
	_parser0.parseINT64(amountRefunded);
	_parser0.parseUINT32(siteMask);
	_parser0.parseINT64(ticketAmount);
}

/*static*/ void pokerduel::client::CancelledChallenge::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy;
	_parser0.skip(8);  /*challengeId*/
	_parser0.skip(4);  /*duelTypeId*/
	_parser0.parseStringN(_dummy, 0, "opponentUserId");  /*opponentUserId*/
	_parser0.skip(4);  /*challengeResponse*/
	_parser0.skip(8);  /*whenResponse*/
	bool isPlayMoney; _parser0.parseBOOL(isPlayMoney);
	_parser0.parseStringN(_dummy, 0, "currency");  /*currency*/
	_parser0.skip(8);  /*amountRefunded*/
	_parser0.skip(4);  /*siteMask*/
	_parser0.skip(8);  /*ticketAmount*/
	AtfValidator::validateEmbeddedMsgbodyParser("client::CancelledChallenge", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                    CancelledRandomPoolEntry
//=================================================================

pokerduel::client::CancelledRandomPoolEntry::CancelledRandomPoolEntry()
{
	clear();
}

void pokerduel::client::CancelledRandomPoolEntry::clear()
{
	duelTypeId = 0;
	whenCancelled.setNull();
	reason = 0;
	isPlayMoney = false;
	currency.clear();
	amountRefunded = 0;
	siteMask = 0;
	ticketAmount = 0;
}

bool pokerduel::client::CancelledRandomPoolEntry::equals(const CancelledRandomPoolEntry& _o) const
{
	return duelTypeId == _o.duelTypeId &&
		whenCancelled.equals(_o.whenCancelled) &&
		reason == _o.reason &&
		isPlayMoney == _o.isPlayMoney &&
		currency.equals(_o.currency) &&
		amountRefunded == _o.amountRefunded &&
		siteMask == _o.siteMask &&
		ticketAmount == _o.ticketAmount;
}

const char *pokerduel::client::CancelledRandomPoolEntry::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("whenCancelled=");
	ThinAtf::AtfTempl<CommSrvTime>::ToTraceString(_buf, whenCancelled);
	_buf.append(',');
	_buf.append("reason=");
	_buf.appendInt(reason);
	_buf.append(',');
	_buf.append("isPlayMoney=");
	_buf.appendUint(isPlayMoney);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("amountRefunded=");
	_buf.appendInt64(amountRefunded);
	_buf.append(',');
	_buf.append("siteMask=");
	_buf.appendUint(siteMask);
	_buf.append(',');
	_buf.append("ticketAmount=");
	_buf.appendInt64(ticketAmount);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::CancelledRandomPoolEntry::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(CancelledRandomPoolEntry())) // not empty
	{
		_body.composeUINT32(duelTypeId);
		_body.composeSrvTime(whenCancelled);
		_body.composeINT32(reason);
		_body.composeBOOL(isPlayMoney);
		_body.composeString(currency);
		_body.composeINT64(amountRefunded);
		_body.composeUINT32(siteMask);
		_body.composeINT64(ticketAmount);
	}

	_msg.composeMsgBody(_body);
}

void pokerduel::client::CancelledRandomPoolEntry::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(duelTypeId);
	_parser0.parseSrvTime(whenCancelled);
	_parser0.parseINT32(reason);
	_parser0.parseBOOL(isPlayMoney);
	_parser0.parseStringPN(currency, 0, "currency");
	_parser0.parseINT64(amountRefunded);
	_parser0.parseUINT32(siteMask);
	_parser0.parseINT64(ticketAmount);
}

/*static*/ void pokerduel::client::CancelledRandomPoolEntry::validateMsg(CommMsgParser& _parser)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy;
	_parser0.skip(4);  /*duelTypeId*/
	_parser0.skip(8);  /*whenCancelled*/
	_parser0.skip(4);  /*reason*/
	bool isPlayMoney; _parser0.parseBOOL(isPlayMoney);
	_parser0.parseStringN(_dummy, 0, "currency");  /*currency*/
	_parser0.skip(8);  /*amountRefunded*/
	_parser0.skip(4);  /*siteMask*/
	_parser0.skip(8);  /*ticketAmount*/
	AtfValidator::validateEmbeddedMsgbodyParser("client::CancelledRandomPoolEntry", _parser0.msgBodyViewSize(), _parser0._shift(), _parser._shift());
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GETHISTORY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY::Protocol_MSG_POKERDUEL_GETHISTORY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY::clear()
{
	numEvents = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY::equals(const Protocol_MSG_POKERDUEL_GETHISTORY& _o) const
{
	return numEvents == _o.numEvents;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GETHISTORY).append(")");
	_buf.append(',');
	_buf.append("numEvents=");
	_buf.appendInt(numEvents);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(numEvents);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(numEvents);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(4);  /*numEvents*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GETHISTORY_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY_REPLY::Protocol_MSG_POKERDUEL_GETHISTORY_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	moreEventsAvailable = false;
	duels.clear();
	cancelledChallenges.clear();
	cancelledRandomPoolEntries.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY_REPLY::equals(const Protocol_MSG_POKERDUEL_GETHISTORY_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		moreEventsAvailable == _o.moreEventsAvailable &&
		duels.equals(_o.duels) &&
		cancelledChallenges.equals(_o.cancelledChallenges) &&
		cancelledRandomPoolEntries.equals(_o.cancelledRandomPoolEntries);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GETHISTORY_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("moreEventsAvailable=");
		_buf.appendUint(moreEventsAvailable);
		_buf.append(',');
		_buf.append("duels=");
		duels.toTraceString(_buf);
		_buf.append(',');
		_buf.append("cancelledChallenges=");
		cancelledChallenges.toTraceString(_buf);
		_buf.append(',');
		_buf.append("cancelledRandomPoolEntries=");
		cancelledRandomPoolEntries.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		_msg.composeBOOL(moreEventsAvailable);
		duels.composeMsg(_msg);
		cancelledChallenges.composeMsg(_msg);
		cancelledRandomPoolEntries.composeMsg(_msg);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		_parser.parseBOOL(moreEventsAvailable);
		duels.parseMsg(_parser);
		cancelledChallenges.parseMsg(_parser);
		cancelledRandomPoolEntries.parseMsg(_parser);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GETHISTORY_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		bool moreEventsAvailable; _parser.parseBOOL(moreEventsAvailable);
		ThinAtf::LAtfVector< CompletedDuel , 4 >::validateMsg(_parser);  /*duels*/
		ThinAtf::LAtfVector< CancelledChallenge , 4 >::validateMsg(_parser);  /*cancelledChallenges*/
		ThinAtf::LAtfVector< CancelledRandomPoolEntry , 4 >::validateMsg(_parser);  /*cancelledRandomPoolEntries*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_REPLAY_DUEL
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL::Protocol_MSG_POKERDUEL_REPLAY_DUEL()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL::clear()
{
	duelId = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL::equals(const Protocol_MSG_POKERDUEL_REPLAY_DUEL& _o) const
{
	return duelId == _o.duelId;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_REPLAY_DUEL).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY::Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	lastChatOrdinal_deprecated = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY::equals(const Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		lastChatOrdinal_deprecated == _o.lastChatOrdinal_deprecated;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_REPLAY_DUEL_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("lastChatOrdinal_deprecated=");
		_buf.appendInt(lastChatOrdinal_deprecated);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		_msg.composeINT32(lastChatOrdinal_deprecated);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		_parser.parseINT32(lastChatOrdinal_deprecated);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_REPLAY_DUEL_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		_parser.skip(4);  /*lastChatOrdinal_deprecated*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK::clear()
{
	duelTypeId = 0;
	matchType_deprecated = 0;
	context = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK::equals(const Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK& _o) const
{
	return duelTypeId == _o.duelTypeId &&
		matchType_deprecated == _o.matchType_deprecated &&
		context == _o.context;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_PRECONFIRMATION_CHECK).append(")");
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	_buf.append(',');
	_buf.append("matchType_deprecated=");
	_buf.appendInt(matchType_deprecated);
	_buf.append(',');
	_buf.append("context=");
	_buf.appendInt(context);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(duelTypeId);
	_msg.composeINT32(matchType_deprecated);
	_msg.composeINT32(context);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(duelTypeId);
	_parser.parseINT32(matchType_deprecated);
	if(_parser.parseEnded()) return;
	_parser.parseINT32(context);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(4);  /*duelTypeId*/
	_parser.skip(4);  /*matchType_deprecated*/
	if(_parser.parseEnded()) return;
	_parser.skip(4);  /*context*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	extraErrorInfo.clear();
	errTitle.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY::equals(const Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		extraErrorInfo.equals(_o.extraErrorInfo) &&
		errTitle.equals(_o.errTitle);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("extraErrorInfo=");
		extraErrorInfo.toTraceString(_buf);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeMsgBody(extraErrorInfo);
		_msg.composeString(errTitle);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseMsgBody(extraErrorInfo);
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_PRECONFIRMATION_CHECK_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.skipMsgBody();  /*extraErrorInfo*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED::Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED::clear()
{
	challengeId = 0;
	reason = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED::equals(const Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED& _o) const
{
	return challengeId == _o.challengeId &&
		reason == _o.reason;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED).append(")");
	_buf.append(',');
	_buf.append("challengeId=");
	_buf.appendUint64(challengeId);
	_buf.append(',');
	_buf.append("reason=");
	_buf.appendInt(reason);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(challengeId);
	_msg.composeINT32(reason);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(challengeId);
	_parser.parseINT32(reason);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_NOTIFY_CHALLENGE_REVOKED::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*challengeId*/
	_parser.skip(4);  /*reason*/
}

//=================================================================
//                    DuelClientChatItem
//=================================================================

pokerduel::client::DuelClientChatItem::DuelClientChatItem()
{
	clear();
}

void pokerduel::client::DuelClientChatItem::clear()
{
	ordinal = 0;
	userId.clear();
	time = 0;
	chat.clear();
}

bool pokerduel::client::DuelClientChatItem::equals(const DuelClientChatItem& _o) const
{
	return ordinal == _o.ordinal &&
		userId.equals(_o.userId) &&
		time == _o.time &&
		chat.equals(_o.chat);
}

const char *pokerduel::client::DuelClientChatItem::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("ordinal=");
	_buf.appendInt(ordinal);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("time=");
	_buf.appendUint64(time);
	_buf.append(',');
	_buf.append("chat=");
	_buf.append(chat);
	_buf.append('}');
	return _buf.c_str();
}

void pokerduel::client::DuelClientChatItem::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(ordinal);
	_msg.composeString(userId);
	_msg.composeUINT64(time);
	_msg.composeString(chat);
}

void pokerduel::client::DuelClientChatItem::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(ordinal);
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseUINT64(time);
	_parser.parseStringPN(chat, 0, "chat");
}

/*static*/ void pokerduel::client::DuelClientChatItem::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(4);  /*ordinal*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.skip(8);  /*time*/
	_parser.parseStringN(_dummy, 0, "chat");  /*chat*/
}

//=================================================================
//                Protocol_MSG_DUEL_CHAT_REQUEST
//=================================================================

pokerduel::client::Protocol_MSG_DUEL_CHAT_REQUEST::Protocol_MSG_DUEL_CHAT_REQUEST()
{
	clear();
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_REQUEST::clear()
{
	duelId = 0;
	userId.clear();
	chat.clear();
}

bool pokerduel::client::Protocol_MSG_DUEL_CHAT_REQUEST::equals(const Protocol_MSG_DUEL_CHAT_REQUEST& _o) const
{
	return duelId == _o.duelId &&
		userId.equals(_o.userId) &&
		chat.equals(_o.chat);
}

const char *pokerduel::client::Protocol_MSG_DUEL_CHAT_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_CHAT_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("chat=");
	_buf.append(chat);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeString(userId);
	_msg.composeString(chat);
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseStringPN(userId, 0, "userId");
	_parser.parseStringPN(chat, 0, "chat");
}

/*static*/ void pokerduel::client::Protocol_MSG_DUEL_CHAT_REQUEST::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.skip(8);  /*duelId*/
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	_parser.parseStringN(_dummy, 0, "chat");  /*chat*/
}

//=================================================================
//                Protocol_MSG_DUEL_CHAT_BROADCAST
//=================================================================

pokerduel::client::Protocol_MSG_DUEL_CHAT_BROADCAST::Protocol_MSG_DUEL_CHAT_BROADCAST()
{
	clear();
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_BROADCAST::clear()
{
	duelId = 0;
	lastChatOrdinal = 0;
	chat.clear();
}

bool pokerduel::client::Protocol_MSG_DUEL_CHAT_BROADCAST::equals(const Protocol_MSG_DUEL_CHAT_BROADCAST& _o) const
{
	return duelId == _o.duelId &&
		lastChatOrdinal == _o.lastChatOrdinal &&
		chat.equals(_o.chat);
}

const char *pokerduel::client::Protocol_MSG_DUEL_CHAT_BROADCAST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_CHAT_BROADCAST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("lastChatOrdinal=");
	_buf.appendInt(lastChatOrdinal);
	_buf.append(',');
	_buf.append("chat=");
	chat.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_BROADCAST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeINT32(lastChatOrdinal);
	chat.composeMsg(_msg);
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_BROADCAST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseINT32(lastChatOrdinal);
	chat.parseMsg(_parser);
}

/*static*/ void pokerduel::client::Protocol_MSG_DUEL_CHAT_BROADCAST::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	_parser.skip(4);  /*lastChatOrdinal*/
	DuelClientChatItem::validateMsg(_parser);  /*chat*/
}

//=================================================================
//                Protocol_MSG_DUEL_CHAT_SYNC_REQUEST
//=================================================================

pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REQUEST::Protocol_MSG_DUEL_CHAT_SYNC_REQUEST()
{
	clear();
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REQUEST::clear()
{
	duelId = 0;
	start = 0;
	size = 0;
}

bool pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REQUEST::equals(const Protocol_MSG_DUEL_CHAT_SYNC_REQUEST& _o) const
{
	return duelId == _o.duelId &&
		start == _o.start &&
		size == _o.size;
}

const char *pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REQUEST::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_CHAT_SYNC_REQUEST).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("start=");
	_buf.appendInt(start);
	_buf.append(',');
	_buf.append("size=");
	_buf.appendInt(size);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REQUEST::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeINT32(start);
	_msg.composeINT32(size);
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REQUEST::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseINT32(start);
	_parser.parseINT32(size);
}

/*static*/ void pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REQUEST::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	_parser.skip(4);  /*start*/
	_parser.skip(4);  /*size*/
}

//=================================================================
//                Protocol_MSG_DUEL_CHAT_SYNC_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REPLY::Protocol_MSG_DUEL_CHAT_SYNC_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REPLY::clear()
{
	duelId = 0;
	lastChatOrdinal = 0;
	chats.clear();
}

bool pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REPLY::equals(const Protocol_MSG_DUEL_CHAT_SYNC_REPLY& _o) const
{
	return duelId == _o.duelId &&
		lastChatOrdinal == _o.lastChatOrdinal &&
		chats.equals(_o.chats);
}

const char *pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_CHAT_SYNC_REPLY).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("lastChatOrdinal=");
	_buf.appendInt(lastChatOrdinal);
	_buf.append(',');
	_buf.append("chats=");
	chats.toTraceString(_buf);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeINT32(lastChatOrdinal);
	chats.composeMsg(_msg);
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseINT32(lastChatOrdinal);
	chats.parseMsg(_parser);
}

/*static*/ void pokerduel::client::Protocol_MSG_DUEL_CHAT_SYNC_REPLY::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	_parser.skip(4);  /*lastChatOrdinal*/
	ThinAtf::LAtfVector< DuelClientChatItem , 4 >::validateMsg(_parser);  /*chats*/
}

//=================================================================
//                Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID
//=================================================================

pokerduel::client::Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID::Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID()
{
	clear();
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID::clear()
{
	duelId = 0;
	myLastOrdinalId = 0;
}

bool pokerduel::client::Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID::equals(const Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID& _o) const
{
	return duelId == _o.duelId &&
		myLastOrdinalId == _o.myLastOrdinalId;
}

const char *pokerduel::client::Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	_buf.append(',');
	_buf.append("myLastOrdinalId=");
	_buf.appendInt(myLastOrdinalId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
	_msg.composeINT32(myLastOrdinalId);
}

void pokerduel::client::Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
	_parser.parseINT32(myLastOrdinalId);
}

/*static*/ void pokerduel::client::Protocol_MSG_DUEL_CHAT_REPORT_CURR_MAXORDINALID::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
	_parser.skip(4);  /*myLastOrdinalId*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO::clear()
{
	userId.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO::equals(const Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO& _o) const
{
	return userId.equals(_o.userId);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringPN(userId, 0, "userId");
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	toFriendChallenges.clear();
	fromFriendChallenges.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY::equals(const Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		toFriendChallenges.equals(_o.toFriendChallenges) &&
		fromFriendChallenges.equals(_o.fromFriendChallenges);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("toFriendChallenges=");
		toFriendChallenges.toTraceString(_buf);
		_buf.append(',');
		_buf.append("fromFriendChallenges=");
		fromFriendChallenges.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		toFriendChallenges.composeMsg(_msg);
		fromFriendChallenges.composeMsg(_msg);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		toFriendChallenges.parseMsg(_parser);
		fromFriendChallenges.parseMsg(_parser);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_PENDING_CHALLENGE_INFO_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		ThinAtf::LAtfVector< UINT64, 4 >::validateMsg(_parser);  /*toFriendChallenges*/
		ThinAtf::LAtfVector< UINT64, 4 >::validateMsg(_parser);  /*fromFriendChallenges*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED::Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED::clear()
{
	duelTypeId = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED::equals(const Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED& _o) const
{
	return duelTypeId == _o.duelTypeId;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_RANDOM_ENTRY_REVOKED).append(")");
	_buf.append(',');
	_buf.append("duelTypeId=");
	_buf.appendUint(duelTypeId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(duelTypeId);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(duelTypeId);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_RANDOM_ENTRY_REVOKED::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(4);  /*duelTypeId*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES::clear()
{
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES::equals(const Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES& _o) const
{
	return true;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_ICE_CHALLENGES).append(")");
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	numAvailableIceChallenges = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY::equals(const Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		numAvailableIceChallenges == _o.numAvailableIceChallenges;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("numAvailableIceChallenges=");
		_buf.appendInt(numAvailableIceChallenges);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		_msg.composeINT32(numAvailableIceChallenges);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		_parser.parseINT32(numAvailableIceChallenges);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_ICE_CHALLENGES_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		_parser.skip(4);  /*numAvailableIceChallenges*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_DUEL_INFO
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO::Protocol_MSG_POKERDUEL_GET_DUEL_INFO()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO::clear()
{
	duelId = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO::equals(const Protocol_MSG_POKERDUEL_GET_DUEL_INFO& _o) const
{
	return duelId == _o.duelId;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_DUEL_INFO).append(")");
	_buf.append(',');
	_buf.append("duelId=");
	_buf.appendUint64(duelId);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(duelId);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(duelId);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*duelId*/
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY::Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	isRunningNotCompleted = false;
	duelInfo.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY::equals(const Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		isRunningNotCompleted == _o.isRunningNotCompleted &&
		duelInfo.equals(_o.duelInfo);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_DUEL_INFO_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("isRunningNotCompleted=");
		_buf.appendUint(isRunningNotCompleted);
		_buf.append(',');
		_buf.append("duelInfo=");
		duelInfo.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		_msg.composeBOOL(isRunningNotCompleted);
		_msg.composeMsgBody(duelInfo);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		_parser.parseBOOL(isRunningNotCompleted);
		_parser.parseMsgBody(duelInfo);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_DUEL_INFO_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		bool isRunningNotCompleted; _parser.parseBOOL(isRunningNotCompleted);
		_parser.skipMsgBody();  /*duelInfo*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO::clear()
{
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO::equals(const Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO& _o) const
{
	return true;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_RANDOM_POOL_INFO).append(")");
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO::composeMsg(CommMsgBody& _msg) const
{
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO::validateMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	randomPoolEntries.clear();
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY::equals(const Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		randomPoolEntries.equals(_o.randomPoolEntries);
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("randomPoolEntries=");
		randomPoolEntries.toTraceString(_buf);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		randomPoolEntries.composeMsg(_msg);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		randomPoolEntries.parseMsg(_parser);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_RANDOM_POOL_INFO_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		ThinAtf::LAtfVector< ClientRandomPool , 4 >::validateMsg(_parser);  /*randomPoolEntries*/
	}
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO::clear()
{
	challengeId = 0;
	supportsConvertedToDuel = false;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO::equals(const Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO& _o) const
{
	return challengeId == _o.challengeId &&
		supportsConvertedToDuel == _o.supportsConvertedToDuel;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_CHALLENGE_INFO).append(")");
	_buf.append(',');
	_buf.append("challengeId=");
	_buf.appendUint64(challengeId);
	_buf.append(',');
	_buf.append("supportsConvertedToDuel=");
	_buf.appendUint(supportsConvertedToDuel);
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(challengeId);
	_msg.composeBOOL(supportsConvertedToDuel);
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(challengeId);
	if(_parser.parseEnded()) return;
	_parser.parseBOOL(supportsConvertedToDuel);
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(8);  /*challengeId*/
	if(_parser.parseEnded()) return;
	bool supportsConvertedToDuel; _parser.parseBOOL(supportsConvertedToDuel);
}

//=================================================================
//                Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY
//=================================================================

pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY()
{
	clear();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	errTitle.clear();
	isPendingNotCancelled_deprecated = false;
	challengeInfo.clear();
	challengeType = 0;
}

bool pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY::equals(const Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		errTitle.equals(_o.errTitle) &&
		isPendingNotCancelled_deprecated == _o.isPendingNotCancelled_deprecated &&
		challengeInfo.equals(_o.challengeInfo) &&
		challengeType == _o.challengeType;
}

const char *pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if ( errCode != 0 )
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
		_buf.append(',');
		_buf.append("errTitle=");
		_buf.append(errTitle);
	}
	else
	{
		_buf.append(',');
		_buf.append("isPendingNotCancelled_deprecated=");
		_buf.appendUint(isPendingNotCancelled_deprecated);
		_buf.append(',');
		_buf.append("challengeInfo=");
		challengeInfo.toTraceString(_buf);
		_buf.append(',');
		_buf.append("challengeType=");
		_buf.appendInt(challengeType);
	}
	return _buf.c_str();
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if ( errCode != 0 )
	{
		_msg.composeString(errString);
		_msg.composeString(errTitle);
	}
	else
	{
		_msg.composeBOOL(isPendingNotCancelled_deprecated);
		_msg.composeMsgBody(challengeInfo);
		_msg.composeINT32(challengeType);
	}
}

void pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringPN(errString, 0, "errString");
		_parser.parseStringPN(errTitle, 0, "errTitle");
	}
	else
	{
		_parser.parseBOOL(isPendingNotCancelled_deprecated);
		_parser.parseMsgBody(challengeInfo);
		_parser.parseINT32(challengeType);
	}
}

/*static*/ void pokerduel::client::Protocol_MSG_POKERDUEL_GET_CHALLENGE_INFO_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if ( errCode != 0 )
	{
		_parser.parseStringN(_dummy, 0, "errString");  /*errString*/
		_parser.parseStringN(_dummy, 0, "errTitle");  /*errTitle*/
	}
	else
	{
		bool isPendingNotCancelled_deprecated; _parser.parseBOOL(isPendingNotCancelled_deprecated);
		_parser.skipMsgBody();  /*challengeInfo*/
		_parser.skip(4);  /*challengeType*/
	}
}

