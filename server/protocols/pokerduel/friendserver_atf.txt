#include "UserDefStructs.h"
#include "dbmmsg.h"
#include "pokerduel/friendserver.h"

#define TOP_LEVEL_NAMESPACE friendserver

namespace cli
{
	MsgBodyStruct FriendStruct
	{		
		PString name;
		UINT32 imageId;
		bool isOnline;
		bool hasPendingChallenge;
		bool isNewFriend;
		bool hasRMPendingChallenge;
		UINT32 playerFlag;		//	enum eDuelUserFlags
	};
	MsgBodyStruct FriendReqStruct
	{		
		PString name;
		UINT32 imageId;
		bool isOnline;
		UINT32 playerFlag;		//	enum eDuelUserFlags
	};
	MsgBodyStruct BlockedUserStruct
	{		
		PString name;
	};	

	// every messages will be in pair (first is from client to friend server, and the second is the reply from server to client)
// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_GET_FRIEND_LIST
	{
		// empty message body
	};
	Message MSG_FRDSRV_GET_FRIEND_LIST_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			vector<FriendStruct> friends;
		}
	};
	
// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_REMOVE_FRIEND
	{
		PString userId;
	};
	Message MSG_FRDSRV_REMOVE_FRIEND_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};	

// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_GET_BLOCKED_LIST
	{
		// empty message body
	};
	Message MSG_FRDSRV_GET_BLOCKED_LIST_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			vector<BlockedUserStruct> friends;
		}
	};
	
// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_UNBLOCK_USER
	{
		PString userId;
	};
	Message MSG_FRDSRV_UNBLOCK_USER_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};

// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_GET_FRIEND_REQ_LIST
	{
		// empty message body
	};
	Message MSG_FRDSRV_GET_FRIEND_REQ_LIST_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			vector<FriendReqStruct> friends;
		}
	};

// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_ADD_FRIEND_REQ
	{
		PString userId;
		bool throughUserSearch parseEndOptB4Me;
	};
	Message MSG_FRDSRV_ADD_FRIEND_REQ_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};	

// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_DENY_FRIEND_REQ
	{
		PString userId;
	};
	Message MSG_FRDSRV_DENY_FRIEND_REQ_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};	

// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_ACCEPT_FRIEND_REQ
	{
		PString userId;
	};
	Message MSG_FRDSRV_ACCEPT_FRIEND_REQ_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};	
// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_BLOCK_USER
	{
		PString userId;
	};
	Message MSG_FRDSRV_BLOCK_USER_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};
// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_CHECK_USER
	{
		PString userId;
	};
	Message MSG_FRDSRV_CHECK_USER_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			bool isOnline;
			UINT32 relation;
			UINT32 imageId;
			PString originalUserId;
			bool addFrdNotAllowed;
			UINT32 playerFlag;		//	enum eDuelUserFlags
		}
	};
	
// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_SET_USER_BLOCK_ALL_FRD_REQ
	{
		bool setNotRemove;
	};
	Message MSG_FRDSRV_SET_USER_BLOCK_ALL_FRD_REQ_REPLY
	{
		INT16 errCode;
		if(errCode != 0)
		{
			PString errMsg;
		}
	};
	
	MsgBodyStruct RecentOppStruct
	{		
		PString name;
		UINT32 imageId;
		bool isOnline;
		UINT32 frdRelation default eFrdRelation_none;
		UINT32 playerFlag;		//	enum eDuelUserFlags
	};
// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_GET_RECENT_PLAYED_LIST
	{
		// empty message body
	};
	Message MSG_FRDSRV_GET_RECENT_PLAYED_LIST_REPLY
	{
  		INT16 errCode;				
		if (errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			vector<RecentOppStruct> recentPlayedUsers;
		}
	};

// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_USE_FRD_SHARE_TOKEN
	{
		PString token;
	};
	Message MSG_FRDSRV_USE_FRD_SHARE_TOKEN_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			PString tokenUserId;
		}
	};	
		
	// notification message (server -> client)
	Message MSG_FRDSRV_NOTIF_CLI_FRIEND_UPDATE
	{
		UINT32 friendUpdateType;
		PString userId;
	};
	
	// notification message (server -> client)
	Message MSG_FRIEND_NOTIF_CLI_FRIEND_REQ_UPDATE
	{
		bool addOrDrop;
		PString userId;
	};
	
// !!! WARNING !!! If you modify this message, please let testautomation team know.
	Message MSG_FRDSRV_GET_SHARE_URL
	{
	};
	Message MSG_FRDSRV_GET_SHARE_URL_REPLY
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			PString url;
		}
	};
};

namespace rodbm
{
	Struct UserId_UserIntId
	{		
		PString userId;
		UINT32 userIntId;
	};

	Message DBM_Q_GET_USERINTID_BY_NORMALIZED_ID
	{
		PString userId;
	};
	Message DBM_A_GET_USERINTID_BY_NORMALIZED_ID
	{	
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			UINT32 userIntId;
			PString originalUserId;				
		}
	};	
};

namespace frienddbm
{
	struct FriendStruct
	{		
		PString name;
		bool hasNewFriendPendingAction;
	};

	// every messages will be in pair (first is from friend server to friend dbm, and the second is from friend dbm to friend server)
	Message DBM_Q_FRDSRV_LOAD_USER_DATA
	{
		UINT32 userIntId;
	};
	Message DBM_A_FRDSRV_LOAD_USER_DATA
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			vector<FriendStruct> friendUsers;
			vector<PString> friendReqUserIds;
			vector<PString> blockedUserIds;
			UINT32 flags;
			bool hasScore;
			UINT32 score;
		}
	};

	Message DBM_Q_FRDSRV_REMOVE_FRIEND
	{
		UINT32 userIntId1;
		PString userId2;
	};
	Message DBM_A_FRDSRV_REMOVE_FRIEND
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};

	Message DBM_Q_FRDSRV_UNBLOCK_USER
	{
		UINT32 userIntId1;
		PString userId2;
	};
	Message DBM_A_FRDSRV_UNBLOCK_USER
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};

	Message DBM_Q_FRDSRV_ADD_FRIEND_REQ
	{
		PString userId1;
		UINT32 userIntId1;
		PString userId2;
		UINT32 userIntId2;
	};
	Message DBM_A_FRDSRV_ADD_FRIEND_REQ
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};
	
	Message DBM_Q_FRDSRV_DENY_FRIEND_REQ
	{
		PString userId1;
		UINT32 userIntId1;
		PString userId2;
	};
	Message DBM_A_FRDSRV_DENY_FRIEND_REQ
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};
	
	Message DBM_Q_FRDSRV_ACCEPT_FRIEND_REQ
	{
		PString userId1;
		UINT32 userIntId1;
		PString userId2;
		UINT32 userIntId2;
	};
	Message DBM_A_FRDSRV_ACCEPT_FRIEND_REQ
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};
	Message DBM_Q_FRDSRV_BLOCK_USER
	{
		PString userId1;		
		UINT32 userIntId1;
		PString userId2;
		UINT32 userIntId2;
	};
	Message DBM_A_FRDSRV_BLOCK_USER
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};
	
	Message DBM_Q_FRDSRV_SET_USER_FRIEND_SCORE
	{
		PString userId;
		UINT32 userIntId;
		UINT32 updateType;
		INT32 score;
	};
	Message DBM_A_FRDSRV_SET_USER_FRIEND_SCORE
	{
		INT16 errCode;				
		if(errCode != 0)
		{
			PString errMsg;
		}
	};	
	Message DBM_Q_FRDSRV_SET_USER_BLOCK_ALL_FRD_REQ
	{
		PString userId;
		UINT32 userIntId;
		bool setNotRemove;
	};
	Message DBM_A_FRDSRV_SET_USER_BLOCK_ALL_FRD_REQ
	{
		INT16 errCode;
		if(errCode != 0)
		{
			PString errMsg;
		}
	};
	Message DBM_Q_FRDSRV_REMOVE_NEW_FRIEND_PENDING_ACTION
	{
		PString userId1;
		UINT32 userIntId1;
		vector<PString> userIds;
	};
	Message DBM_A_FRDSRV_REMOVE_NEW_FRIEND_PENDING_ACTION
	{
		INT16 errCode;
		if(errCode != 0)
		{
			PString errMsg;
		}
	};
	Message DBM_Q_FRDSRV_GET_FRDREQ_INFO
	{
		PString userId_sender;
		UINT32 userIntId_sender;
		vector<PString> userIds_receiver;
	};
	Message DBM_A_FRDSRV_GET_FRDREQ_INFO
	{
		INT16 errCode;
		if(errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			vector<UINT32> vecReqSent;
		}
	};
	
	Message DBM_Q_FRDSRV_ADMIN_CREATE_FRIENDSHIP
	{
		PString userId1;
		UINT32 userIntId1;
		PString userId2;
		UINT32 userIntId2;
	};
	Message DBM_A_FRDSRV_ADMIN_CREATE_FRIENDSHIP
	{
		INT16 errCode;
		if(errCode != 0)
		{
			PString errMsg;
		}
	};	
};

namespace olap
{
	Message DBM_Q_PDUEL_GET_RECENT_OPPONENTS
	{
		PString userId;
		UINT32 userIntId;
		INT32 maxOpponents;
	};
	Message DBM_A_PDUEL_GET_RECENT_OPPONENTS
	{
  		INT16 errCode;				
		if (errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			vector<PString> recentPlayedUsers;
		}
	};
};

namespace dlobby
{
	Message MSG_FRDSRV_DLOBBY_CHECK_FRIENDSHIP
	{
		PString userId1;
		PString userId2;
	};
	Message MSG_FRDSRV_DLOBBY_CHECK_FRIENDSHIP_REPLY
	{
  		INT16 errCode;				
		if (errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			bool isFriend;
		}
	};
	Message MSG_FRDSRV_DLOBBY_GET_OWN_PROFILE
	{
		PString userId;		
	};
	Message MSG_FRDSRV_DLOBBY_GET_OWN_PROFILE_REPLY
	{
  		INT16 errCode;				
		if (errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			INT32 numFriends;
		}
	};
	Message MSG_FRDSRV_DLOBBY_GET_OTHERS_PROFILE
	{
		PString userId1;
		PString userId2;
	};
	Message MSG_FRDSRV_DLOBBY_GET_OTHERS_PROFILE_REPLY
	{
  		INT16 errCode;				
		if (errCode != 0)
		{
			PString errMsg;
		}
		else
		{
			UINT32 numFriends;
			bool isOnline;
			UINT32 frdRelation;
		}
	};
	// notification only
	Message MSG_FRDSRV_DLOBBY_NOTIF_FRIENDSHIP_UPDATE
	{
		PString userId1;
		PString userId2;
		bool addOrRemove;
	};
	
	Message MSG_FRDSRV_DLOBBY_CHALLENGE_ACCEPTED
	{
		PString userId1;
		PString userId2;
	};
	Message MSG_FRDSRV_DLOBBY_CHALLENGE_ACCEPTED_REPLY
	{
  		INT16 errCode;				
		if (errCode != 0)
		{
			PString errMsg;
		}
	};
	
	Message MSG_FRDSRV_DLOBBY_CHALLENGE_SENT
	{
		PString userId1;
		PString userId2;
	};
	Message MSG_FRDSRV_DLOBBY_CHALLENGE_SENT_REPLY
	{
  		INT16 errCode;				
		if (errCode != 0)
		{
			PString errMsg;
		}
	};	
};
