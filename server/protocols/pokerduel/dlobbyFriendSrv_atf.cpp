/**
 * dlobbyFriendSrv_atf.cpp
 *
 * This file was auto-generated from dlobbyFriendSrv_atf.txt by ATF protocol generator. 
 * Do not edit this file directly!
 */
 
#include "dlobbyFriendSrv_atf.h"

//=================================================================
//                    FriendChallengeInfo
//=================================================================

pduelServer::friendServer::FriendChallengeInfo::FriendChallengeInfo()
{
	clear();
}

void pduelServer::friendServer::FriendChallengeInfo::clear()
{
	numRMChallengesTo = 0;
	numRMChallengesFrom = 0;
	numPMChallengesTo = 0;
	numPMChallengesFrom = 0;
}

bool pduelServer::friendServer::FriendChallengeInfo::equals(const FriendChallengeInfo& _o) const
{
	return numRMChallengesTo == _o.numRMChallengesTo &&
		numRMChallengesFrom == _o.numRMChallengesFrom &&
		numPMChallengesTo == _o.numPMChallengesTo &&
		numPMChallengesFrom == _o.numPMChallengesFrom;
}

const char *pduelServer::friendServer::FriendChallengeInfo::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("numRMChallengesTo=");
	_buf.appendInt(numRMChallengesTo);
	_buf.append(',');
	_buf.append("numRMChallengesFrom=");
	_buf.appendInt(numRMChallengesFrom);
	_buf.append(',');
	_buf.append("numPMChallengesTo=");
	_buf.appendInt(numPMChallengesTo);
	_buf.append(',');
	_buf.append("numPMChallengesFrom=");
	_buf.appendInt(numPMChallengesFrom);
	_buf.append('}');
	return _buf.c_str();
}

const char *pduelServer::friendServer::FriendChallengeInfo::toXmlString(const char *_element, PString& _buf) const
{
	_buf.append('<').append(_element).append('>');
	Atf::XmlElement::encodeAsXmlElement("numRMChallengesTo", numRMChallengesTo, _buf);
	Atf::XmlElement::encodeAsXmlElement("numRMChallengesFrom", numRMChallengesFrom, _buf);
	Atf::XmlElement::encodeAsXmlElement("numPMChallengesTo", numPMChallengesTo, _buf);
	Atf::XmlElement::encodeAsXmlElement("numPMChallengesFrom", numPMChallengesFrom, _buf);
	Atf::XmlElement::appendElementCloseTag(_element, _buf);
	return _buf.c_str();
}

bool pduelServer::friendServer::FriendChallengeInfo::fromXmlString(const PString& _str)
{
	PString _element;
	PBlock _value;
	PString _type;
	const char* _xml = _str.c_str();
	
	while (Atf::XmlElement::decodeNextXmlElement(_xml, _element, _value, _type))
	{
		if (_element.equals("numRMChallengesTo"))
		{
			numRMChallengesTo = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("numRMChallengesFrom"))
		{
			numRMChallengesFrom = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("numPMChallengesTo"))
		{
			numPMChallengesTo = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else if (_element.equals("numPMChallengesFrom"))
		{
			numPMChallengesFrom = (INT32)p_atoi64((const char *)_value.ptr());
		}
		else
		{
			return false;  // unknown instance variable name
		}
	}
	return true;
}

void pduelServer::friendServer::FriendChallengeInfo::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT32(numRMChallengesTo);
	_msg.composeINT32(numRMChallengesFrom);
	_msg.composeINT32(numPMChallengesTo);
	_msg.composeINT32(numPMChallengesFrom);
}

void pduelServer::friendServer::FriendChallengeInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(numRMChallengesTo);
	_parser.parseINT32(numRMChallengesFrom);
	_parser.parseINT32(numPMChallengesTo);
	_parser.parseINT32(numPMChallengesFrom);
}

void pduelServer::friendServer::FriendChallengeInfo::parseMsg(Atf::MsgParserWithJSON& _parser)
{
	_parser.parse("numRMChallengesTo", numRMChallengesTo);
	_parser.parse("numRMChallengesFrom", numRMChallengesFrom);
	_parser.parse("numPMChallengesTo", numPMChallengesTo);
	_parser.parse("numPMChallengesFrom", numPMChallengesFrom);
}

const char *pduelServer::friendServer::FriendChallengeInfo::toJSONString(PString& _buf) const
{
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("numRMChallengesTo", numRMChallengesTo);
	_jsonstr.compose("numRMChallengesFrom", numRMChallengesFrom);
	_jsonstr.compose("numPMChallengesTo", numPMChallengesTo);
	_jsonstr.compose("numPMChallengesFrom", numPMChallengesFrom);
	return _buf.c_str();
}

void pduelServer::friendServer::FriendChallengeInfo::fromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("numRMChallengesTo", numRMChallengesTo);
	_jparser.parseByNameThrow("numRMChallengesFrom", numRMChallengesFrom);
	_jparser.parseByNameThrow("numPMChallengesTo", numPMChallengesTo);
	_jparser.parseByNameThrow("numPMChallengesFrom", numPMChallengesFrom);
}

void pduelServer::friendServer::FriendChallengeInfo::validateJSONString(const PString& _jsonString)
{
	Atf::JSONStringValidator _jparser(_jsonString);
	_jparser.validateByNameThrow("numRMChallengesTo", numRMChallengesTo);
	_jparser.validateByNameThrow("numRMChallengesFrom", numRMChallengesFrom);
	_jparser.validateByNameThrow("numPMChallengesTo", numPMChallengesTo);
	_jparser.validateByNameThrow("numPMChallengesFrom", numPMChallengesFrom);
}

/*static*/ void pduelServer::friendServer::FriendChallengeInfo::validateMsg(CommMsgParser& _parser)
{
	_parser.skip(4);  /*numRMChallengesTo*/
	_parser.skip(4);  /*numRMChallengesFrom*/
	_parser.skip(4);  /*numPMChallengesTo*/
	_parser.skip(4);  /*numPMChallengesFrom*/
}

//=================================================================
//                Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES
//=================================================================

pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES()
{
	clear();
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::clear()
{
	userId.clear();
	friendUserIds.clear();
}

bool pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::equals(const Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES& _o) const
{
	return userId.equals(_o.userId) &&
		friendUserIds.equals(_o.friendUserIds);
}

bool pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES*)_other));
}

const char *pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("friendUserIds=");
	friendUserIds.toTraceString(_buf);
	return _buf.c_str();
}

const char *pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("userId", userId, _buf);
	friendUserIds.toXmlString("friendUserIds", _buf);
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _element, _value, _type))
        {
			if (_element.equals("userId"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, userId)) return false;
			}
			else if (_element.equals("friendUserIds"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< PString , 4 > >::FromXmlString(_value, friendUserIds)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeString(userId);
	friendUserIds.composeMsg(_msg, _ignoreJSON);
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringPN(userId, 0, "userId");
	friendUserIds.parseMsg(_parser);
}

const char *pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("userId", userId);
	_jsonstr.compose("friendUserIds", friendUserIds);
	return _buf.c_str();
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("userId", userId);
	_jparser.parseByNameThrow("friendUserIds", friendUserIds);
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::validateJSONString(const PString& _jsonString)
{
	Atf::JSONStringValidator _jparser(_jsonString);
	_jparser.validateByNameThrow("userId", userId);
	_jparser.validateByNameThrow("friendUserIds", friendUserIds);
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	_parser.parseStringN(_dummy, 0, "userId");  /*userId*/
	Atf::LAtfVector< PString , 4 >::validateMsg(_parser);  /*friendUserIds*/
}

//=================================================================
//                Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY
//=================================================================

pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY()
{
	clear();
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::clear()
{
	errCode = 0;
	errMsg.clear();
	friendChallengeInfo.clear();
}

bool pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::equals(const Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errMsg.equals(_o.errMsg) &&
		friendChallengeInfo.equals(_o.friendChallengeInfo);
}

bool pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::equals(Atf::MessageProtocol* _other) const
{
	if (MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY != _other->getMsgId() || strcmp(getMsgIdString(), _other->getMsgIdString()))
	{
		return false;
	}
   
 	return equals(*((Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY*)_other));
}

const char *pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if (errCode != 0)
	{
		_buf.append(',');
		_buf.append("errMsg=");
		_buf.append(errMsg);
	}
	else
	{
		_buf.append(',');
		_buf.append("friendChallengeInfo=");
		friendChallengeInfo.toTraceString(_buf);
	}
	return _buf.c_str();
}

const char *pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::asXmlString(PString& _buf, bool _logTimeStamp) const
{
	UINT64 _timeTicks64 = 0;
	UINT32 _msgTime = 0;
		
	if(_logTimeStamp)
	{
		INT32 _msec;
		UINT32 _sec = LONGSYSTEMTICKS(&_msec);
		_timeTicks64 = (UINT64)_sec * 1000 + _msec;
		_msgTime = (UINT32)plib_time(0);
	}
		
	return asXmlString(_buf, _timeTicks64, _msgTime);
}

const char *pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const
{	
	_buf.cut(0);
	_buf.append("<message>");
	_buf.append("<msgid name='").append(getMsgIdString()).append("'>").appendUint(MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY).append("</msgid>");
	if(_timestampTicks)
		_buf.append("<ticks>").appendUint64(_timestampTicks).append("</ticks>");
	if(_msgTime)	
		_buf.append("<mtime>").appendUint(_msgTime).append("</mtime>");
	_buf.append("<struct>");
	Atf::XmlElement::encodeAsXmlElement("errCode", errCode, _buf);
	if (errCode != 0)
	{
		Atf::XmlElement::encodeAsXmlElement("errMsg", errMsg, _buf);
	}
	else
	{
		friendChallengeInfo.toXmlString("friendChallengeInfo", _buf);
	}
	_buf.append("</struct>");
	_buf.append("</message>");
	return _buf.c_str();
}

bool pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::loadFromXmlString(const PString& _xmlString)
{
	const char *_xml = _xmlString.c_str();
	PString _str;
   
	if (Atf::XmlElement::getElementValueAsString("/message/struct", _xml, _str))
	{
		_xml = _str.c_str();

		PString _element;
		PBlock _value;
		PString _type;     
		
        while (Atf::XmlElement::decodeNextXmlElement(_xml, _element, _value, _type))
        {
			if (_element.equals("errCode"))
			{
				errCode = (INT16)p_atoi64((const char *)_value.ptr());
			}
			else if (_element.equals("errMsg"))
			{
				if(!Atf::XmlElement::movePBlockToPString(_value, errMsg)) return false;
			}
			else if (_element.equals("friendChallengeInfo"))
			{
				if(!Atf::AtfTempl< Atf::LAtfVector< FriendChallengeInfo, 4 > >::FromXmlString(_value, friendChallengeInfo)) return false;
			}
			else
			{
				return false;  // unknown instance variable name
			}
		}

		Atf::XmlElement::skipSpaces(_xml);
		return (*_xml == 0);  // reach the end of string, nothing unknown!
	}
	else 
	{
		CommMsgBody _body;
		if (Atf::XmlElement::getLeafElementAsMsgBody("/message/body", _xml, _body))
		{
			parseMessage(_body);
			return true;
		}
		else
		{
			return false;
		}
	}
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::composeMsg(CommMsgBody& _msg, bool _ignoreJSON) const
{
	_msg.composeINT16(errCode);
	if (errCode != 0)
	{
		_msg.composeString(errMsg);
	}
	else
	{
		friendChallengeInfo.composeMsg(_msg, _ignoreJSON);
	}
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringPN(errMsg, 0, "errMsg");
	}
	else
	{
		friendChallengeInfo.parseMsg(_parser);
	}
}

const char *pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::asJSONString(PString& _buf) const
{
	_buf.cut(0);
	Atf::JSONStringComposer _jsonstr(_buf);
	_jsonstr.compose("errCode", errCode);
	if (errCode != 0)
	{
		_jsonstr.compose("errMsg", errMsg);
	}
	else
	{
		_jsonstr.compose("friendChallengeInfo", friendChallengeInfo);
	}
	return _buf.c_str();
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::loadFromJSONString(const PString& _jsonString)
{
	Atf::JSONStringParser _jparser(_jsonString);
	_jparser.parseByNameThrow("errCode", errCode);
	if (errCode != 0)
	{
		_jparser.parseByNameThrow("errMsg", errMsg);
	}
	else
	{
		_jparser.parseByNameThrow("friendChallengeInfo", friendChallengeInfo);
	}
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::validateJSONString(const PString& _jsonString)
{
	Atf::JSONStringValidator _jparser(_jsonString);
	_jparser.validateByNameThrow("errCode", errCode);
	if (errCode != 0)
	{
		_jparser.validateByNameThrow("errMsg", errMsg);
	}
	else
	{
		_jparser.validateByNameThrow("friendChallengeInfo", friendChallengeInfo);
	}
}

void pduelServer::friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY::validateMsg(CommMsgParser& _parser)
{
	const char *_dummy;
	INT16 errCode; _parser.parseINT16(errCode);
	if (errCode != 0)
	{
		_parser.parseStringN(_dummy, 0, "errMsg");  /*errMsg*/
	}
	else
	{
		Atf::LAtfVector< FriendChallengeInfo, 4 >::validateMsg(_parser);  /*friendChallengeInfo*/
	}
}

//=================================================================
//                ProtocolFactory
//=================================================================

Atf::MessageProtocol* pduelServer::ProtocolFactory::createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId)
{
	Atf::MessageProtocol *_obj = NULL;
	
	if (!strcmp(_nameSpace, 
#ifdef friendServer_STRING
		friendServer_STRING
#else
		"friendServer"
#endif
		))
	{
		switch(_msgId)
		{
			case MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES: _obj = new friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES(); break;
			case MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY: _obj = new friendServer::Protocol_MSG_DUEL_FRIEND_GET_PENDING_CHALLENGES_REPLY(); break;
		}
	}
	
	return _obj;
}

