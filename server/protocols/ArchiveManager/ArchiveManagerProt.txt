
#include "ArchiveManager.h"
#include "UserDefStructs.h"
// #include "atfgenerated/Common_atf.h"

#define TOP_LEVEL_NAMESPACE ArchiveManager

// -------------------------------------------------------------------------------------------

Message ARCHMAN_Q_UNARCHIVE_USER
{
	PString userId;
	bool unarchiveIsTemporary;
	INT32 reason;		//	enum eUnarchiveReason
};
Message ARCHMAN_A_UNARCHIVE_USER
{
	INT16 errCode;
	if (errCode != 0)
	{
		PString errString;
	}
};

Message ARCHMAN_Q_UNARCHIVE_USER_FROM_LOGIN
{
	PString userId;
	bool isRAM;
	PString pwdHash notrace;
};
Message ARCHMAN_A_UNARCHIVE_USER_FROM_LOGIN
{
	INT16 errCode;
	if (errCode != 0)
	{
		PString errString;
	}
};

Message ARCHMAN_Q_ARCHIVE_USER
{
	PString userId;
};
Message ARCHMAN_A_ARCHIVE_USER
{
	INT16 errCode;
	if (errCode != 0)
	{
		PString errString;
	}
};

Message ARCHMAN_Q_SET_ARCH_USER_FLAGS_PRIVS_MASK
{
	PString adminId;
	UINT32 adminUserIntId;
	PString userId;
	UINT64 mask;
	bool setNotRemove;
	INT32 updateType;		//	enum eUpdateType
	INT32 updateField;		//	enum eFieldType. Must be one of: fieldFlags,fieldFlags2,fieldFlags3,
							//					 fieldPrivileges,fieldPrivileges2,fieldPrivileges3
};
Message ARCHMAN_A_SET_ARCH_USER_FLAGS_PRIVS_MASK
{
	INT16 errCode;
	if (errCode != 0)
	{
		PString errString;
	}
};

Message ARCHMAN_Q_CLOSE_ARCH_ACCOUNT		//	Automation, Collusion -> LoginDbm
{
	PString adminId;
	UINT32 adminUserIntId;
	PString userId;
	PString comment;
	bool keepPrivileges;
	INT32 negativeCategory;
};
Message ARCHMAN_A_CLOSE_ARCH_ACCOUNT
{
	INT16 errCode;
	if(errCode != 0)
	{
		PString errString;
	}
};

Message ARCHMAN_Q_SET_ARCH_USER_COMM_PREFS		// regulator -> loginDbm
{
	PString userId;
	bool pokerCommPrefs;
	bool casinoCommPrefs;
	bool sportsCommPrefs;
};
Message ARCHMAN_A_SET_ARCH_USER_COMM_PREFS
{
	INT16 errCode;
	if(errCode != 0)
	{
		PString errString;
	}
};


Message ARCHMAN_Q_GET_ARCH_USERS_BY_EMAIL
{
	PString email;
};


Message ARCHMAN_Q_ARCH_CHECK_USER_UPDATE		// regulator -> archivemanager
{
	PString userId;
	UINT32 licenseId;
	PString email;
	bool sharedliquidityDuplicateEmailCheck;
};

Message ARCHMAN_A_ARCH_CHECK_USER_UPDATE
{
	INT16 errCode;
	if(errCode != 0)
	{
		PString errString;
	}
};


Message ARCHMAN_Q_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX		// cashier -> archivemanager
{
	PString userId;
	UINT16 indiaCurrentTaxYear;
};

Message ARCHMAN_A_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX
{
	INT16 errCode;
	if(errCode != 0)
	{
		PString errString;
	}
};

Message ARCHMAN_Q_GET_ARCH_USER_WITH_PROPS
{
	PString userId;
	bool includeProps;
};

