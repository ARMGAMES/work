/**
 * ArchiveManagerProt_thin.h
 *
 * This file was auto-generated from ArchiveManagerProt.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin ArchiveManagerProt.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_ARCHIVEMANAGERPROT_THIN_H
#define ATF_PROTOCOL_DEFFILE_ARCHIVEMANAGERPROT_THIN_H


#include "ArchiveManager.h"
#include "ThinAtfUserDefStructs.h"


namespace ArchiveManager
{
	class ProtocolFactory
	{
	public:
		static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	};


	// #include "atfgenerated/Common_atf.h"

	// -------------------------------------------------------------------------------------------

	struct Protocol_ARCHMAN_Q_UNARCHIVE_USER
	{
		// sb4 - userId,unarchiveIsTemporary,reason
		PString userId;
		bool unarchiveIsTemporary;
		INT32 reason;	//	enum eUnarchiveReason

		Protocol_ARCHMAN_Q_UNARCHIVE_USER();
		void clear();
		bool equals(const Protocol_ARCHMAN_Q_UNARCHIVE_USER&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_Q_UNARCHIVE_USER; }
		static const char *getMsgIdString() { return "ARCHMAN_Q_UNARCHIVE_USER"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};
	struct Protocol_ARCHMAN_A_UNARCHIVE_USER
	{
		// 2[s] - errCode[errString]
		INT16 errCode;

		PString errString;

		Protocol_ARCHMAN_A_UNARCHIVE_USER();
		void clear();
		bool equals(const Protocol_ARCHMAN_A_UNARCHIVE_USER&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_A_UNARCHIVE_USER; }
		static const char *getMsgIdString() { return "ARCHMAN_A_UNARCHIVE_USER"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_ARCHMAN_Q_UNARCHIVE_USER_FROM_LOGIN
	{
		// sbs - userId,isRAM,pwdHash
		PString userId;
		bool isRAM;
		PString pwdHash;

		Protocol_ARCHMAN_Q_UNARCHIVE_USER_FROM_LOGIN();
		void clear();
		bool equals(const Protocol_ARCHMAN_Q_UNARCHIVE_USER_FROM_LOGIN&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_Q_UNARCHIVE_USER_FROM_LOGIN; }
		static const char *getMsgIdString() { return "ARCHMAN_Q_UNARCHIVE_USER_FROM_LOGIN"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};
	struct Protocol_ARCHMAN_A_UNARCHIVE_USER_FROM_LOGIN
	{
		// 2[s] - errCode[errString]
		INT16 errCode;

		PString errString;

		Protocol_ARCHMAN_A_UNARCHIVE_USER_FROM_LOGIN();
		void clear();
		bool equals(const Protocol_ARCHMAN_A_UNARCHIVE_USER_FROM_LOGIN&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_A_UNARCHIVE_USER_FROM_LOGIN; }
		static const char *getMsgIdString() { return "ARCHMAN_A_UNARCHIVE_USER_FROM_LOGIN"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_ARCHMAN_Q_ARCHIVE_USER
	{
		// s - userId
		PString userId;

		Protocol_ARCHMAN_Q_ARCHIVE_USER();
		void clear();
		bool equals(const Protocol_ARCHMAN_Q_ARCHIVE_USER&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_Q_ARCHIVE_USER; }
		static const char *getMsgIdString() { return "ARCHMAN_Q_ARCHIVE_USER"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};
	struct Protocol_ARCHMAN_A_ARCHIVE_USER
	{
		// 2[s] - errCode[errString]
		INT16 errCode;

		PString errString;

		Protocol_ARCHMAN_A_ARCHIVE_USER();
		void clear();
		bool equals(const Protocol_ARCHMAN_A_ARCHIVE_USER&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_A_ARCHIVE_USER; }
		static const char *getMsgIdString() { return "ARCHMAN_A_ARCHIVE_USER"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_ARCHMAN_Q_SET_ARCH_USER_FLAGS_PRIVS_MASK
	{
		// s4s8b44 - adminId,adminUserIntId,userId,mask,setNotRemove,updateType,updateField
		PString adminId;
		UINT32 adminUserIntId;
		PString userId;
		UINT64 mask;
		bool setNotRemove;
		INT32 updateType;	//	enum eUpdateType
		INT32 updateField;	//	enum eFieldType. Must be one of: fieldFlags,fieldFlags2,fieldFlags3,
		//					 fieldPrivileges,fieldPrivileges2,fieldPrivileges3

		Protocol_ARCHMAN_Q_SET_ARCH_USER_FLAGS_PRIVS_MASK();
		void clear();
		bool equals(const Protocol_ARCHMAN_Q_SET_ARCH_USER_FLAGS_PRIVS_MASK&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_Q_SET_ARCH_USER_FLAGS_PRIVS_MASK; }
		static const char *getMsgIdString() { return "ARCHMAN_Q_SET_ARCH_USER_FLAGS_PRIVS_MASK"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};
	struct Protocol_ARCHMAN_A_SET_ARCH_USER_FLAGS_PRIVS_MASK
	{
		// 2[s] - errCode[errString]
		INT16 errCode;

		PString errString;

		Protocol_ARCHMAN_A_SET_ARCH_USER_FLAGS_PRIVS_MASK();
		void clear();
		bool equals(const Protocol_ARCHMAN_A_SET_ARCH_USER_FLAGS_PRIVS_MASK&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_A_SET_ARCH_USER_FLAGS_PRIVS_MASK; }
		static const char *getMsgIdString() { return "ARCHMAN_A_SET_ARCH_USER_FLAGS_PRIVS_MASK"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_ARCHMAN_Q_CLOSE_ARCH_ACCOUNT	//	Automation, Collusion -> LoginDbm
	{
		// s4ssb4 - adminId,adminUserIntId,userId,comment,keepPrivileges,negativeCategory
		PString adminId;
		UINT32 adminUserIntId;
		PString userId;
		PString comment;
		bool keepPrivileges;
		INT32 negativeCategory;

		Protocol_ARCHMAN_Q_CLOSE_ARCH_ACCOUNT();
		void clear();
		bool equals(const Protocol_ARCHMAN_Q_CLOSE_ARCH_ACCOUNT&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_Q_CLOSE_ARCH_ACCOUNT; }
		static const char *getMsgIdString() { return "ARCHMAN_Q_CLOSE_ARCH_ACCOUNT"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};
	struct Protocol_ARCHMAN_A_CLOSE_ARCH_ACCOUNT
	{
		// 2[s] - errCode[errString]
		INT16 errCode;

		PString errString;

		Protocol_ARCHMAN_A_CLOSE_ARCH_ACCOUNT();
		void clear();
		bool equals(const Protocol_ARCHMAN_A_CLOSE_ARCH_ACCOUNT&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_A_CLOSE_ARCH_ACCOUNT; }
		static const char *getMsgIdString() { return "ARCHMAN_A_CLOSE_ARCH_ACCOUNT"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_ARCHMAN_Q_SET_ARCH_USER_COMM_PREFS	// regulator -> loginDbm
	{
		// sbbb - userId,pokerCommPrefs,casinoCommPrefs,sportsCommPrefs
		PString userId;
		bool pokerCommPrefs;
		bool casinoCommPrefs;
		bool sportsCommPrefs;

		Protocol_ARCHMAN_Q_SET_ARCH_USER_COMM_PREFS();
		void clear();
		bool equals(const Protocol_ARCHMAN_Q_SET_ARCH_USER_COMM_PREFS&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_Q_SET_ARCH_USER_COMM_PREFS; }
		static const char *getMsgIdString() { return "ARCHMAN_Q_SET_ARCH_USER_COMM_PREFS"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};
	struct Protocol_ARCHMAN_A_SET_ARCH_USER_COMM_PREFS
	{
		// 2[s] - errCode[errString]
		INT16 errCode;

		PString errString;

		Protocol_ARCHMAN_A_SET_ARCH_USER_COMM_PREFS();
		void clear();
		bool equals(const Protocol_ARCHMAN_A_SET_ARCH_USER_COMM_PREFS&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_A_SET_ARCH_USER_COMM_PREFS; }
		static const char *getMsgIdString() { return "ARCHMAN_A_SET_ARCH_USER_COMM_PREFS"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_ARCHMAN_Q_GET_ARCH_USERS_BY_EMAIL
	{
		// s - email
		PString email;

		Protocol_ARCHMAN_Q_GET_ARCH_USERS_BY_EMAIL();
		void clear();
		bool equals(const Protocol_ARCHMAN_Q_GET_ARCH_USERS_BY_EMAIL&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_Q_GET_ARCH_USERS_BY_EMAIL; }
		static const char *getMsgIdString() { return "ARCHMAN_Q_GET_ARCH_USERS_BY_EMAIL"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_ARCHMAN_Q_ARCH_CHECK_USER_UPDATE	// regulator -> archivemanager
	{
		// s4sb - userId,licenseId,email,sharedliquidityDuplicateEmailCheck
		PString userId;
		UINT32 licenseId;
		PString email;
		bool sharedliquidityDuplicateEmailCheck;

		Protocol_ARCHMAN_Q_ARCH_CHECK_USER_UPDATE();
		void clear();
		bool equals(const Protocol_ARCHMAN_Q_ARCH_CHECK_USER_UPDATE&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_Q_ARCH_CHECK_USER_UPDATE; }
		static const char *getMsgIdString() { return "ARCHMAN_Q_ARCH_CHECK_USER_UPDATE"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_ARCHMAN_A_ARCH_CHECK_USER_UPDATE
	{
		// 2[s] - errCode[errString]
		INT16 errCode;

		PString errString;

		Protocol_ARCHMAN_A_ARCH_CHECK_USER_UPDATE();
		void clear();
		bool equals(const Protocol_ARCHMAN_A_ARCH_CHECK_USER_UPDATE&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_A_ARCH_CHECK_USER_UPDATE; }
		static const char *getMsgIdString() { return "ARCHMAN_A_ARCH_CHECK_USER_UPDATE"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_ARCHMAN_Q_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX	// cashier -> archivemanager
	{
		// s2 - userId,indiaCurrentTaxYear
		PString userId;
		UINT16 indiaCurrentTaxYear;

		Protocol_ARCHMAN_Q_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX();
		void clear();
		bool equals(const Protocol_ARCHMAN_Q_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_Q_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX; }
		static const char *getMsgIdString() { return "ARCHMAN_Q_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_ARCHMAN_A_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX
	{
		// 2[s] - errCode[errString]
		INT16 errCode;

		PString errString;

		Protocol_ARCHMAN_A_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX();
		void clear();
		bool equals(const Protocol_ARCHMAN_A_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_A_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX; }
		static const char *getMsgIdString() { return "ARCHMAN_A_PAY_INDIA_ARCH_USER_ZERO_ANNUAL_TAX"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};

	struct Protocol_ARCHMAN_Q_GET_ARCH_USER_WITH_PROPS
	{
		// sb - userId,includeProps
		PString userId;
		bool includeProps;

		Protocol_ARCHMAN_Q_GET_ARCH_USER_WITH_PROPS();
		void clear();
		bool equals(const Protocol_ARCHMAN_Q_GET_ARCH_USER_WITH_PROPS&) const;
		const char *asTraceString(PString& _buf) const;
		void parseMsg(CommMsgParser& _parser);
		void composeMsg(CommMsgBody& _body) const;

		static UINT32 getMsgId() { return ARCHMAN_Q_GET_ARCH_USER_WITH_PROPS; }
		static const char *getMsgIdString() { return "ARCHMAN_Q_GET_ARCH_USER_WITH_PROPS"; }
		static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	};
};

#endif
