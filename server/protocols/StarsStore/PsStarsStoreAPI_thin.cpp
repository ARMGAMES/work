/**
 * protocols\StarsStore\PsStarsStoreAPI_thin.cpp
 *
 * This file was auto-generated from protocols\StarsStore\PsStarsStoreAPI.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin -genMoveConstructor -dontGenValidationFuncs protocols\StarsStore\PsStarsStoreAPI.txt
 */
 
#include "PsStarsStoreAPI_thin.h"

//=================================================================
//                    Warning
//=================================================================

PsStarsStore::Warning::Warning()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

PsStarsStore::Warning::Warning(Warning&& _o)
	: code(std::move(_o.code))
	, description(std::move(_o.description))
{
}

PsStarsStore::Warning& PsStarsStore::Warning::operator=(Warning&& _o)
{
	if(this != &_o)
	{
		code = std::move(_o.code);
		description = std::move(_o.description);
	}
	return *this;
}

#endif

void PsStarsStore::Warning::clear()
{
	code = 0;
	description.clear();
}

bool PsStarsStore::Warning::equals(const Warning& _o) const
{
	return code == _o.code &&
		description.equals(_o.description);
}

const char *PsStarsStore::Warning::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("code=");
	_buf.appendInt(code);
	_buf.append(',');
	_buf.append("description=");
	_buf.append(description);
	_buf.append('}');
	return _buf.c_str();
}

void PsStarsStore::Warning::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(Warning())) // not empty
	{
		_body.composeINT16(code);
		_body.composeString(description);
	}

	_msg.composeMsgBody(_body);
}

void PsStarsStore::Warning::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT16(code);
	_parser0.parseStringP(description);
}

//=================================================================
//                    OrderItem
//=================================================================

PsStarsStore::OrderItem::OrderItem()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

PsStarsStore::OrderItem::OrderItem(OrderItem&& _o)
	: orderItemID(std::move(_o.orderItemID))
	, itemQuantity(std::move(_o.itemQuantity))
	, itemPrice(std::move(_o.itemPrice))
	, itemDescription(std::move(_o.itemDescription))
{
}

PsStarsStore::OrderItem& PsStarsStore::OrderItem::operator=(OrderItem&& _o)
{
	if(this != &_o)
	{
		orderItemID = std::move(_o.orderItemID);
		itemQuantity = std::move(_o.itemQuantity);
		itemPrice = std::move(_o.itemPrice);
		itemDescription = std::move(_o.itemDescription);
	}
	return *this;
}

#endif

void PsStarsStore::OrderItem::clear()
{
	orderItemID = 0;
	itemQuantity = 0;
	itemPrice = 0;
	itemDescription.clear();
}

bool PsStarsStore::OrderItem::equals(const OrderItem& _o) const
{
	return orderItemID == _o.orderItemID &&
		itemQuantity == _o.itemQuantity &&
		itemPrice == _o.itemPrice &&
		itemDescription.equals(_o.itemDescription);
}

const char *PsStarsStore::OrderItem::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("orderItemID=");
	_buf.appendUint64(orderItemID);
	_buf.append(',');
	_buf.append("itemQuantity=");
	_buf.appendUint(itemQuantity);
	_buf.append(',');
	_buf.append("itemPrice=");
	_buf.appendInt(itemPrice);
	_buf.append(',');
	_buf.append("itemDescription=");
	_buf.append(itemDescription);
	_buf.append('}');
	return _buf.c_str();
}

void PsStarsStore::OrderItem::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(OrderItem())) // not empty
	{
		_body.composeUINT64(orderItemID);
		_body.composeUINT16(itemQuantity);
		_body.composeINT32(itemPrice);
		_body.composeString(itemDescription);
	}

	_msg.composeMsgBody(_body);
}

void PsStarsStore::OrderItem::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT64(orderItemID);
	_parser0.parseUINT16(itemQuantity);
	_parser0.parseINT32(itemPrice);
	_parser0.parseStringP(itemDescription);
}

//=================================================================
//                Protocol_MSG_SST_Q_GetUserInfo
//=================================================================

PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_GetUserInfo::Protocol_MSG_SST_Q_GetUserInfo()
{
	clear();
}

void PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_GetUserInfo::clear()
{
}

bool PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_GetUserInfo::equals(const Protocol_MSG_SST_Q_GetUserInfo& _o) const
{
	return true;
}

const char *PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_GetUserInfo::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SST_Q_GetUserInfo).append(")");
	return _buf.c_str();
}

void PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_GetUserInfo::composeMsg(CommMsgBody& _msg) const
{
}

void PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_GetUserInfo::parseMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_MSG_SST_A_GetUserInfo
//=================================================================

PsStarsStore::AuthAPI::Protocol_MSG_SST_A_GetUserInfo::Protocol_MSG_SST_A_GetUserInfo()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

PsStarsStore::AuthAPI::Protocol_MSG_SST_A_GetUserInfo::Protocol_MSG_SST_A_GetUserInfo(Protocol_MSG_SST_A_GetUserInfo&& _o)
	: userId(std::move(_o.userId))
	, country(std::move(_o.country))
	, starsCoinsBalance(std::move(_o.starsCoinsBalance))
	, siteID(std::move(_o.siteID))
	, language(std::move(_o.language))
	, playerCurrency(std::move(_o.playerCurrency))
	, warnings(std::move(_o.warnings))
{
}

PsStarsStore::AuthAPI::Protocol_MSG_SST_A_GetUserInfo& PsStarsStore::AuthAPI::Protocol_MSG_SST_A_GetUserInfo::operator=(Protocol_MSG_SST_A_GetUserInfo&& _o)
{
	if(this != &_o)
	{
		userId = std::move(_o.userId);
		country = std::move(_o.country);
		starsCoinsBalance = std::move(_o.starsCoinsBalance);
		siteID = std::move(_o.siteID);
		language = std::move(_o.language);
		playerCurrency = std::move(_o.playerCurrency);
		warnings = std::move(_o.warnings);
	}
	return *this;
}

#endif

void PsStarsStore::AuthAPI::Protocol_MSG_SST_A_GetUserInfo::clear()
{
	userId.clear();
	country.clear();
	starsCoinsBalance = 0;
	siteID.clear();
	language.clear();
	playerCurrency.clear();
	warnings.clear();
}

bool PsStarsStore::AuthAPI::Protocol_MSG_SST_A_GetUserInfo::equals(const Protocol_MSG_SST_A_GetUserInfo& _o) const
{
	return userId.equals(_o.userId) &&
		country.equals(_o.country) &&
		starsCoinsBalance == _o.starsCoinsBalance &&
		siteID.equals(_o.siteID) &&
		language.equals(_o.language) &&
		playerCurrency.equals(_o.playerCurrency) &&
		warnings.equals(_o.warnings);
}

const char *PsStarsStore::AuthAPI::Protocol_MSG_SST_A_GetUserInfo::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SST_A_GetUserInfo).append(")");
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("country=");
	_buf.append(country);
	_buf.append(',');
	_buf.append("starsCoinsBalance=");
	_buf.appendInt64(starsCoinsBalance);
	_buf.append(',');
	_buf.append("siteID=");
	_buf.append(siteID);
	_buf.append(',');
	_buf.append("language=");
	_buf.append(language);
	_buf.append(',');
	_buf.append("playerCurrency=");
	_buf.append(playerCurrency);
	_buf.append(',');
	_buf.append("warnings=");
	warnings.toTraceString(_buf);
	return _buf.c_str();
}

void PsStarsStore::AuthAPI::Protocol_MSG_SST_A_GetUserInfo::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(userId);
	_msg.composeString(country);
	_msg.composeINT64(starsCoinsBalance);
	_msg.composeString(siteID);
	_msg.composeString(language);
	_msg.composeString(playerCurrency);
	warnings.composeMsg(_msg);
}

void PsStarsStore::AuthAPI::Protocol_MSG_SST_A_GetUserInfo::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(userId);
	_parser.parseStringP(country);
	_parser.parseINT64(starsCoinsBalance);
	_parser.parseStringP(siteID);
	_parser.parseStringP(language);
	_parser.parseStringP(playerCurrency);
	warnings.parseMsg(_parser);
}

//=================================================================
//                Protocol_MSG_SST_Q_DebitStarsCoin
//=================================================================

PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_DebitStarsCoin::Protocol_MSG_SST_Q_DebitStarsCoin()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_DebitStarsCoin::Protocol_MSG_SST_Q_DebitStarsCoin(Protocol_MSG_SST_Q_DebitStarsCoin&& _o)
	: externalTransactionID(std::move(_o.externalTransactionID))
	, vendorID(std::move(_o.vendorID))
	, cartID(std::move(_o.cartID))
	, starsCoins(std::move(_o.starsCoins))
	, totalPrice(std::move(_o.totalPrice))
	, currency(std::move(_o.currency))
	, totalOrderItems(std::move(_o.totalOrderItems))
	, orderItems(std::move(_o.orderItems))
{
}

PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_DebitStarsCoin& PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_DebitStarsCoin::operator=(Protocol_MSG_SST_Q_DebitStarsCoin&& _o)
{
	if(this != &_o)
	{
		externalTransactionID = std::move(_o.externalTransactionID);
		vendorID = std::move(_o.vendorID);
		cartID = std::move(_o.cartID);
		starsCoins = std::move(_o.starsCoins);
		totalPrice = std::move(_o.totalPrice);
		currency = std::move(_o.currency);
		totalOrderItems = std::move(_o.totalOrderItems);
		orderItems = std::move(_o.orderItems);
	}
	return *this;
}

#endif

void PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_DebitStarsCoin::clear()
{
	externalTransactionID = 0;
	vendorID = 0;
	cartID = 0;
	starsCoins = 0;
	totalPrice = 0;
	currency.clear();
	totalOrderItems = 0;
	orderItems.clear();
}

bool PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_DebitStarsCoin::equals(const Protocol_MSG_SST_Q_DebitStarsCoin& _o) const
{
	return externalTransactionID == _o.externalTransactionID &&
		vendorID == _o.vendorID &&
		cartID == _o.cartID &&
		starsCoins == _o.starsCoins &&
		totalPrice == _o.totalPrice &&
		currency.equals(_o.currency) &&
		totalOrderItems == _o.totalOrderItems &&
		orderItems.equals(_o.orderItems);
}

const char *PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_DebitStarsCoin::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SST_Q_DebitStarsCoin).append(")");
	_buf.append(',');
	_buf.append("externalTransactionID=");
	_buf.appendUint64(externalTransactionID);
	_buf.append(',');
	_buf.append("vendorID=");
	_buf.appendUint64(vendorID);
	_buf.append(',');
	_buf.append("cartID=");
	_buf.appendUint64(cartID);
	_buf.append(',');
	_buf.append("starsCoins=");
	_buf.appendInt64(starsCoins);
	_buf.append(',');
	_buf.append("totalPrice=");
	_buf.appendInt(totalPrice);
	_buf.append(',');
	_buf.append("currency=");
	_buf.append(currency);
	_buf.append(',');
	_buf.append("totalOrderItems=");
	_buf.appendUint(totalOrderItems);
	_buf.append(',');
	_buf.append("orderItems=");
	orderItems.toTraceString(_buf);
	return _buf.c_str();
}

void PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_DebitStarsCoin::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(externalTransactionID);
	_msg.composeUINT64(vendorID);
	_msg.composeUINT64(cartID);
	_msg.composeINT64(starsCoins);
	_msg.composeINT32(totalPrice);
	_msg.composeString(currency);
	_msg.composeUINT32(totalOrderItems);
	orderItems.composeMsg(_msg);
}

void PsStarsStore::AuthAPI::Protocol_MSG_SST_Q_DebitStarsCoin::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(externalTransactionID);
	_parser.parseUINT64(vendorID);
	_parser.parseUINT64(cartID);
	_parser.parseINT64(starsCoins);
	_parser.parseINT32(totalPrice);
	_parser.parseStringP(currency);
	_parser.parseUINT32(totalOrderItems);
	orderItems.parseMsg(_parser);
}

//=================================================================
//                Protocol_MSG_SST_A_DebitStarsCoin
//=================================================================

PsStarsStore::AuthAPI::Protocol_MSG_SST_A_DebitStarsCoin::Protocol_MSG_SST_A_DebitStarsCoin()
{
	clear();
}

void PsStarsStore::AuthAPI::Protocol_MSG_SST_A_DebitStarsCoin::clear()
{
	starsCoinsBalance = 0;
}

bool PsStarsStore::AuthAPI::Protocol_MSG_SST_A_DebitStarsCoin::equals(const Protocol_MSG_SST_A_DebitStarsCoin& _o) const
{
	return starsCoinsBalance == _o.starsCoinsBalance;
}

const char *PsStarsStore::AuthAPI::Protocol_MSG_SST_A_DebitStarsCoin::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_SST_A_DebitStarsCoin).append(")");
	_buf.append(',');
	_buf.append("starsCoinsBalance=");
	_buf.appendInt64(starsCoinsBalance);
	return _buf.c_str();
}

void PsStarsStore::AuthAPI::Protocol_MSG_SST_A_DebitStarsCoin::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT64(starsCoinsBalance);
}

void PsStarsStore::AuthAPI::Protocol_MSG_SST_A_DebitStarsCoin::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT64(starsCoinsBalance);
}

