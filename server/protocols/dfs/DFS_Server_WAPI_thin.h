/**
 * protocols\dfs\DFS_Server_WAPI_thin.h
 *
 * This file was auto-generated from protocols\dfs\DFS_Server_WAPI.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin -genMoveConstructor -dontGenValidationFuncs protocols\dfs\DFS_Server_WAPI.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_PROTOCOLS_DFS_DFS_SERVER_WAPI_THIN_H
#define ATF_PROTOCOL_DEFFILE_PROTOCOLS_DFS_DFS_SERVER_WAPI_THIN_H

#include "DFS_Server_WAPI_Msgs.h"


#include "ThinAtfUserDefStructs.h"

namespace DFS
{
	struct TranWAPI
	{
		// 8 - val
		UINT64 val;

		TranWAPI();
		void clear();
		bool equals(const TranWAPI&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
	};

	struct ContestId
	{
		// 8 - val
		UINT64 val;

		ContestId();
		void clear();
		bool equals(const ContestId&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
	};

	struct WebId
	{
		// s - val
		PString val;

		WebId();
		void clear();
		bool equals(const WebId&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		WebId(WebId&&);
		WebId& operator=(WebId&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		WebId(const WebId&) = default;
		WebId& operator=(const WebId&) = default;
#endif
#endif
	};

	struct Currency
	{
		// s - val
		PString val;	// USD, EUR, CAD, GBP

		Currency();
		void clear();
		bool equals(const Currency&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Currency(Currency&&);
		Currency& operator=(Currency&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		Currency(const Currency&) = default;
		Currency& operator=(const Currency&) = default;
#endif
#endif
	};

	struct CashAmount
	{
		// 4 - val
		INT32 val;	//in cents

		CashAmount();
		void clear();
		bool equals(const CashAmount&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);
	};

	struct Balance
	{
		// M(s4) - M(val,val)
		Currency currency;
		CashAmount amount;

		Balance();
		void clear();
		bool equals(const Balance&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Balance(Balance&&);
		Balance& operator=(Balance&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		Balance(const Balance&) = default;
		Balance& operator=(const Balance&) = default;
#endif
#endif
	};

	struct Warning
	{
		// M(2s) - M(code,description)
		INT16 code;
		PString description;

		Warning();
		void clear();
		bool equals(const Warning&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		Warning(Warning&&);
		Warning& operator=(Warning&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		Warning(const Warning&) = default;
		Warning& operator=(const Warning&) = default;
#endif
#endif
	};

	struct StakeLimit
	{
		// M(s4) - M(val,val)
		Currency currency;
		CashAmount amount;

		StakeLimit();
		void clear();
		bool equals(const StakeLimit&) const;
		const char *toTraceString(PString& _str) const;
		void composeMsg(CommMsgBody& _msg) const;
		void parseMsg(CommMsgParser& _parser);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
		StakeLimit(StakeLimit&&);
		StakeLimit& operator=(StakeLimit&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
		StakeLimit(const StakeLimit&) = default;
		StakeLimit& operator=(const StakeLimit&) = default;
#endif
#endif
	};

	namespace SD_AuthWAPI	// same as the connection type
	{

		struct Protocol_SDWA_Q_SECURE_FUNDS	// from middle-tier to server object, authenticated (WebTokenGuard), aka "placeBet"
		{
			// 88s4 - val,val,val,val
			TranWAPI transactionId;
			ContestId contestId;
			Currency currency;
			CashAmount amount;

			Protocol_SDWA_Q_SECURE_FUNDS();
			void clear();
			bool equals(const Protocol_SDWA_Q_SECURE_FUNDS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_Q_SECURE_FUNDS; }
			static const char *getMsgIdString() { return "SDWA_Q_SECURE_FUNDS"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_SDWA_Q_SECURE_FUNDS(Protocol_SDWA_Q_SECURE_FUNDS&&);
			Protocol_SDWA_Q_SECURE_FUNDS& operator=(Protocol_SDWA_Q_SECURE_FUNDS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_SDWA_Q_SECURE_FUNDS(const Protocol_SDWA_Q_SECURE_FUNDS&) = default;
			Protocol_SDWA_Q_SECURE_FUNDS& operator=(const Protocol_SDWA_Q_SECURE_FUNDS&) = default;
#endif
#endif
		};

		struct Protocol_SDWA_A_SECURE_FUNDS	// from server object back to middle-tier, aka "placeBet"
		{
			// 4 - val
			CashAmount balanceAfter;	// using currency of the request

			Protocol_SDWA_A_SECURE_FUNDS();
			void clear();
			bool equals(const Protocol_SDWA_A_SECURE_FUNDS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_A_SECURE_FUNDS; }
			static const char *getMsgIdString() { return "SDWA_A_SECURE_FUNDS"; }
		};

		struct Protocol_SDWA_Q_USER_INFO	// from middle-tier to server object, authenticated (WebTokenGuard)
		{
			//intentionally left blank

			Protocol_SDWA_Q_USER_INFO();
			void clear();
			bool equals(const Protocol_SDWA_Q_USER_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_Q_USER_INFO; }
			static const char *getMsgIdString() { return "SDWA_Q_USER_INFO"; }
		};

		struct Protocol_SDWA_A_USER_INFO	// from server object back to middle-tier
		{
			// ss4<M(s4)>sss4<M(2s)>4<M(s4)>ssssss112sssss - val,val,numBalances<M(val,val)>,timezone,site,language,numWarnings<M(code,description)>,numStakeLimits<M(val,val)>,countryAddress,countryGeoIP,userId,eMail,firstName,lastName,birthDay,birthMonth,birthYear,address1,address2,city,zipCode,state
			WebId webId;
			Currency defaultCurrency;
			ThinAtf::LAtfVector< Balance, 4 > balances;
			PString timezone;
			PString site;
			PString language;
			ThinAtf::LAtfVector< Warning, 4 > warnings;
			ThinAtf::LAtfVector< StakeLimit, 4 > stakeLimits;

			PString countryAddress;	// PYR-49173
			PString countryGeoIP;

			PString userId;	// PYR-49432
			PString eMail;
			PString firstName;
			PString lastName;
			BYTE birthDay;
			BYTE birthMonth;
			UINT16 birthYear;
			PString address1;
			PString address2;
			PString city;
			PString zipCode;
			PString state;

			Protocol_SDWA_A_USER_INFO();
			void clear();
			bool equals(const Protocol_SDWA_A_USER_INFO&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_A_USER_INFO; }
			static const char *getMsgIdString() { return "SDWA_A_USER_INFO"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_SDWA_A_USER_INFO(Protocol_SDWA_A_USER_INFO&&);
			Protocol_SDWA_A_USER_INFO& operator=(Protocol_SDWA_A_USER_INFO&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_SDWA_A_USER_INFO(const Protocol_SDWA_A_USER_INFO&) = default;
			Protocol_SDWA_A_USER_INFO& operator=(const Protocol_SDWA_A_USER_INFO&) = default;
#endif
#endif
		};
	};

	namespace SD_PlainWAPI	// same as the connection type
	{
		struct Protocol_SDWA_Q_CONTEST_PAYOUT	// from middle-tier to server object, non-authenticated (NullGuard), aka "settle"
		{
			// s88s4 - val,val,val,val,val
			WebId webId;
			TranWAPI transactionId;
			ContestId contestId;
			Currency currency;
			CashAmount amount;

			Protocol_SDWA_Q_CONTEST_PAYOUT();
			void clear();
			bool equals(const Protocol_SDWA_Q_CONTEST_PAYOUT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_Q_CONTEST_PAYOUT; }
			static const char *getMsgIdString() { return "SDWA_Q_CONTEST_PAYOUT"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_SDWA_Q_CONTEST_PAYOUT(Protocol_SDWA_Q_CONTEST_PAYOUT&&);
			Protocol_SDWA_Q_CONTEST_PAYOUT& operator=(Protocol_SDWA_Q_CONTEST_PAYOUT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_SDWA_Q_CONTEST_PAYOUT(const Protocol_SDWA_Q_CONTEST_PAYOUT&) = default;
			Protocol_SDWA_Q_CONTEST_PAYOUT& operator=(const Protocol_SDWA_Q_CONTEST_PAYOUT&) = default;
#endif
#endif
		};

		struct Protocol_SDWA_A_CONTEST_PAYOUT	// from server object back to middle-tier, aka "settle"
		{
			// 4 - val
			CashAmount balanceAfter;	// using currency of the request

			Protocol_SDWA_A_CONTEST_PAYOUT();
			void clear();
			bool equals(const Protocol_SDWA_A_CONTEST_PAYOUT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_A_CONTEST_PAYOUT; }
			static const char *getMsgIdString() { return "SDWA_A_CONTEST_PAYOUT"; }
		};

		struct Protocol_SDWA_Q_VOID_ENTRY	// from middle-tier to server object, non-authenticated (NullGuard), aka "void"
		{
			// s88s4 - val,val,val,val,val
			WebId webId;
			TranWAPI transactionId;
			ContestId contestId;
			Currency currency;
			CashAmount amount;

			Protocol_SDWA_Q_VOID_ENTRY();
			void clear();
			bool equals(const Protocol_SDWA_Q_VOID_ENTRY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_Q_VOID_ENTRY; }
			static const char *getMsgIdString() { return "SDWA_Q_VOID_ENTRY"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_SDWA_Q_VOID_ENTRY(Protocol_SDWA_Q_VOID_ENTRY&&);
			Protocol_SDWA_Q_VOID_ENTRY& operator=(Protocol_SDWA_Q_VOID_ENTRY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_SDWA_Q_VOID_ENTRY(const Protocol_SDWA_Q_VOID_ENTRY&) = default;
			Protocol_SDWA_Q_VOID_ENTRY& operator=(const Protocol_SDWA_Q_VOID_ENTRY&) = default;
#endif
#endif
		};

		struct Protocol_SDWA_A_VOID_ENTRY	// from server object back to middle-tier, aka "void"
		{
			// 4 - val
			CashAmount balanceAfter;	//using currency of the request

			Protocol_SDWA_A_VOID_ENTRY();
			void clear();
			bool equals(const Protocol_SDWA_A_VOID_ENTRY&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_A_VOID_ENTRY; }
			static const char *getMsgIdString() { return "SDWA_A_VOID_ENTRY"; }
		};

		struct Protocol_SDWA_Q_REVERSE_PAYOUT	// from middle-tier to server object, non-authenticated (NullGuard), aka "unsettle"
		{
			// s88s4 - val,val,val,val,val
			WebId webId;
			TranWAPI transactionId;
			ContestId contestId;
			Currency currency;
			CashAmount amount;

			Protocol_SDWA_Q_REVERSE_PAYOUT();
			void clear();
			bool equals(const Protocol_SDWA_Q_REVERSE_PAYOUT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_Q_REVERSE_PAYOUT; }
			static const char *getMsgIdString() { return "SDWA_Q_REVERSE_PAYOUT"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_SDWA_Q_REVERSE_PAYOUT(Protocol_SDWA_Q_REVERSE_PAYOUT&&);
			Protocol_SDWA_Q_REVERSE_PAYOUT& operator=(Protocol_SDWA_Q_REVERSE_PAYOUT&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_SDWA_Q_REVERSE_PAYOUT(const Protocol_SDWA_Q_REVERSE_PAYOUT&) = default;
			Protocol_SDWA_Q_REVERSE_PAYOUT& operator=(const Protocol_SDWA_Q_REVERSE_PAYOUT&) = default;
#endif
#endif
		};

		struct Protocol_SDWA_A_REVERSE_PAYOUT	// from server object back to middle-tier, aka "unsettle"
		{
			// 4 - val
			CashAmount balanceAfter;	//using currency of the request

			Protocol_SDWA_A_REVERSE_PAYOUT();
			void clear();
			bool equals(const Protocol_SDWA_A_REVERSE_PAYOUT&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_A_REVERSE_PAYOUT; }
			static const char *getMsgIdString() { return "SDWA_A_REVERSE_PAYOUT"; }
		};

		struct Protocol_SDWA_Q_REFUND_PARTIAL	// from middle-tier to server object, non-authenticated (NullGuard)
		{
			// s88s4 - val,val,val,val,val
			WebId webId;
			TranWAPI transactionId;
			ContestId contestId;
			Currency currency;
			CashAmount amount;	//in cents

			Protocol_SDWA_Q_REFUND_PARTIAL();
			void clear();
			bool equals(const Protocol_SDWA_Q_REFUND_PARTIAL&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_Q_REFUND_PARTIAL; }
			static const char *getMsgIdString() { return "SDWA_Q_REFUND_PARTIAL"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_SDWA_Q_REFUND_PARTIAL(Protocol_SDWA_Q_REFUND_PARTIAL&&);
			Protocol_SDWA_Q_REFUND_PARTIAL& operator=(Protocol_SDWA_Q_REFUND_PARTIAL&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_SDWA_Q_REFUND_PARTIAL(const Protocol_SDWA_Q_REFUND_PARTIAL&) = default;
			Protocol_SDWA_Q_REFUND_PARTIAL& operator=(const Protocol_SDWA_Q_REFUND_PARTIAL&) = default;
#endif
#endif
		};

		struct Protocol_SDWA_A_REFUND_PARTIAL	// from server object back to middle-tier
		{
			// 4 - val
			CashAmount balanceAfter;	// in cents, in currency of the request

			Protocol_SDWA_A_REFUND_PARTIAL();
			void clear();
			bool equals(const Protocol_SDWA_A_REFUND_PARTIAL&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_A_REFUND_PARTIAL; }
			static const char *getMsgIdString() { return "SDWA_A_REFUND_PARTIAL"; }
		};

		struct Protocol_SDWA_Q_GET_TRANSACTION_STATUS	// from middle-tier to server object, non-authenticated (NullGuard)
		{
			// 8 - val
			TranWAPI transactionId;	// Victiv can only ask about the status of a specific transaction

			Protocol_SDWA_Q_GET_TRANSACTION_STATUS();
			void clear();
			bool equals(const Protocol_SDWA_Q_GET_TRANSACTION_STATUS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_Q_GET_TRANSACTION_STATUS; }
			static const char *getMsgIdString() { return "SDWA_Q_GET_TRANSACTION_STATUS"; }
		};

		struct Protocol_SDWA_A_GET_TRANSACTION_STATUS	// from server object back to middle-tier
		{
			// 22s - statusCode,tranErrorCode,tranErrorText
			INT16 statusCode;	// DFS_TransactionStatus
			INT16 tranErrorCode;	// only if statusCode says the transaction has failed, else put success here
			PString tranErrorText;

			Protocol_SDWA_A_GET_TRANSACTION_STATUS();
			void clear();
			bool equals(const Protocol_SDWA_A_GET_TRANSACTION_STATUS&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_A_GET_TRANSACTION_STATUS; }
			static const char *getMsgIdString() { return "SDWA_A_GET_TRANSACTION_STATUS"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_SDWA_A_GET_TRANSACTION_STATUS(Protocol_SDWA_A_GET_TRANSACTION_STATUS&&);
			Protocol_SDWA_A_GET_TRANSACTION_STATUS& operator=(Protocol_SDWA_A_GET_TRANSACTION_STATUS&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_SDWA_A_GET_TRANSACTION_STATUS(const Protocol_SDWA_A_GET_TRANSACTION_STATUS&) = default;
			Protocol_SDWA_A_GET_TRANSACTION_STATUS& operator=(const Protocol_SDWA_A_GET_TRANSACTION_STATUS&) = default;
#endif
#endif
		};

		// middle-tier will send this to server object only if it receives a "tokenExpired" error from authenticated connection when it intended to send SecureFunds
		// see comments at DfsIntl_Server::MsgHandler_CheckSecureFundsDup
		struct Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP	// from middle-tier to server object, non-authenticated (NullGuard)
		{
			// s88s4 - val,val,val,val,val
			WebId webId;	// explicit user identity needed within plain connection

			TranWAPI transactionId;
			ContestId contestId;
			Currency currency;
			CashAmount amount;

			Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP();
			void clear();
			bool equals(const Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_Q_CHECK_SECURE_FUNDS_DUP; }
			static const char *getMsgIdString() { return "SDWA_Q_CHECK_SECURE_FUNDS_DUP"; }

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
			Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP(Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP&&);
			Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP& operator=(Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
			Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP(const Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP&) = default;
			Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP& operator=(const Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP&) = default;
#endif
#endif
		};

		struct Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP
		{
			// 4 - val
			CashAmount balanceAfter;	// using currency of the request, amount calculated at the time of processing, duplicate replies will have different amounts

			Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP();
			void clear();
			bool equals(const Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP&) const;
			const char *asTraceString(PString& _buf) const;
			void parseMsg(CommMsgParser& _parser);
			void composeMsg(CommMsgBody& _body) const;

			static UINT32 getMsgId() { return SDWA_A_CHECK_SECURE_FUNDS_DUP; }
			static const char *getMsgIdString() { return "SDWA_A_CHECK_SECURE_FUNDS_DUP"; }
		};

	};
};

#endif
