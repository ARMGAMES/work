/**
 * protocols\dfs\DFS_Server_WAPI_thin.cpp
 *
 * This file was auto-generated from protocols\dfs\DFS_Server_WAPI.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin -genMoveConstructor -dontGenValidationFuncs protocols\dfs\DFS_Server_WAPI.txt
 */
 
#include "DFS_Server_WAPI_thin.h"

//=================================================================
//                    TranWAPI
//=================================================================

DFS::TranWAPI::TranWAPI()
{
	clear();
}

void DFS::TranWAPI::clear()
{
	val = 0;
}

bool DFS::TranWAPI::equals(const TranWAPI& _o) const
{
	return val == _o.val;
}

const char *DFS::TranWAPI::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("val=");
	_buf.appendUint64(val);
	_buf.append('}');
	return _buf.c_str();
}

void DFS::TranWAPI::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(val);
}

void DFS::TranWAPI::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(val);
}

//=================================================================
//                    ContestId
//=================================================================

DFS::ContestId::ContestId()
{
	clear();
}

void DFS::ContestId::clear()
{
	val = 0;
}

bool DFS::ContestId::equals(const ContestId& _o) const
{
	return val == _o.val;
}

const char *DFS::ContestId::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("val=");
	_buf.appendUint64(val);
	_buf.append('}');
	return _buf.c_str();
}

void DFS::ContestId::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT64(val);
}

void DFS::ContestId::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT64(val);
}

//=================================================================
//                    WebId
//=================================================================

DFS::WebId::WebId()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::WebId::WebId(WebId&& _o)
	: val(std::move(_o.val))
{
}

DFS::WebId& DFS::WebId::operator=(WebId&& _o)
{
	if(this != &_o)
	{
		val = std::move(_o.val);
	}
	return *this;
}

#endif

void DFS::WebId::clear()
{
	val.clear();
}

bool DFS::WebId::equals(const WebId& _o) const
{
	return val.equals(_o.val);
}

const char *DFS::WebId::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("val=");
	_buf.append(val);
	_buf.append('}');
	return _buf.c_str();
}

void DFS::WebId::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(val);
}

void DFS::WebId::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(val);
}

//=================================================================
//                    Currency
//=================================================================

DFS::Currency::Currency()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::Currency::Currency(Currency&& _o)
	: val(std::move(_o.val))
{
}

DFS::Currency& DFS::Currency::operator=(Currency&& _o)
{
	if(this != &_o)
	{
		val = std::move(_o.val);
	}
	return *this;
}

#endif

void DFS::Currency::clear()
{
	val.clear();
}

bool DFS::Currency::equals(const Currency& _o) const
{
	return val.equals(_o.val);
}

const char *DFS::Currency::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("val=");
	_buf.append(val);
	_buf.append('}');
	return _buf.c_str();
}

void DFS::Currency::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(val);
}

void DFS::Currency::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(val);
}

//=================================================================
//                    CashAmount
//=================================================================

DFS::CashAmount::CashAmount()
{
	clear();
}

void DFS::CashAmount::clear()
{
	val = 0;
}

bool DFS::CashAmount::equals(const CashAmount& _o) const
{
	return val == _o.val;
}

const char *DFS::CashAmount::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("val=");
	_buf.appendInt(val);
	_buf.append('}');
	return _buf.c_str();
}

void DFS::CashAmount::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT32(val);
}

void DFS::CashAmount::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT32(val);
}

//=================================================================
//                    Balance
//=================================================================

DFS::Balance::Balance()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::Balance::Balance(Balance&& _o)
	: currency(std::move(_o.currency))
	, amount(std::move(_o.amount))
{
}

DFS::Balance& DFS::Balance::operator=(Balance&& _o)
{
	if(this != &_o)
	{
		currency = std::move(_o.currency);
		amount = std::move(_o.amount);
	}
	return *this;
}

#endif

void DFS::Balance::clear()
{
	currency.clear();
	amount.clear();
}

bool DFS::Balance::equals(const Balance& _o) const
{
	return currency.equals(_o.currency) &&
		amount.equals(_o.amount);
}

const char *DFS::Balance::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("currency=");
	currency.toTraceString(_buf);
	_buf.append(',');
	_buf.append("amount=");
	amount.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void DFS::Balance::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(Balance())) // not empty
	{
		currency.composeMsg(_body);
		amount.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void DFS::Balance::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	currency.parseMsg(_parser0);
	amount.parseMsg(_parser0);
}

//=================================================================
//                    Warning
//=================================================================

DFS::Warning::Warning()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::Warning::Warning(Warning&& _o)
	: code(std::move(_o.code))
	, description(std::move(_o.description))
{
}

DFS::Warning& DFS::Warning::operator=(Warning&& _o)
{
	if(this != &_o)
	{
		code = std::move(_o.code);
		description = std::move(_o.description);
	}
	return *this;
}

#endif

void DFS::Warning::clear()
{
	code = 0;
	description.clear();
}

bool DFS::Warning::equals(const Warning& _o) const
{
	return code == _o.code &&
		description.equals(_o.description);
}

const char *DFS::Warning::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("code=");
	_buf.appendInt(code);
	_buf.append(',');
	_buf.append("description=");
	_buf.append(description);
	_buf.append('}');
	return _buf.c_str();
}

void DFS::Warning::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(Warning())) // not empty
	{
		_body.composeINT16(code);
		_body.composeString(description);
	}

	_msg.composeMsgBody(_body);
}

void DFS::Warning::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT16(code);
	_parser0.parseStringP(description);
}

//=================================================================
//                    StakeLimit
//=================================================================

DFS::StakeLimit::StakeLimit()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::StakeLimit::StakeLimit(StakeLimit&& _o)
	: currency(std::move(_o.currency))
	, amount(std::move(_o.amount))
{
}

DFS::StakeLimit& DFS::StakeLimit::operator=(StakeLimit&& _o)
{
	if(this != &_o)
	{
		currency = std::move(_o.currency);
		amount = std::move(_o.amount);
	}
	return *this;
}

#endif

void DFS::StakeLimit::clear()
{
	currency.clear();
	amount.clear();
}

bool DFS::StakeLimit::equals(const StakeLimit& _o) const
{
	return currency.equals(_o.currency) &&
		amount.equals(_o.amount);
}

const char *DFS::StakeLimit::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("currency=");
	currency.toTraceString(_buf);
	_buf.append(',');
	_buf.append("amount=");
	amount.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void DFS::StakeLimit::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(StakeLimit())) // not empty
	{
		currency.composeMsg(_body);
		amount.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void DFS::StakeLimit::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	currency.parseMsg(_parser0);
	amount.parseMsg(_parser0);
}

//=================================================================
//                Protocol_SDWA_Q_SECURE_FUNDS
//=================================================================

DFS::SD_AuthWAPI::Protocol_SDWA_Q_SECURE_FUNDS::Protocol_SDWA_Q_SECURE_FUNDS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::SD_AuthWAPI::Protocol_SDWA_Q_SECURE_FUNDS::Protocol_SDWA_Q_SECURE_FUNDS(Protocol_SDWA_Q_SECURE_FUNDS&& _o)
	: transactionId(std::move(_o.transactionId))
	, contestId(std::move(_o.contestId))
	, currency(std::move(_o.currency))
	, amount(std::move(_o.amount))
{
}

DFS::SD_AuthWAPI::Protocol_SDWA_Q_SECURE_FUNDS& DFS::SD_AuthWAPI::Protocol_SDWA_Q_SECURE_FUNDS::operator=(Protocol_SDWA_Q_SECURE_FUNDS&& _o)
{
	if(this != &_o)
	{
		transactionId = std::move(_o.transactionId);
		contestId = std::move(_o.contestId);
		currency = std::move(_o.currency);
		amount = std::move(_o.amount);
	}
	return *this;
}

#endif

void DFS::SD_AuthWAPI::Protocol_SDWA_Q_SECURE_FUNDS::clear()
{
	transactionId.clear();
	contestId.clear();
	currency.clear();
	amount.clear();
}

bool DFS::SD_AuthWAPI::Protocol_SDWA_Q_SECURE_FUNDS::equals(const Protocol_SDWA_Q_SECURE_FUNDS& _o) const
{
	return transactionId.equals(_o.transactionId) &&
		contestId.equals(_o.contestId) &&
		currency.equals(_o.currency) &&
		amount.equals(_o.amount);
}

const char *DFS::SD_AuthWAPI::Protocol_SDWA_Q_SECURE_FUNDS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_Q_SECURE_FUNDS).append(")");
	_buf.append(',');
	_buf.append("transactionId=");
	transactionId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("contestId=");
	contestId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("currency=");
	currency.toTraceString(_buf);
	_buf.append(',');
	_buf.append("amount=");
	amount.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_AuthWAPI::Protocol_SDWA_Q_SECURE_FUNDS::composeMsg(CommMsgBody& _msg) const
{
	transactionId.composeMsg(_msg);
	contestId.composeMsg(_msg);
	currency.composeMsg(_msg);
	amount.composeMsg(_msg);
}

void DFS::SD_AuthWAPI::Protocol_SDWA_Q_SECURE_FUNDS::parseMsg(CommMsgParser& _parser)
{
	transactionId.parseMsg(_parser);
	contestId.parseMsg(_parser);
	currency.parseMsg(_parser);
	amount.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_A_SECURE_FUNDS
//=================================================================

DFS::SD_AuthWAPI::Protocol_SDWA_A_SECURE_FUNDS::Protocol_SDWA_A_SECURE_FUNDS()
{
	clear();
}

void DFS::SD_AuthWAPI::Protocol_SDWA_A_SECURE_FUNDS::clear()
{
	balanceAfter.clear();
}

bool DFS::SD_AuthWAPI::Protocol_SDWA_A_SECURE_FUNDS::equals(const Protocol_SDWA_A_SECURE_FUNDS& _o) const
{
	return balanceAfter.equals(_o.balanceAfter);
}

const char *DFS::SD_AuthWAPI::Protocol_SDWA_A_SECURE_FUNDS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_A_SECURE_FUNDS).append(")");
	_buf.append(',');
	_buf.append("balanceAfter=");
	balanceAfter.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_AuthWAPI::Protocol_SDWA_A_SECURE_FUNDS::composeMsg(CommMsgBody& _msg) const
{
	balanceAfter.composeMsg(_msg);
}

void DFS::SD_AuthWAPI::Protocol_SDWA_A_SECURE_FUNDS::parseMsg(CommMsgParser& _parser)
{
	balanceAfter.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_Q_USER_INFO
//=================================================================

DFS::SD_AuthWAPI::Protocol_SDWA_Q_USER_INFO::Protocol_SDWA_Q_USER_INFO()
{
	clear();
}

void DFS::SD_AuthWAPI::Protocol_SDWA_Q_USER_INFO::clear()
{
}

bool DFS::SD_AuthWAPI::Protocol_SDWA_Q_USER_INFO::equals(const Protocol_SDWA_Q_USER_INFO& _o) const
{
	return true;
}

const char *DFS::SD_AuthWAPI::Protocol_SDWA_Q_USER_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_Q_USER_INFO).append(")");
	return _buf.c_str();
}

void DFS::SD_AuthWAPI::Protocol_SDWA_Q_USER_INFO::composeMsg(CommMsgBody& _msg) const
{
}

void DFS::SD_AuthWAPI::Protocol_SDWA_Q_USER_INFO::parseMsg(CommMsgParser& _parser)
{
}

//=================================================================
//                Protocol_SDWA_A_USER_INFO
//=================================================================

DFS::SD_AuthWAPI::Protocol_SDWA_A_USER_INFO::Protocol_SDWA_A_USER_INFO()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::SD_AuthWAPI::Protocol_SDWA_A_USER_INFO::Protocol_SDWA_A_USER_INFO(Protocol_SDWA_A_USER_INFO&& _o)
	: webId(std::move(_o.webId))
	, defaultCurrency(std::move(_o.defaultCurrency))
	, balances(std::move(_o.balances))
	, timezone(std::move(_o.timezone))
	, site(std::move(_o.site))
	, language(std::move(_o.language))
	, warnings(std::move(_o.warnings))
	, stakeLimits(std::move(_o.stakeLimits))
	, countryAddress(std::move(_o.countryAddress))
	, countryGeoIP(std::move(_o.countryGeoIP))
	, userId(std::move(_o.userId))
	, eMail(std::move(_o.eMail))
	, firstName(std::move(_o.firstName))
	, lastName(std::move(_o.lastName))
	, birthDay(std::move(_o.birthDay))
	, birthMonth(std::move(_o.birthMonth))
	, birthYear(std::move(_o.birthYear))
	, address1(std::move(_o.address1))
	, address2(std::move(_o.address2))
	, city(std::move(_o.city))
	, zipCode(std::move(_o.zipCode))
	, state(std::move(_o.state))
{
}

DFS::SD_AuthWAPI::Protocol_SDWA_A_USER_INFO& DFS::SD_AuthWAPI::Protocol_SDWA_A_USER_INFO::operator=(Protocol_SDWA_A_USER_INFO&& _o)
{
	if(this != &_o)
	{
		webId = std::move(_o.webId);
		defaultCurrency = std::move(_o.defaultCurrency);
		balances = std::move(_o.balances);
		timezone = std::move(_o.timezone);
		site = std::move(_o.site);
		language = std::move(_o.language);
		warnings = std::move(_o.warnings);
		stakeLimits = std::move(_o.stakeLimits);
		countryAddress = std::move(_o.countryAddress);
		countryGeoIP = std::move(_o.countryGeoIP);
		userId = std::move(_o.userId);
		eMail = std::move(_o.eMail);
		firstName = std::move(_o.firstName);
		lastName = std::move(_o.lastName);
		birthDay = std::move(_o.birthDay);
		birthMonth = std::move(_o.birthMonth);
		birthYear = std::move(_o.birthYear);
		address1 = std::move(_o.address1);
		address2 = std::move(_o.address2);
		city = std::move(_o.city);
		zipCode = std::move(_o.zipCode);
		state = std::move(_o.state);
	}
	return *this;
}

#endif

void DFS::SD_AuthWAPI::Protocol_SDWA_A_USER_INFO::clear()
{
	webId.clear();
	defaultCurrency.clear();
	balances.clear();
	timezone.clear();
	site.clear();
	language.clear();
	warnings.clear();
	stakeLimits.clear();
	countryAddress.clear();
	countryGeoIP.clear();
	userId.clear();
	eMail.clear();
	firstName.clear();
	lastName.clear();
	birthDay = 0;
	birthMonth = 0;
	birthYear = 0;
	address1.clear();
	address2.clear();
	city.clear();
	zipCode.clear();
	state.clear();
}

bool DFS::SD_AuthWAPI::Protocol_SDWA_A_USER_INFO::equals(const Protocol_SDWA_A_USER_INFO& _o) const
{
	return webId.equals(_o.webId) &&
		defaultCurrency.equals(_o.defaultCurrency) &&
		balances.equals(_o.balances) &&
		timezone.equals(_o.timezone) &&
		site.equals(_o.site) &&
		language.equals(_o.language) &&
		warnings.equals(_o.warnings) &&
		stakeLimits.equals(_o.stakeLimits) &&
		countryAddress.equals(_o.countryAddress) &&
		countryGeoIP.equals(_o.countryGeoIP) &&
		userId.equals(_o.userId) &&
		eMail.equals(_o.eMail) &&
		firstName.equals(_o.firstName) &&
		lastName.equals(_o.lastName) &&
		birthDay == _o.birthDay &&
		birthMonth == _o.birthMonth &&
		birthYear == _o.birthYear &&
		address1.equals(_o.address1) &&
		address2.equals(_o.address2) &&
		city.equals(_o.city) &&
		zipCode.equals(_o.zipCode) &&
		state.equals(_o.state);
}

const char *DFS::SD_AuthWAPI::Protocol_SDWA_A_USER_INFO::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_A_USER_INFO).append(")");
	_buf.append(',');
	_buf.append("webId=");
	webId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("defaultCurrency=");
	defaultCurrency.toTraceString(_buf);
	_buf.append(',');
	_buf.append("balances=");
	balances.toTraceString(_buf);
	_buf.append(',');
	_buf.append("timezone=");
	_buf.append(timezone);
	_buf.append(',');
	_buf.append("site=");
	_buf.append(site);
	_buf.append(',');
	_buf.append("language=");
	_buf.append(language);
	_buf.append(',');
	_buf.append("warnings=");
	warnings.toTraceString(_buf);
	_buf.append(',');
	_buf.append("stakeLimits=");
	stakeLimits.toTraceString(_buf);
	_buf.append(',');
	_buf.append("countryAddress=");
	_buf.append(countryAddress);
	_buf.append(',');
	_buf.append("countryGeoIP=");
	_buf.append(countryGeoIP);
	_buf.append(',');
	_buf.append("userId=");
	_buf.append(userId);
	_buf.append(',');
	_buf.append("eMail=");
	_buf.append(eMail);
	_buf.append(',');
	_buf.append("firstName=");
	_buf.append(firstName);
	_buf.append(',');
	_buf.append("lastName=");
	_buf.append(lastName);
	_buf.append(',');
	_buf.append("birthDay=");
	_buf.appendUint(birthDay);
	_buf.append(',');
	_buf.append("birthMonth=");
	_buf.appendUint(birthMonth);
	_buf.append(',');
	_buf.append("birthYear=");
	_buf.appendUint(birthYear);
	_buf.append(',');
	_buf.append("address1=");
	_buf.append(address1);
	_buf.append(',');
	_buf.append("address2=");
	_buf.append(address2);
	_buf.append(',');
	_buf.append("city=");
	_buf.append(city);
	_buf.append(',');
	_buf.append("zipCode=");
	_buf.append(zipCode);
	_buf.append(',');
	_buf.append("state=");
	_buf.append(state);
	return _buf.c_str();
}

void DFS::SD_AuthWAPI::Protocol_SDWA_A_USER_INFO::composeMsg(CommMsgBody& _msg) const
{
	webId.composeMsg(_msg);
	defaultCurrency.composeMsg(_msg);
	balances.composeMsg(_msg);
	_msg.composeString(timezone);
	_msg.composeString(site);
	_msg.composeString(language);
	warnings.composeMsg(_msg);
	stakeLimits.composeMsg(_msg);
	_msg.composeString(countryAddress);
	_msg.composeString(countryGeoIP);
	_msg.composeString(userId);
	_msg.composeString(eMail);
	_msg.composeString(firstName);
	_msg.composeString(lastName);
	_msg.composeBYTE(birthDay);
	_msg.composeBYTE(birthMonth);
	_msg.composeUINT16(birthYear);
	_msg.composeString(address1);
	_msg.composeString(address2);
	_msg.composeString(city);
	_msg.composeString(zipCode);
	_msg.composeString(state);
}

void DFS::SD_AuthWAPI::Protocol_SDWA_A_USER_INFO::parseMsg(CommMsgParser& _parser)
{
	webId.parseMsg(_parser);
	defaultCurrency.parseMsg(_parser);
	balances.parseMsg(_parser);
	_parser.parseStringP(timezone);
	_parser.parseStringP(site);
	_parser.parseStringP(language);
	warnings.parseMsg(_parser);
	stakeLimits.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseStringP(countryAddress);
	_parser.parseStringP(countryGeoIP);
	if(_parser.parseEnded()) return;
	_parser.parseStringP(userId);
	_parser.parseStringP(eMail);
	_parser.parseStringP(firstName);
	_parser.parseStringP(lastName);
	_parser.parseBYTE(birthDay);
	_parser.parseBYTE(birthMonth);
	_parser.parseUINT16(birthYear);
	_parser.parseStringP(address1);
	_parser.parseStringP(address2);
	_parser.parseStringP(city);
	_parser.parseStringP(zipCode);
	_parser.parseStringP(state);
}

//=================================================================
//                Protocol_SDWA_Q_CONTEST_PAYOUT
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_Q_CONTEST_PAYOUT::Protocol_SDWA_Q_CONTEST_PAYOUT()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::SD_PlainWAPI::Protocol_SDWA_Q_CONTEST_PAYOUT::Protocol_SDWA_Q_CONTEST_PAYOUT(Protocol_SDWA_Q_CONTEST_PAYOUT&& _o)
	: webId(std::move(_o.webId))
	, transactionId(std::move(_o.transactionId))
	, contestId(std::move(_o.contestId))
	, currency(std::move(_o.currency))
	, amount(std::move(_o.amount))
{
}

DFS::SD_PlainWAPI::Protocol_SDWA_Q_CONTEST_PAYOUT& DFS::SD_PlainWAPI::Protocol_SDWA_Q_CONTEST_PAYOUT::operator=(Protocol_SDWA_Q_CONTEST_PAYOUT&& _o)
{
	if(this != &_o)
	{
		webId = std::move(_o.webId);
		transactionId = std::move(_o.transactionId);
		contestId = std::move(_o.contestId);
		currency = std::move(_o.currency);
		amount = std::move(_o.amount);
	}
	return *this;
}

#endif

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_CONTEST_PAYOUT::clear()
{
	webId.clear();
	transactionId.clear();
	contestId.clear();
	currency.clear();
	amount.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_Q_CONTEST_PAYOUT::equals(const Protocol_SDWA_Q_CONTEST_PAYOUT& _o) const
{
	return webId.equals(_o.webId) &&
		transactionId.equals(_o.transactionId) &&
		contestId.equals(_o.contestId) &&
		currency.equals(_o.currency) &&
		amount.equals(_o.amount);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_Q_CONTEST_PAYOUT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_Q_CONTEST_PAYOUT).append(")");
	_buf.append(',');
	_buf.append("webId=");
	webId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("transactionId=");
	transactionId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("contestId=");
	contestId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("currency=");
	currency.toTraceString(_buf);
	_buf.append(',');
	_buf.append("amount=");
	amount.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_CONTEST_PAYOUT::composeMsg(CommMsgBody& _msg) const
{
	webId.composeMsg(_msg);
	transactionId.composeMsg(_msg);
	contestId.composeMsg(_msg);
	currency.composeMsg(_msg);
	amount.composeMsg(_msg);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_CONTEST_PAYOUT::parseMsg(CommMsgParser& _parser)
{
	webId.parseMsg(_parser);
	transactionId.parseMsg(_parser);
	contestId.parseMsg(_parser);
	currency.parseMsg(_parser);
	amount.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_A_CONTEST_PAYOUT
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_A_CONTEST_PAYOUT::Protocol_SDWA_A_CONTEST_PAYOUT()
{
	clear();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_CONTEST_PAYOUT::clear()
{
	balanceAfter.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_A_CONTEST_PAYOUT::equals(const Protocol_SDWA_A_CONTEST_PAYOUT& _o) const
{
	return balanceAfter.equals(_o.balanceAfter);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_A_CONTEST_PAYOUT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_A_CONTEST_PAYOUT).append(")");
	_buf.append(',');
	_buf.append("balanceAfter=");
	balanceAfter.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_CONTEST_PAYOUT::composeMsg(CommMsgBody& _msg) const
{
	balanceAfter.composeMsg(_msg);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_CONTEST_PAYOUT::parseMsg(CommMsgParser& _parser)
{
	balanceAfter.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_Q_VOID_ENTRY
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_Q_VOID_ENTRY::Protocol_SDWA_Q_VOID_ENTRY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::SD_PlainWAPI::Protocol_SDWA_Q_VOID_ENTRY::Protocol_SDWA_Q_VOID_ENTRY(Protocol_SDWA_Q_VOID_ENTRY&& _o)
	: webId(std::move(_o.webId))
	, transactionId(std::move(_o.transactionId))
	, contestId(std::move(_o.contestId))
	, currency(std::move(_o.currency))
	, amount(std::move(_o.amount))
{
}

DFS::SD_PlainWAPI::Protocol_SDWA_Q_VOID_ENTRY& DFS::SD_PlainWAPI::Protocol_SDWA_Q_VOID_ENTRY::operator=(Protocol_SDWA_Q_VOID_ENTRY&& _o)
{
	if(this != &_o)
	{
		webId = std::move(_o.webId);
		transactionId = std::move(_o.transactionId);
		contestId = std::move(_o.contestId);
		currency = std::move(_o.currency);
		amount = std::move(_o.amount);
	}
	return *this;
}

#endif

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_VOID_ENTRY::clear()
{
	webId.clear();
	transactionId.clear();
	contestId.clear();
	currency.clear();
	amount.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_Q_VOID_ENTRY::equals(const Protocol_SDWA_Q_VOID_ENTRY& _o) const
{
	return webId.equals(_o.webId) &&
		transactionId.equals(_o.transactionId) &&
		contestId.equals(_o.contestId) &&
		currency.equals(_o.currency) &&
		amount.equals(_o.amount);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_Q_VOID_ENTRY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_Q_VOID_ENTRY).append(")");
	_buf.append(',');
	_buf.append("webId=");
	webId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("transactionId=");
	transactionId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("contestId=");
	contestId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("currency=");
	currency.toTraceString(_buf);
	_buf.append(',');
	_buf.append("amount=");
	amount.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_VOID_ENTRY::composeMsg(CommMsgBody& _msg) const
{
	webId.composeMsg(_msg);
	transactionId.composeMsg(_msg);
	contestId.composeMsg(_msg);
	currency.composeMsg(_msg);
	amount.composeMsg(_msg);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_VOID_ENTRY::parseMsg(CommMsgParser& _parser)
{
	webId.parseMsg(_parser);
	transactionId.parseMsg(_parser);
	contestId.parseMsg(_parser);
	currency.parseMsg(_parser);
	amount.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_A_VOID_ENTRY
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_A_VOID_ENTRY::Protocol_SDWA_A_VOID_ENTRY()
{
	clear();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_VOID_ENTRY::clear()
{
	balanceAfter.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_A_VOID_ENTRY::equals(const Protocol_SDWA_A_VOID_ENTRY& _o) const
{
	return balanceAfter.equals(_o.balanceAfter);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_A_VOID_ENTRY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_A_VOID_ENTRY).append(")");
	_buf.append(',');
	_buf.append("balanceAfter=");
	balanceAfter.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_VOID_ENTRY::composeMsg(CommMsgBody& _msg) const
{
	balanceAfter.composeMsg(_msg);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_VOID_ENTRY::parseMsg(CommMsgParser& _parser)
{
	balanceAfter.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_Q_REVERSE_PAYOUT
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_Q_REVERSE_PAYOUT::Protocol_SDWA_Q_REVERSE_PAYOUT()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::SD_PlainWAPI::Protocol_SDWA_Q_REVERSE_PAYOUT::Protocol_SDWA_Q_REVERSE_PAYOUT(Protocol_SDWA_Q_REVERSE_PAYOUT&& _o)
	: webId(std::move(_o.webId))
	, transactionId(std::move(_o.transactionId))
	, contestId(std::move(_o.contestId))
	, currency(std::move(_o.currency))
	, amount(std::move(_o.amount))
{
}

DFS::SD_PlainWAPI::Protocol_SDWA_Q_REVERSE_PAYOUT& DFS::SD_PlainWAPI::Protocol_SDWA_Q_REVERSE_PAYOUT::operator=(Protocol_SDWA_Q_REVERSE_PAYOUT&& _o)
{
	if(this != &_o)
	{
		webId = std::move(_o.webId);
		transactionId = std::move(_o.transactionId);
		contestId = std::move(_o.contestId);
		currency = std::move(_o.currency);
		amount = std::move(_o.amount);
	}
	return *this;
}

#endif

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_REVERSE_PAYOUT::clear()
{
	webId.clear();
	transactionId.clear();
	contestId.clear();
	currency.clear();
	amount.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_Q_REVERSE_PAYOUT::equals(const Protocol_SDWA_Q_REVERSE_PAYOUT& _o) const
{
	return webId.equals(_o.webId) &&
		transactionId.equals(_o.transactionId) &&
		contestId.equals(_o.contestId) &&
		currency.equals(_o.currency) &&
		amount.equals(_o.amount);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_Q_REVERSE_PAYOUT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_Q_REVERSE_PAYOUT).append(")");
	_buf.append(',');
	_buf.append("webId=");
	webId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("transactionId=");
	transactionId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("contestId=");
	contestId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("currency=");
	currency.toTraceString(_buf);
	_buf.append(',');
	_buf.append("amount=");
	amount.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_REVERSE_PAYOUT::composeMsg(CommMsgBody& _msg) const
{
	webId.composeMsg(_msg);
	transactionId.composeMsg(_msg);
	contestId.composeMsg(_msg);
	currency.composeMsg(_msg);
	amount.composeMsg(_msg);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_REVERSE_PAYOUT::parseMsg(CommMsgParser& _parser)
{
	webId.parseMsg(_parser);
	transactionId.parseMsg(_parser);
	contestId.parseMsg(_parser);
	currency.parseMsg(_parser);
	amount.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_A_REVERSE_PAYOUT
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_A_REVERSE_PAYOUT::Protocol_SDWA_A_REVERSE_PAYOUT()
{
	clear();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_REVERSE_PAYOUT::clear()
{
	balanceAfter.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_A_REVERSE_PAYOUT::equals(const Protocol_SDWA_A_REVERSE_PAYOUT& _o) const
{
	return balanceAfter.equals(_o.balanceAfter);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_A_REVERSE_PAYOUT::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_A_REVERSE_PAYOUT).append(")");
	_buf.append(',');
	_buf.append("balanceAfter=");
	balanceAfter.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_REVERSE_PAYOUT::composeMsg(CommMsgBody& _msg) const
{
	balanceAfter.composeMsg(_msg);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_REVERSE_PAYOUT::parseMsg(CommMsgParser& _parser)
{
	balanceAfter.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_Q_REFUND_PARTIAL
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_Q_REFUND_PARTIAL::Protocol_SDWA_Q_REFUND_PARTIAL()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::SD_PlainWAPI::Protocol_SDWA_Q_REFUND_PARTIAL::Protocol_SDWA_Q_REFUND_PARTIAL(Protocol_SDWA_Q_REFUND_PARTIAL&& _o)
	: webId(std::move(_o.webId))
	, transactionId(std::move(_o.transactionId))
	, contestId(std::move(_o.contestId))
	, currency(std::move(_o.currency))
	, amount(std::move(_o.amount))
{
}

DFS::SD_PlainWAPI::Protocol_SDWA_Q_REFUND_PARTIAL& DFS::SD_PlainWAPI::Protocol_SDWA_Q_REFUND_PARTIAL::operator=(Protocol_SDWA_Q_REFUND_PARTIAL&& _o)
{
	if(this != &_o)
	{
		webId = std::move(_o.webId);
		transactionId = std::move(_o.transactionId);
		contestId = std::move(_o.contestId);
		currency = std::move(_o.currency);
		amount = std::move(_o.amount);
	}
	return *this;
}

#endif

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_REFUND_PARTIAL::clear()
{
	webId.clear();
	transactionId.clear();
	contestId.clear();
	currency.clear();
	amount.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_Q_REFUND_PARTIAL::equals(const Protocol_SDWA_Q_REFUND_PARTIAL& _o) const
{
	return webId.equals(_o.webId) &&
		transactionId.equals(_o.transactionId) &&
		contestId.equals(_o.contestId) &&
		currency.equals(_o.currency) &&
		amount.equals(_o.amount);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_Q_REFUND_PARTIAL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_Q_REFUND_PARTIAL).append(")");
	_buf.append(',');
	_buf.append("webId=");
	webId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("transactionId=");
	transactionId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("contestId=");
	contestId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("currency=");
	currency.toTraceString(_buf);
	_buf.append(',');
	_buf.append("amount=");
	amount.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_REFUND_PARTIAL::composeMsg(CommMsgBody& _msg) const
{
	webId.composeMsg(_msg);
	transactionId.composeMsg(_msg);
	contestId.composeMsg(_msg);
	currency.composeMsg(_msg);
	amount.composeMsg(_msg);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_REFUND_PARTIAL::parseMsg(CommMsgParser& _parser)
{
	webId.parseMsg(_parser);
	transactionId.parseMsg(_parser);
	contestId.parseMsg(_parser);
	currency.parseMsg(_parser);
	amount.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_A_REFUND_PARTIAL
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_A_REFUND_PARTIAL::Protocol_SDWA_A_REFUND_PARTIAL()
{
	clear();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_REFUND_PARTIAL::clear()
{
	balanceAfter.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_A_REFUND_PARTIAL::equals(const Protocol_SDWA_A_REFUND_PARTIAL& _o) const
{
	return balanceAfter.equals(_o.balanceAfter);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_A_REFUND_PARTIAL::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_A_REFUND_PARTIAL).append(")");
	_buf.append(',');
	_buf.append("balanceAfter=");
	balanceAfter.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_REFUND_PARTIAL::composeMsg(CommMsgBody& _msg) const
{
	balanceAfter.composeMsg(_msg);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_REFUND_PARTIAL::parseMsg(CommMsgParser& _parser)
{
	balanceAfter.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_Q_GET_TRANSACTION_STATUS
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_Q_GET_TRANSACTION_STATUS::Protocol_SDWA_Q_GET_TRANSACTION_STATUS()
{
	clear();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_GET_TRANSACTION_STATUS::clear()
{
	transactionId.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_Q_GET_TRANSACTION_STATUS::equals(const Protocol_SDWA_Q_GET_TRANSACTION_STATUS& _o) const
{
	return transactionId.equals(_o.transactionId);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_Q_GET_TRANSACTION_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_Q_GET_TRANSACTION_STATUS).append(")");
	_buf.append(',');
	_buf.append("transactionId=");
	transactionId.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_GET_TRANSACTION_STATUS::composeMsg(CommMsgBody& _msg) const
{
	transactionId.composeMsg(_msg);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_GET_TRANSACTION_STATUS::parseMsg(CommMsgParser& _parser)
{
	transactionId.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_A_GET_TRANSACTION_STATUS
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_A_GET_TRANSACTION_STATUS::Protocol_SDWA_A_GET_TRANSACTION_STATUS()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::SD_PlainWAPI::Protocol_SDWA_A_GET_TRANSACTION_STATUS::Protocol_SDWA_A_GET_TRANSACTION_STATUS(Protocol_SDWA_A_GET_TRANSACTION_STATUS&& _o)
	: statusCode(std::move(_o.statusCode))
	, tranErrorCode(std::move(_o.tranErrorCode))
	, tranErrorText(std::move(_o.tranErrorText))
{
}

DFS::SD_PlainWAPI::Protocol_SDWA_A_GET_TRANSACTION_STATUS& DFS::SD_PlainWAPI::Protocol_SDWA_A_GET_TRANSACTION_STATUS::operator=(Protocol_SDWA_A_GET_TRANSACTION_STATUS&& _o)
{
	if(this != &_o)
	{
		statusCode = std::move(_o.statusCode);
		tranErrorCode = std::move(_o.tranErrorCode);
		tranErrorText = std::move(_o.tranErrorText);
	}
	return *this;
}

#endif

void DFS::SD_PlainWAPI::Protocol_SDWA_A_GET_TRANSACTION_STATUS::clear()
{
	statusCode = 0;
	tranErrorCode = 0;
	tranErrorText.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_A_GET_TRANSACTION_STATUS::equals(const Protocol_SDWA_A_GET_TRANSACTION_STATUS& _o) const
{
	return statusCode == _o.statusCode &&
		tranErrorCode == _o.tranErrorCode &&
		tranErrorText.equals(_o.tranErrorText);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_A_GET_TRANSACTION_STATUS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_A_GET_TRANSACTION_STATUS).append(")");
	_buf.append(',');
	_buf.append("statusCode=");
	_buf.appendInt(statusCode);
	_buf.append(',');
	_buf.append("tranErrorCode=");
	_buf.appendInt(tranErrorCode);
	_buf.append(',');
	_buf.append("tranErrorText=");
	_buf.append(tranErrorText);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_GET_TRANSACTION_STATUS::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(statusCode);
	_msg.composeINT16(tranErrorCode);
	_msg.composeString(tranErrorText);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_GET_TRANSACTION_STATUS::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(statusCode);
	_parser.parseINT16(tranErrorCode);
	_parser.parseStringP(tranErrorText);
}

//=================================================================
//                Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP::Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

DFS::SD_PlainWAPI::Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP::Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP(Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP&& _o)
	: webId(std::move(_o.webId))
	, transactionId(std::move(_o.transactionId))
	, contestId(std::move(_o.contestId))
	, currency(std::move(_o.currency))
	, amount(std::move(_o.amount))
{
}

DFS::SD_PlainWAPI::Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP& DFS::SD_PlainWAPI::Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP::operator=(Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP&& _o)
{
	if(this != &_o)
	{
		webId = std::move(_o.webId);
		transactionId = std::move(_o.transactionId);
		contestId = std::move(_o.contestId);
		currency = std::move(_o.currency);
		amount = std::move(_o.amount);
	}
	return *this;
}

#endif

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP::clear()
{
	webId.clear();
	transactionId.clear();
	contestId.clear();
	currency.clear();
	amount.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP::equals(const Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP& _o) const
{
	return webId.equals(_o.webId) &&
		transactionId.equals(_o.transactionId) &&
		contestId.equals(_o.contestId) &&
		currency.equals(_o.currency) &&
		amount.equals(_o.amount);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_Q_CHECK_SECURE_FUNDS_DUP).append(")");
	_buf.append(',');
	_buf.append("webId=");
	webId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("transactionId=");
	transactionId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("contestId=");
	contestId.toTraceString(_buf);
	_buf.append(',');
	_buf.append("currency=");
	currency.toTraceString(_buf);
	_buf.append(',');
	_buf.append("amount=");
	amount.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP::composeMsg(CommMsgBody& _msg) const
{
	webId.composeMsg(_msg);
	transactionId.composeMsg(_msg);
	contestId.composeMsg(_msg);
	currency.composeMsg(_msg);
	amount.composeMsg(_msg);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_Q_CHECK_SECURE_FUNDS_DUP::parseMsg(CommMsgParser& _parser)
{
	webId.parseMsg(_parser);
	transactionId.parseMsg(_parser);
	contestId.parseMsg(_parser);
	currency.parseMsg(_parser);
	amount.parseMsg(_parser);
}

//=================================================================
//                Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP
//=================================================================

DFS::SD_PlainWAPI::Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP::Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP()
{
	clear();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP::clear()
{
	balanceAfter.clear();
}

bool DFS::SD_PlainWAPI::Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP::equals(const Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP& _o) const
{
	return balanceAfter.equals(_o.balanceAfter);
}

const char *DFS::SD_PlainWAPI::Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(SDWA_A_CHECK_SECURE_FUNDS_DUP).append(")");
	_buf.append(',');
	_buf.append("balanceAfter=");
	balanceAfter.toTraceString(_buf);
	return _buf.c_str();
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP::composeMsg(CommMsgBody& _msg) const
{
	balanceAfter.composeMsg(_msg);
}

void DFS::SD_PlainWAPI::Protocol_SDWA_A_CHECK_SECURE_FUNDS_DUP::parseMsg(CommMsgParser& _parser)
{
	balanceAfter.parseMsg(_parser);
}

