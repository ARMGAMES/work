#include "DFS_Server_WAPI_Msgs.h"

#define TOP_LEVEL_NAMESPACE DFS

	Struct TranWAPI
	{
		UINT64			val;
	};

	Struct ContestId
	{
		UINT64			val;
	};

	Struct WebId
	{
		PString			val;
	};

	Struct Currency
	{
		PString			val; // USD, EUR, CAD, GBP
	};

	Struct CashAmount
	{
		INT32			val; //in cents
	};

	MsgBodyStruct Balance
	{
		Currency		currency;
		CashAmount		amount;
	};

	MsgBodyStruct Warning
	{
		INT16			code;
		PString			description;
	};

	MsgBodyStruct StakeLimit
	{
		Currency		currency;
		CashAmount		amount;
	};


namespace SD_AuthWAPI // same as the connection type 
{

	Message SDWA_Q_SECURE_FUNDS // from middle-tier to server object, authenticated (WebTokenGuard), aka "placeBet"
	{
		TranWAPI		transactionId;
		ContestId		contestId;
		Currency		currency;
		CashAmount		amount;
	};

	Message SDWA_A_SECURE_FUNDS // from server object back to middle-tier, aka "placeBet"
	{
		CashAmount		balanceAfter; // using currency of the request
	};

	Message SDWA_Q_USER_INFO // from middle-tier to server object, authenticated (WebTokenGuard)
	{
		//intentionally left blank
	};

	Message SDWA_A_USER_INFO // from server object back to middle-tier
	{
		WebId               webId;
		Currency            defaultCurrency;
		vector<Balance>     balances;
		PString             timezone;
		PString             site;
		PString             language;
		vector<Warning>     warnings;
		vector<StakeLimit>  stakeLimits;

		PString             countryAddress  parseEndOptB4Me; // PYR-49173
		PString             countryGeoIP;

		PString             userId  parseEndOptB4Me; // PYR-49432
		PString             eMail;
		PString             firstName;
		PString             lastName;
		BYTE                birthDay;
		BYTE                birthMonth;
		UINT16              birthYear;
		PString             address1;
		PString             address2;
		PString             city;
		PString             zipCode;
		PString             state;
	};
};

namespace SD_PlainWAPI // same as the connection type
{
	Message SDWA_Q_CONTEST_PAYOUT // from middle-tier to server object, non-authenticated (NullGuard), aka "settle"
	{
		WebId			webId;
		TranWAPI		transactionId;
		ContestId		contestId;
		Currency		currency;
		CashAmount		amount;
	};

	Message SDWA_A_CONTEST_PAYOUT // from server object back to middle-tier, aka "settle"
	{
		CashAmount		balanceAfter;		// using currency of the request
	};


	Message SDWA_Q_VOID_ENTRY // from middle-tier to server object, non-authenticated (NullGuard), aka "void"
	{
		WebId			webId;
		TranWAPI		transactionId;
		ContestId		contestId;
		Currency		currency;
		CashAmount		amount;
	};

	Message SDWA_A_VOID_ENTRY // from server object back to middle-tier, aka "void"
	{
		CashAmount		balanceAfter;		//using currency of the request
	};

	
	Message SDWA_Q_REVERSE_PAYOUT // from middle-tier to server object, non-authenticated (NullGuard), aka "unsettle"
	{
		WebId			webId;
		TranWAPI		transactionId;
		ContestId		contestId;
		Currency		currency;
		CashAmount		amount;
	};

	Message SDWA_A_REVERSE_PAYOUT // from server object back to middle-tier, aka "unsettle"
	{
		CashAmount		balanceAfter;		//using currency of the request
	};



	Message SDWA_Q_REFUND_PARTIAL // from middle-tier to server object, non-authenticated (NullGuard)
	{
		WebId			webId;
		TranWAPI		transactionId;
		ContestId		contestId;
		Currency		currency;
		CashAmount		amount;				//in cents
	};

	Message SDWA_A_REFUND_PARTIAL // from server object back to middle-tier
	{
		CashAmount		balanceAfter;		// in cents, in currency of the request
	};



	Message SDWA_Q_GET_TRANSACTION_STATUS // from middle-tier to server object, non-authenticated (NullGuard)
	{
		TranWAPI		transactionId;    // Victiv can only ask about the status of a specific transaction
	};

	Message SDWA_A_GET_TRANSACTION_STATUS // from server object back to middle-tier
	{
		INT16			statusCode;       // DFS_TransactionStatus
		INT16			tranErrorCode;    // only if statusCode says the transaction has failed, else put success here
		PString			tranErrorText;
	};

	// middle-tier will send this to server object only if it receives a "tokenExpired" error from authenticated connection when it intended to send SecureFunds
	// see comments at DfsIntl_Server::MsgHandler_CheckSecureFundsDup
	Message SDWA_Q_CHECK_SECURE_FUNDS_DUP // from middle-tier to server object, non-authenticated (NullGuard)
	{
		WebId			webId;		 // explicit user identity needed within plain connection

		TranWAPI		transactionId;
		ContestId		contestId;
		Currency		currency;
		CashAmount		amount;
	};

	Message SDWA_A_CHECK_SECURE_FUNDS_DUP 
	{
		CashAmount		balanceAfter; // using currency of the request, amount calculated at the time of processing, duplicate replies will have different amounts
	};

};
