/**
 * cvlclientprotocol_thin.cpp
 *
 * This file was auto-generated from cvlclientprotocol.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor -thin cvlclientprotocol.txt
 */
 
#include "cvlclientprotocol_thin.h"

//=================================================================
//                    ChestAsset
//=================================================================

// @Override
ChestAsset::ChestAsset( const INT32 id_, const INT32 type_,  const PString& uriHint_ )
{
	id		= id_;
	type	= type_;
	uriHint = uriHint_;
}

ChestAsset::ChestAsset()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ChestAsset::ChestAsset(ChestAsset&& _o)
	: id(std::move(_o.id))
	, type(std::move(_o.type))
	, uriHint(std::move(_o.uriHint))
{
}

ChestAsset& ChestAsset::operator=(ChestAsset&& _o)
{
	if(this != &_o)
	{
		id = std::move(_o.id);
		type = std::move(_o.type);
		uriHint = std::move(_o.uriHint);
	}
	return *this;
}

#endif

void ChestAsset::clear()
{
	id = 0;
	type = 0;
	uriHint.clear();
}

bool ChestAsset::equals(const ChestAsset& _o) const
{
	return id == _o.id &&
		type == _o.type &&
		uriHint.equals(_o.uriHint);
}

const char *ChestAsset::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("id=");
	_buf.appendInt(id);
	_buf.append(',');
	_buf.append("type=");
	_buf.appendInt(type);
	_buf.append(',');
	_buf.append("uriHint=");
	_buf.append(uriHint);
	_buf.append('}');
	return _buf.c_str();
}

void ChestAsset::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(ChestAsset())) // not empty
	{
		_body.composeINT32(id);
		_body.composeINT32(type);
		_body.composeString(uriHint);
	}

	_msg.composeMsgBody(_body);
}

void ChestAsset::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseINT32(id);
	_parser0.parseINT32(type);
	_parser0.parseStringP(uriHint);
}

/*static*/ void ChestAsset::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	INT32 id; _parser0.parseINT32(id);
	AtfValidator::validateInt(_descr, "id", id, _checker, __FILE__, __LINE__);
	INT32 type; _parser0.parseINT32(type);
	AtfValidator::validateInt(_descr, "type", type, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "uriHint"); size_t szUriHint = strlen(_dummy);
	AtfValidator::validateInt(_descr, "uriHint", szUriHint, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    CvlConfigParams
//=================================================================

CvlConfigParams::CvlConfigParams()
{
	clear();
}

void CvlConfigParams::clear()
{
	stateFlags = 0;
	daysToExpire = 0;
	tierUpDays = 0;
	tierUpBars = 0;
	exchangePercent = 0;
	boostEnabled = false;
	currentBarDueTime = 0;
	recentBarCounter = 0;
	tierDownDays = 0;
	currentBarStartTime = 0;
	totalDoneBarCount = 0;
	preferredTimeZone = 0;
}

bool CvlConfigParams::equals(const CvlConfigParams& _o) const
{
	return stateFlags == _o.stateFlags &&
		daysToExpire == _o.daysToExpire &&
		tierUpDays == _o.tierUpDays &&
		tierUpBars == _o.tierUpBars &&
		exchangePercent == _o.exchangePercent &&
		boostEnabled == _o.boostEnabled &&
		currentBarDueTime == _o.currentBarDueTime &&
		recentBarCounter == _o.recentBarCounter &&
		tierDownDays == _o.tierDownDays &&
		currentBarStartTime == _o.currentBarStartTime &&
		totalDoneBarCount == _o.totalDoneBarCount &&
		preferredTimeZone == _o.preferredTimeZone;
}

const char *CvlConfigParams::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("stateFlags=");
	_buf.appendUint(stateFlags);
	_buf.append(',');
	_buf.append("daysToExpire=");
	_buf.appendInt(daysToExpire);
	_buf.append(',');
	_buf.append("tierUpDays=");
	_buf.appendInt(tierUpDays);
	_buf.append(',');
	_buf.append("tierUpBars=");
	_buf.appendInt(tierUpBars);
	_buf.append(',');
	_buf.append("exchangePercent=");
	_buf.appendInt(exchangePercent);
	_buf.append(',');
	_buf.append("boostEnabled=");
	_buf.appendUint(boostEnabled);
	_buf.append(',');
	_buf.append("currentBarDueTime=");
	_buf.appendUint(currentBarDueTime);
	_buf.append(',');
	_buf.append("recentBarCounter=");
	_buf.appendUint(recentBarCounter);
	_buf.append(',');
	_buf.append("tierDownDays=");
	_buf.appendInt(tierDownDays);
	_buf.append(',');
	_buf.append("currentBarStartTime=");
	_buf.appendUint(currentBarStartTime);
	_buf.append(',');
	_buf.append("totalDoneBarCount=");
	_buf.appendInt(totalDoneBarCount);
	_buf.append(',');
	_buf.append("preferredTimeZone=");
	_buf.appendInt(preferredTimeZone);
	_buf.append('}');
	return _buf.c_str();
}

void CvlConfigParams::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(CvlConfigParams())) // not empty
	{
		_body.composeUINT32(stateFlags);
		_body.composeINT32(daysToExpire);
		_body.composeINT32(tierUpDays);
		_body.composeINT32(tierUpBars);
		_body.composeINT32(exchangePercent);
		_body.composeBOOL(boostEnabled);
		_body.composeUINT32(currentBarDueTime);
		_body.composeUINT32(recentBarCounter);
		_body.composeINT32(tierDownDays);
		_body.composeUINT32(currentBarStartTime);
		_body.composeINT32(totalDoneBarCount);
		_body.composeINT32(preferredTimeZone);
	}

	_msg.composeMsgBody(_body);
}

void CvlConfigParams::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(stateFlags);
	_parser0.parseINT32(daysToExpire);
	_parser0.parseINT32(tierUpDays);
	_parser0.parseINT32(tierUpBars);
	_parser0.parseINT32(exchangePercent);
	_parser0.parseBOOL(boostEnabled);
	_parser0.parseUINT32(currentBarDueTime);
	_parser0.parseUINT32(recentBarCounter);
	_parser0.parseINT32(tierDownDays);
	_parser0.parseUINT32(currentBarStartTime);
	_parser0.parseINT32(totalDoneBarCount);
	if(_parser0.parseEnded()) return;
	_parser0.parseINT32(preferredTimeZone);
}

/*static*/ void CvlConfigParams::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	UINT32 stateFlags; _parser0.parseUINT32(stateFlags);
	AtfValidator::validateInt(_descr, "stateFlags", stateFlags, _checker, __FILE__, __LINE__);
	INT32 daysToExpire; _parser0.parseINT32(daysToExpire);
	AtfValidator::validateInt(_descr, "daysToExpire", daysToExpire, _checker, __FILE__, __LINE__);
	INT32 tierUpDays; _parser0.parseINT32(tierUpDays);
	AtfValidator::validateInt(_descr, "tierUpDays", tierUpDays, _checker, __FILE__, __LINE__);
	INT32 tierUpBars; _parser0.parseINT32(tierUpBars);
	AtfValidator::validateInt(_descr, "tierUpBars", tierUpBars, _checker, __FILE__, __LINE__);
	INT32 exchangePercent; _parser0.parseINT32(exchangePercent);
	AtfValidator::validateInt(_descr, "exchangePercent", exchangePercent, _checker, __FILE__, __LINE__);
	bool boostEnabled; _parser0.parseBOOL(boostEnabled);
	AtfValidator::validateInt(_descr, "boostEnabled", boostEnabled, _checker, __FILE__, __LINE__);
	UINT32 currentBarDueTime; _parser0.parseUINT32(currentBarDueTime);
	AtfValidator::validateInt(_descr, "currentBarDueTime", currentBarDueTime, _checker, __FILE__, __LINE__);
	UINT32 recentBarCounter; _parser0.parseUINT32(recentBarCounter);
	AtfValidator::validateInt(_descr, "recentBarCounter", recentBarCounter, _checker, __FILE__, __LINE__);
	INT32 tierDownDays; _parser0.parseINT32(tierDownDays);
	AtfValidator::validateInt(_descr, "tierDownDays", tierDownDays, _checker, __FILE__, __LINE__);
	UINT32 currentBarStartTime; _parser0.parseUINT32(currentBarStartTime);
	AtfValidator::validateInt(_descr, "currentBarStartTime", currentBarStartTime, _checker, __FILE__, __LINE__);
	INT32 totalDoneBarCount; _parser0.parseINT32(totalDoneBarCount);
	AtfValidator::validateInt(_descr, "totalDoneBarCount", totalDoneBarCount, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	INT32 preferredTimeZone; _parser0.parseINT32(preferredTimeZone);
	AtfValidator::validateInt(_descr, "preferredTimeZone", preferredTimeZone, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    CvlClientUserBar
//=================================================================

CvlClientUserBar::CvlClientUserBar()
{
	clear();
}

void CvlClientUserBar::clear()
{
	tierId = 0;
	flags = 0;
	currentBoostRemaining = 0;
	nextBoostTime = 0;
	barProgress = 0;
	barTarget = 0;
	doneBarCount = 0;
	tierUpEnd = 0;
	starCoinBalance = 0;
}

bool CvlClientUserBar::equals(const CvlClientUserBar& _o) const
{
	return tierId == _o.tierId &&
		flags == _o.flags &&
		currentBoostRemaining == _o.currentBoostRemaining &&
		nextBoostTime == _o.nextBoostTime &&
		barProgress == _o.barProgress &&
		barTarget == _o.barTarget &&
		doneBarCount == _o.doneBarCount &&
		tierUpEnd == _o.tierUpEnd &&
		starCoinBalance == _o.starCoinBalance;
}

const char *CvlClientUserBar::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("tierId=");
	_buf.appendUint(tierId);
	_buf.append(',');
	_buf.append("flags=");
	_buf.appendUint(flags);
	_buf.append(',');
	_buf.append("currentBoostRemaining=");
	_buf.appendInt(currentBoostRemaining);
	_buf.append(',');
	_buf.append("nextBoostTime=");
	_buf.appendUint(nextBoostTime);
	_buf.append(',');
	_buf.append("barProgress=");
	_buf.appendInt(barProgress);
	_buf.append(',');
	_buf.append("barTarget=");
	_buf.appendInt(barTarget);
	_buf.append(',');
	_buf.append("doneBarCount=");
	_buf.appendInt(doneBarCount);
	_buf.append(',');
	_buf.append("tierUpEnd=");
	_buf.appendUint(tierUpEnd);
	_buf.append(',');
	_buf.append("starCoinBalance=");
	_buf.appendInt(starCoinBalance);
	_buf.append('}');
	return _buf.c_str();
}

void CvlClientUserBar::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(CvlClientUserBar())) // not empty
	{
		_body.composeUINT32(tierId);
		_body.composeUINT32(flags);
		_body.composeINT32(currentBoostRemaining);
		_body.composeUINT32(nextBoostTime);
		_body.composeINT32(barProgress);
		_body.composeINT32(barTarget);
		_body.composeINT32(doneBarCount);
		_body.composeUINT32(tierUpEnd);
		_body.composeINT32(starCoinBalance);
	}

	_msg.composeMsgBody(_body);
}

void CvlClientUserBar::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT32(tierId);
	_parser0.parseUINT32(flags);
	_parser0.parseINT32(currentBoostRemaining);
	_parser0.parseUINT32(nextBoostTime);
	_parser0.parseINT32(barProgress);
	_parser0.parseINT32(barTarget);
	_parser0.parseINT32(doneBarCount);
	_parser0.parseUINT32(tierUpEnd);
	_parser0.parseINT32(starCoinBalance);
}

/*static*/ void CvlClientUserBar::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	UINT32 tierId; _parser0.parseUINT32(tierId);
	AtfValidator::validateInt(_descr, "tierId", tierId, _checker, __FILE__, __LINE__);
	UINT32 flags; _parser0.parseUINT32(flags);
	AtfValidator::validateInt(_descr, "flags", flags, _checker, __FILE__, __LINE__);
	INT32 currentBoostRemaining; _parser0.parseINT32(currentBoostRemaining);
	AtfValidator::validateInt(_descr, "currentBoostRemaining", currentBoostRemaining, _checker, __FILE__, __LINE__);
	UINT32 nextBoostTime; _parser0.parseUINT32(nextBoostTime);
	AtfValidator::validateInt(_descr, "nextBoostTime", nextBoostTime, _checker, __FILE__, __LINE__);
	INT32 barProgress; _parser0.parseINT32(barProgress);
	AtfValidator::validateInt(_descr, "barProgress", barProgress, _checker, __FILE__, __LINE__);
	INT32 barTarget; _parser0.parseINT32(barTarget);
	AtfValidator::validateInt(_descr, "barTarget", barTarget, _checker, __FILE__, __LINE__);
	INT32 doneBarCount; _parser0.parseINT32(doneBarCount);
	AtfValidator::validateInt(_descr, "doneBarCount", doneBarCount, _checker, __FILE__, __LINE__);
	UINT32 tierUpEnd; _parser0.parseUINT32(tierUpEnd);
	AtfValidator::validateInt(_descr, "tierUpEnd", tierUpEnd, _checker, __FILE__, __LINE__);
	INT32 starCoinBalance; _parser0.parseINT32(starCoinBalance);
	AtfValidator::validateInt(_descr, "starCoinBalance", starCoinBalance, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                    CvlClientUserBarNotification
//=================================================================

CvlClientUserBarNotification::CvlClientUserBarNotification()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

CvlClientUserBarNotification::CvlClientUserBarNotification(CvlClientUserBarNotification&& _o)
	: properties(std::move(_o.properties))
{
}

CvlClientUserBarNotification& CvlClientUserBarNotification::operator=(CvlClientUserBarNotification&& _o)
{
	if(this != &_o)
	{
		properties = std::move(_o.properties);
	}
	return *this;
}

#endif

void CvlClientUserBarNotification::clear()
{
	properties.clear();
}

bool CvlClientUserBarNotification::equals(const CvlClientUserBarNotification& _o) const
{
	return properties.equals(_o.properties);
}

const char *CvlClientUserBarNotification::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("properties=");
	properties.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void CvlClientUserBarNotification::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(CvlClientUserBarNotification())) // not empty
	{
		properties.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void CvlClientUserBarNotification::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	properties.parseMsg(_parser0);
}

/*static*/ void CvlClientUserBarNotification::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	int szProperties = ThinAtf::LAtfVector< CvlClientUserBar, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("properties"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "properties", szProperties, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE
//=================================================================

Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE::Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE::Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE(Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE&& _o)
	: clientReqId(std::move(_o.clientReqId))
	, notify(std::move(_o.notify))
	, cvlConfig(std::move(_o.cvlConfig))
{
}

Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE& Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE::operator=(Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE&& _o)
{
	if(this != &_o)
	{
		clientReqId = std::move(_o.clientReqId);
		notify = std::move(_o.notify);
		cvlConfig = std::move(_o.cvlConfig);
	}
	return *this;
}

#endif

void Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE::clear()
{
	clientReqId = 0;
	notify.clear();
	cvlConfig.clear();
}

bool Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE::equals(const Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE& _o) const
{
	return clientReqId == _o.clientReqId &&
		notify.equals(_o.notify) &&
		cvlConfig.equals(_o.cvlConfig);
}

const char *Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE).append(")");
	_buf.append(',');
	_buf.append("clientReqId=");
	_buf.appendUint(clientReqId);
	_buf.append(',');
	_buf.append("notify=");
	notify.toTraceString(_buf);
	_buf.append(',');
	_buf.append("cvlConfig=");
	cvlConfig.toTraceString(_buf);
	return _buf.c_str();
}

void Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(clientReqId);
	notify.composeMsg(_msg);
	cvlConfig.composeMsg(_msg);
}

void Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(clientReqId);
	notify.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	cvlConfig.parseMsg(_parser);
}

/*static*/ void Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 clientReqId; _parser.parseUINT32(clientReqId);
	AtfValidator::validateInt(_descr, "clientReqId", clientReqId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	CvlClientUserBarNotification::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("notify"), _fieldsWithUnparsedContent);
	if(_parser.parseEnded()) return;
	CvlConfigParams::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cvlConfig"), _fieldsWithUnparsedContent);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER
//=================================================================

Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER::Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER()
{
	clear();
}

void Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER::clear()
{
}

bool Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER::equals(const Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER& _o) const
{
	return true;
}

const char *Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_GET_CVL_STATE_FOR_USER).append(")");
	return _buf.c_str();
}

void Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER::composeMsg(CommMsgBody& _msg) const
{
}

void Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_GET_CVL_STATE_FOR_USER";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY
//=================================================================

Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY::Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY::Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY(Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
	, bar(std::move(_o.bar))
	, cvlConfig(std::move(_o.cvlConfig))
{
}

Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY& Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY::operator=(Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
		bar = std::move(_o.bar);
		cvlConfig = std::move(_o.cvlConfig);
	}
	return *this;
}

#endif

void Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	bar.clear();
	cvlConfig.clear();
}

bool Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY::equals(const Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		bar.equals(_o.bar) &&
		cvlConfig.equals(_o.cvlConfig);
}

const char *Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("bar=");
		bar.toTraceString(_buf);
		_buf.append(',');
		_buf.append("cvlConfig=");
		cvlConfig.toTraceString(_buf);
	}
	return _buf.c_str();
}

void Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode)
	{
		_msg.composeString(errString);
	}
	else
	{
		bar.composeMsg(_msg);
		cvlConfig.composeMsg(_msg);
	}
}

void Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode)
	{
		_parser.parseStringP(errString);
	}
	else
	{
		bar.parseMsg(_parser);
		if(_parser.parseEnded()) return;
		cvlConfig.parseMsg(_parser);
	}
}

/*static*/ void Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if(errCode)
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		CvlClientUserBar::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("bar"), _fieldsWithUnparsedContent);
		if(_parser.parseEnded()) return;
		CvlConfigParams::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("cvlConfig"), _fieldsWithUnparsedContent);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CVL_OPTED_IN
//=================================================================

Protocol_MSG_LOBBYETC_CVL_OPTED_IN::Protocol_MSG_LOBBYETC_CVL_OPTED_IN()
{
	clear();
}

void Protocol_MSG_LOBBYETC_CVL_OPTED_IN::clear()
{
	optedIn = false;
}

bool Protocol_MSG_LOBBYETC_CVL_OPTED_IN::equals(const Protocol_MSG_LOBBYETC_CVL_OPTED_IN& _o) const
{
	return optedIn == _o.optedIn;
}

const char *Protocol_MSG_LOBBYETC_CVL_OPTED_IN::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CVL_OPTED_IN).append(")");
	_buf.append(',');
	_buf.append("optedIn=");
	_buf.appendUint(optedIn);
	return _buf.c_str();
}

void Protocol_MSG_LOBBYETC_CVL_OPTED_IN::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeBOOL(optedIn);
}

void Protocol_MSG_LOBBYETC_CVL_OPTED_IN::parseMsg(CommMsgParser& _parser)
{
	_parser.parseBOOL(optedIn);
}

/*static*/ void Protocol_MSG_LOBBYETC_CVL_OPTED_IN::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CVL_OPTED_IN";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	bool optedIn; _parser.parseBOOL(optedIn);
	AtfValidator::validateInt(_descr, "optedIn", optedIn, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY
//=================================================================

Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY::Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY::Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY(Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
{
}

Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY& Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY::operator=(Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
	}
	return *this;
}

#endif

void Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY::clear()
{
	errCode = 0;
	errString.clear();
}

bool Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY::equals(const Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CVL_OPTED_IN_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode)
	{
		_msg.composeString(errString);
	}
}

void Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode)
	{
		_parser.parseStringP(errString);
	}
}

/*static*/ void Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CVL_OPTED_IN_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if(errCode)
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    ClientChestData
//=================================================================

ClientChestData::ClientChestData()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ClientChestData::ClientChestData(ClientChestData&& _o)
	: logoName(std::move(_o.logoName))
	, availableUntil(std::move(_o.availableUntil))
	, skinType(std::move(_o.skinType))
	, chestText(std::move(_o.chestText))
	, chestDescription(std::move(_o.chestDescription))
	, chestId(std::move(_o.chestId))
	, lockType(std::move(_o.lockType))
	, icePromo(std::move(_o.icePromo))
	, customSkin(std::move(_o.customSkin))
	, assets(std::move(_o.assets))
{
}

ClientChestData& ClientChestData::operator=(ClientChestData&& _o)
{
	if(this != &_o)
	{
		logoName = std::move(_o.logoName);
		availableUntil = std::move(_o.availableUntil);
		skinType = std::move(_o.skinType);
		chestText = std::move(_o.chestText);
		chestDescription = std::move(_o.chestDescription);
		chestId = std::move(_o.chestId);
		lockType = std::move(_o.lockType);
		icePromo = std::move(_o.icePromo);
		customSkin = std::move(_o.customSkin);
		assets = std::move(_o.assets);
	}
	return *this;
}

#endif

void ClientChestData::clear()
{
	logoName.clear();
	availableUntil = 0;
	skinType = 0;
	chestText.clear();
	chestDescription.clear();
	chestId = 0;
	lockType = 0;
	icePromo.clear();
	customSkin.clear();
	assets.clear();
}

bool ClientChestData::equals(const ClientChestData& _o) const
{
	return logoName.equals(_o.logoName) &&
		availableUntil == _o.availableUntil &&
		skinType == _o.skinType &&
		chestText.equals(_o.chestText) &&
		chestDescription.equals(_o.chestDescription) &&
		chestId == _o.chestId &&
		lockType == _o.lockType &&
		icePromo.equals(_o.icePromo) &&
		customSkin.equals(_o.customSkin) &&
		assets.equals(_o.assets);
}

const char *ClientChestData::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("logoName=");
	_buf.append(logoName);
	_buf.append(',');
	_buf.append("availableUntil=");
	_buf.appendUint(availableUntil);
	_buf.append(',');
	_buf.append("skinType=");
	_buf.appendUint(skinType);
	_buf.append(',');
	_buf.append("chestText=");
	_buf.append(chestText);
	_buf.append(',');
	_buf.append("chestDescription=");
	_buf.append(chestDescription);
	_buf.append(',');
	_buf.append("chestId=");
	_buf.appendUint64(chestId);
	_buf.append(',');
	_buf.append("lockType=");
	_buf.appendInt(lockType);
	_buf.append(',');
	_buf.append("icePromo=");
	_buf.append(icePromo);
	_buf.append(',');
	_buf.append("customSkin=");
	_buf.append(customSkin);
	_buf.append(',');
	_buf.append("assets=");
	assets.toTraceString(_buf);
	_buf.append('}');
	return _buf.c_str();
}

void ClientChestData::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(ClientChestData())) // not empty
	{
		_body.composeString(logoName);
		_body.composeUINT32(availableUntil);
		_body.composeBYTE(skinType);
		_body.composeString(chestText);
		_body.composeString(chestDescription);
		_body.composeUINT64(chestId);
		_body.composeINT32(lockType);
		_body.composeString(icePromo);
		_body.composeString(customSkin);
		assets.composeMsg(_body);
	}

	_msg.composeMsgBody(_body);
}

void ClientChestData::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(logoName);
	_parser0.parseUINT32(availableUntil);
	if(_parser0.parseEnded()) return;
	_parser0.parseBYTE(skinType);
	_parser0.parseStringP(chestText);
	_parser0.parseStringP(chestDescription);
	_parser0.parseUINT64(chestId);
	if(_parser0.parseEnded()) return;
	_parser0.parseINT32(lockType);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringP(icePromo);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringP(customSkin);
	if(_parser0.parseEnded()) return;
	assets.parseMsg(_parser0);
}

/*static*/ void ClientChestData::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	const char *_dummy = "";
	_parser0.parseStringN(_dummy, 0, "logoName"); size_t szLogoName = strlen(_dummy);
	AtfValidator::validateInt(_descr, "logoName", szLogoName, _checker, __FILE__, __LINE__);
	UINT32 availableUntil; _parser0.parseUINT32(availableUntil);
	AtfValidator::validateInt(_descr, "availableUntil", availableUntil, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	BYTE skinType; _parser0.parseBYTE(skinType);
	AtfValidator::validateInt(_descr, "skinType", skinType, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "chestText"); size_t szChestText = strlen(_dummy);
	AtfValidator::validateInt(_descr, "chestText", szChestText, _checker, __FILE__, __LINE__);
	_parser0.parseStringN(_dummy, 0, "chestDescription"); size_t szChestDescription = strlen(_dummy);
	AtfValidator::validateInt(_descr, "chestDescription", szChestDescription, _checker, __FILE__, __LINE__);
	UINT64 chestId; _parser0.parseUINT64(chestId);
	AtfValidator::validateUint(_descr, "chestId", chestId, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	INT32 lockType; _parser0.parseINT32(lockType);
	AtfValidator::validateInt(_descr, "lockType", lockType, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringN(_dummy, 0, "icePromo"); size_t szIcePromo = strlen(_dummy);
	AtfValidator::validateInt(_descr, "icePromo", szIcePromo, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	_parser0.parseStringN(_dummy, 0, "customSkin"); size_t szCustomSkin = strlen(_dummy);
	AtfValidator::validateInt(_descr, "customSkin", szCustomSkin, _checker, __FILE__, __LINE__);
	if(_parser0.parseEnded()) return;
	PString _descbuf;
	int szAssets = ThinAtf::LAtfVector< ChestAsset, 4 >::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("assets"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "assets", szAssets, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED
//=================================================================

Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED::Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED::Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED(Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED&& _o)
	: clientReqId(std::move(_o.clientReqId))
	, isUserOptedIn(std::move(_o.isUserOptedIn))
	, chestCount(std::move(_o.chestCount))
	, chestToShow(std::move(_o.chestToShow))
	, lockedChestCount(std::move(_o.lockedChestCount))
	, lockedChestToShow(std::move(_o.lockedChestToShow))
	, stateFlags(std::move(_o.stateFlags))
{
}

Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED& Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED::operator=(Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED&& _o)
{
	if(this != &_o)
	{
		clientReqId = std::move(_o.clientReqId);
		isUserOptedIn = std::move(_o.isUserOptedIn);
		chestCount = std::move(_o.chestCount);
		chestToShow = std::move(_o.chestToShow);
		lockedChestCount = std::move(_o.lockedChestCount);
		lockedChestToShow = std::move(_o.lockedChestToShow);
		stateFlags = std::move(_o.stateFlags);
	}
	return *this;
}

#endif

void Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED::clear()
{
	clientReqId = 0;
	isUserOptedIn = false;
	chestCount = 0;
	chestToShow.clear();
	lockedChestCount = 0;
	lockedChestToShow.clear();
	stateFlags = 0;
}

bool Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED::equals(const Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED& _o) const
{
	return clientReqId == _o.clientReqId &&
		isUserOptedIn == _o.isUserOptedIn &&
		chestCount == _o.chestCount &&
		chestToShow.equals(_o.chestToShow) &&
		lockedChestCount == _o.lockedChestCount &&
		lockedChestToShow.equals(_o.lockedChestToShow) &&
		stateFlags == _o.stateFlags;
}

const char *Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED).append(")");
	_buf.append(',');
	_buf.append("clientReqId=");
	_buf.appendUint(clientReqId);
	_buf.append(',');
	_buf.append("isUserOptedIn=");
	_buf.appendUint(isUserOptedIn);
	_buf.append(',');
	_buf.append("chestCount=");
	_buf.appendUint(chestCount);
	_buf.append(',');
	_buf.append("chestToShow=");
	chestToShow.toTraceString(_buf);
	_buf.append(',');
	_buf.append("lockedChestCount=");
	_buf.appendUint(lockedChestCount);
	_buf.append(',');
	_buf.append("lockedChestToShow=");
	lockedChestToShow.toTraceString(_buf);
	_buf.append(',');
	_buf.append("stateFlags=");
	_buf.appendUint(stateFlags);
	return _buf.c_str();
}

void Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(clientReqId);
	_msg.composeBOOL(isUserOptedIn);
	_msg.composeUINT32(chestCount);
	chestToShow.composeMsg(_msg);
	_msg.composeUINT32(lockedChestCount);
	lockedChestToShow.composeMsg(_msg);
	_msg.composeUINT32(stateFlags);
}

void Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(clientReqId);
	_parser.parseBOOL(isUserOptedIn);
	_parser.parseUINT32(chestCount);
	chestToShow.parseMsg(_parser);
	if(_parser.parseEnded()) return;
	_parser.parseUINT32(lockedChestCount);
	lockedChestToShow.parseMsg(_parser);
	_parser.parseUINT32(stateFlags);
}

/*static*/ void Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 clientReqId; _parser.parseUINT32(clientReqId);
	AtfValidator::validateInt(_descr, "clientReqId", clientReqId, _checker, __FILE__, __LINE__);
	bool isUserOptedIn; _parser.parseBOOL(isUserOptedIn);
	AtfValidator::validateInt(_descr, "isUserOptedIn", isUserOptedIn, _checker, __FILE__, __LINE__);
	UINT32 chestCount; _parser.parseUINT32(chestCount);
	AtfValidator::validateInt(_descr, "chestCount", chestCount, _checker, __FILE__, __LINE__);
	PString _descbuf;
	ClientChestData::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("chestToShow"), _fieldsWithUnparsedContent);
	if(_parser.parseEnded()) return;
	UINT32 lockedChestCount; _parser.parseUINT32(lockedChestCount);
	AtfValidator::validateInt(_descr, "lockedChestCount", lockedChestCount, _checker, __FILE__, __LINE__);
	ClientChestData::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("lockedChestToShow"), _fieldsWithUnparsedContent);
	UINT32 stateFlags; _parser.parseUINT32(stateFlags);
	AtfValidator::validateInt(_descr, "stateFlags", stateFlags, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                    ClientChestDataEx
//=================================================================

ClientChestDataEx::ClientChestDataEx()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

ClientChestDataEx::ClientChestDataEx(ClientChestDataEx&& _o)
	: commonData(std::move(_o.commonData))
	, chestId(std::move(_o.chestId))
	, tierId(std::move(_o.tierId))
	, chestType(std::move(_o.chestType))
	, availableAfter(std::move(_o.availableAfter))
{
}

ClientChestDataEx& ClientChestDataEx::operator=(ClientChestDataEx&& _o)
{
	if(this != &_o)
	{
		commonData = std::move(_o.commonData);
		chestId = std::move(_o.chestId);
		tierId = std::move(_o.tierId);
		chestType = std::move(_o.chestType);
		availableAfter = std::move(_o.availableAfter);
	}
	return *this;
}

#endif

void ClientChestDataEx::clear()
{
	commonData.clear();
	chestId = 0;
	tierId = 0;
	chestType = 0;
	availableAfter = 0;
}

bool ClientChestDataEx::equals(const ClientChestDataEx& _o) const
{
	return commonData.equals(_o.commonData) &&
		chestId == _o.chestId &&
		tierId == _o.tierId &&
		chestType == _o.chestType &&
		availableAfter == _o.availableAfter;
}

const char *ClientChestDataEx::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("commonData=");
	commonData.toTraceString(_buf);
	_buf.append(',');
	_buf.append("chestId=");
	_buf.appendUint64(chestId);
	_buf.append(',');
	_buf.append("tierId=");
	_buf.appendUint(tierId);
	_buf.append(',');
	_buf.append("chestType=");
	_buf.appendUint(chestType);
	_buf.append(',');
	_buf.append("availableAfter=");
	_buf.appendUint(availableAfter);
	_buf.append('}');
	return _buf.c_str();
}

void ClientChestDataEx::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(ClientChestDataEx())) // not empty
	{
		commonData.composeMsg(_body);
		_body.composeUINT64(chestId);
		_body.composeUINT32(tierId);
		_body.composeBYTE(chestType);
		_body.composeUINT32(availableAfter);
	}

	_msg.composeMsgBody(_body);
}

void ClientChestDataEx::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	commonData.parseMsg(_parser0);
	_parser0.parseUINT64(chestId);
	_parser0.parseUINT32(tierId);
	_parser0.parseBYTE(chestType);
	_parser0.parseUINT32(availableAfter);
}

/*static*/ void ClientChestDataEx::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent)
{
	AtfMsgBodyParserView _parser0(_parser);
	_parser.skipMsgBody();
	PString _descbuf;
	ClientChestData::validateMsg(_parser0, _checker, _descbuf.assign(_descr).append('.').append("commonData"), _fieldsWithUnparsedContent);
	UINT64 chestId; _parser0.parseUINT64(chestId);
	AtfValidator::validateUint(_descr, "chestId", chestId, _checker, __FILE__, __LINE__);
	UINT32 tierId; _parser0.parseUINT32(tierId);
	AtfValidator::validateInt(_descr, "tierId", tierId, _checker, __FILE__, __LINE__);
	BYTE chestType; _parser0.parseBYTE(chestType);
	AtfValidator::validateInt(_descr, "chestType", chestType, _checker, __FILE__, __LINE__);
	UINT32 availableAfter; _parser0.parseUINT32(availableAfter);
	AtfValidator::validateInt(_descr, "availableAfter", availableAfter, _checker, __FILE__, __LINE__);
	AtfValidator::validateEmbeddedMsgbodyParser(_descr, _parser0, _parser._shift(), __FILE__, __LINE__);
	if(!_parser0.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser0);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_GET_USER_BARS
//=================================================================

Protocol_MSG_LOBBYETC_GET_USER_BARS::Protocol_MSG_LOBBYETC_GET_USER_BARS()
{
	clear();
}

void Protocol_MSG_LOBBYETC_GET_USER_BARS::clear()
{
}

bool Protocol_MSG_LOBBYETC_GET_USER_BARS::equals(const Protocol_MSG_LOBBYETC_GET_USER_BARS& _o) const
{
	return true;
}

const char *Protocol_MSG_LOBBYETC_GET_USER_BARS::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_GET_USER_BARS).append(")");
	return _buf.c_str();
}

void Protocol_MSG_LOBBYETC_GET_USER_BARS::composeMsg(CommMsgBody& _msg) const
{
}

void Protocol_MSG_LOBBYETC_GET_USER_BARS::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void Protocol_MSG_LOBBYETC_GET_USER_BARS::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_GET_USER_BARS";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY
//=================================================================

Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY::Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY::Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY(Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
	, availableChests(std::move(_o.availableChests))
	, lockedChests(std::move(_o.lockedChests))
	, stateFlags(std::move(_o.stateFlags))
{
}

Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY& Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY::operator=(Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
		availableChests = std::move(_o.availableChests);
		lockedChests = std::move(_o.lockedChests);
		stateFlags = std::move(_o.stateFlags);
	}
	return *this;
}

#endif

void Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY::clear()
{
	errCode = 0;
	errString.clear();
	availableChests.clear();
	lockedChests.clear();
	stateFlags = 0;
}

bool Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY::equals(const Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString) &&
		availableChests.equals(_o.availableChests) &&
		lockedChests.equals(_o.lockedChests) &&
		stateFlags == _o.stateFlags;
}

const char *Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_GET_USER_BARS_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	else
	{
		_buf.append(',');
		_buf.append("availableChests=");
		availableChests.toTraceString(_buf);
		_buf.append(',');
		_buf.append("lockedChests=");
		lockedChests.toTraceString(_buf);
		_buf.append(',');
		_buf.append("stateFlags=");
		_buf.appendUint(stateFlags);
	}
	return _buf.c_str();
}

void Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode)
	{
		_msg.composeString(errString);
	}
	else
	{
		availableChests.composeMsg(_msg);
		lockedChests.composeMsg(_msg);
		_msg.composeUINT32(stateFlags);
	}
}

void Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode)
	{
		_parser.parseStringP(errString);
	}
	else
	{
		availableChests.parseMsg(_parser);
		lockedChests.parseMsg(_parser);
		_parser.parseUINT32(stateFlags);
	}
}

/*static*/ void Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_GET_USER_BARS_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if(errCode)
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	else
	{
		PString _descbuf;
		int szAvailableChests = ThinAtf::LAtfVector< ClientChestDataEx, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("availableChests"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "availableChests", szAvailableChests, _checker, __FILE__, __LINE__);
		int szLockedChests = ThinAtf::LAtfVector< ClientChestDataEx, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("lockedChests"), _fieldsWithUnparsedContent);
		AtfValidator::validateInt(_descr, "lockedChests", szLockedChests, _checker, __FILE__, __LINE__);
		UINT32 stateFlags; _parser.parseUINT32(stateFlags);
		AtfValidator::validateInt(_descr, "stateFlags", stateFlags, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION
//=================================================================

Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION::Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION::Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION(Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION&& _o)
	: clientReqId(std::move(_o.clientReqId))
	, availableChests(std::move(_o.availableChests))
	, lockedChests(std::move(_o.lockedChests))
	, stateFlags(std::move(_o.stateFlags))
{
}

Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION& Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION::operator=(Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION&& _o)
{
	if(this != &_o)
	{
		clientReqId = std::move(_o.clientReqId);
		availableChests = std::move(_o.availableChests);
		lockedChests = std::move(_o.lockedChests);
		stateFlags = std::move(_o.stateFlags);
	}
	return *this;
}

#endif

void Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION::clear()
{
	clientReqId = 0;
	availableChests.clear();
	lockedChests.clear();
	stateFlags = 0;
}

bool Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION::equals(const Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION& _o) const
{
	return clientReqId == _o.clientReqId &&
		availableChests.equals(_o.availableChests) &&
		lockedChests.equals(_o.lockedChests) &&
		stateFlags == _o.stateFlags;
}

const char *Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION).append(")");
	_buf.append(',');
	_buf.append("clientReqId=");
	_buf.appendUint(clientReqId);
	_buf.append(',');
	_buf.append("availableChests=");
	availableChests.toTraceString(_buf);
	_buf.append(',');
	_buf.append("lockedChests=");
	lockedChests.toTraceString(_buf);
	_buf.append(',');
	_buf.append("stateFlags=");
	_buf.appendUint(stateFlags);
	return _buf.c_str();
}

void Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeUINT32(clientReqId);
	availableChests.composeMsg(_msg);
	lockedChests.composeMsg(_msg);
	_msg.composeUINT32(stateFlags);
}

void Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION::parseMsg(CommMsgParser& _parser)
{
	_parser.parseUINT32(clientReqId);
	availableChests.parseMsg(_parser);
	lockedChests.parseMsg(_parser);
	_parser.parseUINT32(stateFlags);
}

/*static*/ void Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	UINT32 clientReqId; _parser.parseUINT32(clientReqId);
	AtfValidator::validateInt(_descr, "clientReqId", clientReqId, _checker, __FILE__, __LINE__);
	PString _descbuf;
	int szAvailableChests = ThinAtf::LAtfVector< ClientChestDataEx, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("availableChests"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "availableChests", szAvailableChests, _checker, __FILE__, __LINE__);
	int szLockedChests = ThinAtf::LAtfVector< ClientChestDataEx, 4 >::validateMsg(_parser, _checker, _descbuf.assign(_descr).append('.').append("lockedChests"), _fieldsWithUnparsedContent);
	AtfValidator::validateInt(_descr, "lockedChests", szLockedChests, _checker, __FILE__, __LINE__);
	UINT32 stateFlags; _parser.parseUINT32(stateFlags);
	AtfValidator::validateInt(_descr, "stateFlags", stateFlags, _checker, __FILE__, __LINE__);
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR
//=================================================================

Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR::Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR()
{
	clear();
}

void Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR::clear()
{
}

bool Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR::equals(const Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR& _o) const
{
	return true;
}

const char *Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR).append(")");
	return _buf.c_str();
}

void Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR::composeMsg(CommMsgBody& _msg) const
{
}

void Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR::parseMsg(CommMsgParser& _parser)
{
}

/*static*/ void Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY
//=================================================================

Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY::Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY::Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY(Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY&& _o)
	: errCode(std::move(_o.errCode))
	, errString(std::move(_o.errString))
{
}

Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY& Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY::operator=(Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY&& _o)
{
	if(this != &_o)
	{
		errCode = std::move(_o.errCode);
		errString = std::move(_o.errString);
	}
	return *this;
}

#endif

void Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY::clear()
{
	errCode = 0;
	errString.clear();
}

bool Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY::equals(const Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY& _o) const
{
	return errCode == _o.errCode &&
		errString.equals(_o.errString);
}

const char *Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY).append(")");
	_buf.append(',');
	_buf.append("errCode=");
	_buf.appendInt(errCode);
	if(errCode)
	{
		_buf.append(',');
		_buf.append("errString=");
		_buf.append(errString);
	}
	return _buf.c_str();
}

void Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeINT16(errCode);
	if(errCode)
	{
		_msg.composeString(errString);
	}
}

void Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY::parseMsg(CommMsgParser& _parser)
{
	_parser.parseINT16(errCode);
	if(errCode)
	{
		_parser.parseStringP(errString);
	}
}

/*static*/ void Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY::validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent)
{
	const char *_descr = "MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY";
	if(_checker)
	{
		if(!_checker->isValidationEnabled(_descr)) return;
		if(!_checker->hasLimitDefined(_descr)) _checker = nullptr;
	}

	const char *_dummy = "";
	INT16 errCode = 0;
	_parser.parseINT16(errCode);
	AtfValidator::validateInt(_descr, "errCode", errCode, _checker, __FILE__, __LINE__);
	if(errCode)
	{
		_parser.parseStringN(_dummy, 0, "errString"); size_t szErrString = strlen(_dummy);
		AtfValidator::validateInt(_descr, "errString", szErrString, _checker, __FILE__, __LINE__);
	}
	if(!_parser.parseEnded()) AtfValidator::logUnparsedInfo(_fieldsWithUnparsedContent, _descr, _parser);
}

//=================================================================
//                ProtocolFactory
//=================================================================

/* static */ bool ProtocolFactory::validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded)
{
	if(!strcmp(_nameSpace, ""))
	{
		switch(_msgId)
		{
			case MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE: Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED: Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CVL_OPTED_IN: Protocol_MSG_LOBBYETC_CVL_OPTED_IN::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_CVL_OPTED_IN_REPLY: Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR: Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY: Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_GET_CVL_STATE_FOR_USER: Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY: Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_GET_USER_BARS: Protocol_MSG_LOBBYETC_GET_USER_BARS::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION: Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
			case MSG_LOBBYETC_GET_USER_BARS_REPLY: Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY::validateMsg(_parser, _checker, _fieldsNotParseEnded); return true;
		}
	}
	
	return false;
}

