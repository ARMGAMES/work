/**
 * cvlclientprotocol.h
 *
 * This file was auto-generated from cvlclientprotocol.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -genMoveConstructor cvlclientprotocol.txt
 */

#ifndef ATF_PROTOCOL_DEFFILE_CVLCLIENTPROTOCOL_H
#define ATF_PROTOCOL_DEFFILE_CVLCLIENTPROTOCOL_H

//------------------------------------------------------------------------------
//	LobbyEtc Lobby <-> Client Protocol
//------------------------------------------------------------------------------
//
//	Copyright (c) 2001-2017 PYR Software Ltd. All rights reserved. This document
//	is for the use of licensed users only and is subject to the terms and
//	conditions of the accompanying and/or applicable license between you and
//	PYR Software Ltd, including without limitation those terms and conditions
//	prohibiting unauthorized translation, reverse engineering, decompilation,
//	disassembly, and other inappropriate use of any software provided. Any
//	unauthorized use, copying, modification, distribution, publication or
//	disclosure of information is a violation of copyright laws. No reproduction
//	in whole or in part of this document may be made without express written
//	consent of PYR Software Ltd.
//
//
//------------------------------------------------------------------------------

#include "UserDefStructs.h"
#include "LobbyEtc.h"

class ProtocolFactory
{
public:
	static Atf::MessageProtocol* createMessageProtocolObject(const char *_nameSpace, UINT32 _msgId);
	static bool validateProtocolMessageFromJSONString(const char *_nameSpace, UINT32 _msgId, const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
	static bool validateProtocolMessage(const char *_nameSpace, UINT32 _msgId, CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsNotParseEnded);
};


// PYR-77216, PYR-79304
enum eCvlUserStateFlags
{
	eCvlUserStateFlags_CVL2					= 1 << 0,		// 1 - CVL2 configuration
	eCvlUserStateFlags_TierUpPopUp			= 1 << 1,		// 2 - pending tier up notification
	eCvlUserStateFlags_TierDownPopUp		= 1 << 2,		// 4 - pending tier down notification
	eCvlUserStateFlags_TierDownExchagePopUp = 1 << 3,		// 8- pending tier down and credited exchange bar notification
	eCvlUserStateFlags_goingToTierUp		= 1 << 4,		// 16 - going to tierup. Not persistant flag
	eCvlUserStateFlags_goingToTierDown		= 1 << 5,		// 32 - going to tierdown. Not persistant flag
	eCvlUserStateFlags_canExchange			= 1 << 6,		// 64 - all conditions for bar exchage are met. Not persistant flag

	eCvlUserStateFlags_PopUp = (eCvlUserStateFlags_TierUpPopUp | eCvlUserStateFlags_TierDownPopUp | eCvlUserStateFlags_TierDownExchagePopUp) 	// any pop up
};

enum CvlClientUserBarFlags
{
	CvlClientUserBarFlags_tierUpIndicator		= 1 << 0,		// 1 - going to tier up
	CvlClientUserBarFlags_notOptedIn			= 1 << 1, 		// 2 - user not opted in
	CvlClientUserBarFlags_OptInNotification		= 1 << 2, 		// 4 - opt in notification is active
	CvlClientUserBarFlags_excludedUser			= 1 << 3, 		// 8 - hide SR interface
	CvlClientUserBarFlags_CVL2					= 1 << 4, 		// 16 - the CVL2 version PYR-79304
	CvlClientUserBarFlags_excludedFromSR		= 1 << 5, 		// 32 - user was excluded from SR
	CvlClientUserBarFlags_goingToTierUp			= 1 << 6,		// 64 - going to tierup state for the bar
	CvlClientUserBarFlags_goingToTierDown		= 1 << 7,		// 128 - going to tierdown state for the bar
};

// PYR-123328
enum eChestAssetType
{
	eChestAssetType_Invalid				= 0,
	eChestAssetType_Podium				= 1,
	eChestAssetType_Background			= 2,
	eChestAssetType_ChestSkin			= 3,
	eChestAssetType_Logo				= 4,
	eChestAssetType_NotificationHeader	= 5,
};

// PYR-123328
struct ChestAsset
{
	// M(44s) - M(id,type,uriHint)
	INT32 id;	// uniqie asset id
	INT32 type;	// asset type: podium, background, etc. See eChestAssetType enum
	PString uriHint;	// asset value

	ChestAsset();
	void clear();
	bool equals(const ChestAsset&) const;
	const char *toTraceString(PString& _str) const;
	const char *toXmlString(const char *_element, PString& _str) const;
	bool fromXmlString(const PString& _str);
	void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
	void parseMsg(CommMsgParser& _parser);
	const char *toJSONString(PString& _str) const;
	void fromJSONString(const PString& _str);
	static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

	// @Override
	ChestAsset( const INT32 id_, const INT32 type_,  const PString& uriHint_ );

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
	ChestAsset(ChestAsset&&);
	ChestAsset& operator=(ChestAsset&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
	ChestAsset(const ChestAsset&) = default;
	ChestAsset& operator=(const ChestAsset&) = default;
#endif
#endif
};

// PYR-77216
// CVL2 configuration parameters
struct CvlConfigParams
{
	// M(44444b444444) - M(stateFlags,daysToExpire,tierUpDays,tierUpBars,exchangePercent,boostEnabled,currentBarDueTime,recentBarCounter,tierDownDays,currentBarStartTime,totalDoneBarCount,preferredTimeZone)
	UINT32 stateFlags;	// eCvlUserStateFlags_CVL2 for CVL2. See eCvlUserStateFlags
	INT32 daysToExpire;	// Number of days after which the current bar should expire
	INT32 tierUpDays;	// Number of days over which to evaluate tierUp candidacy
	INT32 tierUpBars;	// Number of completed bars needed for tierUp candidacy
	INT32 exchangePercent;	// Percent of progress bar required to be eligible for exchange (100% means this bar cannot be exchanged)
	bool boostEnabled;	// Boost is enabled
	UINT32 currentBarDueTime;	// time_t. Due time when the current bar must be complited. If 0 - the bar will never expired.
	UINT32 recentBarCounter;	// bars of the current tier
	INT32 tierDownDays;	// Show the tierdown warning if the user has less than this paramater days to complete current progress bar
	UINT32 currentBarStartTime;	// time_t. When the current bar was started
	INT32 totalDoneBarCount;	// total done bar counter
	INT32 preferredTimeZone;	// user preferred TimeZone eTimeZone. PYR-92226

	CvlConfigParams();
	void clear();
	bool equals(const CvlConfigParams&) const;
	const char *toTraceString(PString& _str) const;
	const char *toXmlString(const char *_element, PString& _str) const;
	bool fromXmlString(const PString& _str);
	void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
	void parseMsg(CommMsgParser& _parser);
	const char *toJSONString(PString& _str) const;
	void fromJSONString(const PString& _str);
	static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
};

struct CvlClientUserBar
{
	// M(444444444) - M(tierId,flags,currentBoostRemaining,nextBoostTime,barProgress,barTarget,doneBarCount,tierUpEnd,starCoinBalance)
	UINT32 tierId;
	UINT32 flags;	// see CvlClientUserBarFlags above
	INT32 currentBoostRemaining;
	UINT32 nextBoostTime;	// time_t
	INT32 barProgress;
	INT32 barTarget;
	INT32 doneBarCount;	// done bar counter for current reported bar
	UINT32 tierUpEnd;	// time_t
	INT32 starCoinBalance;

	CvlClientUserBar();
	void clear();
	bool equals(const CvlClientUserBar&) const;
	const char *toTraceString(PString& _str) const;
	const char *toXmlString(const char *_element, PString& _str) const;
	bool fromXmlString(const PString& _str);
	void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
	void parseMsg(CommMsgParser& _parser);
	const char *toJSONString(PString& _str) const;
	void fromJSONString(const PString& _str);
	static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
};

struct CvlClientUserBarNotification
{
	// M(4<M(444444444)>) - M(numProperties<M(tierId,flags,currentBoostRemaining,nextBoostTime,barProgress,barTarget,doneBarCount,tierUpEnd,starCoinBalance)>)
	Atf::LAtfVector< CvlClientUserBar, 4 > properties;

	CvlClientUserBarNotification();
	void clear();
	bool equals(const CvlClientUserBarNotification&) const;
	const char *toTraceString(PString& _str) const;
	const char *toXmlString(const char *_element, PString& _str) const;
	bool fromXmlString(const PString& _str);
	void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
	void parseMsg(CommMsgParser& _parser);
	const char *toJSONString(PString& _str) const;
	void fromJSONString(const PString& _str);
	static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
	CvlClientUserBarNotification(CvlClientUserBarNotification&&);
	CvlClientUserBarNotification& operator=(CvlClientUserBarNotification&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
	CvlClientUserBarNotification(const CvlClientUserBarNotification&) = default;
	CvlClientUserBarNotification& operator=(const CvlClientUserBarNotification&) = default;
#endif
#endif
};

struct Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE : public Atf::MessageProtocol
{
	// 4M(4<M(444444444)>)M(44444b444444) - clientReqId,M(numProperties<M(tierId,flags,currentBoostRemaining,nextBoostTime,barProgress,barTarget,doneBarCount,tierUpEnd,starCoinBalance)>),M(stateFlags,daysToExpire,tierUpDays,tierUpBars,exchangePercent,boostEnabled,currentBarDueTime,recentBarCounter,tierDownDays,currentBarStartTime,totalDoneBarCount,preferredTimeZone)
	UINT32 clientReqId;
	CvlClientUserBarNotification notify;
	CvlConfigParams cvlConfig;	// PYR-77216

	Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE();
	void clear() override;
	bool equals(const Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE&) const;
	bool equals(Atf::MessageProtocol* _other) const override;
	const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
	const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
	bool loadFromXmlString(const PString& _xmlString) override;
	const char *asTraceString(PString& _buf) const override;
	void parseMsg(CommMsgParser& _parser) override;
	void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
	UINT32 getMsgId() const override { return MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE; }
	const char *getMsgIdString() const override { return "MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE"; }
	const char *asJSONString(PString& _buf) const override;
	void loadFromJSONString(const PString& _jsonString) override;
	static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
	Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE(Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE&&);
	Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE& operator=(Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
	Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE(const Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE&) = default;
	Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE& operator=(const Protocol_MSG_LOBBYETC_CLI_NOTIFY_CVL_STATE&) = default;
#endif
#endif
};

// !!! WARNING !!! If you modify this message, please let testautomation team know.
struct Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER : public Atf::MessageProtocol
{

	Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER();
	void clear() override;
	bool equals(const Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER&) const;
	bool equals(Atf::MessageProtocol* _other) const override;
	const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
	const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
	bool loadFromXmlString(const PString& _xmlString) override;
	const char *asTraceString(PString& _buf) const override;
	void parseMsg(CommMsgParser& _parser) override;
	void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
	UINT32 getMsgId() const override { return MSG_LOBBYETC_GET_CVL_STATE_FOR_USER; }
	const char *getMsgIdString() const override { return "MSG_LOBBYETC_GET_CVL_STATE_FOR_USER"; }
	const char *asJSONString(PString& _buf) const override;
	void loadFromJSONString(const PString& _jsonString) override;
	static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
};

struct Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY : public Atf::MessageProtocol
{
	// 2[s|M(444444444)M(44444b444444)] - errCode[errString|M(tierId,flags,currentBoostRemaining,nextBoostTime,barProgress,barTarget,doneBarCount,tierUpEnd,starCoinBalance),M(stateFlags,daysToExpire,tierUpDays,tierUpBars,exchangePercent,boostEnabled,currentBarDueTime,recentBarCounter,tierDownDays,currentBarStartTime,totalDoneBarCount,preferredTimeZone)]
	INT16 errCode;

	PString errString;

	CvlClientUserBar bar;
	CvlConfigParams cvlConfig;	// PYR-77216

	Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY();
	void clear() override;
	bool equals(const Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY&) const;
	bool equals(Atf::MessageProtocol* _other) const override;
	const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
	const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
	bool loadFromXmlString(const PString& _xmlString) override;
	const char *asTraceString(PString& _buf) const override;
	void parseMsg(CommMsgParser& _parser) override;
	void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
	UINT32 getMsgId() const override { return MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY; }
	const char *getMsgIdString() const override { return "MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY"; }
	const char *asJSONString(PString& _buf) const override;
	void loadFromJSONString(const PString& _jsonString) override;
	static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
	Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY(Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY&&);
	Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY& operator=(Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
	Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY(const Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY&) = default;
	Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY& operator=(const Protocol_MSG_LOBBYETC_GET_CVL_STATE_FOR_USER_REPLY&) = default;
#endif
#endif
};

// !!! WARNING !!! If you modify this message, please let testautomation team know.
struct Protocol_MSG_LOBBYETC_CVL_OPTED_IN : public Atf::MessageProtocol
{
	// b - optedIn
	bool optedIn;

	Protocol_MSG_LOBBYETC_CVL_OPTED_IN();
	void clear() override;
	bool equals(const Protocol_MSG_LOBBYETC_CVL_OPTED_IN&) const;
	bool equals(Atf::MessageProtocol* _other) const override;
	const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
	const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
	bool loadFromXmlString(const PString& _xmlString) override;
	const char *asTraceString(PString& _buf) const override;
	void parseMsg(CommMsgParser& _parser) override;
	void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
	UINT32 getMsgId() const override { return MSG_LOBBYETC_CVL_OPTED_IN; }
	const char *getMsgIdString() const override { return "MSG_LOBBYETC_CVL_OPTED_IN"; }
	const char *asJSONString(PString& _buf) const override;
	void loadFromJSONString(const PString& _jsonString) override;
	static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
};

struct Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY : public Atf::MessageProtocol
{
	// 2[s] - errCode[errString]
	INT16 errCode;

	PString errString;

	Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY();
	void clear() override;
	bool equals(const Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY&) const;
	bool equals(Atf::MessageProtocol* _other) const override;
	const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
	const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
	bool loadFromXmlString(const PString& _xmlString) override;
	const char *asTraceString(PString& _buf) const override;
	void parseMsg(CommMsgParser& _parser) override;
	void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
	UINT32 getMsgId() const override { return MSG_LOBBYETC_CVL_OPTED_IN_REPLY; }
	const char *getMsgIdString() const override { return "MSG_LOBBYETC_CVL_OPTED_IN_REPLY"; }
	const char *asJSONString(PString& _buf) const override;
	void loadFromJSONString(const PString& _jsonString) override;
	static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
	Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY(Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY&&);
	Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY& operator=(Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
	Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY(const Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY&) = default;
	Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY& operator=(const Protocol_MSG_LOBBYETC_CVL_OPTED_IN_REPLY&) = default;
#endif
#endif
};

enum SkinType
{
	SkinType_normal		= 0,
	SkinType_special	= 1,
};

enum eLockType
{
	eLockType_TimeLocked	= 0,
	eLockType_IceLocked		= 1,
};

struct ClientChestData
{
	// M(s41ss84ss4<M(44s)>) - M(logoName,availableUntil,skinType,chestText,chestDescription,chestId,lockType,icePromo,customSkin,numAssets<M(id,type,uriHint)>)
	PString logoName;
	UINT32 availableUntil;	// time_t
	BYTE skinType;	// SkinType
	PString chestText;
	PString chestDescription;
	UINT64 chestId;	// PYR-70023
	INT32 lockType;	// eLockType PYR-77110
	PString icePromo;	// PYR-77110
	PString customSkin;	// PYR-95428

	Atf::LAtfVector< ChestAsset, 4 > assets;	// PYR-123328

	ClientChestData();
	void clear();
	bool equals(const ClientChestData&) const;
	const char *toTraceString(PString& _str) const;
	const char *toXmlString(const char *_element, PString& _str) const;
	bool fromXmlString(const PString& _str);
	void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
	void parseMsg(CommMsgParser& _parser);
	const char *toJSONString(PString& _str) const;
	void fromJSONString(const PString& _str);
	static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
	ClientChestData(ClientChestData&&);
	ClientChestData& operator=(ClientChestData&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
	ClientChestData(const ClientChestData&) = default;
	ClientChestData& operator=(const ClientChestData&) = default;
#endif
#endif
};

struct Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED : public Atf::MessageProtocol
{
	// 4b4M(s41ss84ss4<M(44s)>)4M(s41ss84ss4<M(44s)>)4 - clientReqId,isUserOptedIn,chestCount,M(logoName,availableUntil,skinType,chestText,chestDescription,chestId,lockType,icePromo,customSkin,numAssets<M(id,type,uriHint)>),lockedChestCount,M(logoName,availableUntil,skinType,chestText,chestDescription,chestId,lockType,icePromo,customSkin,numAssets<M(id,type,uriHint)>),stateFlags
	UINT32 clientReqId;
	bool isUserOptedIn;
	UINT32 chestCount;
	ClientChestData chestToShow;
	UINT32 lockedChestCount;
	ClientChestData lockedChestToShow;
	UINT32 stateFlags;	// AQA-19374

	Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED();
	void clear() override;
	bool equals(const Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED&) const;
	bool equals(Atf::MessageProtocol* _other) const override;
	const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
	const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
	bool loadFromXmlString(const PString& _xmlString) override;
	const char *asTraceString(PString& _buf) const override;
	void parseMsg(CommMsgParser& _parser) override;
	void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
	UINT32 getMsgId() const override { return MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED; }
	const char *getMsgIdString() const override { return "MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED"; }
	const char *asJSONString(PString& _buf) const override;
	void loadFromJSONString(const PString& _jsonString) override;
	static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
	Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED(Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED&&);
	Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED& operator=(Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
	Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED(const Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED&) = default;
	Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED& operator=(const Protocol_MSG_LOBBYETC_CLI_NOTIFY_MPC_ISSUED&) = default;
#endif
#endif
};

enum ChestType
{
	ChestType_starsRewards		= 0,
	ChestFlags_multiPurpose		= 1,
	ChestType_starsRewardsCVL2	= 2,
};

struct ClientChestDataEx
{
	// M(M(s41ss84ss4<M(44s)>)8414) - M(M(logoName,availableUntil,skinType,chestText,chestDescription,chestId,lockType,icePromo,customSkin,numAssets<M(id,type,uriHint)>),chestId,tierId,chestType,availableAfter)
	ClientChestData commonData;

	// used only by the chest page
	UINT64 chestId;
	UINT32 tierId;
	BYTE chestType;	// ChestType
	UINT32 availableAfter;	// time_t

	ClientChestDataEx();
	void clear();
	bool equals(const ClientChestDataEx&) const;
	const char *toTraceString(PString& _str) const;
	const char *toXmlString(const char *_element, PString& _str) const;
	bool fromXmlString(const PString& _str);
	void composeMsg(CommMsgBody& _msg, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const;
	void parseMsg(CommMsgParser& _parser);
	const char *toJSONString(PString& _str) const;
	void fromJSONString(const PString& _str);
	static void validateJSONString(const PString& _str, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, const char* _descr, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
	ClientChestDataEx(ClientChestDataEx&&);
	ClientChestDataEx& operator=(ClientChestDataEx&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
	ClientChestDataEx(const ClientChestDataEx&) = default;
	ClientChestDataEx& operator=(const ClientChestDataEx&) = default;
#endif
#endif
};

struct Protocol_MSG_LOBBYETC_GET_USER_BARS : public Atf::MessageProtocol
{

	Protocol_MSG_LOBBYETC_GET_USER_BARS();
	void clear() override;
	bool equals(const Protocol_MSG_LOBBYETC_GET_USER_BARS&) const;
	bool equals(Atf::MessageProtocol* _other) const override;
	const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
	const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
	bool loadFromXmlString(const PString& _xmlString) override;
	const char *asTraceString(PString& _buf) const override;
	void parseMsg(CommMsgParser& _parser) override;
	void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
	UINT32 getMsgId() const override { return MSG_LOBBYETC_GET_USER_BARS; }
	const char *getMsgIdString() const override { return "MSG_LOBBYETC_GET_USER_BARS"; }
	const char *asJSONString(PString& _buf) const override;
	void loadFromJSONString(const PString& _jsonString) override;
	static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
};

struct Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY : public Atf::MessageProtocol
{
	// 2[s|4<M(M(s41ss84ss4<M(44s)>)8414)>4<M(M(s41ss84ss4<M(44s)>)8414)>4] - errCode[errString|numAvailableChests<M(M(logoName,availableUntil,skinType,chestText,chestDescription,chestId,lockType,icePromo,customSkin,numAssets<M(id,type,uriHint)>),chestId,tierId,chestType,availableAfter)>,numLockedChests<M(M(logoName,availableUntil,skinType,chestText,chestDescription,chestId,lockType,icePromo,customSkin,numAssets<M(id,type,uriHint)>),chestId,tierId,chestType,availableAfter)>,stateFlags]
	INT16 errCode;

	PString errString;

	Atf::LAtfVector< ClientChestDataEx, 4 > availableChests;
	Atf::LAtfVector< ClientChestDataEx, 4 > lockedChests;
	UINT32 stateFlags;	// AQA-19374

	Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY();
	void clear() override;
	bool equals(const Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY&) const;
	bool equals(Atf::MessageProtocol* _other) const override;
	const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
	const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
	bool loadFromXmlString(const PString& _xmlString) override;
	const char *asTraceString(PString& _buf) const override;
	void parseMsg(CommMsgParser& _parser) override;
	void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
	UINT32 getMsgId() const override { return MSG_LOBBYETC_GET_USER_BARS_REPLY; }
	const char *getMsgIdString() const override { return "MSG_LOBBYETC_GET_USER_BARS_REPLY"; }
	const char *asJSONString(PString& _buf) const override;
	void loadFromJSONString(const PString& _jsonString) override;
	static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
	Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY(Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY&&);
	Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY& operator=(Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
	Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY(const Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY&) = default;
	Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY& operator=(const Protocol_MSG_LOBBYETC_GET_USER_BARS_REPLY&) = default;
#endif
#endif
};

struct Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION : public Atf::MessageProtocol
{
	// 44<M(M(s41ss84ss4<M(44s)>)8414)>4<M(M(s41ss84ss4<M(44s)>)8414)>4 - clientReqId,numAvailableChests<M(M(logoName,availableUntil,skinType,chestText,chestDescription,chestId,lockType,icePromo,customSkin,numAssets<M(id,type,uriHint)>),chestId,tierId,chestType,availableAfter)>,numLockedChests<M(M(logoName,availableUntil,skinType,chestText,chestDescription,chestId,lockType,icePromo,customSkin,numAssets<M(id,type,uriHint)>),chestId,tierId,chestType,availableAfter)>,stateFlags
	UINT32 clientReqId;
	Atf::LAtfVector< ClientChestDataEx, 4 > availableChests;
	Atf::LAtfVector< ClientChestDataEx, 4 > lockedChests;
	UINT32 stateFlags;	// AQA-19374

	Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION();
	void clear() override;
	bool equals(const Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION&) const;
	bool equals(Atf::MessageProtocol* _other) const override;
	const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
	const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
	bool loadFromXmlString(const PString& _xmlString) override;
	const char *asTraceString(PString& _buf) const override;
	void parseMsg(CommMsgParser& _parser) override;
	void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
	UINT32 getMsgId() const override { return MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION; }
	const char *getMsgIdString() const override { return "MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION"; }
	const char *asJSONString(PString& _buf) const override;
	void loadFromJSONString(const PString& _jsonString) override;
	static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
	Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION(Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION&&);
	Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION& operator=(Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
	Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION(const Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION&) = default;
	Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION& operator=(const Protocol_MSG_LOBBYETC_GET_USER_BARS_NOTIFICATION&) = default;
#endif
#endif
};

// PYR-79304
struct Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR : public Atf::MessageProtocol
{
	// no parameters

	Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR();
	void clear() override;
	bool equals(const Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR&) const;
	bool equals(Atf::MessageProtocol* _other) const override;
	const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
	const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
	bool loadFromXmlString(const PString& _xmlString) override;
	const char *asTraceString(PString& _buf) const override;
	void parseMsg(CommMsgParser& _parser) override;
	void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
	UINT32 getMsgId() const override { return MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR; }
	const char *getMsgIdString() const override { return "MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR"; }
	const char *asJSONString(PString& _buf) const override;
	void loadFromJSONString(const PString& _jsonString) override;
	static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
};

// PYR-79304
struct Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY : public Atf::MessageProtocol
{
	// 2[s] - errCode[errString]
	INT16 errCode;

	PString errString;

	Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY();
	void clear() override;
	bool equals(const Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY&) const;
	bool equals(Atf::MessageProtocol* _other) const override;
	const char *asXmlString(PString& _buf, bool _logTimeStamp) const override;
	const char *asXmlString(PString& _buf, UINT64 _timestampTicks, UINT32 _msgTime) const override;
	bool loadFromXmlString(const PString& _xmlString) override;
	const char *asTraceString(PString& _buf) const override;
	void parseMsg(CommMsgParser& _parser) override;
	void composeMsg(CommMsgBody& _body, bool _ignoreJSON = COMPOSEMSG_IGNORE_JSON_DEFAULT) const override;
	UINT32 getMsgId() const override { return MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY; }
	const char *getMsgIdString() const override { return "MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY"; }
	const char *asJSONString(PString& _buf) const override;
	void loadFromJSONString(const PString& _jsonString) override;
	static void validateJSONString(const PString& _jsonString, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);
	static void validateMsg(CommMsgParser& _parser, const AtfMsgChecker* _checker, PString& _fieldsWithUnparsedContent);

#ifdef MOVE_CONSTRUCTOR_SUPPORTED
	Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY(Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY&&);
	Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY& operator=(Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY&&);
#ifdef ATF_GENERATE_DEFAULT_COPYCONSTRUCTOR
	Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY(const Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY&) = default;
	Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY& operator=(const Protocol_MSG_LOBBYETC_EXCHANGE_CURRENT_CVL_BAR_REPLY&) = default;
#endif
#endif
};


#endif
