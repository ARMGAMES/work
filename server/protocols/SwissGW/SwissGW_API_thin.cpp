/**
 * SwissGW_API_thin.cpp
 *
 * This file was auto-generated from SwissGW_API.txt by ATF protocol generator. 
 * Do not edit this file directly!
 *
 * Generator used the following keys: -thin -genMoveConstructor -dontGenValidationFuncs SwissGW_API.txt
 */
 
#include "SwissGW_API_thin.h"

//=================================================================
//                    GmField
//=================================================================

SwissGW::GmField::GmField()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::GmField::GmField(GmField&& _o)
	: gmFieldCode(std::move(_o.gmFieldCode))
	, gmFieldValue(std::move(_o.gmFieldValue))
	, gmFieldValueChangeTimeUTC(std::move(_o.gmFieldValueChangeTimeUTC))
{
}

SwissGW::GmField& SwissGW::GmField::operator=(GmField&& _o)
{
	if(this != &_o)
	{
		gmFieldCode = std::move(_o.gmFieldCode);
		gmFieldValue = std::move(_o.gmFieldValue);
		gmFieldValueChangeTimeUTC = std::move(_o.gmFieldValueChangeTimeUTC);
	}
	return *this;
}

#endif

void SwissGW::GmField::clear()
{
	gmFieldCode = 0;
	gmFieldValue.clear();
	gmFieldValueChangeTimeUTC.clear();
}

bool SwissGW::GmField::equals(const GmField& _o) const
{
	return gmFieldCode == _o.gmFieldCode &&
		gmFieldValue.equals(_o.gmFieldValue) &&
		gmFieldValueChangeTimeUTC.equals(_o.gmFieldValueChangeTimeUTC);
}

const char *SwissGW::GmField::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("gmFieldCode=");
	_buf.appendUint(gmFieldCode);
	_buf.append(',');
	_buf.append("gmFieldValue=");
	_buf.append(gmFieldValue);
	_buf.append(',');
	_buf.append("gmFieldValueChangeTimeUTC=");
	_buf.append(gmFieldValueChangeTimeUTC);
	_buf.append('}');
	return _buf.c_str();
}

void SwissGW::GmField::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(GmField())) // not empty
	{
		_body.composeUINT16(gmFieldCode);
		_body.composeString(gmFieldValue);
		_body.composeString(gmFieldValueChangeTimeUTC);
	}

	_msg.composeMsgBody(_body);
}

void SwissGW::GmField::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT16(gmFieldCode);
	_parser0.parseStringP(gmFieldValue);
	_parser0.parseStringP(gmFieldValueChangeTimeUTC);
}

//=================================================================
//                    PsConversion
//=================================================================

SwissGW::PsConversion::PsConversion()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PsConversion::PsConversion(PsConversion&& _o)
	: rgConversionType(std::move(_o.rgConversionType))
	, rgCurrency(std::move(_o.rgCurrency))
	, rgAmount(std::move(_o.rgAmount))
{
}

SwissGW::PsConversion& SwissGW::PsConversion::operator=(PsConversion&& _o)
{
	if(this != &_o)
	{
		rgConversionType = std::move(_o.rgConversionType);
		rgCurrency = std::move(_o.rgCurrency);
		rgAmount = std::move(_o.rgAmount);
	}
	return *this;
}

#endif

void SwissGW::PsConversion::clear()
{
	rgConversionType = 0;
	rgCurrency.clear();
	rgAmount = 0;
}

bool SwissGW::PsConversion::equals(const PsConversion& _o) const
{
	return rgConversionType == _o.rgConversionType &&
		rgCurrency.equals(_o.rgCurrency) &&
		rgAmount == _o.rgAmount;
}

const char *SwissGW::PsConversion::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("rgConversionType=");
	_buf.appendUint(rgConversionType);
	_buf.append(',');
	_buf.append("rgCurrency=");
	_buf.append(rgCurrency);
	_buf.append(',');
	_buf.append("rgAmount=");
	_buf.appendInt64(rgAmount);
	_buf.append('}');
	return _buf.c_str();
}

void SwissGW::PsConversion::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PsConversion())) // not empty
	{
		_body.composeUINT16(rgConversionType);
		_body.composeString(rgCurrency);
		_body.composeINT64(rgAmount);
	}

	_msg.composeMsgBody(_body);
}

void SwissGW::PsConversion::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT16(rgConversionType);
	_parser0.parseStringP(rgCurrency);
	_parser0.parseINT64(rgAmount);
}

//=================================================================
//                    PsConversionReply
//=================================================================

SwissGW::PsConversionReply::PsConversionReply()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PsConversionReply::PsConversionReply(PsConversionReply&& _o)
	: rgConversionType(std::move(_o.rgConversionType))
	, gmCurrency(std::move(_o.gmCurrency))
	, gmAmount(std::move(_o.gmAmount))
	, psCurrency(std::move(_o.psCurrency))
	, psAmount(std::move(_o.psAmount))
	, psExchangeRate(std::move(_o.psExchangeRate))
{
}

SwissGW::PsConversionReply& SwissGW::PsConversionReply::operator=(PsConversionReply&& _o)
{
	if(this != &_o)
	{
		rgConversionType = std::move(_o.rgConversionType);
		gmCurrency = std::move(_o.gmCurrency);
		gmAmount = std::move(_o.gmAmount);
		psCurrency = std::move(_o.psCurrency);
		psAmount = std::move(_o.psAmount);
		psExchangeRate = std::move(_o.psExchangeRate);
	}
	return *this;
}

#endif

void SwissGW::PsConversionReply::clear()
{
	rgConversionType = 0;
	gmCurrency.clear();
	gmAmount = 0;
	psCurrency.clear();
	psAmount = 0;
	psExchangeRate.clear();
}

bool SwissGW::PsConversionReply::equals(const PsConversionReply& _o) const
{
	return rgConversionType == _o.rgConversionType &&
		gmCurrency.equals(_o.gmCurrency) &&
		gmAmount == _o.gmAmount &&
		psCurrency.equals(_o.psCurrency) &&
		psAmount == _o.psAmount &&
		psExchangeRate.equals(_o.psExchangeRate);
}

const char *SwissGW::PsConversionReply::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("rgConversionType=");
	_buf.appendUint(rgConversionType);
	_buf.append(',');
	_buf.append("gmCurrency=");
	_buf.append(gmCurrency);
	_buf.append(',');
	_buf.append("gmAmount=");
	_buf.appendInt64(gmAmount);
	_buf.append(',');
	_buf.append("psCurrency=");
	_buf.append(psCurrency);
	_buf.append(',');
	_buf.append("psAmount=");
	_buf.appendInt64(psAmount);
	_buf.append(',');
	_buf.append("psExchangeRate=");
	_buf.append(psExchangeRate);
	_buf.append('}');
	return _buf.c_str();
}

void SwissGW::PsConversionReply::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PsConversionReply())) // not empty
	{
		_body.composeUINT16(rgConversionType);
		_body.composeString(gmCurrency);
		_body.composeINT64(gmAmount);
		_body.composeString(psCurrency);
		_body.composeINT64(psAmount);
		_body.composeString(psExchangeRate);
	}

	_msg.composeMsgBody(_body);
}

void SwissGW::PsConversionReply::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseUINT16(rgConversionType);
	_parser0.parseStringP(gmCurrency);
	_parser0.parseINT64(gmAmount);
	_parser0.parseStringP(psCurrency);
	_parser0.parseINT64(psAmount);
	_parser0.parseStringP(psExchangeRate);
}

//=================================================================
//                    PsPendingCashout
//=================================================================

SwissGW::PsPendingCashout::PsPendingCashout()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PsPendingCashout::PsPendingCashout(PsPendingCashout&& _o)
	: gmTransactionId(std::move(_o.gmTransactionId))
	, psTransactionId(std::move(_o.psTransactionId))
	, gmIsCashout(std::move(_o.gmIsCashout))
	, gmTransactionCurrency(std::move(_o.gmTransactionCurrency))
	, gmTransactionAmount(std::move(_o.gmTransactionAmount))
	, psTransactionCurrency(std::move(_o.psTransactionCurrency))
	, psTransactionAmount(std::move(_o.psTransactionAmount))
	, psExchangeRate(std::move(_o.psExchangeRate))
	, psTransactionTimeUTC(std::move(_o.psTransactionTimeUTC))
	, psCancelable(std::move(_o.psCancelable))
{
}

SwissGW::PsPendingCashout& SwissGW::PsPendingCashout::operator=(PsPendingCashout&& _o)
{
	if(this != &_o)
	{
		gmTransactionId = std::move(_o.gmTransactionId);
		psTransactionId = std::move(_o.psTransactionId);
		gmIsCashout = std::move(_o.gmIsCashout);
		gmTransactionCurrency = std::move(_o.gmTransactionCurrency);
		gmTransactionAmount = std::move(_o.gmTransactionAmount);
		psTransactionCurrency = std::move(_o.psTransactionCurrency);
		psTransactionAmount = std::move(_o.psTransactionAmount);
		psExchangeRate = std::move(_o.psExchangeRate);
		psTransactionTimeUTC = std::move(_o.psTransactionTimeUTC);
		psCancelable = std::move(_o.psCancelable);
	}
	return *this;
}

#endif

void SwissGW::PsPendingCashout::clear()
{
	gmTransactionId.clear();
	psTransactionId = 0;
	gmIsCashout = false;
	gmTransactionCurrency.clear();
	gmTransactionAmount = 0;
	psTransactionCurrency.clear();
	psTransactionAmount = 0;
	psExchangeRate.clear();
	psTransactionTimeUTC.clear();
	psCancelable = false;
}

bool SwissGW::PsPendingCashout::equals(const PsPendingCashout& _o) const
{
	return gmTransactionId.equals(_o.gmTransactionId) &&
		psTransactionId == _o.psTransactionId &&
		gmIsCashout == _o.gmIsCashout &&
		gmTransactionCurrency.equals(_o.gmTransactionCurrency) &&
		gmTransactionAmount == _o.gmTransactionAmount &&
		psTransactionCurrency.equals(_o.psTransactionCurrency) &&
		psTransactionAmount == _o.psTransactionAmount &&
		psExchangeRate.equals(_o.psExchangeRate) &&
		psTransactionTimeUTC.equals(_o.psTransactionTimeUTC) &&
		psCancelable == _o.psCancelable;
}

const char *SwissGW::PsPendingCashout::toTraceString(PString& _buf) const
{
	_buf.append('{');
	_buf.append("gmTransactionId=");
	_buf.append(gmTransactionId);
	_buf.append(',');
	_buf.append("psTransactionId=");
	_buf.appendUint64(psTransactionId);
	_buf.append(',');
	_buf.append("gmIsCashout=");
	_buf.appendUint(gmIsCashout);
	_buf.append(',');
	_buf.append("gmTransactionCurrency=");
	_buf.append(gmTransactionCurrency);
	_buf.append(',');
	_buf.append("gmTransactionAmount=");
	_buf.appendInt64(gmTransactionAmount);
	_buf.append(',');
	_buf.append("psTransactionCurrency=");
	_buf.append(psTransactionCurrency);
	_buf.append(',');
	_buf.append("psTransactionAmount=");
	_buf.appendInt64(psTransactionAmount);
	_buf.append(',');
	_buf.append("psExchangeRate=");
	_buf.append(psExchangeRate);
	_buf.append(',');
	_buf.append("psTransactionTimeUTC=");
	_buf.append(psTransactionTimeUTC);
	_buf.append(',');
	_buf.append("psCancelable=");
	_buf.appendUint(psCancelable);
	_buf.append('}');
	return _buf.c_str();
}

void SwissGW::PsPendingCashout::composeMsg(CommMsgBody& _msg) const
{
	CommMsgBody _body;
	//if (!equals(PsPendingCashout())) // not empty
	{
		_body.composeString(gmTransactionId);
		_body.composeUINT64(psTransactionId);
		_body.composeBOOL(gmIsCashout);
		_body.composeString(gmTransactionCurrency);
		_body.composeINT64(gmTransactionAmount);
		_body.composeString(psTransactionCurrency);
		_body.composeINT64(psTransactionAmount);
		_body.composeString(psExchangeRate);
		_body.composeString(psTransactionTimeUTC);
		_body.composeBOOL(psCancelable);
	}

	_msg.composeMsgBody(_body);
}

void SwissGW::PsPendingCashout::parseMsg(CommMsgParser& _parser)
{
	CommMsgBody _body;
	_parser.parseMsgBody(_body);

	CommMsgParser _parser0(_body);
	_parser0.parseStringP(gmTransactionId);
	_parser0.parseUINT64(psTransactionId);
	_parser0.parseBOOL(gmIsCashout);
	_parser0.parseStringP(gmTransactionCurrency);
	_parser0.parseINT64(gmTransactionAmount);
	_parser0.parseStringP(psTransactionCurrency);
	_parser0.parseINT64(psTransactionAmount);
	_parser0.parseStringP(psExchangeRate);
	_parser0.parseStringP(psTransactionTimeUTC);
	_parser0.parseBOOL(psCancelable);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_PrecalculateConversion
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_PrecalculateConversion::Protocol_MSG_GIMO_Q_PrecalculateConversion()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_PrecalculateConversion::Protocol_MSG_GIMO_Q_PrecalculateConversion(Protocol_MSG_GIMO_Q_PrecalculateConversion&& _o)
	: requestId(std::move(_o.requestId))
	, psConversions(std::move(_o.psConversions))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_PrecalculateConversion& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_PrecalculateConversion::operator=(Protocol_MSG_GIMO_Q_PrecalculateConversion&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psConversions = std::move(_o.psConversions);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_PrecalculateConversion::clear()
{
	requestId.clear();
	psConversions.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_PrecalculateConversion::equals(const Protocol_MSG_GIMO_Q_PrecalculateConversion& _o) const
{
	return requestId.equals(_o.requestId) &&
		psConversions.equals(_o.psConversions);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_PrecalculateConversion::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_PrecalculateConversion).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psConversions=");
	psConversions.toTraceString(_buf);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_PrecalculateConversion::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	psConversions.composeMsg(_msg);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_PrecalculateConversion::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	psConversions.parseMsg(_parser);
}

//=================================================================
//                Protocol_MSG_GIMO_A_PrecalculateConversion
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_PrecalculateConversion::Protocol_MSG_GIMO_A_PrecalculateConversion()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_PrecalculateConversion::Protocol_MSG_GIMO_A_PrecalculateConversion(Protocol_MSG_GIMO_A_PrecalculateConversion&& _o)
	: requestId(std::move(_o.requestId))
	, psConversionReplies(std::move(_o.psConversionReplies))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_PrecalculateConversion& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_PrecalculateConversion::operator=(Protocol_MSG_GIMO_A_PrecalculateConversion&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psConversionReplies = std::move(_o.psConversionReplies);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_PrecalculateConversion::clear()
{
	requestId.clear();
	psConversionReplies.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_PrecalculateConversion::equals(const Protocol_MSG_GIMO_A_PrecalculateConversion& _o) const
{
	return requestId.equals(_o.requestId) &&
		psConversionReplies.equals(_o.psConversionReplies);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_PrecalculateConversion::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_PrecalculateConversion).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psConversionReplies=");
	psConversionReplies.toTraceString(_buf);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_PrecalculateConversion::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	psConversionReplies.composeMsg(_msg);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_PrecalculateConversion::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	psConversionReplies.parseMsg(_parser);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_TransferIn
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_TransferIn::Protocol_MSG_GIMO_Q_TransferIn()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_TransferIn::Protocol_MSG_GIMO_Q_TransferIn(Protocol_MSG_GIMO_Q_TransferIn&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, gmTransactionId(std::move(_o.gmTransactionId))
	, gmIsDeposit(std::move(_o.gmIsDeposit))
	, gmTransactionCurrency(std::move(_o.gmTransactionCurrency))
	, gmTransactionAmount(std::move(_o.gmTransactionAmount))
	, psTransactionCurrency(std::move(_o.psTransactionCurrency))
	, psTransactionAmount(std::move(_o.psTransactionAmount))
	, psExchangeRate(std::move(_o.psExchangeRate))
	, gmTransactionTimeUTC(std::move(_o.gmTransactionTimeUTC))
	, psBonusCode(std::move(_o.psBonusCode))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_TransferIn& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_TransferIn::operator=(Protocol_MSG_GIMO_Q_TransferIn&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		gmTransactionId = std::move(_o.gmTransactionId);
		gmIsDeposit = std::move(_o.gmIsDeposit);
		gmTransactionCurrency = std::move(_o.gmTransactionCurrency);
		gmTransactionAmount = std::move(_o.gmTransactionAmount);
		psTransactionCurrency = std::move(_o.psTransactionCurrency);
		psTransactionAmount = std::move(_o.psTransactionAmount);
		psExchangeRate = std::move(_o.psExchangeRate);
		gmTransactionTimeUTC = std::move(_o.gmTransactionTimeUTC);
		psBonusCode = std::move(_o.psBonusCode);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_TransferIn::clear()
{
	requestId.clear();
	psWebId.clear();
	gmTransactionId.clear();
	gmIsDeposit = false;
	gmTransactionCurrency.clear();
	gmTransactionAmount = 0;
	psTransactionCurrency.clear();
	psTransactionAmount = 0;
	psExchangeRate.clear();
	gmTransactionTimeUTC.clear();
	psBonusCode.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_TransferIn::equals(const Protocol_MSG_GIMO_Q_TransferIn& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		gmTransactionId.equals(_o.gmTransactionId) &&
		gmIsDeposit == _o.gmIsDeposit &&
		gmTransactionCurrency.equals(_o.gmTransactionCurrency) &&
		gmTransactionAmount == _o.gmTransactionAmount &&
		psTransactionCurrency.equals(_o.psTransactionCurrency) &&
		psTransactionAmount == _o.psTransactionAmount &&
		psExchangeRate.equals(_o.psExchangeRate) &&
		gmTransactionTimeUTC.equals(_o.gmTransactionTimeUTC) &&
		psBonusCode.equals(_o.psBonusCode);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_TransferIn::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_TransferIn).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("gmTransactionId=");
	_buf.append(gmTransactionId);
	_buf.append(',');
	_buf.append("gmIsDeposit=");
	_buf.appendUint(gmIsDeposit);
	_buf.append(',');
	_buf.append("gmTransactionCurrency=");
	_buf.append(gmTransactionCurrency);
	_buf.append(',');
	_buf.append("gmTransactionAmount=");
	_buf.appendInt64(gmTransactionAmount);
	_buf.append(',');
	_buf.append("psTransactionCurrency=");
	_buf.append(psTransactionCurrency);
	_buf.append(',');
	_buf.append("psTransactionAmount=");
	_buf.appendInt64(psTransactionAmount);
	_buf.append(',');
	_buf.append("psExchangeRate=");
	_buf.append(psExchangeRate);
	_buf.append(',');
	_buf.append("gmTransactionTimeUTC=");
	_buf.append(gmTransactionTimeUTC);
	_buf.append(',');
	_buf.append("psBonusCode=");
	_buf.append(psBonusCode);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_TransferIn::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeString(gmTransactionId);
	_msg.composeBOOL(gmIsDeposit);
	_msg.composeString(gmTransactionCurrency);
	_msg.composeINT64(gmTransactionAmount);
	_msg.composeString(psTransactionCurrency);
	_msg.composeINT64(psTransactionAmount);
	_msg.composeString(psExchangeRate);
	_msg.composeString(gmTransactionTimeUTC);
	_msg.composeString(psBonusCode);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_TransferIn::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseStringP(gmTransactionId);
	_parser.parseBOOL(gmIsDeposit);
	_parser.parseStringP(gmTransactionCurrency);
	_parser.parseINT64(gmTransactionAmount);
	_parser.parseStringP(psTransactionCurrency);
	_parser.parseINT64(psTransactionAmount);
	_parser.parseStringP(psExchangeRate);
	_parser.parseStringP(gmTransactionTimeUTC);
	_parser.parseStringP(psBonusCode);
}

//=================================================================
//                Protocol_MSG_GIMO_A_TransferIn
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_TransferIn::Protocol_MSG_GIMO_A_TransferIn()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_TransferIn::Protocol_MSG_GIMO_A_TransferIn(Protocol_MSG_GIMO_A_TransferIn&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, gmTransactionId(std::move(_o.gmTransactionId))
	, psTransactionId(std::move(_o.psTransactionId))
	, psTransactionTimeUTC(std::move(_o.psTransactionTimeUTC))
	, gmTransactionCurrency(std::move(_o.gmTransactionCurrency))
	, gmTransactionAmount(std::move(_o.gmTransactionAmount))
	, psTransactionCurrency(std::move(_o.psTransactionCurrency))
	, psTransactionAmount(std::move(_o.psTransactionAmount))
	, psExchangeRate(std::move(_o.psExchangeRate))
	, psBonusMessage(std::move(_o.psBonusMessage))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_TransferIn& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_TransferIn::operator=(Protocol_MSG_GIMO_A_TransferIn&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		gmTransactionId = std::move(_o.gmTransactionId);
		psTransactionId = std::move(_o.psTransactionId);
		psTransactionTimeUTC = std::move(_o.psTransactionTimeUTC);
		gmTransactionCurrency = std::move(_o.gmTransactionCurrency);
		gmTransactionAmount = std::move(_o.gmTransactionAmount);
		psTransactionCurrency = std::move(_o.psTransactionCurrency);
		psTransactionAmount = std::move(_o.psTransactionAmount);
		psExchangeRate = std::move(_o.psExchangeRate);
		psBonusMessage = std::move(_o.psBonusMessage);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_TransferIn::clear()
{
	requestId.clear();
	psWebId.clear();
	gmTransactionId.clear();
	psTransactionId = 0;
	psTransactionTimeUTC.clear();
	gmTransactionCurrency.clear();
	gmTransactionAmount = 0;
	psTransactionCurrency.clear();
	psTransactionAmount = 0;
	psExchangeRate.clear();
	psBonusMessage.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_TransferIn::equals(const Protocol_MSG_GIMO_A_TransferIn& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		gmTransactionId.equals(_o.gmTransactionId) &&
		psTransactionId == _o.psTransactionId &&
		psTransactionTimeUTC.equals(_o.psTransactionTimeUTC) &&
		gmTransactionCurrency.equals(_o.gmTransactionCurrency) &&
		gmTransactionAmount == _o.gmTransactionAmount &&
		psTransactionCurrency.equals(_o.psTransactionCurrency) &&
		psTransactionAmount == _o.psTransactionAmount &&
		psExchangeRate.equals(_o.psExchangeRate) &&
		psBonusMessage.equals(_o.psBonusMessage);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_TransferIn::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_TransferIn).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("gmTransactionId=");
	_buf.append(gmTransactionId);
	_buf.append(',');
	_buf.append("psTransactionId=");
	_buf.appendUint64(psTransactionId);
	_buf.append(',');
	_buf.append("psTransactionTimeUTC=");
	_buf.append(psTransactionTimeUTC);
	_buf.append(',');
	_buf.append("gmTransactionCurrency=");
	_buf.append(gmTransactionCurrency);
	_buf.append(',');
	_buf.append("gmTransactionAmount=");
	_buf.appendInt64(gmTransactionAmount);
	_buf.append(',');
	_buf.append("psTransactionCurrency=");
	_buf.append(psTransactionCurrency);
	_buf.append(',');
	_buf.append("psTransactionAmount=");
	_buf.appendInt64(psTransactionAmount);
	_buf.append(',');
	_buf.append("psExchangeRate=");
	_buf.append(psExchangeRate);
	_buf.append(',');
	_buf.append("psBonusMessage=");
	_buf.append(psBonusMessage);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_TransferIn::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeString(gmTransactionId);
	_msg.composeUINT64(psTransactionId);
	_msg.composeString(psTransactionTimeUTC);
	_msg.composeString(gmTransactionCurrency);
	_msg.composeINT64(gmTransactionAmount);
	_msg.composeString(psTransactionCurrency);
	_msg.composeINT64(psTransactionAmount);
	_msg.composeString(psExchangeRate);
	_msg.composeString(psBonusMessage);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_TransferIn::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseStringP(gmTransactionId);
	_parser.parseUINT64(psTransactionId);
	_parser.parseStringP(psTransactionTimeUTC);
	_parser.parseStringP(gmTransactionCurrency);
	_parser.parseINT64(gmTransactionAmount);
	_parser.parseStringP(psTransactionCurrency);
	_parser.parseINT64(psTransactionAmount);
	_parser.parseStringP(psExchangeRate);
	_parser.parseStringP(psBonusMessage);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_RequestTransferOut
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_RequestTransferOut::Protocol_MSG_GIMO_Q_RequestTransferOut()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_RequestTransferOut::Protocol_MSG_GIMO_Q_RequestTransferOut(Protocol_MSG_GIMO_Q_RequestTransferOut&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, gmTransactionId(std::move(_o.gmTransactionId))
	, gmIsCashout(std::move(_o.gmIsCashout))
	, gmTransactionCurrency(std::move(_o.gmTransactionCurrency))
	, gmTransactionAmount(std::move(_o.gmTransactionAmount))
	, psTransactionCurrency(std::move(_o.psTransactionCurrency))
	, psTransactionAmount(std::move(_o.psTransactionAmount))
	, psExchangeRate(std::move(_o.psExchangeRate))
	, gmTransactionTimeUTC(std::move(_o.gmTransactionTimeUTC))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_RequestTransferOut& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_RequestTransferOut::operator=(Protocol_MSG_GIMO_Q_RequestTransferOut&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		gmTransactionId = std::move(_o.gmTransactionId);
		gmIsCashout = std::move(_o.gmIsCashout);
		gmTransactionCurrency = std::move(_o.gmTransactionCurrency);
		gmTransactionAmount = std::move(_o.gmTransactionAmount);
		psTransactionCurrency = std::move(_o.psTransactionCurrency);
		psTransactionAmount = std::move(_o.psTransactionAmount);
		psExchangeRate = std::move(_o.psExchangeRate);
		gmTransactionTimeUTC = std::move(_o.gmTransactionTimeUTC);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_RequestTransferOut::clear()
{
	requestId.clear();
	psWebId.clear();
	gmTransactionId.clear();
	gmIsCashout = false;
	gmTransactionCurrency.clear();
	gmTransactionAmount = 0;
	psTransactionCurrency.clear();
	psTransactionAmount = 0;
	psExchangeRate.clear();
	gmTransactionTimeUTC.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_RequestTransferOut::equals(const Protocol_MSG_GIMO_Q_RequestTransferOut& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		gmTransactionId.equals(_o.gmTransactionId) &&
		gmIsCashout == _o.gmIsCashout &&
		gmTransactionCurrency.equals(_o.gmTransactionCurrency) &&
		gmTransactionAmount == _o.gmTransactionAmount &&
		psTransactionCurrency.equals(_o.psTransactionCurrency) &&
		psTransactionAmount == _o.psTransactionAmount &&
		psExchangeRate.equals(_o.psExchangeRate) &&
		gmTransactionTimeUTC.equals(_o.gmTransactionTimeUTC);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_RequestTransferOut::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_RequestTransferOut).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("gmTransactionId=");
	_buf.append(gmTransactionId);
	_buf.append(',');
	_buf.append("gmIsCashout=");
	_buf.appendUint(gmIsCashout);
	_buf.append(',');
	_buf.append("gmTransactionCurrency=");
	_buf.append(gmTransactionCurrency);
	_buf.append(',');
	_buf.append("gmTransactionAmount=");
	_buf.appendInt64(gmTransactionAmount);
	_buf.append(',');
	_buf.append("psTransactionCurrency=");
	_buf.append(psTransactionCurrency);
	_buf.append(',');
	_buf.append("psTransactionAmount=");
	_buf.appendInt64(psTransactionAmount);
	_buf.append(',');
	_buf.append("psExchangeRate=");
	_buf.append(psExchangeRate);
	_buf.append(',');
	_buf.append("gmTransactionTimeUTC=");
	_buf.append(gmTransactionTimeUTC);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_RequestTransferOut::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeString(gmTransactionId);
	_msg.composeBOOL(gmIsCashout);
	_msg.composeString(gmTransactionCurrency);
	_msg.composeINT64(gmTransactionAmount);
	_msg.composeString(psTransactionCurrency);
	_msg.composeINT64(psTransactionAmount);
	_msg.composeString(psExchangeRate);
	_msg.composeString(gmTransactionTimeUTC);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_RequestTransferOut::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseStringP(gmTransactionId);
	_parser.parseBOOL(gmIsCashout);
	_parser.parseStringP(gmTransactionCurrency);
	_parser.parseINT64(gmTransactionAmount);
	_parser.parseStringP(psTransactionCurrency);
	_parser.parseINT64(psTransactionAmount);
	_parser.parseStringP(psExchangeRate);
	_parser.parseStringP(gmTransactionTimeUTC);
}

//=================================================================
//                Protocol_MSG_GIMO_A_RequestTransferOut
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_RequestTransferOut::Protocol_MSG_GIMO_A_RequestTransferOut()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_RequestTransferOut::Protocol_MSG_GIMO_A_RequestTransferOut(Protocol_MSG_GIMO_A_RequestTransferOut&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, gmTransactionId(std::move(_o.gmTransactionId))
	, psTransactionId(std::move(_o.psTransactionId))
	, psTransactionTimeUTC(std::move(_o.psTransactionTimeUTC))
	, gmTransactionCurrency(std::move(_o.gmTransactionCurrency))
	, gmTransactionAmount(std::move(_o.gmTransactionAmount))
	, psTransactionCurrency(std::move(_o.psTransactionCurrency))
	, psTransactionAmount(std::move(_o.psTransactionAmount))
	, psExchangeRate(std::move(_o.psExchangeRate))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_RequestTransferOut& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_RequestTransferOut::operator=(Protocol_MSG_GIMO_A_RequestTransferOut&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		gmTransactionId = std::move(_o.gmTransactionId);
		psTransactionId = std::move(_o.psTransactionId);
		psTransactionTimeUTC = std::move(_o.psTransactionTimeUTC);
		gmTransactionCurrency = std::move(_o.gmTransactionCurrency);
		gmTransactionAmount = std::move(_o.gmTransactionAmount);
		psTransactionCurrency = std::move(_o.psTransactionCurrency);
		psTransactionAmount = std::move(_o.psTransactionAmount);
		psExchangeRate = std::move(_o.psExchangeRate);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_RequestTransferOut::clear()
{
	requestId.clear();
	psWebId.clear();
	gmTransactionId.clear();
	psTransactionId = 0;
	psTransactionTimeUTC.clear();
	gmTransactionCurrency.clear();
	gmTransactionAmount = 0;
	psTransactionCurrency.clear();
	psTransactionAmount = 0;
	psExchangeRate.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_RequestTransferOut::equals(const Protocol_MSG_GIMO_A_RequestTransferOut& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		gmTransactionId.equals(_o.gmTransactionId) &&
		psTransactionId == _o.psTransactionId &&
		psTransactionTimeUTC.equals(_o.psTransactionTimeUTC) &&
		gmTransactionCurrency.equals(_o.gmTransactionCurrency) &&
		gmTransactionAmount == _o.gmTransactionAmount &&
		psTransactionCurrency.equals(_o.psTransactionCurrency) &&
		psTransactionAmount == _o.psTransactionAmount &&
		psExchangeRate.equals(_o.psExchangeRate);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_RequestTransferOut::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_RequestTransferOut).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("gmTransactionId=");
	_buf.append(gmTransactionId);
	_buf.append(',');
	_buf.append("psTransactionId=");
	_buf.appendUint64(psTransactionId);
	_buf.append(',');
	_buf.append("psTransactionTimeUTC=");
	_buf.append(psTransactionTimeUTC);
	_buf.append(',');
	_buf.append("gmTransactionCurrency=");
	_buf.append(gmTransactionCurrency);
	_buf.append(',');
	_buf.append("gmTransactionAmount=");
	_buf.appendInt64(gmTransactionAmount);
	_buf.append(',');
	_buf.append("psTransactionCurrency=");
	_buf.append(psTransactionCurrency);
	_buf.append(',');
	_buf.append("psTransactionAmount=");
	_buf.appendInt64(psTransactionAmount);
	_buf.append(',');
	_buf.append("psExchangeRate=");
	_buf.append(psExchangeRate);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_RequestTransferOut::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeString(gmTransactionId);
	_msg.composeUINT64(psTransactionId);
	_msg.composeString(psTransactionTimeUTC);
	_msg.composeString(gmTransactionCurrency);
	_msg.composeINT64(gmTransactionAmount);
	_msg.composeString(psTransactionCurrency);
	_msg.composeINT64(psTransactionAmount);
	_msg.composeString(psExchangeRate);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_RequestTransferOut::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseStringP(gmTransactionId);
	_parser.parseUINT64(psTransactionId);
	_parser.parseStringP(psTransactionTimeUTC);
	_parser.parseStringP(gmTransactionCurrency);
	_parser.parseINT64(gmTransactionAmount);
	_parser.parseStringP(psTransactionCurrency);
	_parser.parseINT64(psTransactionAmount);
	_parser.parseStringP(psExchangeRate);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_GetTransferOutStatus
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetTransferOutStatus::Protocol_MSG_GIMO_Q_GetTransferOutStatus()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetTransferOutStatus::Protocol_MSG_GIMO_Q_GetTransferOutStatus(Protocol_MSG_GIMO_Q_GetTransferOutStatus&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, psTransactionId(std::move(_o.psTransactionId))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetTransferOutStatus& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetTransferOutStatus::operator=(Protocol_MSG_GIMO_Q_GetTransferOutStatus&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		psTransactionId = std::move(_o.psTransactionId);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetTransferOutStatus::clear()
{
	requestId.clear();
	psWebId.clear();
	psTransactionId = 0;
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetTransferOutStatus::equals(const Protocol_MSG_GIMO_Q_GetTransferOutStatus& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		psTransactionId == _o.psTransactionId;
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetTransferOutStatus::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_GetTransferOutStatus).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("psTransactionId=");
	_buf.appendUint64(psTransactionId);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetTransferOutStatus::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeUINT64(psTransactionId);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetTransferOutStatus::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseUINT64(psTransactionId);
}

//=================================================================
//                Protocol_MSG_GIMO_A_GetTransferOutStatus
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetTransferOutStatus::Protocol_MSG_GIMO_A_GetTransferOutStatus()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetTransferOutStatus::Protocol_MSG_GIMO_A_GetTransferOutStatus(Protocol_MSG_GIMO_A_GetTransferOutStatus&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, gmTransactionId(std::move(_o.gmTransactionId))
	, psTransactionId(std::move(_o.psTransactionId))
	, gmIsCashout(std::move(_o.gmIsCashout))
	, gmTransactionCurrency(std::move(_o.gmTransactionCurrency))
	, gmTransactionAmount(std::move(_o.gmTransactionAmount))
	, psTransactionCurrency(std::move(_o.psTransactionCurrency))
	, psTransactionAmount(std::move(_o.psTransactionAmount))
	, psExchangeRate(std::move(_o.psExchangeRate))
	, psTransactionTimeUTC(std::move(_o.psTransactionTimeUTC))
	, psTransactionStatus(std::move(_o.psTransactionStatus))
	, psTransactionStatusTimeUTC(std::move(_o.psTransactionStatusTimeUTC))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetTransferOutStatus& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetTransferOutStatus::operator=(Protocol_MSG_GIMO_A_GetTransferOutStatus&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		gmTransactionId = std::move(_o.gmTransactionId);
		psTransactionId = std::move(_o.psTransactionId);
		gmIsCashout = std::move(_o.gmIsCashout);
		gmTransactionCurrency = std::move(_o.gmTransactionCurrency);
		gmTransactionAmount = std::move(_o.gmTransactionAmount);
		psTransactionCurrency = std::move(_o.psTransactionCurrency);
		psTransactionAmount = std::move(_o.psTransactionAmount);
		psExchangeRate = std::move(_o.psExchangeRate);
		psTransactionTimeUTC = std::move(_o.psTransactionTimeUTC);
		psTransactionStatus = std::move(_o.psTransactionStatus);
		psTransactionStatusTimeUTC = std::move(_o.psTransactionStatusTimeUTC);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetTransferOutStatus::clear()
{
	requestId.clear();
	psWebId.clear();
	gmTransactionId.clear();
	psTransactionId = 0;
	gmIsCashout = false;
	gmTransactionCurrency.clear();
	gmTransactionAmount = 0;
	psTransactionCurrency.clear();
	psTransactionAmount = 0;
	psExchangeRate.clear();
	psTransactionTimeUTC.clear();
	psTransactionStatus = 0;
	psTransactionStatusTimeUTC.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetTransferOutStatus::equals(const Protocol_MSG_GIMO_A_GetTransferOutStatus& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		gmTransactionId.equals(_o.gmTransactionId) &&
		psTransactionId == _o.psTransactionId &&
		gmIsCashout == _o.gmIsCashout &&
		gmTransactionCurrency.equals(_o.gmTransactionCurrency) &&
		gmTransactionAmount == _o.gmTransactionAmount &&
		psTransactionCurrency.equals(_o.psTransactionCurrency) &&
		psTransactionAmount == _o.psTransactionAmount &&
		psExchangeRate.equals(_o.psExchangeRate) &&
		psTransactionTimeUTC.equals(_o.psTransactionTimeUTC) &&
		psTransactionStatus == _o.psTransactionStatus &&
		psTransactionStatusTimeUTC.equals(_o.psTransactionStatusTimeUTC);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetTransferOutStatus::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_GetTransferOutStatus).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("gmTransactionId=");
	_buf.append(gmTransactionId);
	_buf.append(',');
	_buf.append("psTransactionId=");
	_buf.appendUint64(psTransactionId);
	_buf.append(',');
	_buf.append("gmIsCashout=");
	_buf.appendUint(gmIsCashout);
	_buf.append(',');
	_buf.append("gmTransactionCurrency=");
	_buf.append(gmTransactionCurrency);
	_buf.append(',');
	_buf.append("gmTransactionAmount=");
	_buf.appendInt64(gmTransactionAmount);
	_buf.append(',');
	_buf.append("psTransactionCurrency=");
	_buf.append(psTransactionCurrency);
	_buf.append(',');
	_buf.append("psTransactionAmount=");
	_buf.appendInt64(psTransactionAmount);
	_buf.append(',');
	_buf.append("psExchangeRate=");
	_buf.append(psExchangeRate);
	_buf.append(',');
	_buf.append("psTransactionTimeUTC=");
	_buf.append(psTransactionTimeUTC);
	_buf.append(',');
	_buf.append("psTransactionStatus=");
	_buf.appendUint(psTransactionStatus);
	_buf.append(',');
	_buf.append("psTransactionStatusTimeUTC=");
	_buf.append(psTransactionStatusTimeUTC);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetTransferOutStatus::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeString(gmTransactionId);
	_msg.composeUINT64(psTransactionId);
	_msg.composeBOOL(gmIsCashout);
	_msg.composeString(gmTransactionCurrency);
	_msg.composeINT64(gmTransactionAmount);
	_msg.composeString(psTransactionCurrency);
	_msg.composeINT64(psTransactionAmount);
	_msg.composeString(psExchangeRate);
	_msg.composeString(psTransactionTimeUTC);
	_msg.composeUINT16(psTransactionStatus);
	_msg.composeString(psTransactionStatusTimeUTC);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetTransferOutStatus::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseStringP(gmTransactionId);
	_parser.parseUINT64(psTransactionId);
	_parser.parseBOOL(gmIsCashout);
	_parser.parseStringP(gmTransactionCurrency);
	_parser.parseINT64(gmTransactionAmount);
	_parser.parseStringP(psTransactionCurrency);
	_parser.parseINT64(psTransactionAmount);
	_parser.parseStringP(psExchangeRate);
	_parser.parseStringP(psTransactionTimeUTC);
	_parser.parseUINT16(psTransactionStatus);
	_parser.parseStringP(psTransactionStatusTimeUTC);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_GetAccountDetails
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAccountDetails::Protocol_MSG_GIMO_Q_GetAccountDetails()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAccountDetails::Protocol_MSG_GIMO_Q_GetAccountDetails(Protocol_MSG_GIMO_Q_GetAccountDetails&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAccountDetails& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAccountDetails::operator=(Protocol_MSG_GIMO_Q_GetAccountDetails&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAccountDetails::clear()
{
	requestId.clear();
	psWebId.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAccountDetails::equals(const Protocol_MSG_GIMO_Q_GetAccountDetails& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAccountDetails::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_GetAccountDetails).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAccountDetails::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAccountDetails::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
}

//=================================================================
//                Protocol_MSG_GIMO_A_GetAccountDetails
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAccountDetails::Protocol_MSG_GIMO_A_GetAccountDetails()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAccountDetails::Protocol_MSG_GIMO_A_GetAccountDetails(Protocol_MSG_GIMO_A_GetAccountDetails&& _o)
	: requestId(std::move(_o.requestId))
	, psBalanceCurrency(std::move(_o.psBalanceCurrency))
	, psAvailableAmount(std::move(_o.psAvailableAmount))
	, psInPlayAmount(std::move(_o.psInPlayAmount))
	, psTChipsAmount(std::move(_o.psTChipsAmount))
	, psPlayMoneyAvailableAmount(std::move(_o.psPlayMoneyAvailableAmount))
	, psPlayMoneyInPlayAmount(std::move(_o.psPlayMoneyInPlayAmount))
	, psStarsCoinsAmount(std::move(_o.psStarsCoinsAmount))
	, psBonusCodes(std::move(_o.psBonusCodes))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAccountDetails& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAccountDetails::operator=(Protocol_MSG_GIMO_A_GetAccountDetails&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psBalanceCurrency = std::move(_o.psBalanceCurrency);
		psAvailableAmount = std::move(_o.psAvailableAmount);
		psInPlayAmount = std::move(_o.psInPlayAmount);
		psTChipsAmount = std::move(_o.psTChipsAmount);
		psPlayMoneyAvailableAmount = std::move(_o.psPlayMoneyAvailableAmount);
		psPlayMoneyInPlayAmount = std::move(_o.psPlayMoneyInPlayAmount);
		psStarsCoinsAmount = std::move(_o.psStarsCoinsAmount);
		psBonusCodes = std::move(_o.psBonusCodes);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAccountDetails::clear()
{
	requestId.clear();
	psBalanceCurrency.clear();
	psAvailableAmount = 0;
	psInPlayAmount = 0;
	psTChipsAmount = 0;
	psPlayMoneyAvailableAmount = 0;
	psPlayMoneyInPlayAmount = 0;
	psStarsCoinsAmount = 0;
	psBonusCodes.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAccountDetails::equals(const Protocol_MSG_GIMO_A_GetAccountDetails& _o) const
{
	return requestId.equals(_o.requestId) &&
		psBalanceCurrency.equals(_o.psBalanceCurrency) &&
		psAvailableAmount == _o.psAvailableAmount &&
		psInPlayAmount == _o.psInPlayAmount &&
		psTChipsAmount == _o.psTChipsAmount &&
		psPlayMoneyAvailableAmount == _o.psPlayMoneyAvailableAmount &&
		psPlayMoneyInPlayAmount == _o.psPlayMoneyInPlayAmount &&
		psStarsCoinsAmount == _o.psStarsCoinsAmount &&
		psBonusCodes.equals(_o.psBonusCodes);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAccountDetails::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_GetAccountDetails).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psBalanceCurrency=");
	_buf.append(psBalanceCurrency);
	_buf.append(',');
	_buf.append("psAvailableAmount=");
	_buf.appendInt64(psAvailableAmount);
	_buf.append(',');
	_buf.append("psInPlayAmount=");
	_buf.appendInt64(psInPlayAmount);
	_buf.append(',');
	_buf.append("psTChipsAmount=");
	_buf.appendInt64(psTChipsAmount);
	_buf.append(',');
	_buf.append("psPlayMoneyAvailableAmount=");
	_buf.appendInt64(psPlayMoneyAvailableAmount);
	_buf.append(',');
	_buf.append("psPlayMoneyInPlayAmount=");
	_buf.appendInt64(psPlayMoneyInPlayAmount);
	_buf.append(',');
	_buf.append("psStarsCoinsAmount=");
	_buf.appendInt64(psStarsCoinsAmount);
	_buf.append(',');
	_buf.append("psBonusCodes=");
	psBonusCodes.toTraceString(_buf);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAccountDetails::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psBalanceCurrency);
	_msg.composeINT64(psAvailableAmount);
	_msg.composeINT64(psInPlayAmount);
	_msg.composeINT64(psTChipsAmount);
	_msg.composeINT64(psPlayMoneyAvailableAmount);
	_msg.composeINT64(psPlayMoneyInPlayAmount);
	_msg.composeINT64(psStarsCoinsAmount);
	psBonusCodes.composeMsg(_msg);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAccountDetails::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psBalanceCurrency);
	_parser.parseINT64(psAvailableAmount);
	_parser.parseINT64(psInPlayAmount);
	_parser.parseINT64(psTChipsAmount);
	_parser.parseINT64(psPlayMoneyAvailableAmount);
	_parser.parseINT64(psPlayMoneyInPlayAmount);
	_parser.parseINT64(psStarsCoinsAmount);
	psBonusCodes.parseMsg(_parser);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_GetPendingCashouts
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetPendingCashouts::Protocol_MSG_GIMO_Q_GetPendingCashouts()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetPendingCashouts::Protocol_MSG_GIMO_Q_GetPendingCashouts(Protocol_MSG_GIMO_Q_GetPendingCashouts&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetPendingCashouts& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetPendingCashouts::operator=(Protocol_MSG_GIMO_Q_GetPendingCashouts&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetPendingCashouts::clear()
{
	requestId.clear();
	psWebId.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetPendingCashouts::equals(const Protocol_MSG_GIMO_Q_GetPendingCashouts& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetPendingCashouts::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_GetPendingCashouts).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetPendingCashouts::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetPendingCashouts::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
}

//=================================================================
//                Protocol_MSG_GIMO_A_GetPendingCashouts
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetPendingCashouts::Protocol_MSG_GIMO_A_GetPendingCashouts()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetPendingCashouts::Protocol_MSG_GIMO_A_GetPendingCashouts(Protocol_MSG_GIMO_A_GetPendingCashouts&& _o)
	: requestId(std::move(_o.requestId))
	, psPendingCashouts(std::move(_o.psPendingCashouts))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetPendingCashouts& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetPendingCashouts::operator=(Protocol_MSG_GIMO_A_GetPendingCashouts&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psPendingCashouts = std::move(_o.psPendingCashouts);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetPendingCashouts::clear()
{
	requestId.clear();
	psPendingCashouts.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetPendingCashouts::equals(const Protocol_MSG_GIMO_A_GetPendingCashouts& _o) const
{
	return requestId.equals(_o.requestId) &&
		psPendingCashouts.equals(_o.psPendingCashouts);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetPendingCashouts::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_GetPendingCashouts).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psPendingCashouts=");
	psPendingCashouts.toTraceString(_buf);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetPendingCashouts::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	psPendingCashouts.composeMsg(_msg);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetPendingCashouts::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	psPendingCashouts.parseMsg(_parser);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_UpdateAccountDetails
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_UpdateAccountDetails::Protocol_MSG_GIMO_Q_UpdateAccountDetails()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_UpdateAccountDetails::Protocol_MSG_GIMO_Q_UpdateAccountDetails(Protocol_MSG_GIMO_Q_UpdateAccountDetails&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, gmFields(std::move(_o.gmFields))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_UpdateAccountDetails& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_UpdateAccountDetails::operator=(Protocol_MSG_GIMO_Q_UpdateAccountDetails&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		gmFields = std::move(_o.gmFields);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_UpdateAccountDetails::clear()
{
	requestId.clear();
	psWebId.clear();
	gmFields.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_UpdateAccountDetails::equals(const Protocol_MSG_GIMO_Q_UpdateAccountDetails& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		gmFields.equals(_o.gmFields);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_UpdateAccountDetails::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_UpdateAccountDetails).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("gmFields=");
	gmFields.toTraceString(_buf);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_UpdateAccountDetails::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	gmFields.composeMsg(_msg);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_UpdateAccountDetails::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	gmFields.parseMsg(_parser);
}

//=================================================================
//                Protocol_MSG_GIMO_A_UpdateAccountDetails
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_UpdateAccountDetails::Protocol_MSG_GIMO_A_UpdateAccountDetails()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_UpdateAccountDetails::Protocol_MSG_GIMO_A_UpdateAccountDetails(Protocol_MSG_GIMO_A_UpdateAccountDetails&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, gmFieldNames(std::move(_o.gmFieldNames))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_UpdateAccountDetails& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_UpdateAccountDetails::operator=(Protocol_MSG_GIMO_A_UpdateAccountDetails&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		gmFieldNames = std::move(_o.gmFieldNames);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_UpdateAccountDetails::clear()
{
	requestId.clear();
	psWebId.clear();
	gmFieldNames.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_UpdateAccountDetails::equals(const Protocol_MSG_GIMO_A_UpdateAccountDetails& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		gmFieldNames.equals(_o.gmFieldNames);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_UpdateAccountDetails::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_UpdateAccountDetails).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("gmFieldNames=");
	gmFieldNames.toTraceString(_buf);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_UpdateAccountDetails::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	gmFieldNames.composeMsg(_msg);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_UpdateAccountDetails::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	gmFieldNames.parseMsg(_parser);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_GetAvailableDisplayNames
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAvailableDisplayNames::Protocol_MSG_GIMO_Q_GetAvailableDisplayNames()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAvailableDisplayNames::Protocol_MSG_GIMO_Q_GetAvailableDisplayNames(Protocol_MSG_GIMO_Q_GetAvailableDisplayNames&& _o)
	: requestId(std::move(_o.requestId))
	, gmDisplayNameSeed(std::move(_o.gmDisplayNameSeed))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAvailableDisplayNames& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAvailableDisplayNames::operator=(Protocol_MSG_GIMO_Q_GetAvailableDisplayNames&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		gmDisplayNameSeed = std::move(_o.gmDisplayNameSeed);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAvailableDisplayNames::clear()
{
	requestId.clear();
	gmDisplayNameSeed.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAvailableDisplayNames::equals(const Protocol_MSG_GIMO_Q_GetAvailableDisplayNames& _o) const
{
	return requestId.equals(_o.requestId) &&
		gmDisplayNameSeed.equals(_o.gmDisplayNameSeed);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAvailableDisplayNames::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_GetAvailableDisplayNames).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("gmDisplayNameSeed=");
	_buf.append(gmDisplayNameSeed);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAvailableDisplayNames::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(gmDisplayNameSeed);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetAvailableDisplayNames::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(gmDisplayNameSeed);
}

//=================================================================
//                Protocol_MSG_GIMO_A_GetAvailableDisplayNames
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAvailableDisplayNames::Protocol_MSG_GIMO_A_GetAvailableDisplayNames()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAvailableDisplayNames::Protocol_MSG_GIMO_A_GetAvailableDisplayNames(Protocol_MSG_GIMO_A_GetAvailableDisplayNames&& _o)
	: requestId(std::move(_o.requestId))
	, psIsDisplayNameAvailable(std::move(_o.psIsDisplayNameAvailable))
	, psSuggestedDisplayNames(std::move(_o.psSuggestedDisplayNames))
	, psEligibleForMigration(std::move(_o.psEligibleForMigration))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAvailableDisplayNames& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAvailableDisplayNames::operator=(Protocol_MSG_GIMO_A_GetAvailableDisplayNames&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psIsDisplayNameAvailable = std::move(_o.psIsDisplayNameAvailable);
		psSuggestedDisplayNames = std::move(_o.psSuggestedDisplayNames);
		psEligibleForMigration = std::move(_o.psEligibleForMigration);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAvailableDisplayNames::clear()
{
	requestId.clear();
	psIsDisplayNameAvailable = false;
	psSuggestedDisplayNames.clear();
	psEligibleForMigration = false;
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAvailableDisplayNames::equals(const Protocol_MSG_GIMO_A_GetAvailableDisplayNames& _o) const
{
	return requestId.equals(_o.requestId) &&
		psIsDisplayNameAvailable == _o.psIsDisplayNameAvailable &&
		psSuggestedDisplayNames.equals(_o.psSuggestedDisplayNames) &&
		psEligibleForMigration == _o.psEligibleForMigration;
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAvailableDisplayNames::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_GetAvailableDisplayNames).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psIsDisplayNameAvailable=");
	_buf.appendUint(psIsDisplayNameAvailable);
	_buf.append(',');
	_buf.append("psSuggestedDisplayNames=");
	psSuggestedDisplayNames.toTraceString(_buf);
	_buf.append(',');
	_buf.append("psEligibleForMigration=");
	_buf.appendUint(psEligibleForMigration);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAvailableDisplayNames::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeBOOL(psIsDisplayNameAvailable);
	psSuggestedDisplayNames.composeMsg(_msg);
	_msg.composeBOOL(psEligibleForMigration);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetAvailableDisplayNames::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseBOOL(psIsDisplayNameAvailable);
	psSuggestedDisplayNames.parseMsg(_parser);
	_parser.parseBOOL(psEligibleForMigration);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_GetMigrationStatus
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationStatus::Protocol_MSG_GIMO_Q_GetMigrationStatus()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationStatus::Protocol_MSG_GIMO_Q_GetMigrationStatus(Protocol_MSG_GIMO_Q_GetMigrationStatus&& _o)
	: requestId(std::move(_o.requestId))
	, gmDisplayName(std::move(_o.gmDisplayName))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationStatus& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationStatus::operator=(Protocol_MSG_GIMO_Q_GetMigrationStatus&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		gmDisplayName = std::move(_o.gmDisplayName);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationStatus::clear()
{
	requestId.clear();
	gmDisplayName.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationStatus::equals(const Protocol_MSG_GIMO_Q_GetMigrationStatus& _o) const
{
	return requestId.equals(_o.requestId) &&
		gmDisplayName.equals(_o.gmDisplayName);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationStatus::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_GetMigrationStatus).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("gmDisplayName=");
	_buf.append(gmDisplayName);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationStatus::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(gmDisplayName);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationStatus::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(gmDisplayName);
}

//=================================================================
//                Protocol_MSG_GIMO_A_GetMigrationStatus
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationStatus::Protocol_MSG_GIMO_A_GetMigrationStatus()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationStatus::Protocol_MSG_GIMO_A_GetMigrationStatus(Protocol_MSG_GIMO_A_GetMigrationStatus&& _o)
	: requestId(std::move(_o.requestId))
	, psEligibleForMigration(std::move(_o.psEligibleForMigration))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationStatus& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationStatus::operator=(Protocol_MSG_GIMO_A_GetMigrationStatus&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psEligibleForMigration = std::move(_o.psEligibleForMigration);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationStatus::clear()
{
	requestId.clear();
	psEligibleForMigration = false;
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationStatus::equals(const Protocol_MSG_GIMO_A_GetMigrationStatus& _o) const
{
	return requestId.equals(_o.requestId) &&
		psEligibleForMigration == _o.psEligibleForMigration;
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationStatus::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_GetMigrationStatus).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psEligibleForMigration=");
	_buf.appendUint(psEligibleForMigration);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationStatus::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeBOOL(psEligibleForMigration);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationStatus::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseBOOL(psEligibleForMigration);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_CreateAccount
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CreateAccount::Protocol_MSG_GIMO_Q_CreateAccount()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CreateAccount::Protocol_MSG_GIMO_Q_CreateAccount(Protocol_MSG_GIMO_Q_CreateAccount&& _o)
	: requestId(std::move(_o.requestId))
	, gmIpAddress(std::move(_o.gmIpAddress))
	, gmDisplayName(std::move(_o.gmDisplayName))
	, gmFirstName(std::move(_o.gmFirstName))
	, gmLastName(std::move(_o.gmLastName))
	, gmEmailAddress(std::move(_o.gmEmailAddress))
	, gmSex(std::move(_o.gmSex))
	, gmBirthday(std::move(_o.gmBirthday))
	, gmAddress1(std::move(_o.gmAddress1))
	, gmAddress2(std::move(_o.gmAddress2))
	, gmCity(std::move(_o.gmCity))
	, gmState(std::move(_o.gmState))
	, gmZip(std::move(_o.gmZip))
	, gmCountry(std::move(_o.gmCountry))
	, gmPhone(std::move(_o.gmPhone))
	, gmMobile(std::move(_o.gmMobile))
	, gmLanguage(std::move(_o.gmLanguage))
	, gmAffiliateTracker(std::move(_o.gmAffiliateTracker))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CreateAccount& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CreateAccount::operator=(Protocol_MSG_GIMO_Q_CreateAccount&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		gmIpAddress = std::move(_o.gmIpAddress);
		gmDisplayName = std::move(_o.gmDisplayName);
		gmFirstName = std::move(_o.gmFirstName);
		gmLastName = std::move(_o.gmLastName);
		gmEmailAddress = std::move(_o.gmEmailAddress);
		gmSex = std::move(_o.gmSex);
		gmBirthday = std::move(_o.gmBirthday);
		gmAddress1 = std::move(_o.gmAddress1);
		gmAddress2 = std::move(_o.gmAddress2);
		gmCity = std::move(_o.gmCity);
		gmState = std::move(_o.gmState);
		gmZip = std::move(_o.gmZip);
		gmCountry = std::move(_o.gmCountry);
		gmPhone = std::move(_o.gmPhone);
		gmMobile = std::move(_o.gmMobile);
		gmLanguage = std::move(_o.gmLanguage);
		gmAffiliateTracker = std::move(_o.gmAffiliateTracker);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CreateAccount::clear()
{
	requestId.clear();
	gmIpAddress.clear();
	gmDisplayName.clear();
	gmFirstName.clear();
	gmLastName.clear();
	gmEmailAddress.clear();
	gmSex.clear();
	gmBirthday.clear();
	gmAddress1.clear();
	gmAddress2.clear();
	gmCity.clear();
	gmState.clear();
	gmZip.clear();
	gmCountry.clear();
	gmPhone.clear();
	gmMobile.clear();
	gmLanguage.clear();
	gmAffiliateTracker.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CreateAccount::equals(const Protocol_MSG_GIMO_Q_CreateAccount& _o) const
{
	return requestId.equals(_o.requestId) &&
		gmIpAddress.equals(_o.gmIpAddress) &&
		gmDisplayName.equals(_o.gmDisplayName) &&
		gmFirstName.equals(_o.gmFirstName) &&
		gmLastName.equals(_o.gmLastName) &&
		gmEmailAddress.equals(_o.gmEmailAddress) &&
		gmSex.equals(_o.gmSex) &&
		gmBirthday.equals(_o.gmBirthday) &&
		gmAddress1.equals(_o.gmAddress1) &&
		gmAddress2.equals(_o.gmAddress2) &&
		gmCity.equals(_o.gmCity) &&
		gmState.equals(_o.gmState) &&
		gmZip.equals(_o.gmZip) &&
		gmCountry.equals(_o.gmCountry) &&
		gmPhone.equals(_o.gmPhone) &&
		gmMobile.equals(_o.gmMobile) &&
		gmLanguage.equals(_o.gmLanguage) &&
		gmAffiliateTracker.equals(_o.gmAffiliateTracker);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CreateAccount::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_CreateAccount).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("gmIpAddress=");
	_buf.append(gmIpAddress);
	_buf.append(',');
	_buf.append("gmDisplayName=");
	_buf.append(gmDisplayName);
	_buf.append(',');
	_buf.append("gmFirstName=");
	_buf.append(gmFirstName);
	_buf.append(',');
	_buf.append("gmLastName=");
	_buf.append(gmLastName);
	_buf.append(',');
	_buf.append("gmEmailAddress=");
	_buf.append(gmEmailAddress);
	_buf.append(',');
	_buf.append("gmSex=");
	_buf.append(gmSex);
	_buf.append(',');
	_buf.append("gmBirthday=");
	_buf.append(gmBirthday);
	_buf.append(',');
	_buf.append("gmAddress1=");
	_buf.append(gmAddress1);
	_buf.append(',');
	_buf.append("gmAddress2=");
	_buf.append(gmAddress2);
	_buf.append(',');
	_buf.append("gmCity=");
	_buf.append(gmCity);
	_buf.append(',');
	_buf.append("gmState=");
	_buf.append(gmState);
	_buf.append(',');
	_buf.append("gmZip=");
	_buf.append(gmZip);
	_buf.append(',');
	_buf.append("gmCountry=");
	_buf.append(gmCountry);
	_buf.append(',');
	_buf.append("gmPhone=");
	_buf.append(gmPhone);
	_buf.append(',');
	_buf.append("gmMobile=");
	_buf.append(gmMobile);
	_buf.append(',');
	_buf.append("gmLanguage=");
	_buf.append(gmLanguage);
	_buf.append(',');
	_buf.append("gmAffiliateTracker=");
	_buf.append(gmAffiliateTracker);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CreateAccount::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(gmIpAddress);
	_msg.composeString(gmDisplayName);
	_msg.composeString(gmFirstName);
	_msg.composeString(gmLastName);
	_msg.composeString(gmEmailAddress);
	_msg.composeString(gmSex);
	_msg.composeString(gmBirthday);
	_msg.composeString(gmAddress1);
	_msg.composeString(gmAddress2);
	_msg.composeString(gmCity);
	_msg.composeString(gmState);
	_msg.composeString(gmZip);
	_msg.composeString(gmCountry);
	_msg.composeString(gmPhone);
	_msg.composeString(gmMobile);
	_msg.composeString(gmLanguage);
	_msg.composeString(gmAffiliateTracker);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CreateAccount::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(gmIpAddress);
	_parser.parseStringP(gmDisplayName);
	_parser.parseStringP(gmFirstName);
	_parser.parseStringP(gmLastName);
	_parser.parseStringP(gmEmailAddress);
	_parser.parseStringP(gmSex);
	_parser.parseStringP(gmBirthday);
	_parser.parseStringP(gmAddress1);
	_parser.parseStringP(gmAddress2);
	_parser.parseStringP(gmCity);
	_parser.parseStringP(gmState);
	_parser.parseStringP(gmZip);
	_parser.parseStringP(gmCountry);
	_parser.parseStringP(gmPhone);
	_parser.parseStringP(gmMobile);
	_parser.parseStringP(gmLanguage);
	_parser.parseStringP(gmAffiliateTracker);
}

//=================================================================
//                Protocol_MSG_GIMO_A_CreateAccount
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CreateAccount::Protocol_MSG_GIMO_A_CreateAccount()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CreateAccount::Protocol_MSG_GIMO_A_CreateAccount(Protocol_MSG_GIMO_A_CreateAccount&& _o)
	: requestId(std::move(_o.requestId))
	, psDisplayName(std::move(_o.psDisplayName))
	, psWebId(std::move(_o.psWebId))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CreateAccount& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CreateAccount::operator=(Protocol_MSG_GIMO_A_CreateAccount&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psDisplayName = std::move(_o.psDisplayName);
		psWebId = std::move(_o.psWebId);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CreateAccount::clear()
{
	requestId.clear();
	psDisplayName.clear();
	psWebId.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CreateAccount::equals(const Protocol_MSG_GIMO_A_CreateAccount& _o) const
{
	return requestId.equals(_o.requestId) &&
		psDisplayName.equals(_o.psDisplayName) &&
		psWebId.equals(_o.psWebId);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CreateAccount::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_CreateAccount).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psDisplayName=");
	_buf.append(psDisplayName);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CreateAccount::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psDisplayName);
	_msg.composeString(psWebId);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CreateAccount::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psDisplayName);
	_parser.parseStringP(psWebId);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_GetMigrationInfoBlock
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationInfoBlock::Protocol_MSG_GIMO_Q_GetMigrationInfoBlock()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationInfoBlock::Protocol_MSG_GIMO_Q_GetMigrationInfoBlock(Protocol_MSG_GIMO_Q_GetMigrationInfoBlock&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, psMigrationToken(std::move(_o.psMigrationToken))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationInfoBlock& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationInfoBlock::operator=(Protocol_MSG_GIMO_Q_GetMigrationInfoBlock&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		psMigrationToken = std::move(_o.psMigrationToken);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationInfoBlock::clear()
{
	requestId.clear();
	psWebId.clear();
	psMigrationToken.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationInfoBlock::equals(const Protocol_MSG_GIMO_Q_GetMigrationInfoBlock& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		psMigrationToken.equals(_o.psMigrationToken);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationInfoBlock::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_GetMigrationInfoBlock).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("psMigrationToken=");
	_buf.append(psMigrationToken);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationInfoBlock::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeString(psMigrationToken);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetMigrationInfoBlock::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseStringP(psMigrationToken);
}

//=================================================================
//                Protocol_MSG_GIMO_A_GetMigrationInfoBlock
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationInfoBlock::Protocol_MSG_GIMO_A_GetMigrationInfoBlock()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationInfoBlock::Protocol_MSG_GIMO_A_GetMigrationInfoBlock(Protocol_MSG_GIMO_A_GetMigrationInfoBlock&& _o)
	: requestId(std::move(_o.requestId))
	, psDisplayName(std::move(_o.psDisplayName))
	, psWebId(std::move(_o.psWebId))
	, psFirstName(std::move(_o.psFirstName))
	, psLastName(std::move(_o.psLastName))
	, psEmailAddress(std::move(_o.psEmailAddress))
	, psSex(std::move(_o.psSex))
	, psBirthday(std::move(_o.psBirthday))
	, psAddress1(std::move(_o.psAddress1))
	, psAddress2(std::move(_o.psAddress2))
	, psCity(std::move(_o.psCity))
	, psState(std::move(_o.psState))
	, psZip(std::move(_o.psZip))
	, psCountry(std::move(_o.psCountry))
	, psPhone(std::move(_o.psPhone))
	, psMobile(std::move(_o.psMobile))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationInfoBlock& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationInfoBlock::operator=(Protocol_MSG_GIMO_A_GetMigrationInfoBlock&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psDisplayName = std::move(_o.psDisplayName);
		psWebId = std::move(_o.psWebId);
		psFirstName = std::move(_o.psFirstName);
		psLastName = std::move(_o.psLastName);
		psEmailAddress = std::move(_o.psEmailAddress);
		psSex = std::move(_o.psSex);
		psBirthday = std::move(_o.psBirthday);
		psAddress1 = std::move(_o.psAddress1);
		psAddress2 = std::move(_o.psAddress2);
		psCity = std::move(_o.psCity);
		psState = std::move(_o.psState);
		psZip = std::move(_o.psZip);
		psCountry = std::move(_o.psCountry);
		psPhone = std::move(_o.psPhone);
		psMobile = std::move(_o.psMobile);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationInfoBlock::clear()
{
	requestId.clear();
	psDisplayName.clear();
	psWebId.clear();
	psFirstName.clear();
	psLastName.clear();
	psEmailAddress.clear();
	psSex.clear();
	psBirthday.clear();
	psAddress1.clear();
	psAddress2.clear();
	psCity.clear();
	psState.clear();
	psZip.clear();
	psCountry.clear();
	psPhone.clear();
	psMobile.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationInfoBlock::equals(const Protocol_MSG_GIMO_A_GetMigrationInfoBlock& _o) const
{
	return requestId.equals(_o.requestId) &&
		psDisplayName.equals(_o.psDisplayName) &&
		psWebId.equals(_o.psWebId) &&
		psFirstName.equals(_o.psFirstName) &&
		psLastName.equals(_o.psLastName) &&
		psEmailAddress.equals(_o.psEmailAddress) &&
		psSex.equals(_o.psSex) &&
		psBirthday.equals(_o.psBirthday) &&
		psAddress1.equals(_o.psAddress1) &&
		psAddress2.equals(_o.psAddress2) &&
		psCity.equals(_o.psCity) &&
		psState.equals(_o.psState) &&
		psZip.equals(_o.psZip) &&
		psCountry.equals(_o.psCountry) &&
		psPhone.equals(_o.psPhone) &&
		psMobile.equals(_o.psMobile);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationInfoBlock::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_GetMigrationInfoBlock).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psDisplayName=");
	_buf.append(psDisplayName);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("psFirstName=");
	_buf.append(psFirstName);
	_buf.append(',');
	_buf.append("psLastName=");
	_buf.append(psLastName);
	_buf.append(',');
	_buf.append("psEmailAddress=");
	_buf.append(psEmailAddress);
	_buf.append(',');
	_buf.append("psSex=");
	_buf.append(psSex);
	_buf.append(',');
	_buf.append("psBirthday=");
	_buf.append(psBirthday);
	_buf.append(',');
	_buf.append("psAddress1=");
	_buf.append(psAddress1);
	_buf.append(',');
	_buf.append("psAddress2=");
	_buf.append(psAddress2);
	_buf.append(',');
	_buf.append("psCity=");
	_buf.append(psCity);
	_buf.append(',');
	_buf.append("psState=");
	_buf.append(psState);
	_buf.append(',');
	_buf.append("psZip=");
	_buf.append(psZip);
	_buf.append(',');
	_buf.append("psCountry=");
	_buf.append(psCountry);
	_buf.append(',');
	_buf.append("psPhone=");
	_buf.append(psPhone);
	_buf.append(',');
	_buf.append("psMobile=");
	_buf.append(psMobile);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationInfoBlock::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psDisplayName);
	_msg.composeString(psWebId);
	_msg.composeString(psFirstName);
	_msg.composeString(psLastName);
	_msg.composeString(psEmailAddress);
	_msg.composeString(psSex);
	_msg.composeString(psBirthday);
	_msg.composeString(psAddress1);
	_msg.composeString(psAddress2);
	_msg.composeString(psCity);
	_msg.composeString(psState);
	_msg.composeString(psZip);
	_msg.composeString(psCountry);
	_msg.composeString(psPhone);
	_msg.composeString(psMobile);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetMigrationInfoBlock::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psDisplayName);
	_parser.parseStringP(psWebId);
	_parser.parseStringP(psFirstName);
	_parser.parseStringP(psLastName);
	_parser.parseStringP(psEmailAddress);
	_parser.parseStringP(psSex);
	_parser.parseStringP(psBirthday);
	_parser.parseStringP(psAddress1);
	_parser.parseStringP(psAddress2);
	_parser.parseStringP(psCity);
	_parser.parseStringP(psState);
	_parser.parseStringP(psZip);
	_parser.parseStringP(psCountry);
	_parser.parseStringP(psPhone);
	_parser.parseStringP(psMobile);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_MigratePlayer
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_MigratePlayer::Protocol_MSG_GIMO_Q_MigratePlayer()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_MigratePlayer::Protocol_MSG_GIMO_Q_MigratePlayer(Protocol_MSG_GIMO_Q_MigratePlayer&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, psMigrationToken(std::move(_o.psMigrationToken))
	, gmIpAddress(std::move(_o.gmIpAddress))
	, gmFirstName(std::move(_o.gmFirstName))
	, gmLastName(std::move(_o.gmLastName))
	, gmEmailAddress(std::move(_o.gmEmailAddress))
	, gmSex(std::move(_o.gmSex))
	, gmBirthday(std::move(_o.gmBirthday))
	, gmAddress1(std::move(_o.gmAddress1))
	, gmAddress2(std::move(_o.gmAddress2))
	, gmCity(std::move(_o.gmCity))
	, gmState(std::move(_o.gmState))
	, gmZip(std::move(_o.gmZip))
	, gmCountry(std::move(_o.gmCountry))
	, gmPhone(std::move(_o.gmPhone))
	, gmMobile(std::move(_o.gmMobile))
	, gmBlacklisted(std::move(_o.gmBlacklisted))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_MigratePlayer& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_MigratePlayer::operator=(Protocol_MSG_GIMO_Q_MigratePlayer&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		psMigrationToken = std::move(_o.psMigrationToken);
		gmIpAddress = std::move(_o.gmIpAddress);
		gmFirstName = std::move(_o.gmFirstName);
		gmLastName = std::move(_o.gmLastName);
		gmEmailAddress = std::move(_o.gmEmailAddress);
		gmSex = std::move(_o.gmSex);
		gmBirthday = std::move(_o.gmBirthday);
		gmAddress1 = std::move(_o.gmAddress1);
		gmAddress2 = std::move(_o.gmAddress2);
		gmCity = std::move(_o.gmCity);
		gmState = std::move(_o.gmState);
		gmZip = std::move(_o.gmZip);
		gmCountry = std::move(_o.gmCountry);
		gmPhone = std::move(_o.gmPhone);
		gmMobile = std::move(_o.gmMobile);
		gmBlacklisted = std::move(_o.gmBlacklisted);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_MigratePlayer::clear()
{
	requestId.clear();
	psWebId.clear();
	psMigrationToken.clear();
	gmIpAddress.clear();
	gmFirstName.clear();
	gmLastName.clear();
	gmEmailAddress.clear();
	gmSex.clear();
	gmBirthday.clear();
	gmAddress1.clear();
	gmAddress2.clear();
	gmCity.clear();
	gmState.clear();
	gmZip.clear();
	gmCountry.clear();
	gmPhone.clear();
	gmMobile.clear();
	gmBlacklisted = false;
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_MigratePlayer::equals(const Protocol_MSG_GIMO_Q_MigratePlayer& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		psMigrationToken.equals(_o.psMigrationToken) &&
		gmIpAddress.equals(_o.gmIpAddress) &&
		gmFirstName.equals(_o.gmFirstName) &&
		gmLastName.equals(_o.gmLastName) &&
		gmEmailAddress.equals(_o.gmEmailAddress) &&
		gmSex.equals(_o.gmSex) &&
		gmBirthday.equals(_o.gmBirthday) &&
		gmAddress1.equals(_o.gmAddress1) &&
		gmAddress2.equals(_o.gmAddress2) &&
		gmCity.equals(_o.gmCity) &&
		gmState.equals(_o.gmState) &&
		gmZip.equals(_o.gmZip) &&
		gmCountry.equals(_o.gmCountry) &&
		gmPhone.equals(_o.gmPhone) &&
		gmMobile.equals(_o.gmMobile) &&
		gmBlacklisted == _o.gmBlacklisted;
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_MigratePlayer::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_MigratePlayer).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("psMigrationToken=");
	_buf.append(psMigrationToken);
	_buf.append(',');
	_buf.append("gmIpAddress=");
	_buf.append(gmIpAddress);
	_buf.append(',');
	_buf.append("gmFirstName=");
	_buf.append(gmFirstName);
	_buf.append(',');
	_buf.append("gmLastName=");
	_buf.append(gmLastName);
	_buf.append(',');
	_buf.append("gmEmailAddress=");
	_buf.append(gmEmailAddress);
	_buf.append(',');
	_buf.append("gmSex=");
	_buf.append(gmSex);
	_buf.append(',');
	_buf.append("gmBirthday=");
	_buf.append(gmBirthday);
	_buf.append(',');
	_buf.append("gmAddress1=");
	_buf.append(gmAddress1);
	_buf.append(',');
	_buf.append("gmAddress2=");
	_buf.append(gmAddress2);
	_buf.append(',');
	_buf.append("gmCity=");
	_buf.append(gmCity);
	_buf.append(',');
	_buf.append("gmState=");
	_buf.append(gmState);
	_buf.append(',');
	_buf.append("gmZip=");
	_buf.append(gmZip);
	_buf.append(',');
	_buf.append("gmCountry=");
	_buf.append(gmCountry);
	_buf.append(',');
	_buf.append("gmPhone=");
	_buf.append(gmPhone);
	_buf.append(',');
	_buf.append("gmMobile=");
	_buf.append(gmMobile);
	_buf.append(',');
	_buf.append("gmBlacklisted=");
	_buf.appendUint(gmBlacklisted);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_MigratePlayer::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeString(psMigrationToken);
	_msg.composeString(gmIpAddress);
	_msg.composeString(gmFirstName);
	_msg.composeString(gmLastName);
	_msg.composeString(gmEmailAddress);
	_msg.composeString(gmSex);
	_msg.composeString(gmBirthday);
	_msg.composeString(gmAddress1);
	_msg.composeString(gmAddress2);
	_msg.composeString(gmCity);
	_msg.composeString(gmState);
	_msg.composeString(gmZip);
	_msg.composeString(gmCountry);
	_msg.composeString(gmPhone);
	_msg.composeString(gmMobile);
	_msg.composeBOOL(gmBlacklisted);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_MigratePlayer::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseStringP(psMigrationToken);
	_parser.parseStringP(gmIpAddress);
	_parser.parseStringP(gmFirstName);
	_parser.parseStringP(gmLastName);
	_parser.parseStringP(gmEmailAddress);
	_parser.parseStringP(gmSex);
	_parser.parseStringP(gmBirthday);
	_parser.parseStringP(gmAddress1);
	_parser.parseStringP(gmAddress2);
	_parser.parseStringP(gmCity);
	_parser.parseStringP(gmState);
	_parser.parseStringP(gmZip);
	_parser.parseStringP(gmCountry);
	_parser.parseStringP(gmPhone);
	_parser.parseStringP(gmMobile);
	_parser.parseBOOL(gmBlacklisted);
}

//=================================================================
//                Protocol_MSG_GIMO_A_MigratePlayer
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_MigratePlayer::Protocol_MSG_GIMO_A_MigratePlayer()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_MigratePlayer::Protocol_MSG_GIMO_A_MigratePlayer(Protocol_MSG_GIMO_A_MigratePlayer&& _o)
	: requestId(std::move(_o.requestId))
	, psDisplayName(std::move(_o.psDisplayName))
	, psWebId(std::move(_o.psWebId))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_MigratePlayer& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_MigratePlayer::operator=(Protocol_MSG_GIMO_A_MigratePlayer&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psDisplayName = std::move(_o.psDisplayName);
		psWebId = std::move(_o.psWebId);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_MigratePlayer::clear()
{
	requestId.clear();
	psDisplayName.clear();
	psWebId.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_MigratePlayer::equals(const Protocol_MSG_GIMO_A_MigratePlayer& _o) const
{
	return requestId.equals(_o.requestId) &&
		psDisplayName.equals(_o.psDisplayName) &&
		psWebId.equals(_o.psWebId);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_MigratePlayer::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_MigratePlayer).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psDisplayName=");
	_buf.append(psDisplayName);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_MigratePlayer::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psDisplayName);
	_msg.composeString(psWebId);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_MigratePlayer::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psDisplayName);
	_parser.parseStringP(psWebId);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_CancelPendingCashout
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CancelPendingCashout::Protocol_MSG_GIMO_Q_CancelPendingCashout()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CancelPendingCashout::Protocol_MSG_GIMO_Q_CancelPendingCashout(Protocol_MSG_GIMO_Q_CancelPendingCashout&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, psTransactionId(std::move(_o.psTransactionId))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CancelPendingCashout& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CancelPendingCashout::operator=(Protocol_MSG_GIMO_Q_CancelPendingCashout&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		psTransactionId = std::move(_o.psTransactionId);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CancelPendingCashout::clear()
{
	requestId.clear();
	psWebId.clear();
	psTransactionId = 0;
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CancelPendingCashout::equals(const Protocol_MSG_GIMO_Q_CancelPendingCashout& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		psTransactionId == _o.psTransactionId;
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CancelPendingCashout::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_CancelPendingCashout).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("psTransactionId=");
	_buf.appendUint64(psTransactionId);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CancelPendingCashout::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeUINT64(psTransactionId);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_CancelPendingCashout::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseUINT64(psTransactionId);
}

//=================================================================
//                Protocol_MSG_GIMO_A_CancelPendingCashout
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CancelPendingCashout::Protocol_MSG_GIMO_A_CancelPendingCashout()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CancelPendingCashout::Protocol_MSG_GIMO_A_CancelPendingCashout(Protocol_MSG_GIMO_A_CancelPendingCashout&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, psTransactionId(std::move(_o.psTransactionId))
	, gmTransactionId(std::move(_o.gmTransactionId))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CancelPendingCashout& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CancelPendingCashout::operator=(Protocol_MSG_GIMO_A_CancelPendingCashout&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		psTransactionId = std::move(_o.psTransactionId);
		gmTransactionId = std::move(_o.gmTransactionId);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CancelPendingCashout::clear()
{
	requestId.clear();
	psWebId.clear();
	psTransactionId = 0;
	gmTransactionId.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CancelPendingCashout::equals(const Protocol_MSG_GIMO_A_CancelPendingCashout& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		psTransactionId == _o.psTransactionId &&
		gmTransactionId.equals(_o.gmTransactionId);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CancelPendingCashout::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_CancelPendingCashout).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("psTransactionId=");
	_buf.appendUint64(psTransactionId);
	_buf.append(',');
	_buf.append("gmTransactionId=");
	_buf.append(gmTransactionId);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CancelPendingCashout::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeUINT64(psTransactionId);
	_msg.composeString(gmTransactionId);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_CancelPendingCashout::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseUINT64(psTransactionId);
	_parser.parseStringP(gmTransactionId);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_FinalizeCashout
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_FinalizeCashout::Protocol_MSG_GIMO_Q_FinalizeCashout()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_FinalizeCashout::Protocol_MSG_GIMO_Q_FinalizeCashout(Protocol_MSG_GIMO_Q_FinalizeCashout&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, psTransactionId(std::move(_o.psTransactionId))
	, gmTransactionState(std::move(_o.gmTransactionState))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_FinalizeCashout& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_FinalizeCashout::operator=(Protocol_MSG_GIMO_Q_FinalizeCashout&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		psTransactionId = std::move(_o.psTransactionId);
		gmTransactionState = std::move(_o.gmTransactionState);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_FinalizeCashout::clear()
{
	requestId.clear();
	psWebId.clear();
	psTransactionId = 0;
	gmTransactionState = 0;
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_FinalizeCashout::equals(const Protocol_MSG_GIMO_Q_FinalizeCashout& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		psTransactionId == _o.psTransactionId &&
		gmTransactionState == _o.gmTransactionState;
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_FinalizeCashout::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_FinalizeCashout).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("psTransactionId=");
	_buf.appendUint64(psTransactionId);
	_buf.append(',');
	_buf.append("gmTransactionState=");
	_buf.appendUint(gmTransactionState);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_FinalizeCashout::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeUINT64(psTransactionId);
	_msg.composeUINT16(gmTransactionState);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_FinalizeCashout::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseUINT64(psTransactionId);
	_parser.parseUINT16(gmTransactionState);
}

//=================================================================
//                Protocol_MSG_GIMO_A_FinalizeCashout
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_FinalizeCashout::Protocol_MSG_GIMO_A_FinalizeCashout()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_FinalizeCashout::Protocol_MSG_GIMO_A_FinalizeCashout(Protocol_MSG_GIMO_A_FinalizeCashout&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
	, psTransactionId(std::move(_o.psTransactionId))
	, gmTransactionId(std::move(_o.gmTransactionId))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_FinalizeCashout& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_FinalizeCashout::operator=(Protocol_MSG_GIMO_A_FinalizeCashout&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
		psTransactionId = std::move(_o.psTransactionId);
		gmTransactionId = std::move(_o.gmTransactionId);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_FinalizeCashout::clear()
{
	requestId.clear();
	psWebId.clear();
	psTransactionId = 0;
	gmTransactionId.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_FinalizeCashout::equals(const Protocol_MSG_GIMO_A_FinalizeCashout& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId) &&
		psTransactionId == _o.psTransactionId &&
		gmTransactionId.equals(_o.gmTransactionId);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_FinalizeCashout::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_FinalizeCashout).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	_buf.append(',');
	_buf.append("psTransactionId=");
	_buf.appendUint64(psTransactionId);
	_buf.append(',');
	_buf.append("gmTransactionId=");
	_buf.append(gmTransactionId);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_FinalizeCashout::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
	_msg.composeUINT64(psTransactionId);
	_msg.composeString(gmTransactionId);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_FinalizeCashout::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
	_parser.parseUINT64(psTransactionId);
	_parser.parseStringP(gmTransactionId);
}

//=================================================================
//                Protocol_MSG_GIMO_Q_GetDisplayName
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetDisplayName::Protocol_MSG_GIMO_Q_GetDisplayName()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetDisplayName::Protocol_MSG_GIMO_Q_GetDisplayName(Protocol_MSG_GIMO_Q_GetDisplayName&& _o)
	: requestId(std::move(_o.requestId))
	, psWebId(std::move(_o.psWebId))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetDisplayName& SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetDisplayName::operator=(Protocol_MSG_GIMO_Q_GetDisplayName&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psWebId = std::move(_o.psWebId);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetDisplayName::clear()
{
	requestId.clear();
	psWebId.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetDisplayName::equals(const Protocol_MSG_GIMO_Q_GetDisplayName& _o) const
{
	return requestId.equals(_o.requestId) &&
		psWebId.equals(_o.psWebId);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetDisplayName::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_Q_GetDisplayName).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psWebId=");
	_buf.append(psWebId);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetDisplayName::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psWebId);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_Q_GetDisplayName::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psWebId);
}

//=================================================================
//                Protocol_MSG_GIMO_A_GetDisplayName
//=================================================================

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetDisplayName::Protocol_MSG_GIMO_A_GetDisplayName()
{
	clear();
}

#ifdef MOVE_CONSTRUCTOR_SUPPORTED

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetDisplayName::Protocol_MSG_GIMO_A_GetDisplayName(Protocol_MSG_GIMO_A_GetDisplayName&& _o)
	: requestId(std::move(_o.requestId))
	, psDisplayName(std::move(_o.psDisplayName))
{
}

SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetDisplayName& SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetDisplayName::operator=(Protocol_MSG_GIMO_A_GetDisplayName&& _o)
{
	if(this != &_o)
	{
		requestId = std::move(_o.requestId);
		psDisplayName = std::move(_o.psDisplayName);
	}
	return *this;
}

#endif

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetDisplayName::clear()
{
	requestId.clear();
	psDisplayName.clear();
}

bool SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetDisplayName::equals(const Protocol_MSG_GIMO_A_GetDisplayName& _o) const
{
	return requestId.equals(_o.requestId) &&
		psDisplayName.equals(_o.psDisplayName);
}

const char *SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetDisplayName::asTraceString(PString& _buf) const
{
	_buf.cut(0);
	_buf.append("msgid=").append(getMsgIdString()).append("(").appendUint(MSG_GIMO_A_GetDisplayName).append(")");
	_buf.append(',');
	_buf.append("requestId=");
	_buf.append(requestId);
	_buf.append(',');
	_buf.append("psDisplayName=");
	_buf.append(psDisplayName);
	return _buf.c_str();
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetDisplayName::composeMsg(CommMsgBody& _msg) const
{
	_msg.composeString(requestId);
	_msg.composeString(psDisplayName);
}

void SwissGW::PlainAPI::Protocol_MSG_GIMO_A_GetDisplayName::parseMsg(CommMsgParser& _parser)
{
	_parser.parseStringP(requestId);
	_parser.parseStringP(psDisplayName);
}

