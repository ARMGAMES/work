#include "commtime.h"
#include "pyrtime.h"
#include "SwissGW/PublicAPI.h"

#define TOP_LEVEL_NAMESPACE SwissGW


	MsgBodyStruct GmField
	{
		UINT16      gmFieldCode;  // enum SwissGw_GmFieldName
		PString     gmFieldValue;
		PString     gmFieldValueChangeTimeUTC;
	};

	MsgBodyStruct PsConversion
	{
		UINT16              rgConversionType; // enum SwissGw_RgConversionType
		PString             rgCurrency;
		INT64               rgAmount;
	};

	MsgBodyStruct PsConversionReply
	{
		UINT16              rgConversionType; // enum SwissGw_RgConversionType
		PString             gmCurrency;
		INT64               gmAmount;
		PString             psCurrency;
		INT64               psAmount;
		PString             psExchangeRate;
	};

	MsgBodyStruct PsPendingCashout
	{
		PString     gmTransactionId;
		UINT64      psTransactionId;
		bool        gmIsCashout;
		PString     gmTransactionCurrency;
		INT64       gmTransactionAmount; // in cents of GIMO currency
		PString     psTransactionCurrency;
		INT64       psTransactionAmount; // in cents of PS currency
		PString     psExchangeRate; 
		PString     psTransactionTimeUTC;
		bool        psCancelable;
	};

namespace PlainAPI // from middle-tier to server object, non-authenticated (NullGuard)
{
	Message MSG_GIMO_Q_PrecalculateConversion // 3.1
	{
		PString                requestId;
		vector<PsConversion>   psConversions;
	};
	Message MSG_GIMO_A_PrecalculateConversion
	{
		PString                requestId;
		vector<PsConversionReply> psConversionReplies;
	};

	Message MSG_GIMO_Q_TransferIn // 3.2
	{
		PString     requestId;
		PString     psWebId;
		PString     gmTransactionId;
		bool        gmIsDeposit;
		PString     gmTransactionCurrency;
		INT64       gmTransactionAmount; // in cents of GIMO currency
		PString     psTransactionCurrency;
		INT64       psTransactionAmount; // in cents of PS currency
		PString     psExchangeRate; 
		PString     gmTransactionTimeUTC;
		PString     psBonusCode;
	};
	Message MSG_GIMO_A_TransferIn
	{
		PString     requestId;
		PString     psWebId;
		PString     gmTransactionId;
		UINT64      psTransactionId;
		PString     psTransactionTimeUTC;
		PString     gmTransactionCurrency;
		INT64       gmTransactionAmount; // in cents of GIMO currency
		PString     psTransactionCurrency;
		INT64       psTransactionAmount; // in cents of PS currency
		PString     psExchangeRate; 
		PString     psBonusMessage;

	};

	Message MSG_GIMO_Q_RequestTransferOut // 3.3
	{
		PString     requestId;
		PString     psWebId;
		PString     gmTransactionId;
		bool        gmIsCashout;
		PString     gmTransactionCurrency;
		INT64       gmTransactionAmount; // in cents of GIMO currency
		PString     psTransactionCurrency;
		INT64       psTransactionAmount; // in cents of PS currency
		PString     psExchangeRate;
		PString     gmTransactionTimeUTC;
	};
	Message MSG_GIMO_A_RequestTransferOut
	{
		PString     requestId;
		PString     psWebId;
		PString     gmTransactionId;
		UINT64      psTransactionId;
		PString     psTransactionTimeUTC;
		PString     gmTransactionCurrency;
		INT64       gmTransactionAmount; // in cents of GIMO currency
		PString     psTransactionCurrency;
		INT64       psTransactionAmount; // in cents of PS currency
		PString     psExchangeRate;
	};

	Message MSG_GIMO_Q_GetTransferOutStatus // 3.4
	{
		PString     requestId;
		PString     psWebId;
		UINT64      psTransactionId;
	};
	Message MSG_GIMO_A_GetTransferOutStatus
	{
		PString     requestId;
		PString     psWebId;
		PString     gmTransactionId;
		UINT64      psTransactionId;
		bool        gmIsCashout;
		PString     gmTransactionCurrency;
		INT64       gmTransactionAmount; // in cents of GIMO currency
		PString     psTransactionCurrency;
		INT64       psTransactionAmount; // in cents of PS currency
		PString     psExchangeRate;
		PString     psTransactionTimeUTC;
		UINT16      psTransactionStatus; // enum SwissGw_TransStatus
		PString     psTransactionStatusTimeUTC;
	};

	Message MSG_GIMO_Q_GetAccountDetails // 3.5
	{
		PString     requestId;
		PString     psWebId;
	};
	Message MSG_GIMO_A_GetAccountDetails
	{
		PString         requestId;
		PString         psBalanceCurrency;
		INT64           psAvailableAmount; // in cents of PS currency
		INT64           psInPlayAmount;
		INT64           psTChipsAmount;
		INT64           psPlayMoneyAvailableAmount;
		INT64           psPlayMoneyInPlayAmount; // in cents at PS
		INT64           psStarsCoinsAmount; // at PS, to be displayed as is
		vector<PString> psBonusCodes;
	};

	Message MSG_GIMO_Q_GetPendingCashouts // 3.6
	{
		PString     requestId;
		PString     psWebId;
	};
	Message MSG_GIMO_A_GetPendingCashouts
	{
		PString     requestId;
		vector<PsPendingCashout>   psPendingCashouts;
	};

	Message MSG_GIMO_Q_UpdateAccountDetails // 3.7
	{
		PString          requestId;
		PString          psWebId;
		vector<GmField>  gmFields;
	};
	Message MSG_GIMO_A_UpdateAccountDetails
	{
		PString          requestId;
		PString          psWebId;
		vector<UINT16>   gmFieldNames; // enum SwissGw_GmFieldName
	};

	Message MSG_GIMO_Q_GetAvailableDisplayNames // 3.8
	{
		PString          requestId;
		PString          gmDisplayNameSeed;
	};
	Message MSG_GIMO_A_GetAvailableDisplayNames
	{
		PString          requestId;
		bool             psIsDisplayNameAvailable;
		vector<PString>  psSuggestedDisplayNames;
		bool             psEligibleForMigration;
	};

	Message MSG_GIMO_Q_GetMigrationStatus // 3.9
	{
		PString   requestId;
		PString   gmDisplayName;
	};
	Message MSG_GIMO_A_GetMigrationStatus
	{
		PString   requestId;
		bool      psEligibleForMigration;
	};

	Message MSG_GIMO_Q_CreateAccount // 3.10
	{
		PString   requestId;
		PString   gmIpAddress;
		PString   gmDisplayName;
		PString   gmFirstName;
		PString   gmLastName;
		PString   gmEmailAddress;
		PString   gmSex;         // M or F or N from GIMO (Gateway converts N to empty string for PS servers)
		PString   gmBirthday;    // YYYY-MM-DD
		PString   gmAddress1;
		PString   gmAddress2;
		PString   gmCity;
		PString   gmState;       // The State of the Player, or an empty string if not applicable
		PString   gmZip;         //  an empty string if not applicable
		PString   gmCountry; // as registered by GIMO, ISO 3166-1 alpha-2 code, as the player specified it on the sign-up form
		PString   gmPhone;       // an empty string if not applicable
		PString   gmMobile;      // an empty string if not applicable
		PString   gmLanguage;    // The Language as registered by GIMO, up to 5 characters, as per ISO 639-1 optionally followed by ISO 3166-2, e.g. “fr-CH”, or “de-CH”, or “it-CH”, etc.
		PString   gmAffiliateTracker;
	};
	Message MSG_GIMO_A_CreateAccount
	{
		PString   requestId;
		PString   psDisplayName;
		PString   psWebId;
	};

	Message MSG_GIMO_Q_GetMigrationInfoBlock // 3.11
	{
		PString   requestId;
		PString   psWebId;
		PString   psMigrationToken;
	};
	Message MSG_GIMO_A_GetMigrationInfoBlock
	{
		PString   requestId;
		PString   psDisplayName;
		PString   psWebId;
		PString   psFirstName;
		PString   psLastName;
		PString   psEmailAddress;
		PString   psSex;         // M or F or empty string going to GIMO
		PString   psBirthday;    // YYYY-MM-DD
		PString   psAddress1;
		PString   psAddress2;
		PString   psCity;
		PString   psState;       // The State of the Player, or an empty string if not applicable
		PString   psZip;         //  an empty string if not applicable
		PString   psCountry;     // as registered by GIMO, ISO 3166-1 alpha-2 code, as the player specified it on the sign-up form
		PString   psPhone;       // an empty string if not applicable
		PString   psMobile;      // an empty string if not applicable
	};

	Message MSG_GIMO_Q_MigratePlayer // 3.12
	{
		PString   requestId;
		PString   psWebId;
		PString   psMigrationToken;
		PString   gmIpAddress;
		PString   gmFirstName;
		PString   gmLastName;
		PString   gmEmailAddress;
		PString   gmSex;         // M or F or N	 from GIMO  (Gateway converts N to empty string for PS servers)
		PString   gmBirthday;    // YYYY-MM-DD
		PString   gmAddress1;
		PString   gmAddress2;
		PString   gmCity;
		PString   gmState;       // The State of the Player, or an empty string if not applicable
		PString   gmZip;         //  an empty string if not applicable
		PString   gmCountry;     // as registered by GIMO, ISO 3166-1 alpha-2 code, as the player specified it on the sign-up form
		PString   gmPhone;       // an empty string if not applicable
		PString   gmMobile;      // an empty string if not applicable
		bool      gmBlacklisted; // true 1 yes
	};
	Message MSG_GIMO_A_MigratePlayer
	{
		PString   requestId;
		PString   psDisplayName;
		PString   psWebId;
	};

	// MSG_GIMO_Q_RequestCloseAccount 3.13 

	Message MSG_GIMO_Q_CancelPendingCashout // 3.14 as of 2019-03-06 this is no longer found in the BRD
	{
		PString   requestId;
		PString   psWebId;
		UINT64    psTransactionId;
	};
	Message MSG_GIMO_A_CancelPendingCashout
	{
		PString   requestId;
		PString   psWebId;
		UINT64    psTransactionId;
		PString   gmTransactionId;
	};
	Message MSG_GIMO_Q_FinalizeCashout // 3.15 added 2019-03-26
	{
		PString   requestId;
		PString   psWebId;
		UINT64    psTransactionId;
		UINT16    gmTransactionState; // enum SwissGw_TransactionState
	};
	Message MSG_GIMO_A_FinalizeCashout
	{
		PString   requestId;
		PString   psWebId;
		UINT64    psTransactionId;
		PString   gmTransactionId;
	};
	Message MSG_GIMO_Q_GetDisplayName // 3.16 added 2019-06-06 PYR-103623
	{
		PString   requestId;
		PString   psWebId;
	};
	Message MSG_GIMO_A_GetDisplayName
	{
		PString   requestId;
		PString   psDisplayName;
	};
};
